ARM GAS  /tmp/cc2KcRpR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB149:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "Eagle_TRT.h"
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** #include "stdio.h"
  29:Src/main.c    **** #include "stdlib.h"
  30:Src/main.c    **** #include <inttypes.h>
  31:Src/main.c    **** #include "stm32f4xx_hal_gpio.h"
  32:Src/main.c    **** #include "stm32f4xx_it.h"
ARM GAS  /tmp/cc2KcRpR.s 			page 2


  33:Src/main.c    **** #include <math.h>
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** ADC_HandleTypeDef hadc1;
  53:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_HandleTypeDef hcan1;
  56:Src/main.c    **** 
  57:Src/main.c    **** SPI_HandleTypeDef hspi1;
  58:Src/main.c    **** 
  59:Src/main.c    **** TIM_HandleTypeDef htim2;
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** TIM_HandleTypeDef htim4;
  62:Src/main.c    **** TIM_HandleTypeDef htim5;
  63:Src/main.c    **** TIM_HandleTypeDef htim6;
  64:Src/main.c    **** TIM_HandleTypeDef htim7;
  65:Src/main.c    **** TIM_HandleTypeDef htim10;
  66:Src/main.c    **** TIM_HandleTypeDef htim11;
  67:Src/main.c    **** 
  68:Src/main.c    **** UART_HandleTypeDef huart1;
  69:Src/main.c    **** UART_HandleTypeDef huart2;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  73:Src/main.c    **** extern can_stc can;
  74:Src/main.c    **** extern imu_stc accel;
  75:Src/main.c    **** extern imu_stc gyro;
  76:Src/main.c    **** extern enc_stc enc;
  77:Src/main.c    **** extern pot_stc pot_1;
  78:Src/main.c    **** extern pot_stc pot_2;
  79:Src/main.c    **** extern pot_stc pot_3;
  80:Src/main.c    **** 
  81:Src/main.c    **** CAN_FilterTypeDef sFilter;
  82:Src/main.c    **** uint32_t valMax0, valMin0, val0rang;
  83:Src/main.c    **** uint32_t ADC_buffer[4], val[3];
  84:Src/main.c    **** char txt[100];
  85:Src/main.c    **** int flag = 0;
  86:Src/main.c    **** int multiplier = 1;
  87:Src/main.c    **** int timer_factor = 2;
  88:Src/main.c    **** int command_flag = 0;
  89:Src/main.c    **** int calibration_flag = 0;
ARM GAS  /tmp/cc2KcRpR.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance2 = {.Instance = TIM2};
  92:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance3 = {.Instance = TIM3};
  93:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance4 = {.Instance = TIM4};
  94:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance5 = {.Instance = TIM5};
  95:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  96:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  97:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance10 = {.Instance = TIM10};
  98:Src/main.c    **** 
  99:Src/main.c    **** gps_struct gps_main;
 100:Src/main.c    **** /* USER CODE END PV */
 101:Src/main.c    **** 
 102:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 103:Src/main.c    **** void SystemClock_Config(void);
 104:Src/main.c    **** static void MX_GPIO_Init(void);
 105:Src/main.c    **** static void MX_DMA_Init(void);
 106:Src/main.c    **** static void MX_USART2_UART_Init(void);
 107:Src/main.c    **** static void MX_CAN1_Init(void);
 108:Src/main.c    **** static void MX_SPI1_Init(void);
 109:Src/main.c    **** static void MX_ADC1_Init(void);
 110:Src/main.c    **** static void MX_USART1_UART_Init(void);
 111:Src/main.c    **** static void MX_TIM2_Init(void);
 112:Src/main.c    **** static void MX_TIM3_Init(void);
 113:Src/main.c    **** static void MX_TIM4_Init(void);
 114:Src/main.c    **** static void MX_TIM5_Init(void);
 115:Src/main.c    **** static void MX_TIM6_Init(void);
 116:Src/main.c    **** static void MX_TIM7_Init(void);
 117:Src/main.c    **** static void MX_TIM10_Init(void);
 118:Src/main.c    **** static void MX_TIM11_Init(void);
 119:Src/main.c    **** static void MX_NVIC_Init(void);
 120:Src/main.c    **** /* USER CODE BEGIN PFP */
 121:Src/main.c    **** 
 122:Src/main.c    **** int send_CAN_data(uint32_t);
 123:Src/main.c    **** 
 124:Src/main.c    **** /* USER CODE END PFP */
 125:Src/main.c    **** 
 126:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 127:Src/main.c    **** /* USER CODE BEGIN 0 */
 128:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 129:Src/main.c    **** {
 130:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 131:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 132:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 133:Src/main.c    ****     /*int txt_1[100];
 134:Src/main.c    ****     sprintf(txt_1, "sterzo: %d %d %d\r\n", pot_1.val, pot_2.val, pot_3.val);
 135:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)txt_1, strlen(txt_1), 10);*/
 136:Src/main.c    **** }
 137:Src/main.c    **** 
 138:Src/main.c    **** int steer_enc_prescaler;
 139:Src/main.c    **** int encoder_counter;
 140:Src/main.c    **** int previous_millis;
 141:Src/main.c    **** 
 142:Src/main.c    **** /* USER CODE END 0 */
 143:Src/main.c    **** 
 144:Src/main.c    **** /**
 145:Src/main.c    ****   * @brief  The application entry point.
 146:Src/main.c    ****   * @retval int
ARM GAS  /tmp/cc2KcRpR.s 			page 4


 147:Src/main.c    ****   */
 148:Src/main.c    **** int main(void)
 149:Src/main.c    **** {
 150:Src/main.c    ****     /* USER CODE BEGIN 1 */
 151:Src/main.c    ****     /* USER CODE END 1 */
 152:Src/main.c    **** 
 153:Src/main.c    ****     /* MCU Configuration--------------------------------------------------------*/
 154:Src/main.c    **** 
 155:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 156:Src/main.c    ****     HAL_Init();
 157:Src/main.c    **** 
 158:Src/main.c    ****     /* USER CODE BEGIN Init */
 159:Src/main.c    **** 
 160:Src/main.c    ****     /* USER CODE END Init */
 161:Src/main.c    **** 
 162:Src/main.c    ****     /* Configure the system clock */
 163:Src/main.c    ****     SystemClock_Config();
 164:Src/main.c    **** 
 165:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 166:Src/main.c    **** 
 167:Src/main.c    ****     /* USER CODE END SysInit */
 168:Src/main.c    **** 
 169:Src/main.c    ****     /* Initialize all configured peripherals */
 170:Src/main.c    ****     MX_GPIO_Init();
 171:Src/main.c    ****     MX_DMA_Init();
 172:Src/main.c    ****     MX_USART2_UART_Init();
 173:Src/main.c    ****     MX_CAN1_Init();
 174:Src/main.c    ****     MX_SPI1_Init();
 175:Src/main.c    ****     MX_ADC1_Init();
 176:Src/main.c    ****     MX_USART1_UART_Init();
 177:Src/main.c    ****     MX_TIM2_Init();
 178:Src/main.c    ****     MX_TIM3_Init();
 179:Src/main.c    ****     MX_TIM4_Init();
 180:Src/main.c    ****     MX_TIM5_Init();
 181:Src/main.c    ****     MX_TIM6_Init();
 182:Src/main.c    ****     MX_TIM7_Init();
 183:Src/main.c    ****     MX_TIM10_Init();
 184:Src/main.c    ****     MX_TIM11_Init();
 185:Src/main.c    **** 
 186:Src/main.c    ****     /* Initialize interrupts */
 187:Src/main.c    ****     MX_NVIC_Init();
 188:Src/main.c    ****     /* USER CODE BEGIN 2 */
 189:Src/main.c    **** 
 190:Src/main.c    ****     sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 191:Src/main.c    ****     sFilter.FilterIdLow = 0;
 192:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 193:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 194:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 195:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 196:Src/main.c    ****     sFilter.FilterBank = 0;
 197:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 198:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 199:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 200:Src/main.c    **** 
 201:Src/main.c    ****     HAL_CAN_Start(&hcan1);
 202:Src/main.c    **** 
 203:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
ARM GAS  /tmp/cc2KcRpR.s 			page 5


 204:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 205:Src/main.c    ****     /* USER CODE END 2 */
 206:Src/main.c    **** 
 207:Src/main.c    ****     /* Infinite loop */
 208:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 209:Src/main.c    ****     can.hcan = &hcan1;
 210:Src/main.c    ****     // can initialization //
 211:Src/main.c    **** 
 212:Src/main.c    ****     // imu initialization //
 213:Src/main.c    ****     accel.GPIOx_InUse = GPIOC;
 214:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 215:Src/main.c    ****     accel.hspi = &hspi1;
 216:Src/main.c    **** 
 217:Src/main.c    ****     gyro.GPIOx_InUse = GPIOA;
 218:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 219:Src/main.c    ****     gyro.hspi = &hspi1;
 220:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 221:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 222:Src/main.c    **** 
 223:Src/main.c    ****     if (gps_init(&huart1, &gps_main) == 0)
 224:Src/main.c    ****     {
 225:Src/main.c    ****         //--error--//
 226:Src/main.c    ****     }
 227:Src/main.c    **** 
 228:Src/main.c    ****     steer_enc_prescaler = htim3.Init.Period;
 229:Src/main.c    ****     steer_enc_prescaler /= 3;
 230:Src/main.c    ****     steer_enc_prescaler /= 20;
 231:Src/main.c    ****     steer_enc_prescaler += 40;
 232:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 233:Src/main.c    **** 
 234:Src/main.c    ****     pot_2.max = 4060;
 235:Src/main.c    ****     pot_2.min = 2350;
 236:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 237:Src/main.c    **** 
 238:Src/main.c    ****     enc.ClockPinName = GPIOC;
 239:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 240:Src/main.c    ****     enc.DataPinName = GPIOC;
 241:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 242:Src/main.c    **** 
 243:Src/main.c    ****     enc.dx_wheel = 1;
 244:Src/main.c    ****     enc.interrupt_flag = 0;
 245:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 246:Src/main.c    ****     enc.average_speed = 0;
 247:Src/main.c    ****     enc.wheel_diameter = 0.395;
 248:Src/main.c    ****     enc.data_size = 15;
 249:Src/main.c    ****     enc.clock_period = 2;
 250:Src/main.c    ****     enc.wheel_rotation = 0;
 251:Src/main.c    ****     enc.Km = 0;
 252:Src/main.c    **** 
 253:Src/main.c    ****     enc.max_delta_angle = 40;
 254:Src/main.c    ****     enc.frequency = 0;
 255:Src/main.c    ****     enc.frequency_timer = &htim7;
 256:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 257:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 258:Src/main.c    **** 
 259:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 260:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
ARM GAS  /tmp/cc2KcRpR.s 			page 6


 261:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 262:Src/main.c    ****     //HAL_TIM_Base_Start(&htim5);
 263:Src/main.c    ****     //HAL_TIM_Base_Start(&htim6);
 264:Src/main.c    ****     HAL_TIM_Base_Start(&htim7);
 265:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 266:Src/main.c    **** 
 267:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 268:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 269:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 270:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim5);
 271:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim6);
 272:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim7);
 273:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 274:Src/main.c    **** 
 275:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance2, 0);
 276:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 277:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 278:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance5, 0);
 279:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance6, 0);
 280:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance7, 0);
 281:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 282:Src/main.c    **** 
 283:Src/main.c    ****     // INIT Encoder
 284:Src/main.c    ****     enc_calculate_optimal_frequency(&enc);
 285:Src/main.c    **** 
 286:Src/main.c    ****     accel.scale = 4;
 287:Src/main.c    ****     gyro.scale = 500;
 288:Src/main.c    **** 
 289:Src/main.c    ****     //HAL_Delay(1000);
 290:Src/main.c    ****     LSMD9S0_accel_gyro_init(&accel, &gyro);
 291:Src/main.c    ****     //LSMD9S0_check(&imu);
 292:Src/main.c    **** 
 293:Src/main.c    ****     LSM9DS0_calibration(&accel);
 294:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 295:Src/main.c    **** 
 296:Src/main.c    ****     encoder_counter = 0;
 297:Src/main.c    **** 
 298:Src/main.c    ****     while (1)
 299:Src/main.c    ****     {
 300:Src/main.c    **** 
 301:Src/main.c    ****         /* USER CODE END WHILE */
 302:Src/main.c    **** 
 303:Src/main.c    ****         /* USER CODE BEGIN 3 */
 304:Src/main.c    **** 
 305:Src/main.c    ****         HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 306:Src/main.c    **** 
 307:Src/main.c    ****         // If CAN is free from important messages, send data
 308:Src/main.c    ****         if (command_flag == 0)
 309:Src/main.c    ****         {
 310:Src/main.c    ****             if (previous_millis != HAL_GetTick())
 311:Src/main.c    ****             {
 312:Src/main.c    ****                 send_CAN_data(HAL_GetTick());
 313:Src/main.c    ****                 previous_millis = HAL_GetTick();
 314:Src/main.c    ****             }
 315:Src/main.c    ****         }
 316:Src/main.c    ****         else
 317:Src/main.c    ****         {
ARM GAS  /tmp/cc2KcRpR.s 			page 7


 318:Src/main.c    ****             HAL_Delay(1);
 319:Src/main.c    ****             command_flag = 0;
 320:Src/main.c    ****         }
 321:Src/main.c    ****     }
 322:Src/main.c    ****     /* USER CODE END 3 */
 323:Src/main.c    **** }
 324:Src/main.c    **** 
 325:Src/main.c    **** /**
 326:Src/main.c    ****   * @brief System Clock Configuration
 327:Src/main.c    ****   * @retval None
 328:Src/main.c    ****   */
 329:Src/main.c    **** void SystemClock_Config(void)
 330:Src/main.c    **** {
 331:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 332:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 333:Src/main.c    **** 
 334:Src/main.c    ****     /** Configure the main internal regulator output voltage 
 335:Src/main.c    ****   */
 336:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 337:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 338:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 339:Src/main.c    ****   */
 340:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 341:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 342:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 343:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 344:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 345:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 346:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 347:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 348:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 349:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 350:Src/main.c    ****     {
 351:Src/main.c    ****         Error_Handler();
 352:Src/main.c    ****     }
 353:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 354:Src/main.c    ****   */
 355:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 356:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 357:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 358:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 359:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 360:Src/main.c    **** 
 361:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 362:Src/main.c    ****     {
 363:Src/main.c    ****         Error_Handler();
 364:Src/main.c    ****     }
 365:Src/main.c    **** }
 366:Src/main.c    **** 
 367:Src/main.c    **** /**
 368:Src/main.c    ****   * @brief NVIC Configuration.
 369:Src/main.c    ****   * @retval None
 370:Src/main.c    ****   */
 371:Src/main.c    **** static void MX_NVIC_Init(void)
 372:Src/main.c    **** {
 373:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 374:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
ARM GAS  /tmp/cc2KcRpR.s 			page 8


 375:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 376:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 377:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 378:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 379:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 380:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 381:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 382:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 383:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 384:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 385:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 386:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 387:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 388:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 389:Src/main.c    ****     HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 390:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 391:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 392:Src/main.c    ****     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 393:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 394:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 395:Src/main.c    ****     HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 396:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 397:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 398:Src/main.c    ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 399:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 400:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 401:Src/main.c    ****     HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 402:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 403:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 404:Src/main.c    ****     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 405:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 406:Src/main.c    **** }
 407:Src/main.c    **** 
 408:Src/main.c    **** /**
 409:Src/main.c    ****   * @brief ADC1 Initialization Function
 410:Src/main.c    ****   * @param None
 411:Src/main.c    ****   * @retval None
 412:Src/main.c    ****   */
 413:Src/main.c    **** static void MX_ADC1_Init(void)
 414:Src/main.c    **** {
 415:Src/main.c    **** 
 416:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 0 */
 417:Src/main.c    **** 
 418:Src/main.c    ****     /* USER CODE END ADC1_Init 0 */
 419:Src/main.c    **** 
 420:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 421:Src/main.c    **** 
 422:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 1 */
 423:Src/main.c    **** 
 424:Src/main.c    ****     /* USER CODE END ADC1_Init 1 */
 425:Src/main.c    ****     /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of c
 426:Src/main.c    ****   */
 427:Src/main.c    ****     hadc1.Instance = ADC1;
 428:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 429:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 430:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 431:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
ARM GAS  /tmp/cc2KcRpR.s 			page 9


 432:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 433:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 434:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 435:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 436:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 437:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 438:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 439:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 440:Src/main.c    ****     {
 441:Src/main.c    ****         Error_Handler();
 442:Src/main.c    ****     }
 443:Src/main.c    ****     /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and 
 444:Src/main.c    ****   */
 445:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 446:Src/main.c    ****     sConfig.Rank = 1;
 447:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 448:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 449:Src/main.c    ****     {
 450:Src/main.c    ****         Error_Handler();
 451:Src/main.c    ****     }
 452:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 2 */
 453:Src/main.c    **** 
 454:Src/main.c    ****     /* USER CODE END ADC1_Init 2 */
 455:Src/main.c    **** }
 456:Src/main.c    **** 
 457:Src/main.c    **** /**
 458:Src/main.c    ****   * @brief CAN1 Initialization Function
 459:Src/main.c    ****   * @param None
 460:Src/main.c    ****   * @retval None
 461:Src/main.c    ****   */
 462:Src/main.c    **** static void MX_CAN1_Init(void)
 463:Src/main.c    **** {
 464:Src/main.c    **** 
 465:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 0 */
 466:Src/main.c    **** 
 467:Src/main.c    ****     /* USER CODE END CAN1_Init 0 */
 468:Src/main.c    **** 
 469:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 1 */
 470:Src/main.c    **** 
 471:Src/main.c    ****     /* USER CODE END CAN1_Init 1 */
 472:Src/main.c    ****     hcan1.Instance = CAN1;
 473:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 474:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 475:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 476:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 477:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 478:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 479:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 480:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 481:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 482:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 483:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 484:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 485:Src/main.c    ****     {
 486:Src/main.c    ****         Error_Handler();
 487:Src/main.c    ****     }
 488:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 2 */
ARM GAS  /tmp/cc2KcRpR.s 			page 10


 489:Src/main.c    **** 
 490:Src/main.c    ****     /* USER CODE END CAN1_Init 2 */
 491:Src/main.c    **** }
 492:Src/main.c    **** 
 493:Src/main.c    **** /**
 494:Src/main.c    ****   * @brief SPI1 Initialization Function
 495:Src/main.c    ****   * @param None
 496:Src/main.c    ****   * @retval None
 497:Src/main.c    ****   */
 498:Src/main.c    **** static void MX_SPI1_Init(void)
 499:Src/main.c    **** {
 500:Src/main.c    **** 
 501:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 0 */
 502:Src/main.c    **** 
 503:Src/main.c    ****     /* USER CODE END SPI1_Init 0 */
 504:Src/main.c    **** 
 505:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 1 */
 506:Src/main.c    **** 
 507:Src/main.c    ****     /* USER CODE END SPI1_Init 1 */
 508:Src/main.c    ****     /* SPI1 parameter configuration*/
 509:Src/main.c    ****     hspi1.Instance = SPI1;
 510:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 511:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 512:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 513:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 514:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 515:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 516:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 517:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 518:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 519:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 520:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 521:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 522:Src/main.c    ****     {
 523:Src/main.c    ****         Error_Handler();
 524:Src/main.c    ****     }
 525:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 2 */
 526:Src/main.c    **** 
 527:Src/main.c    ****     /* USER CODE END SPI1_Init 2 */
 528:Src/main.c    **** }
 529:Src/main.c    **** 
 530:Src/main.c    **** /**
 531:Src/main.c    ****   * @brief TIM2 Initialization Function
 532:Src/main.c    ****   * @param None
 533:Src/main.c    ****   * @retval None
 534:Src/main.c    ****   */
 535:Src/main.c    **** static void MX_TIM2_Init(void)
 536:Src/main.c    **** {
 537:Src/main.c    **** 
 538:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 0 */
 539:Src/main.c    **** 
 540:Src/main.c    ****     /* USER CODE END TIM2_Init 0 */
 541:Src/main.c    **** 
 542:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 543:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 544:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 545:Src/main.c    **** 
ARM GAS  /tmp/cc2KcRpR.s 			page 11


 546:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 1 */
 547:Src/main.c    **** 
 548:Src/main.c    ****     /* USER CODE END TIM2_Init 1 */
 549:Src/main.c    ****     htim2.Instance = TIM2;
 550:Src/main.c    ****     htim2.Init.Prescaler = 36;
 551:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 552:Src/main.c    ****     htim2.Init.Period = 1000;
 553:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 554:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 555:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 556:Src/main.c    ****     {
 557:Src/main.c    ****         Error_Handler();
 558:Src/main.c    ****     }
 559:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 560:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 561:Src/main.c    ****     {
 562:Src/main.c    ****         Error_Handler();
 563:Src/main.c    ****     }
 564:Src/main.c    ****     sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 565:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 566:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 567:Src/main.c    ****     {
 568:Src/main.c    ****         Error_Handler();
 569:Src/main.c    ****     }
 570:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 571:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 572:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 573:Src/main.c    ****     {
 574:Src/main.c    ****         Error_Handler();
 575:Src/main.c    ****     }
 576:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 2 */
 577:Src/main.c    **** 
 578:Src/main.c    ****     /* USER CODE END TIM2_Init 2 */
 579:Src/main.c    **** }
 580:Src/main.c    **** 
 581:Src/main.c    **** /**
 582:Src/main.c    ****   * @brief TIM3 Initialization Function
 583:Src/main.c    ****   * @param None
 584:Src/main.c    ****   * @retval None
 585:Src/main.c    ****   */
 586:Src/main.c    **** static void MX_TIM3_Init(void)
 587:Src/main.c    **** {
 588:Src/main.c    **** 
 589:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 0 */
 590:Src/main.c    **** 
 591:Src/main.c    ****     /* USER CODE END TIM3_Init 0 */
 592:Src/main.c    **** 
 593:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 594:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 595:Src/main.c    **** 
 596:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 1 */
 597:Src/main.c    **** 
 598:Src/main.c    ****     /* USER CODE END TIM3_Init 1 */
 599:Src/main.c    ****     htim3.Instance = TIM3;
 600:Src/main.c    ****     htim3.Init.Prescaler = 18;
 601:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 602:Src/main.c    ****     htim3.Init.Period = 65500;
ARM GAS  /tmp/cc2KcRpR.s 			page 12


 603:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 604:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 605:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 606:Src/main.c    ****     {
 607:Src/main.c    ****         Error_Handler();
 608:Src/main.c    ****     }
 609:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 610:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 611:Src/main.c    ****     {
 612:Src/main.c    ****         Error_Handler();
 613:Src/main.c    ****     }
 614:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 615:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 616:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 617:Src/main.c    ****     {
 618:Src/main.c    ****         Error_Handler();
 619:Src/main.c    ****     }
 620:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 2 */
 621:Src/main.c    **** 
 622:Src/main.c    ****     /* USER CODE END TIM3_Init 2 */
 623:Src/main.c    **** }
 624:Src/main.c    **** 
 625:Src/main.c    **** /**
 626:Src/main.c    ****   * @brief TIM4 Initialization Function
 627:Src/main.c    ****   * @param None
 628:Src/main.c    ****   * @retval None
 629:Src/main.c    ****   */
 630:Src/main.c    **** static void MX_TIM4_Init(void)
 631:Src/main.c    **** {
 632:Src/main.c    **** 
 633:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 0 */
 634:Src/main.c    **** 
 635:Src/main.c    ****     /* USER CODE END TIM4_Init 0 */
 636:Src/main.c    **** 
 637:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 638:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 639:Src/main.c    **** 
 640:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 1 */
 641:Src/main.c    **** 
 642:Src/main.c    ****     /* USER CODE END TIM4_Init 1 */
 643:Src/main.c    ****     htim4.Instance = TIM4;
 644:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 645:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 646:Src/main.c    ****     htim4.Init.Period = 2000;
 647:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 648:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 649:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 650:Src/main.c    ****     {
 651:Src/main.c    ****         Error_Handler();
 652:Src/main.c    ****     }
 653:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 654:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 655:Src/main.c    ****     {
 656:Src/main.c    ****         Error_Handler();
 657:Src/main.c    ****     }
 658:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 659:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/cc2KcRpR.s 			page 13


 660:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 661:Src/main.c    ****     {
 662:Src/main.c    ****         Error_Handler();
 663:Src/main.c    ****     }
 664:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 2 */
 665:Src/main.c    **** 
 666:Src/main.c    ****     /* USER CODE END TIM4_Init 2 */
 667:Src/main.c    **** }
 668:Src/main.c    **** 
 669:Src/main.c    **** /**
 670:Src/main.c    ****   * @brief TIM5 Initialization Function
 671:Src/main.c    ****   * @param None
 672:Src/main.c    ****   * @retval None
 673:Src/main.c    ****   */
 674:Src/main.c    **** static void MX_TIM5_Init(void)
 675:Src/main.c    **** {
 676:Src/main.c    **** 
 677:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 0 */
 678:Src/main.c    **** 
 679:Src/main.c    ****     /* USER CODE END TIM5_Init 0 */
 680:Src/main.c    **** 
 681:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 682:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 683:Src/main.c    **** 
 684:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 1 */
 685:Src/main.c    **** 
 686:Src/main.c    ****     /* USER CODE END TIM5_Init 1 */
 687:Src/main.c    ****     htim5.Instance = TIM5;
 688:Src/main.c    ****     htim5.Init.Prescaler = 36;
 689:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 690:Src/main.c    ****     htim5.Init.Period = 2000;
 691:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 692:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 693:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 694:Src/main.c    ****     {
 695:Src/main.c    ****         Error_Handler();
 696:Src/main.c    ****     }
 697:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 698:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 699:Src/main.c    ****     {
 700:Src/main.c    ****         Error_Handler();
 701:Src/main.c    ****     }
 702:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 703:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 704:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 705:Src/main.c    ****     {
 706:Src/main.c    ****         Error_Handler();
 707:Src/main.c    ****     }
 708:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 2 */
 709:Src/main.c    **** 
 710:Src/main.c    ****     /* USER CODE END TIM5_Init 2 */
 711:Src/main.c    **** }
 712:Src/main.c    **** 
 713:Src/main.c    **** /**
 714:Src/main.c    ****   * @brief TIM6 Initialization Function
 715:Src/main.c    ****   * @param None
 716:Src/main.c    ****   * @retval None
ARM GAS  /tmp/cc2KcRpR.s 			page 14


 717:Src/main.c    ****   */
 718:Src/main.c    **** static void MX_TIM6_Init(void)
 719:Src/main.c    **** {
 720:Src/main.c    **** 
 721:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 0 */
 722:Src/main.c    **** 
 723:Src/main.c    ****     /* USER CODE END TIM6_Init 0 */
 724:Src/main.c    **** 
 725:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 726:Src/main.c    **** 
 727:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 1 */
 728:Src/main.c    **** 
 729:Src/main.c    ****     /* USER CODE END TIM6_Init 1 */
 730:Src/main.c    ****     htim6.Instance = TIM6;
 731:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 732:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 733:Src/main.c    ****     htim6.Init.Period = 2000;
 734:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 735:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 736:Src/main.c    ****     {
 737:Src/main.c    ****         Error_Handler();
 738:Src/main.c    ****     }
 739:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 740:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 741:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 742:Src/main.c    ****     {
 743:Src/main.c    ****         Error_Handler();
 744:Src/main.c    ****     }
 745:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 2 */
 746:Src/main.c    **** 
 747:Src/main.c    ****     /* USER CODE END TIM6_Init 2 */
 748:Src/main.c    **** }
 749:Src/main.c    **** 
 750:Src/main.c    **** /**
 751:Src/main.c    ****   * @brief TIM7 Initialization Function
 752:Src/main.c    ****   * @param None
 753:Src/main.c    ****   * @retval None
 754:Src/main.c    ****   */
 755:Src/main.c    **** static void MX_TIM7_Init(void)
 756:Src/main.c    **** {
 757:Src/main.c    **** 
 758:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 0 */
 759:Src/main.c    **** 
 760:Src/main.c    ****     /* USER CODE END TIM7_Init 0 */
 761:Src/main.c    **** 
 762:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 763:Src/main.c    **** 
 764:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 1 */
 765:Src/main.c    **** 
 766:Src/main.c    ****     /* USER CODE END TIM7_Init 1 */
 767:Src/main.c    ****     htim7.Instance = TIM7;
 768:Src/main.c    ****     htim7.Init.Prescaler = 36;
 769:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 770:Src/main.c    ****     htim7.Init.Period = 6000;
 771:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 772:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 773:Src/main.c    ****     {
ARM GAS  /tmp/cc2KcRpR.s 			page 15


 774:Src/main.c    ****         Error_Handler();
 775:Src/main.c    ****     }
 776:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 777:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 778:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 779:Src/main.c    ****     {
 780:Src/main.c    ****         Error_Handler();
 781:Src/main.c    ****     }
 782:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 2 */
 783:Src/main.c    **** 
 784:Src/main.c    ****     /* USER CODE END TIM7_Init 2 */
 785:Src/main.c    **** }
 786:Src/main.c    **** 
 787:Src/main.c    **** /**
 788:Src/main.c    ****   * @brief TIM10 Initialization Function
 789:Src/main.c    ****   * @param None
 790:Src/main.c    ****   * @retval None
 791:Src/main.c    ****   */
 792:Src/main.c    **** static void MX_TIM10_Init(void)
 793:Src/main.c    **** {
 794:Src/main.c    **** 
 795:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 0 */
 796:Src/main.c    **** 
 797:Src/main.c    ****     /* USER CODE END TIM10_Init 0 */
 798:Src/main.c    **** 
 799:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 1 */
 800:Src/main.c    **** 
 801:Src/main.c    ****     /* USER CODE END TIM10_Init 1 */
 802:Src/main.c    ****     htim10.Instance = TIM10;
 803:Src/main.c    ****     htim10.Init.Prescaler = 72;
 804:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 805:Src/main.c    ****     htim10.Init.Period = 500;
 806:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 807:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 808:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 809:Src/main.c    ****     {
 810:Src/main.c    ****         Error_Handler();
 811:Src/main.c    ****     }
 812:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 2 */
 813:Src/main.c    **** 
 814:Src/main.c    ****     /* USER CODE END TIM10_Init 2 */
 815:Src/main.c    **** }
 816:Src/main.c    **** 
 817:Src/main.c    **** /**
 818:Src/main.c    ****   * @brief TIM11 Initialization Function
 819:Src/main.c    ****   * @param None
 820:Src/main.c    ****   * @retval None
 821:Src/main.c    ****   */
 822:Src/main.c    **** static void MX_TIM11_Init(void)
 823:Src/main.c    **** {
 824:Src/main.c    **** 
 825:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 0 */
 826:Src/main.c    **** 
 827:Src/main.c    ****     /* USER CODE END TIM11_Init 0 */
 828:Src/main.c    **** 
 829:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 1 */
 830:Src/main.c    **** 
ARM GAS  /tmp/cc2KcRpR.s 			page 16


 831:Src/main.c    ****     /* USER CODE END TIM11_Init 1 */
 832:Src/main.c    ****     htim11.Instance = TIM11;
 833:Src/main.c    ****     htim11.Init.Prescaler = 0;
 834:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 835:Src/main.c    ****     htim11.Init.Period = 0;
 836:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 837:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 838:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 839:Src/main.c    ****     {
 840:Src/main.c    ****         Error_Handler();
 841:Src/main.c    ****     }
 842:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 2 */
 843:Src/main.c    **** 
 844:Src/main.c    ****     /* USER CODE END TIM11_Init 2 */
 845:Src/main.c    **** }
 846:Src/main.c    **** 
 847:Src/main.c    **** /**
 848:Src/main.c    ****   * @brief USART1 Initialization Function
 849:Src/main.c    ****   * @param None
 850:Src/main.c    ****   * @retval None
 851:Src/main.c    ****   */
 852:Src/main.c    **** static void MX_USART1_UART_Init(void)
 853:Src/main.c    **** {
 854:Src/main.c    **** 
 855:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 0 */
 856:Src/main.c    **** 
 857:Src/main.c    ****     /* USER CODE END USART1_Init 0 */
 858:Src/main.c    **** 
 859:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 1 */
 860:Src/main.c    **** 
 861:Src/main.c    ****     /* USER CODE END USART1_Init 1 */
 862:Src/main.c    ****     huart1.Instance = USART1;
 863:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 864:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 865:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 866:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 867:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 868:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 869:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 870:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 871:Src/main.c    ****     {
 872:Src/main.c    ****         Error_Handler();
 873:Src/main.c    ****     }
 874:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 2 */
 875:Src/main.c    **** 
 876:Src/main.c    ****     /* USER CODE END USART1_Init 2 */
 877:Src/main.c    **** }
 878:Src/main.c    **** 
 879:Src/main.c    **** /**
 880:Src/main.c    ****   * @brief USART2 Initialization Function
 881:Src/main.c    ****   * @param None
 882:Src/main.c    ****   * @retval None
 883:Src/main.c    ****   */
 884:Src/main.c    **** static void MX_USART2_UART_Init(void)
 885:Src/main.c    **** {
 886:Src/main.c    **** 
 887:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 0 */
ARM GAS  /tmp/cc2KcRpR.s 			page 17


 888:Src/main.c    **** 
 889:Src/main.c    ****     /* USER CODE END USART2_Init 0 */
 890:Src/main.c    **** 
 891:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 1 */
 892:Src/main.c    **** 
 893:Src/main.c    ****     /* USER CODE END USART2_Init 1 */
 894:Src/main.c    ****     huart2.Instance = USART2;
 895:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 896:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 897:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 898:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 899:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 900:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 901:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 902:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 903:Src/main.c    ****     {
 904:Src/main.c    ****         Error_Handler();
 905:Src/main.c    ****     }
 906:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 2 */
 907:Src/main.c    **** 
 908:Src/main.c    ****     /* USER CODE END USART2_Init 2 */
 909:Src/main.c    **** }
 910:Src/main.c    **** 
 911:Src/main.c    **** /** 
 912:Src/main.c    ****   * Enable DMA controller clock
 913:Src/main.c    ****   */
 914:Src/main.c    **** static void MX_DMA_Init(void)
 915:Src/main.c    **** {
 916:Src/main.c    **** 
 917:Src/main.c    ****     /* DMA controller clock enable */
 918:Src/main.c    ****     __HAL_RCC_DMA2_CLK_ENABLE();
 919:Src/main.c    **** 
 920:Src/main.c    ****     /* DMA interrupt init */
 921:Src/main.c    ****     /* DMA2_Stream0_IRQn interrupt configuration */
 922:Src/main.c    ****     HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 923:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 924:Src/main.c    **** }
 925:Src/main.c    **** 
 926:Src/main.c    **** /**
 927:Src/main.c    ****   * @brief GPIO Initialization Function
 928:Src/main.c    ****   * @param None
 929:Src/main.c    ****   * @retval None
 930:Src/main.c    ****   */
 931:Src/main.c    **** static void MX_GPIO_Init(void)
 932:Src/main.c    **** {
  27              		.loc 1 932 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
ARM GAS  /tmp/cc2KcRpR.s 			page 18


  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 933:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 933 0
  44 0006 0024     		movs	r4, #0
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 934:Src/main.c    **** 
 935:Src/main.c    ****     /* GPIO Ports Clock Enable */
 936:Src/main.c    ****     __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 936 0
  52 0012 0194     		str	r4, [sp, #4]
  53 0014 354B     		ldr	r3, .L3
  54 0016 1A6B     		ldr	r2, [r3, #48]
  55 0018 42F08002 		orr	r2, r2, #128
  56 001c 1A63     		str	r2, [r3, #48]
  57 001e 1A6B     		ldr	r2, [r3, #48]
  58 0020 02F08002 		and	r2, r2, #128
  59 0024 0192     		str	r2, [sp, #4]
  60 0026 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 937:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 937 0
  64 0028 0294     		str	r4, [sp, #8]
  65 002a 1A6B     		ldr	r2, [r3, #48]
  66 002c 42F00102 		orr	r2, r2, #1
  67 0030 1A63     		str	r2, [r3, #48]
  68 0032 1A6B     		ldr	r2, [r3, #48]
  69 0034 02F00102 		and	r2, r2, #1
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 938:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  74              		.loc 1 938 0
  75 003c 0394     		str	r4, [sp, #12]
  76 003e 1A6B     		ldr	r2, [r3, #48]
  77 0040 42F00202 		orr	r2, r2, #2
  78 0044 1A63     		str	r2, [r3, #48]
  79 0046 1A6B     		ldr	r2, [r3, #48]
  80 0048 02F00202 		and	r2, r2, #2
  81 004c 0392     		str	r2, [sp, #12]
  82 004e 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 939:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  85              		.loc 1 939 0
  86 0050 0494     		str	r4, [sp, #16]
  87 0052 1A6B     		ldr	r2, [r3, #48]
  88 0054 42F00402 		orr	r2, r2, #4
ARM GAS  /tmp/cc2KcRpR.s 			page 19


  89 0058 1A63     		str	r2, [r3, #48]
  90 005a 1B6B     		ldr	r3, [r3, #48]
  91 005c 03F00403 		and	r3, r3, #4
  92 0060 0493     		str	r3, [sp, #16]
  93 0062 049B     		ldr	r3, [sp, #16]
  94              	.LBE5:
 940:Src/main.c    **** 
 941:Src/main.c    ****     /*Configure GPIO pin Output Level */
 942:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  95              		.loc 1 942 0
  96 0064 224D     		ldr	r5, .L3+4
  97 0066 0122     		movs	r2, #1
  98 0068 4021     		movs	r1, #64
  99 006a 2846     		mov	r0, r5
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 943:Src/main.c    **** 
 944:Src/main.c    ****     /*Configure GPIO pin Output Level */
 945:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 102              		.loc 1 945 0
 103 0070 2246     		mov	r2, r4
 104 0072 4FF40071 		mov	r1, #512
 105 0076 2846     		mov	r0, r5
 106 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 946:Src/main.c    **** 
 947:Src/main.c    ****     /*Configure GPIO pin Output Level */
 948:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 108              		.loc 1 948 0
 109 007c DFF87880 		ldr	r8, .L3+12
 110 0080 2246     		mov	r2, r4
 111 0082 4FF48071 		mov	r1, #256
 112 0086 4046     		mov	r0, r8
 113 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL2:
 949:Src/main.c    **** 
 950:Src/main.c    ****     /*Configure GPIO pin : PC6 */
 951:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_6;
 115              		.loc 1 951 0
 116 008c 4023     		movs	r3, #64
 117 008e 0593     		str	r3, [sp, #20]
 952:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 952 0
 119 0090 0127     		movs	r7, #1
 120 0092 0697     		str	r7, [sp, #24]
 953:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 953 0
 122 0094 0794     		str	r4, [sp, #28]
 954:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 123              		.loc 1 954 0
 124 0096 0323     		movs	r3, #3
 125 0098 0893     		str	r3, [sp, #32]
 955:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 126              		.loc 1 955 0
 127 009a 05A9     		add	r1, sp, #20
 128 009c 2846     		mov	r0, r5
 129 009e FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  /tmp/cc2KcRpR.s 			page 20


 130              	.LVL3:
 956:Src/main.c    **** 
 957:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 958:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 131              		.loc 1 958 0
 132 00a2 4FF48076 		mov	r6, #256
 133 00a6 0596     		str	r6, [sp, #20]
 959:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 959 0
 135 00a8 0694     		str	r4, [sp, #24]
 960:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 960 0
 137 00aa 0794     		str	r4, [sp, #28]
 961:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 138              		.loc 1 961 0
 139 00ac 05A9     		add	r1, sp, #20
 140 00ae 2846     		mov	r0, r5
 141 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL4:
 962:Src/main.c    **** 
 963:Src/main.c    ****     /*Configure GPIO pin : PC9 */
 964:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_9;
 143              		.loc 1 964 0
 144 00b4 4FF40073 		mov	r3, #512
 145 00b8 0593     		str	r3, [sp, #20]
 965:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 965 0
 147 00ba 0697     		str	r7, [sp, #24]
 966:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 966 0
 149 00bc 0794     		str	r4, [sp, #28]
 967:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 150              		.loc 1 967 0
 151 00be 0894     		str	r4, [sp, #32]
 968:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 152              		.loc 1 968 0
 153 00c0 05A9     		add	r1, sp, #20
 154 00c2 2846     		mov	r0, r5
 155 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL5:
 969:Src/main.c    **** 
 970:Src/main.c    ****     /*Configure GPIO pin : PA8 */
 971:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 157              		.loc 1 971 0
 158 00c8 0596     		str	r6, [sp, #20]
 972:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 159              		.loc 1 972 0
 160 00ca 0697     		str	r7, [sp, #24]
 973:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 973 0
 162 00cc 0794     		str	r4, [sp, #28]
 974:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 163              		.loc 1 974 0
 164 00ce 0894     		str	r4, [sp, #32]
 975:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 975 0
 166 00d0 05A9     		add	r1, sp, #20
ARM GAS  /tmp/cc2KcRpR.s 			page 21


 167 00d2 4046     		mov	r0, r8
 168 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL6:
 976:Src/main.c    **** 
 977:Src/main.c    ****     /*Configure GPIO pin : PB8 */
 978:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 170              		.loc 1 978 0
 171 00d8 0596     		str	r6, [sp, #20]
 979:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 172              		.loc 1 979 0
 173 00da 0694     		str	r4, [sp, #24]
 980:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 174              		.loc 1 980 0
 175 00dc 0794     		str	r4, [sp, #28]
 981:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 176              		.loc 1 981 0
 177 00de 05A9     		add	r1, sp, #20
 178 00e0 0448     		ldr	r0, .L3+8
 179 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL7:
 982:Src/main.c    **** }
 181              		.loc 1 982 0
 182 00e6 0AB0     		add	sp, sp, #40
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 24
 185              		@ sp needed
 186 00e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 187              	.L4:
 188              		.align	2
 189              	.L3:
 190 00ec 00380240 		.word	1073887232
 191 00f0 00080240 		.word	1073874944
 192 00f4 00040240 		.word	1073873920
 193 00f8 00000240 		.word	1073872896
 194              		.cfi_endproc
 195              	.LFE149:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	MX_DMA_Init:
 205              	.LFB148:
 915:Src/main.c    **** 
 206              		.loc 1 915 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 16
 217              	.LBB6:
ARM GAS  /tmp/cc2KcRpR.s 			page 22


 918:Src/main.c    **** 
 218              		.loc 1 918 0
 219 0004 0021     		movs	r1, #0
 220 0006 0191     		str	r1, [sp, #4]
 221 0008 094B     		ldr	r3, .L7
 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F48002 		orr	r2, r2, #4194304
 224 0010 1A63     		str	r2, [r3, #48]
 225 0012 1B6B     		ldr	r3, [r3, #48]
 226 0014 03F48003 		and	r3, r3, #4194304
 227 0018 0193     		str	r3, [sp, #4]
 228 001a 019B     		ldr	r3, [sp, #4]
 229              	.LBE6:
 922:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 922 0
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL8:
 923:Src/main.c    **** }
 235              		.loc 1 923 0
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL9:
 924:Src/main.c    **** 
 239              		.loc 1 924 0
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE148:
 252              		.section	.text.MX_NVIC_Init,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	MX_NVIC_Init:
 260              	.LFB134:
 372:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 261              		.loc 1 372 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 374:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 270              		.loc 1 374 0
ARM GAS  /tmp/cc2KcRpR.s 			page 23


 271 0002 0022     		movs	r2, #0
 272 0004 1146     		mov	r1, r2
 273 0006 1320     		movs	r0, #19
 274 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 275              	.LVL10:
 375:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 276              		.loc 1 375 0
 277 000c 1320     		movs	r0, #19
 278 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 279              	.LVL11:
 377:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 280              		.loc 1 377 0
 281 0012 0022     		movs	r2, #0
 282 0014 1146     		mov	r1, r2
 283 0016 1420     		movs	r0, #20
 284 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 285              	.LVL12:
 378:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 286              		.loc 1 378 0
 287 001c 1420     		movs	r0, #20
 288 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 289              	.LVL13:
 380:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 290              		.loc 1 380 0
 291 0022 0022     		movs	r2, #0
 292 0024 1146     		mov	r1, r2
 293 0026 1520     		movs	r0, #21
 294 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL14:
 381:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 296              		.loc 1 381 0
 297 002c 1520     		movs	r0, #21
 298 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 299              	.LVL15:
 383:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 300              		.loc 1 383 0
 301 0032 0022     		movs	r2, #0
 302 0034 1146     		mov	r1, r2
 303 0036 1620     		movs	r0, #22
 304 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 305              	.LVL16:
 384:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 306              		.loc 1 384 0
 307 003c 1620     		movs	r0, #22
 308 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 309              	.LVL17:
 386:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 310              		.loc 1 386 0
 311 0042 0022     		movs	r2, #0
 312 0044 1146     		mov	r1, r2
 313 0046 1220     		movs	r0, #18
 314 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 315              	.LVL18:
 387:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 316              		.loc 1 387 0
 317 004c 1220     		movs	r0, #18
 318 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /tmp/cc2KcRpR.s 			page 24


 319              	.LVL19:
 389:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 320              		.loc 1 389 0
 321 0052 0022     		movs	r2, #0
 322 0054 1146     		mov	r1, r2
 323 0056 3720     		movs	r0, #55
 324 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 325              	.LVL20:
 390:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 326              		.loc 1 390 0
 327 005c 3720     		movs	r0, #55
 328 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 329              	.LVL21:
 392:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 330              		.loc 1 392 0
 331 0062 0022     		movs	r2, #0
 332 0064 1146     		mov	r1, r2
 333 0066 3620     		movs	r0, #54
 334 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 335              	.LVL22:
 393:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 336              		.loc 1 393 0
 337 006c 3620     		movs	r0, #54
 338 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 339              	.LVL23:
 395:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 340              		.loc 1 395 0
 341 0072 0022     		movs	r2, #0
 342 0074 1146     		mov	r1, r2
 343 0076 3220     		movs	r0, #50
 344 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 345              	.LVL24:
 396:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 346              		.loc 1 396 0
 347 007c 3220     		movs	r0, #50
 348 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 349              	.LVL25:
 398:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 350              		.loc 1 398 0
 351 0082 0022     		movs	r2, #0
 352 0084 1146     		mov	r1, r2
 353 0086 1C20     		movs	r0, #28
 354 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 355              	.LVL26:
 399:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 356              		.loc 1 399 0
 357 008c 1C20     		movs	r0, #28
 358 008e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 359              	.LVL27:
 401:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 360              		.loc 1 401 0
 361 0092 0022     		movs	r2, #0
 362 0094 1146     		mov	r1, r2
 363 0096 1920     		movs	r0, #25
 364 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 365              	.LVL28:
 402:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
ARM GAS  /tmp/cc2KcRpR.s 			page 25


 366              		.loc 1 402 0
 367 009c 1920     		movs	r0, #25
 368 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 369              	.LVL29:
 404:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 370              		.loc 1 404 0
 371 00a2 0022     		movs	r2, #0
 372 00a4 1146     		mov	r1, r2
 373 00a6 2520     		movs	r0, #37
 374 00a8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 375              	.LVL30:
 405:Src/main.c    **** }
 376              		.loc 1 405 0
 377 00ac 2520     		movs	r0, #37
 378 00ae FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 379              	.LVL31:
 380 00b2 08BD     		pop	{r3, pc}
 381              		.cfi_endproc
 382              	.LFE134:
 384              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_ADC_ConvCpltCallback
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	HAL_ADC_ConvCpltCallback:
 393              	.LFB131:
 129:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 394              		.loc 1 129 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL32:
 130:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 400              		.loc 1 130 0
 401 0000 054B     		ldr	r3, .L12
 402 0002 1968     		ldr	r1, [r3]
 403 0004 054A     		ldr	r2, .L12+4
 404 0006 1161     		str	r1, [r2, #16]
 131:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 405              		.loc 1 131 0
 406 0008 5968     		ldr	r1, [r3, #4]
 407 000a 054A     		ldr	r2, .L12+8
 408 000c 1161     		str	r1, [r2, #16]
 132:Src/main.c    ****     /*int txt_1[100];
 409              		.loc 1 132 0
 410 000e 9A68     		ldr	r2, [r3, #8]
 411 0010 044B     		ldr	r3, .L12+12
 412 0012 1A61     		str	r2, [r3, #16]
 413 0014 7047     		bx	lr
 414              	.L13:
 415 0016 00BF     		.align	2
 416              	.L12:
 417 0018 00000000 		.word	ADC_buffer
 418 001c 00000000 		.word	pot_1
ARM GAS  /tmp/cc2KcRpR.s 			page 26


 419 0020 00000000 		.word	pot_2
 420 0024 00000000 		.word	pot_3
 421              		.cfi_endproc
 422              	.LFE131:
 424              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 425              		.align	1
 426              		.global	HAL_UART_RxCpltCallback
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	HAL_UART_RxCpltCallback:
 433              	.LFB150:
 983:Src/main.c    **** 
 984:Src/main.c    **** /* USER CODE BEGIN 4 */
 985:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 986:Src/main.c    **** {
 434              		.loc 1 986 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL33:
 439 0000 08B5     		push	{r3, lr}
 440              	.LCFI7:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 3, -8
 443              		.cfi_offset 14, -4
 987:Src/main.c    ****     if (huart == &huart1)
 444              		.loc 1 987 0
 445 0002 044B     		ldr	r3, .L18
 446 0004 9842     		cmp	r0, r3
 447 0006 00D0     		beq	.L17
 448              	.LVL34:
 449              	.L14:
 450 0008 08BD     		pop	{r3, pc}
 451              	.LVL35:
 452              	.L17:
 988:Src/main.c    ****     {
 989:Src/main.c    ****         gps_read_it(huart, &gps_main);
 453              		.loc 1 989 0
 454 000a 0349     		ldr	r1, .L18+4
 455 000c FFF7FEFF 		bl	gps_read_it
 456              	.LVL36:
 990:Src/main.c    ****     }
 991:Src/main.c    **** }
 457              		.loc 1 991 0
 458 0010 FAE7     		b	.L14
 459              	.L19:
 460 0012 00BF     		.align	2
 461              	.L18:
 462 0014 00000000 		.word	huart1
 463 0018 00000000 		.word	gps_main
 464              		.cfi_endproc
 465              	.LFE150:
 467              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 468              		.align	1
 469              		.global	HAL_UART_TxCpltCallback
ARM GAS  /tmp/cc2KcRpR.s 			page 27


 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	HAL_UART_TxCpltCallback:
 476              	.LFB151:
 992:Src/main.c    **** 
 993:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 994:Src/main.c    **** {
 477              		.loc 1 994 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL37:
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
 995:Src/main.c    ****     if (huart == &huart2)
 487              		.loc 1 995 0
 488 0002 044B     		ldr	r3, .L24
 489 0004 8342     		cmp	r3, r0
 490 0006 00D0     		beq	.L23
 491              	.LVL38:
 492              	.L20:
 493 0008 08BD     		pop	{r3, pc}
 494              	.LVL39:
 495              	.L23:
 996:Src/main.c    ****     {
 997:Src/main.c    ****         print_it(&huart2);
 496              		.loc 1 997 0
 497 000a 1846     		mov	r0, r3
 498              	.LVL40:
 499 000c FFF7FEFF 		bl	print_it
 500              	.LVL41:
 998:Src/main.c    ****     }
 999:Src/main.c    **** }
 501              		.loc 1 999 0
 502 0010 FAE7     		b	.L20
 503              	.L25:
 504 0012 00BF     		.align	2
 505              	.L24:
 506 0014 00000000 		.word	huart2
 507              		.cfi_endproc
 508              	.LFE151:
 510              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 511              		.align	1
 512              		.global	HAL_CAN_RxFifo0FullCallback
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	HAL_CAN_RxFifo0FullCallback:
 519              	.LFB152:
1000:Src/main.c    **** 
1001:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
ARM GAS  /tmp/cc2KcRpR.s 			page 28


1002:Src/main.c    **** {
 520              		.loc 1 1002 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              	.LVL42:
 525 0000 38B5     		push	{r3, r4, r5, lr}
 526              	.LCFI9:
 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
1003:Src/main.c    ****     /// CALIBRATION CODE///
1004:Src/main.c    ****     int idsave = CAN_Receive(&can);
 532              		.loc 1 1004 0
 533 0002 4B48     		ldr	r0, .L46
 534              	.LVL43:
 535 0004 FFF7FEFF 		bl	CAN_Receive
 536              	.LVL44:
 537 0008 0446     		mov	r4, r0
 538              	.LVL45:
1005:Src/main.c    ****     //201/202
1006:Src/main.c    **** 
1007:Src/main.c    ****     if (idsave == 0x55 || idsave == 0x201)
 539              		.loc 1 1007 0
 540 000a 5528     		cmp	r0, #85
 541 000c 1ED0     		beq	.L27
 542              		.loc 1 1007 0 is_stmt 0 discriminator 1
 543 000e 40F20123 		movw	r3, #513
 544 0012 9842     		cmp	r0, r3
 545 0014 1AD0     		beq	.L27
 546              	.LVL46:
 547              	.L28:
1008:Src/main.c    ****     {
1009:Src/main.c    ****         if (can.dataRx[0] == 0x51 || can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0
1010:Src/main.c    ****         {
1011:Src/main.c    ****             command_flag = 1;
1012:Src/main.c    ****             idsave = 0;
1013:Src/main.c    ****         }
1014:Src/main.c    ****     }
1015:Src/main.c    ****     if (idsave == 0xA0 || idsave == 0xAA || idsave == 0x181)
 548              		.loc 1 1015 0 is_stmt 1
 549 0016 A02C     		cmp	r4, #160
 550 0018 05D0     		beq	.L30
 551              		.loc 1 1015 0 is_stmt 0 discriminator 1
 552 001a AA2C     		cmp	r4, #170
 553 001c 03D0     		beq	.L30
 554              		.loc 1 1015 0 discriminator 2
 555 001e 40F28113 		movw	r3, #385
 556 0022 9C42     		cmp	r4, r3
 557 0024 0DD1     		bne	.L31
 558              	.L30:
1016:Src/main.c    ****     {
1017:Src/main.c    ****         if (can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0
 559              		.loc 1 1017 0 is_stmt 1
 560 0026 424B     		ldr	r3, .L46
ARM GAS  /tmp/cc2KcRpR.s 			page 29


 561 0028 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 562 002a D31E     		subs	r3, r2, #3
 563 002c DBB2     		uxtb	r3, r3
 564 002e 022B     		cmp	r3, #2
 565 0030 03D9     		bls	.L32
 566              		.loc 1 1017 0 is_stmt 0 discriminator 1
 567 0032 082A     		cmp	r2, #8
 568 0034 01D0     		beq	.L32
 569              		.loc 1 1017 0 discriminator 2
 570 0036 D82A     		cmp	r2, #216
 571 0038 03D1     		bne	.L31
 572              	.L32:
1018:Src/main.c    ****         {
1019:Src/main.c    ****             command_flag = 1;
 573              		.loc 1 1019 0 is_stmt 1
 574 003a 0122     		movs	r2, #1
 575 003c 3D4B     		ldr	r3, .L46+4
 576 003e 1A60     		str	r2, [r3]
 577              	.LVL47:
1020:Src/main.c    ****             idsave = 0;
 578              		.loc 1 1020 0
 579 0040 0024     		movs	r4, #0
 580              	.LVL48:
 581              	.L31:
1021:Src/main.c    ****         }
1022:Src/main.c    ****     }
1023:Src/main.c    **** 
1024:Src/main.c    ****     if (idsave == 0xBB)
 582              		.loc 1 1024 0
 583 0042 BB2C     		cmp	r4, #187
 584 0044 17D0     		beq	.L42
 585              	.L33:
1025:Src/main.c    ****     {
1026:Src/main.c    ****         //sprintf(val0, "APPS1: %d \r\n", idsave);  //use "%lu" for long, "%d" for int
1027:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), 10);
1028:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 0))
1029:Src/main.c    ****         {
1030:Src/main.c    ****             set_min(&pot_2);
1031:Src/main.c    ****             calibration_flag = 1;
1032:Src/main.c    **** 
1033:Src/main.c    ****             can.dataTx[0] = 2;
1034:Src/main.c    ****             can.dataTx[1] = 0;
1035:Src/main.c    ****             can.dataTx[2] = 0;
1036:Src/main.c    ****             can.dataTx[3] = 0;
1037:Src/main.c    ****             can.dataTx[4] = 0;
1038:Src/main.c    ****             can.dataTx[5] = 0;
1039:Src/main.c    ****             can.dataTx[6] = 0;
1040:Src/main.c    ****             can.dataTx[7] = 0;
1041:Src/main.c    ****             can.id = 0xBC;
1042:Src/main.c    ****             can.size = 8;
1043:Src/main.c    ****             for (int i = 0; i < 10; i++)
1044:Src/main.c    ****             {
1045:Src/main.c    ****                 CAN_Send(&can);
1046:Src/main.c    ****             }
1047:Src/main.c    ****         }
1048:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 1))
1049:Src/main.c    ****         {
ARM GAS  /tmp/cc2KcRpR.s 			page 30


1050:Src/main.c    ****             set_max(&pot_2);
1051:Src/main.c    ****             calibration_flag = 0;
1052:Src/main.c    **** 
1053:Src/main.c    ****             can.dataTx[0] = 2;
1054:Src/main.c    ****             can.dataTx[1] = 1;
1055:Src/main.c    ****             can.dataTx[2] = 0;
1056:Src/main.c    ****             can.dataTx[3] = 0;
1057:Src/main.c    ****             can.dataTx[4] = 0;
1058:Src/main.c    ****             can.dataTx[5] = 0;
1059:Src/main.c    ****             ;
1060:Src/main.c    ****             can.dataTx[6] = 0;
1061:Src/main.c    ****             can.dataTx[7] = 0;
1062:Src/main.c    ****             can.id = 0xBC;
1063:Src/main.c    ****             can.size = 8;
1064:Src/main.c    ****             for (int i = 0; i < 10; i++)
1065:Src/main.c    ****             {
1066:Src/main.c    ****                 CAN_Send(&can);
1067:Src/main.c    ****             }
1068:Src/main.c    ****         }
1069:Src/main.c    ****         //val0rang = abs(valMax0 - valMin0);
1070:Src/main.c    ****         pot_2.range = abs(pot_2.max - pot_2.min);
1071:Src/main.c    ****         int max_tmp = pot_2.max;
1072:Src/main.c    ****         int min_tmp = pot_2.min;
1073:Src/main.c    ****         if (max_tmp > min_tmp)
1074:Src/main.c    ****         {
1075:Src/main.c    ****             pot_2.max = max_tmp;
1076:Src/main.c    ****             pot_2.min = min_tmp;
1077:Src/main.c    ****         }
1078:Src/main.c    ****         if (max_tmp < min_tmp)
1079:Src/main.c    ****         {
1080:Src/main.c    ****             pot_2.max = min_tmp;
1081:Src/main.c    ****             pot_2.min = max_tmp;
1082:Src/main.c    ****         }
1083:Src/main.c    ****     }
1084:Src/main.c    **** 
1085:Src/main.c    ****     //TIMER Interrupt setup via CAN Message
1086:Src/main.c    ****     if (idsave == 195 && can.dataRx[0] == 1)
 586              		.loc 1 1086 0
 587 0046 C32C     		cmp	r4, #195
 588 0048 65D0     		beq	.L43
 589              	.L26:
 590 004a 38BD     		pop	{r3, r4, r5, pc}
 591              	.LVL49:
 592              	.L27:
1009:Src/main.c    ****         {
 593              		.loc 1 1009 0
 594 004c 384B     		ldr	r3, .L46
 595 004e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 596 0050 512B     		cmp	r3, #81
 597 0052 0BD0     		beq	.L29
1009:Src/main.c    ****         {
 598              		.loc 1 1009 0 is_stmt 0 discriminator 1
 599 0054 032B     		cmp	r3, #3
 600 0056 09D0     		beq	.L29
1009:Src/main.c    ****         {
 601              		.loc 1 1009 0 discriminator 2
 602 0058 042B     		cmp	r3, #4
ARM GAS  /tmp/cc2KcRpR.s 			page 31


 603 005a 07D0     		beq	.L29
1009:Src/main.c    ****         {
 604              		.loc 1 1009 0 discriminator 3
 605 005c 052B     		cmp	r3, #5
 606 005e 05D0     		beq	.L29
1009:Src/main.c    ****         {
 607              		.loc 1 1009 0 discriminator 4
 608 0060 082B     		cmp	r3, #8
 609 0062 03D0     		beq	.L29
1009:Src/main.c    ****         {
 610              		.loc 1 1009 0 discriminator 5
 611 0064 0A2B     		cmp	r3, #10
 612 0066 01D0     		beq	.L29
1009:Src/main.c    ****         {
 613              		.loc 1 1009 0 discriminator 6
 614 0068 0B2B     		cmp	r3, #11
 615 006a D4D1     		bne	.L28
 616              	.L29:
1011:Src/main.c    ****             idsave = 0;
 617              		.loc 1 1011 0 is_stmt 1
 618 006c 0122     		movs	r2, #1
 619 006e 314B     		ldr	r3, .L46+4
 620 0070 1A60     		str	r2, [r3]
 621              	.LVL50:
1012:Src/main.c    ****         }
 622              		.loc 1 1012 0
 623 0072 0024     		movs	r4, #0
 624 0074 CFE7     		b	.L28
 625              	.LVL51:
 626              	.L42:
 627              	.LBB7:
1028:Src/main.c    ****         {
 628              		.loc 1 1028 0
 629 0076 2E4B     		ldr	r3, .L46
 630 0078 1B8A     		ldrh	r3, [r3, #16]
 631 007a 022B     		cmp	r3, #2
 632 007c 11D0     		beq	.L44
 633              	.L34:
1048:Src/main.c    ****         {
 634              		.loc 1 1048 0
 635 007e 2C4B     		ldr	r3, .L46
 636 0080 1B8A     		ldrh	r3, [r3, #16]
 637 0082 B3F5817F 		cmp	r3, #258
 638 0086 29D0     		beq	.L45
 639              	.L37:
1070:Src/main.c    ****         int max_tmp = pot_2.max;
 640              		.loc 1 1070 0
 641 0088 2B4B     		ldr	r3, .L46+8
 642 008a 5968     		ldr	r1, [r3, #4]
 643 008c 9868     		ldr	r0, [r3, #8]
 644 008e 0A1A     		subs	r2, r1, r0
 645 0090 002A     		cmp	r2, #0
 646 0092 B8BF     		it	lt
 647 0094 5242     		rsblt	r2, r2, #0
 648 0096 DA60     		str	r2, [r3, #12]
 649              	.LVL52:
1078:Src/main.c    ****         {
ARM GAS  /tmp/cc2KcRpR.s 			page 32


 650              		.loc 1 1078 0
 651 0098 8142     		cmp	r1, r0
 652 009a D4DA     		bge	.L33
1080:Src/main.c    ****             pot_2.min = max_tmp;
 653              		.loc 1 1080 0
 654 009c 5860     		str	r0, [r3, #4]
1081:Src/main.c    ****         }
 655              		.loc 1 1081 0
 656 009e 9960     		str	r1, [r3, #8]
 657 00a0 D1E7     		b	.L33
 658              	.LVL53:
 659              	.L44:
1030:Src/main.c    ****             calibration_flag = 1;
 660              		.loc 1 1030 0
 661 00a2 2548     		ldr	r0, .L46+8
 662 00a4 FFF7FEFF 		bl	set_min
 663              	.LVL54:
1031:Src/main.c    **** 
 664              		.loc 1 1031 0
 665 00a8 0122     		movs	r2, #1
 666 00aa 244B     		ldr	r3, .L46+12
 667 00ac 1A60     		str	r2, [r3]
1033:Src/main.c    ****             can.dataTx[1] = 0;
 668              		.loc 1 1033 0
 669 00ae 204B     		ldr	r3, .L46
 670 00b0 0222     		movs	r2, #2
 671 00b2 1A72     		strb	r2, [r3, #8]
1034:Src/main.c    ****             can.dataTx[2] = 0;
 672              		.loc 1 1034 0
 673 00b4 0025     		movs	r5, #0
 674 00b6 5D72     		strb	r5, [r3, #9]
1035:Src/main.c    ****             can.dataTx[3] = 0;
 675              		.loc 1 1035 0
 676 00b8 9D72     		strb	r5, [r3, #10]
1036:Src/main.c    ****             can.dataTx[4] = 0;
 677              		.loc 1 1036 0
 678 00ba DD72     		strb	r5, [r3, #11]
1037:Src/main.c    ****             can.dataTx[5] = 0;
 679              		.loc 1 1037 0
 680 00bc 1D73     		strb	r5, [r3, #12]
1038:Src/main.c    ****             can.dataTx[6] = 0;
 681              		.loc 1 1038 0
 682 00be 5D73     		strb	r5, [r3, #13]
1039:Src/main.c    ****             can.dataTx[7] = 0;
 683              		.loc 1 1039 0
 684 00c0 9D73     		strb	r5, [r3, #14]
1040:Src/main.c    ****             can.id = 0xBC;
 685              		.loc 1 1040 0
 686 00c2 DD73     		strb	r5, [r3, #15]
1041:Src/main.c    ****             can.size = 8;
 687              		.loc 1 1041 0
 688 00c4 BC22     		movs	r2, #188
 689 00c6 1A60     		str	r2, [r3]
1042:Src/main.c    ****             for (int i = 0; i < 10; i++)
 690              		.loc 1 1042 0
 691 00c8 0822     		movs	r2, #8
 692 00ca 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cc2KcRpR.s 			page 33


 693              	.LVL55:
 694              	.LBB8:
1043:Src/main.c    ****             {
 695              		.loc 1 1043 0
 696 00cc 03E0     		b	.L35
 697              	.LVL56:
 698              	.L36:
1045:Src/main.c    ****             }
 699              		.loc 1 1045 0 discriminator 3
 700 00ce 1848     		ldr	r0, .L46
 701 00d0 FFF7FEFF 		bl	CAN_Send
 702              	.LVL57:
1043:Src/main.c    ****             {
 703              		.loc 1 1043 0 discriminator 3
 704 00d4 0135     		adds	r5, r5, #1
 705              	.LVL58:
 706              	.L35:
1043:Src/main.c    ****             {
 707              		.loc 1 1043 0 is_stmt 0 discriminator 1
 708 00d6 092D     		cmp	r5, #9
 709 00d8 F9DD     		ble	.L36
 710 00da D0E7     		b	.L34
 711              	.LVL59:
 712              	.L45:
 713              	.LBE8:
1050:Src/main.c    ****             calibration_flag = 0;
 714              		.loc 1 1050 0 is_stmt 1
 715 00dc 1648     		ldr	r0, .L46+8
 716 00de FFF7FEFF 		bl	set_max
 717              	.LVL60:
1051:Src/main.c    **** 
 718              		.loc 1 1051 0
 719 00e2 0025     		movs	r5, #0
 720 00e4 154B     		ldr	r3, .L46+12
 721 00e6 1D60     		str	r5, [r3]
1053:Src/main.c    ****             can.dataTx[1] = 1;
 722              		.loc 1 1053 0
 723 00e8 114B     		ldr	r3, .L46
 724 00ea 0222     		movs	r2, #2
 725 00ec 1A72     		strb	r2, [r3, #8]
1054:Src/main.c    ****             can.dataTx[2] = 0;
 726              		.loc 1 1054 0
 727 00ee 0122     		movs	r2, #1
 728 00f0 5A72     		strb	r2, [r3, #9]
1055:Src/main.c    ****             can.dataTx[3] = 0;
 729              		.loc 1 1055 0
 730 00f2 9D72     		strb	r5, [r3, #10]
1056:Src/main.c    ****             can.dataTx[4] = 0;
 731              		.loc 1 1056 0
 732 00f4 DD72     		strb	r5, [r3, #11]
1057:Src/main.c    ****             can.dataTx[5] = 0;
 733              		.loc 1 1057 0
 734 00f6 1D73     		strb	r5, [r3, #12]
1058:Src/main.c    ****             ;
 735              		.loc 1 1058 0
 736 00f8 5D73     		strb	r5, [r3, #13]
1060:Src/main.c    ****             can.dataTx[7] = 0;
ARM GAS  /tmp/cc2KcRpR.s 			page 34


 737              		.loc 1 1060 0
 738 00fa 9D73     		strb	r5, [r3, #14]
1061:Src/main.c    ****             can.id = 0xBC;
 739              		.loc 1 1061 0
 740 00fc DD73     		strb	r5, [r3, #15]
1062:Src/main.c    ****             can.size = 8;
 741              		.loc 1 1062 0
 742 00fe BC22     		movs	r2, #188
 743 0100 1A60     		str	r2, [r3]
1063:Src/main.c    ****             for (int i = 0; i < 10; i++)
 744              		.loc 1 1063 0
 745 0102 0822     		movs	r2, #8
 746 0104 5A60     		str	r2, [r3, #4]
 747              	.LVL61:
 748              	.LBB9:
1064:Src/main.c    ****             {
 749              		.loc 1 1064 0
 750 0106 03E0     		b	.L38
 751              	.LVL62:
 752              	.L39:
1066:Src/main.c    ****             }
 753              		.loc 1 1066 0 discriminator 3
 754 0108 0948     		ldr	r0, .L46
 755 010a FFF7FEFF 		bl	CAN_Send
 756              	.LVL63:
1064:Src/main.c    ****             {
 757              		.loc 1 1064 0 discriminator 3
 758 010e 0135     		adds	r5, r5, #1
 759              	.LVL64:
 760              	.L38:
1064:Src/main.c    ****             {
 761              		.loc 1 1064 0 is_stmt 0 discriminator 1
 762 0110 092D     		cmp	r5, #9
 763 0112 F9DD     		ble	.L39
 764 0114 B8E7     		b	.L37
 765              	.LVL65:
 766              	.L43:
 767              	.LBE9:
 768              	.LBE7:
 769              		.loc 1 1086 0 is_stmt 1 discriminator 1
 770 0116 064B     		ldr	r3, .L46
 771 0118 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 772 011a 012B     		cmp	r3, #1
 773 011c 95D1     		bne	.L26
1087:Src/main.c    ****     {
1088:Src/main.c    ****         multiplier = can.dataRx[1] * 256 + can.dataRx[2];
 774              		.loc 1 1088 0
 775 011e 044A     		ldr	r2, .L46
 776 0120 517C     		ldrb	r1, [r2, #17]	@ zero_extendqisi2
 777 0122 937C     		ldrb	r3, [r2, #18]	@ zero_extendqisi2
 778 0124 03EB0123 		add	r3, r3, r1, lsl #8
 779 0128 054A     		ldr	r2, .L46+16
 780 012a 1360     		str	r3, [r2]
1089:Src/main.c    ****     }
1090:Src/main.c    **** }
 781              		.loc 1 1090 0
 782 012c 8DE7     		b	.L26
ARM GAS  /tmp/cc2KcRpR.s 			page 35


 783              	.L47:
 784 012e 00BF     		.align	2
 785              	.L46:
 786 0130 00000000 		.word	can
 787 0134 00000000 		.word	.LANCHOR0
 788 0138 00000000 		.word	pot_2
 789 013c 00000000 		.word	.LANCHOR1
 790 0140 00000000 		.word	.LANCHOR2
 791              		.cfi_endproc
 792              	.LFE152:
 794              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 795              		.align	1
 796              		.global	HAL_TIM_PeriodElapsedCallback
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	HAL_TIM_PeriodElapsedCallback:
 803              	.LFB153:
1091:Src/main.c    **** 
1092:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1093:Src/main.c    **** {
 804              		.loc 1 1093 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              	.LVL66:
 809 0000 38B5     		push	{r3, r4, r5, lr}
 810              	.LCFI10:
 811              		.cfi_def_cfa_offset 16
 812              		.cfi_offset 3, -16
 813              		.cfi_offset 4, -12
 814              		.cfi_offset 5, -8
 815              		.cfi_offset 14, -4
 816 0002 0446     		mov	r4, r0
1094:Src/main.c    **** 
1095:Src/main.c    ****     if (htim == &htim10)
 817              		.loc 1 1095 0
 818 0004 1D4B     		ldr	r3, .L61
 819 0006 9842     		cmp	r0, r3
 820 0008 03D0     		beq	.L56
 821              	.LVL67:
 822              	.L49:
1096:Src/main.c    ****     {
1097:Src/main.c    ****         //READING SENSORS
1098:Src/main.c    ****         if (flag == 1 * multiplier)
1099:Src/main.c    ****         {
1100:Src/main.c    ****             // ACCEL
1101:Src/main.c    ****             LSMD9S0_accel_read(&accel);
1102:Src/main.c    ****             imu_elaborate_data(&accel);
1103:Src/main.c    ****         }
1104:Src/main.c    ****         else if (flag == 2 * multiplier)
1105:Src/main.c    ****         {
1106:Src/main.c    ****             // STEER
1107:Src/main.c    ****             calc_pot_value(&pot_2);
1108:Src/main.c    ****         }
1109:Src/main.c    ****         else if (flag == 3 * multiplier)
ARM GAS  /tmp/cc2KcRpR.s 			page 36


1110:Src/main.c    ****         {
1111:Src/main.c    ****             // GYRO
1112:Src/main.c    ****             LSMD9S0_gyro_read(&gyro);
1113:Src/main.c    ****             imu_elaborate_data(&gyro);
1114:Src/main.c    ****         }
1115:Src/main.c    **** 
1116:Src/main.c    ****         if (flag >= (3 * multiplier))
1117:Src/main.c    ****         {
1118:Src/main.c    ****             flag = 0;
1119:Src/main.c    ****         }
1120:Src/main.c    ****         else
1121:Src/main.c    ****         {
1122:Src/main.c    ****             flag++;
1123:Src/main.c    ****         }
1124:Src/main.c    ****     }
1125:Src/main.c    **** 
1126:Src/main.c    ****     if (htim == &htim7)
 823              		.loc 1 1126 0
 824 000a 1D4B     		ldr	r3, .L61+4
 825 000c 9C42     		cmp	r4, r3
 826 000e 31D0     		beq	.L57
 827              	.L48:
 828 0010 38BD     		pop	{r3, r4, r5, pc}
 829              	.LVL68:
 830              	.L56:
1098:Src/main.c    ****         {
 831              		.loc 1 1098 0
 832 0012 1C4B     		ldr	r3, .L61+8
 833 0014 1A68     		ldr	r2, [r3]
 834 0016 1C4B     		ldr	r3, .L61+12
 835 0018 1B68     		ldr	r3, [r3]
 836 001a 9A42     		cmp	r2, r3
 837 001c 12D0     		beq	.L58
1104:Src/main.c    ****         {
 838              		.loc 1 1104 0
 839 001e B2EB430F 		cmp	r2, r3, lsl #1
 840 0022 17D0     		beq	.L59
1109:Src/main.c    ****         {
 841              		.loc 1 1109 0
 842 0024 03EB4303 		add	r3, r3, r3, lsl #1
 843 0028 9A42     		cmp	r2, r3
 844 002a 17D0     		beq	.L60
 845              	.LVL69:
 846              	.L51:
1116:Src/main.c    ****         {
 847              		.loc 1 1116 0
 848 002c 164B     		ldr	r3, .L61+12
 849 002e 1B68     		ldr	r3, [r3]
 850 0030 03EB4303 		add	r3, r3, r3, lsl #1
 851 0034 134A     		ldr	r2, .L61+8
 852 0036 1268     		ldr	r2, [r2]
 853 0038 9342     		cmp	r3, r2
 854 003a 17DC     		bgt	.L53
1118:Src/main.c    ****         }
 855              		.loc 1 1118 0
 856 003c 0022     		movs	r2, #0
 857 003e 114B     		ldr	r3, .L61+8
ARM GAS  /tmp/cc2KcRpR.s 			page 37


 858 0040 1A60     		str	r2, [r3]
 859 0042 E2E7     		b	.L49
 860              	.LVL70:
 861              	.L58:
1101:Src/main.c    ****             imu_elaborate_data(&accel);
 862              		.loc 1 1101 0
 863 0044 114D     		ldr	r5, .L61+16
 864 0046 2846     		mov	r0, r5
 865              	.LVL71:
 866 0048 FFF7FEFF 		bl	LSMD9S0_accel_read
 867              	.LVL72:
1102:Src/main.c    ****         }
 868              		.loc 1 1102 0
 869 004c 2846     		mov	r0, r5
 870 004e FFF7FEFF 		bl	imu_elaborate_data
 871              	.LVL73:
 872 0052 EBE7     		b	.L51
 873              	.LVL74:
 874              	.L59:
1107:Src/main.c    ****         }
 875              		.loc 1 1107 0
 876 0054 0E48     		ldr	r0, .L61+20
 877              	.LVL75:
 878 0056 FFF7FEFF 		bl	calc_pot_value
 879              	.LVL76:
 880 005a E7E7     		b	.L51
 881              	.LVL77:
 882              	.L60:
1112:Src/main.c    ****             imu_elaborate_data(&gyro);
 883              		.loc 1 1112 0
 884 005c 0D4D     		ldr	r5, .L61+24
 885 005e 2846     		mov	r0, r5
 886              	.LVL78:
 887 0060 FFF7FEFF 		bl	LSMD9S0_gyro_read
 888              	.LVL79:
1113:Src/main.c    ****         }
 889              		.loc 1 1113 0
 890 0064 2846     		mov	r0, r5
 891 0066 FFF7FEFF 		bl	imu_elaborate_data
 892              	.LVL80:
 893 006a DFE7     		b	.L51
 894              	.L53:
1122:Src/main.c    ****         }
 895              		.loc 1 1122 0
 896 006c 0132     		adds	r2, r2, #1
 897 006e 054B     		ldr	r3, .L61+8
 898 0070 1A60     		str	r2, [r3]
 899 0072 CAE7     		b	.L49
 900              	.L57:
1127:Src/main.c    ****     {
1128:Src/main.c    ****         encoder_tim_interrupt(&enc);
 901              		.loc 1 1128 0
 902 0074 0848     		ldr	r0, .L61+28
 903 0076 FFF7FEFF 		bl	encoder_tim_interrupt
 904              	.LVL81:
1129:Src/main.c    ****     }
1130:Src/main.c    **** }
ARM GAS  /tmp/cc2KcRpR.s 			page 38


 905              		.loc 1 1130 0
 906 007a C9E7     		b	.L48
 907              	.L62:
 908              		.align	2
 909              	.L61:
 910 007c 00000000 		.word	htim10
 911 0080 00000000 		.word	htim7
 912 0084 00000000 		.word	.LANCHOR3
 913 0088 00000000 		.word	.LANCHOR2
 914 008c 00000000 		.word	accel
 915 0090 00000000 		.word	pot_2
 916 0094 00000000 		.word	gyro
 917 0098 00000000 		.word	enc
 918              		.cfi_endproc
 919              	.LFE153:
 921              		.global	__aeabi_d2uiz
 922              		.global	__aeabi_ddiv
 923              		.global	__aeabi_i2d
 924              		.global	__aeabi_dadd
 925              		.section	.text.send_CAN_data,"ax",%progbits
 926              		.align	1
 927              		.global	send_CAN_data
 928              		.syntax unified
 929              		.thumb
 930              		.thumb_func
 931              		.fpu fpv4-sp-d16
 933              	send_CAN_data:
 934              	.LFB154:
1131:Src/main.c    **** 
1132:Src/main.c    **** int send_CAN_data(uint32_t millis)
1133:Src/main.c    **** {
 935              		.loc 1 1133 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 8
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              	.LVL82:
 940 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 941              	.LCFI11:
 942              		.cfi_def_cfa_offset 36
 943              		.cfi_offset 4, -36
 944              		.cfi_offset 5, -32
 945              		.cfi_offset 6, -28
 946              		.cfi_offset 7, -24
 947              		.cfi_offset 8, -20
 948              		.cfi_offset 9, -16
 949              		.cfi_offset 10, -12
 950              		.cfi_offset 11, -8
 951              		.cfi_offset 14, -4
 952 0004 83B0     		sub	sp, sp, #12
 953              	.LCFI12:
 954              		.cfi_def_cfa_offset 48
 955 0006 0446     		mov	r4, r0
 956              	.LVL83:
1134:Src/main.c    **** 
1135:Src/main.c    ****     int sent_flag = 0;
1136:Src/main.c    **** 
1137:Src/main.c    ****     //-------------------SEND Encoder-------------------//
ARM GAS  /tmp/cc2KcRpR.s 			page 39


1138:Src/main.c    ****     if (millis % 100 == 0)
 957              		.loc 1 1138 0
 958 0008 914B     		ldr	r3, .L76
 959 000a A3FB0023 		umull	r2, r3, r3, r0
 960 000e 5B09     		lsrs	r3, r3, #5
 961 0010 6422     		movs	r2, #100
 962 0012 02FB1303 		mls	r3, r2, r3, r0
 963 0016 002B     		cmp	r3, #0
 964 0018 33D0     		beq	.L71
1135:Src/main.c    **** 
 965              		.loc 1 1135 0
 966 001a 0020     		movs	r0, #0
 967              	.LVL84:
 968              	.L64:
1139:Src/main.c    ****     {
1140:Src/main.c    ****         uint16_t speed_Send = enc.average_speed;
1141:Src/main.c    **** 
1142:Src/main.c    ****         can.dataTx[0] = 0x06;
1143:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
1144:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
1145:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
1146:Src/main.c    ****         can.dataTx[4] = 0;
1147:Src/main.c    ****         can.dataTx[5] = 0;
1148:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
1149:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
1150:Src/main.c    ****         can.id = 0xD0;
1151:Src/main.c    ****         can.size = 8;
1152:Src/main.c    ****         CAN_Send(&can);
1153:Src/main.c    **** 
1154:Src/main.c    ****         sent_flag = 1;
1155:Src/main.c    ****     }
1156:Src/main.c    **** 
1157:Src/main.c    ****     millis += 5;
 969              		.loc 1 1157 0
 970 001c 621D     		adds	r2, r4, #5
 971              	.LVL85:
1158:Src/main.c    **** 
1159:Src/main.c    ****     //-------------SEND KM & WHEEL ROTAIONS-------------//
1160:Src/main.c    ****     if (millis % 500 == 0)
 972              		.loc 1 1160 0
 973 001e 8D4B     		ldr	r3, .L76+4
 974 0020 A3FB0213 		umull	r1, r3, r3, r2
 975 0024 5B09     		lsrs	r3, r3, #5
 976 0026 4FF4FA71 		mov	r1, #500
 977 002a 01FB1323 		mls	r3, r1, r3, r2
 978 002e 002B     		cmp	r3, #0
 979 0030 44D0     		beq	.L72
 980              	.LVL86:
 981              	.L65:
1161:Src/main.c    ****     {
1162:Src/main.c    **** 
1163:Src/main.c    ****         uint16_t Km = (enc.Km);
1164:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
1165:Src/main.c    **** 
1166:Src/main.c    ****         can.dataTx[0] = 0x08;
1167:Src/main.c    ****         can.dataTx[1] = Km >> 8;
1168:Src/main.c    ****         can.dataTx[2] = Km;
ARM GAS  /tmp/cc2KcRpR.s 			page 40


1169:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
1170:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
1171:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
1172:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
1173:Src/main.c    ****         can.dataTx[7] = 0;
1174:Src/main.c    ****         can.id = 0xD0;
1175:Src/main.c    ****         can.size = 8;
1176:Src/main.c    ****         CAN_Send(&can);
1177:Src/main.c    **** 
1178:Src/main.c    ****         sent_flag = 2;
1179:Src/main.c    ****     }
1180:Src/main.c    **** 
1181:Src/main.c    ****     millis += 5;
 982              		.loc 1 1181 0
 983 0032 04F10A02 		add	r2, r4, #10
 984              	.LVL87:
1182:Src/main.c    **** 
1183:Src/main.c    ****     //--------------------SEND Accel--------------------//
1184:Src/main.c    ****     if (millis % 100 == 0)
 985              		.loc 1 1184 0
 986 0036 864B     		ldr	r3, .L76
 987 0038 A3FB0213 		umull	r1, r3, r3, r2
 988 003c 5B09     		lsrs	r3, r3, #5
 989 003e 6421     		movs	r1, #100
 990 0040 01FB1323 		mls	r3, r1, r3, r2
 991 0044 002B     		cmp	r3, #0
 992 0046 64D0     		beq	.L73
 993              	.LVL88:
 994              	.L66:
1185:Src/main.c    ****     {
1186:Src/main.c    **** 
1187:Src/main.c    ****         //removing negative values
1188:Src/main.c    ****         uint16_t val_a_x = accel.x + accel.scale * 1000;
1189:Src/main.c    ****         uint16_t val_a_y = accel.y + accel.scale * 1000;
1190:Src/main.c    ****         uint16_t val_a_z = accel.z + accel.scale * 1000;
1191:Src/main.c    **** 
1192:Src/main.c    ****         can.dataTx[0] = 0x03;
1193:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
1194:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
1195:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
1196:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
1197:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
1198:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
1199:Src/main.c    ****         can.dataTx[7] = accel.scale;
1200:Src/main.c    ****         can.id = 0xC0;
1201:Src/main.c    ****         can.size = 8;
1202:Src/main.c    ****         CAN_Send(&can);
1203:Src/main.c    **** 
1204:Src/main.c    ****         sent_flag = 3;
1205:Src/main.c    ****     }
1206:Src/main.c    **** 
1207:Src/main.c    ****     millis += 5;
 995              		.loc 1 1207 0
 996 0048 04F10F02 		add	r2, r4, #15
 997              	.LVL89:
1208:Src/main.c    **** 
1209:Src/main.c    ****     //---------------------SEND Gyro---------------------//
ARM GAS  /tmp/cc2KcRpR.s 			page 41


1210:Src/main.c    ****     if (millis % 100 == 0)
 998              		.loc 1 1210 0
 999 004c 804B     		ldr	r3, .L76
 1000 004e A3FB0213 		umull	r1, r3, r3, r2
 1001 0052 5B09     		lsrs	r3, r3, #5
 1002 0054 6421     		movs	r1, #100
 1003 0056 01FB1323 		mls	r3, r1, r3, r2
 1004 005a 002B     		cmp	r3, #0
 1005 005c 00F09D80 		beq	.L74
 1006              	.LVL90:
 1007              	.L67:
1211:Src/main.c    ****     {
1212:Src/main.c    ****         uint16_t val_g_x = gyro.x + gyro.scale * 1000;
1213:Src/main.c    ****         uint16_t val_g_y = gyro.y + gyro.scale * 1000;
1214:Src/main.c    ****         uint16_t val_g_z = gyro.z + gyro.scale * 1000;
1215:Src/main.c    **** 
1216:Src/main.c    ****         can.dataTx[0] = 0x04;
1217:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
1218:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
1219:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
1220:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
1221:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
1222:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
1223:Src/main.c    ****         can.dataTx[7] = (gyro.scale / 10);
1224:Src/main.c    ****         can.id = 0xC0;
1225:Src/main.c    ****         can.size = 8;
1226:Src/main.c    ****         CAN_Send(&can);
1227:Src/main.c    **** 
1228:Src/main.c    ****         sent_flag = 4;
1229:Src/main.c    ****     }
1230:Src/main.c    **** 
1231:Src/main.c    ****     millis += 5;
 1008              		.loc 1 1231 0
 1009 0060 1434     		adds	r4, r4, #20
 1010              	.LVL91:
1232:Src/main.c    **** 
1233:Src/main.c    ****     //--------------------SEND Steer--------------------//
1234:Src/main.c    ****     if (millis % 100 == 0)
 1011              		.loc 1 1234 0
 1012 0062 7B4B     		ldr	r3, .L76
 1013 0064 A3FB0423 		umull	r2, r3, r3, r4
 1014 0068 5B09     		lsrs	r3, r3, #5
 1015 006a 6422     		movs	r2, #100
 1016 006c 02FB1343 		mls	r3, r2, r3, r4
 1017 0070 23B9     		cbnz	r3, .L63
1235:Src/main.c    ****     {
1236:Src/main.c    ****         if (calibration_flag == 0)
 1018              		.loc 1 1236 0
 1019 0072 794B     		ldr	r3, .L76+8
 1020 0074 1B68     		ldr	r3, [r3]
 1021 0076 002B     		cmp	r3, #0
 1022 0078 00F0D580 		beq	.L75
 1023              	.LVL92:
 1024              	.L63:
1237:Src/main.c    ****         {
1238:Src/main.c    ****             can.dataTx[0] = 2;
1239:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
ARM GAS  /tmp/cc2KcRpR.s 			page 42


1240:Src/main.c    ****             can.dataTx[2] = 0;
1241:Src/main.c    ****             can.dataTx[3] = 0;
1242:Src/main.c    ****             can.dataTx[4] = 0;
1243:Src/main.c    ****             can.dataTx[5] = 0;
1244:Src/main.c    ****             can.dataTx[6] = 0;
1245:Src/main.c    ****             can.dataTx[7] = 0;
1246:Src/main.c    ****             can.id = 0xC0;
1247:Src/main.c    ****             can.size = 8;
1248:Src/main.c    ****             CAN_Send(&can);
1249:Src/main.c    **** 
1250:Src/main.c    ****             sent_flag = 5;
1251:Src/main.c    ****         }
1252:Src/main.c    ****     }
1253:Src/main.c    **** 
1254:Src/main.c    ****     return sent_flag;
1255:Src/main.c    **** }
 1025              		.loc 1 1255 0
 1026 007c 03B0     		add	sp, sp, #12
 1027              	.LCFI13:
 1028              		.cfi_remember_state
 1029              		.cfi_def_cfa_offset 36
 1030              		@ sp needed
 1031 007e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1032              	.LVL93:
 1033              	.L71:
 1034              	.LCFI14:
 1035              		.cfi_restore_state
 1036              	.LBB10:
1140:Src/main.c    **** 
 1037              		.loc 1 1140 0
 1038 0082 764D     		ldr	r5, .L76+12
 1039 0084 D5E9F601 		ldrd	r0, [r5, #984]
 1040              	.LVL94:
 1041 0088 FFF7FEFF 		bl	__aeabi_d2uiz
 1042              	.LVL95:
 1043 008c 83B2     		uxth	r3, r0
 1044              	.LVL96:
1142:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
 1045              		.loc 1 1142 0
 1046 008e 7448     		ldr	r0, .L76+16
 1047 0090 0622     		movs	r2, #6
 1048 0092 0272     		strb	r2, [r0, #8]
1143:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
 1049              		.loc 1 1143 0
 1050 0094 1A0A     		lsrs	r2, r3, #8
 1051 0096 4272     		strb	r2, [r0, #9]
1144:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
 1052              		.loc 1 1144 0
 1053 0098 8372     		strb	r3, [r0, #10]
1145:Src/main.c    ****         can.dataTx[4] = 0;
 1054              		.loc 1 1145 0
 1055 009a 2B6F     		ldr	r3, [r5, #112]
 1056              	.LVL97:
 1057 009c C372     		strb	r3, [r0, #11]
1146:Src/main.c    ****         can.dataTx[5] = 0;
 1058              		.loc 1 1146 0
 1059 009e 0023     		movs	r3, #0
ARM GAS  /tmp/cc2KcRpR.s 			page 43


 1060 00a0 0373     		strb	r3, [r0, #12]
1147:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
 1061              		.loc 1 1147 0
 1062 00a2 4373     		strb	r3, [r0, #13]
1148:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
 1063              		.loc 1 1148 0
 1064 00a4 6B68     		ldr	r3, [r5, #4]
 1065 00a6 8373     		strb	r3, [r0, #14]
1149:Src/main.c    ****         can.id = 0xD0;
 1066              		.loc 1 1149 0
 1067 00a8 2B6E     		ldr	r3, [r5, #96]
 1068 00aa C373     		strb	r3, [r0, #15]
1150:Src/main.c    ****         can.size = 8;
 1069              		.loc 1 1150 0
 1070 00ac D023     		movs	r3, #208
 1071 00ae 0360     		str	r3, [r0]
1151:Src/main.c    ****         CAN_Send(&can);
 1072              		.loc 1 1151 0
 1073 00b0 0823     		movs	r3, #8
 1074 00b2 4360     		str	r3, [r0, #4]
1152:Src/main.c    **** 
 1075              		.loc 1 1152 0
 1076 00b4 FFF7FEFF 		bl	CAN_Send
 1077              	.LVL98:
1154:Src/main.c    ****     }
 1078              		.loc 1 1154 0
 1079 00b8 0120     		movs	r0, #1
 1080 00ba AFE7     		b	.L64
 1081              	.LVL99:
 1082              	.L72:
 1083              	.LBE10:
 1084              	.LBB11:
1163:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
 1085              		.loc 1 1163 0
 1086 00bc 674E     		ldr	r6, .L76+12
 1087 00be D6ED1B7A 		vldr.32	s15, [r6, #108]
 1088 00c2 FCEEE77A 		vcvt.u32.f32	s15, s15
 1089 00c6 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1090 00ca BDF80430 		ldrh	r3, [sp, #4]
 1091              	.LVL100:
1164:Src/main.c    **** 
 1092              		.loc 1 1164 0
 1093 00ce B26E     		ldr	r2, [r6, #104]
 1094              	.LVL101:
1166:Src/main.c    ****         can.dataTx[1] = Km >> 8;
 1095              		.loc 1 1166 0
 1096 00d0 634D     		ldr	r5, .L76+16
 1097 00d2 0827     		movs	r7, #8
 1098 00d4 2F72     		strb	r7, [r5, #8]
1167:Src/main.c    ****         can.dataTx[2] = Km;
 1099              		.loc 1 1167 0
 1100 00d6 23FA07F1 		lsr	r1, r3, r7
 1101 00da 6972     		strb	r1, [r5, #9]
1168:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
 1102              		.loc 1 1168 0
 1103 00dc AB72     		strb	r3, [r5, #10]
1169:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
ARM GAS  /tmp/cc2KcRpR.s 			page 44


 1104              		.loc 1 1169 0
 1105 00de 4FF00008 		mov	r8, #0
 1106 00e2 85F80B80 		strb	r8, [r5, #11]
1170:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
 1107              		.loc 1 1170 0
 1108 00e6 2A73     		strb	r2, [r5, #12]
1171:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
 1109              		.loc 1 1171 0
 1110 00e8 0022     		movs	r2, #0
 1111              	.LVL102:
 1112 00ea 5E4B     		ldr	r3, .L76+20
 1113              	.LVL103:
 1114 00ec D6E92401 		ldrd	r0, [r6, #144]
 1115              	.LVL104:
 1116 00f0 FFF7FEFF 		bl	__aeabi_ddiv
 1117              	.LVL105:
 1118 00f4 FFF7FEFF 		bl	__aeabi_d2uiz
 1119              	.LVL106:
 1120 00f8 6873     		strb	r0, [r5, #13]
1172:Src/main.c    ****         can.dataTx[7] = 0;
 1121              		.loc 1 1172 0
 1122 00fa F368     		ldr	r3, [r6, #12]
 1123 00fc AB73     		strb	r3, [r5, #14]
1173:Src/main.c    ****         can.id = 0xD0;
 1124              		.loc 1 1173 0
 1125 00fe 85F80F80 		strb	r8, [r5, #15]
1174:Src/main.c    ****         can.size = 8;
 1126              		.loc 1 1174 0
 1127 0102 D023     		movs	r3, #208
 1128 0104 2B60     		str	r3, [r5]
1175:Src/main.c    ****         CAN_Send(&can);
 1129              		.loc 1 1175 0
 1130 0106 6F60     		str	r7, [r5, #4]
1176:Src/main.c    **** 
 1131              		.loc 1 1176 0
 1132 0108 2846     		mov	r0, r5
 1133 010a FFF7FEFF 		bl	CAN_Send
 1134              	.LVL107:
1178:Src/main.c    ****     }
 1135              		.loc 1 1178 0
 1136 010e 0220     		movs	r0, #2
 1137 0110 8FE7     		b	.L65
 1138              	.LVL108:
 1139              	.L73:
 1140              	.LBE11:
 1141              	.LBB12:
1188:Src/main.c    ****         uint16_t val_a_y = accel.y + accel.scale * 1000;
 1142              		.loc 1 1188 0
 1143 0112 554D     		ldr	r5, .L76+24
 1144 0114 D5E900AB 		ldrd	r10, [r5]
 1145 0118 D5F81882 		ldr	r8, [r5, #536]
 1146 011c 4FF47A70 		mov	r0, #1000
 1147              	.LVL109:
 1148 0120 00FB08F0 		mul	r0, r0, r8
 1149 0124 FFF7FEFF 		bl	__aeabi_i2d
 1150              	.LVL110:
 1151 0128 0646     		mov	r6, r0
ARM GAS  /tmp/cc2KcRpR.s 			page 45


 1152 012a 0F46     		mov	r7, r1
 1153 012c 0246     		mov	r2, r0
 1154 012e 0B46     		mov	r3, r1
 1155 0130 5046     		mov	r0, r10
 1156 0132 5946     		mov	r1, fp
 1157 0134 FFF7FEFF 		bl	__aeabi_dadd
 1158              	.LVL111:
 1159 0138 FFF7FEFF 		bl	__aeabi_d2uiz
 1160              	.LVL112:
 1161 013c 1FFA80FA 		uxth	r10, r0
 1162              	.LVL113:
1189:Src/main.c    ****         uint16_t val_a_z = accel.z + accel.scale * 1000;
 1163              		.loc 1 1189 0
 1164 0140 D5E90223 		ldrd	r2, [r5, #8]
 1165 0144 3046     		mov	r0, r6
 1166 0146 3946     		mov	r1, r7
 1167 0148 FFF7FEFF 		bl	__aeabi_dadd
 1168              	.LVL114:
 1169 014c FFF7FEFF 		bl	__aeabi_d2uiz
 1170              	.LVL115:
 1171 0150 1FFA80F9 		uxth	r9, r0
 1172              	.LVL116:
1190:Src/main.c    **** 
 1173              		.loc 1 1190 0
 1174 0154 D5E90423 		ldrd	r2, [r5, #16]
 1175 0158 3046     		mov	r0, r6
 1176 015a 3946     		mov	r1, r7
 1177 015c FFF7FEFF 		bl	__aeabi_dadd
 1178              	.LVL117:
 1179 0160 FFF7FEFF 		bl	__aeabi_d2uiz
 1180              	.LVL118:
 1181 0164 83B2     		uxth	r3, r0
 1182              	.LVL119:
1192:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
 1183              		.loc 1 1192 0
 1184 0166 3E48     		ldr	r0, .L76+16
 1185 0168 0325     		movs	r5, #3
 1186 016a 0572     		strb	r5, [r0, #8]
1193:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
 1187              		.loc 1 1193 0
 1188 016c 4FEA1A22 		lsr	r2, r10, #8
 1189 0170 4272     		strb	r2, [r0, #9]
1194:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
 1190              		.loc 1 1194 0
 1191 0172 80F80AA0 		strb	r10, [r0, #10]
1195:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
 1192              		.loc 1 1195 0
 1193 0176 4FEA1922 		lsr	r2, r9, #8
 1194 017a C272     		strb	r2, [r0, #11]
1196:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
 1195              		.loc 1 1196 0
 1196 017c 80F80C90 		strb	r9, [r0, #12]
1197:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
 1197              		.loc 1 1197 0
 1198 0180 1A0A     		lsrs	r2, r3, #8
 1199 0182 4273     		strb	r2, [r0, #13]
1198:Src/main.c    ****         can.dataTx[7] = accel.scale;
ARM GAS  /tmp/cc2KcRpR.s 			page 46


 1200              		.loc 1 1198 0
 1201 0184 8373     		strb	r3, [r0, #14]
1199:Src/main.c    ****         can.id = 0xC0;
 1202              		.loc 1 1199 0
 1203 0186 80F80F80 		strb	r8, [r0, #15]
1200:Src/main.c    ****         can.size = 8;
 1204              		.loc 1 1200 0
 1205 018a C023     		movs	r3, #192
 1206              	.LVL120:
 1207 018c 0360     		str	r3, [r0]
1201:Src/main.c    ****         CAN_Send(&can);
 1208              		.loc 1 1201 0
 1209 018e 0823     		movs	r3, #8
 1210 0190 4360     		str	r3, [r0, #4]
1202:Src/main.c    **** 
 1211              		.loc 1 1202 0
 1212 0192 FFF7FEFF 		bl	CAN_Send
 1213              	.LVL121:
1204:Src/main.c    ****     }
 1214              		.loc 1 1204 0
 1215 0196 2846     		mov	r0, r5
 1216 0198 56E7     		b	.L66
 1217              	.LVL122:
 1218              	.L74:
 1219              	.LBE12:
 1220              	.LBB13:
1212:Src/main.c    ****         uint16_t val_g_y = gyro.y + gyro.scale * 1000;
 1221              		.loc 1 1212 0
 1222 019a 344E     		ldr	r6, .L76+28
 1223 019c D6E900AB 		ldrd	r10, [r6]
 1224 01a0 D6F81852 		ldr	r5, [r6, #536]
 1225 01a4 4FF47A70 		mov	r0, #1000
 1226              	.LVL123:
 1227 01a8 00FB05F0 		mul	r0, r0, r5
 1228 01ac FFF7FEFF 		bl	__aeabi_i2d
 1229              	.LVL124:
 1230 01b0 8046     		mov	r8, r0
 1231 01b2 8946     		mov	r9, r1
 1232 01b4 0246     		mov	r2, r0
 1233 01b6 0B46     		mov	r3, r1
 1234 01b8 5046     		mov	r0, r10
 1235 01ba 5946     		mov	r1, fp
 1236 01bc FFF7FEFF 		bl	__aeabi_dadd
 1237              	.LVL125:
 1238 01c0 FFF7FEFF 		bl	__aeabi_d2uiz
 1239              	.LVL126:
 1240 01c4 1FFA80FA 		uxth	r10, r0
 1241              	.LVL127:
1213:Src/main.c    ****         uint16_t val_g_z = gyro.z + gyro.scale * 1000;
 1242              		.loc 1 1213 0
 1243 01c8 D6E90223 		ldrd	r2, [r6, #8]
 1244 01cc 4046     		mov	r0, r8
 1245 01ce 4946     		mov	r1, r9
 1246 01d0 FFF7FEFF 		bl	__aeabi_dadd
 1247              	.LVL128:
 1248 01d4 FFF7FEFF 		bl	__aeabi_d2uiz
 1249              	.LVL129:
ARM GAS  /tmp/cc2KcRpR.s 			page 47


 1250 01d8 87B2     		uxth	r7, r0
 1251              	.LVL130:
1214:Src/main.c    **** 
 1252              		.loc 1 1214 0
 1253 01da D6E90423 		ldrd	r2, [r6, #16]
 1254 01de 4046     		mov	r0, r8
 1255 01e0 4946     		mov	r1, r9
 1256 01e2 FFF7FEFF 		bl	__aeabi_dadd
 1257              	.LVL131:
 1258 01e6 FFF7FEFF 		bl	__aeabi_d2uiz
 1259              	.LVL132:
 1260 01ea 83B2     		uxth	r3, r0
 1261              	.LVL133:
1216:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
 1262              		.loc 1 1216 0
 1263 01ec 1C48     		ldr	r0, .L76+16
 1264 01ee 0426     		movs	r6, #4
 1265 01f0 0672     		strb	r6, [r0, #8]
1217:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
 1266              		.loc 1 1217 0
 1267 01f2 4FEA1A22 		lsr	r2, r10, #8
 1268 01f6 4272     		strb	r2, [r0, #9]
1218:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
 1269              		.loc 1 1218 0
 1270 01f8 80F80AA0 		strb	r10, [r0, #10]
1219:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
 1271              		.loc 1 1219 0
 1272 01fc 3A0A     		lsrs	r2, r7, #8
 1273 01fe C272     		strb	r2, [r0, #11]
1220:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
 1274              		.loc 1 1220 0
 1275 0200 0773     		strb	r7, [r0, #12]
1221:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
 1276              		.loc 1 1221 0
 1277 0202 1A0A     		lsrs	r2, r3, #8
 1278 0204 4273     		strb	r2, [r0, #13]
1222:Src/main.c    ****         can.dataTx[7] = (gyro.scale / 10);
 1279              		.loc 1 1222 0
 1280 0206 8373     		strb	r3, [r0, #14]
1223:Src/main.c    ****         can.id = 0xC0;
 1281              		.loc 1 1223 0
 1282 0208 194B     		ldr	r3, .L76+32
 1283              	.LVL134:
 1284 020a 83FB0523 		smull	r2, r3, r3, r5
 1285 020e ED17     		asrs	r5, r5, #31
 1286 0210 C5EBA305 		rsb	r5, r5, r3, asr #2
 1287 0214 C573     		strb	r5, [r0, #15]
1224:Src/main.c    ****         can.size = 8;
 1288              		.loc 1 1224 0
 1289 0216 C023     		movs	r3, #192
 1290 0218 0360     		str	r3, [r0]
1225:Src/main.c    ****         CAN_Send(&can);
 1291              		.loc 1 1225 0
 1292 021a 0823     		movs	r3, #8
 1293 021c 4360     		str	r3, [r0, #4]
1226:Src/main.c    **** 
 1294              		.loc 1 1226 0
ARM GAS  /tmp/cc2KcRpR.s 			page 48


 1295 021e FFF7FEFF 		bl	CAN_Send
 1296              	.LVL135:
1228:Src/main.c    ****     }
 1297              		.loc 1 1228 0
 1298 0222 3046     		mov	r0, r6
 1299 0224 1CE7     		b	.L67
 1300              	.LVL136:
 1301              	.L75:
 1302              	.LBE13:
1238:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
 1303              		.loc 1 1238 0
 1304 0226 0E48     		ldr	r0, .L76+16
 1305              	.LVL137:
 1306 0228 0223     		movs	r3, #2
 1307 022a 0372     		strb	r3, [r0, #8]
1239:Src/main.c    ****             can.dataTx[2] = 0;
 1308              		.loc 1 1239 0
 1309 022c 114B     		ldr	r3, .L76+36
 1310 022e 1B68     		ldr	r3, [r3]
 1311 0230 4372     		strb	r3, [r0, #9]
1240:Src/main.c    ****             can.dataTx[3] = 0;
 1312              		.loc 1 1240 0
 1313 0232 0023     		movs	r3, #0
 1314 0234 8372     		strb	r3, [r0, #10]
1241:Src/main.c    ****             can.dataTx[4] = 0;
 1315              		.loc 1 1241 0
 1316 0236 C372     		strb	r3, [r0, #11]
1242:Src/main.c    ****             can.dataTx[5] = 0;
 1317              		.loc 1 1242 0
 1318 0238 0373     		strb	r3, [r0, #12]
1243:Src/main.c    ****             can.dataTx[6] = 0;
 1319              		.loc 1 1243 0
 1320 023a 4373     		strb	r3, [r0, #13]
1244:Src/main.c    ****             can.dataTx[7] = 0;
 1321              		.loc 1 1244 0
 1322 023c 8373     		strb	r3, [r0, #14]
1245:Src/main.c    ****             can.id = 0xC0;
 1323              		.loc 1 1245 0
 1324 023e C373     		strb	r3, [r0, #15]
1246:Src/main.c    ****             can.size = 8;
 1325              		.loc 1 1246 0
 1326 0240 C023     		movs	r3, #192
 1327 0242 0360     		str	r3, [r0]
1247:Src/main.c    ****             CAN_Send(&can);
 1328              		.loc 1 1247 0
 1329 0244 0823     		movs	r3, #8
 1330 0246 4360     		str	r3, [r0, #4]
1248:Src/main.c    **** 
 1331              		.loc 1 1248 0
 1332 0248 FFF7FEFF 		bl	CAN_Send
 1333              	.LVL138:
1250:Src/main.c    ****         }
 1334              		.loc 1 1250 0
 1335 024c 0520     		movs	r0, #5
1254:Src/main.c    **** }
 1336              		.loc 1 1254 0
 1337 024e 15E7     		b	.L63
ARM GAS  /tmp/cc2KcRpR.s 			page 49


 1338              	.L77:
 1339              		.align	2
 1340              	.L76:
 1341 0250 1F85EB51 		.word	1374389535
 1342 0254 D34D6210 		.word	274877907
 1343 0258 00000000 		.word	.LANCHOR1
 1344 025c 00000000 		.word	enc
 1345 0260 00000000 		.word	can
 1346 0264 00002440 		.word	1076101120
 1347 0268 00000000 		.word	accel
 1348 026c 00000000 		.word	gyro
 1349 0270 67666666 		.word	1717986919
 1350 0274 00000000 		.word	pot_2
 1351              		.cfi_endproc
 1352              	.LFE154:
 1354              		.section	.text.Error_Handler,"ax",%progbits
 1355              		.align	1
 1356              		.global	Error_Handler
 1357              		.syntax unified
 1358              		.thumb
 1359              		.thumb_func
 1360              		.fpu fpv4-sp-d16
 1362              	Error_Handler:
 1363              	.LFB155:
1256:Src/main.c    **** 
1257:Src/main.c    **** /* USER CODE END 4 */
1258:Src/main.c    **** 
1259:Src/main.c    **** /**
1260:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1261:Src/main.c    ****   * @retval None
1262:Src/main.c    ****   */
1263:Src/main.c    **** void Error_Handler(void)
1264:Src/main.c    **** {
 1364              		.loc 1 1264 0
 1365              		.cfi_startproc
 1366              		@ Volatile: function does not return.
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 0, uses_anonymous_args = 0
 1369 0000 08B5     		push	{r3, lr}
 1370              	.LCFI15:
 1371              		.cfi_def_cfa_offset 8
 1372              		.cfi_offset 3, -8
 1373              		.cfi_offset 14, -4
 1374              	.L79:
1265:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1266:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1267:Src/main.c    ****     while (1)
1268:Src/main.c    ****     {
1269:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 1375              		.loc 1 1269 0 discriminator 1
 1376 0002 074C     		ldr	r4, .L81
 1377 0004 0A23     		movs	r3, #10
 1378 0006 0F22     		movs	r2, #15
 1379 0008 0649     		ldr	r1, .L81+4
 1380 000a 2046     		mov	r0, r4
 1381 000c FFF7FEFF 		bl	HAL_UART_Transmit
 1382              	.LVL139:
ARM GAS  /tmp/cc2KcRpR.s 			page 50


1270:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t *)file, strlen(file), 10);
1271:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 1383              		.loc 1 1271 0 discriminator 1
 1384 0010 0A23     		movs	r3, #10
 1385 0012 0222     		movs	r2, #2
 1386 0014 0449     		ldr	r1, .L81+8
 1387 0016 2046     		mov	r0, r4
 1388 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 1389              	.LVL140:
 1390 001c F1E7     		b	.L79
 1391              	.L82:
 1392 001e 00BF     		.align	2
 1393              	.L81:
 1394 0020 00000000 		.word	huart2
 1395 0024 00000000 		.word	.LC0
 1396 0028 10000000 		.word	.LC1
 1397              		.cfi_endproc
 1398              	.LFE155:
 1400              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1401              		.align	1
 1402              		.syntax unified
 1403              		.thumb
 1404              		.thumb_func
 1405              		.fpu fpv4-sp-d16
 1407              	MX_USART2_UART_Init:
 1408              	.LFB147:
 885:Src/main.c    **** 
 1409              		.loc 1 885 0
 1410              		.cfi_startproc
 1411              		@ args = 0, pretend = 0, frame = 0
 1412              		@ frame_needed = 0, uses_anonymous_args = 0
 1413 0000 08B5     		push	{r3, lr}
 1414              	.LCFI16:
 1415              		.cfi_def_cfa_offset 8
 1416              		.cfi_offset 3, -8
 1417              		.cfi_offset 14, -4
 894:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 1418              		.loc 1 894 0
 1419 0002 0948     		ldr	r0, .L87
 1420 0004 094B     		ldr	r3, .L87+4
 1421 0006 0360     		str	r3, [r0]
 895:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1422              		.loc 1 895 0
 1423 0008 094B     		ldr	r3, .L87+8
 1424 000a 4360     		str	r3, [r0, #4]
 896:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 1425              		.loc 1 896 0
 1426 000c 0023     		movs	r3, #0
 1427 000e 8360     		str	r3, [r0, #8]
 897:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 1428              		.loc 1 897 0
 1429 0010 C360     		str	r3, [r0, #12]
 898:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 1430              		.loc 1 898 0
 1431 0012 0361     		str	r3, [r0, #16]
 899:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1432              		.loc 1 899 0
ARM GAS  /tmp/cc2KcRpR.s 			page 51


 1433 0014 0C22     		movs	r2, #12
 1434 0016 4261     		str	r2, [r0, #20]
 900:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1435              		.loc 1 900 0
 1436 0018 8361     		str	r3, [r0, #24]
 901:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 1437              		.loc 1 901 0
 1438 001a C361     		str	r3, [r0, #28]
 902:Src/main.c    ****     {
 1439              		.loc 1 902 0
 1440 001c FFF7FEFF 		bl	HAL_UART_Init
 1441              	.LVL141:
 1442 0020 00B9     		cbnz	r0, .L86
 1443 0022 08BD     		pop	{r3, pc}
 1444              	.L86:
 904:Src/main.c    ****     }
 1445              		.loc 1 904 0
 1446 0024 FFF7FEFF 		bl	Error_Handler
 1447              	.LVL142:
 1448              	.L88:
 1449              		.align	2
 1450              	.L87:
 1451 0028 00000000 		.word	huart2
 1452 002c 00440040 		.word	1073759232
 1453 0030 10552200 		.word	2250000
 1454              		.cfi_endproc
 1455              	.LFE147:
 1457              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1458              		.align	1
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1462              		.fpu fpv4-sp-d16
 1464              	MX_CAN1_Init:
 1465              	.LFB136:
 463:Src/main.c    **** 
 1466              		.loc 1 463 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 0
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470 0000 08B5     		push	{r3, lr}
 1471              	.LCFI17:
 1472              		.cfi_def_cfa_offset 8
 1473              		.cfi_offset 3, -8
 1474              		.cfi_offset 14, -4
 472:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 1475              		.loc 1 472 0
 1476 0002 0D48     		ldr	r0, .L93
 1477 0004 0D4B     		ldr	r3, .L93+4
 1478 0006 0360     		str	r3, [r0]
 473:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 1479              		.loc 1 473 0
 1480 0008 0223     		movs	r3, #2
 1481 000a 4360     		str	r3, [r0, #4]
 474:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1482              		.loc 1 474 0
 1483 000c 0023     		movs	r3, #0
ARM GAS  /tmp/cc2KcRpR.s 			page 52


 1484 000e 8360     		str	r3, [r0, #8]
 475:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 1485              		.loc 1 475 0
 1486 0010 C360     		str	r3, [r0, #12]
 476:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 1487              		.loc 1 476 0
 1488 0012 4FF43022 		mov	r2, #720896
 1489 0016 0261     		str	r2, [r0, #16]
 477:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 1490              		.loc 1 477 0
 1491 0018 4FF48002 		mov	r2, #4194304
 1492 001c 4261     		str	r2, [r0, #20]
 478:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 1493              		.loc 1 478 0
 1494 001e 0376     		strb	r3, [r0, #24]
 479:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 1495              		.loc 1 479 0
 1496 0020 4376     		strb	r3, [r0, #25]
 480:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 1497              		.loc 1 480 0
 1498 0022 0122     		movs	r2, #1
 1499 0024 8276     		strb	r2, [r0, #26]
 481:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 1500              		.loc 1 481 0
 1501 0026 C376     		strb	r3, [r0, #27]
 482:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 1502              		.loc 1 482 0
 1503 0028 0377     		strb	r3, [r0, #28]
 483:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1504              		.loc 1 483 0
 1505 002a 4377     		strb	r3, [r0, #29]
 484:Src/main.c    ****     {
 1506              		.loc 1 484 0
 1507 002c FFF7FEFF 		bl	HAL_CAN_Init
 1508              	.LVL143:
 1509 0030 00B9     		cbnz	r0, .L92
 1510 0032 08BD     		pop	{r3, pc}
 1511              	.L92:
 486:Src/main.c    ****     }
 1512              		.loc 1 486 0
 1513 0034 FFF7FEFF 		bl	Error_Handler
 1514              	.LVL144:
 1515              	.L94:
 1516              		.align	2
 1517              	.L93:
 1518 0038 00000000 		.word	hcan1
 1519 003c 00640040 		.word	1073767424
 1520              		.cfi_endproc
 1521              	.LFE136:
 1523              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1524              		.align	1
 1525              		.syntax unified
 1526              		.thumb
 1527              		.thumb_func
 1528              		.fpu fpv4-sp-d16
 1530              	MX_SPI1_Init:
 1531              	.LFB137:
ARM GAS  /tmp/cc2KcRpR.s 			page 53


 499:Src/main.c    **** 
 1532              		.loc 1 499 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 1536 0000 08B5     		push	{r3, lr}
 1537              	.LCFI18:
 1538              		.cfi_def_cfa_offset 8
 1539              		.cfi_offset 3, -8
 1540              		.cfi_offset 14, -4
 509:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 1541              		.loc 1 509 0
 1542 0002 0D48     		ldr	r0, .L99
 1543 0004 0D4B     		ldr	r3, .L99+4
 1544 0006 0360     		str	r3, [r0]
 510:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1545              		.loc 1 510 0
 1546 0008 4FF48273 		mov	r3, #260
 1547 000c 4360     		str	r3, [r0, #4]
 511:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1548              		.loc 1 511 0
 1549 000e 0023     		movs	r3, #0
 1550 0010 8360     		str	r3, [r0, #8]
 512:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1551              		.loc 1 512 0
 1552 0012 C360     		str	r3, [r0, #12]
 513:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1553              		.loc 1 513 0
 1554 0014 0361     		str	r3, [r0, #16]
 514:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 1555              		.loc 1 514 0
 1556 0016 4361     		str	r3, [r0, #20]
 515:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1557              		.loc 1 515 0
 1558 0018 4FF40072 		mov	r2, #512
 1559 001c 8261     		str	r2, [r0, #24]
 516:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1560              		.loc 1 516 0
 1561 001e C361     		str	r3, [r0, #28]
 517:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1562              		.loc 1 517 0
 1563 0020 0362     		str	r3, [r0, #32]
 518:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1564              		.loc 1 518 0
 1565 0022 4362     		str	r3, [r0, #36]
 519:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 1566              		.loc 1 519 0
 1567 0024 8362     		str	r3, [r0, #40]
 520:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1568              		.loc 1 520 0
 1569 0026 0A23     		movs	r3, #10
 1570 0028 C362     		str	r3, [r0, #44]
 521:Src/main.c    ****     {
 1571              		.loc 1 521 0
 1572 002a FFF7FEFF 		bl	HAL_SPI_Init
 1573              	.LVL145:
 1574 002e 00B9     		cbnz	r0, .L98
ARM GAS  /tmp/cc2KcRpR.s 			page 54


 1575 0030 08BD     		pop	{r3, pc}
 1576              	.L98:
 523:Src/main.c    ****     }
 1577              		.loc 1 523 0
 1578 0032 FFF7FEFF 		bl	Error_Handler
 1579              	.LVL146:
 1580              	.L100:
 1581 0036 00BF     		.align	2
 1582              	.L99:
 1583 0038 00000000 		.word	hspi1
 1584 003c 00300140 		.word	1073819648
 1585              		.cfi_endproc
 1586              	.LFE137:
 1588              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1589              		.align	1
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
 1593              		.fpu fpv4-sp-d16
 1595              	MX_ADC1_Init:
 1596              	.LFB135:
 414:Src/main.c    **** 
 1597              		.loc 1 414 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 16
 1600              		@ frame_needed = 0, uses_anonymous_args = 0
 1601 0000 00B5     		push	{lr}
 1602              	.LCFI19:
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 14, -4
 1605 0002 85B0     		sub	sp, sp, #20
 1606              	.LCFI20:
 1607              		.cfi_def_cfa_offset 24
 420:Src/main.c    **** 
 1608              		.loc 1 420 0
 1609 0004 0023     		movs	r3, #0
 1610 0006 0093     		str	r3, [sp]
 1611 0008 0193     		str	r3, [sp, #4]
 1612 000a 0293     		str	r3, [sp, #8]
 1613 000c 0393     		str	r3, [sp, #12]
 427:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1614              		.loc 1 427 0
 1615 000e 1348     		ldr	r0, .L107
 1616 0010 134A     		ldr	r2, .L107+4
 1617 0012 0260     		str	r2, [r0]
 428:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1618              		.loc 1 428 0
 1619 0014 4360     		str	r3, [r0, #4]
 429:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 1620              		.loc 1 429 0
 1621 0016 8360     		str	r3, [r0, #8]
 430:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 1622              		.loc 1 430 0
 1623 0018 0122     		movs	r2, #1
 1624 001a 0261     		str	r2, [r0, #16]
 431:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 1625              		.loc 1 431 0
ARM GAS  /tmp/cc2KcRpR.s 			page 55


 1626 001c 0276     		strb	r2, [r0, #24]
 432:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1627              		.loc 1 432 0
 1628 001e 80F82030 		strb	r3, [r0, #32]
 433:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1629              		.loc 1 433 0
 1630 0022 C362     		str	r3, [r0, #44]
 434:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1631              		.loc 1 434 0
 1632 0024 0F49     		ldr	r1, .L107+8
 1633 0026 8162     		str	r1, [r0, #40]
 435:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 1634              		.loc 1 435 0
 1635 0028 C360     		str	r3, [r0, #12]
 436:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 1636              		.loc 1 436 0
 1637 002a C261     		str	r2, [r0, #28]
 437:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1638              		.loc 1 437 0
 1639 002c 80F83020 		strb	r2, [r0, #48]
 438:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1640              		.loc 1 438 0
 1641 0030 4261     		str	r2, [r0, #20]
 439:Src/main.c    ****     {
 1642              		.loc 1 439 0
 1643 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1644              	.LVL147:
 1645 0036 68B9     		cbnz	r0, .L105
 445:Src/main.c    ****     sConfig.Rank = 1;
 1646              		.loc 1 445 0
 1647 0038 0823     		movs	r3, #8
 1648 003a 0093     		str	r3, [sp]
 446:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1649              		.loc 1 446 0
 1650 003c 0123     		movs	r3, #1
 1651 003e 0193     		str	r3, [sp, #4]
 447:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1652              		.loc 1 447 0
 1653 0040 0023     		movs	r3, #0
 1654 0042 0293     		str	r3, [sp, #8]
 448:Src/main.c    ****     {
 1655              		.loc 1 448 0
 1656 0044 6946     		mov	r1, sp
 1657 0046 0548     		ldr	r0, .L107
 1658 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1659              	.LVL148:
 1660 004c 20B9     		cbnz	r0, .L106
 455:Src/main.c    **** 
 1661              		.loc 1 455 0
 1662 004e 05B0     		add	sp, sp, #20
 1663              	.LCFI21:
 1664              		.cfi_remember_state
 1665              		.cfi_def_cfa_offset 4
 1666              		@ sp needed
 1667 0050 5DF804FB 		ldr	pc, [sp], #4
 1668              	.L105:
 1669              	.LCFI22:
ARM GAS  /tmp/cc2KcRpR.s 			page 56


 1670              		.cfi_restore_state
 441:Src/main.c    ****     }
 1671              		.loc 1 441 0
 1672 0054 FFF7FEFF 		bl	Error_Handler
 1673              	.LVL149:
 1674              	.L106:
 450:Src/main.c    ****     }
 1675              		.loc 1 450 0
 1676 0058 FFF7FEFF 		bl	Error_Handler
 1677              	.LVL150:
 1678              	.L108:
 1679              		.align	2
 1680              	.L107:
 1681 005c 00000000 		.word	hadc1
 1682 0060 00200140 		.word	1073815552
 1683 0064 0100000F 		.word	251658241
 1684              		.cfi_endproc
 1685              	.LFE135:
 1687              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1688              		.align	1
 1689              		.syntax unified
 1690              		.thumb
 1691              		.thumb_func
 1692              		.fpu fpv4-sp-d16
 1694              	MX_USART1_UART_Init:
 1695              	.LFB146:
 853:Src/main.c    **** 
 1696              		.loc 1 853 0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 1700 0000 08B5     		push	{r3, lr}
 1701              	.LCFI23:
 1702              		.cfi_def_cfa_offset 8
 1703              		.cfi_offset 3, -8
 1704              		.cfi_offset 14, -4
 862:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 1705              		.loc 1 862 0
 1706 0002 0A48     		ldr	r0, .L113
 1707 0004 0A4B     		ldr	r3, .L113+4
 1708 0006 0360     		str	r3, [r0]
 863:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1709              		.loc 1 863 0
 1710 0008 4FF4E133 		mov	r3, #115200
 1711 000c 4360     		str	r3, [r0, #4]
 864:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 1712              		.loc 1 864 0
 1713 000e 0023     		movs	r3, #0
 1714 0010 8360     		str	r3, [r0, #8]
 865:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 1715              		.loc 1 865 0
 1716 0012 C360     		str	r3, [r0, #12]
 866:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 1717              		.loc 1 866 0
 1718 0014 0361     		str	r3, [r0, #16]
 867:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1719              		.loc 1 867 0
ARM GAS  /tmp/cc2KcRpR.s 			page 57


 1720 0016 0C22     		movs	r2, #12
 1721 0018 4261     		str	r2, [r0, #20]
 868:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1722              		.loc 1 868 0
 1723 001a 8361     		str	r3, [r0, #24]
 869:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 1724              		.loc 1 869 0
 1725 001c C361     		str	r3, [r0, #28]
 870:Src/main.c    ****     {
 1726              		.loc 1 870 0
 1727 001e FFF7FEFF 		bl	HAL_UART_Init
 1728              	.LVL151:
 1729 0022 00B9     		cbnz	r0, .L112
 1730 0024 08BD     		pop	{r3, pc}
 1731              	.L112:
 872:Src/main.c    ****     }
 1732              		.loc 1 872 0
 1733 0026 FFF7FEFF 		bl	Error_Handler
 1734              	.LVL152:
 1735              	.L114:
 1736 002a 00BF     		.align	2
 1737              	.L113:
 1738 002c 00000000 		.word	huart1
 1739 0030 00100140 		.word	1073811456
 1740              		.cfi_endproc
 1741              	.LFE146:
 1743              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1744              		.align	1
 1745              		.syntax unified
 1746              		.thumb
 1747              		.thumb_func
 1748              		.fpu fpv4-sp-d16
 1750              	MX_TIM2_Init:
 1751              	.LFB138:
 536:Src/main.c    **** 
 1752              		.loc 1 536 0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 48
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 1756 0000 00B5     		push	{lr}
 1757              	.LCFI24:
 1758              		.cfi_def_cfa_offset 4
 1759              		.cfi_offset 14, -4
 1760 0002 8DB0     		sub	sp, sp, #52
 1761              	.LCFI25:
 1762              		.cfi_def_cfa_offset 56
 542:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 1763              		.loc 1 542 0
 1764 0004 0023     		movs	r3, #0
 1765 0006 0893     		str	r3, [sp, #32]
 1766 0008 0993     		str	r3, [sp, #36]
 1767 000a 0A93     		str	r3, [sp, #40]
 1768 000c 0B93     		str	r3, [sp, #44]
 543:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1769              		.loc 1 543 0
 1770 000e 0393     		str	r3, [sp, #12]
 1771 0010 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/cc2KcRpR.s 			page 58


 1772 0012 0593     		str	r3, [sp, #20]
 1773 0014 0693     		str	r3, [sp, #24]
 1774 0016 0793     		str	r3, [sp, #28]
 544:Src/main.c    **** 
 1775              		.loc 1 544 0
 1776 0018 0193     		str	r3, [sp, #4]
 1777 001a 0293     		str	r3, [sp, #8]
 549:Src/main.c    ****     htim2.Init.Prescaler = 36;
 1778              		.loc 1 549 0
 1779 001c 1948     		ldr	r0, .L125
 1780 001e 4FF08042 		mov	r2, #1073741824
 1781 0022 0260     		str	r2, [r0]
 550:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1782              		.loc 1 550 0
 1783 0024 2422     		movs	r2, #36
 1784 0026 4260     		str	r2, [r0, #4]
 551:Src/main.c    ****     htim2.Init.Period = 1000;
 1785              		.loc 1 551 0
 1786 0028 8360     		str	r3, [r0, #8]
 552:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1787              		.loc 1 552 0
 1788 002a 4FF47A72 		mov	r2, #1000
 1789 002e C260     		str	r2, [r0, #12]
 553:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1790              		.loc 1 553 0
 1791 0030 0361     		str	r3, [r0, #16]
 554:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1792              		.loc 1 554 0
 1793 0032 8361     		str	r3, [r0, #24]
 555:Src/main.c    ****     {
 1794              		.loc 1 555 0
 1795 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1796              	.LVL153:
 1797 0038 D8B9     		cbnz	r0, .L121
 559:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1798              		.loc 1 559 0
 1799 003a 0CA9     		add	r1, sp, #48
 1800 003c 4FF48053 		mov	r3, #4096
 1801 0040 41F8103D 		str	r3, [r1, #-16]!
 560:Src/main.c    ****     {
 1802              		.loc 1 560 0
 1803 0044 0F48     		ldr	r0, .L125
 1804 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1805              	.LVL154:
 1806 004a A0B9     		cbnz	r0, .L122
 564:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 1807              		.loc 1 564 0
 1808 004c 0023     		movs	r3, #0
 1809 004e 0393     		str	r3, [sp, #12]
 565:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 1810              		.loc 1 565 0
 1811 0050 0493     		str	r3, [sp, #16]
 566:Src/main.c    ****     {
 1812              		.loc 1 566 0
 1813 0052 03A9     		add	r1, sp, #12
 1814 0054 0B48     		ldr	r0, .L125
 1815 0056 FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
ARM GAS  /tmp/cc2KcRpR.s 			page 59


 1816              	.LVL155:
 1817 005a 70B9     		cbnz	r0, .L123
 570:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1818              		.loc 1 570 0
 1819 005c 0023     		movs	r3, #0
 1820 005e 0193     		str	r3, [sp, #4]
 571:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1821              		.loc 1 571 0
 1822 0060 0293     		str	r3, [sp, #8]
 572:Src/main.c    ****     {
 1823              		.loc 1 572 0
 1824 0062 01A9     		add	r1, sp, #4
 1825 0064 0748     		ldr	r0, .L125
 1826 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1827              	.LVL156:
 1828 006a 40B9     		cbnz	r0, .L124
 579:Src/main.c    **** 
 1829              		.loc 1 579 0
 1830 006c 0DB0     		add	sp, sp, #52
 1831              	.LCFI26:
 1832              		.cfi_remember_state
 1833              		.cfi_def_cfa_offset 4
 1834              		@ sp needed
 1835 006e 5DF804FB 		ldr	pc, [sp], #4
 1836              	.L121:
 1837              	.LCFI27:
 1838              		.cfi_restore_state
 557:Src/main.c    ****     }
 1839              		.loc 1 557 0
 1840 0072 FFF7FEFF 		bl	Error_Handler
 1841              	.LVL157:
 1842              	.L122:
 562:Src/main.c    ****     }
 1843              		.loc 1 562 0
 1844 0076 FFF7FEFF 		bl	Error_Handler
 1845              	.LVL158:
 1846              	.L123:
 568:Src/main.c    ****     }
 1847              		.loc 1 568 0
 1848 007a FFF7FEFF 		bl	Error_Handler
 1849              	.LVL159:
 1850              	.L124:
 574:Src/main.c    ****     }
 1851              		.loc 1 574 0
 1852 007e FFF7FEFF 		bl	Error_Handler
 1853              	.LVL160:
 1854              	.L126:
 1855 0082 00BF     		.align	2
 1856              	.L125:
 1857 0084 00000000 		.word	htim2
 1858              		.cfi_endproc
 1859              	.LFE138:
 1861              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1862              		.align	1
 1863              		.syntax unified
 1864              		.thumb
 1865              		.thumb_func
ARM GAS  /tmp/cc2KcRpR.s 			page 60


 1866              		.fpu fpv4-sp-d16
 1868              	MX_TIM3_Init:
 1869              	.LFB139:
 587:Src/main.c    **** 
 1870              		.loc 1 587 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 24
 1873              		@ frame_needed = 0, uses_anonymous_args = 0
 1874 0000 00B5     		push	{lr}
 1875              	.LCFI28:
 1876              		.cfi_def_cfa_offset 4
 1877              		.cfi_offset 14, -4
 1878 0002 87B0     		sub	sp, sp, #28
 1879              	.LCFI29:
 1880              		.cfi_def_cfa_offset 32
 593:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1881              		.loc 1 593 0
 1882 0004 0023     		movs	r3, #0
 1883 0006 0293     		str	r3, [sp, #8]
 1884 0008 0393     		str	r3, [sp, #12]
 1885 000a 0493     		str	r3, [sp, #16]
 1886 000c 0593     		str	r3, [sp, #20]
 594:Src/main.c    **** 
 1887              		.loc 1 594 0
 1888 000e 0093     		str	r3, [sp]
 1889 0010 0193     		str	r3, [sp, #4]
 599:Src/main.c    ****     htim3.Init.Prescaler = 18;
 1890              		.loc 1 599 0
 1891 0012 1448     		ldr	r0, .L135
 1892 0014 144A     		ldr	r2, .L135+4
 1893 0016 0260     		str	r2, [r0]
 600:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1894              		.loc 1 600 0
 1895 0018 1222     		movs	r2, #18
 1896 001a 4260     		str	r2, [r0, #4]
 601:Src/main.c    ****     htim3.Init.Period = 65500;
 1897              		.loc 1 601 0
 1898 001c 8360     		str	r3, [r0, #8]
 602:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1899              		.loc 1 602 0
 1900 001e 4FF6DC72 		movw	r2, #65500
 1901 0022 C260     		str	r2, [r0, #12]
 603:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1902              		.loc 1 603 0
 1903 0024 0361     		str	r3, [r0, #16]
 604:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1904              		.loc 1 604 0
 1905 0026 8361     		str	r3, [r0, #24]
 605:Src/main.c    ****     {
 1906              		.loc 1 605 0
 1907 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1908              	.LVL161:
 1909 002c 98B9     		cbnz	r0, .L132
 609:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1910              		.loc 1 609 0
 1911 002e 06A9     		add	r1, sp, #24
 1912 0030 4FF48053 		mov	r3, #4096
ARM GAS  /tmp/cc2KcRpR.s 			page 61


 1913 0034 41F8103D 		str	r3, [r1, #-16]!
 610:Src/main.c    ****     {
 1914              		.loc 1 610 0
 1915 0038 0A48     		ldr	r0, .L135
 1916 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1917              	.LVL162:
 1918 003e 60B9     		cbnz	r0, .L133
 614:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1919              		.loc 1 614 0
 1920 0040 0023     		movs	r3, #0
 1921 0042 0093     		str	r3, [sp]
 615:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1922              		.loc 1 615 0
 1923 0044 0193     		str	r3, [sp, #4]
 616:Src/main.c    ****     {
 1924              		.loc 1 616 0
 1925 0046 6946     		mov	r1, sp
 1926 0048 0648     		ldr	r0, .L135
 1927 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1928              	.LVL163:
 1929 004e 30B9     		cbnz	r0, .L134
 623:Src/main.c    **** 
 1930              		.loc 1 623 0
 1931 0050 07B0     		add	sp, sp, #28
 1932              	.LCFI30:
 1933              		.cfi_remember_state
 1934              		.cfi_def_cfa_offset 4
 1935              		@ sp needed
 1936 0052 5DF804FB 		ldr	pc, [sp], #4
 1937              	.L132:
 1938              	.LCFI31:
 1939              		.cfi_restore_state
 607:Src/main.c    ****     }
 1940              		.loc 1 607 0
 1941 0056 FFF7FEFF 		bl	Error_Handler
 1942              	.LVL164:
 1943              	.L133:
 612:Src/main.c    ****     }
 1944              		.loc 1 612 0
 1945 005a FFF7FEFF 		bl	Error_Handler
 1946              	.LVL165:
 1947              	.L134:
 618:Src/main.c    ****     }
 1948              		.loc 1 618 0
 1949 005e FFF7FEFF 		bl	Error_Handler
 1950              	.LVL166:
 1951              	.L136:
 1952 0062 00BF     		.align	2
 1953              	.L135:
 1954 0064 00000000 		.word	htim3
 1955 0068 00040040 		.word	1073742848
 1956              		.cfi_endproc
 1957              	.LFE139:
 1959              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1960              		.align	1
 1961              		.syntax unified
 1962              		.thumb
ARM GAS  /tmp/cc2KcRpR.s 			page 62


 1963              		.thumb_func
 1964              		.fpu fpv4-sp-d16
 1966              	MX_TIM4_Init:
 1967              	.LFB140:
 631:Src/main.c    **** 
 1968              		.loc 1 631 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 24
 1971              		@ frame_needed = 0, uses_anonymous_args = 0
 1972 0000 00B5     		push	{lr}
 1973              	.LCFI32:
 1974              		.cfi_def_cfa_offset 4
 1975              		.cfi_offset 14, -4
 1976 0002 87B0     		sub	sp, sp, #28
 1977              	.LCFI33:
 1978              		.cfi_def_cfa_offset 32
 637:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1979              		.loc 1 637 0
 1980 0004 0023     		movs	r3, #0
 1981 0006 0293     		str	r3, [sp, #8]
 1982 0008 0393     		str	r3, [sp, #12]
 1983 000a 0493     		str	r3, [sp, #16]
 1984 000c 0593     		str	r3, [sp, #20]
 638:Src/main.c    **** 
 1985              		.loc 1 638 0
 1986 000e 0093     		str	r3, [sp]
 1987 0010 0193     		str	r3, [sp, #4]
 643:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 1988              		.loc 1 643 0
 1989 0012 1448     		ldr	r0, .L145
 1990 0014 144A     		ldr	r2, .L145+4
 1991 0016 0260     		str	r2, [r0]
 644:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1992              		.loc 1 644 0
 1993 0018 4FF46162 		mov	r2, #3600
 1994 001c 4260     		str	r2, [r0, #4]
 645:Src/main.c    ****     htim4.Init.Period = 2000;
 1995              		.loc 1 645 0
 1996 001e 8360     		str	r3, [r0, #8]
 646:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1997              		.loc 1 646 0
 1998 0020 4FF4FA62 		mov	r2, #2000
 1999 0024 C260     		str	r2, [r0, #12]
 647:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2000              		.loc 1 647 0
 2001 0026 0361     		str	r3, [r0, #16]
 648:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 2002              		.loc 1 648 0
 2003 0028 8361     		str	r3, [r0, #24]
 649:Src/main.c    ****     {
 2004              		.loc 1 649 0
 2005 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2006              	.LVL167:
 2007 002e 98B9     		cbnz	r0, .L142
 653:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2008              		.loc 1 653 0
 2009 0030 06A9     		add	r1, sp, #24
ARM GAS  /tmp/cc2KcRpR.s 			page 63


 2010 0032 4FF48053 		mov	r3, #4096
 2011 0036 41F8103D 		str	r3, [r1, #-16]!
 654:Src/main.c    ****     {
 2012              		.loc 1 654 0
 2013 003a 0A48     		ldr	r0, .L145
 2014 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2015              	.LVL168:
 2016 0040 60B9     		cbnz	r0, .L143
 658:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2017              		.loc 1 658 0
 2018 0042 0023     		movs	r3, #0
 2019 0044 0093     		str	r3, [sp]
 659:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2020              		.loc 1 659 0
 2021 0046 0193     		str	r3, [sp, #4]
 660:Src/main.c    ****     {
 2022              		.loc 1 660 0
 2023 0048 6946     		mov	r1, sp
 2024 004a 0648     		ldr	r0, .L145
 2025 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2026              	.LVL169:
 2027 0050 30B9     		cbnz	r0, .L144
 667:Src/main.c    **** 
 2028              		.loc 1 667 0
 2029 0052 07B0     		add	sp, sp, #28
 2030              	.LCFI34:
 2031              		.cfi_remember_state
 2032              		.cfi_def_cfa_offset 4
 2033              		@ sp needed
 2034 0054 5DF804FB 		ldr	pc, [sp], #4
 2035              	.L142:
 2036              	.LCFI35:
 2037              		.cfi_restore_state
 651:Src/main.c    ****     }
 2038              		.loc 1 651 0
 2039 0058 FFF7FEFF 		bl	Error_Handler
 2040              	.LVL170:
 2041              	.L143:
 656:Src/main.c    ****     }
 2042              		.loc 1 656 0
 2043 005c FFF7FEFF 		bl	Error_Handler
 2044              	.LVL171:
 2045              	.L144:
 662:Src/main.c    ****     }
 2046              		.loc 1 662 0
 2047 0060 FFF7FEFF 		bl	Error_Handler
 2048              	.LVL172:
 2049              	.L146:
 2050              		.align	2
 2051              	.L145:
 2052 0064 00000000 		.word	htim4
 2053 0068 00080040 		.word	1073743872
 2054              		.cfi_endproc
 2055              	.LFE140:
 2057              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2058              		.align	1
 2059              		.syntax unified
ARM GAS  /tmp/cc2KcRpR.s 			page 64


 2060              		.thumb
 2061              		.thumb_func
 2062              		.fpu fpv4-sp-d16
 2064              	MX_TIM5_Init:
 2065              	.LFB141:
 675:Src/main.c    **** 
 2066              		.loc 1 675 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 24
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070 0000 00B5     		push	{lr}
 2071              	.LCFI36:
 2072              		.cfi_def_cfa_offset 4
 2073              		.cfi_offset 14, -4
 2074 0002 87B0     		sub	sp, sp, #28
 2075              	.LCFI37:
 2076              		.cfi_def_cfa_offset 32
 681:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2077              		.loc 1 681 0
 2078 0004 0023     		movs	r3, #0
 2079 0006 0293     		str	r3, [sp, #8]
 2080 0008 0393     		str	r3, [sp, #12]
 2081 000a 0493     		str	r3, [sp, #16]
 2082 000c 0593     		str	r3, [sp, #20]
 682:Src/main.c    **** 
 2083              		.loc 1 682 0
 2084 000e 0093     		str	r3, [sp]
 2085 0010 0193     		str	r3, [sp, #4]
 687:Src/main.c    ****     htim5.Init.Prescaler = 36;
 2086              		.loc 1 687 0
 2087 0012 1448     		ldr	r0, .L155
 2088 0014 144A     		ldr	r2, .L155+4
 2089 0016 0260     		str	r2, [r0]
 688:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2090              		.loc 1 688 0
 2091 0018 2422     		movs	r2, #36
 2092 001a 4260     		str	r2, [r0, #4]
 689:Src/main.c    ****     htim5.Init.Period = 2000;
 2093              		.loc 1 689 0
 2094 001c 8360     		str	r3, [r0, #8]
 690:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2095              		.loc 1 690 0
 2096 001e 4FF4FA62 		mov	r2, #2000
 2097 0022 C260     		str	r2, [r0, #12]
 691:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2098              		.loc 1 691 0
 2099 0024 0361     		str	r3, [r0, #16]
 692:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2100              		.loc 1 692 0
 2101 0026 8361     		str	r3, [r0, #24]
 693:Src/main.c    ****     {
 2102              		.loc 1 693 0
 2103 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2104              	.LVL173:
 2105 002c 98B9     		cbnz	r0, .L152
 697:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2106              		.loc 1 697 0
ARM GAS  /tmp/cc2KcRpR.s 			page 65


 2107 002e 06A9     		add	r1, sp, #24
 2108 0030 4FF48053 		mov	r3, #4096
 2109 0034 41F8103D 		str	r3, [r1, #-16]!
 698:Src/main.c    ****     {
 2110              		.loc 1 698 0
 2111 0038 0A48     		ldr	r0, .L155
 2112 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2113              	.LVL174:
 2114 003e 60B9     		cbnz	r0, .L153
 702:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2115              		.loc 1 702 0
 2116 0040 0023     		movs	r3, #0
 2117 0042 0093     		str	r3, [sp]
 703:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2118              		.loc 1 703 0
 2119 0044 0193     		str	r3, [sp, #4]
 704:Src/main.c    ****     {
 2120              		.loc 1 704 0
 2121 0046 6946     		mov	r1, sp
 2122 0048 0648     		ldr	r0, .L155
 2123 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2124              	.LVL175:
 2125 004e 30B9     		cbnz	r0, .L154
 711:Src/main.c    **** 
 2126              		.loc 1 711 0
 2127 0050 07B0     		add	sp, sp, #28
 2128              	.LCFI38:
 2129              		.cfi_remember_state
 2130              		.cfi_def_cfa_offset 4
 2131              		@ sp needed
 2132 0052 5DF804FB 		ldr	pc, [sp], #4
 2133              	.L152:
 2134              	.LCFI39:
 2135              		.cfi_restore_state
 695:Src/main.c    ****     }
 2136              		.loc 1 695 0
 2137 0056 FFF7FEFF 		bl	Error_Handler
 2138              	.LVL176:
 2139              	.L153:
 700:Src/main.c    ****     }
 2140              		.loc 1 700 0
 2141 005a FFF7FEFF 		bl	Error_Handler
 2142              	.LVL177:
 2143              	.L154:
 706:Src/main.c    ****     }
 2144              		.loc 1 706 0
 2145 005e FFF7FEFF 		bl	Error_Handler
 2146              	.LVL178:
 2147              	.L156:
 2148 0062 00BF     		.align	2
 2149              	.L155:
 2150 0064 00000000 		.word	htim5
 2151 0068 000C0040 		.word	1073744896
 2152              		.cfi_endproc
 2153              	.LFE141:
 2155              		.section	.text.MX_TIM6_Init,"ax",%progbits
 2156              		.align	1
ARM GAS  /tmp/cc2KcRpR.s 			page 66


 2157              		.syntax unified
 2158              		.thumb
 2159              		.thumb_func
 2160              		.fpu fpv4-sp-d16
 2162              	MX_TIM6_Init:
 2163              	.LFB142:
 719:Src/main.c    **** 
 2164              		.loc 1 719 0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 8
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 2168 0000 00B5     		push	{lr}
 2169              	.LCFI40:
 2170              		.cfi_def_cfa_offset 4
 2171              		.cfi_offset 14, -4
 2172 0002 83B0     		sub	sp, sp, #12
 2173              	.LCFI41:
 2174              		.cfi_def_cfa_offset 16
 725:Src/main.c    **** 
 2175              		.loc 1 725 0
 2176 0004 0023     		movs	r3, #0
 2177 0006 0093     		str	r3, [sp]
 2178 0008 0193     		str	r3, [sp, #4]
 730:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 2179              		.loc 1 730 0
 2180 000a 0E48     		ldr	r0, .L163
 2181 000c 0E4A     		ldr	r2, .L163+4
 2182 000e 0260     		str	r2, [r0]
 731:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2183              		.loc 1 731 0
 2184 0010 4FF46162 		mov	r2, #3600
 2185 0014 4260     		str	r2, [r0, #4]
 732:Src/main.c    ****     htim6.Init.Period = 2000;
 2186              		.loc 1 732 0
 2187 0016 8360     		str	r3, [r0, #8]
 733:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2188              		.loc 1 733 0
 2189 0018 4FF4FA62 		mov	r2, #2000
 2190 001c C260     		str	r2, [r0, #12]
 734:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2191              		.loc 1 734 0
 2192 001e 8361     		str	r3, [r0, #24]
 735:Src/main.c    ****     {
 2193              		.loc 1 735 0
 2194 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2195              	.LVL179:
 2196 0024 50B9     		cbnz	r0, .L161
 739:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2197              		.loc 1 739 0
 2198 0026 0023     		movs	r3, #0
 2199 0028 0093     		str	r3, [sp]
 740:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2200              		.loc 1 740 0
 2201 002a 0193     		str	r3, [sp, #4]
 741:Src/main.c    ****     {
 2202              		.loc 1 741 0
 2203 002c 6946     		mov	r1, sp
ARM GAS  /tmp/cc2KcRpR.s 			page 67


 2204 002e 0548     		ldr	r0, .L163
 2205 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2206              	.LVL180:
 2207 0034 20B9     		cbnz	r0, .L162
 748:Src/main.c    **** 
 2208              		.loc 1 748 0
 2209 0036 03B0     		add	sp, sp, #12
 2210              	.LCFI42:
 2211              		.cfi_remember_state
 2212              		.cfi_def_cfa_offset 4
 2213              		@ sp needed
 2214 0038 5DF804FB 		ldr	pc, [sp], #4
 2215              	.L161:
 2216              	.LCFI43:
 2217              		.cfi_restore_state
 737:Src/main.c    ****     }
 2218              		.loc 1 737 0
 2219 003c FFF7FEFF 		bl	Error_Handler
 2220              	.LVL181:
 2221              	.L162:
 743:Src/main.c    ****     }
 2222              		.loc 1 743 0
 2223 0040 FFF7FEFF 		bl	Error_Handler
 2224              	.LVL182:
 2225              	.L164:
 2226              		.align	2
 2227              	.L163:
 2228 0044 00000000 		.word	htim6
 2229 0048 00100040 		.word	1073745920
 2230              		.cfi_endproc
 2231              	.LFE142:
 2233              		.section	.text.MX_TIM7_Init,"ax",%progbits
 2234              		.align	1
 2235              		.syntax unified
 2236              		.thumb
 2237              		.thumb_func
 2238              		.fpu fpv4-sp-d16
 2240              	MX_TIM7_Init:
 2241              	.LFB143:
 756:Src/main.c    **** 
 2242              		.loc 1 756 0
 2243              		.cfi_startproc
 2244              		@ args = 0, pretend = 0, frame = 8
 2245              		@ frame_needed = 0, uses_anonymous_args = 0
 2246 0000 00B5     		push	{lr}
 2247              	.LCFI44:
 2248              		.cfi_def_cfa_offset 4
 2249              		.cfi_offset 14, -4
 2250 0002 83B0     		sub	sp, sp, #12
 2251              	.LCFI45:
 2252              		.cfi_def_cfa_offset 16
 762:Src/main.c    **** 
 2253              		.loc 1 762 0
 2254 0004 0023     		movs	r3, #0
 2255 0006 0093     		str	r3, [sp]
 2256 0008 0193     		str	r3, [sp, #4]
 767:Src/main.c    ****     htim7.Init.Prescaler = 36;
ARM GAS  /tmp/cc2KcRpR.s 			page 68


 2257              		.loc 1 767 0
 2258 000a 0E48     		ldr	r0, .L171
 2259 000c 0E4A     		ldr	r2, .L171+4
 2260 000e 0260     		str	r2, [r0]
 768:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 2261              		.loc 1 768 0
 2262 0010 2422     		movs	r2, #36
 2263 0012 4260     		str	r2, [r0, #4]
 769:Src/main.c    ****     htim7.Init.Period = 6000;
 2264              		.loc 1 769 0
 2265 0014 8360     		str	r3, [r0, #8]
 770:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2266              		.loc 1 770 0
 2267 0016 41F27072 		movw	r2, #6000
 2268 001a C260     		str	r2, [r0, #12]
 771:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 2269              		.loc 1 771 0
 2270 001c 8361     		str	r3, [r0, #24]
 772:Src/main.c    ****     {
 2271              		.loc 1 772 0
 2272 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2273              	.LVL183:
 2274 0022 50B9     		cbnz	r0, .L169
 776:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2275              		.loc 1 776 0
 2276 0024 0023     		movs	r3, #0
 2277 0026 0093     		str	r3, [sp]
 777:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 2278              		.loc 1 777 0
 2279 0028 0193     		str	r3, [sp, #4]
 778:Src/main.c    ****     {
 2280              		.loc 1 778 0
 2281 002a 6946     		mov	r1, sp
 2282 002c 0548     		ldr	r0, .L171
 2283 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2284              	.LVL184:
 2285 0032 20B9     		cbnz	r0, .L170
 785:Src/main.c    **** 
 2286              		.loc 1 785 0
 2287 0034 03B0     		add	sp, sp, #12
 2288              	.LCFI46:
 2289              		.cfi_remember_state
 2290              		.cfi_def_cfa_offset 4
 2291              		@ sp needed
 2292 0036 5DF804FB 		ldr	pc, [sp], #4
 2293              	.L169:
 2294              	.LCFI47:
 2295              		.cfi_restore_state
 774:Src/main.c    ****     }
 2296              		.loc 1 774 0
 2297 003a FFF7FEFF 		bl	Error_Handler
 2298              	.LVL185:
 2299              	.L170:
 780:Src/main.c    ****     }
 2300              		.loc 1 780 0
 2301 003e FFF7FEFF 		bl	Error_Handler
 2302              	.LVL186:
ARM GAS  /tmp/cc2KcRpR.s 			page 69


 2303              	.L172:
 2304 0042 00BF     		.align	2
 2305              	.L171:
 2306 0044 00000000 		.word	htim7
 2307 0048 00140040 		.word	1073746944
 2308              		.cfi_endproc
 2309              	.LFE143:
 2311              		.section	.text.MX_TIM10_Init,"ax",%progbits
 2312              		.align	1
 2313              		.syntax unified
 2314              		.thumb
 2315              		.thumb_func
 2316              		.fpu fpv4-sp-d16
 2318              	MX_TIM10_Init:
 2319              	.LFB144:
 793:Src/main.c    **** 
 2320              		.loc 1 793 0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 0
 2323              		@ frame_needed = 0, uses_anonymous_args = 0
 2324 0000 08B5     		push	{r3, lr}
 2325              	.LCFI48:
 2326              		.cfi_def_cfa_offset 8
 2327              		.cfi_offset 3, -8
 2328              		.cfi_offset 14, -4
 802:Src/main.c    ****     htim10.Init.Prescaler = 72;
 2329              		.loc 1 802 0
 2330 0002 0948     		ldr	r0, .L177
 2331 0004 094B     		ldr	r3, .L177+4
 2332 0006 0360     		str	r3, [r0]
 803:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 2333              		.loc 1 803 0
 2334 0008 4823     		movs	r3, #72
 2335 000a 4360     		str	r3, [r0, #4]
 804:Src/main.c    ****     htim10.Init.Period = 500;
 2336              		.loc 1 804 0
 2337 000c 0023     		movs	r3, #0
 2338 000e 8360     		str	r3, [r0, #8]
 805:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2339              		.loc 1 805 0
 2340 0010 4FF4FA72 		mov	r2, #500
 2341 0014 C260     		str	r2, [r0, #12]
 806:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2342              		.loc 1 806 0
 2343 0016 0361     		str	r3, [r0, #16]
 807:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 2344              		.loc 1 807 0
 2345 0018 8361     		str	r3, [r0, #24]
 808:Src/main.c    ****     {
 2346              		.loc 1 808 0
 2347 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2348              	.LVL187:
 2349 001e 00B9     		cbnz	r0, .L176
 2350 0020 08BD     		pop	{r3, pc}
 2351              	.L176:
 810:Src/main.c    ****     }
 2352              		.loc 1 810 0
ARM GAS  /tmp/cc2KcRpR.s 			page 70


 2353 0022 FFF7FEFF 		bl	Error_Handler
 2354              	.LVL188:
 2355              	.L178:
 2356 0026 00BF     		.align	2
 2357              	.L177:
 2358 0028 00000000 		.word	htim10
 2359 002c 00440140 		.word	1073824768
 2360              		.cfi_endproc
 2361              	.LFE144:
 2363              		.section	.text.MX_TIM11_Init,"ax",%progbits
 2364              		.align	1
 2365              		.syntax unified
 2366              		.thumb
 2367              		.thumb_func
 2368              		.fpu fpv4-sp-d16
 2370              	MX_TIM11_Init:
 2371              	.LFB145:
 823:Src/main.c    **** 
 2372              		.loc 1 823 0
 2373              		.cfi_startproc
 2374              		@ args = 0, pretend = 0, frame = 0
 2375              		@ frame_needed = 0, uses_anonymous_args = 0
 2376 0000 08B5     		push	{r3, lr}
 2377              	.LCFI49:
 2378              		.cfi_def_cfa_offset 8
 2379              		.cfi_offset 3, -8
 2380              		.cfi_offset 14, -4
 832:Src/main.c    ****     htim11.Init.Prescaler = 0;
 2381              		.loc 1 832 0
 2382 0002 0748     		ldr	r0, .L183
 2383 0004 074B     		ldr	r3, .L183+4
 2384 0006 0360     		str	r3, [r0]
 833:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 2385              		.loc 1 833 0
 2386 0008 0023     		movs	r3, #0
 2387 000a 4360     		str	r3, [r0, #4]
 834:Src/main.c    ****     htim11.Init.Period = 0;
 2388              		.loc 1 834 0
 2389 000c 8360     		str	r3, [r0, #8]
 835:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2390              		.loc 1 835 0
 2391 000e C360     		str	r3, [r0, #12]
 836:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2392              		.loc 1 836 0
 2393 0010 0361     		str	r3, [r0, #16]
 837:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 2394              		.loc 1 837 0
 2395 0012 8361     		str	r3, [r0, #24]
 838:Src/main.c    ****     {
 2396              		.loc 1 838 0
 2397 0014 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2398              	.LVL189:
 2399 0018 00B9     		cbnz	r0, .L182
 2400 001a 08BD     		pop	{r3, pc}
 2401              	.L182:
 840:Src/main.c    ****     }
 2402              		.loc 1 840 0
ARM GAS  /tmp/cc2KcRpR.s 			page 71


 2403 001c FFF7FEFF 		bl	Error_Handler
 2404              	.LVL190:
 2405              	.L184:
 2406              		.align	2
 2407              	.L183:
 2408 0020 00000000 		.word	htim11
 2409 0024 00480140 		.word	1073825792
 2410              		.cfi_endproc
 2411              	.LFE145:
 2413              		.section	.text.SystemClock_Config,"ax",%progbits
 2414              		.align	1
 2415              		.global	SystemClock_Config
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2419              		.fpu fpv4-sp-d16
 2421              	SystemClock_Config:
 2422              	.LFB133:
 330:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2423              		.loc 1 330 0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 80
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 2427 0000 00B5     		push	{lr}
 2428              	.LCFI50:
 2429              		.cfi_def_cfa_offset 4
 2430              		.cfi_offset 14, -4
 2431 0002 95B0     		sub	sp, sp, #84
 2432              	.LCFI51:
 2433              		.cfi_def_cfa_offset 88
 331:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2434              		.loc 1 331 0
 2435 0004 3422     		movs	r2, #52
 2436 0006 0021     		movs	r1, #0
 2437 0008 07A8     		add	r0, sp, #28
 2438 000a FFF7FEFF 		bl	memset
 2439              	.LVL191:
 332:Src/main.c    **** 
 2440              		.loc 1 332 0
 2441 000e 0023     		movs	r3, #0
 2442 0010 0293     		str	r3, [sp, #8]
 2443 0012 0393     		str	r3, [sp, #12]
 2444 0014 0493     		str	r3, [sp, #16]
 2445 0016 0593     		str	r3, [sp, #20]
 2446 0018 0693     		str	r3, [sp, #24]
 2447              	.LBB14:
 336:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2448              		.loc 1 336 0
 2449 001a 0093     		str	r3, [sp]
 2450 001c 204A     		ldr	r2, .L191
 2451 001e 116C     		ldr	r1, [r2, #64]
 2452 0020 41F08051 		orr	r1, r1, #268435456
 2453 0024 1164     		str	r1, [r2, #64]
 2454 0026 126C     		ldr	r2, [r2, #64]
 2455 0028 02F08052 		and	r2, r2, #268435456
 2456 002c 0092     		str	r2, [sp]
 2457 002e 009A     		ldr	r2, [sp]
ARM GAS  /tmp/cc2KcRpR.s 			page 72


 2458              	.LBE14:
 2459              	.LBB15:
 337:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 2460              		.loc 1 337 0
 2461 0030 0193     		str	r3, [sp, #4]
 2462 0032 1C4B     		ldr	r3, .L191+4
 2463 0034 1A68     		ldr	r2, [r3]
 2464 0036 42F44042 		orr	r2, r2, #49152
 2465 003a 1A60     		str	r2, [r3]
 2466 003c 1B68     		ldr	r3, [r3]
 2467 003e 03F44043 		and	r3, r3, #49152
 2468 0042 0193     		str	r3, [sp, #4]
 2469 0044 019B     		ldr	r3, [sp, #4]
 2470              	.LBE15:
 340:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 2471              		.loc 1 340 0
 2472 0046 0123     		movs	r3, #1
 2473 0048 0793     		str	r3, [sp, #28]
 341:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2474              		.loc 1 341 0
 2475 004a 4FF4A023 		mov	r3, #327680
 2476 004e 0893     		str	r3, [sp, #32]
 342:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2477              		.loc 1 342 0
 2478 0050 0223     		movs	r3, #2
 2479 0052 0D93     		str	r3, [sp, #52]
 343:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2480              		.loc 1 343 0
 2481 0054 4FF48002 		mov	r2, #4194304
 2482 0058 0E92     		str	r2, [sp, #56]
 344:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 2483              		.loc 1 344 0
 2484 005a 0822     		movs	r2, #8
 2485 005c 0F92     		str	r2, [sp, #60]
 345:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2486              		.loc 1 345 0
 2487 005e 4FF49072 		mov	r2, #288
 2488 0062 1092     		str	r2, [sp, #64]
 346:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 2489              		.loc 1 346 0
 2490 0064 1193     		str	r3, [sp, #68]
 347:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 2491              		.loc 1 347 0
 2492 0066 1293     		str	r3, [sp, #72]
 348:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2493              		.loc 1 348 0
 2494 0068 1393     		str	r3, [sp, #76]
 349:Src/main.c    ****     {
 2495              		.loc 1 349 0
 2496 006a 07A8     		add	r0, sp, #28
 2497 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2498              	.LVL192:
 2499 0070 88B9     		cbnz	r0, .L189
 355:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 2500              		.loc 1 355 0
 2501 0072 0F23     		movs	r3, #15
 2502 0074 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/cc2KcRpR.s 			page 73


 356:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2503              		.loc 1 356 0
 2504 0076 0223     		movs	r3, #2
 2505 0078 0393     		str	r3, [sp, #12]
 357:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 2506              		.loc 1 357 0
 2507 007a 0023     		movs	r3, #0
 2508 007c 0493     		str	r3, [sp, #16]
 358:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 2509              		.loc 1 358 0
 2510 007e 4FF4A053 		mov	r3, #5120
 2511 0082 0593     		str	r3, [sp, #20]
 359:Src/main.c    **** 
 2512              		.loc 1 359 0
 2513 0084 0693     		str	r3, [sp, #24]
 361:Src/main.c    ****     {
 2514              		.loc 1 361 0
 2515 0086 0421     		movs	r1, #4
 2516 0088 02A8     		add	r0, sp, #8
 2517 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2518              	.LVL193:
 2519 008e 20B9     		cbnz	r0, .L190
 365:Src/main.c    **** 
 2520              		.loc 1 365 0
 2521 0090 15B0     		add	sp, sp, #84
 2522              	.LCFI52:
 2523              		.cfi_remember_state
 2524              		.cfi_def_cfa_offset 4
 2525              		@ sp needed
 2526 0092 5DF804FB 		ldr	pc, [sp], #4
 2527              	.L189:
 2528              	.LCFI53:
 2529              		.cfi_restore_state
 351:Src/main.c    ****     }
 2530              		.loc 1 351 0
 2531 0096 FFF7FEFF 		bl	Error_Handler
 2532              	.LVL194:
 2533              	.L190:
 363:Src/main.c    ****     }
 2534              		.loc 1 363 0
 2535 009a FFF7FEFF 		bl	Error_Handler
 2536              	.LVL195:
 2537              	.L192:
 2538 009e 00BF     		.align	2
 2539              	.L191:
 2540 00a0 00380240 		.word	1073887232
 2541 00a4 00700040 		.word	1073770496
 2542              		.cfi_endproc
 2543              	.LFE133:
 2545              		.section	.text.main,"ax",%progbits
 2546              		.align	1
 2547              		.global	main
 2548              		.syntax unified
 2549              		.thumb
 2550              		.thumb_func
 2551              		.fpu fpv4-sp-d16
 2553              	main:
ARM GAS  /tmp/cc2KcRpR.s 			page 74


 2554              	.LFB132:
 149:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2555              		.loc 1 149 0
 2556              		.cfi_startproc
 2557              		@ Volatile: function does not return.
 2558              		@ args = 0, pretend = 0, frame = 0
 2559              		@ frame_needed = 0, uses_anonymous_args = 0
 2560 0000 2DE98848 		push	{r3, r7, fp, lr}
 2561              	.LCFI54:
 2562              		.cfi_def_cfa_offset 16
 2563              		.cfi_offset 3, -16
 2564              		.cfi_offset 7, -12
 2565              		.cfi_offset 11, -8
 2566              		.cfi_offset 14, -4
 156:Src/main.c    **** 
 2567              		.loc 1 156 0
 2568 0004 FFF7FEFF 		bl	HAL_Init
 2569              	.LVL196:
 163:Src/main.c    **** 
 2570              		.loc 1 163 0
 2571 0008 FFF7FEFF 		bl	SystemClock_Config
 2572              	.LVL197:
 170:Src/main.c    ****     MX_DMA_Init();
 2573              		.loc 1 170 0
 2574 000c FFF7FEFF 		bl	MX_GPIO_Init
 2575              	.LVL198:
 171:Src/main.c    ****     MX_USART2_UART_Init();
 2576              		.loc 1 171 0
 2577 0010 FFF7FEFF 		bl	MX_DMA_Init
 2578              	.LVL199:
 172:Src/main.c    ****     MX_CAN1_Init();
 2579              		.loc 1 172 0
 2580 0014 FFF7FEFF 		bl	MX_USART2_UART_Init
 2581              	.LVL200:
 173:Src/main.c    ****     MX_SPI1_Init();
 2582              		.loc 1 173 0
 2583 0018 FFF7FEFF 		bl	MX_CAN1_Init
 2584              	.LVL201:
 174:Src/main.c    ****     MX_ADC1_Init();
 2585              		.loc 1 174 0
 2586 001c FFF7FEFF 		bl	MX_SPI1_Init
 2587              	.LVL202:
 175:Src/main.c    ****     MX_USART1_UART_Init();
 2588              		.loc 1 175 0
 2589 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2590              	.LVL203:
 176:Src/main.c    ****     MX_TIM2_Init();
 2591              		.loc 1 176 0
 2592 0024 FFF7FEFF 		bl	MX_USART1_UART_Init
 2593              	.LVL204:
 177:Src/main.c    ****     MX_TIM3_Init();
 2594              		.loc 1 177 0
 2595 0028 FFF7FEFF 		bl	MX_TIM2_Init
 2596              	.LVL205:
 178:Src/main.c    ****     MX_TIM4_Init();
 2597              		.loc 1 178 0
 2598 002c FFF7FEFF 		bl	MX_TIM3_Init
ARM GAS  /tmp/cc2KcRpR.s 			page 75


 2599              	.LVL206:
 179:Src/main.c    ****     MX_TIM5_Init();
 2600              		.loc 1 179 0
 2601 0030 FFF7FEFF 		bl	MX_TIM4_Init
 2602              	.LVL207:
 180:Src/main.c    ****     MX_TIM6_Init();
 2603              		.loc 1 180 0
 2604 0034 FFF7FEFF 		bl	MX_TIM5_Init
 2605              	.LVL208:
 181:Src/main.c    ****     MX_TIM7_Init();
 2606              		.loc 1 181 0
 2607 0038 FFF7FEFF 		bl	MX_TIM6_Init
 2608              	.LVL209:
 182:Src/main.c    ****     MX_TIM10_Init();
 2609              		.loc 1 182 0
 2610 003c FFF7FEFF 		bl	MX_TIM7_Init
 2611              	.LVL210:
 183:Src/main.c    ****     MX_TIM11_Init();
 2612              		.loc 1 183 0
 2613 0040 FFF7FEFF 		bl	MX_TIM10_Init
 2614              	.LVL211:
 184:Src/main.c    **** 
 2615              		.loc 1 184 0
 2616 0044 FFF7FEFF 		bl	MX_TIM11_Init
 2617              	.LVL212:
 187:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2618              		.loc 1 187 0
 2619 0048 FFF7FEFF 		bl	MX_NVIC_Init
 2620              	.LVL213:
 190:Src/main.c    ****     sFilter.FilterIdLow = 0;
 2621              		.loc 1 190 0
 2622 004c 7349     		ldr	r1, .L198
 2623 004e 0025     		movs	r5, #0
 2624 0050 8D61     		str	r5, [r1, #24]
 191:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 2625              		.loc 1 191 0
 2626 0052 4D60     		str	r5, [r1, #4]
 192:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 2627              		.loc 1 192 0
 2628 0054 0D60     		str	r5, [r1]
 193:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 2629              		.loc 1 193 0
 2630 0056 8D60     		str	r5, [r1, #8]
 194:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 2631              		.loc 1 194 0
 2632 0058 CD60     		str	r5, [r1, #12]
 195:Src/main.c    ****     sFilter.FilterBank = 0;
 2633              		.loc 1 195 0
 2634 005a 0D61     		str	r5, [r1, #16]
 196:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 2635              		.loc 1 196 0
 2636 005c 4D61     		str	r5, [r1, #20]
 197:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 2637              		.loc 1 197 0
 2638 005e CD61     		str	r5, [r1, #28]
 198:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 2639              		.loc 1 198 0
ARM GAS  /tmp/cc2KcRpR.s 			page 76


 2640 0060 4FF00109 		mov	r9, #1
 2641 0064 C1F82090 		str	r9, [r1, #32]
 199:Src/main.c    **** 
 2642              		.loc 1 199 0
 2643 0068 6D4C     		ldr	r4, .L198+4
 2644 006a 2046     		mov	r0, r4
 2645 006c FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 2646              	.LVL214:
 201:Src/main.c    **** 
 2647              		.loc 1 201 0
 2648 0070 2046     		mov	r0, r4
 2649 0072 FFF7FEFF 		bl	HAL_CAN_Start
 2650              	.LVL215:
 203:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 2651              		.loc 1 203 0
 2652 0076 1421     		movs	r1, #20
 2653 0078 2046     		mov	r0, r4
 2654 007a FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2655              	.LVL216:
 204:Src/main.c    ****     /* USER CODE END 2 */
 2656              		.loc 1 204 0
 2657 007e 1521     		movs	r1, #21
 2658 0080 2046     		mov	r0, r4
 2659 0082 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2660              	.LVL217:
 209:Src/main.c    ****     // can initialization //
 2661              		.loc 1 209 0
 2662 0086 674B     		ldr	r3, .L198+8
 2663 0088 9C61     		str	r4, [r3, #24]
 213:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 2664              		.loc 1 213 0
 2665 008a 674F     		ldr	r7, .L198+12
 2666 008c DFF8F481 		ldr	r8, .L198+104
 2667 0090 C7F82082 		str	r8, [r7, #544]
 214:Src/main.c    ****     accel.hspi = &hspi1;
 2668              		.loc 1 214 0
 2669 0094 4FF40074 		mov	r4, #512
 2670 0098 A7F82442 		strh	r4, [r7, #548]	@ movhi
 215:Src/main.c    **** 
 2671              		.loc 1 215 0
 2672 009c 634B     		ldr	r3, .L198+16
 2673 009e C7F83032 		str	r3, [r7, #560]
 217:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 2674              		.loc 1 217 0
 2675 00a2 634E     		ldr	r6, .L198+20
 2676 00a4 6348     		ldr	r0, .L198+24
 2677 00a6 C6F82002 		str	r0, [r6, #544]
 218:Src/main.c    ****     gyro.hspi = &hspi1;
 2678              		.loc 1 218 0
 2679 00aa 4FF4807B 		mov	fp, #256
 2680 00ae A6F824B2 		strh	fp, [r6, #548]	@ movhi
 219:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 2681              		.loc 1 219 0
 2682 00b2 C6F83032 		str	r3, [r6, #560]
 220:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 2683              		.loc 1 220 0
 2684 00b6 4A46     		mov	r2, r9
ARM GAS  /tmp/cc2KcRpR.s 			page 77


 2685 00b8 5946     		mov	r1, fp
 2686 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 2687              	.LVL218:
 221:Src/main.c    **** 
 2688              		.loc 1 221 0
 2689 00be 4A46     		mov	r2, r9
 2690 00c0 2146     		mov	r1, r4
 2691 00c2 4046     		mov	r0, r8
 2692 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2693              	.LVL219:
 223:Src/main.c    ****     {
 2694              		.loc 1 223 0
 2695 00c8 5B49     		ldr	r1, .L198+28
 2696 00ca 5C48     		ldr	r0, .L198+32
 2697 00cc FFF7FEFF 		bl	gps_init
 2698              	.LVL220:
 228:Src/main.c    ****     steer_enc_prescaler /= 3;
 2699              		.loc 1 228 0
 2700 00d0 DFF8B4A1 		ldr	r10, .L198+108
 2701 00d4 DAF80C20 		ldr	r2, [r10, #12]
 229:Src/main.c    ****     steer_enc_prescaler /= 20;
 2702              		.loc 1 229 0
 2703 00d8 594B     		ldr	r3, .L198+36
 2704 00da 83FB0213 		smull	r1, r3, r3, r2
 2705 00de A3EBE273 		sub	r3, r3, r2, asr #31
 230:Src/main.c    ****     steer_enc_prescaler += 40;
 2706              		.loc 1 230 0
 2707 00e2 584A     		ldr	r2, .L198+40
 2708 00e4 82FB0312 		smull	r1, r2, r2, r3
 2709 00e8 DB17     		asrs	r3, r3, #31
 2710 00ea C3EBE203 		rsb	r3, r3, r2, asr #3
 231:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 2711              		.loc 1 231 0
 2712 00ee 2833     		adds	r3, r3, #40
 2713 00f0 554A     		ldr	r2, .L198+44
 2714 00f2 1360     		str	r3, [r2]
 232:Src/main.c    **** 
 2715              		.loc 1 232 0
 2716 00f4 554C     		ldr	r4, .L198+48
 2717 00f6 2366     		str	r3, [r4, #96]
 234:Src/main.c    ****     pot_2.min = 2350;
 2718              		.loc 1 234 0
 2719 00f8 554B     		ldr	r3, .L198+52
 2720 00fa 40F6DC72 		movw	r2, #4060
 2721 00fe 5A60     		str	r2, [r3, #4]
 235:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 2722              		.loc 1 235 0
 2723 0100 40F62E12 		movw	r2, #2350
 2724 0104 9A60     		str	r2, [r3, #8]
 236:Src/main.c    **** 
 2725              		.loc 1 236 0
 2726 0106 40F2AE62 		movw	r2, #1710
 2727 010a DA60     		str	r2, [r3, #12]
 238:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 2728              		.loc 1 238 0
 2729 010c C4F8EC83 		str	r8, [r4, #1004]
 239:Src/main.c    ****     enc.DataPinName = GPIOC;
ARM GAS  /tmp/cc2KcRpR.s 			page 78


 2730              		.loc 1 239 0
 2731 0110 4021     		movs	r1, #64
 2732 0112 A4F8F413 		strh	r1, [r4, #1012]	@ movhi
 240:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 2733              		.loc 1 240 0
 2734 0116 C4F8F083 		str	r8, [r4, #1008]
 241:Src/main.c    **** 
 2735              		.loc 1 241 0
 2736 011a A4F8F6B3 		strh	fp, [r4, #1014]	@ movhi
 243:Src/main.c    ****     enc.interrupt_flag = 0;
 2737              		.loc 1 243 0
 2738 011e C4F86490 		str	r9, [r4, #100]
 244:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 2739              		.loc 1 244 0
 2740 0122 A560     		str	r5, [r4, #8]
 245:Src/main.c    ****     enc.average_speed = 0;
 2741              		.loc 1 245 0
 2742 0124 DFF864B1 		ldr	fp, .L198+112
 2743 0128 C4F8E4B3 		str	fp, [r4, #996]
 246:Src/main.c    ****     enc.wheel_diameter = 0.395;
 2744              		.loc 1 246 0
 2745 012c 0022     		movs	r2, #0
 2746 012e 0023     		movs	r3, #0
 2747 0130 C4E9F623 		strd	r2, [r4, #984]
 247:Src/main.c    ****     enc.data_size = 15;
 2748              		.loc 1 247 0
 2749 0134 474B     		ldr	r3, .L198+56
 2750 0136 6367     		str	r3, [r4, #116]	@ float
 248:Src/main.c    ****     enc.clock_period = 2;
 2751              		.loc 1 248 0
 2752 0138 0F23     		movs	r3, #15
 2753 013a 2360     		str	r3, [r4]
 249:Src/main.c    ****     enc.wheel_rotation = 0;
 2754              		.loc 1 249 0
 2755 013c 0223     		movs	r3, #2
 2756 013e E360     		str	r3, [r4, #12]
 250:Src/main.c    ****     enc.Km = 0;
 2757              		.loc 1 250 0
 2758 0140 A566     		str	r5, [r4, #104]
 251:Src/main.c    **** 
 2759              		.loc 1 251 0
 2760 0142 0023     		movs	r3, #0
 2761 0144 E366     		str	r3, [r4, #108]	@ float
 253:Src/main.c    ****     enc.frequency = 0;
 2762              		.loc 1 253 0
 2763 0146 444A     		ldr	r2, .L198+60
 2764 0148 A267     		str	r2, [r4, #120]	@ float
 254:Src/main.c    ****     enc.frequency_timer = &htim7;
 2765              		.loc 1 254 0
 2766 014a E367     		str	r3, [r4, #124]	@ float
 255:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 2767              		.loc 1 255 0
 2768 014c 434B     		ldr	r3, .L198+64
 2769 014e C4F8E833 		str	r3, [r4, #1000]
 256:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 2770              		.loc 1 256 0
 2771 0152 434B     		ldr	r3, .L198+68
ARM GAS  /tmp/cc2KcRpR.s 			page 79


 2772 0154 C4F88030 		str	r3, [r4, #128]
 257:Src/main.c    **** 
 2773              		.loc 1 257 0
 2774 0158 4A46     		mov	r2, r9
 2775 015a 4046     		mov	r0, r8
 2776 015c FFF7FEFF 		bl	HAL_GPIO_WritePin
 2777              	.LVL221:
 259:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 2778              		.loc 1 259 0
 2779 0160 DFF82C81 		ldr	r8, .L198+116
 2780 0164 4046     		mov	r0, r8
 2781 0166 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2782              	.LVL222:
 260:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 2783              		.loc 1 260 0
 2784 016a 5046     		mov	r0, r10
 2785 016c FFF7FEFF 		bl	HAL_TIM_Base_Start
 2786              	.LVL223:
 264:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 2787              		.loc 1 264 0
 2788 0170 3A48     		ldr	r0, .L198+64
 2789 0172 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2790              	.LVL224:
 265:Src/main.c    **** 
 2791              		.loc 1 265 0
 2792 0176 DFF81C91 		ldr	r9, .L198+120
 2793 017a 4846     		mov	r0, r9
 2794 017c FFF7FEFF 		bl	HAL_TIM_Base_Start
 2795              	.LVL225:
 267:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 2796              		.loc 1 267 0
 2797 0180 4046     		mov	r0, r8
 2798 0182 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2799              	.LVL226:
 268:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 2800              		.loc 1 268 0
 2801 0186 5046     		mov	r0, r10
 2802 0188 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2803              	.LVL227:
 272:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 2804              		.loc 1 272 0
 2805 018c 3348     		ldr	r0, .L198+64
 2806 018e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2807              	.LVL228:
 273:Src/main.c    **** 
 2808              		.loc 1 273 0
 2809 0192 4846     		mov	r0, r9
 2810 0194 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2811              	.LVL229:
 275:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 2812              		.loc 1 275 0
 2813 0198 324B     		ldr	r3, .L198+72
 2814 019a 1B68     		ldr	r3, [r3]
 2815 019c 5D62     		str	r5, [r3, #36]
 276:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 2816              		.loc 1 276 0
 2817 019e DBF80030 		ldr	r3, [fp]
ARM GAS  /tmp/cc2KcRpR.s 			page 80


 2818 01a2 5D62     		str	r5, [r3, #36]
 280:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 2819              		.loc 1 280 0
 2820 01a4 304B     		ldr	r3, .L198+76
 2821 01a6 1B68     		ldr	r3, [r3]
 2822 01a8 5D62     		str	r5, [r3, #36]
 281:Src/main.c    **** 
 2823              		.loc 1 281 0
 2824 01aa 304B     		ldr	r3, .L198+80
 2825 01ac 1B68     		ldr	r3, [r3]
 2826 01ae 5D62     		str	r5, [r3, #36]
 284:Src/main.c    **** 
 2827              		.loc 1 284 0
 2828 01b0 2046     		mov	r0, r4
 2829 01b2 FFF7FEFF 		bl	enc_calculate_optimal_frequency
 2830              	.LVL230:
 286:Src/main.c    ****     gyro.scale = 500;
 2831              		.loc 1 286 0
 2832 01b6 0423     		movs	r3, #4
 2833 01b8 C7F81832 		str	r3, [r7, #536]
 287:Src/main.c    **** 
 2834              		.loc 1 287 0
 2835 01bc 4FF4FA73 		mov	r3, #500
 2836 01c0 C6F81832 		str	r3, [r6, #536]
 290:Src/main.c    ****     //LSMD9S0_check(&imu);
 2837              		.loc 1 290 0
 2838 01c4 3146     		mov	r1, r6
 2839 01c6 3846     		mov	r0, r7
 2840 01c8 FFF7FEFF 		bl	LSMD9S0_accel_gyro_init
 2841              	.LVL231:
 293:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 2842              		.loc 1 293 0
 2843 01cc 3846     		mov	r0, r7
 2844 01ce FFF7FEFF 		bl	LSM9DS0_calibration
 2845              	.LVL232:
 294:Src/main.c    **** 
 2846              		.loc 1 294 0
 2847 01d2 3046     		mov	r0, r6
 2848 01d4 FFF7FEFF 		bl	LSM9DS0_calibration
 2849              	.LVL233:
 296:Src/main.c    **** 
 2850              		.loc 1 296 0
 2851 01d8 254B     		ldr	r3, .L198+84
 2852 01da 1D60     		str	r5, [r3]
 2853 01dc 05E0     		b	.L194
 2854              	.L195:
 318:Src/main.c    ****             command_flag = 0;
 2855              		.loc 1 318 0
 2856 01de 0120     		movs	r0, #1
 2857 01e0 FFF7FEFF 		bl	HAL_Delay
 2858              	.LVL234:
 319:Src/main.c    ****         }
 2859              		.loc 1 319 0
 2860 01e4 0022     		movs	r2, #0
 2861 01e6 234B     		ldr	r3, .L198+88
 2862 01e8 1A60     		str	r2, [r3]
 2863              	.L194:
ARM GAS  /tmp/cc2KcRpR.s 			page 81


 305:Src/main.c    **** 
 2864              		.loc 1 305 0
 2865 01ea 0322     		movs	r2, #3
 2866 01ec 2249     		ldr	r1, .L198+92
 2867 01ee 2348     		ldr	r0, .L198+96
 2868 01f0 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2869              	.LVL235:
 308:Src/main.c    ****         {
 2870              		.loc 1 308 0
 2871 01f4 1F4B     		ldr	r3, .L198+88
 2872 01f6 1B68     		ldr	r3, [r3]
 2873 01f8 002B     		cmp	r3, #0
 2874 01fa F0D1     		bne	.L195
 310:Src/main.c    ****             {
 2875              		.loc 1 310 0
 2876 01fc FFF7FEFF 		bl	HAL_GetTick
 2877              	.LVL236:
 2878 0200 1F4B     		ldr	r3, .L198+100
 2879 0202 1B68     		ldr	r3, [r3]
 2880 0204 9842     		cmp	r0, r3
 2881 0206 F0D0     		beq	.L194
 312:Src/main.c    ****                 previous_millis = HAL_GetTick();
 2882              		.loc 1 312 0
 2883 0208 FFF7FEFF 		bl	HAL_GetTick
 2884              	.LVL237:
 2885 020c FFF7FEFF 		bl	send_CAN_data
 2886              	.LVL238:
 313:Src/main.c    ****             }
 2887              		.loc 1 313 0
 2888 0210 FFF7FEFF 		bl	HAL_GetTick
 2889              	.LVL239:
 2890 0214 1A4B     		ldr	r3, .L198+100
 2891 0216 1860     		str	r0, [r3]
 2892 0218 E7E7     		b	.L194
 2893              	.L199:
 2894 021a 00BF     		.align	2
 2895              	.L198:
 2896 021c 00000000 		.word	sFilter
 2897 0220 00000000 		.word	hcan1
 2898 0224 00000000 		.word	can
 2899 0228 00000000 		.word	accel
 2900 022c 00000000 		.word	hspi1
 2901 0230 00000000 		.word	gyro
 2902 0234 00000240 		.word	1073872896
 2903 0238 00000000 		.word	gps_main
 2904 023c 00000000 		.word	huart1
 2905 0240 56555555 		.word	1431655766
 2906 0244 67666666 		.word	1717986919
 2907 0248 00000000 		.word	steer_enc_prescaler
 2908 024c 00000000 		.word	enc
 2909 0250 00000000 		.word	pot_2
 2910 0254 713DCA3E 		.word	1053441393
 2911 0258 00002042 		.word	1109393408
 2912 025c 00000000 		.word	htim7
 2913 0260 00A24A04 		.word	72000000
 2914 0264 00000000 		.word	.LANCHOR5
 2915 0268 00000000 		.word	.LANCHOR6
ARM GAS  /tmp/cc2KcRpR.s 			page 82


 2916 026c 00000000 		.word	.LANCHOR7
 2917 0270 00000000 		.word	encoder_counter
 2918 0274 00000000 		.word	.LANCHOR0
 2919 0278 00000000 		.word	ADC_buffer
 2920 027c 00000000 		.word	hadc1
 2921 0280 00000000 		.word	previous_millis
 2922 0284 00080240 		.word	1073874944
 2923 0288 00000000 		.word	htim3
 2924 028c 00000000 		.word	.LANCHOR4
 2925 0290 00000000 		.word	htim2
 2926 0294 00000000 		.word	htim10
 2927              		.cfi_endproc
 2928              	.LFE132:
 2930              		.comm	previous_millis,4,4
 2931              		.comm	encoder_counter,4,4
 2932              		.comm	steer_enc_prescaler,4,4
 2933              		.comm	gps_main,100,4
 2934              		.global	a_TimerInstance10
 2935              		.global	a_TimerInstance7
 2936              		.global	a_TimerInstance6
 2937              		.global	a_TimerInstance5
 2938              		.global	a_TimerInstance4
 2939              		.global	a_TimerInstance3
 2940              		.global	a_TimerInstance2
 2941              		.global	calibration_flag
 2942              		.global	command_flag
 2943              		.global	timer_factor
 2944              		.global	multiplier
 2945              		.global	flag
 2946              		.comm	txt,100,4
 2947              		.comm	val,12,4
 2948              		.comm	ADC_buffer,16,4
 2949              		.comm	val0rang,4,4
 2950              		.comm	valMin0,4,4
 2951              		.comm	valMax0,4,4
 2952              		.comm	sFilter,40,4
 2953              		.comm	huart2,64,4
 2954              		.comm	huart1,64,4
 2955              		.comm	htim11,64,4
 2956              		.comm	htim10,64,4
 2957              		.comm	htim7,64,4
 2958              		.comm	htim6,64,4
 2959              		.comm	htim5,64,4
 2960              		.comm	htim4,64,4
 2961              		.comm	htim3,64,4
 2962              		.comm	htim2,64,4
 2963              		.comm	hspi1,88,4
 2964              		.comm	hcan1,40,4
 2965              		.comm	hdma_adc1,96,4
 2966              		.comm	hadc1,72,4
 2967              		.section	.bss.calibration_flag,"aw",%nobits
 2968              		.align	2
 2969              		.set	.LANCHOR1,. + 0
 2972              	calibration_flag:
 2973 0000 00000000 		.space	4
 2974              		.section	.bss.command_flag,"aw",%nobits
 2975              		.align	2
ARM GAS  /tmp/cc2KcRpR.s 			page 83


 2976              		.set	.LANCHOR0,. + 0
 2979              	command_flag:
 2980 0000 00000000 		.space	4
 2981              		.section	.bss.flag,"aw",%nobits
 2982              		.align	2
 2983              		.set	.LANCHOR3,. + 0
 2986              	flag:
 2987 0000 00000000 		.space	4
 2988              		.section	.data.a_TimerInstance10,"aw",%progbits
 2989              		.align	2
 2990              		.set	.LANCHOR7,. + 0
 2993              	a_TimerInstance10:
 2994 0000 00440140 		.word	1073824768
 2995 0004 00000000 		.space	60
 2995      00000000 
 2995      00000000 
 2995      00000000 
 2995      00000000 
 2996              		.section	.data.a_TimerInstance2,"aw",%progbits
 2997              		.align	2
 2998              		.set	.LANCHOR5,. + 0
 3001              	a_TimerInstance2:
 3002 0000 00000040 		.word	1073741824
 3003 0004 00000000 		.space	60
 3003      00000000 
 3003      00000000 
 3003      00000000 
 3003      00000000 
 3004              		.section	.data.a_TimerInstance3,"aw",%progbits
 3005              		.align	2
 3006              		.set	.LANCHOR4,. + 0
 3009              	a_TimerInstance3:
 3010 0000 00040040 		.word	1073742848
 3011 0004 00000000 		.space	60
 3011      00000000 
 3011      00000000 
 3011      00000000 
 3011      00000000 
 3012              		.section	.data.a_TimerInstance4,"aw",%progbits
 3013              		.align	2
 3016              	a_TimerInstance4:
 3017 0000 00080040 		.word	1073743872
 3018 0004 00000000 		.space	60
 3018      00000000 
 3018      00000000 
 3018      00000000 
 3018      00000000 
 3019              		.section	.data.a_TimerInstance5,"aw",%progbits
 3020              		.align	2
 3023              	a_TimerInstance5:
 3024 0000 000C0040 		.word	1073744896
 3025 0004 00000000 		.space	60
 3025      00000000 
 3025      00000000 
 3025      00000000 
 3025      00000000 
 3026              		.section	.data.a_TimerInstance6,"aw",%progbits
ARM GAS  /tmp/cc2KcRpR.s 			page 84


 3027              		.align	2
 3030              	a_TimerInstance6:
 3031 0000 00100040 		.word	1073745920
 3032 0004 00000000 		.space	60
 3032      00000000 
 3032      00000000 
 3032      00000000 
 3032      00000000 
 3033              		.section	.data.a_TimerInstance7,"aw",%progbits
 3034              		.align	2
 3035              		.set	.LANCHOR6,. + 0
 3038              	a_TimerInstance7:
 3039 0000 00140040 		.word	1073746944
 3040 0004 00000000 		.space	60
 3040      00000000 
 3040      00000000 
 3040      00000000 
 3040      00000000 
 3041              		.section	.data.multiplier,"aw",%progbits
 3042              		.align	2
 3043              		.set	.LANCHOR2,. + 0
 3046              	multiplier:
 3047 0000 01000000 		.word	1
 3048              		.section	.data.timer_factor,"aw",%progbits
 3049              		.align	2
 3052              	timer_factor:
 3053 0000 02000000 		.word	2
 3054              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 3055              		.align	2
 3056              	.LC0:
 3057 0000 4572726F 		.ascii	"Error on file: \000"
 3057      72206F6E 
 3057      2066696C 
 3057      653A2000 
 3058              	.LC1:
 3059 0010 0D0A00   		.ascii	"\015\012\000"
 3060              		.text
 3061              	.Letext0:
 3062              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3063              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3064              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3065              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3066              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3067              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3068              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3069              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3070              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3071              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3072              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3073              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3074              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3075              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 3076              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3077              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3078              		.file 18 "/usr/include/newlib/sys/lock.h"
 3079              		.file 19 "/usr/include/newlib/sys/_types.h"
 3080              		.file 20 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
ARM GAS  /tmp/cc2KcRpR.s 			page 85


 3081              		.file 21 "/usr/include/newlib/sys/reent.h"
 3082              		.file 22 "/usr/include/newlib/stdlib.h"
 3083              		.file 23 "/usr/include/newlib/math.h"
 3084              		.file 24 "Inc/Eagle_TRT.h"
 3085              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 3086              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 3087              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc2KcRpR.s 			page 86


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc2KcRpR.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc2KcRpR.s:190    .text.MX_GPIO_Init:00000000000000ec $d
     /tmp/cc2KcRpR.s:198    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:204    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc2KcRpR.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc2KcRpR.s:253    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:259    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/cc2KcRpR.s:385    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc2KcRpR.s:392    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc2KcRpR.s:417    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000010 ADC_buffer
     /tmp/cc2KcRpR.s:425    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc2KcRpR.s:432    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc2KcRpR.s:462    .text.HAL_UART_RxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart1
                            *COM*:0000000000000064 gps_main
     /tmp/cc2KcRpR.s:468    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cc2KcRpR.s:475    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cc2KcRpR.s:506    .text.HAL_UART_TxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart2
     /tmp/cc2KcRpR.s:511    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cc2KcRpR.s:518    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/cc2KcRpR.s:786    .text.HAL_CAN_RxFifo0FullCallback:0000000000000130 $d
     /tmp/cc2KcRpR.s:795    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc2KcRpR.s:802    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc2KcRpR.s:910    .text.HAL_TIM_PeriodElapsedCallback:000000000000007c $d
                            *COM*:0000000000000040 htim10
                            *COM*:0000000000000040 htim7
     /tmp/cc2KcRpR.s:926    .text.send_CAN_data:0000000000000000 $t
     /tmp/cc2KcRpR.s:933    .text.send_CAN_data:0000000000000000 send_CAN_data
     /tmp/cc2KcRpR.s:1341   .text.send_CAN_data:0000000000000250 $d
     /tmp/cc2KcRpR.s:1355   .text.Error_Handler:0000000000000000 $t
     /tmp/cc2KcRpR.s:1362   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc2KcRpR.s:1394   .text.Error_Handler:0000000000000020 $d
     /tmp/cc2KcRpR.s:1401   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1407   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc2KcRpR.s:1451   .text.MX_USART2_UART_Init:0000000000000028 $d
     /tmp/cc2KcRpR.s:1458   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1464   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc2KcRpR.s:1518   .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/cc2KcRpR.s:1524   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1530   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc2KcRpR.s:1583   .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/cc2KcRpR.s:1589   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1595   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc2KcRpR.s:1681   .text.MX_ADC1_Init:000000000000005c $d
                            *COM*:0000000000000048 hadc1
     /tmp/cc2KcRpR.s:1688   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1694   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc2KcRpR.s:1738   .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/cc2KcRpR.s:1744   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1750   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
ARM GAS  /tmp/cc2KcRpR.s 			page 87


     /tmp/cc2KcRpR.s:1857   .text.MX_TIM2_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc2KcRpR.s:1862   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1868   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc2KcRpR.s:1954   .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/cc2KcRpR.s:1960   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:1966   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/cc2KcRpR.s:2052   .text.MX_TIM4_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim4
     /tmp/cc2KcRpR.s:2058   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:2064   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/cc2KcRpR.s:2150   .text.MX_TIM5_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim5
     /tmp/cc2KcRpR.s:2156   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:2162   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/cc2KcRpR.s:2228   .text.MX_TIM6_Init:0000000000000044 $d
                            *COM*:0000000000000040 htim6
     /tmp/cc2KcRpR.s:2234   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:2240   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/cc2KcRpR.s:2306   .text.MX_TIM7_Init:0000000000000044 $d
     /tmp/cc2KcRpR.s:2312   .text.MX_TIM10_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:2318   .text.MX_TIM10_Init:0000000000000000 MX_TIM10_Init
     /tmp/cc2KcRpR.s:2358   .text.MX_TIM10_Init:0000000000000028 $d
     /tmp/cc2KcRpR.s:2364   .text.MX_TIM11_Init:0000000000000000 $t
     /tmp/cc2KcRpR.s:2370   .text.MX_TIM11_Init:0000000000000000 MX_TIM11_Init
     /tmp/cc2KcRpR.s:2408   .text.MX_TIM11_Init:0000000000000020 $d
                            *COM*:0000000000000040 htim11
     /tmp/cc2KcRpR.s:2414   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc2KcRpR.s:2421   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc2KcRpR.s:2540   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/cc2KcRpR.s:2546   .text.main:0000000000000000 $t
     /tmp/cc2KcRpR.s:2553   .text.main:0000000000000000 main
     /tmp/cc2KcRpR.s:2896   .text.main:000000000000021c $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000004 steer_enc_prescaler
                            *COM*:0000000000000004 encoder_counter
                            *COM*:0000000000000004 previous_millis
     /tmp/cc2KcRpR.s:2993   .data.a_TimerInstance10:0000000000000000 a_TimerInstance10
     /tmp/cc2KcRpR.s:3038   .data.a_TimerInstance7:0000000000000000 a_TimerInstance7
     /tmp/cc2KcRpR.s:3030   .data.a_TimerInstance6:0000000000000000 a_TimerInstance6
     /tmp/cc2KcRpR.s:3023   .data.a_TimerInstance5:0000000000000000 a_TimerInstance5
     /tmp/cc2KcRpR.s:3016   .data.a_TimerInstance4:0000000000000000 a_TimerInstance4
     /tmp/cc2KcRpR.s:3009   .data.a_TimerInstance3:0000000000000000 a_TimerInstance3
     /tmp/cc2KcRpR.s:3001   .data.a_TimerInstance2:0000000000000000 a_TimerInstance2
     /tmp/cc2KcRpR.s:2972   .bss.calibration_flag:0000000000000000 calibration_flag
     /tmp/cc2KcRpR.s:2979   .bss.command_flag:0000000000000000 command_flag
     /tmp/cc2KcRpR.s:3052   .data.timer_factor:0000000000000000 timer_factor
     /tmp/cc2KcRpR.s:3046   .data.multiplier:0000000000000000 multiplier
     /tmp/cc2KcRpR.s:2986   .bss.flag:0000000000000000 flag
                            *COM*:0000000000000064 txt
                            *COM*:000000000000000c val
                            *COM*:0000000000000004 val0rang
                            *COM*:0000000000000004 valMin0
                            *COM*:0000000000000004 valMax0
                            *COM*:0000000000000060 hdma_adc1
     /tmp/cc2KcRpR.s:2968   .bss.calibration_flag:0000000000000000 $d
ARM GAS  /tmp/cc2KcRpR.s 			page 88


     /tmp/cc2KcRpR.s:2975   .bss.command_flag:0000000000000000 $d
     /tmp/cc2KcRpR.s:2982   .bss.flag:0000000000000000 $d
     /tmp/cc2KcRpR.s:2989   .data.a_TimerInstance10:0000000000000000 $d
     /tmp/cc2KcRpR.s:2997   .data.a_TimerInstance2:0000000000000000 $d
     /tmp/cc2KcRpR.s:3005   .data.a_TimerInstance3:0000000000000000 $d
     /tmp/cc2KcRpR.s:3013   .data.a_TimerInstance4:0000000000000000 $d
     /tmp/cc2KcRpR.s:3020   .data.a_TimerInstance5:0000000000000000 $d
     /tmp/cc2KcRpR.s:3027   .data.a_TimerInstance6:0000000000000000 $d
     /tmp/cc2KcRpR.s:3034   .data.a_TimerInstance7:0000000000000000 $d
     /tmp/cc2KcRpR.s:3042   .data.multiplier:0000000000000000 $d
     /tmp/cc2KcRpR.s:3049   .data.timer_factor:0000000000000000 $d
     /tmp/cc2KcRpR.s:3055   .rodata.Error_Handler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
pot_1
pot_2
pot_3
gps_read_it
print_it
CAN_Receive
set_min
CAN_Send
set_max
can
LSMD9S0_accel_read
imu_elaborate_data
calc_pot_value
LSMD9S0_gyro_read
encoder_tim_interrupt
accel
gyro
enc
__aeabi_d2uiz
__aeabi_ddiv
__aeabi_i2d
__aeabi_dadd
HAL_UART_Transmit
HAL_UART_Init
HAL_CAN_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
ARM GAS  /tmp/cc2KcRpR.s 			page 89


HAL_CAN_ActivateNotification
gps_init
HAL_TIM_Base_Start
HAL_TIM_Base_Start_IT
enc_calculate_optimal_frequency
LSMD9S0_accel_gyro_init
LSM9DS0_calibration
HAL_Delay
HAL_ADC_Start_DMA
HAL_GetTick
