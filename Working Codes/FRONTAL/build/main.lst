ARM GAS  /tmp/ccFeGOGr.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB149:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "Eagle_TRT.h"
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** #include "stdio.h"
  29:Src/main.c    **** #include "stdlib.h"
  30:Src/main.c    **** #include <inttypes.h>
  31:Src/main.c    **** #include "stm32f4xx_hal_gpio.h"
  32:Src/main.c    **** #include "stm32f4xx_it.h"
ARM GAS  /tmp/ccFeGOGr.s 			page 2


  33:Src/main.c    **** #include <math.h>
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** ADC_HandleTypeDef hadc1;
  53:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_HandleTypeDef hcan1;
  56:Src/main.c    **** 
  57:Src/main.c    **** SPI_HandleTypeDef hspi1;
  58:Src/main.c    **** 
  59:Src/main.c    **** TIM_HandleTypeDef htim2;
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** TIM_HandleTypeDef htim4;
  62:Src/main.c    **** TIM_HandleTypeDef htim5;
  63:Src/main.c    **** TIM_HandleTypeDef htim6;
  64:Src/main.c    **** TIM_HandleTypeDef htim7;
  65:Src/main.c    **** TIM_HandleTypeDef htim10;
  66:Src/main.c    **** TIM_HandleTypeDef htim11;
  67:Src/main.c    **** 
  68:Src/main.c    **** UART_HandleTypeDef huart1;
  69:Src/main.c    **** UART_HandleTypeDef huart2;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  73:Src/main.c    **** extern can_stc can;
  74:Src/main.c    **** extern imu_stc accel;
  75:Src/main.c    **** extern imu_stc gyro;
  76:Src/main.c    **** extern enc_stc enc;
  77:Src/main.c    **** extern pot_stc pot_1;
  78:Src/main.c    **** extern pot_stc pot_2;
  79:Src/main.c    **** extern pot_stc pot_3;
  80:Src/main.c    **** 
  81:Src/main.c    **** CAN_FilterTypeDef sFilter;
  82:Src/main.c    **** uint32_t valMax0, valMin0, val0rang;
  83:Src/main.c    **** uint32_t ADC_buffer[4], val[3];
  84:Src/main.c    **** char txt[100];
  85:Src/main.c    **** int flag = 0;
  86:Src/main.c    **** int multiplier = 1;
  87:Src/main.c    **** int timer_factor = 2;
  88:Src/main.c    **** int command_flag = 0;
  89:Src/main.c    **** int calibration_flag = 0;
ARM GAS  /tmp/ccFeGOGr.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance2 = {.Instance = TIM2};
  92:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance3 = {.Instance = TIM3};
  93:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance4 = {.Instance = TIM4};
  94:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance5 = {.Instance = TIM5};
  95:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  96:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  97:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance10 = {.Instance = TIM10};
  98:Src/main.c    **** 
  99:Src/main.c    **** gps_struct gps_main;
 100:Src/main.c    **** /* USER CODE END PV */
 101:Src/main.c    **** 
 102:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 103:Src/main.c    **** void SystemClock_Config(void);
 104:Src/main.c    **** static void MX_GPIO_Init(void);
 105:Src/main.c    **** static void MX_DMA_Init(void);
 106:Src/main.c    **** static void MX_USART2_UART_Init(void);
 107:Src/main.c    **** static void MX_CAN1_Init(void);
 108:Src/main.c    **** static void MX_SPI1_Init(void);
 109:Src/main.c    **** static void MX_ADC1_Init(void);
 110:Src/main.c    **** static void MX_USART1_UART_Init(void);
 111:Src/main.c    **** static void MX_TIM2_Init(void);
 112:Src/main.c    **** static void MX_TIM3_Init(void);
 113:Src/main.c    **** static void MX_TIM4_Init(void);
 114:Src/main.c    **** static void MX_TIM5_Init(void);
 115:Src/main.c    **** static void MX_TIM6_Init(void);
 116:Src/main.c    **** static void MX_TIM7_Init(void);
 117:Src/main.c    **** static void MX_TIM10_Init(void);
 118:Src/main.c    **** static void MX_TIM11_Init(void);
 119:Src/main.c    **** static void MX_NVIC_Init(void);
 120:Src/main.c    **** /* USER CODE BEGIN PFP */
 121:Src/main.c    **** 
 122:Src/main.c    **** int send_CAN_data(uint32_t);
 123:Src/main.c    **** 
 124:Src/main.c    **** /* USER CODE END PFP */
 125:Src/main.c    **** 
 126:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 127:Src/main.c    **** /* USER CODE BEGIN 0 */
 128:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 129:Src/main.c    **** {
 130:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 131:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 132:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 133:Src/main.c    ****     /*int txt_1[100];
 134:Src/main.c    ****     sprintf(txt_1, "sterzo: %d %d %d\r\n", pot_1.val, pot_2.val, pot_3.val);
 135:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)txt_1, strlen(txt_1), 10);*/
 136:Src/main.c    **** }
 137:Src/main.c    **** 
 138:Src/main.c    **** int steer_enc_prescaler;
 139:Src/main.c    **** int encoder_counter;
 140:Src/main.c    **** int previous_millis;
 141:Src/main.c    **** 
 142:Src/main.c    **** /* USER CODE END 0 */
 143:Src/main.c    **** 
 144:Src/main.c    **** /**
 145:Src/main.c    ****   * @brief  The application entry point.
 146:Src/main.c    ****   * @retval int
ARM GAS  /tmp/ccFeGOGr.s 			page 4


 147:Src/main.c    ****   */
 148:Src/main.c    **** int main(void)
 149:Src/main.c    **** {
 150:Src/main.c    ****     /* USER CODE BEGIN 1 */
 151:Src/main.c    ****     /* USER CODE END 1 */
 152:Src/main.c    **** 
 153:Src/main.c    ****     /* MCU Configuration--------------------------------------------------------*/
 154:Src/main.c    **** 
 155:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 156:Src/main.c    ****     HAL_Init();
 157:Src/main.c    **** 
 158:Src/main.c    ****     /* USER CODE BEGIN Init */
 159:Src/main.c    **** 
 160:Src/main.c    ****     /* USER CODE END Init */
 161:Src/main.c    **** 
 162:Src/main.c    ****     /* Configure the system clock */
 163:Src/main.c    ****     SystemClock_Config();
 164:Src/main.c    **** 
 165:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 166:Src/main.c    **** 
 167:Src/main.c    ****     /* USER CODE END SysInit */
 168:Src/main.c    **** 
 169:Src/main.c    ****     /* Initialize all configured peripherals */
 170:Src/main.c    ****     MX_GPIO_Init();
 171:Src/main.c    ****     MX_DMA_Init();
 172:Src/main.c    ****     MX_USART2_UART_Init();
 173:Src/main.c    ****     MX_CAN1_Init();
 174:Src/main.c    ****     MX_SPI1_Init();
 175:Src/main.c    ****     MX_ADC1_Init();
 176:Src/main.c    ****     MX_USART1_UART_Init();
 177:Src/main.c    ****     MX_TIM2_Init();
 178:Src/main.c    ****     MX_TIM3_Init();
 179:Src/main.c    ****     MX_TIM4_Init();
 180:Src/main.c    ****     MX_TIM5_Init();
 181:Src/main.c    ****     MX_TIM6_Init();
 182:Src/main.c    ****     MX_TIM7_Init();
 183:Src/main.c    ****     MX_TIM10_Init();
 184:Src/main.c    ****     MX_TIM11_Init();
 185:Src/main.c    **** 
 186:Src/main.c    ****     /* Initialize interrupts */
 187:Src/main.c    ****     MX_NVIC_Init();
 188:Src/main.c    ****     /* USER CODE BEGIN 2 */
 189:Src/main.c    **** 
 190:Src/main.c    ****     sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 191:Src/main.c    ****     sFilter.FilterIdLow = 0;
 192:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 193:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 194:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 195:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 196:Src/main.c    ****     sFilter.FilterBank = 0;
 197:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 198:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 199:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 200:Src/main.c    **** 
 201:Src/main.c    ****     HAL_CAN_Start(&hcan1);
 202:Src/main.c    **** 
 203:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
ARM GAS  /tmp/ccFeGOGr.s 			page 5


 204:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 205:Src/main.c    ****     /* USER CODE END 2 */
 206:Src/main.c    **** 
 207:Src/main.c    ****     /* Infinite loop */
 208:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 209:Src/main.c    ****     can.hcan = &hcan1;
 210:Src/main.c    ****     // can initialization //
 211:Src/main.c    **** 
 212:Src/main.c    ****     // imu initialization //
 213:Src/main.c    ****     accel.GPIOx_InUse = GPIOC;
 214:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 215:Src/main.c    ****     accel.hspi = &hspi1;
 216:Src/main.c    **** 
 217:Src/main.c    ****     gyro.GPIOx_InUse = GPIOA;
 218:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 219:Src/main.c    ****     gyro.hspi = &hspi1;
 220:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 221:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 222:Src/main.c    **** 
 223:Src/main.c    ****     if (gps_init(&huart1, &gps_main) == 0)
 224:Src/main.c    ****     {
 225:Src/main.c    ****         //--error--//
 226:Src/main.c    ****     }
 227:Src/main.c    **** 
 228:Src/main.c    ****     steer_enc_prescaler = htim3.Init.Period;
 229:Src/main.c    ****     steer_enc_prescaler /= 3;
 230:Src/main.c    ****     steer_enc_prescaler /= 20;
 231:Src/main.c    ****     steer_enc_prescaler += 40;
 232:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 233:Src/main.c    **** 
 234:Src/main.c    ****     pot_2.max = 4060;
 235:Src/main.c    ****     pot_2.min = 2350;
 236:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 237:Src/main.c    **** 
 238:Src/main.c    ****     enc.dx_wheel = 1;
 239:Src/main.c    ****     enc.interrupt_flag = 0;
 240:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 241:Src/main.c    ****     enc.average_speed = 0;
 242:Src/main.c    ****     enc.wheel_diameter = 0.395;
 243:Src/main.c    ****     enc.samle_delta_time = htim7.Init.Period;
 244:Src/main.c    ****     enc.data_size = 15;
 245:Src/main.c    ****     enc.clock_period = 2;
 246:Src/main.c    ****     enc.wheel_rotation = 0;
 247:Src/main.c    ****     enc.Km = 0;
 248:Src/main.c    **** 
 249:Src/main.c    ****     enc.max_delta_angle = 40;
 250:Src/main.c    ****     enc.frequency = 0;
 251:Src/main.c    ****     enc.frequency_timer = &htim7;
 252:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 253:Src/main.c    **** 
 254:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 255:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 256:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 257:Src/main.c    ****     //HAL_TIM_Base_Start(&htim5);
 258:Src/main.c    ****     //HAL_TIM_Base_Start(&htim6);
 259:Src/main.c    ****     HAL_TIM_Base_Start(&htim7);
 260:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
ARM GAS  /tmp/ccFeGOGr.s 			page 6


 261:Src/main.c    **** 
 262:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 263:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 264:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 265:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim5);
 266:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim6);
 267:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim7);
 268:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 269:Src/main.c    **** 
 270:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance2, 0);
 271:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 272:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 273:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance5, 0);
 274:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance6, 0);
 275:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance7, 0);
 276:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 277:Src/main.c    **** 
 278:Src/main.c    ****     // INIT Encoder
 279:Src/main.c    ****     enc_calculate_optimal_frequency(&enc);
 280:Src/main.c    **** 
 281:Src/main.c    ****     accel.scale = 4;
 282:Src/main.c    ****     gyro.scale = 500;
 283:Src/main.c    **** 
 284:Src/main.c    ****     //HAL_Delay(1000);
 285:Src/main.c    ****     LSMD9S0_accel_gyro_init(&accel, &gyro);
 286:Src/main.c    ****     //LSMD9S0_check(&imu);
 287:Src/main.c    **** 
 288:Src/main.c    ****     LSM9DS0_calibration(&accel);
 289:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 290:Src/main.c    **** 
 291:Src/main.c    ****     encoder_counter = 0;
 292:Src/main.c    **** 
 293:Src/main.c    ****     while (1)
 294:Src/main.c    ****     {
 295:Src/main.c    **** 
 296:Src/main.c    ****         /* USER CODE END WHILE */
 297:Src/main.c    **** 
 298:Src/main.c    ****         /* USER CODE BEGIN 3 */
 299:Src/main.c    **** 
 300:Src/main.c    ****         HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 301:Src/main.c    **** 
 302:Src/main.c    ****         // If CAN is free from important messages, send data
 303:Src/main.c    ****         if (command_flag == 0)
 304:Src/main.c    ****         {
 305:Src/main.c    ****             if (previous_millis != HAL_GetTick())
 306:Src/main.c    ****             {
 307:Src/main.c    ****                 send_CAN_data(HAL_GetTick());
 308:Src/main.c    ****                 previous_millis = HAL_GetTick();
 309:Src/main.c    ****             }
 310:Src/main.c    ****         }
 311:Src/main.c    ****         else
 312:Src/main.c    ****         {
 313:Src/main.c    ****             HAL_Delay(1);
 314:Src/main.c    ****             command_flag = 0;
 315:Src/main.c    ****         }
 316:Src/main.c    ****     }
 317:Src/main.c    ****     /* USER CODE END 3 */
ARM GAS  /tmp/ccFeGOGr.s 			page 7


 318:Src/main.c    **** }
 319:Src/main.c    **** 
 320:Src/main.c    **** /**
 321:Src/main.c    ****   * @brief System Clock Configuration
 322:Src/main.c    ****   * @retval None
 323:Src/main.c    ****   */
 324:Src/main.c    **** void SystemClock_Config(void)
 325:Src/main.c    **** {
 326:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 327:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 328:Src/main.c    **** 
 329:Src/main.c    ****     /** Configure the main internal regulator output voltage 
 330:Src/main.c    ****   */
 331:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 332:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 333:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 334:Src/main.c    ****   */
 335:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 336:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 337:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 338:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 339:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 340:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 341:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 342:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 343:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 344:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 345:Src/main.c    ****     {
 346:Src/main.c    ****         Error_Handler();
 347:Src/main.c    ****     }
 348:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 349:Src/main.c    ****   */
 350:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 351:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 352:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 353:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 354:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 355:Src/main.c    **** 
 356:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 357:Src/main.c    ****     {
 358:Src/main.c    ****         Error_Handler();
 359:Src/main.c    ****     }
 360:Src/main.c    **** }
 361:Src/main.c    **** 
 362:Src/main.c    **** /**
 363:Src/main.c    ****   * @brief NVIC Configuration.
 364:Src/main.c    ****   * @retval None
 365:Src/main.c    ****   */
 366:Src/main.c    **** static void MX_NVIC_Init(void)
 367:Src/main.c    **** {
 368:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 369:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 370:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 371:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 372:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 373:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 374:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
ARM GAS  /tmp/ccFeGOGr.s 			page 8


 375:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 376:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 377:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 378:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 379:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 380:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 381:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 382:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 383:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 384:Src/main.c    ****     HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 385:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 386:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 387:Src/main.c    ****     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 388:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 389:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 390:Src/main.c    ****     HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 391:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 392:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 393:Src/main.c    ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 394:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 395:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 396:Src/main.c    ****     HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 397:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 398:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 399:Src/main.c    ****     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 400:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 401:Src/main.c    **** }
 402:Src/main.c    **** 
 403:Src/main.c    **** /**
 404:Src/main.c    ****   * @brief ADC1 Initialization Function
 405:Src/main.c    ****   * @param None
 406:Src/main.c    ****   * @retval None
 407:Src/main.c    ****   */
 408:Src/main.c    **** static void MX_ADC1_Init(void)
 409:Src/main.c    **** {
 410:Src/main.c    **** 
 411:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 0 */
 412:Src/main.c    **** 
 413:Src/main.c    ****     /* USER CODE END ADC1_Init 0 */
 414:Src/main.c    **** 
 415:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 416:Src/main.c    **** 
 417:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 1 */
 418:Src/main.c    **** 
 419:Src/main.c    ****     /* USER CODE END ADC1_Init 1 */
 420:Src/main.c    ****     /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of c
 421:Src/main.c    ****   */
 422:Src/main.c    ****     hadc1.Instance = ADC1;
 423:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 424:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 425:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 426:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 427:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 428:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 429:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 430:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 431:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
ARM GAS  /tmp/ccFeGOGr.s 			page 9


 432:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 433:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 434:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 435:Src/main.c    ****     {
 436:Src/main.c    ****         Error_Handler();
 437:Src/main.c    ****     }
 438:Src/main.c    ****     /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and 
 439:Src/main.c    ****   */
 440:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 441:Src/main.c    ****     sConfig.Rank = 1;
 442:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 443:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 444:Src/main.c    ****     {
 445:Src/main.c    ****         Error_Handler();
 446:Src/main.c    ****     }
 447:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 2 */
 448:Src/main.c    **** 
 449:Src/main.c    ****     /* USER CODE END ADC1_Init 2 */
 450:Src/main.c    **** }
 451:Src/main.c    **** 
 452:Src/main.c    **** /**
 453:Src/main.c    ****   * @brief CAN1 Initialization Function
 454:Src/main.c    ****   * @param None
 455:Src/main.c    ****   * @retval None
 456:Src/main.c    ****   */
 457:Src/main.c    **** static void MX_CAN1_Init(void)
 458:Src/main.c    **** {
 459:Src/main.c    **** 
 460:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 0 */
 461:Src/main.c    **** 
 462:Src/main.c    ****     /* USER CODE END CAN1_Init 0 */
 463:Src/main.c    **** 
 464:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 1 */
 465:Src/main.c    **** 
 466:Src/main.c    ****     /* USER CODE END CAN1_Init 1 */
 467:Src/main.c    ****     hcan1.Instance = CAN1;
 468:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 469:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 470:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 471:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 472:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 473:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 474:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 475:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 476:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 477:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 478:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 479:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 480:Src/main.c    ****     {
 481:Src/main.c    ****         Error_Handler();
 482:Src/main.c    ****     }
 483:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 2 */
 484:Src/main.c    **** 
 485:Src/main.c    ****     /* USER CODE END CAN1_Init 2 */
 486:Src/main.c    **** }
 487:Src/main.c    **** 
 488:Src/main.c    **** /**
ARM GAS  /tmp/ccFeGOGr.s 			page 10


 489:Src/main.c    ****   * @brief SPI1 Initialization Function
 490:Src/main.c    ****   * @param None
 491:Src/main.c    ****   * @retval None
 492:Src/main.c    ****   */
 493:Src/main.c    **** static void MX_SPI1_Init(void)
 494:Src/main.c    **** {
 495:Src/main.c    **** 
 496:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 0 */
 497:Src/main.c    **** 
 498:Src/main.c    ****     /* USER CODE END SPI1_Init 0 */
 499:Src/main.c    **** 
 500:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 1 */
 501:Src/main.c    **** 
 502:Src/main.c    ****     /* USER CODE END SPI1_Init 1 */
 503:Src/main.c    ****     /* SPI1 parameter configuration*/
 504:Src/main.c    ****     hspi1.Instance = SPI1;
 505:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 506:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 507:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 508:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 509:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 510:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 511:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 512:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 513:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 514:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 515:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 516:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 517:Src/main.c    ****     {
 518:Src/main.c    ****         Error_Handler();
 519:Src/main.c    ****     }
 520:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 2 */
 521:Src/main.c    **** 
 522:Src/main.c    ****     /* USER CODE END SPI1_Init 2 */
 523:Src/main.c    **** }
 524:Src/main.c    **** 
 525:Src/main.c    **** /**
 526:Src/main.c    ****   * @brief TIM2 Initialization Function
 527:Src/main.c    ****   * @param None
 528:Src/main.c    ****   * @retval None
 529:Src/main.c    ****   */
 530:Src/main.c    **** static void MX_TIM2_Init(void)
 531:Src/main.c    **** {
 532:Src/main.c    **** 
 533:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 0 */
 534:Src/main.c    **** 
 535:Src/main.c    ****     /* USER CODE END TIM2_Init 0 */
 536:Src/main.c    **** 
 537:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 538:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 539:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 540:Src/main.c    **** 
 541:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 1 */
 542:Src/main.c    **** 
 543:Src/main.c    ****     /* USER CODE END TIM2_Init 1 */
 544:Src/main.c    ****     htim2.Instance = TIM2;
 545:Src/main.c    ****     htim2.Init.Prescaler = 36;
ARM GAS  /tmp/ccFeGOGr.s 			page 11


 546:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 547:Src/main.c    ****     htim2.Init.Period = 1000;
 548:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 549:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 550:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 551:Src/main.c    ****     {
 552:Src/main.c    ****         Error_Handler();
 553:Src/main.c    ****     }
 554:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 555:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 556:Src/main.c    ****     {
 557:Src/main.c    ****         Error_Handler();
 558:Src/main.c    ****     }
 559:Src/main.c    ****     sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 560:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 561:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 562:Src/main.c    ****     {
 563:Src/main.c    ****         Error_Handler();
 564:Src/main.c    ****     }
 565:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 566:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 567:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 568:Src/main.c    ****     {
 569:Src/main.c    ****         Error_Handler();
 570:Src/main.c    ****     }
 571:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 2 */
 572:Src/main.c    **** 
 573:Src/main.c    ****     /* USER CODE END TIM2_Init 2 */
 574:Src/main.c    **** }
 575:Src/main.c    **** 
 576:Src/main.c    **** /**
 577:Src/main.c    ****   * @brief TIM3 Initialization Function
 578:Src/main.c    ****   * @param None
 579:Src/main.c    ****   * @retval None
 580:Src/main.c    ****   */
 581:Src/main.c    **** static void MX_TIM3_Init(void)
 582:Src/main.c    **** {
 583:Src/main.c    **** 
 584:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 0 */
 585:Src/main.c    **** 
 586:Src/main.c    ****     /* USER CODE END TIM3_Init 0 */
 587:Src/main.c    **** 
 588:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 589:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 590:Src/main.c    **** 
 591:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 1 */
 592:Src/main.c    **** 
 593:Src/main.c    ****     /* USER CODE END TIM3_Init 1 */
 594:Src/main.c    ****     htim3.Instance = TIM3;
 595:Src/main.c    ****     htim3.Init.Prescaler = 18;
 596:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 597:Src/main.c    ****     htim3.Init.Period = 65500;
 598:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 599:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 600:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 601:Src/main.c    ****     {
 602:Src/main.c    ****         Error_Handler();
ARM GAS  /tmp/ccFeGOGr.s 			page 12


 603:Src/main.c    ****     }
 604:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 605:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 606:Src/main.c    ****     {
 607:Src/main.c    ****         Error_Handler();
 608:Src/main.c    ****     }
 609:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 610:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 611:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 612:Src/main.c    ****     {
 613:Src/main.c    ****         Error_Handler();
 614:Src/main.c    ****     }
 615:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 2 */
 616:Src/main.c    **** 
 617:Src/main.c    ****     /* USER CODE END TIM3_Init 2 */
 618:Src/main.c    **** }
 619:Src/main.c    **** 
 620:Src/main.c    **** /**
 621:Src/main.c    ****   * @brief TIM4 Initialization Function
 622:Src/main.c    ****   * @param None
 623:Src/main.c    ****   * @retval None
 624:Src/main.c    ****   */
 625:Src/main.c    **** static void MX_TIM4_Init(void)
 626:Src/main.c    **** {
 627:Src/main.c    **** 
 628:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 0 */
 629:Src/main.c    **** 
 630:Src/main.c    ****     /* USER CODE END TIM4_Init 0 */
 631:Src/main.c    **** 
 632:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 633:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 634:Src/main.c    **** 
 635:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 1 */
 636:Src/main.c    **** 
 637:Src/main.c    ****     /* USER CODE END TIM4_Init 1 */
 638:Src/main.c    ****     htim4.Instance = TIM4;
 639:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 640:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 641:Src/main.c    ****     htim4.Init.Period = 2000;
 642:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 643:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 644:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 645:Src/main.c    ****     {
 646:Src/main.c    ****         Error_Handler();
 647:Src/main.c    ****     }
 648:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 649:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 650:Src/main.c    ****     {
 651:Src/main.c    ****         Error_Handler();
 652:Src/main.c    ****     }
 653:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 654:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 655:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 656:Src/main.c    ****     {
 657:Src/main.c    ****         Error_Handler();
 658:Src/main.c    ****     }
 659:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 2 */
ARM GAS  /tmp/ccFeGOGr.s 			page 13


 660:Src/main.c    **** 
 661:Src/main.c    ****     /* USER CODE END TIM4_Init 2 */
 662:Src/main.c    **** }
 663:Src/main.c    **** 
 664:Src/main.c    **** /**
 665:Src/main.c    ****   * @brief TIM5 Initialization Function
 666:Src/main.c    ****   * @param None
 667:Src/main.c    ****   * @retval None
 668:Src/main.c    ****   */
 669:Src/main.c    **** static void MX_TIM5_Init(void)
 670:Src/main.c    **** {
 671:Src/main.c    **** 
 672:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 0 */
 673:Src/main.c    **** 
 674:Src/main.c    ****     /* USER CODE END TIM5_Init 0 */
 675:Src/main.c    **** 
 676:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 677:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 678:Src/main.c    **** 
 679:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 1 */
 680:Src/main.c    **** 
 681:Src/main.c    ****     /* USER CODE END TIM5_Init 1 */
 682:Src/main.c    ****     htim5.Instance = TIM5;
 683:Src/main.c    ****     htim5.Init.Prescaler = 36;
 684:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 685:Src/main.c    ****     htim5.Init.Period = 2000;
 686:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 687:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 688:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 689:Src/main.c    ****     {
 690:Src/main.c    ****         Error_Handler();
 691:Src/main.c    ****     }
 692:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 693:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 694:Src/main.c    ****     {
 695:Src/main.c    ****         Error_Handler();
 696:Src/main.c    ****     }
 697:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 698:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 699:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 700:Src/main.c    ****     {
 701:Src/main.c    ****         Error_Handler();
 702:Src/main.c    ****     }
 703:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 2 */
 704:Src/main.c    **** 
 705:Src/main.c    ****     /* USER CODE END TIM5_Init 2 */
 706:Src/main.c    **** }
 707:Src/main.c    **** 
 708:Src/main.c    **** /**
 709:Src/main.c    ****   * @brief TIM6 Initialization Function
 710:Src/main.c    ****   * @param None
 711:Src/main.c    ****   * @retval None
 712:Src/main.c    ****   */
 713:Src/main.c    **** static void MX_TIM6_Init(void)
 714:Src/main.c    **** {
 715:Src/main.c    **** 
 716:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 0 */
ARM GAS  /tmp/ccFeGOGr.s 			page 14


 717:Src/main.c    **** 
 718:Src/main.c    ****     /* USER CODE END TIM6_Init 0 */
 719:Src/main.c    **** 
 720:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 721:Src/main.c    **** 
 722:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 1 */
 723:Src/main.c    **** 
 724:Src/main.c    ****     /* USER CODE END TIM6_Init 1 */
 725:Src/main.c    ****     htim6.Instance = TIM6;
 726:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 727:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 728:Src/main.c    ****     htim6.Init.Period = 2000;
 729:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 730:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 731:Src/main.c    ****     {
 732:Src/main.c    ****         Error_Handler();
 733:Src/main.c    ****     }
 734:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 735:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 736:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 737:Src/main.c    ****     {
 738:Src/main.c    ****         Error_Handler();
 739:Src/main.c    ****     }
 740:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 2 */
 741:Src/main.c    **** 
 742:Src/main.c    ****     /* USER CODE END TIM6_Init 2 */
 743:Src/main.c    **** }
 744:Src/main.c    **** 
 745:Src/main.c    **** /**
 746:Src/main.c    ****   * @brief TIM7 Initialization Function
 747:Src/main.c    ****   * @param None
 748:Src/main.c    ****   * @retval None
 749:Src/main.c    ****   */
 750:Src/main.c    **** static void MX_TIM7_Init(void)
 751:Src/main.c    **** {
 752:Src/main.c    **** 
 753:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 0 */
 754:Src/main.c    **** 
 755:Src/main.c    ****     /* USER CODE END TIM7_Init 0 */
 756:Src/main.c    **** 
 757:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 758:Src/main.c    **** 
 759:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 1 */
 760:Src/main.c    **** 
 761:Src/main.c    ****     /* USER CODE END TIM7_Init 1 */
 762:Src/main.c    ****     htim7.Instance = TIM7;
 763:Src/main.c    ****     htim7.Init.Prescaler = 36;
 764:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 765:Src/main.c    ****     htim7.Init.Period = 6000;
 766:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 767:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 768:Src/main.c    ****     {
 769:Src/main.c    ****         Error_Handler();
 770:Src/main.c    ****     }
 771:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 772:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 773:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
ARM GAS  /tmp/ccFeGOGr.s 			page 15


 774:Src/main.c    ****     {
 775:Src/main.c    ****         Error_Handler();
 776:Src/main.c    ****     }
 777:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 2 */
 778:Src/main.c    **** 
 779:Src/main.c    ****     /* USER CODE END TIM7_Init 2 */
 780:Src/main.c    **** }
 781:Src/main.c    **** 
 782:Src/main.c    **** /**
 783:Src/main.c    ****   * @brief TIM10 Initialization Function
 784:Src/main.c    ****   * @param None
 785:Src/main.c    ****   * @retval None
 786:Src/main.c    ****   */
 787:Src/main.c    **** static void MX_TIM10_Init(void)
 788:Src/main.c    **** {
 789:Src/main.c    **** 
 790:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 0 */
 791:Src/main.c    **** 
 792:Src/main.c    ****     /* USER CODE END TIM10_Init 0 */
 793:Src/main.c    **** 
 794:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 1 */
 795:Src/main.c    **** 
 796:Src/main.c    ****     /* USER CODE END TIM10_Init 1 */
 797:Src/main.c    ****     htim10.Instance = TIM10;
 798:Src/main.c    ****     htim10.Init.Prescaler = 36;
 799:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800:Src/main.c    ****     htim10.Init.Period = 500;
 801:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 802:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 803:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 804:Src/main.c    ****     {
 805:Src/main.c    ****         Error_Handler();
 806:Src/main.c    ****     }
 807:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 2 */
 808:Src/main.c    **** 
 809:Src/main.c    ****     /* USER CODE END TIM10_Init 2 */
 810:Src/main.c    **** }
 811:Src/main.c    **** 
 812:Src/main.c    **** /**
 813:Src/main.c    ****   * @brief TIM11 Initialization Function
 814:Src/main.c    ****   * @param None
 815:Src/main.c    ****   * @retval None
 816:Src/main.c    ****   */
 817:Src/main.c    **** static void MX_TIM11_Init(void)
 818:Src/main.c    **** {
 819:Src/main.c    **** 
 820:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 0 */
 821:Src/main.c    **** 
 822:Src/main.c    ****     /* USER CODE END TIM11_Init 0 */
 823:Src/main.c    **** 
 824:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 1 */
 825:Src/main.c    **** 
 826:Src/main.c    ****     /* USER CODE END TIM11_Init 1 */
 827:Src/main.c    ****     htim11.Instance = TIM11;
 828:Src/main.c    ****     htim11.Init.Prescaler = 0;
 829:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 830:Src/main.c    ****     htim11.Init.Period = 0;
ARM GAS  /tmp/ccFeGOGr.s 			page 16


 831:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 832:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 833:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 834:Src/main.c    ****     {
 835:Src/main.c    ****         Error_Handler();
 836:Src/main.c    ****     }
 837:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 2 */
 838:Src/main.c    **** 
 839:Src/main.c    ****     /* USER CODE END TIM11_Init 2 */
 840:Src/main.c    **** }
 841:Src/main.c    **** 
 842:Src/main.c    **** /**
 843:Src/main.c    ****   * @brief USART1 Initialization Function
 844:Src/main.c    ****   * @param None
 845:Src/main.c    ****   * @retval None
 846:Src/main.c    ****   */
 847:Src/main.c    **** static void MX_USART1_UART_Init(void)
 848:Src/main.c    **** {
 849:Src/main.c    **** 
 850:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 0 */
 851:Src/main.c    **** 
 852:Src/main.c    ****     /* USER CODE END USART1_Init 0 */
 853:Src/main.c    **** 
 854:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 1 */
 855:Src/main.c    **** 
 856:Src/main.c    ****     /* USER CODE END USART1_Init 1 */
 857:Src/main.c    ****     huart1.Instance = USART1;
 858:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 859:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 860:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 861:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 862:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 863:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 864:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 865:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 866:Src/main.c    ****     {
 867:Src/main.c    ****         Error_Handler();
 868:Src/main.c    ****     }
 869:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 2 */
 870:Src/main.c    **** 
 871:Src/main.c    ****     /* USER CODE END USART1_Init 2 */
 872:Src/main.c    **** }
 873:Src/main.c    **** 
 874:Src/main.c    **** /**
 875:Src/main.c    ****   * @brief USART2 Initialization Function
 876:Src/main.c    ****   * @param None
 877:Src/main.c    ****   * @retval None
 878:Src/main.c    ****   */
 879:Src/main.c    **** static void MX_USART2_UART_Init(void)
 880:Src/main.c    **** {
 881:Src/main.c    **** 
 882:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 0 */
 883:Src/main.c    **** 
 884:Src/main.c    ****     /* USER CODE END USART2_Init 0 */
 885:Src/main.c    **** 
 886:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 1 */
 887:Src/main.c    **** 
ARM GAS  /tmp/ccFeGOGr.s 			page 17


 888:Src/main.c    ****     /* USER CODE END USART2_Init 1 */
 889:Src/main.c    ****     huart2.Instance = USART2;
 890:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 891:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 892:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 893:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 894:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 895:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 896:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 897:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 898:Src/main.c    ****     {
 899:Src/main.c    ****         Error_Handler();
 900:Src/main.c    ****     }
 901:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 2 */
 902:Src/main.c    **** 
 903:Src/main.c    ****     /* USER CODE END USART2_Init 2 */
 904:Src/main.c    **** }
 905:Src/main.c    **** 
 906:Src/main.c    **** /** 
 907:Src/main.c    ****   * Enable DMA controller clock
 908:Src/main.c    ****   */
 909:Src/main.c    **** static void MX_DMA_Init(void)
 910:Src/main.c    **** {
 911:Src/main.c    **** 
 912:Src/main.c    ****     /* DMA controller clock enable */
 913:Src/main.c    ****     __HAL_RCC_DMA2_CLK_ENABLE();
 914:Src/main.c    **** 
 915:Src/main.c    ****     /* DMA interrupt init */
 916:Src/main.c    ****     /* DMA2_Stream0_IRQn interrupt configuration */
 917:Src/main.c    ****     HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 918:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 919:Src/main.c    **** }
 920:Src/main.c    **** 
 921:Src/main.c    **** /**
 922:Src/main.c    ****   * @brief GPIO Initialization Function
 923:Src/main.c    ****   * @param None
 924:Src/main.c    ****   * @retval None
 925:Src/main.c    ****   */
 926:Src/main.c    **** static void MX_GPIO_Init(void)
 927:Src/main.c    **** {
  27              		.loc 1 927 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 928:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
ARM GAS  /tmp/ccFeGOGr.s 			page 18


  43              		.loc 1 928 0
  44 0006 0024     		movs	r4, #0
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 929:Src/main.c    **** 
 930:Src/main.c    ****     /* GPIO Ports Clock Enable */
 931:Src/main.c    ****     __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 931 0
  52 0012 0194     		str	r4, [sp, #4]
  53 0014 354B     		ldr	r3, .L3
  54 0016 1A6B     		ldr	r2, [r3, #48]
  55 0018 42F08002 		orr	r2, r2, #128
  56 001c 1A63     		str	r2, [r3, #48]
  57 001e 1A6B     		ldr	r2, [r3, #48]
  58 0020 02F08002 		and	r2, r2, #128
  59 0024 0192     		str	r2, [sp, #4]
  60 0026 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 932:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 932 0
  64 0028 0294     		str	r4, [sp, #8]
  65 002a 1A6B     		ldr	r2, [r3, #48]
  66 002c 42F00102 		orr	r2, r2, #1
  67 0030 1A63     		str	r2, [r3, #48]
  68 0032 1A6B     		ldr	r2, [r3, #48]
  69 0034 02F00102 		and	r2, r2, #1
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 933:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  74              		.loc 1 933 0
  75 003c 0394     		str	r4, [sp, #12]
  76 003e 1A6B     		ldr	r2, [r3, #48]
  77 0040 42F00202 		orr	r2, r2, #2
  78 0044 1A63     		str	r2, [r3, #48]
  79 0046 1A6B     		ldr	r2, [r3, #48]
  80 0048 02F00202 		and	r2, r2, #2
  81 004c 0392     		str	r2, [sp, #12]
  82 004e 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 934:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  85              		.loc 1 934 0
  86 0050 0494     		str	r4, [sp, #16]
  87 0052 1A6B     		ldr	r2, [r3, #48]
  88 0054 42F00402 		orr	r2, r2, #4
  89 0058 1A63     		str	r2, [r3, #48]
  90 005a 1B6B     		ldr	r3, [r3, #48]
  91 005c 03F00403 		and	r3, r3, #4
  92 0060 0493     		str	r3, [sp, #16]
  93 0062 049B     		ldr	r3, [sp, #16]
ARM GAS  /tmp/ccFeGOGr.s 			page 19


  94              	.LBE5:
 935:Src/main.c    **** 
 936:Src/main.c    ****     /*Configure GPIO pin Output Level */
 937:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  95              		.loc 1 937 0
  96 0064 224D     		ldr	r5, .L3+4
  97 0066 0122     		movs	r2, #1
  98 0068 4021     		movs	r1, #64
  99 006a 2846     		mov	r0, r5
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 938:Src/main.c    **** 
 939:Src/main.c    ****     /*Configure GPIO pin Output Level */
 940:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 102              		.loc 1 940 0
 103 0070 2246     		mov	r2, r4
 104 0072 4FF40071 		mov	r1, #512
 105 0076 2846     		mov	r0, r5
 106 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 941:Src/main.c    **** 
 942:Src/main.c    ****     /*Configure GPIO pin Output Level */
 943:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 108              		.loc 1 943 0
 109 007c DFF87880 		ldr	r8, .L3+12
 110 0080 2246     		mov	r2, r4
 111 0082 4FF48071 		mov	r1, #256
 112 0086 4046     		mov	r0, r8
 113 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL2:
 944:Src/main.c    **** 
 945:Src/main.c    ****     /*Configure GPIO pin : PC6 */
 946:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_6;
 115              		.loc 1 946 0
 116 008c 4023     		movs	r3, #64
 117 008e 0593     		str	r3, [sp, #20]
 947:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 947 0
 119 0090 0127     		movs	r7, #1
 120 0092 0697     		str	r7, [sp, #24]
 948:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 948 0
 122 0094 0794     		str	r4, [sp, #28]
 949:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 123              		.loc 1 949 0
 124 0096 0323     		movs	r3, #3
 125 0098 0893     		str	r3, [sp, #32]
 950:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 126              		.loc 1 950 0
 127 009a 05A9     		add	r1, sp, #20
 128 009c 2846     		mov	r0, r5
 129 009e FFF7FEFF 		bl	HAL_GPIO_Init
 130              	.LVL3:
 951:Src/main.c    **** 
 952:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 953:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 131              		.loc 1 953 0
ARM GAS  /tmp/ccFeGOGr.s 			page 20


 132 00a2 4FF48076 		mov	r6, #256
 133 00a6 0596     		str	r6, [sp, #20]
 954:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 954 0
 135 00a8 0694     		str	r4, [sp, #24]
 955:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 955 0
 137 00aa 0794     		str	r4, [sp, #28]
 956:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 138              		.loc 1 956 0
 139 00ac 05A9     		add	r1, sp, #20
 140 00ae 2846     		mov	r0, r5
 141 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL4:
 957:Src/main.c    **** 
 958:Src/main.c    ****     /*Configure GPIO pin : PC9 */
 959:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_9;
 143              		.loc 1 959 0
 144 00b4 4FF40073 		mov	r3, #512
 145 00b8 0593     		str	r3, [sp, #20]
 960:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 960 0
 147 00ba 0697     		str	r7, [sp, #24]
 961:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 961 0
 149 00bc 0794     		str	r4, [sp, #28]
 962:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 150              		.loc 1 962 0
 151 00be 0894     		str	r4, [sp, #32]
 963:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 152              		.loc 1 963 0
 153 00c0 05A9     		add	r1, sp, #20
 154 00c2 2846     		mov	r0, r5
 155 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL5:
 964:Src/main.c    **** 
 965:Src/main.c    ****     /*Configure GPIO pin : PA8 */
 966:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 157              		.loc 1 966 0
 158 00c8 0596     		str	r6, [sp, #20]
 967:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 159              		.loc 1 967 0
 160 00ca 0697     		str	r7, [sp, #24]
 968:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 968 0
 162 00cc 0794     		str	r4, [sp, #28]
 969:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 163              		.loc 1 969 0
 164 00ce 0894     		str	r4, [sp, #32]
 970:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 970 0
 166 00d0 05A9     		add	r1, sp, #20
 167 00d2 4046     		mov	r0, r8
 168 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL6:
 971:Src/main.c    **** 
 972:Src/main.c    ****     /*Configure GPIO pin : PB8 */
ARM GAS  /tmp/ccFeGOGr.s 			page 21


 973:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 170              		.loc 1 973 0
 171 00d8 0596     		str	r6, [sp, #20]
 974:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 172              		.loc 1 974 0
 173 00da 0694     		str	r4, [sp, #24]
 975:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 174              		.loc 1 975 0
 175 00dc 0794     		str	r4, [sp, #28]
 976:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 176              		.loc 1 976 0
 177 00de 05A9     		add	r1, sp, #20
 178 00e0 0448     		ldr	r0, .L3+8
 179 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL7:
 977:Src/main.c    **** }
 181              		.loc 1 977 0
 182 00e6 0AB0     		add	sp, sp, #40
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 24
 185              		@ sp needed
 186 00e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 187              	.L4:
 188              		.align	2
 189              	.L3:
 190 00ec 00380240 		.word	1073887232
 191 00f0 00080240 		.word	1073874944
 192 00f4 00040240 		.word	1073873920
 193 00f8 00000240 		.word	1073872896
 194              		.cfi_endproc
 195              	.LFE149:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	MX_DMA_Init:
 205              	.LFB148:
 910:Src/main.c    **** 
 206              		.loc 1 910 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 16
 217              	.LBB6:
 913:Src/main.c    **** 
 218              		.loc 1 913 0
 219 0004 0021     		movs	r1, #0
 220 0006 0191     		str	r1, [sp, #4]
 221 0008 094B     		ldr	r3, .L7
ARM GAS  /tmp/ccFeGOGr.s 			page 22


 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F48002 		orr	r2, r2, #4194304
 224 0010 1A63     		str	r2, [r3, #48]
 225 0012 1B6B     		ldr	r3, [r3, #48]
 226 0014 03F48003 		and	r3, r3, #4194304
 227 0018 0193     		str	r3, [sp, #4]
 228 001a 019B     		ldr	r3, [sp, #4]
 229              	.LBE6:
 917:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 917 0
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL8:
 918:Src/main.c    **** }
 235              		.loc 1 918 0
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL9:
 919:Src/main.c    **** 
 239              		.loc 1 919 0
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE148:
 252              		.section	.text.MX_NVIC_Init,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	MX_NVIC_Init:
 260              	.LFB134:
 367:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 261              		.loc 1 367 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 369:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 270              		.loc 1 369 0
 271 0002 0022     		movs	r2, #0
 272 0004 1146     		mov	r1, r2
 273 0006 1320     		movs	r0, #19
 274 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 275              	.LVL10:
ARM GAS  /tmp/ccFeGOGr.s 			page 23


 370:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 276              		.loc 1 370 0
 277 000c 1320     		movs	r0, #19
 278 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 279              	.LVL11:
 372:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 280              		.loc 1 372 0
 281 0012 0022     		movs	r2, #0
 282 0014 1146     		mov	r1, r2
 283 0016 1420     		movs	r0, #20
 284 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 285              	.LVL12:
 373:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 286              		.loc 1 373 0
 287 001c 1420     		movs	r0, #20
 288 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 289              	.LVL13:
 375:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 290              		.loc 1 375 0
 291 0022 0022     		movs	r2, #0
 292 0024 1146     		mov	r1, r2
 293 0026 1520     		movs	r0, #21
 294 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL14:
 376:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 296              		.loc 1 376 0
 297 002c 1520     		movs	r0, #21
 298 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 299              	.LVL15:
 378:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 300              		.loc 1 378 0
 301 0032 0022     		movs	r2, #0
 302 0034 1146     		mov	r1, r2
 303 0036 1620     		movs	r0, #22
 304 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 305              	.LVL16:
 379:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 306              		.loc 1 379 0
 307 003c 1620     		movs	r0, #22
 308 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 309              	.LVL17:
 381:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 310              		.loc 1 381 0
 311 0042 0022     		movs	r2, #0
 312 0044 1146     		mov	r1, r2
 313 0046 1220     		movs	r0, #18
 314 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 315              	.LVL18:
 382:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 316              		.loc 1 382 0
 317 004c 1220     		movs	r0, #18
 318 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 319              	.LVL19:
 384:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 320              		.loc 1 384 0
 321 0052 0022     		movs	r2, #0
 322 0054 1146     		mov	r1, r2
ARM GAS  /tmp/ccFeGOGr.s 			page 24


 323 0056 3720     		movs	r0, #55
 324 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 325              	.LVL20:
 385:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 326              		.loc 1 385 0
 327 005c 3720     		movs	r0, #55
 328 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 329              	.LVL21:
 387:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 330              		.loc 1 387 0
 331 0062 0022     		movs	r2, #0
 332 0064 1146     		mov	r1, r2
 333 0066 3620     		movs	r0, #54
 334 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 335              	.LVL22:
 388:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 336              		.loc 1 388 0
 337 006c 3620     		movs	r0, #54
 338 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 339              	.LVL23:
 390:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 340              		.loc 1 390 0
 341 0072 0022     		movs	r2, #0
 342 0074 1146     		mov	r1, r2
 343 0076 3220     		movs	r0, #50
 344 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 345              	.LVL24:
 391:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 346              		.loc 1 391 0
 347 007c 3220     		movs	r0, #50
 348 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 349              	.LVL25:
 393:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 350              		.loc 1 393 0
 351 0082 0022     		movs	r2, #0
 352 0084 1146     		mov	r1, r2
 353 0086 1C20     		movs	r0, #28
 354 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 355              	.LVL26:
 394:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 356              		.loc 1 394 0
 357 008c 1C20     		movs	r0, #28
 358 008e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 359              	.LVL27:
 396:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 360              		.loc 1 396 0
 361 0092 0022     		movs	r2, #0
 362 0094 1146     		mov	r1, r2
 363 0096 1920     		movs	r0, #25
 364 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 365              	.LVL28:
 397:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 366              		.loc 1 397 0
 367 009c 1920     		movs	r0, #25
 368 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 369              	.LVL29:
 399:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
ARM GAS  /tmp/ccFeGOGr.s 			page 25


 370              		.loc 1 399 0
 371 00a2 0022     		movs	r2, #0
 372 00a4 1146     		mov	r1, r2
 373 00a6 2520     		movs	r0, #37
 374 00a8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 375              	.LVL30:
 400:Src/main.c    **** }
 376              		.loc 1 400 0
 377 00ac 2520     		movs	r0, #37
 378 00ae FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 379              	.LVL31:
 380 00b2 08BD     		pop	{r3, pc}
 381              		.cfi_endproc
 382              	.LFE134:
 384              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_ADC_ConvCpltCallback
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	HAL_ADC_ConvCpltCallback:
 393              	.LFB131:
 129:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 394              		.loc 1 129 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL32:
 130:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 400              		.loc 1 130 0
 401 0000 054B     		ldr	r3, .L12
 402 0002 1968     		ldr	r1, [r3]
 403 0004 054A     		ldr	r2, .L12+4
 404 0006 1161     		str	r1, [r2, #16]
 131:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 405              		.loc 1 131 0
 406 0008 5968     		ldr	r1, [r3, #4]
 407 000a 054A     		ldr	r2, .L12+8
 408 000c 1161     		str	r1, [r2, #16]
 132:Src/main.c    ****     /*int txt_1[100];
 409              		.loc 1 132 0
 410 000e 9A68     		ldr	r2, [r3, #8]
 411 0010 044B     		ldr	r3, .L12+12
 412 0012 1A61     		str	r2, [r3, #16]
 413 0014 7047     		bx	lr
 414              	.L13:
 415 0016 00BF     		.align	2
 416              	.L12:
 417 0018 00000000 		.word	ADC_buffer
 418 001c 00000000 		.word	pot_1
 419 0020 00000000 		.word	pot_2
 420 0024 00000000 		.word	pot_3
 421              		.cfi_endproc
 422              	.LFE131:
 424              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccFeGOGr.s 			page 26


 425              		.align	1
 426              		.global	HAL_UART_RxCpltCallback
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	HAL_UART_RxCpltCallback:
 433              	.LFB150:
 978:Src/main.c    **** 
 979:Src/main.c    **** /* USER CODE BEGIN 4 */
 980:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 981:Src/main.c    **** {
 434              		.loc 1 981 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL33:
 439 0000 08B5     		push	{r3, lr}
 440              	.LCFI7:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 3, -8
 443              		.cfi_offset 14, -4
 982:Src/main.c    ****     if (huart == &huart1)
 444              		.loc 1 982 0
 445 0002 044B     		ldr	r3, .L18
 446 0004 9842     		cmp	r0, r3
 447 0006 00D0     		beq	.L17
 448              	.LVL34:
 449              	.L14:
 450 0008 08BD     		pop	{r3, pc}
 451              	.LVL35:
 452              	.L17:
 983:Src/main.c    ****     {
 984:Src/main.c    ****         gps_read_it(huart, &gps_main);
 453              		.loc 1 984 0
 454 000a 0349     		ldr	r1, .L18+4
 455 000c FFF7FEFF 		bl	gps_read_it
 456              	.LVL36:
 985:Src/main.c    ****     }
 986:Src/main.c    **** }
 457              		.loc 1 986 0
 458 0010 FAE7     		b	.L14
 459              	.L19:
 460 0012 00BF     		.align	2
 461              	.L18:
 462 0014 00000000 		.word	huart1
 463 0018 00000000 		.word	gps_main
 464              		.cfi_endproc
 465              	.LFE150:
 467              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 468              		.align	1
 469              		.global	HAL_UART_TxCpltCallback
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	HAL_UART_TxCpltCallback:
ARM GAS  /tmp/ccFeGOGr.s 			page 27


 476              	.LFB151:
 987:Src/main.c    **** 
 988:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 989:Src/main.c    **** {
 477              		.loc 1 989 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL37:
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
 990:Src/main.c    ****     if (huart == &huart2)
 487              		.loc 1 990 0
 488 0002 044B     		ldr	r3, .L24
 489 0004 8342     		cmp	r3, r0
 490 0006 00D0     		beq	.L23
 491              	.LVL38:
 492              	.L20:
 493 0008 08BD     		pop	{r3, pc}
 494              	.LVL39:
 495              	.L23:
 991:Src/main.c    ****     {
 992:Src/main.c    ****         print_it(&huart2);
 496              		.loc 1 992 0
 497 000a 1846     		mov	r0, r3
 498              	.LVL40:
 499 000c FFF7FEFF 		bl	print_it
 500              	.LVL41:
 993:Src/main.c    ****     }
 994:Src/main.c    **** }
 501              		.loc 1 994 0
 502 0010 FAE7     		b	.L20
 503              	.L25:
 504 0012 00BF     		.align	2
 505              	.L24:
 506 0014 00000000 		.word	huart2
 507              		.cfi_endproc
 508              	.LFE151:
 510              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 511              		.align	1
 512              		.global	HAL_CAN_RxFifo0FullCallback
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	HAL_CAN_RxFifo0FullCallback:
 519              	.LFB152:
 995:Src/main.c    **** 
 996:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 997:Src/main.c    **** {
 520              		.loc 1 997 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFeGOGr.s 			page 28


 524              	.LVL42:
 525 0000 38B5     		push	{r3, r4, r5, lr}
 526              	.LCFI9:
 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
 998:Src/main.c    ****     /// CALIBRATION CODE///
 999:Src/main.c    ****     int idsave = CAN_Receive(&can);
 532              		.loc 1 999 0
 533 0002 4B48     		ldr	r0, .L46
 534              	.LVL43:
 535 0004 FFF7FEFF 		bl	CAN_Receive
 536              	.LVL44:
 537 0008 0446     		mov	r4, r0
 538              	.LVL45:
1000:Src/main.c    ****     //201/202
1001:Src/main.c    **** 
1002:Src/main.c    ****     if (idsave == 0x55 || idsave == 0x201)
 539              		.loc 1 1002 0
 540 000a 5528     		cmp	r0, #85
 541 000c 1ED0     		beq	.L27
 542              		.loc 1 1002 0 is_stmt 0 discriminator 1
 543 000e 40F20123 		movw	r3, #513
 544 0012 9842     		cmp	r0, r3
 545 0014 1AD0     		beq	.L27
 546              	.LVL46:
 547              	.L28:
1003:Src/main.c    ****     {
1004:Src/main.c    ****         if (can.dataRx[0] == 0x51 || can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0
1005:Src/main.c    ****         {
1006:Src/main.c    ****             command_flag = 1;
1007:Src/main.c    ****             idsave = 0;
1008:Src/main.c    ****         }
1009:Src/main.c    ****     }
1010:Src/main.c    ****     if (idsave == 0xA0 || idsave == 0xAA || idsave == 0x181)
 548              		.loc 1 1010 0 is_stmt 1
 549 0016 A02C     		cmp	r4, #160
 550 0018 05D0     		beq	.L30
 551              		.loc 1 1010 0 is_stmt 0 discriminator 1
 552 001a AA2C     		cmp	r4, #170
 553 001c 03D0     		beq	.L30
 554              		.loc 1 1010 0 discriminator 2
 555 001e 40F28113 		movw	r3, #385
 556 0022 9C42     		cmp	r4, r3
 557 0024 0DD1     		bne	.L31
 558              	.L30:
1011:Src/main.c    ****     {
1012:Src/main.c    ****         if (can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0
 559              		.loc 1 1012 0 is_stmt 1
 560 0026 424B     		ldr	r3, .L46
 561 0028 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 562 002a D31E     		subs	r3, r2, #3
 563 002c DBB2     		uxtb	r3, r3
 564 002e 022B     		cmp	r3, #2
 565 0030 03D9     		bls	.L32
ARM GAS  /tmp/ccFeGOGr.s 			page 29


 566              		.loc 1 1012 0 is_stmt 0 discriminator 1
 567 0032 082A     		cmp	r2, #8
 568 0034 01D0     		beq	.L32
 569              		.loc 1 1012 0 discriminator 2
 570 0036 D82A     		cmp	r2, #216
 571 0038 03D1     		bne	.L31
 572              	.L32:
1013:Src/main.c    ****         {
1014:Src/main.c    ****             command_flag = 1;
 573              		.loc 1 1014 0 is_stmt 1
 574 003a 0122     		movs	r2, #1
 575 003c 3D4B     		ldr	r3, .L46+4
 576 003e 1A60     		str	r2, [r3]
 577              	.LVL47:
1015:Src/main.c    ****             idsave = 0;
 578              		.loc 1 1015 0
 579 0040 0024     		movs	r4, #0
 580              	.LVL48:
 581              	.L31:
1016:Src/main.c    ****         }
1017:Src/main.c    ****     }
1018:Src/main.c    **** 
1019:Src/main.c    ****     if (idsave == 0xBB)
 582              		.loc 1 1019 0
 583 0042 BB2C     		cmp	r4, #187
 584 0044 17D0     		beq	.L42
 585              	.L33:
1020:Src/main.c    ****     {
1021:Src/main.c    ****         //sprintf(val0, "APPS1: %d \r\n", idsave);  //use "%lu" for long, "%d" for int
1022:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), 10);
1023:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 0))
1024:Src/main.c    ****         {
1025:Src/main.c    ****             set_min(&pot_2);
1026:Src/main.c    ****             calibration_flag = 1;
1027:Src/main.c    **** 
1028:Src/main.c    ****             can.dataTx[0] = 2;
1029:Src/main.c    ****             can.dataTx[1] = 0;
1030:Src/main.c    ****             can.dataTx[2] = 0;
1031:Src/main.c    ****             can.dataTx[3] = 0;
1032:Src/main.c    ****             can.dataTx[4] = 0;
1033:Src/main.c    ****             can.dataTx[5] = 0;
1034:Src/main.c    ****             can.dataTx[6] = 0;
1035:Src/main.c    ****             can.dataTx[7] = 0;
1036:Src/main.c    ****             can.id = 0xBC;
1037:Src/main.c    ****             can.size = 8;
1038:Src/main.c    ****             for (int i = 0; i < 10; i++)
1039:Src/main.c    ****             {
1040:Src/main.c    ****                 CAN_Send(&can);
1041:Src/main.c    ****             }
1042:Src/main.c    ****         }
1043:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 1))
1044:Src/main.c    ****         {
1045:Src/main.c    ****             set_max(&pot_2);
1046:Src/main.c    ****             calibration_flag = 0;
1047:Src/main.c    **** 
1048:Src/main.c    ****             can.dataTx[0] = 2;
1049:Src/main.c    ****             can.dataTx[1] = 1;
ARM GAS  /tmp/ccFeGOGr.s 			page 30


1050:Src/main.c    ****             can.dataTx[2] = 0;
1051:Src/main.c    ****             can.dataTx[3] = 0;
1052:Src/main.c    ****             can.dataTx[4] = 0;
1053:Src/main.c    ****             can.dataTx[5] = 0;
1054:Src/main.c    ****             ;
1055:Src/main.c    ****             can.dataTx[6] = 0;
1056:Src/main.c    ****             can.dataTx[7] = 0;
1057:Src/main.c    ****             can.id = 0xBC;
1058:Src/main.c    ****             can.size = 8;
1059:Src/main.c    ****             for (int i = 0; i < 10; i++)
1060:Src/main.c    ****             {
1061:Src/main.c    ****                 CAN_Send(&can);
1062:Src/main.c    ****             }
1063:Src/main.c    ****         }
1064:Src/main.c    ****         //val0rang = abs(valMax0 - valMin0);
1065:Src/main.c    ****         pot_2.range = abs(pot_2.max - pot_2.min);
1066:Src/main.c    ****         int max_tmp = pot_2.max;
1067:Src/main.c    ****         int min_tmp = pot_2.min;
1068:Src/main.c    ****         if (max_tmp > min_tmp)
1069:Src/main.c    ****         {
1070:Src/main.c    ****             pot_2.max = max_tmp;
1071:Src/main.c    ****             pot_2.min = min_tmp;
1072:Src/main.c    ****         }
1073:Src/main.c    ****         if (max_tmp < min_tmp)
1074:Src/main.c    ****         {
1075:Src/main.c    ****             pot_2.max = min_tmp;
1076:Src/main.c    ****             pot_2.min = max_tmp;
1077:Src/main.c    ****         }
1078:Src/main.c    ****     }
1079:Src/main.c    **** 
1080:Src/main.c    ****     //TIMER Interrupt setup via CAN Message
1081:Src/main.c    ****     if (idsave == 195 && can.dataRx[0] == 1)
 586              		.loc 1 1081 0
 587 0046 C32C     		cmp	r4, #195
 588 0048 65D0     		beq	.L43
 589              	.L26:
 590 004a 38BD     		pop	{r3, r4, r5, pc}
 591              	.LVL49:
 592              	.L27:
1004:Src/main.c    ****         {
 593              		.loc 1 1004 0
 594 004c 384B     		ldr	r3, .L46
 595 004e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 596 0050 512B     		cmp	r3, #81
 597 0052 0BD0     		beq	.L29
1004:Src/main.c    ****         {
 598              		.loc 1 1004 0 is_stmt 0 discriminator 1
 599 0054 032B     		cmp	r3, #3
 600 0056 09D0     		beq	.L29
1004:Src/main.c    ****         {
 601              		.loc 1 1004 0 discriminator 2
 602 0058 042B     		cmp	r3, #4
 603 005a 07D0     		beq	.L29
1004:Src/main.c    ****         {
 604              		.loc 1 1004 0 discriminator 3
 605 005c 052B     		cmp	r3, #5
 606 005e 05D0     		beq	.L29
ARM GAS  /tmp/ccFeGOGr.s 			page 31


1004:Src/main.c    ****         {
 607              		.loc 1 1004 0 discriminator 4
 608 0060 082B     		cmp	r3, #8
 609 0062 03D0     		beq	.L29
1004:Src/main.c    ****         {
 610              		.loc 1 1004 0 discriminator 5
 611 0064 0A2B     		cmp	r3, #10
 612 0066 01D0     		beq	.L29
1004:Src/main.c    ****         {
 613              		.loc 1 1004 0 discriminator 6
 614 0068 0B2B     		cmp	r3, #11
 615 006a D4D1     		bne	.L28
 616              	.L29:
1006:Src/main.c    ****             idsave = 0;
 617              		.loc 1 1006 0 is_stmt 1
 618 006c 0122     		movs	r2, #1
 619 006e 314B     		ldr	r3, .L46+4
 620 0070 1A60     		str	r2, [r3]
 621              	.LVL50:
1007:Src/main.c    ****         }
 622              		.loc 1 1007 0
 623 0072 0024     		movs	r4, #0
 624 0074 CFE7     		b	.L28
 625              	.LVL51:
 626              	.L42:
 627              	.LBB7:
1023:Src/main.c    ****         {
 628              		.loc 1 1023 0
 629 0076 2E4B     		ldr	r3, .L46
 630 0078 1B8A     		ldrh	r3, [r3, #16]
 631 007a 022B     		cmp	r3, #2
 632 007c 11D0     		beq	.L44
 633              	.L34:
1043:Src/main.c    ****         {
 634              		.loc 1 1043 0
 635 007e 2C4B     		ldr	r3, .L46
 636 0080 1B8A     		ldrh	r3, [r3, #16]
 637 0082 B3F5817F 		cmp	r3, #258
 638 0086 29D0     		beq	.L45
 639              	.L37:
1065:Src/main.c    ****         int max_tmp = pot_2.max;
 640              		.loc 1 1065 0
 641 0088 2B4B     		ldr	r3, .L46+8
 642 008a 5968     		ldr	r1, [r3, #4]
 643 008c 9868     		ldr	r0, [r3, #8]
 644 008e 0A1A     		subs	r2, r1, r0
 645 0090 002A     		cmp	r2, #0
 646 0092 B8BF     		it	lt
 647 0094 5242     		rsblt	r2, r2, #0
 648 0096 DA60     		str	r2, [r3, #12]
 649              	.LVL52:
1073:Src/main.c    ****         {
 650              		.loc 1 1073 0
 651 0098 8142     		cmp	r1, r0
 652 009a D4DA     		bge	.L33
1075:Src/main.c    ****             pot_2.min = max_tmp;
 653              		.loc 1 1075 0
ARM GAS  /tmp/ccFeGOGr.s 			page 32


 654 009c 5860     		str	r0, [r3, #4]
1076:Src/main.c    ****         }
 655              		.loc 1 1076 0
 656 009e 9960     		str	r1, [r3, #8]
 657 00a0 D1E7     		b	.L33
 658              	.LVL53:
 659              	.L44:
1025:Src/main.c    ****             calibration_flag = 1;
 660              		.loc 1 1025 0
 661 00a2 2548     		ldr	r0, .L46+8
 662 00a4 FFF7FEFF 		bl	set_min
 663              	.LVL54:
1026:Src/main.c    **** 
 664              		.loc 1 1026 0
 665 00a8 0122     		movs	r2, #1
 666 00aa 244B     		ldr	r3, .L46+12
 667 00ac 1A60     		str	r2, [r3]
1028:Src/main.c    ****             can.dataTx[1] = 0;
 668              		.loc 1 1028 0
 669 00ae 204B     		ldr	r3, .L46
 670 00b0 0222     		movs	r2, #2
 671 00b2 1A72     		strb	r2, [r3, #8]
1029:Src/main.c    ****             can.dataTx[2] = 0;
 672              		.loc 1 1029 0
 673 00b4 0025     		movs	r5, #0
 674 00b6 5D72     		strb	r5, [r3, #9]
1030:Src/main.c    ****             can.dataTx[3] = 0;
 675              		.loc 1 1030 0
 676 00b8 9D72     		strb	r5, [r3, #10]
1031:Src/main.c    ****             can.dataTx[4] = 0;
 677              		.loc 1 1031 0
 678 00ba DD72     		strb	r5, [r3, #11]
1032:Src/main.c    ****             can.dataTx[5] = 0;
 679              		.loc 1 1032 0
 680 00bc 1D73     		strb	r5, [r3, #12]
1033:Src/main.c    ****             can.dataTx[6] = 0;
 681              		.loc 1 1033 0
 682 00be 5D73     		strb	r5, [r3, #13]
1034:Src/main.c    ****             can.dataTx[7] = 0;
 683              		.loc 1 1034 0
 684 00c0 9D73     		strb	r5, [r3, #14]
1035:Src/main.c    ****             can.id = 0xBC;
 685              		.loc 1 1035 0
 686 00c2 DD73     		strb	r5, [r3, #15]
1036:Src/main.c    ****             can.size = 8;
 687              		.loc 1 1036 0
 688 00c4 BC22     		movs	r2, #188
 689 00c6 1A60     		str	r2, [r3]
1037:Src/main.c    ****             for (int i = 0; i < 10; i++)
 690              		.loc 1 1037 0
 691 00c8 0822     		movs	r2, #8
 692 00ca 5A60     		str	r2, [r3, #4]
 693              	.LVL55:
 694              	.LBB8:
1038:Src/main.c    ****             {
 695              		.loc 1 1038 0
 696 00cc 03E0     		b	.L35
ARM GAS  /tmp/ccFeGOGr.s 			page 33


 697              	.LVL56:
 698              	.L36:
1040:Src/main.c    ****             }
 699              		.loc 1 1040 0 discriminator 3
 700 00ce 1848     		ldr	r0, .L46
 701 00d0 FFF7FEFF 		bl	CAN_Send
 702              	.LVL57:
1038:Src/main.c    ****             {
 703              		.loc 1 1038 0 discriminator 3
 704 00d4 0135     		adds	r5, r5, #1
 705              	.LVL58:
 706              	.L35:
1038:Src/main.c    ****             {
 707              		.loc 1 1038 0 is_stmt 0 discriminator 1
 708 00d6 092D     		cmp	r5, #9
 709 00d8 F9DD     		ble	.L36
 710 00da D0E7     		b	.L34
 711              	.LVL59:
 712              	.L45:
 713              	.LBE8:
1045:Src/main.c    ****             calibration_flag = 0;
 714              		.loc 1 1045 0 is_stmt 1
 715 00dc 1648     		ldr	r0, .L46+8
 716 00de FFF7FEFF 		bl	set_max
 717              	.LVL60:
1046:Src/main.c    **** 
 718              		.loc 1 1046 0
 719 00e2 0025     		movs	r5, #0
 720 00e4 154B     		ldr	r3, .L46+12
 721 00e6 1D60     		str	r5, [r3]
1048:Src/main.c    ****             can.dataTx[1] = 1;
 722              		.loc 1 1048 0
 723 00e8 114B     		ldr	r3, .L46
 724 00ea 0222     		movs	r2, #2
 725 00ec 1A72     		strb	r2, [r3, #8]
1049:Src/main.c    ****             can.dataTx[2] = 0;
 726              		.loc 1 1049 0
 727 00ee 0122     		movs	r2, #1
 728 00f0 5A72     		strb	r2, [r3, #9]
1050:Src/main.c    ****             can.dataTx[3] = 0;
 729              		.loc 1 1050 0
 730 00f2 9D72     		strb	r5, [r3, #10]
1051:Src/main.c    ****             can.dataTx[4] = 0;
 731              		.loc 1 1051 0
 732 00f4 DD72     		strb	r5, [r3, #11]
1052:Src/main.c    ****             can.dataTx[5] = 0;
 733              		.loc 1 1052 0
 734 00f6 1D73     		strb	r5, [r3, #12]
1053:Src/main.c    ****             ;
 735              		.loc 1 1053 0
 736 00f8 5D73     		strb	r5, [r3, #13]
1055:Src/main.c    ****             can.dataTx[7] = 0;
 737              		.loc 1 1055 0
 738 00fa 9D73     		strb	r5, [r3, #14]
1056:Src/main.c    ****             can.id = 0xBC;
 739              		.loc 1 1056 0
 740 00fc DD73     		strb	r5, [r3, #15]
ARM GAS  /tmp/ccFeGOGr.s 			page 34


1057:Src/main.c    ****             can.size = 8;
 741              		.loc 1 1057 0
 742 00fe BC22     		movs	r2, #188
 743 0100 1A60     		str	r2, [r3]
1058:Src/main.c    ****             for (int i = 0; i < 10; i++)
 744              		.loc 1 1058 0
 745 0102 0822     		movs	r2, #8
 746 0104 5A60     		str	r2, [r3, #4]
 747              	.LVL61:
 748              	.LBB9:
1059:Src/main.c    ****             {
 749              		.loc 1 1059 0
 750 0106 03E0     		b	.L38
 751              	.LVL62:
 752              	.L39:
1061:Src/main.c    ****             }
 753              		.loc 1 1061 0 discriminator 3
 754 0108 0948     		ldr	r0, .L46
 755 010a FFF7FEFF 		bl	CAN_Send
 756              	.LVL63:
1059:Src/main.c    ****             {
 757              		.loc 1 1059 0 discriminator 3
 758 010e 0135     		adds	r5, r5, #1
 759              	.LVL64:
 760              	.L38:
1059:Src/main.c    ****             {
 761              		.loc 1 1059 0 is_stmt 0 discriminator 1
 762 0110 092D     		cmp	r5, #9
 763 0112 F9DD     		ble	.L39
 764 0114 B8E7     		b	.L37
 765              	.LVL65:
 766              	.L43:
 767              	.LBE9:
 768              	.LBE7:
 769              		.loc 1 1081 0 is_stmt 1 discriminator 1
 770 0116 064B     		ldr	r3, .L46
 771 0118 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 772 011a 012B     		cmp	r3, #1
 773 011c 95D1     		bne	.L26
1082:Src/main.c    ****     {
1083:Src/main.c    ****         multiplier = can.dataRx[1] * 256 + can.dataRx[2];
 774              		.loc 1 1083 0
 775 011e 044A     		ldr	r2, .L46
 776 0120 517C     		ldrb	r1, [r2, #17]	@ zero_extendqisi2
 777 0122 937C     		ldrb	r3, [r2, #18]	@ zero_extendqisi2
 778 0124 03EB0123 		add	r3, r3, r1, lsl #8
 779 0128 054A     		ldr	r2, .L46+16
 780 012a 1360     		str	r3, [r2]
1084:Src/main.c    ****     }
1085:Src/main.c    **** }
 781              		.loc 1 1085 0
 782 012c 8DE7     		b	.L26
 783              	.L47:
 784 012e 00BF     		.align	2
 785              	.L46:
 786 0130 00000000 		.word	can
 787 0134 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccFeGOGr.s 			page 35


 788 0138 00000000 		.word	pot_2
 789 013c 00000000 		.word	.LANCHOR1
 790 0140 00000000 		.word	.LANCHOR2
 791              		.cfi_endproc
 792              	.LFE152:
 794              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 795              		.align	1
 796              		.global	HAL_TIM_PeriodElapsedCallback
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	HAL_TIM_PeriodElapsedCallback:
 803              	.LFB153:
1086:Src/main.c    **** 
1087:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1088:Src/main.c    **** {
 804              		.loc 1 1088 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              	.LVL66:
 809 0000 38B5     		push	{r3, r4, r5, lr}
 810              	.LCFI10:
 811              		.cfi_def_cfa_offset 16
 812              		.cfi_offset 3, -16
 813              		.cfi_offset 4, -12
 814              		.cfi_offset 5, -8
 815              		.cfi_offset 14, -4
 816 0002 0446     		mov	r4, r0
1089:Src/main.c    **** 
1090:Src/main.c    ****     if (htim == &htim10)
 817              		.loc 1 1090 0
 818 0004 1D4B     		ldr	r3, .L61
 819 0006 9842     		cmp	r0, r3
 820 0008 03D0     		beq	.L56
 821              	.LVL67:
 822              	.L49:
1091:Src/main.c    ****     {
1092:Src/main.c    ****         //READING SENSORS
1093:Src/main.c    ****         if (flag == 1 * multiplier)
1094:Src/main.c    ****         {
1095:Src/main.c    ****             // ACCEL
1096:Src/main.c    ****             LSMD9S0_accel_read(&accel);
1097:Src/main.c    ****             imu_elaborate_data(&accel);
1098:Src/main.c    ****         }
1099:Src/main.c    ****         else if (flag == 2 * multiplier)
1100:Src/main.c    ****         {
1101:Src/main.c    ****             // STEER
1102:Src/main.c    ****             calc_pot_value(&pot_2);
1103:Src/main.c    ****         }
1104:Src/main.c    ****         else if (flag == 3 * multiplier)
1105:Src/main.c    ****         {
1106:Src/main.c    ****             // GYRO
1107:Src/main.c    ****             LSMD9S0_gyro_read(&gyro);
1108:Src/main.c    ****             imu_elaborate_data(&gyro);
1109:Src/main.c    ****         }
ARM GAS  /tmp/ccFeGOGr.s 			page 36


1110:Src/main.c    **** 
1111:Src/main.c    ****         if (flag >= (3 * multiplier))
1112:Src/main.c    ****         {
1113:Src/main.c    ****             flag = 0;
1114:Src/main.c    ****         }
1115:Src/main.c    ****         else
1116:Src/main.c    ****         {
1117:Src/main.c    ****             flag++;
1118:Src/main.c    ****         }
1119:Src/main.c    ****     }
1120:Src/main.c    **** 
1121:Src/main.c    ****     if (htim == &htim7)
 823              		.loc 1 1121 0
 824 000a 1D4B     		ldr	r3, .L61+4
 825 000c 9C42     		cmp	r4, r3
 826 000e 31D0     		beq	.L57
 827              	.L48:
 828 0010 38BD     		pop	{r3, r4, r5, pc}
 829              	.LVL68:
 830              	.L56:
1093:Src/main.c    ****         {
 831              		.loc 1 1093 0
 832 0012 1C4B     		ldr	r3, .L61+8
 833 0014 1A68     		ldr	r2, [r3]
 834 0016 1C4B     		ldr	r3, .L61+12
 835 0018 1B68     		ldr	r3, [r3]
 836 001a 9A42     		cmp	r2, r3
 837 001c 12D0     		beq	.L58
1099:Src/main.c    ****         {
 838              		.loc 1 1099 0
 839 001e B2EB430F 		cmp	r2, r3, lsl #1
 840 0022 17D0     		beq	.L59
1104:Src/main.c    ****         {
 841              		.loc 1 1104 0
 842 0024 03EB4303 		add	r3, r3, r3, lsl #1
 843 0028 9A42     		cmp	r2, r3
 844 002a 17D0     		beq	.L60
 845              	.LVL69:
 846              	.L51:
1111:Src/main.c    ****         {
 847              		.loc 1 1111 0
 848 002c 164B     		ldr	r3, .L61+12
 849 002e 1B68     		ldr	r3, [r3]
 850 0030 03EB4303 		add	r3, r3, r3, lsl #1
 851 0034 134A     		ldr	r2, .L61+8
 852 0036 1268     		ldr	r2, [r2]
 853 0038 9342     		cmp	r3, r2
 854 003a 17DC     		bgt	.L53
1113:Src/main.c    ****         }
 855              		.loc 1 1113 0
 856 003c 0022     		movs	r2, #0
 857 003e 114B     		ldr	r3, .L61+8
 858 0040 1A60     		str	r2, [r3]
 859 0042 E2E7     		b	.L49
 860              	.LVL70:
 861              	.L58:
1096:Src/main.c    ****             imu_elaborate_data(&accel);
ARM GAS  /tmp/ccFeGOGr.s 			page 37


 862              		.loc 1 1096 0
 863 0044 114D     		ldr	r5, .L61+16
 864 0046 2846     		mov	r0, r5
 865              	.LVL71:
 866 0048 FFF7FEFF 		bl	LSMD9S0_accel_read
 867              	.LVL72:
1097:Src/main.c    ****         }
 868              		.loc 1 1097 0
 869 004c 2846     		mov	r0, r5
 870 004e FFF7FEFF 		bl	imu_elaborate_data
 871              	.LVL73:
 872 0052 EBE7     		b	.L51
 873              	.LVL74:
 874              	.L59:
1102:Src/main.c    ****         }
 875              		.loc 1 1102 0
 876 0054 0E48     		ldr	r0, .L61+20
 877              	.LVL75:
 878 0056 FFF7FEFF 		bl	calc_pot_value
 879              	.LVL76:
 880 005a E7E7     		b	.L51
 881              	.LVL77:
 882              	.L60:
1107:Src/main.c    ****             imu_elaborate_data(&gyro);
 883              		.loc 1 1107 0
 884 005c 0D4D     		ldr	r5, .L61+24
 885 005e 2846     		mov	r0, r5
 886              	.LVL78:
 887 0060 FFF7FEFF 		bl	LSMD9S0_gyro_read
 888              	.LVL79:
1108:Src/main.c    ****         }
 889              		.loc 1 1108 0
 890 0064 2846     		mov	r0, r5
 891 0066 FFF7FEFF 		bl	imu_elaborate_data
 892              	.LVL80:
 893 006a DFE7     		b	.L51
 894              	.L53:
1117:Src/main.c    ****         }
 895              		.loc 1 1117 0
 896 006c 0132     		adds	r2, r2, #1
 897 006e 054B     		ldr	r3, .L61+8
 898 0070 1A60     		str	r2, [r3]
 899 0072 CAE7     		b	.L49
 900              	.L57:
1122:Src/main.c    ****     {
1123:Src/main.c    ****         encoder_tim_interrupt(&enc);
 901              		.loc 1 1123 0
 902 0074 0848     		ldr	r0, .L61+28
 903 0076 FFF7FEFF 		bl	encoder_tim_interrupt
 904              	.LVL81:
1124:Src/main.c    ****     }
1125:Src/main.c    **** }
 905              		.loc 1 1125 0
 906 007a C9E7     		b	.L48
 907              	.L62:
 908              		.align	2
 909              	.L61:
ARM GAS  /tmp/ccFeGOGr.s 			page 38


 910 007c 00000000 		.word	htim10
 911 0080 00000000 		.word	htim7
 912 0084 00000000 		.word	.LANCHOR3
 913 0088 00000000 		.word	.LANCHOR2
 914 008c 00000000 		.word	accel
 915 0090 00000000 		.word	pot_2
 916 0094 00000000 		.word	gyro
 917 0098 00000000 		.word	enc
 918              		.cfi_endproc
 919              	.LFE153:
 921              		.global	__aeabi_d2uiz
 922              		.global	__aeabi_ddiv
 923              		.global	__aeabi_i2d
 924              		.global	__aeabi_dadd
 925              		.section	.text.send_CAN_data,"ax",%progbits
 926              		.align	1
 927              		.global	send_CAN_data
 928              		.syntax unified
 929              		.thumb
 930              		.thumb_func
 931              		.fpu fpv4-sp-d16
 933              	send_CAN_data:
 934              	.LFB154:
1126:Src/main.c    **** 
1127:Src/main.c    **** int send_CAN_data(uint32_t millis)
1128:Src/main.c    **** {
 935              		.loc 1 1128 0
 936              		.cfi_startproc
 937              		@ args = 0, pretend = 0, frame = 8
 938              		@ frame_needed = 0, uses_anonymous_args = 0
 939              	.LVL82:
 940 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 941              	.LCFI11:
 942              		.cfi_def_cfa_offset 28
 943              		.cfi_offset 4, -28
 944              		.cfi_offset 5, -24
 945              		.cfi_offset 6, -20
 946              		.cfi_offset 7, -16
 947              		.cfi_offset 8, -12
 948              		.cfi_offset 9, -8
 949              		.cfi_offset 14, -4
 950 0004 83B0     		sub	sp, sp, #12
 951              	.LCFI12:
 952              		.cfi_def_cfa_offset 40
 953 0006 0446     		mov	r4, r0
 954              	.LVL83:
1129:Src/main.c    **** 
1130:Src/main.c    ****     int sent_flag = 0;
1131:Src/main.c    **** 
1132:Src/main.c    ****     //-------------------SEND Encoder-------------------//
1133:Src/main.c    ****     if (millis % 100 == 0)
 955              		.loc 1 1133 0
 956 0008 904B     		ldr	r3, .L76
 957 000a A3FB0023 		umull	r2, r3, r3, r0
 958 000e 5B09     		lsrs	r3, r3, #5
 959 0010 6422     		movs	r2, #100
 960 0012 02FB1303 		mls	r3, r2, r3, r0
ARM GAS  /tmp/ccFeGOGr.s 			page 39


 961 0016 002B     		cmp	r3, #0
 962 0018 33D0     		beq	.L71
1130:Src/main.c    **** 
 963              		.loc 1 1130 0
 964 001a 0020     		movs	r0, #0
 965              	.LVL84:
 966              	.L64:
1134:Src/main.c    ****     {
1135:Src/main.c    ****         uint16_t speed_Send = enc.average_speed;
1136:Src/main.c    **** 
1137:Src/main.c    ****         can.dataTx[0] = 0x06;
1138:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
1139:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
1140:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
1141:Src/main.c    ****         can.dataTx[4] = 0;
1142:Src/main.c    ****         can.dataTx[5] = 0;
1143:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
1144:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
1145:Src/main.c    ****         can.id = 0xD0;
1146:Src/main.c    ****         can.size = 8;
1147:Src/main.c    ****         CAN_Send(&can);
1148:Src/main.c    **** 
1149:Src/main.c    ****         sent_flag = 1;
1150:Src/main.c    ****     }
1151:Src/main.c    **** 
1152:Src/main.c    ****     millis += 5;
 967              		.loc 1 1152 0
 968 001c 621D     		adds	r2, r4, #5
 969              	.LVL85:
1153:Src/main.c    **** 
1154:Src/main.c    ****     //-------------SEND KM & WHEEL ROTAIONS-------------//
1155:Src/main.c    ****     if (millis % 500 == 0)
 970              		.loc 1 1155 0
 971 001e 8C4B     		ldr	r3, .L76+4
 972 0020 A3FB0213 		umull	r1, r3, r3, r2
 973 0024 5B09     		lsrs	r3, r3, #5
 974 0026 4FF4FA71 		mov	r1, #500
 975 002a 01FB1323 		mls	r3, r1, r3, r2
 976 002e 002B     		cmp	r3, #0
 977 0030 44D0     		beq	.L72
 978              	.LVL86:
 979              	.L65:
1156:Src/main.c    ****     {
1157:Src/main.c    **** 
1158:Src/main.c    ****         uint16_t Km = (enc.Km);
1159:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
1160:Src/main.c    **** 
1161:Src/main.c    ****         can.dataTx[0] = 0x08;
1162:Src/main.c    ****         can.dataTx[1] = Km >> 8;
1163:Src/main.c    ****         can.dataTx[2] = Km;
1164:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
1165:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
1166:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
1167:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
1168:Src/main.c    ****         can.dataTx[7] = 0;
1169:Src/main.c    ****         can.id = 0xD0;
1170:Src/main.c    ****         can.size = 8;
ARM GAS  /tmp/ccFeGOGr.s 			page 40


1171:Src/main.c    ****         CAN_Send(&can);
1172:Src/main.c    **** 
1173:Src/main.c    ****         sent_flag = 2;
1174:Src/main.c    ****     }
1175:Src/main.c    **** 
1176:Src/main.c    ****     millis += 5;
 980              		.loc 1 1176 0
 981 0032 04F10A02 		add	r2, r4, #10
 982              	.LVL87:
1177:Src/main.c    **** 
1178:Src/main.c    ****     //--------------------SEND Accel--------------------//
1179:Src/main.c    ****     if (millis % 100 == 0)
 983              		.loc 1 1179 0
 984 0036 854B     		ldr	r3, .L76
 985 0038 A3FB0213 		umull	r1, r3, r3, r2
 986 003c 5B09     		lsrs	r3, r3, #5
 987 003e 6421     		movs	r1, #100
 988 0040 01FB1323 		mls	r3, r1, r3, r2
 989 0044 002B     		cmp	r3, #0
 990 0046 64D0     		beq	.L73
 991              	.LVL88:
 992              	.L66:
1180:Src/main.c    ****     {
1181:Src/main.c    **** 
1182:Src/main.c    ****         //removing negative values
1183:Src/main.c    ****         uint16_t val_a_x = accel.x + accel.scale * 1000;
1184:Src/main.c    ****         uint16_t val_a_y = accel.y + accel.scale * 1000;
1185:Src/main.c    ****         uint16_t val_a_z = accel.z + accel.scale * 1000;
1186:Src/main.c    **** 
1187:Src/main.c    ****         can.dataTx[0] = 0x03;
1188:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
1189:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
1190:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
1191:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
1192:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
1193:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
1194:Src/main.c    ****         can.dataTx[7] = 0;
1195:Src/main.c    ****         can.id = 0xC0;
1196:Src/main.c    ****         can.size = 8;
1197:Src/main.c    ****         CAN_Send(&can);
1198:Src/main.c    **** 
1199:Src/main.c    ****         sent_flag = 3;
1200:Src/main.c    ****     }
1201:Src/main.c    **** 
1202:Src/main.c    ****     millis += 5;
 993              		.loc 1 1202 0
 994 0048 04F10F02 		add	r2, r4, #15
 995              	.LVL89:
1203:Src/main.c    **** 
1204:Src/main.c    ****     //---------------------SEND Gyro---------------------//
1205:Src/main.c    ****     if (millis % 100 == 0)
 996              		.loc 1 1205 0
 997 004c 7F4B     		ldr	r3, .L76
 998 004e A3FB0213 		umull	r1, r3, r3, r2
 999 0052 5B09     		lsrs	r3, r3, #5
 1000 0054 6421     		movs	r1, #100
 1001 0056 01FB1323 		mls	r3, r1, r3, r2
ARM GAS  /tmp/ccFeGOGr.s 			page 41


 1002 005a 002B     		cmp	r3, #0
 1003 005c 00F09D80 		beq	.L74
 1004              	.LVL90:
 1005              	.L67:
1206:Src/main.c    ****     {
1207:Src/main.c    ****         uint16_t val_g_x = gyro.x + gyro.scale * 1000;
1208:Src/main.c    ****         uint16_t val_g_y = gyro.y + gyro.scale * 1000;
1209:Src/main.c    ****         uint16_t val_g_z = gyro.z + gyro.scale * 1000;
1210:Src/main.c    **** 
1211:Src/main.c    ****         can.dataTx[0] = 0x04;
1212:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
1213:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
1214:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
1215:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
1216:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
1217:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
1218:Src/main.c    ****         can.dataTx[7] = 0;
1219:Src/main.c    ****         can.id = 0xC0;
1220:Src/main.c    ****         can.size = 8;
1221:Src/main.c    ****         CAN_Send(&can);
1222:Src/main.c    **** 
1223:Src/main.c    ****         sent_flag = 4;
1224:Src/main.c    ****     }
1225:Src/main.c    **** 
1226:Src/main.c    ****     millis += 5;
 1006              		.loc 1 1226 0
 1007 0060 1434     		adds	r4, r4, #20
 1008              	.LVL91:
1227:Src/main.c    **** 
1228:Src/main.c    ****     //--------------------SEND Steer--------------------//
1229:Src/main.c    ****     if (millis % 100 == 0)
 1009              		.loc 1 1229 0
 1010 0062 7A4B     		ldr	r3, .L76
 1011 0064 A3FB0423 		umull	r2, r3, r3, r4
 1012 0068 5B09     		lsrs	r3, r3, #5
 1013 006a 6422     		movs	r2, #100
 1014 006c 02FB1343 		mls	r3, r2, r3, r4
 1015 0070 23B9     		cbnz	r3, .L63
1230:Src/main.c    ****     {
1231:Src/main.c    ****         if (calibration_flag == 0)
 1016              		.loc 1 1231 0
 1017 0072 784B     		ldr	r3, .L76+8
 1018 0074 1B68     		ldr	r3, [r3]
 1019 0076 002B     		cmp	r3, #0
 1020 0078 00F0D380 		beq	.L75
 1021              	.LVL92:
 1022              	.L63:
1232:Src/main.c    ****         {
1233:Src/main.c    ****             can.dataTx[0] = 2;
1234:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
1235:Src/main.c    ****             can.dataTx[2] = 0;
1236:Src/main.c    ****             can.dataTx[3] = 0;
1237:Src/main.c    ****             can.dataTx[4] = 0;
1238:Src/main.c    ****             can.dataTx[5] = 0;
1239:Src/main.c    ****             can.dataTx[6] = 0;
1240:Src/main.c    ****             can.dataTx[7] = 0;
1241:Src/main.c    ****             can.id = 0xC0;
ARM GAS  /tmp/ccFeGOGr.s 			page 42


1242:Src/main.c    ****             can.size = 8;
1243:Src/main.c    ****             CAN_Send(&can);
1244:Src/main.c    **** 
1245:Src/main.c    ****             sent_flag = 5;
1246:Src/main.c    ****         }
1247:Src/main.c    ****     }
1248:Src/main.c    **** 
1249:Src/main.c    ****     return sent_flag;
1250:Src/main.c    **** }
 1023              		.loc 1 1250 0
 1024 007c 03B0     		add	sp, sp, #12
 1025              	.LCFI13:
 1026              		.cfi_remember_state
 1027              		.cfi_def_cfa_offset 28
 1028              		@ sp needed
 1029 007e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1030              	.LVL93:
 1031              	.L71:
 1032              	.LCFI14:
 1033              		.cfi_restore_state
 1034              	.LBB10:
1135:Src/main.c    **** 
 1035              		.loc 1 1135 0
 1036 0082 754D     		ldr	r5, .L76+12
 1037 0084 D5E9F601 		ldrd	r0, [r5, #984]
 1038              	.LVL94:
 1039 0088 FFF7FEFF 		bl	__aeabi_d2uiz
 1040              	.LVL95:
 1041 008c 83B2     		uxth	r3, r0
 1042              	.LVL96:
1137:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
 1043              		.loc 1 1137 0
 1044 008e 7348     		ldr	r0, .L76+16
 1045 0090 0622     		movs	r2, #6
 1046 0092 0272     		strb	r2, [r0, #8]
1138:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
 1047              		.loc 1 1138 0
 1048 0094 1A0A     		lsrs	r2, r3, #8
 1049 0096 4272     		strb	r2, [r0, #9]
1139:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
 1050              		.loc 1 1139 0
 1051 0098 8372     		strb	r3, [r0, #10]
1140:Src/main.c    ****         can.dataTx[4] = 0;
 1052              		.loc 1 1140 0
 1053 009a 6B6F     		ldr	r3, [r5, #116]
 1054              	.LVL97:
 1055 009c C372     		strb	r3, [r0, #11]
1141:Src/main.c    ****         can.dataTx[5] = 0;
 1056              		.loc 1 1141 0
 1057 009e 0023     		movs	r3, #0
 1058 00a0 0373     		strb	r3, [r0, #12]
1142:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
 1059              		.loc 1 1142 0
 1060 00a2 4373     		strb	r3, [r0, #13]
1143:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
 1061              		.loc 1 1143 0
 1062 00a4 AB68     		ldr	r3, [r5, #8]
ARM GAS  /tmp/ccFeGOGr.s 			page 43


 1063 00a6 8373     		strb	r3, [r0, #14]
1144:Src/main.c    ****         can.id = 0xD0;
 1064              		.loc 1 1144 0
 1065 00a8 6B6E     		ldr	r3, [r5, #100]
 1066 00aa C373     		strb	r3, [r0, #15]
1145:Src/main.c    ****         can.size = 8;
 1067              		.loc 1 1145 0
 1068 00ac D023     		movs	r3, #208
 1069 00ae 0360     		str	r3, [r0]
1146:Src/main.c    ****         CAN_Send(&can);
 1070              		.loc 1 1146 0
 1071 00b0 0823     		movs	r3, #8
 1072 00b2 4360     		str	r3, [r0, #4]
1147:Src/main.c    **** 
 1073              		.loc 1 1147 0
 1074 00b4 FFF7FEFF 		bl	CAN_Send
 1075              	.LVL98:
1149:Src/main.c    ****     }
 1076              		.loc 1 1149 0
 1077 00b8 0120     		movs	r0, #1
 1078 00ba AFE7     		b	.L64
 1079              	.LVL99:
 1080              	.L72:
 1081              	.LBE10:
 1082              	.LBB11:
1158:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
 1083              		.loc 1 1158 0
 1084 00bc 664E     		ldr	r6, .L76+12
 1085 00be D6ED1C7A 		vldr.32	s15, [r6, #112]
 1086 00c2 FCEEE77A 		vcvt.u32.f32	s15, s15
 1087 00c6 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1088 00ca BDF80430 		ldrh	r3, [sp, #4]
 1089              	.LVL100:
1159:Src/main.c    **** 
 1090              		.loc 1 1159 0
 1091 00ce F26E     		ldr	r2, [r6, #108]
 1092              	.LVL101:
1161:Src/main.c    ****         can.dataTx[1] = Km >> 8;
 1093              		.loc 1 1161 0
 1094 00d0 624D     		ldr	r5, .L76+16
 1095 00d2 0827     		movs	r7, #8
 1096 00d4 2F72     		strb	r7, [r5, #8]
1162:Src/main.c    ****         can.dataTx[2] = Km;
 1097              		.loc 1 1162 0
 1098 00d6 23FA07F1 		lsr	r1, r3, r7
 1099 00da 6972     		strb	r1, [r5, #9]
1163:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
 1100              		.loc 1 1163 0
 1101 00dc AB72     		strb	r3, [r5, #10]
1164:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
 1102              		.loc 1 1164 0
 1103 00de 4FF00008 		mov	r8, #0
 1104 00e2 85F80B80 		strb	r8, [r5, #11]
1165:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
 1105              		.loc 1 1165 0
 1106 00e6 2A73     		strb	r2, [r5, #12]
1166:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
ARM GAS  /tmp/ccFeGOGr.s 			page 44


 1107              		.loc 1 1166 0
 1108 00e8 0022     		movs	r2, #0
 1109              	.LVL102:
 1110 00ea 5D4B     		ldr	r3, .L76+20
 1111              	.LVL103:
 1112 00ec D6E92401 		ldrd	r0, [r6, #144]
 1113              	.LVL104:
 1114 00f0 FFF7FEFF 		bl	__aeabi_ddiv
 1115              	.LVL105:
 1116 00f4 FFF7FEFF 		bl	__aeabi_d2uiz
 1117              	.LVL106:
 1118 00f8 6873     		strb	r0, [r5, #13]
1167:Src/main.c    ****         can.dataTx[7] = 0;
 1119              		.loc 1 1167 0
 1120 00fa 3369     		ldr	r3, [r6, #16]
 1121 00fc AB73     		strb	r3, [r5, #14]
1168:Src/main.c    ****         can.id = 0xD0;
 1122              		.loc 1 1168 0
 1123 00fe 85F80F80 		strb	r8, [r5, #15]
1169:Src/main.c    ****         can.size = 8;
 1124              		.loc 1 1169 0
 1125 0102 D023     		movs	r3, #208
 1126 0104 2B60     		str	r3, [r5]
1170:Src/main.c    ****         CAN_Send(&can);
 1127              		.loc 1 1170 0
 1128 0106 6F60     		str	r7, [r5, #4]
1171:Src/main.c    **** 
 1129              		.loc 1 1171 0
 1130 0108 2846     		mov	r0, r5
 1131 010a FFF7FEFF 		bl	CAN_Send
 1132              	.LVL107:
1173:Src/main.c    ****     }
 1133              		.loc 1 1173 0
 1134 010e 0220     		movs	r0, #2
 1135 0110 8FE7     		b	.L65
 1136              	.LVL108:
 1137              	.L73:
 1138              	.LBE11:
 1139              	.LBB12:
1183:Src/main.c    ****         uint16_t val_a_y = accel.y + accel.scale * 1000;
 1140              		.loc 1 1183 0
 1141 0112 544D     		ldr	r5, .L76+24
 1142 0114 D5E90089 		ldrd	r8, [r5]
 1143 0118 D5F81832 		ldr	r3, [r5, #536]
 1144 011c 4FF47A70 		mov	r0, #1000
 1145              	.LVL109:
 1146 0120 00FB03F0 		mul	r0, r0, r3
 1147 0124 FFF7FEFF 		bl	__aeabi_i2d
 1148              	.LVL110:
 1149 0128 0646     		mov	r6, r0
 1150 012a 0F46     		mov	r7, r1
 1151 012c 0246     		mov	r2, r0
 1152 012e 0B46     		mov	r3, r1
 1153 0130 4046     		mov	r0, r8
 1154 0132 4946     		mov	r1, r9
 1155 0134 FFF7FEFF 		bl	__aeabi_dadd
 1156              	.LVL111:
ARM GAS  /tmp/ccFeGOGr.s 			page 45


 1157 0138 FFF7FEFF 		bl	__aeabi_d2uiz
 1158              	.LVL112:
 1159 013c 1FFA80F9 		uxth	r9, r0
 1160              	.LVL113:
1184:Src/main.c    ****         uint16_t val_a_z = accel.z + accel.scale * 1000;
 1161              		.loc 1 1184 0
 1162 0140 D5E90223 		ldrd	r2, [r5, #8]
 1163 0144 3046     		mov	r0, r6
 1164 0146 3946     		mov	r1, r7
 1165 0148 FFF7FEFF 		bl	__aeabi_dadd
 1166              	.LVL114:
 1167 014c FFF7FEFF 		bl	__aeabi_d2uiz
 1168              	.LVL115:
 1169 0150 1FFA80F8 		uxth	r8, r0
 1170              	.LVL116:
1185:Src/main.c    **** 
 1171              		.loc 1 1185 0
 1172 0154 D5E90423 		ldrd	r2, [r5, #16]
 1173 0158 3046     		mov	r0, r6
 1174 015a 3946     		mov	r1, r7
 1175 015c FFF7FEFF 		bl	__aeabi_dadd
 1176              	.LVL117:
 1177 0160 FFF7FEFF 		bl	__aeabi_d2uiz
 1178              	.LVL118:
 1179 0164 83B2     		uxth	r3, r0
 1180              	.LVL119:
1187:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
 1181              		.loc 1 1187 0
 1182 0166 3D48     		ldr	r0, .L76+16
 1183 0168 0325     		movs	r5, #3
 1184 016a 0572     		strb	r5, [r0, #8]
1188:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
 1185              		.loc 1 1188 0
 1186 016c 4FEA1922 		lsr	r2, r9, #8
 1187 0170 4272     		strb	r2, [r0, #9]
1189:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
 1188              		.loc 1 1189 0
 1189 0172 80F80A90 		strb	r9, [r0, #10]
1190:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
 1190              		.loc 1 1190 0
 1191 0176 4FEA1822 		lsr	r2, r8, #8
 1192 017a C272     		strb	r2, [r0, #11]
1191:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
 1193              		.loc 1 1191 0
 1194 017c 80F80C80 		strb	r8, [r0, #12]
1192:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
 1195              		.loc 1 1192 0
 1196 0180 1A0A     		lsrs	r2, r3, #8
 1197 0182 4273     		strb	r2, [r0, #13]
1193:Src/main.c    ****         can.dataTx[7] = 0;
 1198              		.loc 1 1193 0
 1199 0184 8373     		strb	r3, [r0, #14]
1194:Src/main.c    ****         can.id = 0xC0;
 1200              		.loc 1 1194 0
 1201 0186 0023     		movs	r3, #0
 1202              	.LVL120:
 1203 0188 C373     		strb	r3, [r0, #15]
ARM GAS  /tmp/ccFeGOGr.s 			page 46


1195:Src/main.c    ****         can.size = 8;
 1204              		.loc 1 1195 0
 1205 018a C023     		movs	r3, #192
 1206 018c 0360     		str	r3, [r0]
1196:Src/main.c    ****         CAN_Send(&can);
 1207              		.loc 1 1196 0
 1208 018e 0823     		movs	r3, #8
 1209 0190 4360     		str	r3, [r0, #4]
1197:Src/main.c    **** 
 1210              		.loc 1 1197 0
 1211 0192 FFF7FEFF 		bl	CAN_Send
 1212              	.LVL121:
1199:Src/main.c    ****     }
 1213              		.loc 1 1199 0
 1214 0196 2846     		mov	r0, r5
 1215 0198 56E7     		b	.L66
 1216              	.LVL122:
 1217              	.L74:
 1218              	.LBE12:
 1219              	.LBB13:
1207:Src/main.c    ****         uint16_t val_g_y = gyro.y + gyro.scale * 1000;
 1220              		.loc 1 1207 0
 1221 019a 334D     		ldr	r5, .L76+28
 1222 019c D5E90089 		ldrd	r8, [r5]
 1223 01a0 D5F81832 		ldr	r3, [r5, #536]
 1224 01a4 4FF47A70 		mov	r0, #1000
 1225              	.LVL123:
 1226 01a8 00FB03F0 		mul	r0, r0, r3
 1227 01ac FFF7FEFF 		bl	__aeabi_i2d
 1228              	.LVL124:
 1229 01b0 0646     		mov	r6, r0
 1230 01b2 0F46     		mov	r7, r1
 1231 01b4 0246     		mov	r2, r0
 1232 01b6 0B46     		mov	r3, r1
 1233 01b8 4046     		mov	r0, r8
 1234 01ba 4946     		mov	r1, r9
 1235 01bc FFF7FEFF 		bl	__aeabi_dadd
 1236              	.LVL125:
 1237 01c0 FFF7FEFF 		bl	__aeabi_d2uiz
 1238              	.LVL126:
 1239 01c4 1FFA80F9 		uxth	r9, r0
 1240              	.LVL127:
1208:Src/main.c    ****         uint16_t val_g_z = gyro.z + gyro.scale * 1000;
 1241              		.loc 1 1208 0
 1242 01c8 D5E90223 		ldrd	r2, [r5, #8]
 1243 01cc 3046     		mov	r0, r6
 1244 01ce 3946     		mov	r1, r7
 1245 01d0 FFF7FEFF 		bl	__aeabi_dadd
 1246              	.LVL128:
 1247 01d4 FFF7FEFF 		bl	__aeabi_d2uiz
 1248              	.LVL129:
 1249 01d8 1FFA80F8 		uxth	r8, r0
 1250              	.LVL130:
1209:Src/main.c    **** 
 1251              		.loc 1 1209 0
 1252 01dc D5E90423 		ldrd	r2, [r5, #16]
 1253 01e0 3046     		mov	r0, r6
ARM GAS  /tmp/ccFeGOGr.s 			page 47


 1254 01e2 3946     		mov	r1, r7
 1255 01e4 FFF7FEFF 		bl	__aeabi_dadd
 1256              	.LVL131:
 1257 01e8 FFF7FEFF 		bl	__aeabi_d2uiz
 1258              	.LVL132:
 1259 01ec 83B2     		uxth	r3, r0
 1260              	.LVL133:
1211:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
 1261              		.loc 1 1211 0
 1262 01ee 1B48     		ldr	r0, .L76+16
 1263 01f0 0425     		movs	r5, #4
 1264 01f2 0572     		strb	r5, [r0, #8]
1212:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
 1265              		.loc 1 1212 0
 1266 01f4 4FEA1922 		lsr	r2, r9, #8
 1267 01f8 4272     		strb	r2, [r0, #9]
1213:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
 1268              		.loc 1 1213 0
 1269 01fa 80F80A90 		strb	r9, [r0, #10]
1214:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
 1270              		.loc 1 1214 0
 1271 01fe 4FEA1822 		lsr	r2, r8, #8
 1272 0202 C272     		strb	r2, [r0, #11]
1215:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
 1273              		.loc 1 1215 0
 1274 0204 80F80C80 		strb	r8, [r0, #12]
1216:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
 1275              		.loc 1 1216 0
 1276 0208 1A0A     		lsrs	r2, r3, #8
 1277 020a 4273     		strb	r2, [r0, #13]
1217:Src/main.c    ****         can.dataTx[7] = 0;
 1278              		.loc 1 1217 0
 1279 020c 8373     		strb	r3, [r0, #14]
1218:Src/main.c    ****         can.id = 0xC0;
 1280              		.loc 1 1218 0
 1281 020e 0023     		movs	r3, #0
 1282              	.LVL134:
 1283 0210 C373     		strb	r3, [r0, #15]
1219:Src/main.c    ****         can.size = 8;
 1284              		.loc 1 1219 0
 1285 0212 C023     		movs	r3, #192
 1286 0214 0360     		str	r3, [r0]
1220:Src/main.c    ****         CAN_Send(&can);
 1287              		.loc 1 1220 0
 1288 0216 0823     		movs	r3, #8
 1289 0218 4360     		str	r3, [r0, #4]
1221:Src/main.c    **** 
 1290              		.loc 1 1221 0
 1291 021a FFF7FEFF 		bl	CAN_Send
 1292              	.LVL135:
1223:Src/main.c    ****     }
 1293              		.loc 1 1223 0
 1294 021e 2846     		mov	r0, r5
 1295 0220 1EE7     		b	.L67
 1296              	.LVL136:
 1297              	.L75:
 1298              	.LBE13:
ARM GAS  /tmp/ccFeGOGr.s 			page 48


1233:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
 1299              		.loc 1 1233 0
 1300 0222 0E48     		ldr	r0, .L76+16
 1301              	.LVL137:
 1302 0224 0223     		movs	r3, #2
 1303 0226 0372     		strb	r3, [r0, #8]
1234:Src/main.c    ****             can.dataTx[2] = 0;
 1304              		.loc 1 1234 0
 1305 0228 104B     		ldr	r3, .L76+32
 1306 022a 1B68     		ldr	r3, [r3]
 1307 022c 4372     		strb	r3, [r0, #9]
1235:Src/main.c    ****             can.dataTx[3] = 0;
 1308              		.loc 1 1235 0
 1309 022e 0023     		movs	r3, #0
 1310 0230 8372     		strb	r3, [r0, #10]
1236:Src/main.c    ****             can.dataTx[4] = 0;
 1311              		.loc 1 1236 0
 1312 0232 C372     		strb	r3, [r0, #11]
1237:Src/main.c    ****             can.dataTx[5] = 0;
 1313              		.loc 1 1237 0
 1314 0234 0373     		strb	r3, [r0, #12]
1238:Src/main.c    ****             can.dataTx[6] = 0;
 1315              		.loc 1 1238 0
 1316 0236 4373     		strb	r3, [r0, #13]
1239:Src/main.c    ****             can.dataTx[7] = 0;
 1317              		.loc 1 1239 0
 1318 0238 8373     		strb	r3, [r0, #14]
1240:Src/main.c    ****             can.id = 0xC0;
 1319              		.loc 1 1240 0
 1320 023a C373     		strb	r3, [r0, #15]
1241:Src/main.c    ****             can.size = 8;
 1321              		.loc 1 1241 0
 1322 023c C023     		movs	r3, #192
 1323 023e 0360     		str	r3, [r0]
1242:Src/main.c    ****             CAN_Send(&can);
 1324              		.loc 1 1242 0
 1325 0240 0823     		movs	r3, #8
 1326 0242 4360     		str	r3, [r0, #4]
1243:Src/main.c    **** 
 1327              		.loc 1 1243 0
 1328 0244 FFF7FEFF 		bl	CAN_Send
 1329              	.LVL138:
1245:Src/main.c    ****         }
 1330              		.loc 1 1245 0
 1331 0248 0520     		movs	r0, #5
1249:Src/main.c    **** }
 1332              		.loc 1 1249 0
 1333 024a 17E7     		b	.L63
 1334              	.L77:
 1335              		.align	2
 1336              	.L76:
 1337 024c 1F85EB51 		.word	1374389535
 1338 0250 D34D6210 		.word	274877907
 1339 0254 00000000 		.word	.LANCHOR1
 1340 0258 00000000 		.word	enc
 1341 025c 00000000 		.word	can
 1342 0260 00002440 		.word	1076101120
ARM GAS  /tmp/ccFeGOGr.s 			page 49


 1343 0264 00000000 		.word	accel
 1344 0268 00000000 		.word	gyro
 1345 026c 00000000 		.word	pot_2
 1346              		.cfi_endproc
 1347              	.LFE154:
 1349              		.section	.text.Error_Handler,"ax",%progbits
 1350              		.align	1
 1351              		.global	Error_Handler
 1352              		.syntax unified
 1353              		.thumb
 1354              		.thumb_func
 1355              		.fpu fpv4-sp-d16
 1357              	Error_Handler:
 1358              	.LFB155:
1251:Src/main.c    **** 
1252:Src/main.c    **** /* USER CODE END 4 */
1253:Src/main.c    **** 
1254:Src/main.c    **** /**
1255:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1256:Src/main.c    ****   * @retval None
1257:Src/main.c    ****   */
1258:Src/main.c    **** void Error_Handler(void)
1259:Src/main.c    **** {
 1359              		.loc 1 1259 0
 1360              		.cfi_startproc
 1361              		@ Volatile: function does not return.
 1362              		@ args = 0, pretend = 0, frame = 0
 1363              		@ frame_needed = 0, uses_anonymous_args = 0
 1364 0000 08B5     		push	{r3, lr}
 1365              	.LCFI15:
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 3, -8
 1368              		.cfi_offset 14, -4
 1369              	.L79:
1260:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1261:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1262:Src/main.c    ****     while (1)
1263:Src/main.c    ****     {
1264:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 1370              		.loc 1 1264 0 discriminator 1
 1371 0002 074C     		ldr	r4, .L81
 1372 0004 0A23     		movs	r3, #10
 1373 0006 0F22     		movs	r2, #15
 1374 0008 0649     		ldr	r1, .L81+4
 1375 000a 2046     		mov	r0, r4
 1376 000c FFF7FEFF 		bl	HAL_UART_Transmit
 1377              	.LVL139:
1265:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t *)file, strlen(file), 10);
1266:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 1378              		.loc 1 1266 0 discriminator 1
 1379 0010 0A23     		movs	r3, #10
 1380 0012 0222     		movs	r2, #2
 1381 0014 0449     		ldr	r1, .L81+8
 1382 0016 2046     		mov	r0, r4
 1383 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 1384              	.LVL140:
 1385 001c F1E7     		b	.L79
ARM GAS  /tmp/ccFeGOGr.s 			page 50


 1386              	.L82:
 1387 001e 00BF     		.align	2
 1388              	.L81:
 1389 0020 00000000 		.word	huart2
 1390 0024 00000000 		.word	.LC0
 1391 0028 10000000 		.word	.LC1
 1392              		.cfi_endproc
 1393              	.LFE155:
 1395              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1396              		.align	1
 1397              		.syntax unified
 1398              		.thumb
 1399              		.thumb_func
 1400              		.fpu fpv4-sp-d16
 1402              	MX_USART2_UART_Init:
 1403              	.LFB147:
 880:Src/main.c    **** 
 1404              		.loc 1 880 0
 1405              		.cfi_startproc
 1406              		@ args = 0, pretend = 0, frame = 0
 1407              		@ frame_needed = 0, uses_anonymous_args = 0
 1408 0000 08B5     		push	{r3, lr}
 1409              	.LCFI16:
 1410              		.cfi_def_cfa_offset 8
 1411              		.cfi_offset 3, -8
 1412              		.cfi_offset 14, -4
 889:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 1413              		.loc 1 889 0
 1414 0002 0948     		ldr	r0, .L87
 1415 0004 094B     		ldr	r3, .L87+4
 1416 0006 0360     		str	r3, [r0]
 890:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1417              		.loc 1 890 0
 1418 0008 094B     		ldr	r3, .L87+8
 1419 000a 4360     		str	r3, [r0, #4]
 891:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 1420              		.loc 1 891 0
 1421 000c 0023     		movs	r3, #0
 1422 000e 8360     		str	r3, [r0, #8]
 892:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 1423              		.loc 1 892 0
 1424 0010 C360     		str	r3, [r0, #12]
 893:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 1425              		.loc 1 893 0
 1426 0012 0361     		str	r3, [r0, #16]
 894:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1427              		.loc 1 894 0
 1428 0014 0C22     		movs	r2, #12
 1429 0016 4261     		str	r2, [r0, #20]
 895:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1430              		.loc 1 895 0
 1431 0018 8361     		str	r3, [r0, #24]
 896:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 1432              		.loc 1 896 0
 1433 001a C361     		str	r3, [r0, #28]
 897:Src/main.c    ****     {
 1434              		.loc 1 897 0
ARM GAS  /tmp/ccFeGOGr.s 			page 51


 1435 001c FFF7FEFF 		bl	HAL_UART_Init
 1436              	.LVL141:
 1437 0020 00B9     		cbnz	r0, .L86
 1438 0022 08BD     		pop	{r3, pc}
 1439              	.L86:
 899:Src/main.c    ****     }
 1440              		.loc 1 899 0
 1441 0024 FFF7FEFF 		bl	Error_Handler
 1442              	.LVL142:
 1443              	.L88:
 1444              		.align	2
 1445              	.L87:
 1446 0028 00000000 		.word	huart2
 1447 002c 00440040 		.word	1073759232
 1448 0030 10552200 		.word	2250000
 1449              		.cfi_endproc
 1450              	.LFE147:
 1452              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1453              		.align	1
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu fpv4-sp-d16
 1459              	MX_CAN1_Init:
 1460              	.LFB136:
 458:Src/main.c    **** 
 1461              		.loc 1 458 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465 0000 08B5     		push	{r3, lr}
 1466              	.LCFI17:
 1467              		.cfi_def_cfa_offset 8
 1468              		.cfi_offset 3, -8
 1469              		.cfi_offset 14, -4
 467:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 1470              		.loc 1 467 0
 1471 0002 0D48     		ldr	r0, .L93
 1472 0004 0D4B     		ldr	r3, .L93+4
 1473 0006 0360     		str	r3, [r0]
 468:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 1474              		.loc 1 468 0
 1475 0008 0223     		movs	r3, #2
 1476 000a 4360     		str	r3, [r0, #4]
 469:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1477              		.loc 1 469 0
 1478 000c 0023     		movs	r3, #0
 1479 000e 8360     		str	r3, [r0, #8]
 470:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 1480              		.loc 1 470 0
 1481 0010 C360     		str	r3, [r0, #12]
 471:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 1482              		.loc 1 471 0
 1483 0012 4FF43022 		mov	r2, #720896
 1484 0016 0261     		str	r2, [r0, #16]
 472:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 1485              		.loc 1 472 0
ARM GAS  /tmp/ccFeGOGr.s 			page 52


 1486 0018 4FF48002 		mov	r2, #4194304
 1487 001c 4261     		str	r2, [r0, #20]
 473:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 1488              		.loc 1 473 0
 1489 001e 0376     		strb	r3, [r0, #24]
 474:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 1490              		.loc 1 474 0
 1491 0020 4376     		strb	r3, [r0, #25]
 475:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 1492              		.loc 1 475 0
 1493 0022 0122     		movs	r2, #1
 1494 0024 8276     		strb	r2, [r0, #26]
 476:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 1495              		.loc 1 476 0
 1496 0026 C376     		strb	r3, [r0, #27]
 477:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 1497              		.loc 1 477 0
 1498 0028 0377     		strb	r3, [r0, #28]
 478:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1499              		.loc 1 478 0
 1500 002a 4377     		strb	r3, [r0, #29]
 479:Src/main.c    ****     {
 1501              		.loc 1 479 0
 1502 002c FFF7FEFF 		bl	HAL_CAN_Init
 1503              	.LVL143:
 1504 0030 00B9     		cbnz	r0, .L92
 1505 0032 08BD     		pop	{r3, pc}
 1506              	.L92:
 481:Src/main.c    ****     }
 1507              		.loc 1 481 0
 1508 0034 FFF7FEFF 		bl	Error_Handler
 1509              	.LVL144:
 1510              	.L94:
 1511              		.align	2
 1512              	.L93:
 1513 0038 00000000 		.word	hcan1
 1514 003c 00640040 		.word	1073767424
 1515              		.cfi_endproc
 1516              	.LFE136:
 1518              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1519              		.align	1
 1520              		.syntax unified
 1521              		.thumb
 1522              		.thumb_func
 1523              		.fpu fpv4-sp-d16
 1525              	MX_SPI1_Init:
 1526              	.LFB137:
 494:Src/main.c    **** 
 1527              		.loc 1 494 0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531 0000 08B5     		push	{r3, lr}
 1532              	.LCFI18:
 1533              		.cfi_def_cfa_offset 8
 1534              		.cfi_offset 3, -8
 1535              		.cfi_offset 14, -4
ARM GAS  /tmp/ccFeGOGr.s 			page 53


 504:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 1536              		.loc 1 504 0
 1537 0002 0D48     		ldr	r0, .L99
 1538 0004 0D4B     		ldr	r3, .L99+4
 1539 0006 0360     		str	r3, [r0]
 505:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1540              		.loc 1 505 0
 1541 0008 4FF48273 		mov	r3, #260
 1542 000c 4360     		str	r3, [r0, #4]
 506:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1543              		.loc 1 506 0
 1544 000e 0023     		movs	r3, #0
 1545 0010 8360     		str	r3, [r0, #8]
 507:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1546              		.loc 1 507 0
 1547 0012 C360     		str	r3, [r0, #12]
 508:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1548              		.loc 1 508 0
 1549 0014 0361     		str	r3, [r0, #16]
 509:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 1550              		.loc 1 509 0
 1551 0016 4361     		str	r3, [r0, #20]
 510:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1552              		.loc 1 510 0
 1553 0018 4FF40072 		mov	r2, #512
 1554 001c 8261     		str	r2, [r0, #24]
 511:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1555              		.loc 1 511 0
 1556 001e C361     		str	r3, [r0, #28]
 512:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1557              		.loc 1 512 0
 1558 0020 0362     		str	r3, [r0, #32]
 513:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1559              		.loc 1 513 0
 1560 0022 4362     		str	r3, [r0, #36]
 514:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 1561              		.loc 1 514 0
 1562 0024 8362     		str	r3, [r0, #40]
 515:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1563              		.loc 1 515 0
 1564 0026 0A23     		movs	r3, #10
 1565 0028 C362     		str	r3, [r0, #44]
 516:Src/main.c    ****     {
 1566              		.loc 1 516 0
 1567 002a FFF7FEFF 		bl	HAL_SPI_Init
 1568              	.LVL145:
 1569 002e 00B9     		cbnz	r0, .L98
 1570 0030 08BD     		pop	{r3, pc}
 1571              	.L98:
 518:Src/main.c    ****     }
 1572              		.loc 1 518 0
 1573 0032 FFF7FEFF 		bl	Error_Handler
 1574              	.LVL146:
 1575              	.L100:
 1576 0036 00BF     		.align	2
 1577              	.L99:
 1578 0038 00000000 		.word	hspi1
ARM GAS  /tmp/ccFeGOGr.s 			page 54


 1579 003c 00300140 		.word	1073819648
 1580              		.cfi_endproc
 1581              	.LFE137:
 1583              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1584              		.align	1
 1585              		.syntax unified
 1586              		.thumb
 1587              		.thumb_func
 1588              		.fpu fpv4-sp-d16
 1590              	MX_ADC1_Init:
 1591              	.LFB135:
 409:Src/main.c    **** 
 1592              		.loc 1 409 0
 1593              		.cfi_startproc
 1594              		@ args = 0, pretend = 0, frame = 16
 1595              		@ frame_needed = 0, uses_anonymous_args = 0
 1596 0000 00B5     		push	{lr}
 1597              	.LCFI19:
 1598              		.cfi_def_cfa_offset 4
 1599              		.cfi_offset 14, -4
 1600 0002 85B0     		sub	sp, sp, #20
 1601              	.LCFI20:
 1602              		.cfi_def_cfa_offset 24
 415:Src/main.c    **** 
 1603              		.loc 1 415 0
 1604 0004 0023     		movs	r3, #0
 1605 0006 0093     		str	r3, [sp]
 1606 0008 0193     		str	r3, [sp, #4]
 1607 000a 0293     		str	r3, [sp, #8]
 1608 000c 0393     		str	r3, [sp, #12]
 422:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1609              		.loc 1 422 0
 1610 000e 1348     		ldr	r0, .L107
 1611 0010 134A     		ldr	r2, .L107+4
 1612 0012 0260     		str	r2, [r0]
 423:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1613              		.loc 1 423 0
 1614 0014 4360     		str	r3, [r0, #4]
 424:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 1615              		.loc 1 424 0
 1616 0016 8360     		str	r3, [r0, #8]
 425:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 1617              		.loc 1 425 0
 1618 0018 0122     		movs	r2, #1
 1619 001a 0261     		str	r2, [r0, #16]
 426:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 1620              		.loc 1 426 0
 1621 001c 0276     		strb	r2, [r0, #24]
 427:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1622              		.loc 1 427 0
 1623 001e 80F82030 		strb	r3, [r0, #32]
 428:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1624              		.loc 1 428 0
 1625 0022 C362     		str	r3, [r0, #44]
 429:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1626              		.loc 1 429 0
 1627 0024 0F49     		ldr	r1, .L107+8
ARM GAS  /tmp/ccFeGOGr.s 			page 55


 1628 0026 8162     		str	r1, [r0, #40]
 430:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 1629              		.loc 1 430 0
 1630 0028 C360     		str	r3, [r0, #12]
 431:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 1631              		.loc 1 431 0
 1632 002a C261     		str	r2, [r0, #28]
 432:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1633              		.loc 1 432 0
 1634 002c 80F83020 		strb	r2, [r0, #48]
 433:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1635              		.loc 1 433 0
 1636 0030 4261     		str	r2, [r0, #20]
 434:Src/main.c    ****     {
 1637              		.loc 1 434 0
 1638 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1639              	.LVL147:
 1640 0036 68B9     		cbnz	r0, .L105
 440:Src/main.c    ****     sConfig.Rank = 1;
 1641              		.loc 1 440 0
 1642 0038 0823     		movs	r3, #8
 1643 003a 0093     		str	r3, [sp]
 441:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1644              		.loc 1 441 0
 1645 003c 0123     		movs	r3, #1
 1646 003e 0193     		str	r3, [sp, #4]
 442:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1647              		.loc 1 442 0
 1648 0040 0023     		movs	r3, #0
 1649 0042 0293     		str	r3, [sp, #8]
 443:Src/main.c    ****     {
 1650              		.loc 1 443 0
 1651 0044 6946     		mov	r1, sp
 1652 0046 0548     		ldr	r0, .L107
 1653 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1654              	.LVL148:
 1655 004c 20B9     		cbnz	r0, .L106
 450:Src/main.c    **** 
 1656              		.loc 1 450 0
 1657 004e 05B0     		add	sp, sp, #20
 1658              	.LCFI21:
 1659              		.cfi_remember_state
 1660              		.cfi_def_cfa_offset 4
 1661              		@ sp needed
 1662 0050 5DF804FB 		ldr	pc, [sp], #4
 1663              	.L105:
 1664              	.LCFI22:
 1665              		.cfi_restore_state
 436:Src/main.c    ****     }
 1666              		.loc 1 436 0
 1667 0054 FFF7FEFF 		bl	Error_Handler
 1668              	.LVL149:
 1669              	.L106:
 445:Src/main.c    ****     }
 1670              		.loc 1 445 0
 1671 0058 FFF7FEFF 		bl	Error_Handler
 1672              	.LVL150:
ARM GAS  /tmp/ccFeGOGr.s 			page 56


 1673              	.L108:
 1674              		.align	2
 1675              	.L107:
 1676 005c 00000000 		.word	hadc1
 1677 0060 00200140 		.word	1073815552
 1678 0064 0100000F 		.word	251658241
 1679              		.cfi_endproc
 1680              	.LFE135:
 1682              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1683              		.align	1
 1684              		.syntax unified
 1685              		.thumb
 1686              		.thumb_func
 1687              		.fpu fpv4-sp-d16
 1689              	MX_USART1_UART_Init:
 1690              	.LFB146:
 848:Src/main.c    **** 
 1691              		.loc 1 848 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 1695 0000 08B5     		push	{r3, lr}
 1696              	.LCFI23:
 1697              		.cfi_def_cfa_offset 8
 1698              		.cfi_offset 3, -8
 1699              		.cfi_offset 14, -4
 857:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 1700              		.loc 1 857 0
 1701 0002 0A48     		ldr	r0, .L113
 1702 0004 0A4B     		ldr	r3, .L113+4
 1703 0006 0360     		str	r3, [r0]
 858:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1704              		.loc 1 858 0
 1705 0008 4FF4E133 		mov	r3, #115200
 1706 000c 4360     		str	r3, [r0, #4]
 859:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 1707              		.loc 1 859 0
 1708 000e 0023     		movs	r3, #0
 1709 0010 8360     		str	r3, [r0, #8]
 860:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 1710              		.loc 1 860 0
 1711 0012 C360     		str	r3, [r0, #12]
 861:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 1712              		.loc 1 861 0
 1713 0014 0361     		str	r3, [r0, #16]
 862:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1714              		.loc 1 862 0
 1715 0016 0C22     		movs	r2, #12
 1716 0018 4261     		str	r2, [r0, #20]
 863:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1717              		.loc 1 863 0
 1718 001a 8361     		str	r3, [r0, #24]
 864:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 1719              		.loc 1 864 0
 1720 001c C361     		str	r3, [r0, #28]
 865:Src/main.c    ****     {
 1721              		.loc 1 865 0
ARM GAS  /tmp/ccFeGOGr.s 			page 57


 1722 001e FFF7FEFF 		bl	HAL_UART_Init
 1723              	.LVL151:
 1724 0022 00B9     		cbnz	r0, .L112
 1725 0024 08BD     		pop	{r3, pc}
 1726              	.L112:
 867:Src/main.c    ****     }
 1727              		.loc 1 867 0
 1728 0026 FFF7FEFF 		bl	Error_Handler
 1729              	.LVL152:
 1730              	.L114:
 1731 002a 00BF     		.align	2
 1732              	.L113:
 1733 002c 00000000 		.word	huart1
 1734 0030 00100140 		.word	1073811456
 1735              		.cfi_endproc
 1736              	.LFE146:
 1738              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1739              		.align	1
 1740              		.syntax unified
 1741              		.thumb
 1742              		.thumb_func
 1743              		.fpu fpv4-sp-d16
 1745              	MX_TIM2_Init:
 1746              	.LFB138:
 531:Src/main.c    **** 
 1747              		.loc 1 531 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 48
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751 0000 00B5     		push	{lr}
 1752              	.LCFI24:
 1753              		.cfi_def_cfa_offset 4
 1754              		.cfi_offset 14, -4
 1755 0002 8DB0     		sub	sp, sp, #52
 1756              	.LCFI25:
 1757              		.cfi_def_cfa_offset 56
 537:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 1758              		.loc 1 537 0
 1759 0004 0023     		movs	r3, #0
 1760 0006 0893     		str	r3, [sp, #32]
 1761 0008 0993     		str	r3, [sp, #36]
 1762 000a 0A93     		str	r3, [sp, #40]
 1763 000c 0B93     		str	r3, [sp, #44]
 538:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1764              		.loc 1 538 0
 1765 000e 0393     		str	r3, [sp, #12]
 1766 0010 0493     		str	r3, [sp, #16]
 1767 0012 0593     		str	r3, [sp, #20]
 1768 0014 0693     		str	r3, [sp, #24]
 1769 0016 0793     		str	r3, [sp, #28]
 539:Src/main.c    **** 
 1770              		.loc 1 539 0
 1771 0018 0193     		str	r3, [sp, #4]
 1772 001a 0293     		str	r3, [sp, #8]
 544:Src/main.c    ****     htim2.Init.Prescaler = 36;
 1773              		.loc 1 544 0
 1774 001c 1948     		ldr	r0, .L125
ARM GAS  /tmp/ccFeGOGr.s 			page 58


 1775 001e 4FF08042 		mov	r2, #1073741824
 1776 0022 0260     		str	r2, [r0]
 545:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1777              		.loc 1 545 0
 1778 0024 2422     		movs	r2, #36
 1779 0026 4260     		str	r2, [r0, #4]
 546:Src/main.c    ****     htim2.Init.Period = 1000;
 1780              		.loc 1 546 0
 1781 0028 8360     		str	r3, [r0, #8]
 547:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1782              		.loc 1 547 0
 1783 002a 4FF47A72 		mov	r2, #1000
 1784 002e C260     		str	r2, [r0, #12]
 548:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1785              		.loc 1 548 0
 1786 0030 0361     		str	r3, [r0, #16]
 549:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1787              		.loc 1 549 0
 1788 0032 8361     		str	r3, [r0, #24]
 550:Src/main.c    ****     {
 1789              		.loc 1 550 0
 1790 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1791              	.LVL153:
 1792 0038 D8B9     		cbnz	r0, .L121
 554:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1793              		.loc 1 554 0
 1794 003a 0CA9     		add	r1, sp, #48
 1795 003c 4FF48053 		mov	r3, #4096
 1796 0040 41F8103D 		str	r3, [r1, #-16]!
 555:Src/main.c    ****     {
 1797              		.loc 1 555 0
 1798 0044 0F48     		ldr	r0, .L125
 1799 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1800              	.LVL154:
 1801 004a A0B9     		cbnz	r0, .L122
 559:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 1802              		.loc 1 559 0
 1803 004c 0023     		movs	r3, #0
 1804 004e 0393     		str	r3, [sp, #12]
 560:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 1805              		.loc 1 560 0
 1806 0050 0493     		str	r3, [sp, #16]
 561:Src/main.c    ****     {
 1807              		.loc 1 561 0
 1808 0052 03A9     		add	r1, sp, #12
 1809 0054 0B48     		ldr	r0, .L125
 1810 0056 FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 1811              	.LVL155:
 1812 005a 70B9     		cbnz	r0, .L123
 565:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1813              		.loc 1 565 0
 1814 005c 0023     		movs	r3, #0
 1815 005e 0193     		str	r3, [sp, #4]
 566:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1816              		.loc 1 566 0
 1817 0060 0293     		str	r3, [sp, #8]
 567:Src/main.c    ****     {
ARM GAS  /tmp/ccFeGOGr.s 			page 59


 1818              		.loc 1 567 0
 1819 0062 01A9     		add	r1, sp, #4
 1820 0064 0748     		ldr	r0, .L125
 1821 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1822              	.LVL156:
 1823 006a 40B9     		cbnz	r0, .L124
 574:Src/main.c    **** 
 1824              		.loc 1 574 0
 1825 006c 0DB0     		add	sp, sp, #52
 1826              	.LCFI26:
 1827              		.cfi_remember_state
 1828              		.cfi_def_cfa_offset 4
 1829              		@ sp needed
 1830 006e 5DF804FB 		ldr	pc, [sp], #4
 1831              	.L121:
 1832              	.LCFI27:
 1833              		.cfi_restore_state
 552:Src/main.c    ****     }
 1834              		.loc 1 552 0
 1835 0072 FFF7FEFF 		bl	Error_Handler
 1836              	.LVL157:
 1837              	.L122:
 557:Src/main.c    ****     }
 1838              		.loc 1 557 0
 1839 0076 FFF7FEFF 		bl	Error_Handler
 1840              	.LVL158:
 1841              	.L123:
 563:Src/main.c    ****     }
 1842              		.loc 1 563 0
 1843 007a FFF7FEFF 		bl	Error_Handler
 1844              	.LVL159:
 1845              	.L124:
 569:Src/main.c    ****     }
 1846              		.loc 1 569 0
 1847 007e FFF7FEFF 		bl	Error_Handler
 1848              	.LVL160:
 1849              	.L126:
 1850 0082 00BF     		.align	2
 1851              	.L125:
 1852 0084 00000000 		.word	htim2
 1853              		.cfi_endproc
 1854              	.LFE138:
 1856              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1857              		.align	1
 1858              		.syntax unified
 1859              		.thumb
 1860              		.thumb_func
 1861              		.fpu fpv4-sp-d16
 1863              	MX_TIM3_Init:
 1864              	.LFB139:
 582:Src/main.c    **** 
 1865              		.loc 1 582 0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 24
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 1869 0000 00B5     		push	{lr}
 1870              	.LCFI28:
ARM GAS  /tmp/ccFeGOGr.s 			page 60


 1871              		.cfi_def_cfa_offset 4
 1872              		.cfi_offset 14, -4
 1873 0002 87B0     		sub	sp, sp, #28
 1874              	.LCFI29:
 1875              		.cfi_def_cfa_offset 32
 588:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1876              		.loc 1 588 0
 1877 0004 0023     		movs	r3, #0
 1878 0006 0293     		str	r3, [sp, #8]
 1879 0008 0393     		str	r3, [sp, #12]
 1880 000a 0493     		str	r3, [sp, #16]
 1881 000c 0593     		str	r3, [sp, #20]
 589:Src/main.c    **** 
 1882              		.loc 1 589 0
 1883 000e 0093     		str	r3, [sp]
 1884 0010 0193     		str	r3, [sp, #4]
 594:Src/main.c    ****     htim3.Init.Prescaler = 18;
 1885              		.loc 1 594 0
 1886 0012 1448     		ldr	r0, .L135
 1887 0014 144A     		ldr	r2, .L135+4
 1888 0016 0260     		str	r2, [r0]
 595:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1889              		.loc 1 595 0
 1890 0018 1222     		movs	r2, #18
 1891 001a 4260     		str	r2, [r0, #4]
 596:Src/main.c    ****     htim3.Init.Period = 65500;
 1892              		.loc 1 596 0
 1893 001c 8360     		str	r3, [r0, #8]
 597:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1894              		.loc 1 597 0
 1895 001e 4FF6DC72 		movw	r2, #65500
 1896 0022 C260     		str	r2, [r0, #12]
 598:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1897              		.loc 1 598 0
 1898 0024 0361     		str	r3, [r0, #16]
 599:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1899              		.loc 1 599 0
 1900 0026 8361     		str	r3, [r0, #24]
 600:Src/main.c    ****     {
 1901              		.loc 1 600 0
 1902 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1903              	.LVL161:
 1904 002c 98B9     		cbnz	r0, .L132
 604:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1905              		.loc 1 604 0
 1906 002e 06A9     		add	r1, sp, #24
 1907 0030 4FF48053 		mov	r3, #4096
 1908 0034 41F8103D 		str	r3, [r1, #-16]!
 605:Src/main.c    ****     {
 1909              		.loc 1 605 0
 1910 0038 0A48     		ldr	r0, .L135
 1911 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1912              	.LVL162:
 1913 003e 60B9     		cbnz	r0, .L133
 609:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1914              		.loc 1 609 0
 1915 0040 0023     		movs	r3, #0
ARM GAS  /tmp/ccFeGOGr.s 			page 61


 1916 0042 0093     		str	r3, [sp]
 610:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1917              		.loc 1 610 0
 1918 0044 0193     		str	r3, [sp, #4]
 611:Src/main.c    ****     {
 1919              		.loc 1 611 0
 1920 0046 6946     		mov	r1, sp
 1921 0048 0648     		ldr	r0, .L135
 1922 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1923              	.LVL163:
 1924 004e 30B9     		cbnz	r0, .L134
 618:Src/main.c    **** 
 1925              		.loc 1 618 0
 1926 0050 07B0     		add	sp, sp, #28
 1927              	.LCFI30:
 1928              		.cfi_remember_state
 1929              		.cfi_def_cfa_offset 4
 1930              		@ sp needed
 1931 0052 5DF804FB 		ldr	pc, [sp], #4
 1932              	.L132:
 1933              	.LCFI31:
 1934              		.cfi_restore_state
 602:Src/main.c    ****     }
 1935              		.loc 1 602 0
 1936 0056 FFF7FEFF 		bl	Error_Handler
 1937              	.LVL164:
 1938              	.L133:
 607:Src/main.c    ****     }
 1939              		.loc 1 607 0
 1940 005a FFF7FEFF 		bl	Error_Handler
 1941              	.LVL165:
 1942              	.L134:
 613:Src/main.c    ****     }
 1943              		.loc 1 613 0
 1944 005e FFF7FEFF 		bl	Error_Handler
 1945              	.LVL166:
 1946              	.L136:
 1947 0062 00BF     		.align	2
 1948              	.L135:
 1949 0064 00000000 		.word	htim3
 1950 0068 00040040 		.word	1073742848
 1951              		.cfi_endproc
 1952              	.LFE139:
 1954              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1955              		.align	1
 1956              		.syntax unified
 1957              		.thumb
 1958              		.thumb_func
 1959              		.fpu fpv4-sp-d16
 1961              	MX_TIM4_Init:
 1962              	.LFB140:
 626:Src/main.c    **** 
 1963              		.loc 1 626 0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 24
 1966              		@ frame_needed = 0, uses_anonymous_args = 0
 1967 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccFeGOGr.s 			page 62


 1968              	.LCFI32:
 1969              		.cfi_def_cfa_offset 4
 1970              		.cfi_offset 14, -4
 1971 0002 87B0     		sub	sp, sp, #28
 1972              	.LCFI33:
 1973              		.cfi_def_cfa_offset 32
 632:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1974              		.loc 1 632 0
 1975 0004 0023     		movs	r3, #0
 1976 0006 0293     		str	r3, [sp, #8]
 1977 0008 0393     		str	r3, [sp, #12]
 1978 000a 0493     		str	r3, [sp, #16]
 1979 000c 0593     		str	r3, [sp, #20]
 633:Src/main.c    **** 
 1980              		.loc 1 633 0
 1981 000e 0093     		str	r3, [sp]
 1982 0010 0193     		str	r3, [sp, #4]
 638:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 1983              		.loc 1 638 0
 1984 0012 1448     		ldr	r0, .L145
 1985 0014 144A     		ldr	r2, .L145+4
 1986 0016 0260     		str	r2, [r0]
 639:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1987              		.loc 1 639 0
 1988 0018 4FF46162 		mov	r2, #3600
 1989 001c 4260     		str	r2, [r0, #4]
 640:Src/main.c    ****     htim4.Init.Period = 2000;
 1990              		.loc 1 640 0
 1991 001e 8360     		str	r3, [r0, #8]
 641:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1992              		.loc 1 641 0
 1993 0020 4FF4FA62 		mov	r2, #2000
 1994 0024 C260     		str	r2, [r0, #12]
 642:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1995              		.loc 1 642 0
 1996 0026 0361     		str	r3, [r0, #16]
 643:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 1997              		.loc 1 643 0
 1998 0028 8361     		str	r3, [r0, #24]
 644:Src/main.c    ****     {
 1999              		.loc 1 644 0
 2000 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2001              	.LVL167:
 2002 002e 98B9     		cbnz	r0, .L142
 648:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2003              		.loc 1 648 0
 2004 0030 06A9     		add	r1, sp, #24
 2005 0032 4FF48053 		mov	r3, #4096
 2006 0036 41F8103D 		str	r3, [r1, #-16]!
 649:Src/main.c    ****     {
 2007              		.loc 1 649 0
 2008 003a 0A48     		ldr	r0, .L145
 2009 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2010              	.LVL168:
 2011 0040 60B9     		cbnz	r0, .L143
 653:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2012              		.loc 1 653 0
ARM GAS  /tmp/ccFeGOGr.s 			page 63


 2013 0042 0023     		movs	r3, #0
 2014 0044 0093     		str	r3, [sp]
 654:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2015              		.loc 1 654 0
 2016 0046 0193     		str	r3, [sp, #4]
 655:Src/main.c    ****     {
 2017              		.loc 1 655 0
 2018 0048 6946     		mov	r1, sp
 2019 004a 0648     		ldr	r0, .L145
 2020 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2021              	.LVL169:
 2022 0050 30B9     		cbnz	r0, .L144
 662:Src/main.c    **** 
 2023              		.loc 1 662 0
 2024 0052 07B0     		add	sp, sp, #28
 2025              	.LCFI34:
 2026              		.cfi_remember_state
 2027              		.cfi_def_cfa_offset 4
 2028              		@ sp needed
 2029 0054 5DF804FB 		ldr	pc, [sp], #4
 2030              	.L142:
 2031              	.LCFI35:
 2032              		.cfi_restore_state
 646:Src/main.c    ****     }
 2033              		.loc 1 646 0
 2034 0058 FFF7FEFF 		bl	Error_Handler
 2035              	.LVL170:
 2036              	.L143:
 651:Src/main.c    ****     }
 2037              		.loc 1 651 0
 2038 005c FFF7FEFF 		bl	Error_Handler
 2039              	.LVL171:
 2040              	.L144:
 657:Src/main.c    ****     }
 2041              		.loc 1 657 0
 2042 0060 FFF7FEFF 		bl	Error_Handler
 2043              	.LVL172:
 2044              	.L146:
 2045              		.align	2
 2046              	.L145:
 2047 0064 00000000 		.word	htim4
 2048 0068 00080040 		.word	1073743872
 2049              		.cfi_endproc
 2050              	.LFE140:
 2052              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2053              		.align	1
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu fpv4-sp-d16
 2059              	MX_TIM5_Init:
 2060              	.LFB141:
 670:Src/main.c    **** 
 2061              		.loc 1 670 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 24
 2064              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccFeGOGr.s 			page 64


 2065 0000 00B5     		push	{lr}
 2066              	.LCFI36:
 2067              		.cfi_def_cfa_offset 4
 2068              		.cfi_offset 14, -4
 2069 0002 87B0     		sub	sp, sp, #28
 2070              	.LCFI37:
 2071              		.cfi_def_cfa_offset 32
 676:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2072              		.loc 1 676 0
 2073 0004 0023     		movs	r3, #0
 2074 0006 0293     		str	r3, [sp, #8]
 2075 0008 0393     		str	r3, [sp, #12]
 2076 000a 0493     		str	r3, [sp, #16]
 2077 000c 0593     		str	r3, [sp, #20]
 677:Src/main.c    **** 
 2078              		.loc 1 677 0
 2079 000e 0093     		str	r3, [sp]
 2080 0010 0193     		str	r3, [sp, #4]
 682:Src/main.c    ****     htim5.Init.Prescaler = 36;
 2081              		.loc 1 682 0
 2082 0012 1448     		ldr	r0, .L155
 2083 0014 144A     		ldr	r2, .L155+4
 2084 0016 0260     		str	r2, [r0]
 683:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2085              		.loc 1 683 0
 2086 0018 2422     		movs	r2, #36
 2087 001a 4260     		str	r2, [r0, #4]
 684:Src/main.c    ****     htim5.Init.Period = 2000;
 2088              		.loc 1 684 0
 2089 001c 8360     		str	r3, [r0, #8]
 685:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2090              		.loc 1 685 0
 2091 001e 4FF4FA62 		mov	r2, #2000
 2092 0022 C260     		str	r2, [r0, #12]
 686:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2093              		.loc 1 686 0
 2094 0024 0361     		str	r3, [r0, #16]
 687:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2095              		.loc 1 687 0
 2096 0026 8361     		str	r3, [r0, #24]
 688:Src/main.c    ****     {
 2097              		.loc 1 688 0
 2098 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2099              	.LVL173:
 2100 002c 98B9     		cbnz	r0, .L152
 692:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2101              		.loc 1 692 0
 2102 002e 06A9     		add	r1, sp, #24
 2103 0030 4FF48053 		mov	r3, #4096
 2104 0034 41F8103D 		str	r3, [r1, #-16]!
 693:Src/main.c    ****     {
 2105              		.loc 1 693 0
 2106 0038 0A48     		ldr	r0, .L155
 2107 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2108              	.LVL174:
 2109 003e 60B9     		cbnz	r0, .L153
 697:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccFeGOGr.s 			page 65


 2110              		.loc 1 697 0
 2111 0040 0023     		movs	r3, #0
 2112 0042 0093     		str	r3, [sp]
 698:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2113              		.loc 1 698 0
 2114 0044 0193     		str	r3, [sp, #4]
 699:Src/main.c    ****     {
 2115              		.loc 1 699 0
 2116 0046 6946     		mov	r1, sp
 2117 0048 0648     		ldr	r0, .L155
 2118 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2119              	.LVL175:
 2120 004e 30B9     		cbnz	r0, .L154
 706:Src/main.c    **** 
 2121              		.loc 1 706 0
 2122 0050 07B0     		add	sp, sp, #28
 2123              	.LCFI38:
 2124              		.cfi_remember_state
 2125              		.cfi_def_cfa_offset 4
 2126              		@ sp needed
 2127 0052 5DF804FB 		ldr	pc, [sp], #4
 2128              	.L152:
 2129              	.LCFI39:
 2130              		.cfi_restore_state
 690:Src/main.c    ****     }
 2131              		.loc 1 690 0
 2132 0056 FFF7FEFF 		bl	Error_Handler
 2133              	.LVL176:
 2134              	.L153:
 695:Src/main.c    ****     }
 2135              		.loc 1 695 0
 2136 005a FFF7FEFF 		bl	Error_Handler
 2137              	.LVL177:
 2138              	.L154:
 701:Src/main.c    ****     }
 2139              		.loc 1 701 0
 2140 005e FFF7FEFF 		bl	Error_Handler
 2141              	.LVL178:
 2142              	.L156:
 2143 0062 00BF     		.align	2
 2144              	.L155:
 2145 0064 00000000 		.word	htim5
 2146 0068 000C0040 		.word	1073744896
 2147              		.cfi_endproc
 2148              	.LFE141:
 2150              		.section	.text.MX_TIM6_Init,"ax",%progbits
 2151              		.align	1
 2152              		.syntax unified
 2153              		.thumb
 2154              		.thumb_func
 2155              		.fpu fpv4-sp-d16
 2157              	MX_TIM6_Init:
 2158              	.LFB142:
 714:Src/main.c    **** 
 2159              		.loc 1 714 0
 2160              		.cfi_startproc
 2161              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccFeGOGr.s 			page 66


 2162              		@ frame_needed = 0, uses_anonymous_args = 0
 2163 0000 00B5     		push	{lr}
 2164              	.LCFI40:
 2165              		.cfi_def_cfa_offset 4
 2166              		.cfi_offset 14, -4
 2167 0002 83B0     		sub	sp, sp, #12
 2168              	.LCFI41:
 2169              		.cfi_def_cfa_offset 16
 720:Src/main.c    **** 
 2170              		.loc 1 720 0
 2171 0004 0023     		movs	r3, #0
 2172 0006 0093     		str	r3, [sp]
 2173 0008 0193     		str	r3, [sp, #4]
 725:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 2174              		.loc 1 725 0
 2175 000a 0E48     		ldr	r0, .L163
 2176 000c 0E4A     		ldr	r2, .L163+4
 2177 000e 0260     		str	r2, [r0]
 726:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2178              		.loc 1 726 0
 2179 0010 4FF46162 		mov	r2, #3600
 2180 0014 4260     		str	r2, [r0, #4]
 727:Src/main.c    ****     htim6.Init.Period = 2000;
 2181              		.loc 1 727 0
 2182 0016 8360     		str	r3, [r0, #8]
 728:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2183              		.loc 1 728 0
 2184 0018 4FF4FA62 		mov	r2, #2000
 2185 001c C260     		str	r2, [r0, #12]
 729:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2186              		.loc 1 729 0
 2187 001e 8361     		str	r3, [r0, #24]
 730:Src/main.c    ****     {
 2188              		.loc 1 730 0
 2189 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2190              	.LVL179:
 2191 0024 50B9     		cbnz	r0, .L161
 734:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2192              		.loc 1 734 0
 2193 0026 0023     		movs	r3, #0
 2194 0028 0093     		str	r3, [sp]
 735:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2195              		.loc 1 735 0
 2196 002a 0193     		str	r3, [sp, #4]
 736:Src/main.c    ****     {
 2197              		.loc 1 736 0
 2198 002c 6946     		mov	r1, sp
 2199 002e 0548     		ldr	r0, .L163
 2200 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2201              	.LVL180:
 2202 0034 20B9     		cbnz	r0, .L162
 743:Src/main.c    **** 
 2203              		.loc 1 743 0
 2204 0036 03B0     		add	sp, sp, #12
 2205              	.LCFI42:
 2206              		.cfi_remember_state
 2207              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccFeGOGr.s 			page 67


 2208              		@ sp needed
 2209 0038 5DF804FB 		ldr	pc, [sp], #4
 2210              	.L161:
 2211              	.LCFI43:
 2212              		.cfi_restore_state
 732:Src/main.c    ****     }
 2213              		.loc 1 732 0
 2214 003c FFF7FEFF 		bl	Error_Handler
 2215              	.LVL181:
 2216              	.L162:
 738:Src/main.c    ****     }
 2217              		.loc 1 738 0
 2218 0040 FFF7FEFF 		bl	Error_Handler
 2219              	.LVL182:
 2220              	.L164:
 2221              		.align	2
 2222              	.L163:
 2223 0044 00000000 		.word	htim6
 2224 0048 00100040 		.word	1073745920
 2225              		.cfi_endproc
 2226              	.LFE142:
 2228              		.section	.text.MX_TIM7_Init,"ax",%progbits
 2229              		.align	1
 2230              		.syntax unified
 2231              		.thumb
 2232              		.thumb_func
 2233              		.fpu fpv4-sp-d16
 2235              	MX_TIM7_Init:
 2236              	.LFB143:
 751:Src/main.c    **** 
 2237              		.loc 1 751 0
 2238              		.cfi_startproc
 2239              		@ args = 0, pretend = 0, frame = 8
 2240              		@ frame_needed = 0, uses_anonymous_args = 0
 2241 0000 00B5     		push	{lr}
 2242              	.LCFI44:
 2243              		.cfi_def_cfa_offset 4
 2244              		.cfi_offset 14, -4
 2245 0002 83B0     		sub	sp, sp, #12
 2246              	.LCFI45:
 2247              		.cfi_def_cfa_offset 16
 757:Src/main.c    **** 
 2248              		.loc 1 757 0
 2249 0004 0023     		movs	r3, #0
 2250 0006 0093     		str	r3, [sp]
 2251 0008 0193     		str	r3, [sp, #4]
 762:Src/main.c    ****     htim7.Init.Prescaler = 36;
 2252              		.loc 1 762 0
 2253 000a 0E48     		ldr	r0, .L171
 2254 000c 0E4A     		ldr	r2, .L171+4
 2255 000e 0260     		str	r2, [r0]
 763:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 2256              		.loc 1 763 0
 2257 0010 2422     		movs	r2, #36
 2258 0012 4260     		str	r2, [r0, #4]
 764:Src/main.c    ****     htim7.Init.Period = 6000;
 2259              		.loc 1 764 0
ARM GAS  /tmp/ccFeGOGr.s 			page 68


 2260 0014 8360     		str	r3, [r0, #8]
 765:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2261              		.loc 1 765 0
 2262 0016 41F27072 		movw	r2, #6000
 2263 001a C260     		str	r2, [r0, #12]
 766:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 2264              		.loc 1 766 0
 2265 001c 8361     		str	r3, [r0, #24]
 767:Src/main.c    ****     {
 2266              		.loc 1 767 0
 2267 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2268              	.LVL183:
 2269 0022 50B9     		cbnz	r0, .L169
 771:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2270              		.loc 1 771 0
 2271 0024 0023     		movs	r3, #0
 2272 0026 0093     		str	r3, [sp]
 772:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 2273              		.loc 1 772 0
 2274 0028 0193     		str	r3, [sp, #4]
 773:Src/main.c    ****     {
 2275              		.loc 1 773 0
 2276 002a 6946     		mov	r1, sp
 2277 002c 0548     		ldr	r0, .L171
 2278 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2279              	.LVL184:
 2280 0032 20B9     		cbnz	r0, .L170
 780:Src/main.c    **** 
 2281              		.loc 1 780 0
 2282 0034 03B0     		add	sp, sp, #12
 2283              	.LCFI46:
 2284              		.cfi_remember_state
 2285              		.cfi_def_cfa_offset 4
 2286              		@ sp needed
 2287 0036 5DF804FB 		ldr	pc, [sp], #4
 2288              	.L169:
 2289              	.LCFI47:
 2290              		.cfi_restore_state
 769:Src/main.c    ****     }
 2291              		.loc 1 769 0
 2292 003a FFF7FEFF 		bl	Error_Handler
 2293              	.LVL185:
 2294              	.L170:
 775:Src/main.c    ****     }
 2295              		.loc 1 775 0
 2296 003e FFF7FEFF 		bl	Error_Handler
 2297              	.LVL186:
 2298              	.L172:
 2299 0042 00BF     		.align	2
 2300              	.L171:
 2301 0044 00000000 		.word	htim7
 2302 0048 00140040 		.word	1073746944
 2303              		.cfi_endproc
 2304              	.LFE143:
 2306              		.section	.text.MX_TIM10_Init,"ax",%progbits
 2307              		.align	1
 2308              		.syntax unified
ARM GAS  /tmp/ccFeGOGr.s 			page 69


 2309              		.thumb
 2310              		.thumb_func
 2311              		.fpu fpv4-sp-d16
 2313              	MX_TIM10_Init:
 2314              	.LFB144:
 788:Src/main.c    **** 
 2315              		.loc 1 788 0
 2316              		.cfi_startproc
 2317              		@ args = 0, pretend = 0, frame = 0
 2318              		@ frame_needed = 0, uses_anonymous_args = 0
 2319 0000 08B5     		push	{r3, lr}
 2320              	.LCFI48:
 2321              		.cfi_def_cfa_offset 8
 2322              		.cfi_offset 3, -8
 2323              		.cfi_offset 14, -4
 797:Src/main.c    ****     htim10.Init.Prescaler = 36;
 2324              		.loc 1 797 0
 2325 0002 0948     		ldr	r0, .L177
 2326 0004 094B     		ldr	r3, .L177+4
 2327 0006 0360     		str	r3, [r0]
 798:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 2328              		.loc 1 798 0
 2329 0008 2423     		movs	r3, #36
 2330 000a 4360     		str	r3, [r0, #4]
 799:Src/main.c    ****     htim10.Init.Period = 500;
 2331              		.loc 1 799 0
 2332 000c 0023     		movs	r3, #0
 2333 000e 8360     		str	r3, [r0, #8]
 800:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2334              		.loc 1 800 0
 2335 0010 4FF4FA72 		mov	r2, #500
 2336 0014 C260     		str	r2, [r0, #12]
 801:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2337              		.loc 1 801 0
 2338 0016 0361     		str	r3, [r0, #16]
 802:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 2339              		.loc 1 802 0
 2340 0018 8361     		str	r3, [r0, #24]
 803:Src/main.c    ****     {
 2341              		.loc 1 803 0
 2342 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2343              	.LVL187:
 2344 001e 00B9     		cbnz	r0, .L176
 2345 0020 08BD     		pop	{r3, pc}
 2346              	.L176:
 805:Src/main.c    ****     }
 2347              		.loc 1 805 0
 2348 0022 FFF7FEFF 		bl	Error_Handler
 2349              	.LVL188:
 2350              	.L178:
 2351 0026 00BF     		.align	2
 2352              	.L177:
 2353 0028 00000000 		.word	htim10
 2354 002c 00440140 		.word	1073824768
 2355              		.cfi_endproc
 2356              	.LFE144:
 2358              		.section	.text.MX_TIM11_Init,"ax",%progbits
ARM GAS  /tmp/ccFeGOGr.s 			page 70


 2359              		.align	1
 2360              		.syntax unified
 2361              		.thumb
 2362              		.thumb_func
 2363              		.fpu fpv4-sp-d16
 2365              	MX_TIM11_Init:
 2366              	.LFB145:
 818:Src/main.c    **** 
 2367              		.loc 1 818 0
 2368              		.cfi_startproc
 2369              		@ args = 0, pretend = 0, frame = 0
 2370              		@ frame_needed = 0, uses_anonymous_args = 0
 2371 0000 08B5     		push	{r3, lr}
 2372              	.LCFI49:
 2373              		.cfi_def_cfa_offset 8
 2374              		.cfi_offset 3, -8
 2375              		.cfi_offset 14, -4
 827:Src/main.c    ****     htim11.Init.Prescaler = 0;
 2376              		.loc 1 827 0
 2377 0002 0748     		ldr	r0, .L183
 2378 0004 074B     		ldr	r3, .L183+4
 2379 0006 0360     		str	r3, [r0]
 828:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 2380              		.loc 1 828 0
 2381 0008 0023     		movs	r3, #0
 2382 000a 4360     		str	r3, [r0, #4]
 829:Src/main.c    ****     htim11.Init.Period = 0;
 2383              		.loc 1 829 0
 2384 000c 8360     		str	r3, [r0, #8]
 830:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2385              		.loc 1 830 0
 2386 000e C360     		str	r3, [r0, #12]
 831:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2387              		.loc 1 831 0
 2388 0010 0361     		str	r3, [r0, #16]
 832:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 2389              		.loc 1 832 0
 2390 0012 8361     		str	r3, [r0, #24]
 833:Src/main.c    ****     {
 2391              		.loc 1 833 0
 2392 0014 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2393              	.LVL189:
 2394 0018 00B9     		cbnz	r0, .L182
 2395 001a 08BD     		pop	{r3, pc}
 2396              	.L182:
 835:Src/main.c    ****     }
 2397              		.loc 1 835 0
 2398 001c FFF7FEFF 		bl	Error_Handler
 2399              	.LVL190:
 2400              	.L184:
 2401              		.align	2
 2402              	.L183:
 2403 0020 00000000 		.word	htim11
 2404 0024 00480140 		.word	1073825792
 2405              		.cfi_endproc
 2406              	.LFE145:
 2408              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  /tmp/ccFeGOGr.s 			page 71


 2409              		.align	1
 2410              		.global	SystemClock_Config
 2411              		.syntax unified
 2412              		.thumb
 2413              		.thumb_func
 2414              		.fpu fpv4-sp-d16
 2416              	SystemClock_Config:
 2417              	.LFB133:
 325:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2418              		.loc 1 325 0
 2419              		.cfi_startproc
 2420              		@ args = 0, pretend = 0, frame = 80
 2421              		@ frame_needed = 0, uses_anonymous_args = 0
 2422 0000 00B5     		push	{lr}
 2423              	.LCFI50:
 2424              		.cfi_def_cfa_offset 4
 2425              		.cfi_offset 14, -4
 2426 0002 95B0     		sub	sp, sp, #84
 2427              	.LCFI51:
 2428              		.cfi_def_cfa_offset 88
 326:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2429              		.loc 1 326 0
 2430 0004 3422     		movs	r2, #52
 2431 0006 0021     		movs	r1, #0
 2432 0008 07A8     		add	r0, sp, #28
 2433 000a FFF7FEFF 		bl	memset
 2434              	.LVL191:
 327:Src/main.c    **** 
 2435              		.loc 1 327 0
 2436 000e 0023     		movs	r3, #0
 2437 0010 0293     		str	r3, [sp, #8]
 2438 0012 0393     		str	r3, [sp, #12]
 2439 0014 0493     		str	r3, [sp, #16]
 2440 0016 0593     		str	r3, [sp, #20]
 2441 0018 0693     		str	r3, [sp, #24]
 2442              	.LBB14:
 331:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2443              		.loc 1 331 0
 2444 001a 0093     		str	r3, [sp]
 2445 001c 204A     		ldr	r2, .L191
 2446 001e 116C     		ldr	r1, [r2, #64]
 2447 0020 41F08051 		orr	r1, r1, #268435456
 2448 0024 1164     		str	r1, [r2, #64]
 2449 0026 126C     		ldr	r2, [r2, #64]
 2450 0028 02F08052 		and	r2, r2, #268435456
 2451 002c 0092     		str	r2, [sp]
 2452 002e 009A     		ldr	r2, [sp]
 2453              	.LBE14:
 2454              	.LBB15:
 332:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 2455              		.loc 1 332 0
 2456 0030 0193     		str	r3, [sp, #4]
 2457 0032 1C4B     		ldr	r3, .L191+4
 2458 0034 1A68     		ldr	r2, [r3]
 2459 0036 42F44042 		orr	r2, r2, #49152
 2460 003a 1A60     		str	r2, [r3]
 2461 003c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccFeGOGr.s 			page 72


 2462 003e 03F44043 		and	r3, r3, #49152
 2463 0042 0193     		str	r3, [sp, #4]
 2464 0044 019B     		ldr	r3, [sp, #4]
 2465              	.LBE15:
 335:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 2466              		.loc 1 335 0
 2467 0046 0123     		movs	r3, #1
 2468 0048 0793     		str	r3, [sp, #28]
 336:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2469              		.loc 1 336 0
 2470 004a 4FF4A023 		mov	r3, #327680
 2471 004e 0893     		str	r3, [sp, #32]
 337:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2472              		.loc 1 337 0
 2473 0050 0223     		movs	r3, #2
 2474 0052 0D93     		str	r3, [sp, #52]
 338:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2475              		.loc 1 338 0
 2476 0054 4FF48002 		mov	r2, #4194304
 2477 0058 0E92     		str	r2, [sp, #56]
 339:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 2478              		.loc 1 339 0
 2479 005a 0822     		movs	r2, #8
 2480 005c 0F92     		str	r2, [sp, #60]
 340:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2481              		.loc 1 340 0
 2482 005e 4FF49072 		mov	r2, #288
 2483 0062 1092     		str	r2, [sp, #64]
 341:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 2484              		.loc 1 341 0
 2485 0064 1193     		str	r3, [sp, #68]
 342:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 2486              		.loc 1 342 0
 2487 0066 1293     		str	r3, [sp, #72]
 343:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2488              		.loc 1 343 0
 2489 0068 1393     		str	r3, [sp, #76]
 344:Src/main.c    ****     {
 2490              		.loc 1 344 0
 2491 006a 07A8     		add	r0, sp, #28
 2492 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2493              	.LVL192:
 2494 0070 88B9     		cbnz	r0, .L189
 350:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 2495              		.loc 1 350 0
 2496 0072 0F23     		movs	r3, #15
 2497 0074 0293     		str	r3, [sp, #8]
 351:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2498              		.loc 1 351 0
 2499 0076 0223     		movs	r3, #2
 2500 0078 0393     		str	r3, [sp, #12]
 352:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 2501              		.loc 1 352 0
 2502 007a 0023     		movs	r3, #0
 2503 007c 0493     		str	r3, [sp, #16]
 353:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 2504              		.loc 1 353 0
ARM GAS  /tmp/ccFeGOGr.s 			page 73


 2505 007e 4FF4A053 		mov	r3, #5120
 2506 0082 0593     		str	r3, [sp, #20]
 354:Src/main.c    **** 
 2507              		.loc 1 354 0
 2508 0084 0693     		str	r3, [sp, #24]
 356:Src/main.c    ****     {
 2509              		.loc 1 356 0
 2510 0086 0421     		movs	r1, #4
 2511 0088 02A8     		add	r0, sp, #8
 2512 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2513              	.LVL193:
 2514 008e 20B9     		cbnz	r0, .L190
 360:Src/main.c    **** 
 2515              		.loc 1 360 0
 2516 0090 15B0     		add	sp, sp, #84
 2517              	.LCFI52:
 2518              		.cfi_remember_state
 2519              		.cfi_def_cfa_offset 4
 2520              		@ sp needed
 2521 0092 5DF804FB 		ldr	pc, [sp], #4
 2522              	.L189:
 2523              	.LCFI53:
 2524              		.cfi_restore_state
 346:Src/main.c    ****     }
 2525              		.loc 1 346 0
 2526 0096 FFF7FEFF 		bl	Error_Handler
 2527              	.LVL194:
 2528              	.L190:
 358:Src/main.c    ****     }
 2529              		.loc 1 358 0
 2530 009a FFF7FEFF 		bl	Error_Handler
 2531              	.LVL195:
 2532              	.L192:
 2533 009e 00BF     		.align	2
 2534              	.L191:
 2535 00a0 00380240 		.word	1073887232
 2536 00a4 00700040 		.word	1073770496
 2537              		.cfi_endproc
 2538              	.LFE133:
 2540              		.section	.text.main,"ax",%progbits
 2541              		.align	1
 2542              		.global	main
 2543              		.syntax unified
 2544              		.thumb
 2545              		.thumb_func
 2546              		.fpu fpv4-sp-d16
 2548              	main:
 2549              	.LFB132:
 149:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2550              		.loc 1 149 0
 2551              		.cfi_startproc
 2552              		@ Volatile: function does not return.
 2553              		@ args = 0, pretend = 0, frame = 0
 2554              		@ frame_needed = 0, uses_anonymous_args = 0
 2555 0000 2DE98848 		push	{r3, r7, fp, lr}
 2556              	.LCFI54:
 2557              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccFeGOGr.s 			page 74


 2558              		.cfi_offset 3, -16
 2559              		.cfi_offset 7, -12
 2560              		.cfi_offset 11, -8
 2561              		.cfi_offset 14, -4
 156:Src/main.c    **** 
 2562              		.loc 1 156 0
 2563 0004 FFF7FEFF 		bl	HAL_Init
 2564              	.LVL196:
 163:Src/main.c    **** 
 2565              		.loc 1 163 0
 2566 0008 FFF7FEFF 		bl	SystemClock_Config
 2567              	.LVL197:
 170:Src/main.c    ****     MX_DMA_Init();
 2568              		.loc 1 170 0
 2569 000c FFF7FEFF 		bl	MX_GPIO_Init
 2570              	.LVL198:
 171:Src/main.c    ****     MX_USART2_UART_Init();
 2571              		.loc 1 171 0
 2572 0010 FFF7FEFF 		bl	MX_DMA_Init
 2573              	.LVL199:
 172:Src/main.c    ****     MX_CAN1_Init();
 2574              		.loc 1 172 0
 2575 0014 FFF7FEFF 		bl	MX_USART2_UART_Init
 2576              	.LVL200:
 173:Src/main.c    ****     MX_SPI1_Init();
 2577              		.loc 1 173 0
 2578 0018 FFF7FEFF 		bl	MX_CAN1_Init
 2579              	.LVL201:
 174:Src/main.c    ****     MX_ADC1_Init();
 2580              		.loc 1 174 0
 2581 001c FFF7FEFF 		bl	MX_SPI1_Init
 2582              	.LVL202:
 175:Src/main.c    ****     MX_USART1_UART_Init();
 2583              		.loc 1 175 0
 2584 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2585              	.LVL203:
 176:Src/main.c    ****     MX_TIM2_Init();
 2586              		.loc 1 176 0
 2587 0024 FFF7FEFF 		bl	MX_USART1_UART_Init
 2588              	.LVL204:
 177:Src/main.c    ****     MX_TIM3_Init();
 2589              		.loc 1 177 0
 2590 0028 FFF7FEFF 		bl	MX_TIM2_Init
 2591              	.LVL205:
 178:Src/main.c    ****     MX_TIM4_Init();
 2592              		.loc 1 178 0
 2593 002c FFF7FEFF 		bl	MX_TIM3_Init
 2594              	.LVL206:
 179:Src/main.c    ****     MX_TIM5_Init();
 2595              		.loc 1 179 0
 2596 0030 FFF7FEFF 		bl	MX_TIM4_Init
 2597              	.LVL207:
 180:Src/main.c    ****     MX_TIM6_Init();
 2598              		.loc 1 180 0
 2599 0034 FFF7FEFF 		bl	MX_TIM5_Init
 2600              	.LVL208:
 181:Src/main.c    ****     MX_TIM7_Init();
ARM GAS  /tmp/ccFeGOGr.s 			page 75


 2601              		.loc 1 181 0
 2602 0038 FFF7FEFF 		bl	MX_TIM6_Init
 2603              	.LVL209:
 182:Src/main.c    ****     MX_TIM10_Init();
 2604              		.loc 1 182 0
 2605 003c FFF7FEFF 		bl	MX_TIM7_Init
 2606              	.LVL210:
 183:Src/main.c    ****     MX_TIM11_Init();
 2607              		.loc 1 183 0
 2608 0040 FFF7FEFF 		bl	MX_TIM10_Init
 2609              	.LVL211:
 184:Src/main.c    **** 
 2610              		.loc 1 184 0
 2611 0044 FFF7FEFF 		bl	MX_TIM11_Init
 2612              	.LVL212:
 187:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2613              		.loc 1 187 0
 2614 0048 FFF7FEFF 		bl	MX_NVIC_Init
 2615              	.LVL213:
 190:Src/main.c    ****     sFilter.FilterIdLow = 0;
 2616              		.loc 1 190 0
 2617 004c 6D49     		ldr	r1, .L198
 2618 004e 0025     		movs	r5, #0
 2619 0050 8D61     		str	r5, [r1, #24]
 191:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 2620              		.loc 1 191 0
 2621 0052 4D60     		str	r5, [r1, #4]
 192:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 2622              		.loc 1 192 0
 2623 0054 0D60     		str	r5, [r1]
 193:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 2624              		.loc 1 193 0
 2625 0056 8D60     		str	r5, [r1, #8]
 194:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 2626              		.loc 1 194 0
 2627 0058 CD60     		str	r5, [r1, #12]
 195:Src/main.c    ****     sFilter.FilterBank = 0;
 2628              		.loc 1 195 0
 2629 005a 0D61     		str	r5, [r1, #16]
 196:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 2630              		.loc 1 196 0
 2631 005c 4D61     		str	r5, [r1, #20]
 197:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 2632              		.loc 1 197 0
 2633 005e CD61     		str	r5, [r1, #28]
 198:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 2634              		.loc 1 198 0
 2635 0060 4FF00108 		mov	r8, #1
 2636 0064 C1F82080 		str	r8, [r1, #32]
 199:Src/main.c    **** 
 2637              		.loc 1 199 0
 2638 0068 674C     		ldr	r4, .L198+4
 2639 006a 2046     		mov	r0, r4
 2640 006c FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 2641              	.LVL214:
 201:Src/main.c    **** 
 2642              		.loc 1 201 0
ARM GAS  /tmp/ccFeGOGr.s 			page 76


 2643 0070 2046     		mov	r0, r4
 2644 0072 FFF7FEFF 		bl	HAL_CAN_Start
 2645              	.LVL215:
 203:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 2646              		.loc 1 203 0
 2647 0076 1421     		movs	r1, #20
 2648 0078 2046     		mov	r0, r4
 2649 007a FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2650              	.LVL216:
 204:Src/main.c    ****     /* USER CODE END 2 */
 2651              		.loc 1 204 0
 2652 007e 1521     		movs	r1, #21
 2653 0080 2046     		mov	r0, r4
 2654 0082 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2655              	.LVL217:
 209:Src/main.c    ****     // can initialization //
 2656              		.loc 1 209 0
 2657 0086 614B     		ldr	r3, .L198+8
 2658 0088 9C61     		str	r4, [r3, #24]
 213:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 2659              		.loc 1 213 0
 2660 008a 614F     		ldr	r7, .L198+12
 2661 008c 614C     		ldr	r4, .L198+16
 2662 008e C7F82042 		str	r4, [r7, #544]
 214:Src/main.c    ****     accel.hspi = &hspi1;
 2663              		.loc 1 214 0
 2664 0092 4FF40079 		mov	r9, #512
 2665 0096 A7F82492 		strh	r9, [r7, #548]	@ movhi
 215:Src/main.c    **** 
 2666              		.loc 1 215 0
 2667 009a 5F4B     		ldr	r3, .L198+20
 2668 009c C7F83032 		str	r3, [r7, #560]
 217:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 2669              		.loc 1 217 0
 2670 00a0 5E4E     		ldr	r6, .L198+24
 2671 00a2 5F48     		ldr	r0, .L198+28
 2672 00a4 C6F82002 		str	r0, [r6, #544]
 218:Src/main.c    ****     gyro.hspi = &hspi1;
 2673              		.loc 1 218 0
 2674 00a8 4FF48071 		mov	r1, #256
 2675 00ac A6F82412 		strh	r1, [r6, #548]	@ movhi
 219:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 2676              		.loc 1 219 0
 2677 00b0 C6F83032 		str	r3, [r6, #560]
 220:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 2678              		.loc 1 220 0
 2679 00b4 4246     		mov	r2, r8
 2680 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2681              	.LVL218:
 221:Src/main.c    **** 
 2682              		.loc 1 221 0
 2683 00ba 4246     		mov	r2, r8
 2684 00bc 4946     		mov	r1, r9
 2685 00be 2046     		mov	r0, r4
 2686 00c0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2687              	.LVL219:
 223:Src/main.c    ****     {
ARM GAS  /tmp/ccFeGOGr.s 			page 77


 2688              		.loc 1 223 0
 2689 00c4 5749     		ldr	r1, .L198+32
 2690 00c6 5848     		ldr	r0, .L198+36
 2691 00c8 FFF7FEFF 		bl	gps_init
 2692              	.LVL220:
 228:Src/main.c    ****     steer_enc_prescaler /= 3;
 2693              		.loc 1 228 0
 2694 00cc DFF8A091 		ldr	r9, .L198+108
 2695 00d0 D9F80C20 		ldr	r2, [r9, #12]
 229:Src/main.c    ****     steer_enc_prescaler /= 20;
 2696              		.loc 1 229 0
 2697 00d4 554B     		ldr	r3, .L198+40
 2698 00d6 83FB0213 		smull	r1, r3, r3, r2
 2699 00da A3EBE273 		sub	r3, r3, r2, asr #31
 230:Src/main.c    ****     steer_enc_prescaler += 40;
 2700              		.loc 1 230 0
 2701 00de 544A     		ldr	r2, .L198+44
 2702 00e0 82FB0312 		smull	r1, r2, r2, r3
 2703 00e4 DB17     		asrs	r3, r3, #31
 2704 00e6 C3EBE203 		rsb	r3, r3, r2, asr #3
 231:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 2705              		.loc 1 231 0
 2706 00ea 2833     		adds	r3, r3, #40
 2707 00ec 514A     		ldr	r2, .L198+48
 2708 00ee 1360     		str	r3, [r2]
 232:Src/main.c    **** 
 2709              		.loc 1 232 0
 2710 00f0 514C     		ldr	r4, .L198+52
 2711 00f2 6366     		str	r3, [r4, #100]
 234:Src/main.c    ****     pot_2.min = 2350;
 2712              		.loc 1 234 0
 2713 00f4 514B     		ldr	r3, .L198+56
 2714 00f6 40F6DC72 		movw	r2, #4060
 2715 00fa 5A60     		str	r2, [r3, #4]
 235:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 2716              		.loc 1 235 0
 2717 00fc 40F62E12 		movw	r2, #2350
 2718 0100 9A60     		str	r2, [r3, #8]
 236:Src/main.c    **** 
 2719              		.loc 1 236 0
 2720 0102 40F2AE62 		movw	r2, #1710
 2721 0106 DA60     		str	r2, [r3, #12]
 238:Src/main.c    ****     enc.interrupt_flag = 0;
 2722              		.loc 1 238 0
 2723 0108 C4F86880 		str	r8, [r4, #104]
 239:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 2724              		.loc 1 239 0
 2725 010c E560     		str	r5, [r4, #12]
 240:Src/main.c    ****     enc.average_speed = 0;
 2726              		.loc 1 240 0
 2727 010e DFF864A1 		ldr	r10, .L198+112
 2728 0112 C4F8E8A3 		str	r10, [r4, #1000]
 241:Src/main.c    ****     enc.wheel_diameter = 0.395;
 2729              		.loc 1 241 0
 2730 0116 0022     		movs	r2, #0
 2731 0118 0023     		movs	r3, #0
 2732 011a C4E9F623 		strd	r2, [r4, #984]
ARM GAS  /tmp/ccFeGOGr.s 			page 78


 242:Src/main.c    ****     enc.samle_delta_time = htim7.Init.Period;
 2733              		.loc 1 242 0
 2734 011e 484B     		ldr	r3, .L198+60
 2735 0120 A367     		str	r3, [r4, #120]	@ float
 243:Src/main.c    ****     enc.data_size = 15;
 2736              		.loc 1 243 0
 2737 0122 DFF85481 		ldr	r8, .L198+116
 2738 0126 D8F80C30 		ldr	r3, [r8, #12]
 2739 012a 2360     		str	r3, [r4]
 244:Src/main.c    ****     enc.clock_period = 2;
 2740              		.loc 1 244 0
 2741 012c 0F23     		movs	r3, #15
 2742 012e 6360     		str	r3, [r4, #4]
 245:Src/main.c    ****     enc.wheel_rotation = 0;
 2743              		.loc 1 245 0
 2744 0130 0223     		movs	r3, #2
 2745 0132 2361     		str	r3, [r4, #16]
 246:Src/main.c    ****     enc.Km = 0;
 2746              		.loc 1 246 0
 2747 0134 E566     		str	r5, [r4, #108]
 247:Src/main.c    **** 
 2748              		.loc 1 247 0
 2749 0136 0023     		movs	r3, #0
 2750 0138 2367     		str	r3, [r4, #112]	@ float
 249:Src/main.c    ****     enc.frequency = 0;
 2751              		.loc 1 249 0
 2752 013a 424A     		ldr	r2, .L198+64
 2753 013c E267     		str	r2, [r4, #124]	@ float
 250:Src/main.c    ****     enc.frequency_timer = &htim7;
 2754              		.loc 1 250 0
 2755 013e C4F88030 		str	r3, [r4, #128]	@ float
 251:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 2756              		.loc 1 251 0
 2757 0142 C4F8EC83 		str	r8, [r4, #1004]
 252:Src/main.c    **** 
 2758              		.loc 1 252 0
 2759 0146 404B     		ldr	r3, .L198+68
 2760 0148 C4F88430 		str	r3, [r4, #132]
 254:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 2761              		.loc 1 254 0
 2762 014c DFF82CB1 		ldr	fp, .L198+120
 2763 0150 5846     		mov	r0, fp
 2764 0152 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2765              	.LVL221:
 255:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 2766              		.loc 1 255 0
 2767 0156 4846     		mov	r0, r9
 2768 0158 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2769              	.LVL222:
 259:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 2770              		.loc 1 259 0
 2771 015c 4046     		mov	r0, r8
 2772 015e FFF7FEFF 		bl	HAL_TIM_Base_Start
 2773              	.LVL223:
 260:Src/main.c    **** 
 2774              		.loc 1 260 0
 2775 0162 3A48     		ldr	r0, .L198+72
ARM GAS  /tmp/ccFeGOGr.s 			page 79


 2776 0164 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2777              	.LVL224:
 262:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 2778              		.loc 1 262 0
 2779 0168 5846     		mov	r0, fp
 2780 016a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2781              	.LVL225:
 263:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 2782              		.loc 1 263 0
 2783 016e 4846     		mov	r0, r9
 2784 0170 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2785              	.LVL226:
 267:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 2786              		.loc 1 267 0
 2787 0174 4046     		mov	r0, r8
 2788 0176 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2789              	.LVL227:
 268:Src/main.c    **** 
 2790              		.loc 1 268 0
 2791 017a 3448     		ldr	r0, .L198+72
 2792 017c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2793              	.LVL228:
 270:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 2794              		.loc 1 270 0
 2795 0180 334B     		ldr	r3, .L198+76
 2796 0182 1B68     		ldr	r3, [r3]
 2797 0184 5D62     		str	r5, [r3, #36]
 271:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 2798              		.loc 1 271 0
 2799 0186 DAF80030 		ldr	r3, [r10]
 2800 018a 5D62     		str	r5, [r3, #36]
 275:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 2801              		.loc 1 275 0
 2802 018c 314B     		ldr	r3, .L198+80
 2803 018e 1B68     		ldr	r3, [r3]
 2804 0190 5D62     		str	r5, [r3, #36]
 276:Src/main.c    **** 
 2805              		.loc 1 276 0
 2806 0192 314B     		ldr	r3, .L198+84
 2807 0194 1B68     		ldr	r3, [r3]
 2808 0196 5D62     		str	r5, [r3, #36]
 279:Src/main.c    **** 
 2809              		.loc 1 279 0
 2810 0198 2046     		mov	r0, r4
 2811 019a FFF7FEFF 		bl	enc_calculate_optimal_frequency
 2812              	.LVL229:
 281:Src/main.c    ****     gyro.scale = 500;
 2813              		.loc 1 281 0
 2814 019e 0423     		movs	r3, #4
 2815 01a0 C7F81832 		str	r3, [r7, #536]
 282:Src/main.c    **** 
 2816              		.loc 1 282 0
 2817 01a4 4FF4FA73 		mov	r3, #500
 2818 01a8 C6F81832 		str	r3, [r6, #536]
 285:Src/main.c    ****     //LSMD9S0_check(&imu);
 2819              		.loc 1 285 0
 2820 01ac 3146     		mov	r1, r6
ARM GAS  /tmp/ccFeGOGr.s 			page 80


 2821 01ae 3846     		mov	r0, r7
 2822 01b0 FFF7FEFF 		bl	LSMD9S0_accel_gyro_init
 2823              	.LVL230:
 288:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 2824              		.loc 1 288 0
 2825 01b4 3846     		mov	r0, r7
 2826 01b6 FFF7FEFF 		bl	LSM9DS0_calibration
 2827              	.LVL231:
 289:Src/main.c    **** 
 2828              		.loc 1 289 0
 2829 01ba 3046     		mov	r0, r6
 2830 01bc FFF7FEFF 		bl	LSM9DS0_calibration
 2831              	.LVL232:
 291:Src/main.c    **** 
 2832              		.loc 1 291 0
 2833 01c0 264B     		ldr	r3, .L198+88
 2834 01c2 1D60     		str	r5, [r3]
 2835 01c4 05E0     		b	.L194
 2836              	.L195:
 313:Src/main.c    ****             command_flag = 0;
 2837              		.loc 1 313 0
 2838 01c6 0120     		movs	r0, #1
 2839 01c8 FFF7FEFF 		bl	HAL_Delay
 2840              	.LVL233:
 314:Src/main.c    ****         }
 2841              		.loc 1 314 0
 2842 01cc 0022     		movs	r2, #0
 2843 01ce 244B     		ldr	r3, .L198+92
 2844 01d0 1A60     		str	r2, [r3]
 2845              	.L194:
 300:Src/main.c    **** 
 2846              		.loc 1 300 0
 2847 01d2 0322     		movs	r2, #3
 2848 01d4 2349     		ldr	r1, .L198+96
 2849 01d6 2448     		ldr	r0, .L198+100
 2850 01d8 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2851              	.LVL234:
 303:Src/main.c    ****         {
 2852              		.loc 1 303 0
 2853 01dc 204B     		ldr	r3, .L198+92
 2854 01de 1B68     		ldr	r3, [r3]
 2855 01e0 002B     		cmp	r3, #0
 2856 01e2 F0D1     		bne	.L195
 305:Src/main.c    ****             {
 2857              		.loc 1 305 0
 2858 01e4 FFF7FEFF 		bl	HAL_GetTick
 2859              	.LVL235:
 2860 01e8 204B     		ldr	r3, .L198+104
 2861 01ea 1B68     		ldr	r3, [r3]
 2862 01ec 9842     		cmp	r0, r3
 2863 01ee F0D0     		beq	.L194
 307:Src/main.c    ****                 previous_millis = HAL_GetTick();
 2864              		.loc 1 307 0
 2865 01f0 FFF7FEFF 		bl	HAL_GetTick
 2866              	.LVL236:
 2867 01f4 FFF7FEFF 		bl	send_CAN_data
 2868              	.LVL237:
ARM GAS  /tmp/ccFeGOGr.s 			page 81


 308:Src/main.c    ****             }
 2869              		.loc 1 308 0
 2870 01f8 FFF7FEFF 		bl	HAL_GetTick
 2871              	.LVL238:
 2872 01fc 1B4B     		ldr	r3, .L198+104
 2873 01fe 1860     		str	r0, [r3]
 2874 0200 E7E7     		b	.L194
 2875              	.L199:
 2876 0202 00BF     		.align	2
 2877              	.L198:
 2878 0204 00000000 		.word	sFilter
 2879 0208 00000000 		.word	hcan1
 2880 020c 00000000 		.word	can
 2881 0210 00000000 		.word	accel
 2882 0214 00080240 		.word	1073874944
 2883 0218 00000000 		.word	hspi1
 2884 021c 00000000 		.word	gyro
 2885 0220 00000240 		.word	1073872896
 2886 0224 00000000 		.word	gps_main
 2887 0228 00000000 		.word	huart1
 2888 022c 56555555 		.word	1431655766
 2889 0230 67666666 		.word	1717986919
 2890 0234 00000000 		.word	steer_enc_prescaler
 2891 0238 00000000 		.word	enc
 2892 023c 00000000 		.word	pot_2
 2893 0240 713DCA3E 		.word	1053441393
 2894 0244 00002042 		.word	1109393408
 2895 0248 00A24A04 		.word	72000000
 2896 024c 00000000 		.word	htim10
 2897 0250 00000000 		.word	.LANCHOR5
 2898 0254 00000000 		.word	.LANCHOR6
 2899 0258 00000000 		.word	.LANCHOR7
 2900 025c 00000000 		.word	encoder_counter
 2901 0260 00000000 		.word	.LANCHOR0
 2902 0264 00000000 		.word	ADC_buffer
 2903 0268 00000000 		.word	hadc1
 2904 026c 00000000 		.word	previous_millis
 2905 0270 00000000 		.word	htim3
 2906 0274 00000000 		.word	.LANCHOR4
 2907 0278 00000000 		.word	htim7
 2908 027c 00000000 		.word	htim2
 2909              		.cfi_endproc
 2910              	.LFE132:
 2912              		.comm	previous_millis,4,4
 2913              		.comm	encoder_counter,4,4
 2914              		.comm	steer_enc_prescaler,4,4
 2915              		.comm	gps_main,100,4
 2916              		.global	a_TimerInstance10
 2917              		.global	a_TimerInstance7
 2918              		.global	a_TimerInstance6
 2919              		.global	a_TimerInstance5
 2920              		.global	a_TimerInstance4
 2921              		.global	a_TimerInstance3
 2922              		.global	a_TimerInstance2
 2923              		.global	calibration_flag
 2924              		.global	command_flag
 2925              		.global	timer_factor
ARM GAS  /tmp/ccFeGOGr.s 			page 82


 2926              		.global	multiplier
 2927              		.global	flag
 2928              		.comm	txt,100,4
 2929              		.comm	val,12,4
 2930              		.comm	ADC_buffer,16,4
 2931              		.comm	val0rang,4,4
 2932              		.comm	valMin0,4,4
 2933              		.comm	valMax0,4,4
 2934              		.comm	sFilter,40,4
 2935              		.comm	huart2,64,4
 2936              		.comm	huart1,64,4
 2937              		.comm	htim11,64,4
 2938              		.comm	htim10,64,4
 2939              		.comm	htim7,64,4
 2940              		.comm	htim6,64,4
 2941              		.comm	htim5,64,4
 2942              		.comm	htim4,64,4
 2943              		.comm	htim3,64,4
 2944              		.comm	htim2,64,4
 2945              		.comm	hspi1,88,4
 2946              		.comm	hcan1,40,4
 2947              		.comm	hdma_adc1,96,4
 2948              		.comm	hadc1,72,4
 2949              		.section	.bss.calibration_flag,"aw",%nobits
 2950              		.align	2
 2951              		.set	.LANCHOR1,. + 0
 2954              	calibration_flag:
 2955 0000 00000000 		.space	4
 2956              		.section	.bss.command_flag,"aw",%nobits
 2957              		.align	2
 2958              		.set	.LANCHOR0,. + 0
 2961              	command_flag:
 2962 0000 00000000 		.space	4
 2963              		.section	.bss.flag,"aw",%nobits
 2964              		.align	2
 2965              		.set	.LANCHOR3,. + 0
 2968              	flag:
 2969 0000 00000000 		.space	4
 2970              		.section	.data.a_TimerInstance10,"aw",%progbits
 2971              		.align	2
 2972              		.set	.LANCHOR7,. + 0
 2975              	a_TimerInstance10:
 2976 0000 00440140 		.word	1073824768
 2977 0004 00000000 		.space	60
 2977      00000000 
 2977      00000000 
 2977      00000000 
 2977      00000000 
 2978              		.section	.data.a_TimerInstance2,"aw",%progbits
 2979              		.align	2
 2980              		.set	.LANCHOR5,. + 0
 2983              	a_TimerInstance2:
 2984 0000 00000040 		.word	1073741824
 2985 0004 00000000 		.space	60
 2985      00000000 
 2985      00000000 
 2985      00000000 
ARM GAS  /tmp/ccFeGOGr.s 			page 83


 2985      00000000 
 2986              		.section	.data.a_TimerInstance3,"aw",%progbits
 2987              		.align	2
 2988              		.set	.LANCHOR4,. + 0
 2991              	a_TimerInstance3:
 2992 0000 00040040 		.word	1073742848
 2993 0004 00000000 		.space	60
 2993      00000000 
 2993      00000000 
 2993      00000000 
 2993      00000000 
 2994              		.section	.data.a_TimerInstance4,"aw",%progbits
 2995              		.align	2
 2998              	a_TimerInstance4:
 2999 0000 00080040 		.word	1073743872
 3000 0004 00000000 		.space	60
 3000      00000000 
 3000      00000000 
 3000      00000000 
 3000      00000000 
 3001              		.section	.data.a_TimerInstance5,"aw",%progbits
 3002              		.align	2
 3005              	a_TimerInstance5:
 3006 0000 000C0040 		.word	1073744896
 3007 0004 00000000 		.space	60
 3007      00000000 
 3007      00000000 
 3007      00000000 
 3007      00000000 
 3008              		.section	.data.a_TimerInstance6,"aw",%progbits
 3009              		.align	2
 3012              	a_TimerInstance6:
 3013 0000 00100040 		.word	1073745920
 3014 0004 00000000 		.space	60
 3014      00000000 
 3014      00000000 
 3014      00000000 
 3014      00000000 
 3015              		.section	.data.a_TimerInstance7,"aw",%progbits
 3016              		.align	2
 3017              		.set	.LANCHOR6,. + 0
 3020              	a_TimerInstance7:
 3021 0000 00140040 		.word	1073746944
 3022 0004 00000000 		.space	60
 3022      00000000 
 3022      00000000 
 3022      00000000 
 3022      00000000 
 3023              		.section	.data.multiplier,"aw",%progbits
 3024              		.align	2
 3025              		.set	.LANCHOR2,. + 0
 3028              	multiplier:
 3029 0000 01000000 		.word	1
 3030              		.section	.data.timer_factor,"aw",%progbits
 3031              		.align	2
 3034              	timer_factor:
 3035 0000 02000000 		.word	2
ARM GAS  /tmp/ccFeGOGr.s 			page 84


 3036              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 3037              		.align	2
 3038              	.LC0:
 3039 0000 4572726F 		.ascii	"Error on file: \000"
 3039      72206F6E 
 3039      2066696C 
 3039      653A2000 
 3040              	.LC1:
 3041 0010 0D0A00   		.ascii	"\015\012\000"
 3042              		.text
 3043              	.Letext0:
 3044              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3045              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3046              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3047              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3048              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3049              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3050              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3051              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3052              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3053              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3054              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3055              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3056              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3057              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 3058              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3059              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3060              		.file 18 "/usr/include/newlib/sys/lock.h"
 3061              		.file 19 "/usr/include/newlib/sys/_types.h"
 3062              		.file 20 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3063              		.file 21 "/usr/include/newlib/sys/reent.h"
 3064              		.file 22 "/usr/include/newlib/stdlib.h"
 3065              		.file 23 "/usr/include/newlib/math.h"
 3066              		.file 24 "Inc/Eagle_TRT.h"
 3067              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 3068              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 3069              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccFeGOGr.s 			page 85


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFeGOGr.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFeGOGr.s:190    .text.MX_GPIO_Init:00000000000000ec $d
     /tmp/ccFeGOGr.s:198    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:204    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccFeGOGr.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccFeGOGr.s:253    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:259    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccFeGOGr.s:385    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccFeGOGr.s:392    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccFeGOGr.s:417    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000010 ADC_buffer
     /tmp/ccFeGOGr.s:425    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccFeGOGr.s:432    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccFeGOGr.s:462    .text.HAL_UART_RxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart1
                            *COM*:0000000000000064 gps_main
     /tmp/ccFeGOGr.s:468    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccFeGOGr.s:475    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccFeGOGr.s:506    .text.HAL_UART_TxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccFeGOGr.s:511    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccFeGOGr.s:518    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccFeGOGr.s:786    .text.HAL_CAN_RxFifo0FullCallback:0000000000000130 $d
     /tmp/ccFeGOGr.s:795    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccFeGOGr.s:802    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccFeGOGr.s:910    .text.HAL_TIM_PeriodElapsedCallback:000000000000007c $d
                            *COM*:0000000000000040 htim10
                            *COM*:0000000000000040 htim7
     /tmp/ccFeGOGr.s:926    .text.send_CAN_data:0000000000000000 $t
     /tmp/ccFeGOGr.s:933    .text.send_CAN_data:0000000000000000 send_CAN_data
     /tmp/ccFeGOGr.s:1337   .text.send_CAN_data:000000000000024c $d
     /tmp/ccFeGOGr.s:1350   .text.Error_Handler:0000000000000000 $t
     /tmp/ccFeGOGr.s:1357   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccFeGOGr.s:1389   .text.Error_Handler:0000000000000020 $d
     /tmp/ccFeGOGr.s:1396   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1402   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccFeGOGr.s:1446   .text.MX_USART2_UART_Init:0000000000000028 $d
     /tmp/ccFeGOGr.s:1453   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1459   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccFeGOGr.s:1513   .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccFeGOGr.s:1519   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1525   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccFeGOGr.s:1578   .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccFeGOGr.s:1584   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1590   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccFeGOGr.s:1676   .text.MX_ADC1_Init:000000000000005c $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccFeGOGr.s:1683   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1689   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccFeGOGr.s:1733   .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccFeGOGr.s:1739   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1745   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
ARM GAS  /tmp/ccFeGOGr.s 			page 86


     /tmp/ccFeGOGr.s:1852   .text.MX_TIM2_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccFeGOGr.s:1857   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1863   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccFeGOGr.s:1949   .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccFeGOGr.s:1955   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:1961   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccFeGOGr.s:2047   .text.MX_TIM4_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim4
     /tmp/ccFeGOGr.s:2053   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:2059   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccFeGOGr.s:2145   .text.MX_TIM5_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim5
     /tmp/ccFeGOGr.s:2151   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:2157   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/ccFeGOGr.s:2223   .text.MX_TIM6_Init:0000000000000044 $d
                            *COM*:0000000000000040 htim6
     /tmp/ccFeGOGr.s:2229   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:2235   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/ccFeGOGr.s:2301   .text.MX_TIM7_Init:0000000000000044 $d
     /tmp/ccFeGOGr.s:2307   .text.MX_TIM10_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:2313   .text.MX_TIM10_Init:0000000000000000 MX_TIM10_Init
     /tmp/ccFeGOGr.s:2353   .text.MX_TIM10_Init:0000000000000028 $d
     /tmp/ccFeGOGr.s:2359   .text.MX_TIM11_Init:0000000000000000 $t
     /tmp/ccFeGOGr.s:2365   .text.MX_TIM11_Init:0000000000000000 MX_TIM11_Init
     /tmp/ccFeGOGr.s:2403   .text.MX_TIM11_Init:0000000000000020 $d
                            *COM*:0000000000000040 htim11
     /tmp/ccFeGOGr.s:2409   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFeGOGr.s:2416   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFeGOGr.s:2535   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccFeGOGr.s:2541   .text.main:0000000000000000 $t
     /tmp/ccFeGOGr.s:2548   .text.main:0000000000000000 main
     /tmp/ccFeGOGr.s:2878   .text.main:0000000000000204 $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000004 steer_enc_prescaler
                            *COM*:0000000000000004 encoder_counter
                            *COM*:0000000000000004 previous_millis
     /tmp/ccFeGOGr.s:2975   .data.a_TimerInstance10:0000000000000000 a_TimerInstance10
     /tmp/ccFeGOGr.s:3020   .data.a_TimerInstance7:0000000000000000 a_TimerInstance7
     /tmp/ccFeGOGr.s:3012   .data.a_TimerInstance6:0000000000000000 a_TimerInstance6
     /tmp/ccFeGOGr.s:3005   .data.a_TimerInstance5:0000000000000000 a_TimerInstance5
     /tmp/ccFeGOGr.s:2998   .data.a_TimerInstance4:0000000000000000 a_TimerInstance4
     /tmp/ccFeGOGr.s:2991   .data.a_TimerInstance3:0000000000000000 a_TimerInstance3
     /tmp/ccFeGOGr.s:2983   .data.a_TimerInstance2:0000000000000000 a_TimerInstance2
     /tmp/ccFeGOGr.s:2954   .bss.calibration_flag:0000000000000000 calibration_flag
     /tmp/ccFeGOGr.s:2961   .bss.command_flag:0000000000000000 command_flag
     /tmp/ccFeGOGr.s:3034   .data.timer_factor:0000000000000000 timer_factor
     /tmp/ccFeGOGr.s:3028   .data.multiplier:0000000000000000 multiplier
     /tmp/ccFeGOGr.s:2968   .bss.flag:0000000000000000 flag
                            *COM*:0000000000000064 txt
                            *COM*:000000000000000c val
                            *COM*:0000000000000004 val0rang
                            *COM*:0000000000000004 valMin0
                            *COM*:0000000000000004 valMax0
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccFeGOGr.s:2950   .bss.calibration_flag:0000000000000000 $d
ARM GAS  /tmp/ccFeGOGr.s 			page 87


     /tmp/ccFeGOGr.s:2957   .bss.command_flag:0000000000000000 $d
     /tmp/ccFeGOGr.s:2964   .bss.flag:0000000000000000 $d
     /tmp/ccFeGOGr.s:2971   .data.a_TimerInstance10:0000000000000000 $d
     /tmp/ccFeGOGr.s:2979   .data.a_TimerInstance2:0000000000000000 $d
     /tmp/ccFeGOGr.s:2987   .data.a_TimerInstance3:0000000000000000 $d
     /tmp/ccFeGOGr.s:2995   .data.a_TimerInstance4:0000000000000000 $d
     /tmp/ccFeGOGr.s:3002   .data.a_TimerInstance5:0000000000000000 $d
     /tmp/ccFeGOGr.s:3009   .data.a_TimerInstance6:0000000000000000 $d
     /tmp/ccFeGOGr.s:3016   .data.a_TimerInstance7:0000000000000000 $d
     /tmp/ccFeGOGr.s:3024   .data.multiplier:0000000000000000 $d
     /tmp/ccFeGOGr.s:3031   .data.timer_factor:0000000000000000 $d
     /tmp/ccFeGOGr.s:3037   .rodata.Error_Handler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
pot_1
pot_2
pot_3
gps_read_it
print_it
CAN_Receive
set_min
CAN_Send
set_max
can
LSMD9S0_accel_read
imu_elaborate_data
calc_pot_value
LSMD9S0_gyro_read
encoder_tim_interrupt
accel
gyro
enc
__aeabi_d2uiz
__aeabi_ddiv
__aeabi_i2d
__aeabi_dadd
HAL_UART_Transmit
HAL_UART_Init
HAL_CAN_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
ARM GAS  /tmp/ccFeGOGr.s 			page 88


HAL_CAN_ActivateNotification
gps_init
HAL_TIM_Base_Start
HAL_TIM_Base_Start_IT
enc_calculate_optimal_frequency
LSMD9S0_accel_gyro_init
LSM9DS0_calibration
HAL_Delay
HAL_ADC_Start_DMA
HAL_GetTick
