ARM GAS  /tmp/ccU79PPY.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Eagle_TRT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.next,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	next:
  25              	.LFB141:
  26              		.file 1 "Src/Eagle_TRT.c"
   1:Src/Eagle_TRT.c **** #include "Eagle_TRT.h"
   2:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_conf.h"
   3:Src/Eagle_TRT.c **** 
   4:Src/Eagle_TRT.c **** /*
   5:Src/Eagle_TRT.c ****  *Driver for all the stm in the Eagle_TRT veichle
   6:Src/Eagle_TRT.c ****  *incude this driver in the main file
   7:Src/Eagle_TRT.c ****  *you can't use all the functions unless you set up the CubeMx project correctly
   8:Src/Eagle_TRT.c **** */
   9:Src/Eagle_TRT.c **** 
  10:Src/Eagle_TRT.c **** //----------------ENCODER----------------//
  11:Src/Eagle_TRT.c **** /*
  12:Src/Eagle_TRT.c ****  *To use encoder functions you have to initialize two timers, one for the clock and one to generate
  13:Src/Eagle_TRT.c ****  *To get the rotational speed of the encoder, you can setup the interrupt timer and call 'encoder_t
  14:Src/Eagle_TRT.c ****  *you have to declare a variable and pass it as argument to the encoder_tim_interrupt() function.
  15:Src/Eagle_TRT.c ****  *The porpouse of that variable is to switch from the three phases needed to calculate the rotation
  16:Src/Eagle_TRT.c ****  *The first and the second phases are to request two angles from the encoder, then third is to calc
  17:Src/Eagle_TRT.c ****  *For the configuration of the first timer go to the description of the read_encoder() function.
  18:Src/Eagle_TRT.c ****  *For the configuration of the second timer you have to configure it to generate an interrupt.
  19:Src/Eagle_TRT.c ****  *That interrupt must be long enough to calculate a speed but not too long because you have to get 
  20:Src/Eagle_TRT.c ****  *
  21:Src/Eagle_TRT.c ****  *working settings:
  22:Src/Eagle_TRT.c ****  *interrupt timer -> prescaler 36, counter period 1000
  23:Src/Eagle_TRT.c ****  *timer2 -> prescaler = 18, counter period = 65500
  24:Src/Eagle_TRT.c ****  *pin PC8 = data in
  25:Src/Eagle_TRT.c ****  *pin PC9 = clock pin
  26:Src/Eagle_TRT.c ****  *angles_array[15]
  27:Src/Eagle_TRT.c **** */
  28:Src/Eagle_TRT.c **** 
  29:Src/Eagle_TRT.c **** //----------------GPS----------------//
  30:Src/Eagle_TRT.c **** /*
  31:Src/Eagle_TRT.c ****  *To use GPS functions you have to setup the UART port to communicate with it.
  32:Src/Eagle_TRT.c ****  *Possibly set the port as interrupt because the received data are cleaner.
ARM GAS  /tmp/ccU79PPY.s 			page 2


  33:Src/Eagle_TRT.c ****  *Call GPS_INIT() to setup the GPS
  34:Src/Eagle_TRT.c ****  *Every loop read the input data.
  35:Src/Eagle_TRT.c ****  *Then the function Get_Sentence() looks for a sequence of letters like "GPRMC"
  36:Src/Eagle_TRT.c ****  *Look at NMEA protocol, there you can find all the strings that a GPS can send,
  37:Src/Eagle_TRT.c ****  *every one of them defines the types of data that the GPS sends.
  38:Src/Eagle_TRT.c ****  *If Get_Sentence() found one string, returns the number of the position of that string in the char
  39:Src/Eagle_TRT.c ****  *Go to Get_Sentence() description to find an example of Matrix
  40:Src/Eagle_TRT.c ****  *Once you have the number of the string you can call Get_Requested_Data() to get the data that you
  41:Src/Eagle_TRT.c ****  *If you need to know if the GPS is connected to at least 3 satellites call Is_Valid() function
  42:Src/Eagle_TRT.c ****  *
  43:Src/Eagle_TRT.c ****  *checksum calculator http://www.hhhh.org/wiml/proj/nmeaxor.html
  44:Src/Eagle_TRT.c **** */
  45:Src/Eagle_TRT.c **** 
  46:Src/Eagle_TRT.c **** //----------------IMU----------------//
  47:Src/Eagle_TRT.c **** /*
  48:Src/Eagle_TRT.c ****  *Setup SPI port to communicate with the sensor
  49:Src/Eagle_TRT.c ****  *Call gyro_init() and magn_accel_init() to setup the sensor
  50:Src/Eagle_TRT.c ****  *If you want to calibrate the sensor call gyro_calib() and accel_calib().
  51:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling gyro_read()
  52:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling accel_read()
  53:Src/Eagle_TRT.c **** */
  54:Src/Eagle_TRT.c **** 
  55:Src/Eagle_TRT.c **** #ifdef HAL_SPI_MODULE_ENABLED
  56:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_spi.h"
  57:Src/Eagle_TRT.c **** 
  58:Src/Eagle_TRT.c **** extern TIM_HandleTypeDef htim2;
  59:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
  60:Src/Eagle_TRT.c **** 
  61:Src/Eagle_TRT.c **** ///IMU VARIABLES///
  62:Src/Eagle_TRT.c **** uint8_t ZERO = 0x00;
  63:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G = 0x8F;
  64:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G_VAL;
  65:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM = 0x8F;
  66:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM_VAL;
  67:Src/Eagle_TRT.c **** 
  68:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_ADD = 0x20;
  69:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_VAL = 0x0F;
  70:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_ADD = 0x23;
  71:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_VAL = 0x10;
  72:Src/Eagle_TRT.c **** 
  73:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_ADD = 0x20;
  74:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_VAL = 0xA7;
  75:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_ADD = 0x21;
  76:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_VAL = 0x08;
  77:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_ADD = 0x24;
  78:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_VAL = 0x70;
  79:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_ADD = 0x25;
  80:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_VAL = 0x20;
  81:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_ADD = 0x26;
  82:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_VAL = 0x00;
  83:Src/Eagle_TRT.c **** 
  84:Src/Eagle_TRT.c **** // GYROSCOPE SCALE SETTING
  85:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G = 0x23;
  86:Src/Eagle_TRT.c **** 
  87:Src/Eagle_TRT.c **** uint8_t SCL_G_245 = 0x00;
  88:Src/Eagle_TRT.c **** uint8_t SCL_G_500 = 0x10;
  89:Src/Eagle_TRT.c **** uint8_t SCL_G_1000 = 0x20;
ARM GAS  /tmp/ccU79PPY.s 			page 3


  90:Src/Eagle_TRT.c **** uint8_t SCL_G_2000 = 0x30;
  91:Src/Eagle_TRT.c **** 
  92:Src/Eagle_TRT.c **** // ACCELERORMETER SCALE SETTING
  93:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM = 0x21;
  94:Src/Eagle_TRT.c **** 
  95:Src/Eagle_TRT.c **** uint8_t SCL_A_2 = 0x00;
  96:Src/Eagle_TRT.c **** uint8_t SCL_A_4 = 0x08;
  97:Src/Eagle_TRT.c **** uint8_t SCL_A_6 = 0x10;
  98:Src/Eagle_TRT.c **** uint8_t SCL_A_8 = 0x18;
  99:Src/Eagle_TRT.c **** uint8_t SCL_A_16 = 0x20;
 100:Src/Eagle_TRT.c **** 
 101:Src/Eagle_TRT.c **** // MAGNETORMETER SCALE SETTING
 102:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM = 0x25;
 103:Src/Eagle_TRT.c **** 
 104:Src/Eagle_TRT.c **** uint8_t SCL_M_2 = 0x00;
 105:Src/Eagle_TRT.c **** uint8_t SCL_M_4 = 0x20;
 106:Src/Eagle_TRT.c **** uint8_t SCL_M_8 = 0x40;
 107:Src/Eagle_TRT.c **** uint8_t SCL_M_12 = 0x60;
 108:Src/Eagle_TRT.c **** 
 109:Src/Eagle_TRT.c **** // OUTPUT REG
 110:Src/Eagle_TRT.c **** uint8_t OUT_X_L_G_ADD = 0xA8;
 111:Src/Eagle_TRT.c **** uint8_t OUT_X_H_G_ADD = 0xA9;
 112:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_G_ADD = 0xAA;
 113:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_G_ADD = 0xAB;
 114:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_G_ADD = 0xAC;
 115:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_G_ADD = 0xAD;
 116:Src/Eagle_TRT.c **** 
 117:Src/Eagle_TRT.c **** uint8_t OUT_X_L_A_ADD = 0xA8;
 118:Src/Eagle_TRT.c **** uint8_t OUT_X_H_A_ADD = 0xA9;
 119:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_A_ADD = 0xAA;
 120:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_A_ADD = 0xAB;
 121:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_A_ADD = 0xAC;
 122:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_A_ADD = 0xAD;
 123:Src/Eagle_TRT.c **** 
 124:Src/Eagle_TRT.c **** imu_stc accel;
 125:Src/Eagle_TRT.c **** imu_stc gyro;
 126:Src/Eagle_TRT.c **** can_stc can;
 127:Src/Eagle_TRT.c **** 
 128:Src/Eagle_TRT.c **** void send_config(imu_stc *imu, GPIO_TypeDef *pinx, uint16_t pinn, uint8_t *addr, uint8_t *val)
 129:Src/Eagle_TRT.c **** {
 130:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 131:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 132:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 133:Src/Eagle_TRT.c **** 	{
 134:Src/Eagle_TRT.c **** 	}										 //delay (must be >5ns)
 135:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, addr, 1, 10); ///Writing the address
 136:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 137:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 138:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 139:Src/Eagle_TRT.c **** 	{
 140:Src/Eagle_TRT.c **** 	}											 //delay (must be >5ns)
 141:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_SET); ///CS_InUse to 1
 142:Src/Eagle_TRT.c **** }
 143:Src/Eagle_TRT.c **** 
 144:Src/Eagle_TRT.c **** //accelerometer, gyroscope and magnetometer initialization
 145:Src/Eagle_TRT.c **** //call this function before requesting data from the sensor
 146:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
ARM GAS  /tmp/ccU79PPY.s 			page 4


 147:Src/Eagle_TRT.c **** void LSMD9S0_accel_gyro_init(imu_stc *accel, imu_stc *gyro)
 148:Src/Eagle_TRT.c **** {
 149:Src/Eagle_TRT.c **** 
 150:Src/Eagle_TRT.c **** 	// Wake Up Gyro, enabling x, y, z axis
 151:Src/Eagle_TRT.c **** 	send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_G_ADD, (uint8_t *
 152:Src/Eagle_TRT.c **** 
 153:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 154:Src/Eagle_TRT.c **** 
 155:Src/Eagle_TRT.c **** 	// Wake Up Accel, enabling x, y, z axis
 156:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_XM_ADD, (uint8
 157:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 158:Src/Eagle_TRT.c **** 
 159:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG5_XM_ADD, (uint8
 160:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 161:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8
 162:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 163:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8
 164:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 165:Src/Eagle_TRT.c **** 
 166:Src/Eagle_TRT.c **** 	// Set Gyro scale range
 167:Src/Eagle_TRT.c **** 	switch (gyro->scale)
 168:Src/Eagle_TRT.c **** 	{
 169:Src/Eagle_TRT.c **** 	case 245:
 170:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 171:Src/Eagle_TRT.c **** 		break;
 172:Src/Eagle_TRT.c **** 	case 500:
 173:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 174:Src/Eagle_TRT.c **** 		break;
 175:Src/Eagle_TRT.c **** 	case 1000:
 176:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 177:Src/Eagle_TRT.c **** 		break;
 178:Src/Eagle_TRT.c **** 	case 2000:
 179:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 180:Src/Eagle_TRT.c **** 		break;
 181:Src/Eagle_TRT.c **** 	default:
 182:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 183:Src/Eagle_TRT.c **** 		gyro->scale = 500;
 184:Src/Eagle_TRT.c **** 		break;
 185:Src/Eagle_TRT.c **** 	}
 186:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 187:Src/Eagle_TRT.c **** 
 188:Src/Eagle_TRT.c **** 	// Set Accel scale range
 189:Src/Eagle_TRT.c **** 	switch (accel->scale)
 190:Src/Eagle_TRT.c **** 	{
 191:Src/Eagle_TRT.c **** 	case 2:
 192:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 193:Src/Eagle_TRT.c **** 		break;
 194:Src/Eagle_TRT.c **** 	case 4:
 195:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 196:Src/Eagle_TRT.c **** 		break;
 197:Src/Eagle_TRT.c **** 	case 6:
 198:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 199:Src/Eagle_TRT.c **** 		break;
 200:Src/Eagle_TRT.c **** 	case 8:
 201:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 202:Src/Eagle_TRT.c **** 		break;
 203:Src/Eagle_TRT.c **** 	case 16:
ARM GAS  /tmp/ccU79PPY.s 			page 5


 204:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 205:Src/Eagle_TRT.c **** 		break;
 206:Src/Eagle_TRT.c **** 	default:
 207:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 208:Src/Eagle_TRT.c **** 		accel->scale = 4;
 209:Src/Eagle_TRT.c **** 		break;
 210:Src/Eagle_TRT.c **** 	}
 211:Src/Eagle_TRT.c **** 
 212:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 213:Src/Eagle_TRT.c **** /*
 214:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(&huart2, (uint8_t *)"<IMU> Initialization -> Done\r\n", strlen("<IMU> Initializa
 215:Src/Eagle_TRT.c **** }
 216:Src/Eagle_TRT.c **** 
 217:Src/Eagle_TRT.c **** float LSMD9S0_read(imu_stc *imu)
 218:Src/Eagle_TRT.c **** {
 219:Src/Eagle_TRT.c **** 
 220:Src/Eagle_TRT.c **** 	uint8_t OUT_L_VAL;
 221:Src/Eagle_TRT.c **** 	uint8_t OUT_H_VAL;
 222:Src/Eagle_TRT.c **** 
 223:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 224:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 225:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 226:Src/Eagle_TRT.c **** 	{
 227:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 228:Src/Eagle_TRT.c **** 
 229:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_L), 1, 10);		  ///Writing LOW address
 230:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 231:Src/Eagle_TRT.c **** 
 232:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 233:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 234:Src/Eagle_TRT.c **** 	{
 235:Src/Eagle_TRT.c **** 	}																		//delay (must be >5ns)
 236:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 237:Src/Eagle_TRT.c **** 
 238:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 239:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 80)
 240:Src/Eagle_TRT.c **** 	{
 241:Src/Eagle_TRT.c **** 	}																		  //delay (must be >5ns)
 242:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 243:Src/Eagle_TRT.c **** 
 244:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_H), 1, 10);		  ///Writing HIGH address
 245:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 246:Src/Eagle_TRT.c **** 
 247:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 248:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 249:Src/Eagle_TRT.c **** 	{
 250:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 251:Src/Eagle_TRT.c **** 
 252:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 253:Src/Eagle_TRT.c **** 
 254:Src/Eagle_TRT.c **** 	///CALCULATING ROTATION
 255:Src/Eagle_TRT.c **** 	uint32_t value = (OUT_H_VAL << 8) | OUT_L_VAL; ///Calculating axis value shifting and using a logi
 256:Src/Eagle_TRT.c **** 	float axis = value;
 257:Src/Eagle_TRT.c **** 
 258:Src/Eagle_TRT.c **** 	return axis;
 259:Src/Eagle_TRT.c **** }
 260:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccU79PPY.s 			page 6


 261:Src/Eagle_TRT.c **** int LSMD9S0_check(imu_stc *imu)
 262:Src/Eagle_TRT.c **** {
 263:Src/Eagle_TRT.c **** 
 264:Src/Eagle_TRT.c **** 	int check = 0;
 265:Src/Eagle_TRT.c **** 
 266:Src/Eagle_TRT.c **** 	///AXEL/MAGN ARE WORKING
 267:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); ///CS_XM to 0
 268:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 269:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 270:Src/Eagle_TRT.c **** 	{
 271:Src/Eagle_TRT.c **** 	}															 //delay (must be >5ns)
 272:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_XM, 1, 10); ///Writing on register ----> (uint8_t
 273:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_XM_VAL, 1, 10);
 274:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 275:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 276:Src/Eagle_TRT.c **** 	{
 277:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 278:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 279:Src/Eagle_TRT.c **** 
 280:Src/Eagle_TRT.c **** 	///GYRO IS WORKING
 281:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); ///CS_G to 0
 282:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 283:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 284:Src/Eagle_TRT.c **** 	{
 285:Src/Eagle_TRT.c **** 	}															//delay (must be >5ns)
 286:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_G, 1, 10); ///Writing on register ----> (uint8_t*
 287:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 288:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_G_VAL, 1, 10);
 289:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 290:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 291:Src/Eagle_TRT.c **** 	{
 292:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 293:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 294:Src/Eagle_TRT.c **** 
 295:Src/Eagle_TRT.c **** 	char txt[100];
 296:Src/Eagle_TRT.c **** /*
 297:Src/Eagle_TRT.c **** 	sprintf(txt, "Gyro, Accel check: %d\t%d\r\n", WHO_AM_I_G_VAL, WHO_AM_I_XM_VAL);
 298:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);*/
 299:Src/Eagle_TRT.c **** 
 300:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 301:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 302:Src/Eagle_TRT.c **** 	{
 303:Src/Eagle_TRT.c **** 		check = 1;
 304:Src/Eagle_TRT.c **** 	}
 305:Src/Eagle_TRT.c **** 	else
 306:Src/Eagle_TRT.c **** 	{
 307:Src/Eagle_TRT.c **** 		check = 0;
 308:Src/Eagle_TRT.c **** 	}
 309:Src/Eagle_TRT.c **** 
 310:Src/Eagle_TRT.c **** 	return check;
 311:Src/Eagle_TRT.c **** }
 312:Src/Eagle_TRT.c **** 
 313:Src/Eagle_TRT.c **** // Request inital axis values, average them, set as initial offsets
 314:Src/Eagle_TRT.c **** void LSM9DS0_calibration(imu_stc *imu)
 315:Src/Eagle_TRT.c **** {
 316:Src/Eagle_TRT.c **** 	double x = 0, y = 0, z = 0;
 317:Src/Eagle_TRT.c **** 	int iterations = 200;
ARM GAS  /tmp/ccU79PPY.s 			page 7


 318:Src/Eagle_TRT.c **** 	for (int i = 0; i < iterations; i++)
 319:Src/Eagle_TRT.c **** 	{
 320:Src/Eagle_TRT.c **** 		LSMD9S0_accel_read(imu);
 321:Src/Eagle_TRT.c **** 		//imu_elaborate_data(imu);
 322:Src/Eagle_TRT.c **** 		x += imu->x;
 323:Src/Eagle_TRT.c **** 		y += imu->y;
 324:Src/Eagle_TRT.c **** 		z += imu->z;
 325:Src/Eagle_TRT.c **** 		HAL_Delay(1);
 326:Src/Eagle_TRT.c **** 	}
 327:Src/Eagle_TRT.c **** 
 328:Src/Eagle_TRT.c **** 	imu->x_offset = x / iterations;
 329:Src/Eagle_TRT.c **** 	imu->y_offset = y / iterations;
 330:Src/Eagle_TRT.c **** 	imu->z_offset = z / iterations;
 331:Src/Eagle_TRT.c **** 
 332:Src/Eagle_TRT.c **** 	imu->calibration_done = 1;
 333:Src/Eagle_TRT.c **** }
 334:Src/Eagle_TRT.c **** 
 335:Src/Eagle_TRT.c **** //Reading G_axis values
 336:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 337:Src/Eagle_TRT.c **** //x = pointer gyroscope x variable
 338:Src/Eagle_TRT.c **** //y = pointer gyroscope y variable
 339:Src/Eagle_TRT.c **** //z = pointer gyroscope z variable
 340:Src/Eagle_TRT.c **** //x_offset = offset x value
 341:Src/Eagle_TRT.c **** //y_offset = offset y value
 342:Src/Eagle_TRT.c **** //z_offset = offset z value
 343:Src/Eagle_TRT.c **** void LSMD9S0_gyro_read(imu_stc *gyro)
 344:Src/Eagle_TRT.c **** {
 345:Src/Eagle_TRT.c **** 
 346:Src/Eagle_TRT.c **** 	gyro->REG_H = OUT_X_H_G_ADD;
 347:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_X_L_G_ADD;
 348:Src/Eagle_TRT.c **** 	gyro->x = LSMD9S0_read(gyro);
 349:Src/Eagle_TRT.c **** 
 350:Src/Eagle_TRT.c **** 	gyro->REG_H = OUT_Y_H_G_ADD;
 351:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Y_L_G_ADD;
 352:Src/Eagle_TRT.c **** 	gyro->y = LSMD9S0_read(gyro);
 353:Src/Eagle_TRT.c **** 
 354:Src/Eagle_TRT.c **** 	gyro->REG_H = OUT_Z_H_G_ADD;
 355:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Z_L_G_ADD;
 356:Src/Eagle_TRT.c **** 	gyro->z = LSMD9S0_read(gyro);
 357:Src/Eagle_TRT.c **** 
 358:Src/Eagle_TRT.c **** 	if (gyro->x > 32768)
 359:Src/Eagle_TRT.c **** 	{
 360:Src/Eagle_TRT.c **** 		gyro->x -= 65536;
 361:Src/Eagle_TRT.c **** 	}
 362:Src/Eagle_TRT.c **** 	if (gyro->y > 32768)
 363:Src/Eagle_TRT.c **** 	{
 364:Src/Eagle_TRT.c **** 		gyro->y -= 65536;
 365:Src/Eagle_TRT.c **** 	}
 366:Src/Eagle_TRT.c **** 	if (gyro->z > 32768)
 367:Src/Eagle_TRT.c **** 	{
 368:Src/Eagle_TRT.c **** 		gyro->z -= 65536;
 369:Src/Eagle_TRT.c **** 	}
 370:Src/Eagle_TRT.c **** 
 371:Src/Eagle_TRT.c **** 	gyro->x = gyro->x * ((float)gyro->scale / 32768);
 372:Src/Eagle_TRT.c **** 	gyro->y = gyro->y * ((float)gyro->scale / 32768);
 373:Src/Eagle_TRT.c **** 	gyro->z = gyro->z * ((float)gyro->scale / 32768);
 374:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccU79PPY.s 			page 8


 375:Src/Eagle_TRT.c **** 	gyro->x -= gyro->x_offset;
 376:Src/Eagle_TRT.c **** 	gyro->y -= gyro->y_offset;
 377:Src/Eagle_TRT.c **** 	gyro->z -= gyro->z_offset;
 378:Src/Eagle_TRT.c **** 
 379:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 380:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 381:Src/Eagle_TRT.c **** 	{
 382:Src/Eagle_TRT.c **** 		gyro->error_flag = 0;
 383:Src/Eagle_TRT.c **** 	}
 384:Src/Eagle_TRT.c **** 	else
 385:Src/Eagle_TRT.c **** 	{
 386:Src/Eagle_TRT.c **** 		gyro->error_flag = 1;
 387:Src/Eagle_TRT.c **** 	}
 388:Src/Eagle_TRT.c **** }
 389:Src/Eagle_TRT.c **** 
 390:Src/Eagle_TRT.c **** // Elaborating data
 391:Src/Eagle_TRT.c **** // Use the setted scale to calculate data in the correct ranges
 392:Src/Eagle_TRT.c **** // Aveage an array to remove noise
 393:Src/Eagle_TRT.c **** // Remove inital offset
 394:Src/Eagle_TRT.c **** void imu_elaborate_data(imu_stc *imu)
 395:Src/Eagle_TRT.c **** {
 396:Src/Eagle_TRT.c **** 	if (imu->x > 32768)
 397:Src/Eagle_TRT.c **** 	{
 398:Src/Eagle_TRT.c **** 		imu->x -= 65536;
 399:Src/Eagle_TRT.c **** 	}
 400:Src/Eagle_TRT.c **** 	if (imu->y > 32768)
 401:Src/Eagle_TRT.c **** 	{
 402:Src/Eagle_TRT.c **** 		imu->y -= 65536;
 403:Src/Eagle_TRT.c **** 	}
 404:Src/Eagle_TRT.c **** 	if (imu->z > 32768)
 405:Src/Eagle_TRT.c **** 	{
 406:Src/Eagle_TRT.c **** 		imu->z -= 65536;
 407:Src/Eagle_TRT.c **** 	}
 408:Src/Eagle_TRT.c **** 
 409:Src/Eagle_TRT.c **** 	imu->x = imu->x * ((float)imu->scale / 32768);
 410:Src/Eagle_TRT.c **** 	imu->y = imu->y * ((float)imu->scale / 32768);
 411:Src/Eagle_TRT.c **** 	imu->z = imu->z * ((float)imu->scale / 32768);
 412:Src/Eagle_TRT.c **** 
 413:Src/Eagle_TRT.c **** 	shift_array(imu->x_array, 10, imu->x);
 414:Src/Eagle_TRT.c **** 	shift_array(imu->y_array, 10, imu->y);
 415:Src/Eagle_TRT.c **** 	shift_array(imu->z_array, 10, imu->z);
 416:Src/Eagle_TRT.c **** 
 417:Src/Eagle_TRT.c **** 	imu->x = dynamic_average(imu->x_array, 10);
 418:Src/Eagle_TRT.c **** 	imu->y = dynamic_average(imu->y_array, 10);
 419:Src/Eagle_TRT.c **** 	imu->z = dynamic_average(imu->z_array, 10);
 420:Src/Eagle_TRT.c **** 
 421:Src/Eagle_TRT.c **** 	imu->x -= imu->x_offset;
 422:Src/Eagle_TRT.c **** 	imu->y -= imu->y_offset;
 423:Src/Eagle_TRT.c **** 	imu->z -= imu->z_offset;
 424:Src/Eagle_TRT.c **** }
 425:Src/Eagle_TRT.c **** 
 426:Src/Eagle_TRT.c **** ///Reading A_axis values
 427:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 428:Src/Eagle_TRT.c **** //x = pointer gyroscope x variable
 429:Src/Eagle_TRT.c **** //y = pointer gyroscope y variable
 430:Src/Eagle_TRT.c **** //z = pointer gyroscope z variable
 431:Src/Eagle_TRT.c **** //x_offset = offset x value
ARM GAS  /tmp/ccU79PPY.s 			page 9


 432:Src/Eagle_TRT.c **** //y_offset = offset y value
 433:Src/Eagle_TRT.c **** //z_offset = offset z value
 434:Src/Eagle_TRT.c **** void LSMD9S0_accel_read(imu_stc *accel)
 435:Src/Eagle_TRT.c **** {
 436:Src/Eagle_TRT.c **** 
 437:Src/Eagle_TRT.c **** 	accel->REG_H = OUT_X_H_A_ADD;
 438:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_X_L_A_ADD;
 439:Src/Eagle_TRT.c **** 	accel->x = LSMD9S0_read(accel);
 440:Src/Eagle_TRT.c **** 
 441:Src/Eagle_TRT.c **** 	accel->REG_H = OUT_Y_H_A_ADD;
 442:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Y_L_A_ADD;
 443:Src/Eagle_TRT.c **** 	accel->y = LSMD9S0_read(accel);
 444:Src/Eagle_TRT.c **** 
 445:Src/Eagle_TRT.c **** 	accel->REG_H = OUT_Z_H_A_ADD;
 446:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Z_L_A_ADD;
 447:Src/Eagle_TRT.c **** 	accel->z = LSMD9S0_read(accel);
 448:Src/Eagle_TRT.c **** 
 449:Src/Eagle_TRT.c **** 	if (accel->x > 32768)
 450:Src/Eagle_TRT.c **** 	{
 451:Src/Eagle_TRT.c **** 		accel->x -= 65536;
 452:Src/Eagle_TRT.c **** 	}
 453:Src/Eagle_TRT.c **** 	if (accel->y > 32768)
 454:Src/Eagle_TRT.c **** 	{
 455:Src/Eagle_TRT.c **** 		accel->y -= 65536;
 456:Src/Eagle_TRT.c **** 	}
 457:Src/Eagle_TRT.c **** 	if (accel->z > 32768)
 458:Src/Eagle_TRT.c **** 	{
 459:Src/Eagle_TRT.c **** 		accel->z -= 65536;
 460:Src/Eagle_TRT.c **** 	}
 461:Src/Eagle_TRT.c **** 
 462:Src/Eagle_TRT.c **** 	accel->x = accel->x * ((float)accel->scale / 32768);
 463:Src/Eagle_TRT.c **** 	accel->y = accel->y * ((float)accel->scale / 32768);
 464:Src/Eagle_TRT.c **** 	accel->z = accel->z * ((float)accel->scale / 32768);
 465:Src/Eagle_TRT.c **** 
 466:Src/Eagle_TRT.c **** 	accel->x -= accel->x_offset;
 467:Src/Eagle_TRT.c **** 	accel->y -= accel->y_offset;
 468:Src/Eagle_TRT.c **** 	accel->z -= accel->z_offset;
 469:Src/Eagle_TRT.c **** }
 470:Src/Eagle_TRT.c **** 
 471:Src/Eagle_TRT.c **** #endif
 472:Src/Eagle_TRT.c **** 
 473:Src/Eagle_TRT.c **** #ifdef HAL_CAN_MODULE_ENABLED
 474:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_can.h"
 475:Src/Eagle_TRT.c **** //function that sends an array via CAN
 476:Src/Eagle_TRT.c **** //hcan = pointer to can port
 477:Src/Eagle_TRT.c **** //id = id of the message to be sent
 478:Src/Eagle_TRT.c **** //dataTx = pointer to array that contains the data to be sent
 479:Src/Eagle_TRT.c **** //size = size of the array
 480:Src/Eagle_TRT.c **** can_stc can;
 481:Src/Eagle_TRT.c **** int CAN_Send(can_stc *can)
 482:Src/Eagle_TRT.c **** {
 483:Src/Eagle_TRT.c **** 
 484:Src/Eagle_TRT.c **** 	uint32_t mailbox;
 485:Src/Eagle_TRT.c **** 	uint8_t flag = 0;
 486:Src/Eagle_TRT.c **** 
 487:Src/Eagle_TRT.c **** 	CAN_TxHeaderTypeDef TxHeader;
 488:Src/Eagle_TRT.c **** 	TxHeader.StdId = can->id;
ARM GAS  /tmp/ccU79PPY.s 			page 10


 489:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 490:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 491:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 492:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 493:Src/Eagle_TRT.c **** 
 494:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetTxMailboxesFreeLevel(can->hcan) != 0 && HAL_CAN_IsTxMessagePending(can->hcan, CAN_T
 495:Src/Eagle_TRT.c **** 	{
 496:Src/Eagle_TRT.c **** 		HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx, &mailbox);
 497:Src/Eagle_TRT.c **** 		flag = 1;
 498:Src/Eagle_TRT.c **** 	}
 499:Src/Eagle_TRT.c **** 
 500:Src/Eagle_TRT.c **** 	return flag;
 501:Src/Eagle_TRT.c **** }
 502:Src/Eagle_TRT.c **** 
 503:Src/Eagle_TRT.c **** //receive a buffer from the CAN communication
 504:Src/Eagle_TRT.c **** //you can call this function in the callback of the CAN interrupt
 505:Src/Eagle_TRT.c **** //hcan = pointer to can port
 506:Src/Eagle_TRT.c **** //DataRx = pointer to the buffer you are receiveng
 507:Src/Eagle_TRT.c **** //size = size of the buffer you are using
 508:Src/Eagle_TRT.c **** int CAN_Receive(can_stc *can)
 509:Src/Eagle_TRT.c **** {
 510:Src/Eagle_TRT.c **** 
 511:Src/Eagle_TRT.c **** 	CAN_RxHeaderTypeDef RxHeader;
 512:Src/Eagle_TRT.c **** 
 513:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetRxFifoFillLevel(can->hcan, CAN_RX_FIFO0) != 0)
 514:Src/Eagle_TRT.c **** 	{
 515:Src/Eagle_TRT.c **** 		HAL_CAN_GetRxMessage(can->hcan, CAN_RX_FIFO0, &RxHeader, can->dataRx);
 516:Src/Eagle_TRT.c **** 	}
 517:Src/Eagle_TRT.c **** 
 518:Src/Eagle_TRT.c **** 	int id = RxHeader.StdId;
 519:Src/Eagle_TRT.c **** 
 520:Src/Eagle_TRT.c **** 	return id;
 521:Src/Eagle_TRT.c **** }
 522:Src/Eagle_TRT.c **** #endif
 523:Src/Eagle_TRT.c **** 
 524:Src/Eagle_TRT.c **** #ifdef HAL_UART_MODULE_ENABLED
 525:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_uart.h"
 526:Src/Eagle_TRT.c **** #include "malloc.h"
 527:Src/Eagle_TRT.c **** ///---- queue ---- ///
 528:Src/Eagle_TRT.c **** static int next(int ret, int dim)
 529:Src/Eagle_TRT.c **** {
  27              		.loc 1 529 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 530:Src/Eagle_TRT.c **** 
 531:Src/Eagle_TRT.c **** 	return (ret + 1) % dim;
  33              		.loc 1 531 0
  34 0000 0130     		adds	r0, r0, #1
  35              	.LVL1:
  36 0002 90FBF1F3 		sdiv	r3, r0, r1
 532:Src/Eagle_TRT.c **** }
  37              		.loc 1 532 0
  38 0006 01FB1300 		mls	r0, r1, r3, r0
  39              	.LVL2:
ARM GAS  /tmp/ccU79PPY.s 			page 11


  40 000a 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE141:
  44              		.section	.text.emptyp,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	emptyp:
  52              	.LFB143:
 533:Src/Eagle_TRT.c **** 
 534:Src/Eagle_TRT.c **** // Implementazione dinamica
 535:Src/Eagle_TRT.c **** void init(queue *q)
 536:Src/Eagle_TRT.c **** {
 537:Src/Eagle_TRT.c **** 
 538:Src/Eagle_TRT.c **** 	q->tail = q->head = 0;
 539:Src/Eagle_TRT.c **** 	q->dim = 40;
 540:Src/Eagle_TRT.c **** }
 541:Src/Eagle_TRT.c **** 
 542:Src/Eagle_TRT.c **** static int emptyp(const queue *q)
 543:Src/Eagle_TRT.c **** {
  53              		.loc 1 543 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL3:
 544:Src/Eagle_TRT.c **** 
 545:Src/Eagle_TRT.c **** 	return (q->tail == q->head);
  59              		.loc 1 545 0
  60 0000 4268     		ldr	r2, [r0, #4]
  61 0002 0068     		ldr	r0, [r0]
  62              	.LVL4:
 546:Src/Eagle_TRT.c **** }
  63              		.loc 1 546 0
  64 0004 8242     		cmp	r2, r0
  65 0006 14BF     		ite	ne
  66 0008 0020     		movne	r0, #0
  67 000a 0120     		moveq	r0, #1
  68 000c 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE143:
  72              		.section	.text.fullp,"ax",%progbits
  73              		.align	1
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	fullp:
  80              	.LFB144:
 547:Src/Eagle_TRT.c **** 
 548:Src/Eagle_TRT.c **** static int fullp(const queue *q)
 549:Src/Eagle_TRT.c **** {
  81              		.loc 1 549 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccU79PPY.s 			page 12


  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL5:
  86 0000 10B5     		push	{r4, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  91 0002 0446     		mov	r4, r0
 550:Src/Eagle_TRT.c **** 
 551:Src/Eagle_TRT.c **** 	return (next(q->tail, q->dim) == q->head);
  92              		.loc 1 551 0
  93 0004 8168     		ldr	r1, [r0, #8]
  94 0006 4068     		ldr	r0, [r0, #4]
  95              	.LVL6:
  96 0008 FFF7FEFF 		bl	next
  97              	.LVL7:
  98 000c 2368     		ldr	r3, [r4]
 552:Src/Eagle_TRT.c **** }
  99              		.loc 1 552 0
 100 000e 9842     		cmp	r0, r3
 101 0010 14BF     		ite	ne
 102 0012 0020     		movne	r0, #0
 103 0014 0120     		moveq	r0, #1
 104 0016 10BD     		pop	{r4, pc}
 105              		.cfi_endproc
 106              	.LFE144:
 108              		.section	.text.checksum,"ax",%progbits
 109              		.align	1
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	checksum:
 116              	.LFB151:
 553:Src/Eagle_TRT.c **** 
 554:Src/Eagle_TRT.c **** int push(char *str, queue *q)
 555:Src/Eagle_TRT.c **** {
 556:Src/Eagle_TRT.c **** 	int res;
 557:Src/Eagle_TRT.c **** 	if (fullp(q))
 558:Src/Eagle_TRT.c **** 	{
 559:Src/Eagle_TRT.c **** 		res = FAIL;
 560:Src/Eagle_TRT.c **** 	}
 561:Src/Eagle_TRT.c **** 	else
 562:Src/Eagle_TRT.c **** 	{
 563:Src/Eagle_TRT.c **** 		int length = strlen(str);
 564:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 565:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 566:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 567:Src/Eagle_TRT.c **** 		if (q->tail == 39)
 568:Src/Eagle_TRT.c **** 		{
 569:Src/Eagle_TRT.c **** 			q->tail = 0;
 570:Src/Eagle_TRT.c **** 		}
 571:Src/Eagle_TRT.c **** 		else
 572:Src/Eagle_TRT.c **** 		{
 573:Src/Eagle_TRT.c **** 			q->tail++;
 574:Src/Eagle_TRT.c **** 		}
 575:Src/Eagle_TRT.c **** 		res = OK;
ARM GAS  /tmp/ccU79PPY.s 			page 13


 576:Src/Eagle_TRT.c **** 	}
 577:Src/Eagle_TRT.c **** 
 578:Src/Eagle_TRT.c **** 	return res;
 579:Src/Eagle_TRT.c **** }
 580:Src/Eagle_TRT.c **** 
 581:Src/Eagle_TRT.c **** int pop(char *str, queue *q)
 582:Src/Eagle_TRT.c **** {
 583:Src/Eagle_TRT.c **** 	int res;
 584:Src/Eagle_TRT.c **** 	if (emptyp(q))
 585:Src/Eagle_TRT.c **** 	{
 586:Src/Eagle_TRT.c **** 		res = FAIL;
 587:Src/Eagle_TRT.c **** 	}
 588:Src/Eagle_TRT.c **** 	else
 589:Src/Eagle_TRT.c **** 	{
 590:Src/Eagle_TRT.c **** 		strcpy(str, q->elem[q->head]);
 591:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 592:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 593:Src/Eagle_TRT.c **** 		if (q->head == 39)
 594:Src/Eagle_TRT.c **** 		{
 595:Src/Eagle_TRT.c **** 			q->head = 0;
 596:Src/Eagle_TRT.c **** 		}
 597:Src/Eagle_TRT.c **** 		else
 598:Src/Eagle_TRT.c **** 		{
 599:Src/Eagle_TRT.c **** 			q->head++;
 600:Src/Eagle_TRT.c **** 		}
 601:Src/Eagle_TRT.c **** 		res = OK;
 602:Src/Eagle_TRT.c **** 	}
 603:Src/Eagle_TRT.c **** 
 604:Src/Eagle_TRT.c **** 	return res;
 605:Src/Eagle_TRT.c **** }
 606:Src/Eagle_TRT.c **** /// ---- end queue ----///
 607:Src/Eagle_TRT.c **** queue print_q = {.head = 0, .tail = 0, .dim = 0};
 608:Src/Eagle_TRT.c **** 
 609:Src/Eagle_TRT.c **** int print(UART_HandleTypeDef *huart, char *text_print_function)
 610:Src/Eagle_TRT.c **** {
 611:Src/Eagle_TRT.c **** 
 612:Src/Eagle_TRT.c **** 	int ret = 0;
 613:Src/Eagle_TRT.c **** 
 614:Src/Eagle_TRT.c **** 	if (HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function)) == HA
 615:Src/Eagle_TRT.c **** 	{
 616:Src/Eagle_TRT.c **** 		ret = 1;
 617:Src/Eagle_TRT.c **** 	}
 618:Src/Eagle_TRT.c **** 	else
 619:Src/Eagle_TRT.c **** 	{
 620:Src/Eagle_TRT.c **** 		if (push(text_print_function, &print_q) == FAIL)
 621:Src/Eagle_TRT.c **** 		{
 622:Src/Eagle_TRT.c **** 			ret = 0;
 623:Src/Eagle_TRT.c **** 		}
 624:Src/Eagle_TRT.c **** 		else
 625:Src/Eagle_TRT.c **** 		{
 626:Src/Eagle_TRT.c **** 			ret = 1;
 627:Src/Eagle_TRT.c **** 		}
 628:Src/Eagle_TRT.c **** 	}
 629:Src/Eagle_TRT.c **** 
 630:Src/Eagle_TRT.c **** 	return ret;
 631:Src/Eagle_TRT.c **** }
 632:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccU79PPY.s 			page 14


 633:Src/Eagle_TRT.c **** void print_it(UART_HandleTypeDef *huart)
 634:Src/Eagle_TRT.c **** { //put in the uart interrupt
 635:Src/Eagle_TRT.c **** 
 636:Src/Eagle_TRT.c **** 	char text_print_function[50];
 637:Src/Eagle_TRT.c **** 
 638:Src/Eagle_TRT.c **** 	if (pop(text_print_function, &print_q) == OK)
 639:Src/Eagle_TRT.c **** 	{
 640:Src/Eagle_TRT.c **** 		HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function));
 641:Src/Eagle_TRT.c **** 	}
 642:Src/Eagle_TRT.c **** }
 643:Src/Eagle_TRT.c **** 
 644:Src/Eagle_TRT.c **** UART_HandleTypeDef *huart_GPS;
 645:Src/Eagle_TRT.c **** int start_string_gps = 0;
 646:Src/Eagle_TRT.c **** char string_gps[100];
 647:Src/Eagle_TRT.c **** int cont_string, cont_comma;
 648:Src/Eagle_TRT.c **** char data_string_gps;
 649:Src/Eagle_TRT.c **** char buffer_gps[2];
 650:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum);
 651:Src/Eagle_TRT.c **** 
 652:Src/Eagle_TRT.c **** /* GPS library
 653:Src/Eagle_TRT.c **** 	gps_init() ->initialize the GPS. Put it in the main initialization. Example:
 654:Src/Eagle_TRT.c **** 	gps_struct gps_main; //define the name of gps_structure istance
 655:Src/Eagle_TRT.c **** 	if(gps_init(&huart3,&gps_main)==0){
 656:Src/Eagle_TRT.c **** 		/--error--/
 657:Src/Eagle_TRT.c **** 	}
 658:Src/Eagle_TRT.c **** 	gps_read_it() -> put it in interrupt. Example:
 659:Src/Eagle_TRT.c **** 	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 660:Src/Eagle_TRT.c **** 		gps_read_it(huart,&gps_main);
 661:Src/Eagle_TRT.c **** 	}*/
 662:Src/Eagle_TRT.c **** 
 663:Src/Eagle_TRT.c **** int gps_init(UART_HandleTypeDef *huart, gps_struct *gps)
 664:Src/Eagle_TRT.c **** { //initialization of GPS
 665:Src/Eagle_TRT.c **** 
 666:Src/Eagle_TRT.c **** 	//if return--> 0=error,1=ok
 667:Src/Eagle_TRT.c **** 	huart_GPS = huart;
 668:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 669:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 670:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 671:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 672:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 673:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 674:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 675:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 676:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 677:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 678:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 679:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 680:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 681:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 682:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 683:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 684:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 685:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 686:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 687:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 688:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 689:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
ARM GAS  /tmp/ccU79PPY.s 			page 15


 690:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 691:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 692:Src/Eagle_TRT.c **** 
 693:Src/Eagle_TRT.c **** 	return 1;
 694:Src/Eagle_TRT.c **** }
 695:Src/Eagle_TRT.c **** 
 696:Src/Eagle_TRT.c **** int gps_read_it(UART_HandleTypeDef *huart, gps_struct *gps)
 697:Src/Eagle_TRT.c **** {
 698:Src/Eagle_TRT.c **** 
 699:Src/Eagle_TRT.c **** 	int ret = 0; //return--> 0=error,1=ok
 700:Src/Eagle_TRT.c **** 
 701:Src/Eagle_TRT.c **** 	/*
 702:Src/Eagle_TRT.c **** 			* Example of strings
 703:Src/Eagle_TRT.c **** 			* $GPGGA,064951.000,2307.1256,N,12016.4438,E,1,8,0.95,39.9,M,17.8,M,,*65
 704:Src/Eagle_TRT.c **** 			* $GPGSA,A,3,29,21,26,15,18,09,06,10,,,,,2.32,0.95,2.11*00
 705:Src/Eagle_TRT.c **** 			* $GPGSV,3,1,09,29,36,029,42,21,46,314,43,26,44,020,43,15,21,321,39*7D
 706:Src/Eagle_TRT.c **** 			  $GPGSV,3,2,09,18,26,314,40,09,57,170,44,06,20,229,37,10,26,084,37*77
 707:Src/Eagle_TRT.c **** 			  $GPGSV,3,3,09,07,,,26*73
 708:Src/Eagle_TRT.c **** 			* $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C
 709:Src/Eagle_TRT.c **** 			* $GPVTG,165.48,T,,M,0.03,N,0.06,K,A*37
 710:Src/Eagle_TRT.c **** 			* $PGTOP,11,3 *6F
 711:Src/Eagle_TRT.c **** 			*
 712:Src/Eagle_TRT.c **** 			*
 713:Src/Eagle_TRT.c **** 			*
 714:Src/Eagle_TRT.c **** 			* 	$GPBOD - Bearing, origin to destination
 715:Src/Eagle_TRT.c **** 				$GPBWC - Bearing and distance to waypoint, great circle
 716:Src/Eagle_TRT.c **** 				$GPGGA - Global Positioning System Fix Data
 717:Src/Eagle_TRT.c **** 				$GPGLL - Geographic position, latitude / longitude
 718:Src/Eagle_TRT.c **** 				$GPGSA - GPS DOP and active satellites
 719:Src/Eagle_TRT.c **** 				$GPGSV - GPS Satellites in view
 720:Src/Eagle_TRT.c **** 				$GPHDT - Heading, True
 721:Src/Eagle_TRT.c **** 				$GPR00 - List of waypoints in currently active route
 722:Src/Eagle_TRT.c **** 				$GPRMA - Recommended minimum specific Loran-C data
 723:Src/Eagle_TRT.c **** 				$GPRMB - Recommended minimum navigation info
 724:Src/Eagle_TRT.c **** 				$GPRMC - Recommended minimum specific GPS/Transit data
 725:Src/Eagle_TRT.c **** 				$GPRTE - Routes
 726:Src/Eagle_TRT.c **** 				$GPTRF - Transit Fix Data
 727:Src/Eagle_TRT.c **** 				$GPSTN - Multiple Data ID
 728:Src/Eagle_TRT.c **** 				$GPVBW - Dual Ground / Water Speed
 729:Src/Eagle_TRT.c **** 				$GPVTG - Track made good and ground speed
 730:Src/Eagle_TRT.c **** 				$GPWPL - Waypoint location
 731:Src/Eagle_TRT.c **** 				$GPXTE - Cross-track error, Measured
 732:Src/Eagle_TRT.c **** 				$GPZDA - Date & Time
 733:Src/Eagle_TRT.c **** 				http://aprs.gids.nl/nmea/
 734:Src/Eagle_TRT.c **** 			*/
 735:Src/Eagle_TRT.c **** 	if (huart == huart_GPS)
 736:Src/Eagle_TRT.c **** 	{
 737:Src/Eagle_TRT.c **** 		//check if it's the huart_gps interrupt
 738:Src/Eagle_TRT.c **** 		HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request interrupt for the next data
 739:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 740:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 741:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 742:Src/Eagle_TRT.c **** 			string_gps[cont_string] = data_string_gps; //save the data into the array
 743:Src/Eagle_TRT.c **** 			cont_string++;
 744:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 745:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 746:Src/Eagle_TRT.c **** 				cont_string--;
ARM GAS  /tmp/ccU79PPY.s 			page 16


 747:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 748:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 749:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 750:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 751:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 752:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 753:Src/Eagle_TRT.c **** 						int cont_comma = 0, cont_latitude = 0, cont_longitude = 0, cont_altitude = 0, cont_time = 0;
 754:Src/Eagle_TRT.c **** 						for (int i = 5; i < 100; i++)
 755:Src/Eagle_TRT.c **** 						{
 756:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 757:Src/Eagle_TRT.c **** 								cont_comma++;
 758:Src/Eagle_TRT.c **** 							else
 759:Src/Eagle_TRT.c **** 							{
 760:Src/Eagle_TRT.c **** 								if (cont_comma == 1)
 761:Src/Eagle_TRT.c **** 								{ //save the time
 762:Src/Eagle_TRT.c **** 									gps->time[cont_time] = string_gps[i];
 763:Src/Eagle_TRT.c **** 									cont_time++;
 764:Src/Eagle_TRT.c **** 								}
 765:Src/Eagle_TRT.c **** 								else if (cont_comma == 2)
 766:Src/Eagle_TRT.c **** 								{ //save latitude
 767:Src/Eagle_TRT.c **** 									gps->latitude[cont_latitude] = string_gps[i];
 768:Src/Eagle_TRT.c **** 									cont_latitude++;
 769:Src/Eagle_TRT.c **** 								}
 770:Src/Eagle_TRT.c **** 								else if (cont_comma == 3)
 771:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 772:Src/Eagle_TRT.c **** 									gps->latitude_o[0] = string_gps[i];
 773:Src/Eagle_TRT.c **** 								}
 774:Src/Eagle_TRT.c **** 								else if (cont_comma == 4)
 775:Src/Eagle_TRT.c **** 								{ //save longitude
 776:Src/Eagle_TRT.c **** 									gps->longitude[cont_longitude] = string_gps[i];
 777:Src/Eagle_TRT.c **** 									cont_longitude++;
 778:Src/Eagle_TRT.c **** 								}
 779:Src/Eagle_TRT.c **** 								else if (cont_comma == 5)
 780:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 781:Src/Eagle_TRT.c **** 									gps->longitude_o[0] = string_gps[i];
 782:Src/Eagle_TRT.c **** 								}
 783:Src/Eagle_TRT.c **** 								else if (cont_comma == 6)
 784:Src/Eagle_TRT.c **** 								{
 785:Src/Eagle_TRT.c **** 									gps->fix_status = string_gps[i];
 786:Src/Eagle_TRT.c **** 								}
 787:Src/Eagle_TRT.c **** 								else if (cont_comma == 9)
 788:Src/Eagle_TRT.c **** 								{ //save altitude
 789:Src/Eagle_TRT.c **** 									gps->altitude[cont_altitude] = string_gps[i];
 790:Src/Eagle_TRT.c **** 									cont_altitude++;
 791:Src/Eagle_TRT.c **** 								}
 792:Src/Eagle_TRT.c **** 								else if (cont_comma == 10)
 793:Src/Eagle_TRT.c **** 								{
 794:Src/Eagle_TRT.c **** 									i = 100; //end the cicle
 795:Src/Eagle_TRT.c **** 								}
 796:Src/Eagle_TRT.c **** 							}
 797:Src/Eagle_TRT.c **** 						}
 798:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 799:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 800:Src/Eagle_TRT.c **** 						{
 801:Src/Eagle_TRT.c **** 							gps->latitude_i_h = 0;
 802:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 803:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
ARM GAS  /tmp/ccU79PPY.s 			page 17


 804:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 805:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 806:Src/Eagle_TRT.c **** 						}
 807:Src/Eagle_TRT.c **** 						else
 808:Src/Eagle_TRT.c **** 						{
 809:Src/Eagle_TRT.c **** 							gps->latitude_i = (long int)(atof(gps->latitude) * 10000);
 810:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 811:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 812:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 813:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 814:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 815:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 816:Src/Eagle_TRT.c **** 						}
 817:Src/Eagle_TRT.c **** 
 818:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x08;
 819:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 820:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 821:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 822:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 823:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 824:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 825:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 826:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 827:Src/Eagle_TRT.c **** 						can.size = 8;
 828:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 829:Src/Eagle_TRT.c **** 					}
 830:Src/Eagle_TRT.c **** 					else
 831:Src/Eagle_TRT.c **** 					{
 832:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 833:Src/Eagle_TRT.c **** 					}
 834:Src/Eagle_TRT.c **** 				}
 835:Src/Eagle_TRT.c **** 				else if (string_gps[2] == 'V' && string_gps[3] == 'T' && string_gps[4] == 'G')
 836:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 837:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 838:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 839:Src/Eagle_TRT.c **** 						cont_comma = 0;
 840:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 841:Src/Eagle_TRT.c **** 						for (int i = 5; i < cont_string; i++)
 842:Src/Eagle_TRT.c **** 						{
 843:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 844:Src/Eagle_TRT.c **** 								cont_comma++;
 845:Src/Eagle_TRT.c **** 							else
 846:Src/Eagle_TRT.c **** 							{
 847:Src/Eagle_TRT.c **** 								if (cont_comma == 7)
 848:Src/Eagle_TRT.c **** 								{ //save the speed
 849:Src/Eagle_TRT.c **** 									gps->speed[cont_speed] = string_gps[i];
 850:Src/Eagle_TRT.c **** 									cont_speed++;
 851:Src/Eagle_TRT.c **** 								}
 852:Src/Eagle_TRT.c **** 								else if (cont_comma == 8)
 853:Src/Eagle_TRT.c **** 								{
 854:Src/Eagle_TRT.c **** 									i = cont_string;
 855:Src/Eagle_TRT.c **** 								}
 856:Src/Eagle_TRT.c **** 							}
 857:Src/Eagle_TRT.c **** 						}
 858:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 859:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 860:Src/Eagle_TRT.c **** 						{
ARM GAS  /tmp/ccU79PPY.s 			page 18


 861:Src/Eagle_TRT.c **** 							gps->speed_i = 0;
 862:Src/Eagle_TRT.c **** 						}
 863:Src/Eagle_TRT.c **** 						else
 864:Src/Eagle_TRT.c **** 						{
 865:Src/Eagle_TRT.c **** 							gps->speed_i = (int)(atof(gps->speed) * 100);
 866:Src/Eagle_TRT.c **** 						}
 867:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x07;
 868:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 869:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 870:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 871:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 872:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 873:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 874:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 875:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 876:Src/Eagle_TRT.c **** 						can.size = 8;
 877:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 878:Src/Eagle_TRT.c **** 						ret = 1;
 879:Src/Eagle_TRT.c **** 					}
 880:Src/Eagle_TRT.c **** 					else
 881:Src/Eagle_TRT.c **** 					{
 882:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 883:Src/Eagle_TRT.c **** 					}
 884:Src/Eagle_TRT.c **** 				}
 885:Src/Eagle_TRT.c **** 			}
 886:Src/Eagle_TRT.c **** 		}
 887:Src/Eagle_TRT.c **** 		else
 888:Src/Eagle_TRT.c **** 		{
 889:Src/Eagle_TRT.c **** 			if (data_string_gps == '$')
 890:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 891:Src/Eagle_TRT.c **** 				start_string_gps = 1; //new string started
 892:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 893:Src/Eagle_TRT.c **** 			}
 894:Src/Eagle_TRT.c **** 		}
 895:Src/Eagle_TRT.c **** 	}
 896:Src/Eagle_TRT.c **** 	return ret;
 897:Src/Eagle_TRT.c **** }
 898:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
 899:Src/Eagle_TRT.c **** { //check the checksum
 117              		.loc 1 899 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL8:
 122 0000 70B5     		push	{r4, r5, r6, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 4, -16
 126              		.cfi_offset 5, -12
 127              		.cfi_offset 6, -8
 128              		.cfi_offset 14, -4
 129 0002 82B0     		sub	sp, sp, #8
 130              	.LCFI2:
 131              		.cfi_def_cfa_offset 24
 132              	.LVL9:
 900:Src/Eagle_TRT.c **** 	//return 1;
 901:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccU79PPY.s 			page 19


 902:Src/Eagle_TRT.c **** 	int res = 0;
 903:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 904:Src/Eagle_TRT.c **** 	int i = 0;
 905:Src/Eagle_TRT.c **** 
 906:Src/Eagle_TRT.c **** 	for (i = 0; (i < size_string_checksum) && (string_checksum[i] != '*'); i++)
 133              		.loc 1 906 0
 134 0004 0023     		movs	r3, #0
 902:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 135              		.loc 1 902 0
 136 0006 1C46     		mov	r4, r3
 137              	.LVL10:
 138              	.L6:
 139              		.loc 1 906 0 discriminator 1
 140 0008 8B42     		cmp	r3, r1
 141 000a 02DA     		bge	.L7
 142              		.loc 1 906 0 is_stmt 0 discriminator 3
 143 000c C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 144 000e 2A2A     		cmp	r2, #42
 145 0010 1ED1     		bne	.L8
 146              	.L7:
 907:Src/Eagle_TRT.c **** 	{
 908:Src/Eagle_TRT.c **** 		res = res ^ string_checksum[i];
 909:Src/Eagle_TRT.c **** 	}
 910:Src/Eagle_TRT.c **** 	char check[2] = {string_checksum[i + 1], string_checksum[i + 2]};
 147              		.loc 1 910 0 is_stmt 1
 148 0012 1844     		add	r0, r0, r3
 149              	.LVL11:
 150 0014 4578     		ldrb	r5, [r0, #1]	@ zero_extendqisi2
 151 0016 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 911:Src/Eagle_TRT.c **** 	char res_char[3];
 912:Src/Eagle_TRT.c **** 	sprintf(res_char, "%x", res);
 152              		.loc 1 912 0
 153 0018 2246     		mov	r2, r4
 154 001a 1949     		ldr	r1, .L17
 155              	.LVL12:
 156 001c 01A8     		add	r0, sp, #4
 157 001e FFF7FEFF 		bl	sprintf
 158              	.LVL13:
 913:Src/Eagle_TRT.c **** 	if (res < 17)
 159              		.loc 1 913 0
 160 0022 102C     		cmp	r4, #16
 161 0024 06DC     		bgt	.L9
 914:Src/Eagle_TRT.c **** 	{
 915:Src/Eagle_TRT.c **** 		res_char[1] = res_char[0];
 162              		.loc 1 915 0
 163 0026 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 164 002a 8DF80530 		strb	r3, [sp, #5]
 916:Src/Eagle_TRT.c **** 		res_char[0] = '0';
 165              		.loc 1 916 0
 166 002e 3023     		movs	r3, #48
 167 0030 8DF80430 		strb	r3, [sp, #4]
 168              	.L9:
 902:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 169              		.loc 1 902 0 discriminator 1
 170 0034 0023     		movs	r3, #0
 171              	.L10:
 172              	.LVL14:
ARM GAS  /tmp/ccU79PPY.s 			page 20


 173              	.LBB2:
 917:Src/Eagle_TRT.c **** 	}
 918:Src/Eagle_TRT.c **** 	for (int j = 0; j < 2; j++)
 174              		.loc 1 918 0 discriminator 1
 175 0036 012B     		cmp	r3, #1
 176 0038 0DDD     		ble	.L12
 177              	.LBE2:
 919:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 920:Src/Eagle_TRT.c **** 		if ((int)res_char[j] >= 'a' && (int)res_char[j] <= 'f')
 921:Src/Eagle_TRT.c **** 		{
 922:Src/Eagle_TRT.c **** 			res_char[j] = (char)((int)res_char[j] + offset_maiusc);
 923:Src/Eagle_TRT.c **** 		}
 924:Src/Eagle_TRT.c **** 	}
 925:Src/Eagle_TRT.c **** 	if (res_char[0] == check[0] && res_char[1] == check[1])
 178              		.loc 1 925 0
 179 003a 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 180              	.LVL15:
 181 003e 9D42     		cmp	r5, r3
 182 0040 19D1     		bne	.L14
 183              		.loc 1 925 0 is_stmt 0 discriminator 1
 184 0042 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 185 0046 9E42     		cmp	r6, r3
 186 0048 17D0     		beq	.L15
 926:Src/Eagle_TRT.c **** 	{
 927:Src/Eagle_TRT.c **** 		return 1; //checksum is correct
 928:Src/Eagle_TRT.c **** 	}
 929:Src/Eagle_TRT.c **** 	else
 930:Src/Eagle_TRT.c **** 	{
 931:Src/Eagle_TRT.c **** 		return 0; //checksum failed
 187              		.loc 1 931 0 is_stmt 1
 188 004a 0020     		movs	r0, #0
 189              	.L5:
 932:Src/Eagle_TRT.c **** 	}
 933:Src/Eagle_TRT.c **** }
 190              		.loc 1 933 0
 191 004c 02B0     		add	sp, sp, #8
 192              	.LCFI3:
 193              		.cfi_remember_state
 194              		.cfi_def_cfa_offset 16
 195              		@ sp needed
 196 004e 70BD     		pop	{r4, r5, r6, pc}
 197              	.LVL16:
 198              	.L8:
 199              	.LCFI4:
 200              		.cfi_restore_state
 908:Src/Eagle_TRT.c **** 	}
 201              		.loc 1 908 0 discriminator 4
 202 0050 5440     		eors	r4, r4, r2
 203              	.LVL17:
 906:Src/Eagle_TRT.c **** 	{
 204              		.loc 1 906 0 discriminator 4
 205 0052 0133     		adds	r3, r3, #1
 206              	.LVL18:
 207 0054 D8E7     		b	.L6
 208              	.LVL19:
 209              	.L12:
 210              	.LBB3:
ARM GAS  /tmp/ccU79PPY.s 			page 21


 920:Src/Eagle_TRT.c **** 		{
 211              		.loc 1 920 0
 212 0056 02AA     		add	r2, sp, #8
 213 0058 1A44     		add	r2, r2, r3
 214 005a 12F8042C 		ldrb	r2, [r2, #-4]	@ zero_extendqisi2
 215 005e A2F16101 		sub	r1, r2, #97
 216 0062 C9B2     		uxtb	r1, r1
 217 0064 0529     		cmp	r1, #5
 218 0066 04D8     		bhi	.L11
 922:Src/Eagle_TRT.c **** 		}
 219              		.loc 1 922 0
 220 0068 203A     		subs	r2, r2, #32
 221 006a 02A9     		add	r1, sp, #8
 222 006c 1944     		add	r1, r1, r3
 223 006e 01F8042C 		strb	r2, [r1, #-4]
 224              	.L11:
 918:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 225              		.loc 1 918 0 discriminator 2
 226 0072 0133     		adds	r3, r3, #1
 227              	.LVL20:
 228 0074 DFE7     		b	.L10
 229              	.LVL21:
 230              	.L14:
 231              	.LBE3:
 931:Src/Eagle_TRT.c **** 	}
 232              		.loc 1 931 0
 233 0076 0020     		movs	r0, #0
 234 0078 E8E7     		b	.L5
 235              	.L15:
 927:Src/Eagle_TRT.c **** 	}
 236              		.loc 1 927 0
 237 007a 0120     		movs	r0, #1
 238 007c E6E7     		b	.L5
 239              	.L18:
 240 007e 00BF     		.align	2
 241              	.L17:
 242 0080 00000000 		.word	.LC0
 243              		.cfi_endproc
 244              	.LFE151:
 246              		.section	.text.send_config,"ax",%progbits
 247              		.align	1
 248              		.global	send_config
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	send_config:
 255              	.LFB131:
 129:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 256              		.loc 1 129 0
 257              		.cfi_startproc
 258              		@ args = 4, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL22:
 261 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 262              	.LCFI5:
 263              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccU79PPY.s 			page 22


 264              		.cfi_offset 3, -24
 265              		.cfi_offset 4, -20
 266              		.cfi_offset 5, -16
 267              		.cfi_offset 6, -12
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 0646     		mov	r6, r0
 271 0004 0C46     		mov	r4, r1
 272 0006 1546     		mov	r5, r2
 273 0008 1F46     		mov	r7, r3
 130:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 274              		.loc 1 130 0
 275 000a 0022     		movs	r2, #0
 276              	.LVL23:
 277 000c 2946     		mov	r1, r5
 278              	.LVL24:
 279 000e 2046     		mov	r0, r4
 280              	.LVL25:
 281 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 282              	.LVL26:
 131:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 283              		.loc 1 131 0
 284 0014 104B     		ldr	r3, .L23
 285 0016 1A68     		ldr	r2, [r3]
 286 0018 0023     		movs	r3, #0
 287 001a 5362     		str	r3, [r2, #36]
 288              	.L20:
 132:Src/Eagle_TRT.c **** 	{
 289              		.loc 1 132 0 discriminator 1
 290 001c 536A     		ldr	r3, [r2, #36]
 291 001e 142B     		cmp	r3, #20
 292 0020 FCD9     		bls	.L20
 135:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 293              		.loc 1 135 0
 294 0022 0A23     		movs	r3, #10
 295 0024 0122     		movs	r2, #1
 296 0026 3946     		mov	r1, r7
 297 0028 D6F83002 		ldr	r0, [r6, #560]
 298 002c FFF7FEFF 		bl	HAL_SPI_Transmit
 299              	.LVL27:
 136:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 300              		.loc 1 136 0
 301 0030 0A23     		movs	r3, #10
 302 0032 0122     		movs	r2, #1
 303 0034 0699     		ldr	r1, [sp, #24]
 304 0036 D6F83002 		ldr	r0, [r6, #560]
 305 003a FFF7FEFF 		bl	HAL_SPI_Transmit
 306              	.LVL28:
 137:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 307              		.loc 1 137 0
 308 003e 064B     		ldr	r3, .L23
 309 0040 1A68     		ldr	r2, [r3]
 310 0042 0023     		movs	r3, #0
 311 0044 5362     		str	r3, [r2, #36]
 312              	.L21:
 138:Src/Eagle_TRT.c **** 	{
 313              		.loc 1 138 0 discriminator 1
ARM GAS  /tmp/ccU79PPY.s 			page 23


 314 0046 536A     		ldr	r3, [r2, #36]
 315 0048 142B     		cmp	r3, #20
 316 004a FCD9     		bls	.L21
 141:Src/Eagle_TRT.c **** }
 317              		.loc 1 141 0
 318 004c 0122     		movs	r2, #1
 319 004e 2946     		mov	r1, r5
 320 0050 2046     		mov	r0, r4
 321 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 322              	.LVL29:
 323 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 324              	.LVL30:
 325              	.L24:
 326              		.align	2
 327              	.L23:
 328 0058 00000000 		.word	htim2
 329              		.cfi_endproc
 330              	.LFE131:
 332              		.section	.text.LSMD9S0_accel_gyro_init,"ax",%progbits
 333              		.align	1
 334              		.global	LSMD9S0_accel_gyro_init
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 338              		.fpu fpv4-sp-d16
 340              	LSMD9S0_accel_gyro_init:
 341              	.LFB132:
 148:Src/Eagle_TRT.c **** 
 342              		.loc 1 148 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL31:
 347 0000 30B5     		push	{r4, r5, lr}
 348              	.LCFI6:
 349              		.cfi_def_cfa_offset 12
 350              		.cfi_offset 4, -12
 351              		.cfi_offset 5, -8
 352              		.cfi_offset 14, -4
 353 0002 83B0     		sub	sp, sp, #12
 354              	.LCFI7:
 355              		.cfi_def_cfa_offset 24
 356 0004 0446     		mov	r4, r0
 357 0006 0D46     		mov	r5, r1
 151:Src/Eagle_TRT.c **** 
 358              		.loc 1 151 0
 359 0008 B1F82422 		ldrh	r2, [r1, #548]
 360 000c 704B     		ldr	r3, .L43
 361 000e 0093     		str	r3, [sp]
 362 0010 704B     		ldr	r3, .L43+4
 363 0012 D1F82012 		ldr	r1, [r1, #544]
 364              	.LVL32:
 365 0016 2846     		mov	r0, r5
 366              	.LVL33:
 367 0018 FFF7FEFF 		bl	send_config
 368              	.LVL34:
 153:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccU79PPY.s 			page 24


 369              		.loc 1 153 0
 370 001c 0120     		movs	r0, #1
 371 001e FFF7FEFF 		bl	HAL_Delay
 372              	.LVL35:
 156:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 373              		.loc 1 156 0
 374 0022 B4F82422 		ldrh	r2, [r4, #548]
 375 0026 6C4B     		ldr	r3, .L43+8
 376 0028 0093     		str	r3, [sp]
 377 002a 6C4B     		ldr	r3, .L43+12
 378 002c D4F82012 		ldr	r1, [r4, #544]
 379 0030 2046     		mov	r0, r4
 380 0032 FFF7FEFF 		bl	send_config
 381              	.LVL36:
 157:Src/Eagle_TRT.c **** 
 382              		.loc 1 157 0
 383 0036 0120     		movs	r0, #1
 384 0038 FFF7FEFF 		bl	HAL_Delay
 385              	.LVL37:
 159:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 386              		.loc 1 159 0
 387 003c B4F82422 		ldrh	r2, [r4, #548]
 388 0040 674B     		ldr	r3, .L43+16
 389 0042 0093     		str	r3, [sp]
 390 0044 674B     		ldr	r3, .L43+20
 391 0046 D4F82012 		ldr	r1, [r4, #544]
 392 004a 2046     		mov	r0, r4
 393 004c FFF7FEFF 		bl	send_config
 394              	.LVL38:
 160:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8
 395              		.loc 1 160 0
 396 0050 0120     		movs	r0, #1
 397 0052 FFF7FEFF 		bl	HAL_Delay
 398              	.LVL39:
 161:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 399              		.loc 1 161 0
 400 0056 B4F82422 		ldrh	r2, [r4, #548]
 401 005a 634B     		ldr	r3, .L43+24
 402 005c 0093     		str	r3, [sp]
 403 005e 634B     		ldr	r3, .L43+28
 404 0060 D4F82012 		ldr	r1, [r4, #544]
 405 0064 2046     		mov	r0, r4
 406 0066 FFF7FEFF 		bl	send_config
 407              	.LVL40:
 162:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8
 408              		.loc 1 162 0
 409 006a 0120     		movs	r0, #1
 410 006c FFF7FEFF 		bl	HAL_Delay
 411              	.LVL41:
 163:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 412              		.loc 1 163 0
 413 0070 B4F82422 		ldrh	r2, [r4, #548]
 414 0074 5E4B     		ldr	r3, .L43+32
 415 0076 0093     		str	r3, [sp]
 416 0078 5E4B     		ldr	r3, .L43+36
 417 007a D4F82012 		ldr	r1, [r4, #544]
 418 007e 2046     		mov	r0, r4
ARM GAS  /tmp/ccU79PPY.s 			page 25


 419 0080 FFF7FEFF 		bl	send_config
 420              	.LVL42:
 164:Src/Eagle_TRT.c **** 
 421              		.loc 1 164 0
 422 0084 0120     		movs	r0, #1
 423 0086 FFF7FEFF 		bl	HAL_Delay
 424              	.LVL43:
 167:Src/Eagle_TRT.c **** 	{
 425              		.loc 1 167 0
 426 008a D5F81832 		ldr	r3, [r5, #536]
 427 008e B3F5FA7F 		cmp	r3, #500
 428 0092 2FD0     		beq	.L27
 429 0094 10DD     		ble	.L42
 430 0096 B3F57A7F 		cmp	r3, #1000
 431 009a 36D0     		beq	.L30
 432 009c B3F5FA6F 		cmp	r3, #2000
 433 00a0 3ED1     		bne	.L26
 179:Src/Eagle_TRT.c **** 		break;
 434              		.loc 1 179 0
 435 00a2 B5F82422 		ldrh	r2, [r5, #548]
 436 00a6 544B     		ldr	r3, .L43+40
 437 00a8 0093     		str	r3, [sp]
 438 00aa 544B     		ldr	r3, .L43+44
 439 00ac D5F82012 		ldr	r1, [r5, #544]
 440 00b0 2846     		mov	r0, r5
 441 00b2 FFF7FEFF 		bl	send_config
 442              	.LVL44:
 180:Src/Eagle_TRT.c **** 	default:
 443              		.loc 1 180 0
 444 00b6 0BE0     		b	.L32
 445              	.L42:
 167:Src/Eagle_TRT.c **** 	{
 446              		.loc 1 167 0
 447 00b8 F52B     		cmp	r3, #245
 448 00ba 31D1     		bne	.L26
 170:Src/Eagle_TRT.c **** 		break;
 449              		.loc 1 170 0
 450 00bc B5F82422 		ldrh	r2, [r5, #548]
 451 00c0 4F4B     		ldr	r3, .L43+48
 452 00c2 0093     		str	r3, [sp]
 453 00c4 4D4B     		ldr	r3, .L43+44
 454 00c6 D5F82012 		ldr	r1, [r5, #544]
 455 00ca 2846     		mov	r0, r5
 456 00cc FFF7FEFF 		bl	send_config
 457              	.LVL45:
 458              	.L32:
 186:Src/Eagle_TRT.c **** 
 459              		.loc 1 186 0
 460 00d0 0120     		movs	r0, #1
 461 00d2 FFF7FEFF 		bl	HAL_Delay
 462              	.LVL46:
 189:Src/Eagle_TRT.c **** 	{
 463              		.loc 1 189 0
 464 00d6 D4F81832 		ldr	r3, [r4, #536]
 465 00da 023B     		subs	r3, r3, #2
 466 00dc 0E2B     		cmp	r3, #14
 467 00de 69D8     		bhi	.L33
ARM GAS  /tmp/ccU79PPY.s 			page 26


 468 00e0 DFE803F0 		tbb	[pc, r3]
 469              	.L35:
 470 00e4 2D       		.byte	(.L34-.L35)/2
 471 00e5 68       		.byte	(.L33-.L35)/2
 472 00e6 3C       		.byte	(.L36-.L35)/2
 473 00e7 68       		.byte	(.L33-.L35)/2
 474 00e8 47       		.byte	(.L37-.L35)/2
 475 00e9 68       		.byte	(.L33-.L35)/2
 476 00ea 52       		.byte	(.L38-.L35)/2
 477 00eb 68       		.byte	(.L33-.L35)/2
 478 00ec 68       		.byte	(.L33-.L35)/2
 479 00ed 68       		.byte	(.L33-.L35)/2
 480 00ee 68       		.byte	(.L33-.L35)/2
 481 00ef 68       		.byte	(.L33-.L35)/2
 482 00f0 68       		.byte	(.L33-.L35)/2
 483 00f1 68       		.byte	(.L33-.L35)/2
 484 00f2 5D       		.byte	(.L39-.L35)/2
 485 00f3 00       		.p2align 1
 486              	.L27:
 173:Src/Eagle_TRT.c **** 		break;
 487              		.loc 1 173 0
 488 00f4 B5F82422 		ldrh	r2, [r5, #548]
 489 00f8 424B     		ldr	r3, .L43+52
 490 00fa 0093     		str	r3, [sp]
 491 00fc 3F4B     		ldr	r3, .L43+44
 492 00fe D5F82012 		ldr	r1, [r5, #544]
 493 0102 2846     		mov	r0, r5
 494 0104 FFF7FEFF 		bl	send_config
 495              	.LVL47:
 174:Src/Eagle_TRT.c **** 	case 1000:
 496              		.loc 1 174 0
 497 0108 E2E7     		b	.L32
 498              	.L30:
 176:Src/Eagle_TRT.c **** 		break;
 499              		.loc 1 176 0
 500 010a B5F82422 		ldrh	r2, [r5, #548]
 501 010e 3E4B     		ldr	r3, .L43+56
 502 0110 0093     		str	r3, [sp]
 503 0112 3A4B     		ldr	r3, .L43+44
 504 0114 D5F82012 		ldr	r1, [r5, #544]
 505 0118 2846     		mov	r0, r5
 506 011a FFF7FEFF 		bl	send_config
 507              	.LVL48:
 177:Src/Eagle_TRT.c **** 	case 2000:
 508              		.loc 1 177 0
 509 011e D7E7     		b	.L32
 510              	.L26:
 182:Src/Eagle_TRT.c **** 		gyro->scale = 500;
 511              		.loc 1 182 0
 512 0120 B5F82422 		ldrh	r2, [r5, #548]
 513 0124 364B     		ldr	r3, .L43+48
 514 0126 0093     		str	r3, [sp]
 515 0128 344B     		ldr	r3, .L43+44
 516 012a D5F82012 		ldr	r1, [r5, #544]
 517 012e 2846     		mov	r0, r5
 518 0130 FFF7FEFF 		bl	send_config
 519              	.LVL49:
ARM GAS  /tmp/ccU79PPY.s 			page 27


 183:Src/Eagle_TRT.c **** 		break;
 520              		.loc 1 183 0
 521 0134 4FF4FA73 		mov	r3, #500
 522 0138 C5F81832 		str	r3, [r5, #536]
 184:Src/Eagle_TRT.c **** 	}
 523              		.loc 1 184 0
 524 013c C8E7     		b	.L32
 525              	.L34:
 192:Src/Eagle_TRT.c **** 		break;
 526              		.loc 1 192 0
 527 013e B4F82422 		ldrh	r2, [r4, #548]
 528 0142 324B     		ldr	r3, .L43+60
 529 0144 0093     		str	r3, [sp]
 530 0146 324B     		ldr	r3, .L43+64
 531 0148 D4F82012 		ldr	r1, [r4, #544]
 532 014c 2046     		mov	r0, r4
 533 014e FFF7FEFF 		bl	send_config
 534              	.LVL50:
 535              	.L40:
 212:Src/Eagle_TRT.c **** /*
 536              		.loc 1 212 0
 537 0152 0120     		movs	r0, #1
 538 0154 FFF7FEFF 		bl	HAL_Delay
 539              	.LVL51:
 215:Src/Eagle_TRT.c **** 
 540              		.loc 1 215 0
 541 0158 03B0     		add	sp, sp, #12
 542              	.LCFI8:
 543              		.cfi_remember_state
 544              		.cfi_def_cfa_offset 12
 545              		@ sp needed
 546 015a 30BD     		pop	{r4, r5, pc}
 547              	.LVL52:
 548              	.L36:
 549              	.LCFI9:
 550              		.cfi_restore_state
 195:Src/Eagle_TRT.c **** 		break;
 551              		.loc 1 195 0
 552 015c B4F82422 		ldrh	r2, [r4, #548]
 553 0160 2C4B     		ldr	r3, .L43+68
 554 0162 0093     		str	r3, [sp]
 555 0164 2A4B     		ldr	r3, .L43+64
 556 0166 D4F82012 		ldr	r1, [r4, #544]
 557 016a 2046     		mov	r0, r4
 558 016c FFF7FEFF 		bl	send_config
 559              	.LVL53:
 196:Src/Eagle_TRT.c **** 	case 6:
 560              		.loc 1 196 0
 561 0170 EFE7     		b	.L40
 562              	.L37:
 198:Src/Eagle_TRT.c **** 		break;
 563              		.loc 1 198 0
 564 0172 B4F82422 		ldrh	r2, [r4, #548]
 565 0176 284B     		ldr	r3, .L43+72
 566 0178 0093     		str	r3, [sp]
 567 017a 254B     		ldr	r3, .L43+64
 568 017c D4F82012 		ldr	r1, [r4, #544]
ARM GAS  /tmp/ccU79PPY.s 			page 28


 569 0180 2046     		mov	r0, r4
 570 0182 FFF7FEFF 		bl	send_config
 571              	.LVL54:
 199:Src/Eagle_TRT.c **** 	case 8:
 572              		.loc 1 199 0
 573 0186 E4E7     		b	.L40
 574              	.L38:
 201:Src/Eagle_TRT.c **** 		break;
 575              		.loc 1 201 0
 576 0188 B4F82422 		ldrh	r2, [r4, #548]
 577 018c 234B     		ldr	r3, .L43+76
 578 018e 0093     		str	r3, [sp]
 579 0190 1F4B     		ldr	r3, .L43+64
 580 0192 D4F82012 		ldr	r1, [r4, #544]
 581 0196 2046     		mov	r0, r4
 582 0198 FFF7FEFF 		bl	send_config
 583              	.LVL55:
 202:Src/Eagle_TRT.c **** 	case 16:
 584              		.loc 1 202 0
 585 019c D9E7     		b	.L40
 586              	.L39:
 204:Src/Eagle_TRT.c **** 		break;
 587              		.loc 1 204 0
 588 019e B4F82422 		ldrh	r2, [r4, #548]
 589 01a2 1F4B     		ldr	r3, .L43+80
 590 01a4 0093     		str	r3, [sp]
 591 01a6 1A4B     		ldr	r3, .L43+64
 592 01a8 D4F82012 		ldr	r1, [r4, #544]
 593 01ac 2046     		mov	r0, r4
 594 01ae FFF7FEFF 		bl	send_config
 595              	.LVL56:
 205:Src/Eagle_TRT.c **** 	default:
 596              		.loc 1 205 0
 597 01b2 CEE7     		b	.L40
 598              	.L33:
 207:Src/Eagle_TRT.c **** 		accel->scale = 4;
 599              		.loc 1 207 0
 600 01b4 B4F82422 		ldrh	r2, [r4, #548]
 601 01b8 164B     		ldr	r3, .L43+68
 602 01ba 0093     		str	r3, [sp]
 603 01bc 144B     		ldr	r3, .L43+64
 604 01be D4F82012 		ldr	r1, [r4, #544]
 605 01c2 2046     		mov	r0, r4
 606 01c4 FFF7FEFF 		bl	send_config
 607              	.LVL57:
 208:Src/Eagle_TRT.c **** 		break;
 608              		.loc 1 208 0
 609 01c8 0423     		movs	r3, #4
 610 01ca C4F81832 		str	r3, [r4, #536]
 209:Src/Eagle_TRT.c **** 	}
 611              		.loc 1 209 0
 612 01ce C0E7     		b	.L40
 613              	.L44:
 614              		.align	2
 615              	.L43:
 616 01d0 00000000 		.word	.LANCHOR1
 617 01d4 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccU79PPY.s 			page 29


 618 01d8 00000000 		.word	.LANCHOR3
 619 01dc 00000000 		.word	.LANCHOR2
 620 01e0 00000000 		.word	.LANCHOR5
 621 01e4 00000000 		.word	.LANCHOR4
 622 01e8 00000000 		.word	.LANCHOR7
 623 01ec 00000000 		.word	.LANCHOR6
 624 01f0 00000000 		.word	.LANCHOR9
 625 01f4 00000000 		.word	.LANCHOR8
 626 01f8 00000000 		.word	.LANCHOR14
 627 01fc 00000000 		.word	.LANCHOR10
 628 0200 00000000 		.word	.LANCHOR11
 629 0204 00000000 		.word	.LANCHOR12
 630 0208 00000000 		.word	.LANCHOR13
 631 020c 00000000 		.word	.LANCHOR16
 632 0210 00000000 		.word	.LANCHOR15
 633 0214 00000000 		.word	.LANCHOR17
 634 0218 00000000 		.word	.LANCHOR18
 635 021c 00000000 		.word	.LANCHOR19
 636 0220 00000000 		.word	.LANCHOR20
 637              		.cfi_endproc
 638              	.LFE132:
 640              		.section	.text.LSMD9S0_read,"ax",%progbits
 641              		.align	1
 642              		.global	LSMD9S0_read
 643              		.syntax unified
 644              		.thumb
 645              		.thumb_func
 646              		.fpu fpv4-sp-d16
 648              	LSMD9S0_read:
 649              	.LFB133:
 218:Src/Eagle_TRT.c **** 
 650              		.loc 1 218 0
 651              		.cfi_startproc
 652              		@ args = 0, pretend = 0, frame = 8
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 654              	.LVL58:
 655 0000 10B5     		push	{r4, lr}
 656              	.LCFI10:
 657              		.cfi_def_cfa_offset 8
 658              		.cfi_offset 4, -8
 659              		.cfi_offset 14, -4
 660 0002 82B0     		sub	sp, sp, #8
 661              	.LCFI11:
 662              		.cfi_def_cfa_offset 16
 663 0004 0446     		mov	r4, r0
 223:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 664              		.loc 1 223 0
 665 0006 0022     		movs	r2, #0
 666 0008 B0F82412 		ldrh	r1, [r0, #548]
 667 000c D0F82002 		ldr	r0, [r0, #544]
 668              	.LVL59:
 669 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 670              	.LVL60:
 224:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 671              		.loc 1 224 0
 672 0014 2E4B     		ldr	r3, .L51
 673 0016 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccU79PPY.s 			page 30


 674 0018 0023     		movs	r3, #0
 675 001a 5362     		str	r3, [r2, #36]
 676              	.L46:
 225:Src/Eagle_TRT.c **** 	{
 677              		.loc 1 225 0 discriminator 1
 678 001c 536A     		ldr	r3, [r2, #36]
 679 001e 142B     		cmp	r3, #20
 680 0020 FCD9     		bls	.L46
 229:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 681              		.loc 1 229 0
 682 0022 0A23     		movs	r3, #10
 683 0024 0122     		movs	r2, #1
 684 0026 04F22E21 		addw	r1, r4, #558
 685 002a D4F83002 		ldr	r0, [r4, #560]
 686 002e FFF7FEFF 		bl	HAL_SPI_Transmit
 687              	.LVL61:
 230:Src/Eagle_TRT.c **** 
 688              		.loc 1 230 0
 689 0032 0A23     		movs	r3, #10
 690 0034 0122     		movs	r2, #1
 691 0036 0DF10701 		add	r1, sp, #7
 692 003a D4F83002 		ldr	r0, [r4, #560]
 693 003e FFF7FEFF 		bl	HAL_SPI_Receive
 694              	.LVL62:
 232:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 695              		.loc 1 232 0
 696 0042 234B     		ldr	r3, .L51
 697 0044 1A68     		ldr	r2, [r3]
 698 0046 0023     		movs	r3, #0
 699 0048 5362     		str	r3, [r2, #36]
 700              	.L47:
 233:Src/Eagle_TRT.c **** 	{
 701              		.loc 1 233 0 discriminator 1
 702 004a 536A     		ldr	r3, [r2, #36]
 703 004c 142B     		cmp	r3, #20
 704 004e FCD9     		bls	.L47
 236:Src/Eagle_TRT.c **** 
 705              		.loc 1 236 0
 706 0050 0122     		movs	r2, #1
 707 0052 B4F82412 		ldrh	r1, [r4, #548]
 708 0056 D4F82002 		ldr	r0, [r4, #544]
 709 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 710              	.LVL63:
 238:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 80)
 711              		.loc 1 238 0
 712 005e 1C4B     		ldr	r3, .L51
 713 0060 1A68     		ldr	r2, [r3]
 714 0062 0023     		movs	r3, #0
 715 0064 5362     		str	r3, [r2, #36]
 716              	.L48:
 239:Src/Eagle_TRT.c **** 	{
 717              		.loc 1 239 0 discriminator 1
 718 0066 536A     		ldr	r3, [r2, #36]
 719 0068 502B     		cmp	r3, #80
 720 006a FCD9     		bls	.L48
 242:Src/Eagle_TRT.c **** 
 721              		.loc 1 242 0
ARM GAS  /tmp/ccU79PPY.s 			page 31


 722 006c 0022     		movs	r2, #0
 723 006e B4F82412 		ldrh	r1, [r4, #548]
 724 0072 D4F82002 		ldr	r0, [r4, #544]
 725 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 726              	.LVL64:
 244:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 727              		.loc 1 244 0
 728 007a 0A23     		movs	r3, #10
 729 007c 0122     		movs	r2, #1
 730 007e 04F22F21 		addw	r1, r4, #559
 731 0082 D4F83002 		ldr	r0, [r4, #560]
 732 0086 FFF7FEFF 		bl	HAL_SPI_Transmit
 733              	.LVL65:
 245:Src/Eagle_TRT.c **** 
 734              		.loc 1 245 0
 735 008a 0A23     		movs	r3, #10
 736 008c 0122     		movs	r2, #1
 737 008e 0DF10601 		add	r1, sp, #6
 738 0092 D4F83002 		ldr	r0, [r4, #560]
 739 0096 FFF7FEFF 		bl	HAL_SPI_Receive
 740              	.LVL66:
 247:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 741              		.loc 1 247 0
 742 009a 0D4B     		ldr	r3, .L51
 743 009c 1A68     		ldr	r2, [r3]
 744 009e 0023     		movs	r3, #0
 745 00a0 5362     		str	r3, [r2, #36]
 746              	.L49:
 248:Src/Eagle_TRT.c **** 	{
 747              		.loc 1 248 0 discriminator 1
 748 00a2 536A     		ldr	r3, [r2, #36]
 749 00a4 142B     		cmp	r3, #20
 750 00a6 FCD9     		bls	.L49
 252:Src/Eagle_TRT.c **** 
 751              		.loc 1 252 0
 752 00a8 0122     		movs	r2, #1
 753 00aa B4F82412 		ldrh	r1, [r4, #548]
 754 00ae D4F82002 		ldr	r0, [r4, #544]
 755 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 756              	.LVL67:
 255:Src/Eagle_TRT.c **** 	float axis = value;
 757              		.loc 1 255 0
 758 00b6 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 759 00ba 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 760 00be 43EA0223 		orr	r3, r3, r2, lsl #8
 761 00c2 00EE103A 		vmov	s0, r3	@ int
 762              	.LVL68:
 259:Src/Eagle_TRT.c **** 
 763              		.loc 1 259 0
 764 00c6 B8EE400A 		vcvt.f32.u32	s0, s0
 765              	.LVL69:
 766 00ca 02B0     		add	sp, sp, #8
 767              	.LCFI12:
 768              		.cfi_def_cfa_offset 8
 769              		@ sp needed
 770 00cc 10BD     		pop	{r4, pc}
 771              	.LVL70:
ARM GAS  /tmp/ccU79PPY.s 			page 32


 772              	.L52:
 773 00ce 00BF     		.align	2
 774              	.L51:
 775 00d0 00000000 		.word	htim2
 776              		.cfi_endproc
 777              	.LFE133:
 779              		.section	.text.LSMD9S0_check,"ax",%progbits
 780              		.align	1
 781              		.global	LSMD9S0_check
 782              		.syntax unified
 783              		.thumb
 784              		.thumb_func
 785              		.fpu fpv4-sp-d16
 787              	LSMD9S0_check:
 788              	.LFB134:
 262:Src/Eagle_TRT.c **** 
 789              		.loc 1 262 0
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 0
 792              		@ frame_needed = 0, uses_anonymous_args = 0
 793              	.LVL71:
 794 0000 10B5     		push	{r4, lr}
 795              	.LCFI13:
 796              		.cfi_def_cfa_offset 8
 797              		.cfi_offset 4, -8
 798              		.cfi_offset 14, -4
 799 0002 0446     		mov	r4, r0
 800              	.LVL72:
 267:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 801              		.loc 1 267 0
 802 0004 0022     		movs	r2, #0
 803 0006 4FF40071 		mov	r1, #512
 804 000a 2C48     		ldr	r0, .L62
 805              	.LVL73:
 806 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 807              	.LVL74:
 268:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 808              		.loc 1 268 0
 809 0010 2B4B     		ldr	r3, .L62+4
 810 0012 1A68     		ldr	r2, [r3]
 811 0014 0023     		movs	r3, #0
 812 0016 5362     		str	r3, [r2, #36]
 813              	.L54:
 269:Src/Eagle_TRT.c **** 	{
 814              		.loc 1 269 0 discriminator 1
 815 0018 536A     		ldr	r3, [r2, #36]
 816 001a 142B     		cmp	r3, #20
 817 001c FCD9     		bls	.L54
 272:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_XM_VAL, 1, 10);
 818              		.loc 1 272 0
 819 001e 0A23     		movs	r3, #10
 820 0020 0122     		movs	r2, #1
 821 0022 2849     		ldr	r1, .L62+8
 822 0024 D4F83002 		ldr	r0, [r4, #560]
 823 0028 FFF7FEFF 		bl	HAL_SPI_Transmit
 824              	.LVL75:
 273:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
ARM GAS  /tmp/ccU79PPY.s 			page 33


 825              		.loc 1 273 0
 826 002c 0A23     		movs	r3, #10
 827 002e 0122     		movs	r2, #1
 828 0030 2549     		ldr	r1, .L62+12
 829 0032 D4F83002 		ldr	r0, [r4, #560]
 830 0036 FFF7FEFF 		bl	HAL_SPI_Receive
 831              	.LVL76:
 274:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 832              		.loc 1 274 0
 833 003a 214B     		ldr	r3, .L62+4
 834 003c 1A68     		ldr	r2, [r3]
 835 003e 0023     		movs	r3, #0
 836 0040 5362     		str	r3, [r2, #36]
 837              	.L55:
 275:Src/Eagle_TRT.c **** 	{
 838              		.loc 1 275 0 discriminator 1
 839 0042 536A     		ldr	r3, [r2, #36]
 840 0044 142B     		cmp	r3, #20
 841 0046 FCD9     		bls	.L55
 278:Src/Eagle_TRT.c **** 
 842              		.loc 1 278 0
 843 0048 0122     		movs	r2, #1
 844 004a 4FF40071 		mov	r1, #512
 845 004e 1B48     		ldr	r0, .L62
 846 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 847              	.LVL77:
 281:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 848              		.loc 1 281 0
 849 0054 0022     		movs	r2, #0
 850 0056 4FF48071 		mov	r1, #256
 851 005a 1C48     		ldr	r0, .L62+16
 852 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 853              	.LVL78:
 282:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 854              		.loc 1 282 0
 855 0060 174B     		ldr	r3, .L62+4
 856 0062 1A68     		ldr	r2, [r3]
 857 0064 0023     		movs	r3, #0
 858 0066 5362     		str	r3, [r2, #36]
 859              	.L56:
 283:Src/Eagle_TRT.c **** 	{
 860              		.loc 1 283 0 discriminator 1
 861 0068 536A     		ldr	r3, [r2, #36]
 862 006a 142B     		cmp	r3, #20
 863 006c FCD9     		bls	.L56
 286:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 864              		.loc 1 286 0
 865 006e 0A23     		movs	r3, #10
 866 0070 0122     		movs	r2, #1
 867 0072 1749     		ldr	r1, .L62+20
 868 0074 D4F83002 		ldr	r0, [r4, #560]
 869 0078 FFF7FEFF 		bl	HAL_SPI_Transmit
 870              	.LVL79:
 288:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 871              		.loc 1 288 0
 872 007c 0A23     		movs	r3, #10
 873 007e 0122     		movs	r2, #1
ARM GAS  /tmp/ccU79PPY.s 			page 34


 874 0080 1449     		ldr	r1, .L62+24
 875 0082 D4F83002 		ldr	r0, [r4, #560]
 876 0086 FFF7FEFF 		bl	HAL_SPI_Receive
 877              	.LVL80:
 289:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 878              		.loc 1 289 0
 879 008a 0D4B     		ldr	r3, .L62+4
 880 008c 1A68     		ldr	r2, [r3]
 881 008e 0023     		movs	r3, #0
 882 0090 5362     		str	r3, [r2, #36]
 883              	.L57:
 290:Src/Eagle_TRT.c **** 	{
 884              		.loc 1 290 0 discriminator 1
 885 0092 536A     		ldr	r3, [r2, #36]
 886 0094 142B     		cmp	r3, #20
 887 0096 FCD9     		bls	.L57
 293:Src/Eagle_TRT.c **** 
 888              		.loc 1 293 0
 889 0098 0122     		movs	r2, #1
 890 009a 4FF48071 		mov	r1, #256
 891 009e 0B48     		ldr	r0, .L62+16
 892 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 893              	.LVL81:
 301:Src/Eagle_TRT.c **** 	{
 894              		.loc 1 301 0
 895 00a4 0B4B     		ldr	r3, .L62+24
 896 00a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 897 00a8 074B     		ldr	r3, .L62+12
 898 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 899 00ac D42A     		cmp	r2, #212
 900 00ae 08BF     		it	eq
 901 00b0 492B     		cmpeq	r3, #73
 902 00b2 01D0     		beq	.L61
 307:Src/Eagle_TRT.c **** 	}
 903              		.loc 1 307 0
 904 00b4 0020     		movs	r0, #0
 311:Src/Eagle_TRT.c **** 
 905              		.loc 1 311 0
 906 00b6 10BD     		pop	{r4, pc}
 907              	.LVL82:
 908              	.L61:
 303:Src/Eagle_TRT.c **** 	}
 909              		.loc 1 303 0
 910 00b8 0120     		movs	r0, #1
 911 00ba 10BD     		pop	{r4, pc}
 912              	.LVL83:
 913              	.L63:
 914              		.align	2
 915              	.L62:
 916 00bc 00080240 		.word	1073874944
 917 00c0 00000000 		.word	htim2
 918 00c4 00000000 		.word	.LANCHOR21
 919 00c8 00000000 		.word	WHO_AM_I_XM_VAL
 920 00cc 00000240 		.word	1073872896
 921 00d0 00000000 		.word	.LANCHOR22
 922 00d4 00000000 		.word	WHO_AM_I_G_VAL
 923              		.cfi_endproc
ARM GAS  /tmp/ccU79PPY.s 			page 35


 924              	.LFE134:
 926              		.global	__aeabi_f2d
 927              		.global	__aeabi_dcmpgt
 928              		.global	__aeabi_dsub
 929              		.global	__aeabi_dmul
 930              		.section	.text.LSMD9S0_gyro_read,"ax",%progbits
 931              		.align	1
 932              		.global	LSMD9S0_gyro_read
 933              		.syntax unified
 934              		.thumb
 935              		.thumb_func
 936              		.fpu fpv4-sp-d16
 938              	LSMD9S0_gyro_read:
 939              	.LFB136:
 344:Src/Eagle_TRT.c **** 
 940              		.loc 1 344 0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944              	.LVL84:
 945 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 946              	.LCFI14:
 947              		.cfi_def_cfa_offset 32
 948              		.cfi_offset 4, -32
 949              		.cfi_offset 5, -28
 950              		.cfi_offset 6, -24
 951              		.cfi_offset 7, -20
 952              		.cfi_offset 8, -16
 953              		.cfi_offset 9, -12
 954              		.cfi_offset 10, -8
 955              		.cfi_offset 14, -4
 956 0004 8246     		mov	r10, r0
 346:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_X_L_G_ADD;
 957              		.loc 1 346 0
 958 0006 5B4B     		ldr	r3, .L78
 959 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 960 000a 80F82F32 		strb	r3, [r0, #559]
 347:Src/Eagle_TRT.c **** 	gyro->x = LSMD9S0_read(gyro);
 961              		.loc 1 347 0
 962 000e 5A4B     		ldr	r3, .L78+4
 963 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 964 0012 80F82E32 		strb	r3, [r0, #558]
 348:Src/Eagle_TRT.c **** 
 965              		.loc 1 348 0
 966 0016 FFF7FEFF 		bl	LSMD9S0_read
 967              	.LVL85:
 968 001a 10EE100A 		vmov	r0, s0
 969 001e FFF7FEFF 		bl	__aeabi_f2d
 970              	.LVL86:
 971 0022 CAE90001 		strd	r0, [r10]
 350:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Y_L_G_ADD;
 972              		.loc 1 350 0
 973 0026 554B     		ldr	r3, .L78+8
 974 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 975 002a 8AF82F32 		strb	r3, [r10, #559]
 351:Src/Eagle_TRT.c **** 	gyro->y = LSMD9S0_read(gyro);
 976              		.loc 1 351 0
ARM GAS  /tmp/ccU79PPY.s 			page 36


 977 002e 544B     		ldr	r3, .L78+12
 978 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 979 0032 8AF82E32 		strb	r3, [r10, #558]
 352:Src/Eagle_TRT.c **** 
 980              		.loc 1 352 0
 981 0036 5046     		mov	r0, r10
 982 0038 FFF7FEFF 		bl	LSMD9S0_read
 983              	.LVL87:
 984 003c 10EE100A 		vmov	r0, s0
 985 0040 FFF7FEFF 		bl	__aeabi_f2d
 986              	.LVL88:
 987 0044 CAE90201 		strd	r0, [r10, #8]
 354:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Z_L_G_ADD;
 988              		.loc 1 354 0
 989 0048 4E4B     		ldr	r3, .L78+16
 990 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 991 004c 8AF82F32 		strb	r3, [r10, #559]
 355:Src/Eagle_TRT.c **** 	gyro->z = LSMD9S0_read(gyro);
 992              		.loc 1 355 0
 993 0050 4D4B     		ldr	r3, .L78+20
 994 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 995 0054 8AF82E32 		strb	r3, [r10, #558]
 356:Src/Eagle_TRT.c **** 
 996              		.loc 1 356 0
 997 0058 5046     		mov	r0, r10
 998 005a FFF7FEFF 		bl	LSMD9S0_read
 999              	.LVL89:
 1000 005e 10EE100A 		vmov	r0, s0
 1001 0062 FFF7FEFF 		bl	__aeabi_f2d
 1002              	.LVL90:
 1003 0066 0446     		mov	r4, r0
 1004 0068 0D46     		mov	r5, r1
 1005 006a CAE90445 		strd	r4, [r10, #16]
 358:Src/Eagle_TRT.c **** 	{
 1006              		.loc 1 358 0
 1007 006e DAE90067 		ldrd	r6, [r10]
 1008 0072 0022     		movs	r2, #0
 1009 0074 454B     		ldr	r3, .L78+24
 1010 0076 3046     		mov	r0, r6
 1011 0078 3946     		mov	r1, r7
 1012 007a FFF7FEFF 		bl	__aeabi_dcmpgt
 1013              	.LVL91:
 1014 007e 38B1     		cbz	r0, .L65
 360:Src/Eagle_TRT.c **** 	}
 1015              		.loc 1 360 0
 1016 0080 0022     		movs	r2, #0
 1017 0082 434B     		ldr	r3, .L78+28
 1018 0084 3046     		mov	r0, r6
 1019 0086 3946     		mov	r1, r7
 1020 0088 FFF7FEFF 		bl	__aeabi_dsub
 1021              	.LVL92:
 1022 008c CAE90001 		strd	r0, [r10]
 1023              	.L65:
 362:Src/Eagle_TRT.c **** 	{
 1024              		.loc 1 362 0
 1025 0090 DAE90267 		ldrd	r6, [r10, #8]
 1026 0094 0022     		movs	r2, #0
ARM GAS  /tmp/ccU79PPY.s 			page 37


 1027 0096 3D4B     		ldr	r3, .L78+24
 1028 0098 3046     		mov	r0, r6
 1029 009a 3946     		mov	r1, r7
 1030 009c FFF7FEFF 		bl	__aeabi_dcmpgt
 1031              	.LVL93:
 1032 00a0 38B1     		cbz	r0, .L67
 364:Src/Eagle_TRT.c **** 	}
 1033              		.loc 1 364 0
 1034 00a2 0022     		movs	r2, #0
 1035 00a4 3A4B     		ldr	r3, .L78+28
 1036 00a6 3046     		mov	r0, r6
 1037 00a8 3946     		mov	r1, r7
 1038 00aa FFF7FEFF 		bl	__aeabi_dsub
 1039              	.LVL94:
 1040 00ae CAE90201 		strd	r0, [r10, #8]
 1041              	.L67:
 366:Src/Eagle_TRT.c **** 	{
 1042              		.loc 1 366 0
 1043 00b2 0022     		movs	r2, #0
 1044 00b4 354B     		ldr	r3, .L78+24
 1045 00b6 2046     		mov	r0, r4
 1046 00b8 2946     		mov	r1, r5
 1047 00ba FFF7FEFF 		bl	__aeabi_dcmpgt
 1048              	.LVL95:
 1049 00be 38B1     		cbz	r0, .L69
 368:Src/Eagle_TRT.c **** 	}
 1050              		.loc 1 368 0
 1051 00c0 0022     		movs	r2, #0
 1052 00c2 334B     		ldr	r3, .L78+28
 1053 00c4 2046     		mov	r0, r4
 1054 00c6 2946     		mov	r1, r5
 1055 00c8 FFF7FEFF 		bl	__aeabi_dsub
 1056              	.LVL96:
 1057 00cc CAE90401 		strd	r0, [r10, #16]
 1058              	.L69:
 371:Src/Eagle_TRT.c **** 	gyro->y = gyro->y * ((float)gyro->scale / 32768);
 1059              		.loc 1 371 0
 1060 00d0 DAE90067 		ldrd	r6, [r10]
 1061 00d4 DAED867A 		vldr.32	s15, [r10, #536]	@ int
 1062 00d8 F8EEE77A 		vcvt.f32.s32	s15, s15
 1063 00dc 9FED2D7A 		vldr.32	s14, .L78+32
 1064 00e0 67EE877A 		vmul.f32	s15, s15, s14
 1065 00e4 17EE900A 		vmov	r0, s15
 1066 00e8 FFF7FEFF 		bl	__aeabi_f2d
 1067              	.LVL97:
 1068 00ec 0446     		mov	r4, r0
 1069 00ee 0D46     		mov	r5, r1
 1070 00f0 0246     		mov	r2, r0
 1071 00f2 0B46     		mov	r3, r1
 1072 00f4 3046     		mov	r0, r6
 1073 00f6 3946     		mov	r1, r7
 1074 00f8 FFF7FEFF 		bl	__aeabi_dmul
 1075              	.LVL98:
 1076 00fc 8046     		mov	r8, r0
 1077 00fe 8946     		mov	r9, r1
 372:Src/Eagle_TRT.c **** 	gyro->z = gyro->z * ((float)gyro->scale / 32768);
 1078              		.loc 1 372 0
ARM GAS  /tmp/ccU79PPY.s 			page 38


 1079 0100 DAE90223 		ldrd	r2, [r10, #8]
 1080 0104 2046     		mov	r0, r4
 1081 0106 2946     		mov	r1, r5
 1082 0108 FFF7FEFF 		bl	__aeabi_dmul
 1083              	.LVL99:
 1084 010c 0646     		mov	r6, r0
 1085 010e 0F46     		mov	r7, r1
 373:Src/Eagle_TRT.c **** 
 1086              		.loc 1 373 0
 1087 0110 DAE90423 		ldrd	r2, [r10, #16]
 1088 0114 2046     		mov	r0, r4
 1089 0116 2946     		mov	r1, r5
 1090 0118 FFF7FEFF 		bl	__aeabi_dmul
 1091              	.LVL100:
 1092 011c 0446     		mov	r4, r0
 1093 011e 0D46     		mov	r5, r1
 375:Src/Eagle_TRT.c **** 	gyro->y -= gyro->y_offset;
 1094              		.loc 1 375 0
 1095 0120 DAE90623 		ldrd	r2, [r10, #24]
 1096 0124 4046     		mov	r0, r8
 1097 0126 4946     		mov	r1, r9
 1098 0128 FFF7FEFF 		bl	__aeabi_dsub
 1099              	.LVL101:
 1100 012c CAE90001 		strd	r0, [r10]
 376:Src/Eagle_TRT.c **** 	gyro->z -= gyro->z_offset;
 1101              		.loc 1 376 0
 1102 0130 DAE90823 		ldrd	r2, [r10, #32]
 1103 0134 3046     		mov	r0, r6
 1104 0136 3946     		mov	r1, r7
 1105 0138 FFF7FEFF 		bl	__aeabi_dsub
 1106              	.LVL102:
 1107 013c CAE90201 		strd	r0, [r10, #8]
 377:Src/Eagle_TRT.c **** 
 1108              		.loc 1 377 0
 1109 0140 DAE90A23 		ldrd	r2, [r10, #40]
 1110 0144 2046     		mov	r0, r4
 1111 0146 2946     		mov	r1, r5
 1112 0148 FFF7FEFF 		bl	__aeabi_dsub
 1113              	.LVL103:
 1114 014c CAE90401 		strd	r0, [r10, #16]
 380:Src/Eagle_TRT.c **** 	{
 1115              		.loc 1 380 0
 1116 0150 114B     		ldr	r3, .L78+36
 1117 0152 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1118 0154 114B     		ldr	r3, .L78+40
 1119 0156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1120 0158 D42A     		cmp	r2, #212
 1121 015a 08BF     		it	eq
 1122 015c 492B     		cmpeq	r3, #73
 1123 015e 04D0     		beq	.L77
 386:Src/Eagle_TRT.c **** 	}
 1124              		.loc 1 386 0
 1125 0160 0123     		movs	r3, #1
 1126 0162 CAF81432 		str	r3, [r10, #532]
 1127 0166 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1128              	.LVL104:
 1129              	.L77:
ARM GAS  /tmp/ccU79PPY.s 			page 39


 382:Src/Eagle_TRT.c **** 	}
 1130              		.loc 1 382 0
 1131 016a 0023     		movs	r3, #0
 1132 016c CAF81432 		str	r3, [r10, #532]
 1133 0170 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1134              	.LVL105:
 1135              	.L79:
 1136              		.align	2
 1137              	.L78:
 1138 0174 00000000 		.word	.LANCHOR23
 1139 0178 00000000 		.word	.LANCHOR24
 1140 017c 00000000 		.word	.LANCHOR25
 1141 0180 00000000 		.word	.LANCHOR26
 1142 0184 00000000 		.word	.LANCHOR27
 1143 0188 00000000 		.word	.LANCHOR28
 1144 018c 0000E040 		.word	1088421888
 1145 0190 0000F040 		.word	1089470464
 1146 0194 00000038 		.word	939524096
 1147 0198 00000000 		.word	WHO_AM_I_G_VAL
 1148 019c 00000000 		.word	WHO_AM_I_XM_VAL
 1149              		.cfi_endproc
 1150              	.LFE136:
 1152              		.section	.text.LSMD9S0_accel_read,"ax",%progbits
 1153              		.align	1
 1154              		.global	LSMD9S0_accel_read
 1155              		.syntax unified
 1156              		.thumb
 1157              		.thumb_func
 1158              		.fpu fpv4-sp-d16
 1160              	LSMD9S0_accel_read:
 1161              	.LFB138:
 435:Src/Eagle_TRT.c **** 
 1162              		.loc 1 435 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 0
 1165              		@ frame_needed = 0, uses_anonymous_args = 0
 1166              	.LVL106:
 1167 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1168              	.LCFI15:
 1169              		.cfi_def_cfa_offset 32
 1170              		.cfi_offset 4, -32
 1171              		.cfi_offset 5, -28
 1172              		.cfi_offset 6, -24
 1173              		.cfi_offset 7, -20
 1174              		.cfi_offset 8, -16
 1175              		.cfi_offset 9, -12
 1176              		.cfi_offset 10, -8
 1177              		.cfi_offset 14, -4
 1178 0004 8246     		mov	r10, r0
 437:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_X_L_A_ADD;
 1179              		.loc 1 437 0
 1180 0006 534B     		ldr	r3, .L91
 1181 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1182 000a 80F82F32 		strb	r3, [r0, #559]
 438:Src/Eagle_TRT.c **** 	accel->x = LSMD9S0_read(accel);
 1183              		.loc 1 438 0
 1184 000e 524B     		ldr	r3, .L91+4
ARM GAS  /tmp/ccU79PPY.s 			page 40


 1185 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1186 0012 80F82E32 		strb	r3, [r0, #558]
 439:Src/Eagle_TRT.c **** 
 1187              		.loc 1 439 0
 1188 0016 FFF7FEFF 		bl	LSMD9S0_read
 1189              	.LVL107:
 1190 001a 10EE100A 		vmov	r0, s0
 1191 001e FFF7FEFF 		bl	__aeabi_f2d
 1192              	.LVL108:
 1193 0022 CAE90001 		strd	r0, [r10]
 441:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Y_L_A_ADD;
 1194              		.loc 1 441 0
 1195 0026 4D4B     		ldr	r3, .L91+8
 1196 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1197 002a 8AF82F32 		strb	r3, [r10, #559]
 442:Src/Eagle_TRT.c **** 	accel->y = LSMD9S0_read(accel);
 1198              		.loc 1 442 0
 1199 002e 4C4B     		ldr	r3, .L91+12
 1200 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1201 0032 8AF82E32 		strb	r3, [r10, #558]
 443:Src/Eagle_TRT.c **** 
 1202              		.loc 1 443 0
 1203 0036 5046     		mov	r0, r10
 1204 0038 FFF7FEFF 		bl	LSMD9S0_read
 1205              	.LVL109:
 1206 003c 10EE100A 		vmov	r0, s0
 1207 0040 FFF7FEFF 		bl	__aeabi_f2d
 1208              	.LVL110:
 1209 0044 CAE90201 		strd	r0, [r10, #8]
 445:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Z_L_A_ADD;
 1210              		.loc 1 445 0
 1211 0048 464B     		ldr	r3, .L91+16
 1212 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1213 004c 8AF82F32 		strb	r3, [r10, #559]
 446:Src/Eagle_TRT.c **** 	accel->z = LSMD9S0_read(accel);
 1214              		.loc 1 446 0
 1215 0050 454B     		ldr	r3, .L91+20
 1216 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1217 0054 8AF82E32 		strb	r3, [r10, #558]
 447:Src/Eagle_TRT.c **** 
 1218              		.loc 1 447 0
 1219 0058 5046     		mov	r0, r10
 1220 005a FFF7FEFF 		bl	LSMD9S0_read
 1221              	.LVL111:
 1222 005e 10EE100A 		vmov	r0, s0
 1223 0062 FFF7FEFF 		bl	__aeabi_f2d
 1224              	.LVL112:
 1225 0066 0446     		mov	r4, r0
 1226 0068 0D46     		mov	r5, r1
 1227 006a CAE90445 		strd	r4, [r10, #16]
 449:Src/Eagle_TRT.c **** 	{
 1228              		.loc 1 449 0
 1229 006e DAE90067 		ldrd	r6, [r10]
 1230 0072 0022     		movs	r2, #0
 1231 0074 3D4B     		ldr	r3, .L91+24
 1232 0076 3046     		mov	r0, r6
 1233 0078 3946     		mov	r1, r7
ARM GAS  /tmp/ccU79PPY.s 			page 41


 1234 007a FFF7FEFF 		bl	__aeabi_dcmpgt
 1235              	.LVL113:
 1236 007e 38B1     		cbz	r0, .L81
 451:Src/Eagle_TRT.c **** 	}
 1237              		.loc 1 451 0
 1238 0080 0022     		movs	r2, #0
 1239 0082 3B4B     		ldr	r3, .L91+28
 1240 0084 3046     		mov	r0, r6
 1241 0086 3946     		mov	r1, r7
 1242 0088 FFF7FEFF 		bl	__aeabi_dsub
 1243              	.LVL114:
 1244 008c CAE90001 		strd	r0, [r10]
 1245              	.L81:
 453:Src/Eagle_TRT.c **** 	{
 1246              		.loc 1 453 0
 1247 0090 DAE90267 		ldrd	r6, [r10, #8]
 1248 0094 0022     		movs	r2, #0
 1249 0096 354B     		ldr	r3, .L91+24
 1250 0098 3046     		mov	r0, r6
 1251 009a 3946     		mov	r1, r7
 1252 009c FFF7FEFF 		bl	__aeabi_dcmpgt
 1253              	.LVL115:
 1254 00a0 38B1     		cbz	r0, .L83
 455:Src/Eagle_TRT.c **** 	}
 1255              		.loc 1 455 0
 1256 00a2 0022     		movs	r2, #0
 1257 00a4 324B     		ldr	r3, .L91+28
 1258 00a6 3046     		mov	r0, r6
 1259 00a8 3946     		mov	r1, r7
 1260 00aa FFF7FEFF 		bl	__aeabi_dsub
 1261              	.LVL116:
 1262 00ae CAE90201 		strd	r0, [r10, #8]
 1263              	.L83:
 457:Src/Eagle_TRT.c **** 	{
 1264              		.loc 1 457 0
 1265 00b2 0022     		movs	r2, #0
 1266 00b4 2D4B     		ldr	r3, .L91+24
 1267 00b6 2046     		mov	r0, r4
 1268 00b8 2946     		mov	r1, r5
 1269 00ba FFF7FEFF 		bl	__aeabi_dcmpgt
 1270              	.LVL117:
 1271 00be 38B1     		cbz	r0, .L85
 459:Src/Eagle_TRT.c **** 	}
 1272              		.loc 1 459 0
 1273 00c0 0022     		movs	r2, #0
 1274 00c2 2B4B     		ldr	r3, .L91+28
 1275 00c4 2046     		mov	r0, r4
 1276 00c6 2946     		mov	r1, r5
 1277 00c8 FFF7FEFF 		bl	__aeabi_dsub
 1278              	.LVL118:
 1279 00cc CAE90401 		strd	r0, [r10, #16]
 1280              	.L85:
 462:Src/Eagle_TRT.c **** 	accel->y = accel->y * ((float)accel->scale / 32768);
 1281              		.loc 1 462 0
 1282 00d0 DAE90067 		ldrd	r6, [r10]
 1283 00d4 DAED867A 		vldr.32	s15, [r10, #536]	@ int
 1284 00d8 F8EEE77A 		vcvt.f32.s32	s15, s15
ARM GAS  /tmp/ccU79PPY.s 			page 42


 1285 00dc 9FED257A 		vldr.32	s14, .L91+32
 1286 00e0 67EE877A 		vmul.f32	s15, s15, s14
 1287 00e4 17EE900A 		vmov	r0, s15
 1288 00e8 FFF7FEFF 		bl	__aeabi_f2d
 1289              	.LVL119:
 1290 00ec 0446     		mov	r4, r0
 1291 00ee 0D46     		mov	r5, r1
 1292 00f0 0246     		mov	r2, r0
 1293 00f2 0B46     		mov	r3, r1
 1294 00f4 3046     		mov	r0, r6
 1295 00f6 3946     		mov	r1, r7
 1296 00f8 FFF7FEFF 		bl	__aeabi_dmul
 1297              	.LVL120:
 1298 00fc 8046     		mov	r8, r0
 1299 00fe 8946     		mov	r9, r1
 463:Src/Eagle_TRT.c **** 	accel->z = accel->z * ((float)accel->scale / 32768);
 1300              		.loc 1 463 0
 1301 0100 DAE90223 		ldrd	r2, [r10, #8]
 1302 0104 2046     		mov	r0, r4
 1303 0106 2946     		mov	r1, r5
 1304 0108 FFF7FEFF 		bl	__aeabi_dmul
 1305              	.LVL121:
 1306 010c 0646     		mov	r6, r0
 1307 010e 0F46     		mov	r7, r1
 464:Src/Eagle_TRT.c **** 
 1308              		.loc 1 464 0
 1309 0110 DAE90423 		ldrd	r2, [r10, #16]
 1310 0114 2046     		mov	r0, r4
 1311 0116 2946     		mov	r1, r5
 1312 0118 FFF7FEFF 		bl	__aeabi_dmul
 1313              	.LVL122:
 1314 011c 0446     		mov	r4, r0
 1315 011e 0D46     		mov	r5, r1
 466:Src/Eagle_TRT.c **** 	accel->y -= accel->y_offset;
 1316              		.loc 1 466 0
 1317 0120 DAE90623 		ldrd	r2, [r10, #24]
 1318 0124 4046     		mov	r0, r8
 1319 0126 4946     		mov	r1, r9
 1320 0128 FFF7FEFF 		bl	__aeabi_dsub
 1321              	.LVL123:
 1322 012c CAE90001 		strd	r0, [r10]
 467:Src/Eagle_TRT.c **** 	accel->z -= accel->z_offset;
 1323              		.loc 1 467 0
 1324 0130 DAE90823 		ldrd	r2, [r10, #32]
 1325 0134 3046     		mov	r0, r6
 1326 0136 3946     		mov	r1, r7
 1327 0138 FFF7FEFF 		bl	__aeabi_dsub
 1328              	.LVL124:
 1329 013c CAE90201 		strd	r0, [r10, #8]
 468:Src/Eagle_TRT.c **** }
 1330              		.loc 1 468 0
 1331 0140 DAE90A23 		ldrd	r2, [r10, #40]
 1332 0144 2046     		mov	r0, r4
 1333 0146 2946     		mov	r1, r5
 1334 0148 FFF7FEFF 		bl	__aeabi_dsub
 1335              	.LVL125:
 1336 014c CAE90401 		strd	r0, [r10, #16]
ARM GAS  /tmp/ccU79PPY.s 			page 43


 1337 0150 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1338              	.LVL126:
 1339              	.L92:
 1340              		.align	2
 1341              	.L91:
 1342 0154 00000000 		.word	.LANCHOR29
 1343 0158 00000000 		.word	.LANCHOR30
 1344 015c 00000000 		.word	.LANCHOR31
 1345 0160 00000000 		.word	.LANCHOR32
 1346 0164 00000000 		.word	.LANCHOR33
 1347 0168 00000000 		.word	.LANCHOR34
 1348 016c 0000E040 		.word	1088421888
 1349 0170 0000F040 		.word	1089470464
 1350 0174 00000038 		.word	939524096
 1351              		.cfi_endproc
 1352              	.LFE138:
 1354              		.global	__aeabi_dadd
 1355              		.global	__aeabi_ddiv
 1356              		.section	.text.LSM9DS0_calibration,"ax",%progbits
 1357              		.align	1
 1358              		.global	LSM9DS0_calibration
 1359              		.syntax unified
 1360              		.thumb
 1361              		.thumb_func
 1362              		.fpu fpv4-sp-d16
 1364              	LSM9DS0_calibration:
 1365              	.LFB135:
 315:Src/Eagle_TRT.c **** 	double x = 0, y = 0, z = 0;
 1366              		.loc 1 315 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 0
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370              	.LVL127:
 1371 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1372              	.LCFI16:
 1373              		.cfi_def_cfa_offset 40
 1374              		.cfi_offset 3, -40
 1375              		.cfi_offset 4, -36
 1376              		.cfi_offset 5, -32
 1377              		.cfi_offset 6, -28
 1378              		.cfi_offset 7, -24
 1379              		.cfi_offset 8, -20
 1380              		.cfi_offset 9, -16
 1381              		.cfi_offset 10, -12
 1382              		.cfi_offset 11, -8
 1383              		.cfi_offset 14, -4
 1384 0004 8246     		mov	r10, r0
 1385              	.LVL128:
 1386              	.LBB4:
 318:Src/Eagle_TRT.c **** 	{
 1387              		.loc 1 318 0
 1388 0006 4FF0000B 		mov	fp, #0
 1389              	.LBE4:
 316:Src/Eagle_TRT.c **** 	int iterations = 200;
 1390              		.loc 1 316 0
 1391 000a 0024     		movs	r4, #0
 1392 000c 0025     		movs	r5, #0
ARM GAS  /tmp/ccU79PPY.s 			page 44


 1393 000e 2646     		mov	r6, r4
 1394 0010 2F46     		mov	r7, r5
 1395 0012 A046     		mov	r8, r4
 1396 0014 A946     		mov	r9, r5
 1397              	.LBB5:
 318:Src/Eagle_TRT.c **** 	{
 1398              		.loc 1 318 0
 1399 0016 1FE0     		b	.L94
 1400              	.LVL129:
 1401              	.L95:
 320:Src/Eagle_TRT.c **** 		//imu_elaborate_data(imu);
 1402              		.loc 1 320 0 discriminator 3
 1403 0018 5046     		mov	r0, r10
 1404 001a FFF7FEFF 		bl	LSMD9S0_accel_read
 1405              	.LVL130:
 322:Src/Eagle_TRT.c **** 		y += imu->y;
 1406              		.loc 1 322 0 discriminator 3
 1407 001e DAE90023 		ldrd	r2, [r10]
 1408 0022 4046     		mov	r0, r8
 1409 0024 4946     		mov	r1, r9
 1410 0026 FFF7FEFF 		bl	__aeabi_dadd
 1411              	.LVL131:
 1412 002a 8046     		mov	r8, r0
 1413              	.LVL132:
 1414 002c 8946     		mov	r9, r1
 1415              	.LVL133:
 323:Src/Eagle_TRT.c **** 		z += imu->z;
 1416              		.loc 1 323 0 discriminator 3
 1417 002e DAE90223 		ldrd	r2, [r10, #8]
 1418 0032 3046     		mov	r0, r6
 1419 0034 3946     		mov	r1, r7
 1420 0036 FFF7FEFF 		bl	__aeabi_dadd
 1421              	.LVL134:
 1422 003a 0646     		mov	r6, r0
 1423              	.LVL135:
 1424 003c 0F46     		mov	r7, r1
 1425              	.LVL136:
 324:Src/Eagle_TRT.c **** 		HAL_Delay(1);
 1426              		.loc 1 324 0 discriminator 3
 1427 003e DAE90423 		ldrd	r2, [r10, #16]
 1428 0042 2046     		mov	r0, r4
 1429 0044 2946     		mov	r1, r5
 1430 0046 FFF7FEFF 		bl	__aeabi_dadd
 1431              	.LVL137:
 1432 004a 0446     		mov	r4, r0
 1433              	.LVL138:
 1434 004c 0D46     		mov	r5, r1
 1435              	.LVL139:
 325:Src/Eagle_TRT.c **** 	}
 1436              		.loc 1 325 0 discriminator 3
 1437 004e 0120     		movs	r0, #1
 1438 0050 FFF7FEFF 		bl	HAL_Delay
 1439              	.LVL140:
 318:Src/Eagle_TRT.c **** 	{
 1440              		.loc 1 318 0 discriminator 3
 1441 0054 0BF1010B 		add	fp, fp, #1
 1442              	.LVL141:
ARM GAS  /tmp/ccU79PPY.s 			page 45


 1443              	.L94:
 318:Src/Eagle_TRT.c **** 	{
 1444              		.loc 1 318 0 is_stmt 0 discriminator 1
 1445 0058 BBF1C70F 		cmp	fp, #199
 1446 005c DCDD     		ble	.L95
 1447              	.LBE5:
 328:Src/Eagle_TRT.c **** 	imu->y_offset = y / iterations;
 1448              		.loc 1 328 0 is_stmt 1
 1449 005e 0022     		movs	r2, #0
 1450 0060 0D4B     		ldr	r3, .L97
 1451 0062 4046     		mov	r0, r8
 1452 0064 4946     		mov	r1, r9
 1453 0066 FFF7FEFF 		bl	__aeabi_ddiv
 1454              	.LVL142:
 1455 006a CAE90601 		strd	r0, [r10, #24]
 329:Src/Eagle_TRT.c **** 	imu->z_offset = z / iterations;
 1456              		.loc 1 329 0
 1457 006e 0022     		movs	r2, #0
 1458 0070 094B     		ldr	r3, .L97
 1459 0072 3046     		mov	r0, r6
 1460 0074 3946     		mov	r1, r7
 1461 0076 FFF7FEFF 		bl	__aeabi_ddiv
 1462              	.LVL143:
 1463 007a CAE90801 		strd	r0, [r10, #32]
 330:Src/Eagle_TRT.c **** 
 1464              		.loc 1 330 0
 1465 007e 0022     		movs	r2, #0
 1466 0080 054B     		ldr	r3, .L97
 1467 0082 2046     		mov	r0, r4
 1468 0084 2946     		mov	r1, r5
 1469 0086 FFF7FEFF 		bl	__aeabi_ddiv
 1470              	.LVL144:
 1471 008a CAE90A01 		strd	r0, [r10, #40]
 332:Src/Eagle_TRT.c **** }
 1472              		.loc 1 332 0
 1473 008e 0123     		movs	r3, #1
 1474 0090 CAF81032 		str	r3, [r10, #528]
 1475 0094 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1476              	.LVL145:
 1477              	.L98:
 1478              		.align	2
 1479              	.L97:
 1480 0098 00006940 		.word	1080623104
 1481              		.cfi_endproc
 1482              	.LFE135:
 1484              		.section	.text.CAN_Send,"ax",%progbits
 1485              		.align	1
 1486              		.global	CAN_Send
 1487              		.syntax unified
 1488              		.thumb
 1489              		.thumb_func
 1490              		.fpu fpv4-sp-d16
 1492              	CAN_Send:
 1493              	.LFB139:
 482:Src/Eagle_TRT.c **** 
 1494              		.loc 1 482 0
 1495              		.cfi_startproc
ARM GAS  /tmp/ccU79PPY.s 			page 46


 1496              		@ args = 0, pretend = 0, frame = 32
 1497              		@ frame_needed = 0, uses_anonymous_args = 0
 1498              	.LVL146:
 1499 0000 10B5     		push	{r4, lr}
 1500              	.LCFI17:
 1501              		.cfi_def_cfa_offset 8
 1502              		.cfi_offset 4, -8
 1503              		.cfi_offset 14, -4
 1504 0002 88B0     		sub	sp, sp, #32
 1505              	.LCFI18:
 1506              		.cfi_def_cfa_offset 40
 1507 0004 0446     		mov	r4, r0
 1508              	.LVL147:
 488:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 1509              		.loc 1 488 0
 1510 0006 0368     		ldr	r3, [r0]
 1511 0008 0193     		str	r3, [sp, #4]
 489:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 1512              		.loc 1 489 0
 1513 000a 0023     		movs	r3, #0
 1514 000c 0393     		str	r3, [sp, #12]
 490:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 1515              		.loc 1 490 0
 1516 000e 0493     		str	r3, [sp, #16]
 491:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 1517              		.loc 1 491 0
 1518 0010 4268     		ldr	r2, [r0, #4]
 1519 0012 0592     		str	r2, [sp, #20]
 492:Src/Eagle_TRT.c **** 
 1520              		.loc 1 492 0
 1521 0014 8DF81830 		strb	r3, [sp, #24]
 494:Src/Eagle_TRT.c **** 	{
 1522              		.loc 1 494 0
 1523 0018 8069     		ldr	r0, [r0, #24]
 1524              	.LVL148:
 1525 001a FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1526              	.LVL149:
 1527 001e 10B9     		cbnz	r0, .L104
 485:Src/Eagle_TRT.c **** 
 1528              		.loc 1 485 0
 1529 0020 0020     		movs	r0, #0
 1530              	.LVL150:
 1531              	.L100:
 501:Src/Eagle_TRT.c **** 
 1532              		.loc 1 501 0
 1533 0022 08B0     		add	sp, sp, #32
 1534              	.LCFI19:
 1535              		.cfi_remember_state
 1536              		.cfi_def_cfa_offset 8
 1537              		@ sp needed
 1538 0024 10BD     		pop	{r4, pc}
 1539              	.LVL151:
 1540              	.L104:
 1541              	.LCFI20:
 1542              		.cfi_restore_state
 494:Src/Eagle_TRT.c **** 	{
 1543              		.loc 1 494 0 discriminator 1
ARM GAS  /tmp/ccU79PPY.s 			page 47


 1544 0026 0121     		movs	r1, #1
 1545 0028 A069     		ldr	r0, [r4, #24]
 1546 002a FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 1547              	.LVL152:
 1548 002e 08B1     		cbz	r0, .L105
 485:Src/Eagle_TRT.c **** 
 1549              		.loc 1 485 0
 1550 0030 0020     		movs	r0, #0
 1551 0032 F6E7     		b	.L100
 1552              	.L105:
 496:Src/Eagle_TRT.c **** 		flag = 1;
 1553              		.loc 1 496 0
 1554 0034 07AB     		add	r3, sp, #28
 1555 0036 04F10802 		add	r2, r4, #8
 1556 003a 01A9     		add	r1, sp, #4
 1557 003c A069     		ldr	r0, [r4, #24]
 1558 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1559              	.LVL153:
 497:Src/Eagle_TRT.c **** 	}
 1560              		.loc 1 497 0
 1561 0042 0120     		movs	r0, #1
 1562 0044 EDE7     		b	.L100
 1563              		.cfi_endproc
 1564              	.LFE139:
 1566              		.section	.text.CAN_Receive,"ax",%progbits
 1567              		.align	1
 1568              		.global	CAN_Receive
 1569              		.syntax unified
 1570              		.thumb
 1571              		.thumb_func
 1572              		.fpu fpv4-sp-d16
 1574              	CAN_Receive:
 1575              	.LFB140:
 509:Src/Eagle_TRT.c **** 
 1576              		.loc 1 509 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 32
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580              	.LVL154:
 1581 0000 10B5     		push	{r4, lr}
 1582              	.LCFI21:
 1583              		.cfi_def_cfa_offset 8
 1584              		.cfi_offset 4, -8
 1585              		.cfi_offset 14, -4
 1586 0002 88B0     		sub	sp, sp, #32
 1587              	.LCFI22:
 1588              		.cfi_def_cfa_offset 40
 1589 0004 0446     		mov	r4, r0
 513:Src/Eagle_TRT.c **** 	{
 1590              		.loc 1 513 0
 1591 0006 0021     		movs	r1, #0
 1592 0008 8069     		ldr	r0, [r0, #24]
 1593              	.LVL155:
 1594 000a FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 1595              	.LVL156:
 1596 000e 10B9     		cbnz	r0, .L109
 1597              	.L107:
ARM GAS  /tmp/ccU79PPY.s 			page 48


 1598              	.LVL157:
 521:Src/Eagle_TRT.c **** #endif
 1599              		.loc 1 521 0
 1600 0010 0198     		ldr	r0, [sp, #4]
 1601 0012 08B0     		add	sp, sp, #32
 1602              	.LCFI23:
 1603              		.cfi_remember_state
 1604              		.cfi_def_cfa_offset 8
 1605              		@ sp needed
 1606 0014 10BD     		pop	{r4, pc}
 1607              	.LVL158:
 1608              	.L109:
 1609              	.LCFI24:
 1610              		.cfi_restore_state
 515:Src/Eagle_TRT.c **** 	}
 1611              		.loc 1 515 0
 1612 0016 04F11003 		add	r3, r4, #16
 1613 001a 01AA     		add	r2, sp, #4
 1614 001c 0021     		movs	r1, #0
 1615 001e A069     		ldr	r0, [r4, #24]
 1616 0020 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1617              	.LVL159:
 1618 0024 F4E7     		b	.L107
 1619              		.cfi_endproc
 1620              	.LFE140:
 1622              		.section	.text.init,"ax",%progbits
 1623              		.align	1
 1624              		.global	init
 1625              		.syntax unified
 1626              		.thumb
 1627              		.thumb_func
 1628              		.fpu fpv4-sp-d16
 1630              	init:
 1631              	.LFB142:
 536:Src/Eagle_TRT.c **** 
 1632              		.loc 1 536 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636              		@ link register save eliminated.
 1637              	.LVL160:
 538:Src/Eagle_TRT.c **** 	q->dim = 40;
 1638              		.loc 1 538 0
 1639 0000 0023     		movs	r3, #0
 1640 0002 0360     		str	r3, [r0]
 1641 0004 4360     		str	r3, [r0, #4]
 539:Src/Eagle_TRT.c **** }
 1642              		.loc 1 539 0
 1643 0006 2823     		movs	r3, #40
 1644 0008 8360     		str	r3, [r0, #8]
 1645 000a 7047     		bx	lr
 1646              		.cfi_endproc
 1647              	.LFE142:
 1649              		.section	.text.push,"ax",%progbits
 1650              		.align	1
 1651              		.global	push
 1652              		.syntax unified
ARM GAS  /tmp/ccU79PPY.s 			page 49


 1653              		.thumb
 1654              		.thumb_func
 1655              		.fpu fpv4-sp-d16
 1657              	push:
 1658              	.LFB145:
 555:Src/Eagle_TRT.c **** 	int res;
 1659              		.loc 1 555 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663              	.LVL161:
 1664 0000 70B5     		push	{r4, r5, r6, lr}
 1665              	.LCFI25:
 1666              		.cfi_def_cfa_offset 16
 1667              		.cfi_offset 4, -16
 1668              		.cfi_offset 5, -12
 1669              		.cfi_offset 6, -8
 1670              		.cfi_offset 14, -4
 1671 0002 0646     		mov	r6, r0
 1672 0004 0C46     		mov	r4, r1
 557:Src/Eagle_TRT.c **** 	{
 1673              		.loc 1 557 0
 1674 0006 0846     		mov	r0, r1
 1675              	.LVL162:
 1676 0008 FFF7FEFF 		bl	fullp
 1677              	.LVL163:
 1678 000c 08B1     		cbz	r0, .L116
 559:Src/Eagle_TRT.c **** 	}
 1679              		.loc 1 559 0
 1680 000e 0020     		movs	r0, #0
 1681              	.LVL164:
 579:Src/Eagle_TRT.c **** 
 1682              		.loc 1 579 0
 1683 0010 70BD     		pop	{r4, r5, r6, pc}
 1684              	.LVL165:
 1685              	.L116:
 1686              	.LBB6:
 563:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 1687              		.loc 1 563 0
 1688 0012 3046     		mov	r0, r6
 1689 0014 FFF7FEFF 		bl	strlen
 1690              	.LVL166:
 564:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 1691              		.loc 1 564 0
 1692 0018 6568     		ldr	r5, [r4, #4]
 1693 001a FFF7FEFF 		bl	malloc
 1694              	.LVL167:
 1695 001e 0235     		adds	r5, r5, #2
 1696 0020 04EB8505 		add	r5, r4, r5, lsl #2
 1697 0024 6860     		str	r0, [r5, #4]
 565:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 1698              		.loc 1 565 0
 1699 0026 3146     		mov	r1, r6
 1700 0028 FFF7FEFF 		bl	strcpy
 1701              	.LVL168:
 567:Src/Eagle_TRT.c **** 		{
 1702              		.loc 1 567 0
ARM GAS  /tmp/ccU79PPY.s 			page 50


 1703 002c 6368     		ldr	r3, [r4, #4]
 1704 002e 272B     		cmp	r3, #39
 1705 0030 03D0     		beq	.L117
 573:Src/Eagle_TRT.c **** 		}
 1706              		.loc 1 573 0
 1707 0032 0133     		adds	r3, r3, #1
 1708 0034 6360     		str	r3, [r4, #4]
 575:Src/Eagle_TRT.c **** 	}
 1709              		.loc 1 575 0
 1710 0036 0120     		movs	r0, #1
 1711 0038 70BD     		pop	{r4, r5, r6, pc}
 1712              	.LVL169:
 1713              	.L117:
 569:Src/Eagle_TRT.c **** 		}
 1714              		.loc 1 569 0
 1715 003a 0023     		movs	r3, #0
 1716 003c 6360     		str	r3, [r4, #4]
 575:Src/Eagle_TRT.c **** 	}
 1717              		.loc 1 575 0
 1718 003e 0120     		movs	r0, #1
 1719 0040 70BD     		pop	{r4, r5, r6, pc}
 1720              	.LBE6:
 1721              		.cfi_endproc
 1722              	.LFE145:
 1724              		.section	.text.pop,"ax",%progbits
 1725              		.align	1
 1726              		.global	pop
 1727              		.syntax unified
 1728              		.thumb
 1729              		.thumb_func
 1730              		.fpu fpv4-sp-d16
 1732              	pop:
 1733              	.LFB146:
 582:Src/Eagle_TRT.c **** 	int res;
 1734              		.loc 1 582 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 0, uses_anonymous_args = 0
 1738              	.LVL170:
 1739 0000 38B5     		push	{r3, r4, r5, lr}
 1740              	.LCFI26:
 1741              		.cfi_def_cfa_offset 16
 1742              		.cfi_offset 3, -16
 1743              		.cfi_offset 4, -12
 1744              		.cfi_offset 5, -8
 1745              		.cfi_offset 14, -4
 1746 0002 0546     		mov	r5, r0
 1747 0004 0C46     		mov	r4, r1
 584:Src/Eagle_TRT.c **** 	{
 1748              		.loc 1 584 0
 1749 0006 0846     		mov	r0, r1
 1750              	.LVL171:
 1751 0008 FFF7FEFF 		bl	emptyp
 1752              	.LVL172:
 1753 000c 08B1     		cbz	r0, .L123
 586:Src/Eagle_TRT.c **** 	}
 1754              		.loc 1 586 0
ARM GAS  /tmp/ccU79PPY.s 			page 51


 1755 000e 0020     		movs	r0, #0
 1756              	.LVL173:
 605:Src/Eagle_TRT.c **** /// ---- end queue ----///
 1757              		.loc 1 605 0
 1758 0010 38BD     		pop	{r3, r4, r5, pc}
 1759              	.LVL174:
 1760              	.L123:
 590:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 1761              		.loc 1 590 0
 1762 0012 2368     		ldr	r3, [r4]
 1763 0014 0233     		adds	r3, r3, #2
 1764 0016 04EB8303 		add	r3, r4, r3, lsl #2
 1765 001a 5968     		ldr	r1, [r3, #4]
 1766 001c 2846     		mov	r0, r5
 1767 001e FFF7FEFF 		bl	strcpy
 1768              	.LVL175:
 591:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 1769              		.loc 1 591 0
 1770 0022 2368     		ldr	r3, [r4]
 1771 0024 0233     		adds	r3, r3, #2
 1772 0026 04EB8303 		add	r3, r4, r3, lsl #2
 1773 002a 5868     		ldr	r0, [r3, #4]
 1774 002c FFF7FEFF 		bl	free
 1775              	.LVL176:
 593:Src/Eagle_TRT.c **** 		{
 1776              		.loc 1 593 0
 1777 0030 2368     		ldr	r3, [r4]
 1778 0032 272B     		cmp	r3, #39
 1779 0034 03D0     		beq	.L124
 599:Src/Eagle_TRT.c **** 		}
 1780              		.loc 1 599 0
 1781 0036 0133     		adds	r3, r3, #1
 1782 0038 2360     		str	r3, [r4]
 601:Src/Eagle_TRT.c **** 	}
 1783              		.loc 1 601 0
 1784 003a 0120     		movs	r0, #1
 1785 003c 38BD     		pop	{r3, r4, r5, pc}
 1786              	.LVL177:
 1787              	.L124:
 595:Src/Eagle_TRT.c **** 		}
 1788              		.loc 1 595 0
 1789 003e 0023     		movs	r3, #0
 1790 0040 2360     		str	r3, [r4]
 601:Src/Eagle_TRT.c **** 	}
 1791              		.loc 1 601 0
 1792 0042 0120     		movs	r0, #1
 1793 0044 38BD     		pop	{r3, r4, r5, pc}
 1794              		.cfi_endproc
 1795              	.LFE146:
 1797              		.section	.text.print,"ax",%progbits
 1798              		.align	1
 1799              		.global	print
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1803              		.fpu fpv4-sp-d16
 1805              	print:
ARM GAS  /tmp/ccU79PPY.s 			page 52


 1806              	.LFB147:
 610:Src/Eagle_TRT.c **** 
 1807              		.loc 1 610 0
 1808              		.cfi_startproc
 1809              		@ args = 0, pretend = 0, frame = 0
 1810              		@ frame_needed = 0, uses_anonymous_args = 0
 1811              	.LVL178:
 1812 0000 38B5     		push	{r3, r4, r5, lr}
 1813              	.LCFI27:
 1814              		.cfi_def_cfa_offset 16
 1815              		.cfi_offset 3, -16
 1816              		.cfi_offset 4, -12
 1817              		.cfi_offset 5, -8
 1818              		.cfi_offset 14, -4
 1819 0002 0546     		mov	r5, r0
 1820 0004 0C46     		mov	r4, r1
 1821              	.LVL179:
 614:Src/Eagle_TRT.c **** 	{
 1822              		.loc 1 614 0
 1823 0006 0846     		mov	r0, r1
 1824              	.LVL180:
 1825 0008 FFF7FEFF 		bl	strlen
 1826              	.LVL181:
 1827 000c 82B2     		uxth	r2, r0
 1828 000e 2146     		mov	r1, r4
 1829 0010 2846     		mov	r0, r5
 1830 0012 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 1831              	.LVL182:
 1832 0016 10B9     		cbnz	r0, .L130
 616:Src/Eagle_TRT.c **** 	}
 1833              		.loc 1 616 0
 1834 0018 0123     		movs	r3, #1
 1835              	.LVL183:
 1836              	.L125:
 631:Src/Eagle_TRT.c **** 
 1837              		.loc 1 631 0
 1838 001a 1846     		mov	r0, r3
 1839 001c 38BD     		pop	{r3, r4, r5, pc}
 1840              	.LVL184:
 1841              	.L130:
 620:Src/Eagle_TRT.c **** 		{
 1842              		.loc 1 620 0
 1843 001e 0449     		ldr	r1, .L131
 1844 0020 2046     		mov	r0, r4
 1845 0022 FFF7FEFF 		bl	push
 1846              	.LVL185:
 1847 0026 0346     		mov	r3, r0
 1848 0028 0028     		cmp	r0, #0
 1849 002a F6D0     		beq	.L125
 626:Src/Eagle_TRT.c **** 		}
 1850              		.loc 1 626 0
 1851 002c 0123     		movs	r3, #1
 1852              	.LVL186:
 630:Src/Eagle_TRT.c **** }
 1853              		.loc 1 630 0
 1854 002e F4E7     		b	.L125
 1855              	.L132:
ARM GAS  /tmp/ccU79PPY.s 			page 53


 1856              		.align	2
 1857              	.L131:
 1858 0030 00000000 		.word	.LANCHOR35
 1859              		.cfi_endproc
 1860              	.LFE147:
 1862              		.section	.text.print_it,"ax",%progbits
 1863              		.align	1
 1864              		.global	print_it
 1865              		.syntax unified
 1866              		.thumb
 1867              		.thumb_func
 1868              		.fpu fpv4-sp-d16
 1870              	print_it:
 1871              	.LFB148:
 634:Src/Eagle_TRT.c **** 
 1872              		.loc 1 634 0
 1873              		.cfi_startproc
 1874              		@ args = 0, pretend = 0, frame = 56
 1875              		@ frame_needed = 0, uses_anonymous_args = 0
 1876              	.LVL187:
 1877 0000 10B5     		push	{r4, lr}
 1878              	.LCFI28:
 1879              		.cfi_def_cfa_offset 8
 1880              		.cfi_offset 4, -8
 1881              		.cfi_offset 14, -4
 1882 0002 8EB0     		sub	sp, sp, #56
 1883              	.LCFI29:
 1884              		.cfi_def_cfa_offset 64
 1885 0004 0446     		mov	r4, r0
 638:Src/Eagle_TRT.c **** 	{
 1886              		.loc 1 638 0
 1887 0006 0849     		ldr	r1, .L137
 1888 0008 01A8     		add	r0, sp, #4
 1889              	.LVL188:
 1890 000a FFF7FEFF 		bl	pop
 1891              	.LVL189:
 1892 000e 0128     		cmp	r0, #1
 1893 0010 01D0     		beq	.L136
 1894              	.L133:
 642:Src/Eagle_TRT.c **** 
 1895              		.loc 1 642 0
 1896 0012 0EB0     		add	sp, sp, #56
 1897              	.LCFI30:
 1898              		.cfi_remember_state
 1899              		.cfi_def_cfa_offset 8
 1900              		@ sp needed
 1901 0014 10BD     		pop	{r4, pc}
 1902              	.LVL190:
 1903              	.L136:
 1904              	.LCFI31:
 1905              		.cfi_restore_state
 640:Src/Eagle_TRT.c **** 	}
 1906              		.loc 1 640 0
 1907 0016 01A8     		add	r0, sp, #4
 1908 0018 FFF7FEFF 		bl	strlen
 1909              	.LVL191:
 1910 001c 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccU79PPY.s 			page 54


 1911 001e 01A9     		add	r1, sp, #4
 1912 0020 2046     		mov	r0, r4
 1913 0022 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 1914              	.LVL192:
 642:Src/Eagle_TRT.c **** 
 1915              		.loc 1 642 0
 1916 0026 F4E7     		b	.L133
 1917              	.L138:
 1918              		.align	2
 1919              	.L137:
 1920 0028 00000000 		.word	.LANCHOR35
 1921              		.cfi_endproc
 1922              	.LFE148:
 1924              		.section	.text.gps_init,"ax",%progbits
 1925              		.align	1
 1926              		.global	gps_init
 1927              		.syntax unified
 1928              		.thumb
 1929              		.thumb_func
 1930              		.fpu fpv4-sp-d16
 1932              	gps_init:
 1933              	.LFB149:
 664:Src/Eagle_TRT.c **** 
 1934              		.loc 1 664 0
 1935              		.cfi_startproc
 1936              		@ args = 0, pretend = 0, frame = 0
 1937              		@ frame_needed = 0, uses_anonymous_args = 0
 1938              	.LVL193:
 1939 0000 70B5     		push	{r4, r5, r6, lr}
 1940              	.LCFI32:
 1941              		.cfi_def_cfa_offset 16
 1942              		.cfi_offset 4, -16
 1943              		.cfi_offset 5, -12
 1944              		.cfi_offset 6, -8
 1945              		.cfi_offset 14, -4
 1946 0002 0C46     		mov	r4, r1
 667:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 1947              		.loc 1 667 0
 1948 0004 3D4D     		ldr	r5, .L141
 1949 0006 2860     		str	r0, [r5]
 668:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1950              		.loc 1 668 0
 1951 0008 4FF41652 		mov	r2, #9600
 1952 000c 4260     		str	r2, [r0, #4]
 669:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1953              		.loc 1 669 0
 1954 000e FFF7FEFF 		bl	HAL_UART_Init
 1955              	.LVL194:
 670:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1956              		.loc 1 670 0
 1957 0012 3B4E     		ldr	r6, .L141+4
 1958 0014 C823     		movs	r3, #200
 1959 0016 1422     		movs	r2, #20
 1960 0018 3146     		mov	r1, r6
 1961 001a 2868     		ldr	r0, [r5]
 1962 001c FFF7FEFF 		bl	HAL_UART_Transmit
 1963              	.LVL195:
ARM GAS  /tmp/ccU79PPY.s 			page 55


 671:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 1964              		.loc 1 671 0
 1965 0020 4FF4FA70 		mov	r0, #500
 1966 0024 FFF7FEFF 		bl	HAL_Delay
 1967              	.LVL196:
 672:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1968              		.loc 1 672 0
 1969 0028 2868     		ldr	r0, [r5]
 1970 002a 4FF46143 		mov	r3, #57600
 1971 002e 4360     		str	r3, [r0, #4]
 673:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1972              		.loc 1 673 0
 1973 0030 FFF7FEFF 		bl	HAL_UART_Init
 1974              	.LVL197:
 674:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1975              		.loc 1 674 0
 1976 0034 C823     		movs	r3, #200
 1977 0036 1422     		movs	r2, #20
 1978 0038 3146     		mov	r1, r6
 1979 003a 2868     		ldr	r0, [r5]
 1980 003c FFF7FEFF 		bl	HAL_UART_Transmit
 1981              	.LVL198:
 675:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 1982              		.loc 1 675 0
 1983 0040 4FF4FA70 		mov	r0, #500
 1984 0044 FFF7FEFF 		bl	HAL_Delay
 1985              	.LVL199:
 676:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1986              		.loc 1 676 0
 1987 0048 2868     		ldr	r0, [r5]
 1988 004a 4FF4E133 		mov	r3, #115200
 1989 004e 4360     		str	r3, [r0, #4]
 677:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1990              		.loc 1 677 0
 1991 0050 FFF7FEFF 		bl	HAL_UART_Init
 1992              	.LVL200:
 678:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1993              		.loc 1 678 0
 1994 0054 C823     		movs	r3, #200
 1995 0056 1422     		movs	r2, #20
 1996 0058 3146     		mov	r1, r6
 1997 005a 2868     		ldr	r0, [r5]
 1998 005c FFF7FEFF 		bl	HAL_UART_Transmit
 1999              	.LVL201:
 679:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 2000              		.loc 1 679 0
 2001 0060 4FF4FA70 		mov	r0, #500
 2002 0064 FFF7FEFF 		bl	HAL_Delay
 2003              	.LVL202:
 680:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 2004              		.loc 1 680 0
 2005 0068 C823     		movs	r3, #200
 2006 006a 1122     		movs	r2, #17
 2007 006c 2549     		ldr	r1, .L141+8
 2008 006e 2868     		ldr	r0, [r5]
 2009 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 2010              	.LVL203:
ARM GAS  /tmp/ccU79PPY.s 			page 56


 681:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 2011              		.loc 1 681 0
 2012 0074 4FF4FA70 		mov	r0, #500
 2013 0078 FFF7FEFF 		bl	HAL_Delay
 2014              	.LVL204:
 682:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 2015              		.loc 1 682 0
 2016 007c C823     		movs	r3, #200
 2017 007e 3322     		movs	r2, #51
 2018 0080 2149     		ldr	r1, .L141+12
 2019 0082 2868     		ldr	r0, [r5]
 2020 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 2021              	.LVL205:
 683:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 2022              		.loc 1 683 0
 2023 0088 4FF4FA70 		mov	r0, #500
 2024 008c FFF7FEFF 		bl	HAL_Delay
 2025              	.LVL206:
 684:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 2026              		.loc 1 684 0
 2027 0090 1E4B     		ldr	r3, .L141+16
 2028 0092 1868     		ldr	r0, [r3]
 2029 0094 2060     		str	r0, [r4]	@ unaligned
 2030 0096 9A88     		ldrh	r2, [r3, #4]	@ unaligned
 2031 0098 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2032 009a A280     		strh	r2, [r4, #4]	@ unaligned
 2033 009c A371     		strb	r3, [r4, #6]
 685:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 2034              		.loc 1 685 0
 2035 009e 1C4B     		ldr	r3, .L141+20
 2036 00a0 03CB     		ldmia	r3!, {r0, r1}
 2037 00a2 E060     		str	r0, [r4, #12]	@ unaligned
 2038 00a4 2161     		str	r1, [r4, #16]	@ unaligned
 2039 00a6 1B88     		ldrh	r3, [r3]	@ unaligned
 2040 00a8 A382     		strh	r3, [r4, #20]	@ unaligned
 686:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 2041              		.loc 1 686 0
 2042 00aa 1A4B     		ldr	r3, .L141+24
 2043 00ac 1B88     		ldrh	r3, [r3]	@ unaligned
 2044 00ae A383     		strh	r3, [r4, #28]	@ unaligned
 687:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 2045              		.loc 1 687 0
 2046 00b0 194B     		ldr	r3, .L141+28
 2047 00b2 03CB     		ldmia	r3!, {r0, r1}
 2048 00b4 E062     		str	r0, [r4, #44]	@ unaligned
 2049 00b6 2163     		str	r1, [r4, #48]	@ unaligned
 2050 00b8 1988     		ldrh	r1, [r3]	@ unaligned
 2051 00ba 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2052 00bc A186     		strh	r1, [r4, #52]	@ unaligned
 2053 00be 84F83630 		strb	r3, [r4, #54]
 688:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
 2054              		.loc 1 688 0
 2055 00c2 164B     		ldr	r3, .L141+32
 2056 00c4 1B88     		ldrh	r3, [r3]	@ unaligned
 2057 00c6 A387     		strh	r3, [r4, #60]	@ unaligned
 689:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 2058              		.loc 1 689 0
ARM GAS  /tmp/ccU79PPY.s 			page 57


 2059 00c8 154B     		ldr	r3, .L141+36
 2060 00ca 1868     		ldr	r0, [r3]
 2061 00cc E064     		str	r0, [r4, #76]	@ unaligned
 2062 00ce 9988     		ldrh	r1, [r3, #4]	@ unaligned
 2063 00d0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2064 00d2 A4F85010 		strh	r1, [r4, #80]	@ unaligned
 2065 00d6 84F85230 		strb	r3, [r4, #82]
 690:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 2066              		.loc 1 690 0
 2067 00da 124B     		ldr	r3, .L141+40
 2068 00dc 1868     		ldr	r0, [r3]
 2069 00de A065     		str	r0, [r4, #88]	@ unaligned
 2070 00e0 9988     		ldrh	r1, [r3, #4]	@ unaligned
 2071 00e2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2072 00e4 A4F85C10 		strh	r1, [r4, #92]	@ unaligned
 2073 00e8 84F85E30 		strb	r3, [r4, #94]
 691:Src/Eagle_TRT.c **** 
 2074              		.loc 1 691 0
 2075 00ec 0122     		movs	r2, #1
 2076 00ee 0E49     		ldr	r1, .L141+44
 2077 00f0 2868     		ldr	r0, [r5]
 2078 00f2 FFF7FEFF 		bl	HAL_UART_Receive_IT
 2079              	.LVL207:
 694:Src/Eagle_TRT.c **** 
 2080              		.loc 1 694 0
 2081 00f6 0120     		movs	r0, #1
 2082 00f8 70BD     		pop	{r4, r5, r6, pc}
 2083              	.LVL208:
 2084              	.L142:
 2085 00fa 00BF     		.align	2
 2086              	.L141:
 2087 00fc 00000000 		.word	huart_GPS
 2088 0100 00000000 		.word	.LC1
 2089 0104 18000000 		.word	.LC2
 2090 0108 2C000000 		.word	.LC3
 2091 010c 60000000 		.word	.LC4
 2092 0110 68000000 		.word	.LC5
 2093 0114 74000000 		.word	.LC6
 2094 0118 78000000 		.word	.LC7
 2095 011c 84000000 		.word	.LC8
 2096 0120 88000000 		.word	.LC9
 2097 0124 90000000 		.word	.LC10
 2098 0128 00000000 		.word	buffer_gps
 2099              		.cfi_endproc
 2100              	.LFE149:
 2102              		.global	__aeabi_d2iz
 2103              		.section	.text.gps_read_it,"ax",%progbits
 2104              		.align	1
 2105              		.global	gps_read_it
 2106              		.syntax unified
 2107              		.thumb
 2108              		.thumb_func
 2109              		.fpu fpv4-sp-d16
 2111              	gps_read_it:
 2112              	.LFB150:
 697:Src/Eagle_TRT.c **** 
 2113              		.loc 1 697 0
ARM GAS  /tmp/ccU79PPY.s 			page 58


 2114              		.cfi_startproc
 2115              		@ args = 0, pretend = 0, frame = 0
 2116              		@ frame_needed = 0, uses_anonymous_args = 0
 2117              	.LVL209:
 2118 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2119              	.LCFI33:
 2120              		.cfi_def_cfa_offset 24
 2121              		.cfi_offset 3, -24
 2122              		.cfi_offset 4, -20
 2123              		.cfi_offset 5, -16
 2124              		.cfi_offset 6, -12
 2125              		.cfi_offset 7, -8
 2126              		.cfi_offset 14, -4
 2127              	.LVL210:
 735:Src/Eagle_TRT.c **** 	{
 2128              		.loc 1 735 0
 2129 0002 A34B     		ldr	r3, .L197+16
 2130 0004 1B68     		ldr	r3, [r3]
 2131 0006 8342     		cmp	r3, r0
 2132 0008 02D0     		beq	.L179
 699:Src/Eagle_TRT.c **** 
 2133              		.loc 1 699 0
 2134 000a 0024     		movs	r4, #0
 2135              	.LVL211:
 2136              	.L143:
 897:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
 2137              		.loc 1 897 0
 2138 000c 2046     		mov	r0, r4
 2139 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2140              	.LVL212:
 2141              	.L179:
 2142 0010 0D46     		mov	r5, r1
 738:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 2143              		.loc 1 738 0
 2144 0012 A04C     		ldr	r4, .L197+20
 2145 0014 0122     		movs	r2, #1
 2146 0016 2146     		mov	r1, r4
 2147              	.LVL213:
 2148 0018 1846     		mov	r0, r3
 2149              	.LVL214:
 2150 001a FFF7FEFF 		bl	HAL_UART_Receive_IT
 2151              	.LVL215:
 739:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 2152              		.loc 1 739 0
 2153 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2154 0020 9D4A     		ldr	r2, .L197+24
 2155 0022 1370     		strb	r3, [r2]
 740:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 2156              		.loc 1 740 0
 2157 0024 9D4A     		ldr	r2, .L197+28
 2158 0026 1268     		ldr	r2, [r2]
 2159 0028 012A     		cmp	r2, #1
 2160 002a 04D0     		beq	.L180
 2161              	.L145:
 889:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 2162              		.loc 1 889 0
 2163 002c 242B     		cmp	r3, #36
ARM GAS  /tmp/ccU79PPY.s 			page 59


 2164 002e 00F07781 		beq	.L181
 699:Src/Eagle_TRT.c **** 
 2165              		.loc 1 699 0
 2166 0032 0024     		movs	r4, #0
 896:Src/Eagle_TRT.c **** }
 2167              		.loc 1 896 0
 2168 0034 EAE7     		b	.L143
 2169              	.L180:
 740:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 2170              		.loc 1 740 0 discriminator 1
 2171 0036 242B     		cmp	r3, #36
 2172 0038 F8D0     		beq	.L145
 742:Src/Eagle_TRT.c **** 			cont_string++;
 2173              		.loc 1 742 0
 2174 003a 994A     		ldr	r2, .L197+32
 2175 003c 1168     		ldr	r1, [r2]
 2176 003e 9948     		ldr	r0, .L197+36
 2177 0040 4354     		strb	r3, [r0, r1]
 743:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 2178              		.loc 1 743 0
 2179 0042 481C     		adds	r0, r1, #1
 2180 0044 1060     		str	r0, [r2]
 744:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 2181              		.loc 1 744 0
 2182 0046 0D2B     		cmp	r3, #13
 2183 0048 03D0     		beq	.L146
 744:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 2184              		.loc 1 744 0 is_stmt 0 discriminator 1
 2185 004a 0A2B     		cmp	r3, #10
 2186 004c 01D0     		beq	.L146
 699:Src/Eagle_TRT.c **** 
 2187              		.loc 1 699 0 is_stmt 1
 2188 004e 0024     		movs	r4, #0
 2189 0050 DCE7     		b	.L143
 2190              	.L146:
 746:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 2191              		.loc 1 746 0
 2192 0052 934B     		ldr	r3, .L197+32
 2193 0054 1960     		str	r1, [r3]
 747:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 2194              		.loc 1 747 0
 2195 0056 934B     		ldr	r3, .L197+36
 2196 0058 0022     		movs	r2, #0
 2197 005a 5A54     		strb	r2, [r3, r1]
 748:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 2198              		.loc 1 748 0
 2199 005c 8F48     		ldr	r0, .L197+28
 2200 005e 0260     		str	r2, [r0]
 749:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 2201              		.loc 1 749 0
 2202 0060 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2203 0062 472B     		cmp	r3, #71
 2204 0064 04D0     		beq	.L182
 2205              	.L147:
 835:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2206              		.loc 1 835 0
 2207 0066 562B     		cmp	r3, #86
ARM GAS  /tmp/ccU79PPY.s 			page 60


 2208 0068 00F0C680 		beq	.L183
 699:Src/Eagle_TRT.c **** 
 2209              		.loc 1 699 0
 2210 006c 0024     		movs	r4, #0
 2211 006e CDE7     		b	.L143
 2212              	.L182:
 749:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 2213              		.loc 1 749 0 discriminator 1
 2214 0070 8C4A     		ldr	r2, .L197+36
 2215 0072 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 2216 0074 472A     		cmp	r2, #71
 2217 0076 F6D1     		bne	.L147
 749:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 2218              		.loc 1 749 0 is_stmt 0 discriminator 2
 2219 0078 8A4A     		ldr	r2, .L197+36
 2220 007a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2221 007c 412A     		cmp	r2, #65
 2222 007e F2D1     		bne	.L147
 751:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 2223              		.loc 1 751 0 is_stmt 1
 2224 0080 8848     		ldr	r0, .L197+36
 2225 0082 FFF7FEFF 		bl	checksum
 2226              	.LVL216:
 2227 0086 0128     		cmp	r0, #1
 2228 0088 3BD0     		beq	.L170
 832:Src/Eagle_TRT.c **** 					}
 2229              		.loc 1 832 0
 2230 008a 0024     		movs	r4, #0
 2231 008c BEE7     		b	.L143
 2232              	.LVL217:
 2233              	.L185:
 2234              	.LBB7:
 2235              	.LBB8:
 757:Src/Eagle_TRT.c **** 							else
 2236              		.loc 1 757 0
 2237 008e 0133     		adds	r3, r3, #1
 2238              	.LVL218:
 2239              	.L150:
 754:Src/Eagle_TRT.c **** 						{
 2240              		.loc 1 754 0 discriminator 2
 2241 0090 0130     		adds	r0, r0, #1
 2242              	.LVL219:
 2243              	.L148:
 754:Src/Eagle_TRT.c **** 						{
 2244              		.loc 1 754 0 is_stmt 0 discriminator 1
 2245 0092 6328     		cmp	r0, #99
 2246 0094 3CDC     		bgt	.L184
 756:Src/Eagle_TRT.c **** 								cont_comma++;
 2247              		.loc 1 756 0 is_stmt 1
 2248 0096 834A     		ldr	r2, .L197+36
 2249 0098 125C     		ldrb	r2, [r2, r0]	@ zero_extendqisi2
 2250 009a 2C2A     		cmp	r2, #44
 2251 009c F7D0     		beq	.L185
 760:Src/Eagle_TRT.c **** 								{ //save the time
 2252              		.loc 1 760 0
 2253 009e 012B     		cmp	r3, #1
 2254 00a0 07D0     		beq	.L186
ARM GAS  /tmp/ccU79PPY.s 			page 61


 765:Src/Eagle_TRT.c **** 								{ //save latitude
 2255              		.loc 1 765 0
 2256 00a2 022B     		cmp	r3, #2
 2257 00a4 0BD1     		bne	.L152
 767:Src/Eagle_TRT.c **** 									cont_latitude++;
 2258              		.loc 1 767 0
 2259 00a6 05EB040E 		add	lr, r5, r4
 2260 00aa 8EF80C20 		strb	r2, [lr, #12]
 768:Src/Eagle_TRT.c **** 								}
 2261              		.loc 1 768 0
 2262 00ae 0134     		adds	r4, r4, #1
 2263              	.LVL220:
 2264 00b0 EEE7     		b	.L150
 2265              	.L186:
 762:Src/Eagle_TRT.c **** 									cont_time++;
 2266              		.loc 1 762 0
 2267 00b2 05EB010E 		add	lr, r5, r1
 2268 00b6 8EF85820 		strb	r2, [lr, #88]
 763:Src/Eagle_TRT.c **** 								}
 2269              		.loc 1 763 0
 2270 00ba 0131     		adds	r1, r1, #1
 2271              	.LVL221:
 2272 00bc E8E7     		b	.L150
 2273              	.L152:
 770:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 2274              		.loc 1 770 0
 2275 00be 032B     		cmp	r3, #3
 2276 00c0 01D1     		bne	.L153
 772:Src/Eagle_TRT.c **** 								}
 2277              		.loc 1 772 0
 2278 00c2 2A77     		strb	r2, [r5, #28]
 2279 00c4 E4E7     		b	.L150
 2280              	.L153:
 774:Src/Eagle_TRT.c **** 								{ //save longitude
 2281              		.loc 1 774 0
 2282 00c6 042B     		cmp	r3, #4
 2283 00c8 0BD0     		beq	.L187
 779:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 2284              		.loc 1 779 0
 2285 00ca 052B     		cmp	r3, #5
 2286 00cc 0FD0     		beq	.L188
 783:Src/Eagle_TRT.c **** 								{
 2287              		.loc 1 783 0
 2288 00ce 062B     		cmp	r3, #6
 2289 00d0 10D0     		beq	.L189
 787:Src/Eagle_TRT.c **** 								{ //save altitude
 2290              		.loc 1 787 0
 2291 00d2 092B     		cmp	r3, #9
 2292 00d4 11D1     		bne	.L157
 789:Src/Eagle_TRT.c **** 									cont_altitude++;
 2293              		.loc 1 789 0
 2294 00d6 05EB070E 		add	lr, r5, r7
 2295 00da 8EF84C20 		strb	r2, [lr, #76]
 790:Src/Eagle_TRT.c **** 								}
 2296              		.loc 1 790 0
 2297 00de 0137     		adds	r7, r7, #1
 2298              	.LVL222:
ARM GAS  /tmp/ccU79PPY.s 			page 62


 2299 00e0 D6E7     		b	.L150
 2300              	.L187:
 776:Src/Eagle_TRT.c **** 									cont_longitude++;
 2301              		.loc 1 776 0
 2302 00e2 05EB060E 		add	lr, r5, r6
 2303 00e6 8EF82C20 		strb	r2, [lr, #44]
 777:Src/Eagle_TRT.c **** 								}
 2304              		.loc 1 777 0
 2305 00ea 0136     		adds	r6, r6, #1
 2306              	.LVL223:
 2307 00ec D0E7     		b	.L150
 2308              	.L188:
 781:Src/Eagle_TRT.c **** 								}
 2309              		.loc 1 781 0
 2310 00ee 85F83C20 		strb	r2, [r5, #60]
 2311 00f2 CDE7     		b	.L150
 2312              	.L189:
 785:Src/Eagle_TRT.c **** 								}
 2313              		.loc 1 785 0
 2314 00f4 85F86320 		strb	r2, [r5, #99]
 2315 00f8 CAE7     		b	.L150
 2316              	.L157:
 792:Src/Eagle_TRT.c **** 								{
 2317              		.loc 1 792 0
 2318 00fa 0A2B     		cmp	r3, #10
 2319 00fc C8D1     		bne	.L150
 794:Src/Eagle_TRT.c **** 								}
 2320              		.loc 1 794 0
 2321 00fe 6420     		movs	r0, #100
 2322              	.LVL224:
 2323 0100 C6E7     		b	.L150
 2324              	.LVL225:
 2325              	.L170:
 2326              	.LBE8:
 2327              	.LBE7:
 2328 0102 0520     		movs	r0, #5
 2329 0104 0021     		movs	r1, #0
 2330 0106 0F46     		mov	r7, r1
 2331 0108 0E46     		mov	r6, r1
 2332 010a 0C46     		mov	r4, r1
 2333 010c 0B46     		mov	r3, r1
 2334 010e C0E7     		b	.L148
 2335              	.LVL226:
 2336              	.L184:
 2337              	.LBB9:
 799:Src/Eagle_TRT.c **** 						{
 2338              		.loc 1 799 0
 2339 0110 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 2340              	.LVL227:
 2341 0114 302B     		cmp	r3, #48
 2342 0116 32D1     		bne	.L159
 801:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 2343              		.loc 1 801 0
 2344 0118 0023     		movs	r3, #0
 2345 011a 6B62     		str	r3, [r5, #36]
 802:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
 2346              		.loc 1 802 0
ARM GAS  /tmp/ccU79PPY.s 			page 63


 2347 011c AB62     		str	r3, [r5, #40]
 803:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 2348              		.loc 1 803 0
 2349 011e 6B64     		str	r3, [r5, #68]
 804:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 2350              		.loc 1 804 0
 2351 0120 AB64     		str	r3, [r5, #72]
 805:Src/Eagle_TRT.c **** 						}
 2352              		.loc 1 805 0
 2353 0122 6B65     		str	r3, [r5, #84]
 2354              	.LVL228:
 2355              	.L160:
 818:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 2356              		.loc 1 818 0
 2357 0124 6048     		ldr	r0, .L197+40
 2358 0126 0824     		movs	r4, #8
 2359              	.LVL229:
 2360 0128 0472     		strb	r4, [r0, #8]
 819:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 2361              		.loc 1 819 0
 2362 012a 6B6C     		ldr	r3, [r5, #68]
 2363 012c 4FF48072 		mov	r2, #256
 2364 0130 93FBF2F1 		sdiv	r1, r3, r2
 2365 0134 4172     		strb	r1, [r0, #9]
 820:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 2366              		.loc 1 820 0
 2367 0136 5942     		rsbs	r1, r3, #0
 2368 0138 DBB2     		uxtb	r3, r3
 2369 013a C9B2     		uxtb	r1, r1
 2370 013c 58BF     		it	pl
 2371 013e 4B42     		rsbpl	r3, r1, #0
 2372 0140 8372     		strb	r3, [r0, #10]
 821:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 2373              		.loc 1 821 0
 2374 0142 AB6C     		ldr	r3, [r5, #72]
 2375 0144 93FBF2F1 		sdiv	r1, r3, r2
 2376 0148 C172     		strb	r1, [r0, #11]
 822:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 2377              		.loc 1 822 0
 2378 014a 5942     		rsbs	r1, r3, #0
 2379 014c DBB2     		uxtb	r3, r3
 2380 014e C9B2     		uxtb	r1, r1
 2381 0150 58BF     		it	pl
 2382 0152 4B42     		rsbpl	r3, r1, #0
 2383 0154 0373     		strb	r3, [r0, #12]
 823:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 2384              		.loc 1 823 0
 2385 0156 05F13C03 		add	r3, r5, #60
 2386 015a 4373     		strb	r3, [r0, #13]
 824:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 2387              		.loc 1 824 0
 2388 015c 6B6D     		ldr	r3, [r5, #84]
 2389 015e 93FBF2F2 		sdiv	r2, r3, r2
 2390 0162 8273     		strb	r2, [r0, #14]
 825:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 2391              		.loc 1 825 0
 2392 0164 5A42     		rsbs	r2, r3, #0
ARM GAS  /tmp/ccU79PPY.s 			page 64


 2393 0166 DBB2     		uxtb	r3, r3
 2394 0168 D2B2     		uxtb	r2, r2
 2395 016a 58BF     		it	pl
 2396 016c 5342     		rsbpl	r3, r2, #0
 2397 016e C373     		strb	r3, [r0, #15]
 826:Src/Eagle_TRT.c **** 						can.size = 8;
 2398              		.loc 1 826 0
 2399 0170 D023     		movs	r3, #208
 2400 0172 0360     		str	r3, [r0]
 827:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 2401              		.loc 1 827 0
 2402 0174 4460     		str	r4, [r0, #4]
 828:Src/Eagle_TRT.c **** 					}
 2403              		.loc 1 828 0
 2404 0176 FFF7FEFF 		bl	CAN_Send
 2405              	.LVL230:
 2406              	.LBE9:
 699:Src/Eagle_TRT.c **** 
 2407              		.loc 1 699 0
 2408 017a 0024     		movs	r4, #0
 2409 017c 46E7     		b	.L143
 2410              	.LVL231:
 2411              	.L159:
 2412              	.LBB10:
 809:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 2413              		.loc 1 809 0
 2414 017e 05F10C00 		add	r0, r5, #12
 2415              	.LVL232:
 2416 0182 FFF7FEFF 		bl	atof
 2417              	.LVL233:
 2418 0186 3EA3     		adr	r3, .L197
 2419 0188 D3E90023 		ldrd	r2, [r3]
 2420 018c 51EC100B 		vmov	r0, r1, d0
 2421 0190 FFF7FEFF 		bl	__aeabi_dmul
 2422              	.LVL234:
 2423 0194 FFF7FEFF 		bl	__aeabi_d2iz
 2424              	.LVL235:
 2425 0198 2862     		str	r0, [r5, #32]
 810:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 2426              		.loc 1 810 0
 2427 019a 05F12C00 		add	r0, r5, #44
 2428 019e FFF7FEFF 		bl	atof
 2429              	.LVL236:
 2430 01a2 39A3     		adr	r3, .L197+8
 2431 01a4 D3E90023 		ldrd	r2, [r3]
 2432 01a8 51EC100B 		vmov	r0, r1, d0
 2433 01ac FFF7FEFF 		bl	__aeabi_dmul
 2434              	.LVL237:
 2435 01b0 FFF7FEFF 		bl	__aeabi_d2iz
 2436              	.LVL238:
 2437 01b4 2864     		str	r0, [r5, #64]
 811:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 2438              		.loc 1 811 0
 2439 01b6 05F14C00 		add	r0, r5, #76
 2440 01ba FFF7FEFF 		bl	atof
 2441              	.LVL239:
 2442 01be 0022     		movs	r2, #0
ARM GAS  /tmp/ccU79PPY.s 			page 65


 2443 01c0 3A4B     		ldr	r3, .L197+44
 2444 01c2 51EC100B 		vmov	r0, r1, d0
 2445 01c6 FFF7FEFF 		bl	__aeabi_dmul
 2446              	.LVL240:
 2447 01ca FFF7FEFF 		bl	__aeabi_d2iz
 2448              	.LVL241:
 2449 01ce 6865     		str	r0, [r5, #84]
 812:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 2450              		.loc 1 812 0
 2451 01d0 2A6A     		ldr	r2, [r5, #32]
 2452 01d2 42F21073 		movw	r3, #10000
 2453 01d6 92FBF3F3 		sdiv	r3, r2, r3
 2454 01da 6B62     		str	r3, [r5, #36]
 813:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 2455              		.loc 1 813 0
 2456 01dc 3449     		ldr	r1, .L197+48
 2457 01de 01FB0323 		mla	r3, r1, r3, r2
 2458 01e2 AB62     		str	r3, [r5, #40]
 814:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 2459              		.loc 1 814 0
 2460 01e4 2A6C     		ldr	r2, [r5, #64]
 2461 01e6 334B     		ldr	r3, .L197+52
 2462 01e8 92FBF3F3 		sdiv	r3, r2, r3
 2463 01ec 6B64     		str	r3, [r5, #68]
 815:Src/Eagle_TRT.c **** 						}
 2464              		.loc 1 815 0
 2465 01ee 3249     		ldr	r1, .L197+56
 2466 01f0 01FB0323 		mla	r3, r1, r3, r2
 2467 01f4 AB64     		str	r3, [r5, #72]
 2468 01f6 95E7     		b	.L160
 2469              	.LVL242:
 2470              	.L183:
 2471              	.LBE10:
 835:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2472              		.loc 1 835 0 discriminator 1
 2473 01f8 2A4B     		ldr	r3, .L197+36
 2474 01fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2475 01fc 542B     		cmp	r3, #84
 2476 01fe 01D0     		beq	.L190
 699:Src/Eagle_TRT.c **** 
 2477              		.loc 1 699 0
 2478 0200 0024     		movs	r4, #0
 2479 0202 03E7     		b	.L143
 2480              	.L190:
 835:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2481              		.loc 1 835 0 discriminator 2
 2482 0204 274B     		ldr	r3, .L197+36
 2483 0206 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2484 0208 472B     		cmp	r3, #71
 2485 020a 01D0     		beq	.L191
 699:Src/Eagle_TRT.c **** 
 2486              		.loc 1 699 0
 2487 020c 0024     		movs	r4, #0
 2488 020e FDE6     		b	.L143
 2489              	.L191:
 837:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 2490              		.loc 1 837 0
ARM GAS  /tmp/ccU79PPY.s 			page 66


 2491 0210 2448     		ldr	r0, .L197+36
 2492 0212 FFF7FEFF 		bl	checksum
 2493              	.LVL243:
 2494 0216 0446     		mov	r4, r0
 2495 0218 0128     		cmp	r0, #1
 2496 021a 01D0     		beq	.L192
 882:Src/Eagle_TRT.c **** 					}
 2497              		.loc 1 882 0
 2498 021c 0024     		movs	r4, #0
 2499 021e F5E6     		b	.L143
 2500              	.L192:
 2501              	.LBB11:
 839:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 2502              		.loc 1 839 0
 2503 0220 0023     		movs	r3, #0
 2504 0222 264A     		ldr	r2, .L197+60
 2505 0224 1360     		str	r3, [r2]
 2506              	.LVL244:
 2507              	.LBB12:
 841:Src/Eagle_TRT.c **** 						{
 2508              		.loc 1 841 0
 2509 0226 0522     		movs	r2, #5
 2510 0228 04E0     		b	.L161
 2511              	.LVL245:
 2512              	.L194:
 844:Src/Eagle_TRT.c **** 							else
 2513              		.loc 1 844 0
 2514 022a 2448     		ldr	r0, .L197+60
 2515 022c 0168     		ldr	r1, [r0]
 2516 022e 0131     		adds	r1, r1, #1
 2517 0230 0160     		str	r1, [r0]
 2518              	.LVL246:
 2519              	.L163:
 841:Src/Eagle_TRT.c **** 						{
 2520              		.loc 1 841 0 discriminator 2
 2521 0232 0132     		adds	r2, r2, #1
 2522              	.LVL247:
 2523              	.L161:
 841:Src/Eagle_TRT.c **** 						{
 2524              		.loc 1 841 0 is_stmt 0 discriminator 1
 2525 0234 1A49     		ldr	r1, .L197+32
 2526 0236 0968     		ldr	r1, [r1]
 2527 0238 8A42     		cmp	r2, r1
 2528 023a 0EDA     		bge	.L193
 843:Src/Eagle_TRT.c **** 								cont_comma++;
 2529              		.loc 1 843 0 is_stmt 1
 2530 023c 1948     		ldr	r0, .L197+36
 2531 023e 865C     		ldrb	r6, [r0, r2]	@ zero_extendqisi2
 2532 0240 2C2E     		cmp	r6, #44
 2533 0242 F2D0     		beq	.L194
 847:Src/Eagle_TRT.c **** 								{ //save the speed
 2534              		.loc 1 847 0
 2535 0244 1D48     		ldr	r0, .L197+60
 2536 0246 0068     		ldr	r0, [r0]
 2537 0248 0728     		cmp	r0, #7
 2538 024a 03D0     		beq	.L195
 852:Src/Eagle_TRT.c **** 								{
ARM GAS  /tmp/ccU79PPY.s 			page 67


 2539              		.loc 1 852 0
 2540 024c 0828     		cmp	r0, #8
 2541 024e F0D1     		bne	.L163
 854:Src/Eagle_TRT.c **** 								}
 2542              		.loc 1 854 0
 2543 0250 0A46     		mov	r2, r1
 2544              	.LVL248:
 2545 0252 EEE7     		b	.L163
 2546              	.LVL249:
 2547              	.L195:
 849:Src/Eagle_TRT.c **** 									cont_speed++;
 2548              		.loc 1 849 0
 2549 0254 EE54     		strb	r6, [r5, r3]
 850:Src/Eagle_TRT.c **** 								}
 2550              		.loc 1 850 0
 2551 0256 0133     		adds	r3, r3, #1
 2552              	.LVL250:
 2553 0258 EBE7     		b	.L163
 2554              	.L193:
 2555              	.LBE12:
 859:Src/Eagle_TRT.c **** 						{
 2556              		.loc 1 859 0
 2557 025a 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 2558              	.LVL251:
 2559 025e 302B     		cmp	r3, #48
 2560 0260 2ED0     		beq	.L196
 865:Src/Eagle_TRT.c **** 						}
 2561              		.loc 1 865 0
 2562 0262 2846     		mov	r0, r5
 2563 0264 FFF7FEFF 		bl	atof
 2564              	.LVL252:
 2565 0268 0022     		movs	r2, #0
 2566 026a 104B     		ldr	r3, .L197+44
 2567 026c 51EC100B 		vmov	r0, r1, d0
 2568 0270 FFF7FEFF 		bl	__aeabi_dmul
 2569              	.LVL253:
 2570 0274 FFF7FEFF 		bl	__aeabi_d2iz
 2571              	.LVL254:
 2572 0278 A860     		str	r0, [r5, #8]
 2573 027a 23E0     		b	.L167
 2574              	.L198:
 2575 027c AFF30080 		.align	3
 2576              	.L197:
 2577 0280 00000000 		.word	0
 2578 0284 0088C340 		.word	1086556160
 2579 0288 00000000 		.word	0
 2580 028c 006AF840 		.word	1090021888
 2581 0290 00000000 		.word	huart_GPS
 2582 0294 00000000 		.word	buffer_gps
 2583 0298 00000000 		.word	data_string_gps
 2584 029c 00000000 		.word	.LANCHOR36
 2585 02a0 00000000 		.word	cont_string
 2586 02a4 00000000 		.word	string_gps
 2587 02a8 00000000 		.word	can
 2588 02ac 00005940 		.word	1079574528
 2589 02b0 F0D8FFFF 		.word	-10000
 2590 02b4 A0860100 		.word	100000
ARM GAS  /tmp/ccU79PPY.s 			page 68


 2591 02b8 6079FEFF 		.word	-100000
 2592 02bc 00000000 		.word	cont_comma
 2593              	.LVL255:
 2594              	.L196:
 861:Src/Eagle_TRT.c **** 						}
 2595              		.loc 1 861 0
 2596 02c0 0023     		movs	r3, #0
 2597 02c2 AB60     		str	r3, [r5, #8]
 2598              	.LVL256:
 2599              	.L167:
 867:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 2600              		.loc 1 867 0
 2601 02c4 1A48     		ldr	r0, .L199
 2602 02c6 0723     		movs	r3, #7
 2603 02c8 0372     		strb	r3, [r0, #8]
 868:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 2604              		.loc 1 868 0
 2605 02ca 6B6A     		ldr	r3, [r5, #36]
 2606 02cc 4FF48072 		mov	r2, #256
 2607 02d0 93FBF2F1 		sdiv	r1, r3, r2
 2608 02d4 4172     		strb	r1, [r0, #9]
 869:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 2609              		.loc 1 869 0
 2610 02d6 5942     		rsbs	r1, r3, #0
 2611 02d8 DBB2     		uxtb	r3, r3
 2612 02da C9B2     		uxtb	r1, r1
 2613 02dc 58BF     		it	pl
 2614 02de 4B42     		rsbpl	r3, r1, #0
 2615 02e0 8372     		strb	r3, [r0, #10]
 870:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 2616              		.loc 1 870 0
 2617 02e2 AB6A     		ldr	r3, [r5, #40]
 2618 02e4 93FBF2F1 		sdiv	r1, r3, r2
 2619 02e8 C172     		strb	r1, [r0, #11]
 871:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 2620              		.loc 1 871 0
 2621 02ea 5942     		rsbs	r1, r3, #0
 2622 02ec DBB2     		uxtb	r3, r3
 2623 02ee C9B2     		uxtb	r1, r1
 2624 02f0 58BF     		it	pl
 2625 02f2 4B42     		rsbpl	r3, r1, #0
 2626 02f4 0373     		strb	r3, [r0, #12]
 872:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 2627              		.loc 1 872 0
 2628 02f6 05F11C03 		add	r3, r5, #28
 2629 02fa 4373     		strb	r3, [r0, #13]
 873:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 2630              		.loc 1 873 0
 2631 02fc AB68     		ldr	r3, [r5, #8]
 2632 02fe 93FBF2F3 		sdiv	r3, r3, r2
 2633 0302 8373     		strb	r3, [r0, #14]
 874:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 2634              		.loc 1 874 0
 2635 0304 AB68     		ldr	r3, [r5, #8]
 2636 0306 5A42     		rsbs	r2, r3, #0
 2637 0308 DBB2     		uxtb	r3, r3
 2638 030a D2B2     		uxtb	r2, r2
ARM GAS  /tmp/ccU79PPY.s 			page 69


 2639 030c 58BF     		it	pl
 2640 030e 5342     		rsbpl	r3, r2, #0
 2641 0310 C373     		strb	r3, [r0, #15]
 875:Src/Eagle_TRT.c **** 						can.size = 8;
 2642              		.loc 1 875 0
 2643 0312 D023     		movs	r3, #208
 2644 0314 0360     		str	r3, [r0]
 876:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 2645              		.loc 1 876 0
 2646 0316 0823     		movs	r3, #8
 2647 0318 4360     		str	r3, [r0, #4]
 877:Src/Eagle_TRT.c **** 						ret = 1;
 2648              		.loc 1 877 0
 2649 031a FFF7FEFF 		bl	CAN_Send
 2650              	.LVL257:
 2651              	.LBE11:
 2652 031e 75E6     		b	.L143
 2653              	.LVL258:
 2654              	.L181:
 891:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 2655              		.loc 1 891 0
 2656 0320 0122     		movs	r2, #1
 2657 0322 044B     		ldr	r3, .L199+4
 2658 0324 1A60     		str	r2, [r3]
 892:Src/Eagle_TRT.c **** 			}
 2659              		.loc 1 892 0
 2660 0326 0024     		movs	r4, #0
 2661 0328 034B     		ldr	r3, .L199+8
 2662 032a 1C60     		str	r4, [r3]
 2663 032c 6EE6     		b	.L143
 2664              	.L200:
 2665 032e 00BF     		.align	2
 2666              	.L199:
 2667 0330 00000000 		.word	can
 2668 0334 00000000 		.word	.LANCHOR36
 2669 0338 00000000 		.word	cont_string
 2670              		.cfi_endproc
 2671              	.LFE150:
 2673              		.section	.text.ReinitTIM7,"ax",%progbits
 2674              		.align	1
 2675              		.global	ReinitTIM7
 2676              		.syntax unified
 2677              		.thumb
 2678              		.thumb_func
 2679              		.fpu fpv4-sp-d16
 2681              	ReinitTIM7:
 2682              	.LFB156:
 934:Src/Eagle_TRT.c **** 
 935:Src/Eagle_TRT.c **** #endif
 936:Src/Eagle_TRT.c **** 
 937:Src/Eagle_TRT.c **** #ifdef HAL_TIM_MODULE_ENABLED
 938:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_tim.h"
 939:Src/Eagle_TRT.c **** 
 940:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
 941:Src/Eagle_TRT.c **** extern char txt;
 942:Src/Eagle_TRT.c **** 
 943:Src/Eagle_TRT.c **** // Function to request data from encoder via SSI communication
ARM GAS  /tmp/ccU79PPY.s 			page 70


 944:Src/Eagle_TRT.c **** // This function is called from the interrupt callback of the timer that you are using for the enco
 945:Src/Eagle_TRT.c **** // The tim used for this function must be initialized at most at 2 microsecond per tick
 946:Src/Eagle_TRT.c **** // Lower the number of microseconds per tick better it is
 947:Src/Eagle_TRT.c **** // TimerInstance = struct of the tim used for the encoder
 948:Src/Eagle_TRT.c **** enc_stc enc;
 949:Src/Eagle_TRT.c **** int read_SSI(enc_stc *enc)
 950:Src/Eagle_TRT.c **** {
 951:Src/Eagle_TRT.c **** 
 952:Src/Eagle_TRT.c **** 	int bin_data[enc->data_size];
 953:Src/Eagle_TRT.c **** 
 954:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 955:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 956:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 957:Src/Eagle_TRT.c **** 	{
 958:Src/Eagle_TRT.c **** 	}
 959:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
 960:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 961:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 962:Src/Eagle_TRT.c **** 	{
 963:Src/Eagle_TRT.c **** 	}
 964:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 965:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 966:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 967:Src/Eagle_TRT.c **** 	{
 968:Src/Eagle_TRT.c **** 	}
 969:Src/Eagle_TRT.c **** 
 970:Src/Eagle_TRT.c **** 	// Starting the clock to retrieve 14 bits from the sensor
 971:Src/Eagle_TRT.c **** 	for (int i = 0; i < enc->data_size; i++)
 972:Src/Eagle_TRT.c **** 	{
 973:Src/Eagle_TRT.c **** 
 974:Src/Eagle_TRT.c **** 		// CLOCK HIGH
 975:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
 976:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 977:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 978:Src/Eagle_TRT.c **** 		{
 979:Src/Eagle_TRT.c **** 		}
 980:Src/Eagle_TRT.c **** 
 981:Src/Eagle_TRT.c **** 		//Reading the Pin at the half of the clock period
 982:Src/Eagle_TRT.c **** 		// Set the bit as the pin state (0 or 1)
 983:Src/Eagle_TRT.c **** 		bin_data[i] = HAL_GPIO_ReadPin(enc->DataPinName, enc->DataPinNumber);
 984:Src/Eagle_TRT.c **** 		enc->Data[i] = bin_data[i];
 985:Src/Eagle_TRT.c **** 
 986:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 987:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 988:Src/Eagle_TRT.c **** 		{
 989:Src/Eagle_TRT.c **** 		}
 990:Src/Eagle_TRT.c **** 
 991:Src/Eagle_TRT.c **** 		// CLOCK LOW
 992:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 993:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 994:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 995:Src/Eagle_TRT.c **** 		{
 996:Src/Eagle_TRT.c **** 		}
 997:Src/Eagle_TRT.c **** 	}
 998:Src/Eagle_TRT.c **** 
 999:Src/Eagle_TRT.c **** 	// Requesting an other bit for the aventual error sent from the sensor
1000:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
ARM GAS  /tmp/ccU79PPY.s 			page 71


1001:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
1002:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
1003:Src/Eagle_TRT.c **** 	{
1004:Src/Eagle_TRT.c **** 	}
1005:Src/Eagle_TRT.c **** 
1006:Src/Eagle_TRT.c **** 	int error_flag = HAL_GPIO_ReadPin(enc->DataPinName, enc->DataPinNumber);
1007:Src/Eagle_TRT.c **** 
1008:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
1009:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
1010:Src/Eagle_TRT.c **** 	{
1011:Src/Eagle_TRT.c **** 	}
1012:Src/Eagle_TRT.c **** 
1013:Src/Eagle_TRT.c **** 	// Converting bits into number and converting it into angle in degrees (0 ~ 359)
1014:Src/Eagle_TRT.c **** 	enc->converted_data = bin_dec(enc->Data, enc->data_size);
1015:Src/Eagle_TRT.c **** 
1016:Src/Eagle_TRT.c **** 	return error_flag;
1017:Src/Eagle_TRT.c **** }
1018:Src/Eagle_TRT.c **** 
1019:Src/Eagle_TRT.c **** // Interrupt function of tim 2
1020:Src/Eagle_TRT.c **** // Call this function in the timer callback function of the stm
1021:Src/Eagle_TRT.c **** // htim = timer TimerInstance of the timer that you are using for the clock of the encoder
1022:Src/Eagle_TRT.c **** // Interrupt_flag = initilize a int variable in the main file
1023:Src/Eagle_TRT.c **** // Angles_array = array to store the last angles
1024:Src/Eagle_TRT.c **** // Speed = pointer to the speed value
1025:Src/Eagle_TRT.c **** void encoder_tim_interrupt(enc_stc *enc)
1026:Src/Eagle_TRT.c **** {
1027:Src/Eagle_TRT.c **** 
1028:Src/Eagle_TRT.c **** 	if (enc->interrupt_flag == 0)
1029:Src/Eagle_TRT.c **** 	{
1030:Src/Eagle_TRT.c **** 		// Requesting first angle
1031:Src/Eagle_TRT.c **** 		enc->angle0_prec = enc->angle0;
1032:Src/Eagle_TRT.c **** 		read_SSI(enc);
1033:Src/Eagle_TRT.c **** 		enc->angle0 = enc->converted_data / 45.5055;
1034:Src/Eagle_TRT.c **** 	}
1035:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 1)
1036:Src/Eagle_TRT.c **** 	{
1037:Src/Eagle_TRT.c **** 		// Requesting second angle
1038:Src/Eagle_TRT.c **** 		enc->angle1_prec = enc->angle1;
1039:Src/Eagle_TRT.c **** 		read_SSI(enc);
1040:Src/Eagle_TRT.c **** 		enc->angle1 = enc->converted_data / 45.5055;
1041:Src/Eagle_TRT.c **** 	}
1042:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 2)
1043:Src/Eagle_TRT.c **** 	{
1044:Src/Eagle_TRT.c **** 		// Calculate speed from the two angles
1045:Src/Eagle_TRT.c **** 		get_speed_encoder(enc);
1046:Src/Eagle_TRT.c **** 
1047:Src/Eagle_TRT.c **** 		// Get the speed sign to be sent in CAN
1048:Src/Eagle_TRT.c **** 		if (enc->average_speed < 0)
1049:Src/Eagle_TRT.c **** 		{
1050:Src/Eagle_TRT.c **** 			enc->average_speed *= -1;
1051:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
1052:Src/Eagle_TRT.c **** 		}
1053:Src/Eagle_TRT.c **** 		else
1054:Src/Eagle_TRT.c **** 		{
1055:Src/Eagle_TRT.c **** 			enc->speed_sign = 0;
1056:Src/Eagle_TRT.c **** 		}
1057:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccU79PPY.s 			page 72


1058:Src/Eagle_TRT.c **** 
1059:Src/Eagle_TRT.c **** 	// Cycle between steps
1060:Src/Eagle_TRT.c **** 	if (enc->interrupt_flag >=2){
1061:Src/Eagle_TRT.c **** 		enc->interrupt_flag = 0;
1062:Src/Eagle_TRT.c **** 	}
1063:Src/Eagle_TRT.c **** 	else{
1064:Src/Eagle_TRT.c **** 		enc->interrupt_flag ++;
1065:Src/Eagle_TRT.c **** 	}
1066:Src/Eagle_TRT.c **** 	//enc->interrupt_flag = enc->interrupt_flag >= 2 ? 0 : enc->interrupt_flag + 1;
1067:Src/Eagle_TRT.c **** }
1068:Src/Eagle_TRT.c **** 
1069:Src/Eagle_TRT.c **** // Funtion to calculate the speed
1070:Src/Eagle_TRT.c **** // Angle0 = last angle calculated
1071:Src/Eagle_TRT.c **** // Angle1 = previous angle calculated
1072:Src/Eagle_TRT.c **** // Refresh = delta-time from the two calculations, express it in microseconds
1073:Src/Eagle_TRT.c **** // Wheel_diameter = diameter of the wheel expressed meters
1074:Src/Eagle_TRT.c **** void get_speed_encoder(enc_stc *enc)
1075:Src/Eagle_TRT.c **** {
1076:Src/Eagle_TRT.c **** 
1077:Src/Eagle_TRT.c **** 	long double speed = 0;
1078:Src/Eagle_TRT.c **** 	double dt = 0;
1079:Src/Eagle_TRT.c **** 
1080:Src/Eagle_TRT.c **** 	if (enc->dx_wheel == 1)
1081:Src/Eagle_TRT.c **** 	{
1082:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle1 - enc->angle0;
1083:Src/Eagle_TRT.c **** 	}
1084:Src/Eagle_TRT.c **** 	else
1085:Src/Eagle_TRT.c **** 	{
1086:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle0 - enc->angle1;
1087:Src/Eagle_TRT.c **** 	}
1088:Src/Eagle_TRT.c **** 
1089:Src/Eagle_TRT.c **** 	// Calculate correct delta angle if near to 0-360
1090:Src/Eagle_TRT.c **** 	if ((enc->angle0 < enc->max_delta_angle * 2 && enc->angle1 > 360 - enc->max_delta_angle * 2) ||
1091:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
1092:Src/Eagle_TRT.c **** 	{
1093:Src/Eagle_TRT.c **** 		if (enc->delta_angle < 0)
1094:Src/Eagle_TRT.c **** 		{
1095:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 + enc->delta_angle;
1096:Src/Eagle_TRT.c **** 		}
1097:Src/Eagle_TRT.c **** 		else
1098:Src/Eagle_TRT.c **** 		{
1099:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 - enc->delta_angle;
1100:Src/Eagle_TRT.c **** 		}
1101:Src/Eagle_TRT.c **** 	}
1102:Src/Eagle_TRT.c **** 
1103:Src/Eagle_TRT.c **** 	// Calculating rad/s, then m/s, then Km/h
1104:Src/Eagle_TRT.c **** 	speed = (enc->delta_angle / 360) * 3.1415 * (enc->wheel_diameter);
1105:Src/Eagle_TRT.c **** 	speed *= enc->frequency;
1106:Src/Eagle_TRT.c **** 	speed *= 3.6;
1107:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
1108:Src/Eagle_TRT.c **** 
1109:Src/Eagle_TRT.c **** 	int off = 100;
1110:Src/Eagle_TRT.c **** 
1111:Src/Eagle_TRT.c **** 	// Start detecting eventual new wheel roation
1112:Src/Eagle_TRT.c **** 	// If the speed is too low, don't count rotations
1113:Src/Eagle_TRT.c **** 	if (enc->average_speed < -0.5 || enc->average_speed > 0.5)
1114:Src/Eagle_TRT.c **** 	{
ARM GAS  /tmp/ccU79PPY.s 			page 73


1115:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec <= 361 && enc->angle0_prec > 360 - off) && (enc->angle0 >= -1 && enc->angle
1116:Src/Eagle_TRT.c **** 		{
1117:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1118:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
1119:Src/Eagle_TRT.c **** 		}
1120:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec >= -1 && enc->angle0_prec < off) && (enc->angle0 <= 361 && enc->angle0 > 36
1121:Src/Eagle_TRT.c **** 		{
1122:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1123:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
1124:Src/Eagle_TRT.c **** 		}
1125:Src/Eagle_TRT.c **** 	}
1126:Src/Eagle_TRT.c **** 
1127:Src/Eagle_TRT.c **** 	// Remove noise mediating previous values with actual
1128:Src/Eagle_TRT.c **** 	shift_array(enc->speed_array, 10, speed);
1129:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 10);
1130:Src/Eagle_TRT.c **** 
1131:Src/Eagle_TRT.c **** 	// Calculating the angle sample frequency
1132:Src/Eagle_TRT.c **** 	enc_calculate_optimal_frequency(enc);
1133:Src/Eagle_TRT.c **** }
1134:Src/Eagle_TRT.c **** 
1135:Src/Eagle_TRT.c **** // Calculate anche sample frequency
1136:Src/Eagle_TRT.c **** // The delta angle changes depending on the current speed
1137:Src/Eagle_TRT.c **** // Constrain the delta angle between a defined range (max_delta_angle)
1138:Src/Eagle_TRT.c **** void enc_calculate_optimal_frequency(enc_stc *enc)
1139:Src/Eagle_TRT.c **** {
1140:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
1141:Src/Eagle_TRT.c **** 
1142:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.2 || abs_delta_angle < enc->max_delta_angle * 0.5)
1143:Src/Eagle_TRT.c **** 	{
1144:Src/Eagle_TRT.c **** 		double angular_speed = enc->average_speed / ((enc->wheel_diameter / 2)*3.6);
1145:Src/Eagle_TRT.c **** 		double frequency = angular_speed / (enc->max_delta_angle * 3.14 / 180);
1146:Src/Eagle_TRT.c **** 
1147:Src/Eagle_TRT.c **** 		enc->flake_freq = frequency;
1148:Src/Eagle_TRT.c **** 
1149:Src/Eagle_TRT.c **** 		frequency = frequency < 0 ? frequency * (-1) : frequency;
1150:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
1151:Src/Eagle_TRT.c **** 
1152:Src/Eagle_TRT.c **** 		// Returns 0 if reinitialization is done correctly
1153:Src/Eagle_TRT.c **** 		if (ReinitTIM7(frequency, enc) == 0)
1154:Src/Eagle_TRT.c **** 		{
1155:Src/Eagle_TRT.c **** 			// Set encoder actual frequency
1156:Src/Eagle_TRT.c **** 			enc->frequency = enc->frequency_timer_Hz / (enc->frequency_timer->Init.Prescaler * enc->frequenc
1157:Src/Eagle_TRT.c **** 		}
1158:Src/Eagle_TRT.c **** 	}
1159:Src/Eagle_TRT.c **** }
1160:Src/Eagle_TRT.c **** 
1161:Src/Eagle_TRT.c **** // Reinitializing timer to generate interrupts to the given frequency
1162:Src/Eagle_TRT.c **** int ReinitTIM7(float frequency, enc_stc *enc)
1163:Src/Eagle_TRT.c **** {
 2683              		.loc 1 1163 0
 2684              		.cfi_startproc
 2685              		@ args = 0, pretend = 0, frame = 8
 2686              		@ frame_needed = 0, uses_anonymous_args = 0
 2687              	.LVL259:
 2688 0000 30B5     		push	{r4, r5, lr}
 2689              	.LCFI34:
 2690              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccU79PPY.s 			page 74


 2691              		.cfi_offset 4, -12
 2692              		.cfi_offset 5, -8
 2693              		.cfi_offset 14, -4
 2694 0002 83B0     		sub	sp, sp, #12
 2695              	.LCFI35:
 2696              		.cfi_def_cfa_offset 24
 2697 0004 0446     		mov	r4, r0
 2698              	.LVL260:
1164:Src/Eagle_TRT.c **** 
1165:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 0 */
1166:Src/Eagle_TRT.c **** 	int error_flag = 0;
1167:Src/Eagle_TRT.c **** 
1168:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 0 */
1169:Src/Eagle_TRT.c **** 
1170:Src/Eagle_TRT.c **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 2699              		.loc 1 1170 0
 2700 0006 0025     		movs	r5, #0
 2701 0008 0095     		str	r5, [sp]
 2702 000a 0195     		str	r5, [sp, #4]
1171:Src/Eagle_TRT.c **** 
1172:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 1 */
1173:Src/Eagle_TRT.c **** 
1174:Src/Eagle_TRT.c **** 	enc->frequency_timer_prescaler = sqrt(enc->frequency_timer_Hz / frequency);
 2703              		.loc 1 1174 0
 2704 000c D0ED1A7A 		vldr.32	s15, [r0, #104]	@ int
 2705 0010 F8EEE77A 		vcvt.f32.s32	s15, s15
 2706 0014 87EE807A 		vdiv.f32	s14, s15, s0
 2707 0018 17EE100A 		vmov	r0, s14
 2708              	.LVL261:
 2709 001c FFF7FEFF 		bl	__aeabi_f2d
 2710              	.LVL262:
 2711 0020 41EC100B 		vmov	d0, r0, r1
 2712 0024 FFF7FEFF 		bl	sqrt
 2713              	.LVL263:
 2714 0028 51EC100B 		vmov	r0, r1, d0
 2715 002c FFF7FEFF 		bl	__aeabi_d2iz
 2716              	.LVL264:
 2717 0030 E066     		str	r0, [r4, #108]
1175:Src/Eagle_TRT.c **** 	enc->frequency_timer_period = enc->frequency_timer_prescaler;
 2718              		.loc 1 1175 0
 2719 0032 2067     		str	r0, [r4, #112]
1176:Src/Eagle_TRT.c **** 
1177:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 1 */
1178:Src/Eagle_TRT.c **** 	enc->frequency_timer->Instance = TIM7;
 2720              		.loc 1 1178 0
 2721 0034 D4F8D433 		ldr	r3, [r4, #980]
 2722 0038 114A     		ldr	r2, .L207
 2723 003a 1A60     		str	r2, [r3]
1179:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Prescaler = enc->frequency_timer_prescaler;
 2724              		.loc 1 1179 0
 2725 003c D4F8D433 		ldr	r3, [r4, #980]
 2726 0040 E26E     		ldr	r2, [r4, #108]
 2727 0042 5A60     		str	r2, [r3, #4]
1180:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 2728              		.loc 1 1180 0
 2729 0044 D4F8D433 		ldr	r3, [r4, #980]
 2730 0048 9D60     		str	r5, [r3, #8]
ARM GAS  /tmp/ccU79PPY.s 			page 75


1181:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Period = enc->frequency_timer_period;
 2731              		.loc 1 1181 0
 2732 004a D4F8D433 		ldr	r3, [r4, #980]
 2733 004e 226F     		ldr	r2, [r4, #112]
 2734 0050 DA60     		str	r2, [r3, #12]
1182:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2735              		.loc 1 1182 0
 2736 0052 D4F8D433 		ldr	r3, [r4, #980]
 2737 0056 9D61     		str	r5, [r3, #24]
1183:Src/Eagle_TRT.c **** 
1184:Src/Eagle_TRT.c **** 	if (HAL_TIM_Base_Init(enc->frequency_timer) != HAL_OK)
 2738              		.loc 1 1184 0
 2739 0058 D4F8D403 		ldr	r0, [r4, #980]
 2740 005c FFF7FEFF 		bl	HAL_TIM_Base_Init
 2741              	.LVL265:
 2742 0060 00B1     		cbz	r0, .L202
1185:Src/Eagle_TRT.c **** 	{
1186:Src/Eagle_TRT.c **** 		error_flag = 1;
 2743              		.loc 1 1186 0
 2744 0062 0125     		movs	r5, #1
 2745              	.L202:
 2746              	.LVL266:
1187:Src/Eagle_TRT.c **** 	}
1188:Src/Eagle_TRT.c **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 2747              		.loc 1 1188 0
 2748 0064 0023     		movs	r3, #0
 2749 0066 0093     		str	r3, [sp]
1189:Src/Eagle_TRT.c **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2750              		.loc 1 1189 0
 2751 0068 0193     		str	r3, [sp, #4]
1190:Src/Eagle_TRT.c **** 	if (HAL_TIMEx_MasterConfigSynchronization(enc->frequency_timer, &sMasterConfig) != HAL_OK)
 2752              		.loc 1 1190 0
 2753 006a 6946     		mov	r1, sp
 2754 006c D4F8D403 		ldr	r0, [r4, #980]
 2755 0070 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2756              	.LVL267:
 2757 0074 00B1     		cbz	r0, .L201
1191:Src/Eagle_TRT.c **** 	{
1192:Src/Eagle_TRT.c **** 		error_flag = 2;
 2758              		.loc 1 1192 0
 2759 0076 0225     		movs	r5, #2
 2760              	.LVL268:
 2761              	.L201:
1193:Src/Eagle_TRT.c **** 	}
1194:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 2 */
1195:Src/Eagle_TRT.c **** 	return error_flag;
1196:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 2 */
1197:Src/Eagle_TRT.c **** }
 2762              		.loc 1 1197 0
 2763 0078 2846     		mov	r0, r5
 2764 007a 03B0     		add	sp, sp, #12
 2765              	.LCFI36:
 2766              		.cfi_def_cfa_offset 12
 2767              		@ sp needed
 2768 007c 30BD     		pop	{r4, r5, pc}
 2769              	.LVL269:
 2770              	.L208:
ARM GAS  /tmp/ccU79PPY.s 			page 76


 2771 007e 00BF     		.align	2
 2772              	.L207:
 2773 0080 00140040 		.word	1073746944
 2774              		.cfi_endproc
 2775              	.LFE156:
 2777              		.global	__aeabi_dcmpge
 2778              		.global	__aeabi_dcmplt
 2779              		.global	__aeabi_d2f
 2780              		.section	.text.enc_calculate_optimal_frequency,"ax",%progbits
 2781              		.align	1
 2782              		.global	enc_calculate_optimal_frequency
 2783              		.syntax unified
 2784              		.thumb
 2785              		.thumb_func
 2786              		.fpu fpv4-sp-d16
 2788              	enc_calculate_optimal_frequency:
 2789              	.LFB155:
1139:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
 2790              		.loc 1 1139 0
 2791              		.cfi_startproc
 2792              		@ args = 0, pretend = 0, frame = 0
 2793              		@ frame_needed = 0, uses_anonymous_args = 0
 2794              	.LVL270:
 2795 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
 2796              	.LCFI37:
 2797              		.cfi_def_cfa_offset 24
 2798              		.cfi_offset 4, -24
 2799              		.cfi_offset 6, -20
 2800              		.cfi_offset 7, -16
 2801              		.cfi_offset 8, -12
 2802              		.cfi_offset 9, -8
 2803              		.cfi_offset 14, -4
 2804 0004 0446     		mov	r4, r0
1140:Src/Eagle_TRT.c **** 
 2805              		.loc 1 1140 0
 2806 0006 D0E92667 		ldrd	r6, [r0, #152]
 2807 000a 0022     		movs	r2, #0
 2808 000c 0023     		movs	r3, #0
 2809 000e 3046     		mov	r0, r6
 2810              	.LVL271:
 2811 0010 3946     		mov	r1, r7
 2812 0012 FFF7FEFF 		bl	__aeabi_dcmpge
 2813              	.LVL272:
 2814 0016 0028     		cmp	r0, #0
 2815 0018 79D0     		beq	.L221
 2816              	.L210:
 2817              	.LVL273:
1142:Src/Eagle_TRT.c **** 	{
 2818              		.loc 1 1142 0 discriminator 4
 2819 001a 206E     		ldr	r0, [r4, #96]	@ float
 2820 001c FFF7FEFF 		bl	__aeabi_f2d
 2821              	.LVL274:
 2822 0020 8046     		mov	r8, r0
 2823 0022 8946     		mov	r9, r1
 2824 0024 4FF03332 		mov	r2, #858993459
 2825 0028 414B     		ldr	r3, .L223+16
 2826 002a FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccU79PPY.s 			page 77


 2827              	.LVL275:
 2828 002e 0246     		mov	r2, r0
 2829 0030 0B46     		mov	r3, r1
 2830 0032 3046     		mov	r0, r6
 2831 0034 3946     		mov	r1, r7
 2832 0036 FFF7FEFF 		bl	__aeabi_dcmpgt
 2833              	.LVL276:
 2834 003a 68B9     		cbnz	r0, .L211
1142:Src/Eagle_TRT.c **** 	{
 2835              		.loc 1 1142 0 is_stmt 0 discriminator 1
 2836 003c 0022     		movs	r2, #0
 2837 003e 3D4B     		ldr	r3, .L223+20
 2838 0040 4046     		mov	r0, r8
 2839 0042 4946     		mov	r1, r9
 2840 0044 FFF7FEFF 		bl	__aeabi_dmul
 2841              	.LVL277:
 2842 0048 0246     		mov	r2, r0
 2843 004a 0B46     		mov	r3, r1
 2844 004c 3046     		mov	r0, r6
 2845 004e 3946     		mov	r1, r7
 2846 0050 FFF7FEFF 		bl	__aeabi_dcmplt
 2847              	.LVL278:
 2848 0054 0028     		cmp	r0, #0
 2849 0056 58D0     		beq	.L209
 2850              	.L211:
 2851              	.LBB13:
1144:Src/Eagle_TRT.c **** 		double frequency = angular_speed / (enc->max_delta_angle * 3.14 / 180);
 2852              		.loc 1 1144 0 is_stmt 1
 2853 0058 D4E9F067 		ldrd	r6, [r4, #960]
 2854              	.LVL279:
 2855 005c 94ED177A 		vldr.32	s14, [r4, #92]
 2856 0060 F6EE007A 		vmov.f32	s15, #5.0e-1
 2857 0064 67EE277A 		vmul.f32	s15, s14, s15
 2858 0068 17EE900A 		vmov	r0, s15
 2859 006c FFF7FEFF 		bl	__aeabi_f2d
 2860              	.LVL280:
 2861 0070 2BA3     		adr	r3, .L223
 2862 0072 D3E90023 		ldrd	r2, [r3]
 2863 0076 FFF7FEFF 		bl	__aeabi_dmul
 2864              	.LVL281:
 2865 007a 0246     		mov	r2, r0
 2866 007c 0B46     		mov	r3, r1
 2867 007e 3046     		mov	r0, r6
 2868 0080 3946     		mov	r1, r7
 2869 0082 FFF7FEFF 		bl	__aeabi_ddiv
 2870              	.LVL282:
 2871 0086 0646     		mov	r6, r0
 2872 0088 0F46     		mov	r7, r1
 2873              	.LVL283:
1145:Src/Eagle_TRT.c **** 
 2874              		.loc 1 1145 0
 2875 008a 27A3     		adr	r3, .L223+8
 2876 008c D3E90023 		ldrd	r2, [r3]
 2877 0090 4046     		mov	r0, r8
 2878 0092 4946     		mov	r1, r9
 2879 0094 FFF7FEFF 		bl	__aeabi_dmul
 2880              	.LVL284:
ARM GAS  /tmp/ccU79PPY.s 			page 78


 2881 0098 0022     		movs	r2, #0
 2882 009a 274B     		ldr	r3, .L223+24
 2883 009c FFF7FEFF 		bl	__aeabi_ddiv
 2884              	.LVL285:
 2885 00a0 0246     		mov	r2, r0
 2886 00a2 0B46     		mov	r3, r1
 2887 00a4 3046     		mov	r0, r6
 2888 00a6 3946     		mov	r1, r7
 2889 00a8 FFF7FEFF 		bl	__aeabi_ddiv
 2890              	.LVL286:
 2891 00ac 0646     		mov	r6, r0
 2892              	.LVL287:
 2893 00ae 0F46     		mov	r7, r1
 2894              	.LVL288:
1147:Src/Eagle_TRT.c **** 
 2895              		.loc 1 1147 0
 2896 00b0 FFF7FEFF 		bl	__aeabi_d2f
 2897              	.LVL289:
 2898 00b4 C4F8CC03 		str	r0, [r4, #972]	@ float
1149:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
 2899              		.loc 1 1149 0
 2900 00b8 0022     		movs	r2, #0
 2901 00ba 0023     		movs	r3, #0
 2902 00bc 3046     		mov	r0, r6
 2903 00be 3946     		mov	r1, r7
 2904 00c0 FFF7FEFF 		bl	__aeabi_dcmplt
 2905              	.LVL290:
 2906 00c4 38BB     		cbnz	r0, .L222
 2907              	.L214:
1150:Src/Eagle_TRT.c **** 
 2908              		.loc 1 1150 0 discriminator 4
 2909 00c6 0022     		movs	r2, #0
 2910 00c8 1C4B     		ldr	r3, .L223+28
 2911 00ca 3046     		mov	r0, r6
 2912 00cc 3946     		mov	r1, r7
 2913 00ce FFF7FEFF 		bl	__aeabi_dcmplt
 2914              	.LVL291:
 2915 00d2 08B1     		cbz	r0, .L216
1150:Src/Eagle_TRT.c **** 
 2916              		.loc 1 1150 0 is_stmt 0
 2917 00d4 0026     		movs	r6, #0
 2918              	.LVL292:
 2919 00d6 194F     		ldr	r7, .L223+28
 2920              	.L216:
 2921              	.LVL293:
1153:Src/Eagle_TRT.c **** 		{
 2922              		.loc 1 1153 0 is_stmt 1 discriminator 4
 2923 00d8 3046     		mov	r0, r6
 2924 00da 3946     		mov	r1, r7
 2925 00dc FFF7FEFF 		bl	__aeabi_d2f
 2926              	.LVL294:
 2927 00e0 00EE100A 		vmov	s0, r0
 2928 00e4 2046     		mov	r0, r4
 2929 00e6 FFF7FEFF 		bl	ReinitTIM7
 2930              	.LVL295:
 2931 00ea 70B9     		cbnz	r0, .L209
1156:Src/Eagle_TRT.c **** 		}
ARM GAS  /tmp/ccU79PPY.s 			page 79


 2932              		.loc 1 1156 0
 2933 00ec A36E     		ldr	r3, [r4, #104]
 2934 00ee D4F8D413 		ldr	r1, [r4, #980]
 2935 00f2 4868     		ldr	r0, [r1, #4]
 2936 00f4 CA68     		ldr	r2, [r1, #12]
 2937 00f6 02FB00F2 		mul	r2, r2, r0
 2938 00fa B3FBF2F3 		udiv	r3, r3, r2
 2939 00fe 07EE903A 		vmov	s15, r3	@ int
 2940 0102 F8EE677A 		vcvt.f32.u32	s15, s15
 2941 0106 C4ED197A 		vstr.32	s15, [r4, #100]
 2942              	.LVL296:
 2943              	.L209:
 2944 010a BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 2945              	.LVL297:
 2946              	.L221:
 2947              	.LBE13:
1140:Src/Eagle_TRT.c **** 
 2948              		.loc 1 1140 0 discriminator 2
 2949 010e 07F10043 		add	r3, r7, #-2147483648
 2950 0112 1F46     		mov	r7, r3
 2951 0114 81E7     		b	.L210
 2952              	.LVL298:
 2953              	.L222:
 2954              	.LBB14:
1149:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
 2955              		.loc 1 1149 0 discriminator 1
 2956 0116 07F10043 		add	r3, r7, #-2147483648
 2957 011a 1F46     		mov	r7, r3
 2958 011c D3E7     		b	.L214
 2959              	.L224:
 2960 011e 00BF     		.align	3
 2961              	.L223:
 2962 0120 CDCCCCCC 		.word	3435973837
 2963 0124 CCCC0C40 		.word	1074580684
 2964 0128 1F85EB51 		.word	1374389535
 2965 012c B81E0940 		.word	1074339512
 2966 0130 3333F33F 		.word	1072902963
 2967 0134 0000E03F 		.word	1071644672
 2968 0138 00806640 		.word	1080459264
 2969 013c 00004940 		.word	1078525952
 2970              	.LBE14:
 2971              		.cfi_endproc
 2972              	.LFE155:
 2974              		.section	.text.calc_pot_value,"ax",%progbits
 2975              		.align	1
 2976              		.global	calc_pot_value
 2977              		.syntax unified
 2978              		.thumb
 2979              		.thumb_func
 2980              		.fpu fpv4-sp-d16
 2982              	calc_pot_value:
 2983              	.LFB157:
1198:Src/Eagle_TRT.c **** 
1199:Src/Eagle_TRT.c **** pot_stc pot_1;
1200:Src/Eagle_TRT.c **** pot_stc pot_2;
1201:Src/Eagle_TRT.c **** pot_stc pot_3;
1202:Src/Eagle_TRT.c **** void calc_pot_value(pot_stc *pot)
ARM GAS  /tmp/ccU79PPY.s 			page 80


1203:Src/Eagle_TRT.c **** {
 2984              		.loc 1 1203 0
 2985              		.cfi_startproc
 2986              		@ args = 0, pretend = 0, frame = 0
 2987              		@ frame_needed = 0, uses_anonymous_args = 0
 2988              		@ link register save eliminated.
 2989              	.LVL299:
 2990 0000 10B4     		push	{r4}
 2991              	.LCFI38:
 2992              		.cfi_def_cfa_offset 4
 2993              		.cfi_offset 4, -4
1204:Src/Eagle_TRT.c **** 
1205:Src/Eagle_TRT.c **** 	pot->val_100 = round(100 - (abs(pot->val - pot->min) * 100 / (pot->range))); //val0_100 -->STEER -
 2994              		.loc 1 1205 0
 2995 0002 0269     		ldr	r2, [r0, #16]
 2996 0004 8468     		ldr	r4, [r0, #8]
 2997 0006 131B     		subs	r3, r2, r4
 2998 0008 83EAE371 		eor	r1, r3, r3, asr #31
 2999 000c A1EBE371 		sub	r1, r1, r3, asr #31
 3000 0010 6FF06303 		mvn	r3, #99
 3001 0014 03FB01F3 		mul	r3, r3, r1
 3002 0018 C168     		ldr	r1, [r0, #12]
 3003 001a 93FBF1F3 		sdiv	r3, r3, r1
 3004 001e 6433     		adds	r3, r3, #100
 3005 0020 0360     		str	r3, [r0]
1206:Src/Eagle_TRT.c **** 	if (pot->val <= pot->min)
 3006              		.loc 1 1206 0
 3007 0022 A242     		cmp	r2, r4
 3008 0024 01DC     		bgt	.L226
1207:Src/Eagle_TRT.c **** 	{
1208:Src/Eagle_TRT.c **** 		pot->val_100 = 100;
 3009              		.loc 1 1208 0
 3010 0026 6423     		movs	r3, #100
 3011 0028 0360     		str	r3, [r0]
 3012              	.L226:
1209:Src/Eagle_TRT.c **** 	}
1210:Src/Eagle_TRT.c **** 	if (pot->val >= pot->max)
 3013              		.loc 1 1210 0
 3014 002a 4368     		ldr	r3, [r0, #4]
 3015 002c 9A42     		cmp	r2, r3
 3016 002e 01DB     		blt	.L225
1211:Src/Eagle_TRT.c **** 	{
1212:Src/Eagle_TRT.c **** 		pot->val_100 = 0;
 3017              		.loc 1 1212 0
 3018 0030 0023     		movs	r3, #0
 3019 0032 0360     		str	r3, [r0]
 3020              	.L225:
1213:Src/Eagle_TRT.c **** 	}
1214:Src/Eagle_TRT.c **** }
 3021              		.loc 1 1214 0
 3022 0034 5DF8044B 		ldr	r4, [sp], #4
 3023              	.LCFI39:
 3024              		.cfi_restore 4
 3025              		.cfi_def_cfa_offset 0
 3026 0038 7047     		bx	lr
 3027              		.cfi_endproc
 3028              	.LFE157:
ARM GAS  /tmp/ccU79PPY.s 			page 81


 3030              		.section	.text.implausibility_check,"ax",%progbits
 3031              		.align	1
 3032              		.global	implausibility_check
 3033              		.syntax unified
 3034              		.thumb
 3035              		.thumb_func
 3036              		.fpu fpv4-sp-d16
 3038              	implausibility_check:
 3039              	.LFB158:
1215:Src/Eagle_TRT.c **** 
1216:Src/Eagle_TRT.c **** //Function to check if the two ADC values are approximately the same
1217:Src/Eagle_TRT.c **** //if the values are different for more tha 10 points percentage for more than 100 milliseconds retu
1218:Src/Eagle_TRT.c **** //TimerInstance = pointer to the timer needed to check the SCS error
1219:Src/Eagle_TRT.c **** //val0_100 = pointer to the first potentiometer
1220:Src/Eagle_TRT.c **** //val1_100 = pointer to the second potentiometer
1221:Src/Eagle_TRT.c **** int implausibility_check(pot_stc *pot_1, pot_stc *pot_2)
1222:Src/Eagle_TRT.c **** {
 3040              		.loc 1 1222 0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 0
 3043              		@ frame_needed = 0, uses_anonymous_args = 0
 3044              		@ link register save eliminated.
 3045              	.LVL300:
1223:Src/Eagle_TRT.c **** 
1224:Src/Eagle_TRT.c **** 	int SCS1 = 0;
1225:Src/Eagle_TRT.c **** 
1226:Src/Eagle_TRT.c **** 	if (pot_1->val_100 >= 100)
 3046              		.loc 1 1226 0
 3047 0000 0368     		ldr	r3, [r0]
 3048 0002 632B     		cmp	r3, #99
 3049 0004 01DD     		ble	.L230
1227:Src/Eagle_TRT.c **** 	{
1228:Src/Eagle_TRT.c **** 		pot_1->val_100 = 100;
 3050              		.loc 1 1228 0
 3051 0006 6423     		movs	r3, #100
 3052 0008 0360     		str	r3, [r0]
 3053              	.L230:
1229:Src/Eagle_TRT.c **** 	}
1230:Src/Eagle_TRT.c **** 	if (pot_1->val_100 <= 5)
 3054              		.loc 1 1230 0
 3055 000a 0368     		ldr	r3, [r0]
 3056 000c 052B     		cmp	r3, #5
 3057 000e 01DC     		bgt	.L231
1231:Src/Eagle_TRT.c **** 	{
1232:Src/Eagle_TRT.c **** 		pot_1->val_100 = 0;
 3058              		.loc 1 1232 0
 3059 0010 0023     		movs	r3, #0
 3060 0012 0360     		str	r3, [r0]
 3061              	.L231:
1233:Src/Eagle_TRT.c **** 	}
1234:Src/Eagle_TRT.c **** 	if (pot_2->val_100 >= 100)
 3062              		.loc 1 1234 0
 3063 0014 0B68     		ldr	r3, [r1]
 3064 0016 632B     		cmp	r3, #99
 3065 0018 01DD     		ble	.L232
1235:Src/Eagle_TRT.c **** 	{
1236:Src/Eagle_TRT.c **** 		pot_2->val_100 = 100;
ARM GAS  /tmp/ccU79PPY.s 			page 82


 3066              		.loc 1 1236 0
 3067 001a 6423     		movs	r3, #100
 3068 001c 0B60     		str	r3, [r1]
 3069              	.L232:
1237:Src/Eagle_TRT.c **** 	}
1238:Src/Eagle_TRT.c **** 	if (pot_2->val_100 <= 5)
 3070              		.loc 1 1238 0
 3071 001e 0B68     		ldr	r3, [r1]
 3072 0020 052B     		cmp	r3, #5
 3073 0022 01DC     		bgt	.L233
1239:Src/Eagle_TRT.c **** 	{
1240:Src/Eagle_TRT.c **** 		pot_2->val_100 = 0;
 3074              		.loc 1 1240 0
 3075 0024 0023     		movs	r3, #0
 3076 0026 0B60     		str	r3, [r1]
 3077              	.L233:
1241:Src/Eagle_TRT.c **** 	}
1242:Src/Eagle_TRT.c **** 	if (abs(pot_1->val_100 - pot_2->val_100) >= 10)
 3078              		.loc 1 1242 0
 3079 0028 0368     		ldr	r3, [r0]
 3080 002a 0A68     		ldr	r2, [r1]
 3081 002c 9B1A     		subs	r3, r3, r2
 3082 002e 002B     		cmp	r3, #0
 3083 0030 B8BF     		it	lt
 3084 0032 5B42     		rsblt	r3, r3, #0
 3085 0034 092B     		cmp	r3, #9
 3086 0036 06DD     		ble	.L234
1243:Src/Eagle_TRT.c **** 	{
1244:Src/Eagle_TRT.c **** 		if (__HAL_TIM_GET_COUNTER(pot_1->TimerInstance) > 100)
 3087              		.loc 1 1244 0
 3088 0038 4369     		ldr	r3, [r0, #20]
 3089 003a 1B68     		ldr	r3, [r3]
 3090 003c 5B6A     		ldr	r3, [r3, #36]
 3091 003e 642B     		cmp	r3, #100
 3092 0040 06D8     		bhi	.L236
1224:Src/Eagle_TRT.c **** 
 3093              		.loc 1 1224 0
 3094 0042 0020     		movs	r0, #0
 3095              	.LVL301:
 3096 0044 7047     		bx	lr
 3097              	.LVL302:
 3098              	.L234:
1245:Src/Eagle_TRT.c **** 		{
1246:Src/Eagle_TRT.c **** 			SCS1 = 1;
1247:Src/Eagle_TRT.c **** 		}
1248:Src/Eagle_TRT.c **** 	}
1249:Src/Eagle_TRT.c **** 	else
1250:Src/Eagle_TRT.c **** 	{
1251:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(pot_1->TimerInstance, 0);
 3099              		.loc 1 1251 0
 3100 0046 4369     		ldr	r3, [r0, #20]
 3101 0048 1B68     		ldr	r3, [r3]
 3102 004a 0020     		movs	r0, #0
 3103              	.LVL303:
 3104 004c 5862     		str	r0, [r3, #36]
 3105 004e 7047     		bx	lr
 3106              	.LVL304:
ARM GAS  /tmp/ccU79PPY.s 			page 83


 3107              	.L236:
1246:Src/Eagle_TRT.c **** 		}
 3108              		.loc 1 1246 0
 3109 0050 0120     		movs	r0, #1
 3110              	.LVL305:
1252:Src/Eagle_TRT.c **** 		SCS1 = 0;
1253:Src/Eagle_TRT.c **** 	}
1254:Src/Eagle_TRT.c **** 
1255:Src/Eagle_TRT.c **** 	return SCS1;
1256:Src/Eagle_TRT.c **** }
 3111              		.loc 1 1256 0
 3112 0052 7047     		bx	lr
 3113              		.cfi_endproc
 3114              	.LFE158:
 3116              		.section	.text.set_max,"ax",%progbits
 3117              		.align	1
 3118              		.global	set_max
 3119              		.syntax unified
 3120              		.thumb
 3121              		.thumb_func
 3122              		.fpu fpv4-sp-d16
 3124              	set_max:
 3125              	.LFB159:
1257:Src/Eagle_TRT.c **** 
1258:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is released
1259:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1260:Src/Eagle_TRT.c **** //max1 = pointer to the maximum value of the APPS1
1261:Src/Eagle_TRT.c **** //max2 = pointer to the maximum value of the APPS2
1262:Src/Eagle_TRT.c **** void set_max(pot_stc *pot_1)
1263:Src/Eagle_TRT.c **** {
 3126              		.loc 1 1263 0
 3127              		.cfi_startproc
 3128              		@ args = 0, pretend = 0, frame = 0
 3129              		@ frame_needed = 0, uses_anonymous_args = 0
 3130              		@ link register save eliminated.
 3131              	.LVL306:
1264:Src/Eagle_TRT.c **** 	pot_1->max = pot_1->val;
 3132              		.loc 1 1264 0
 3133 0000 0369     		ldr	r3, [r0, #16]
 3134 0002 4360     		str	r3, [r0, #4]
 3135 0004 7047     		bx	lr
 3136              		.cfi_endproc
 3137              	.LFE159:
 3139              		.section	.text.set_min,"ax",%progbits
 3140              		.align	1
 3141              		.global	set_min
 3142              		.syntax unified
 3143              		.thumb
 3144              		.thumb_func
 3145              		.fpu fpv4-sp-d16
 3147              	set_min:
 3148              	.LFB160:
1265:Src/Eagle_TRT.c **** }
1266:Src/Eagle_TRT.c **** 
1267:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is pressed
1268:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1269:Src/Eagle_TRT.c **** //min1 = pointer to the minimum value of the APPS1
ARM GAS  /tmp/ccU79PPY.s 			page 84


1270:Src/Eagle_TRT.c **** //min2 = pointer to the minimum value of the APPS2
1271:Src/Eagle_TRT.c **** void set_min(pot_stc *pot_1)
1272:Src/Eagle_TRT.c **** {
 3149              		.loc 1 1272 0
 3150              		.cfi_startproc
 3151              		@ args = 0, pretend = 0, frame = 0
 3152              		@ frame_needed = 0, uses_anonymous_args = 0
 3153              		@ link register save eliminated.
 3154              	.LVL307:
1273:Src/Eagle_TRT.c **** 	pot_1->min = pot_1->val;
 3155              		.loc 1 1273 0
 3156 0000 0369     		ldr	r3, [r0, #16]
 3157 0002 8360     		str	r3, [r0, #8]
 3158 0004 7047     		bx	lr
 3159              		.cfi_endproc
 3160              	.LFE160:
 3162              		.global	__aeabi_i2d
 3163              		.section	.text.Power,"ax",%progbits
 3164              		.align	1
 3165              		.global	Power
 3166              		.syntax unified
 3167              		.thumb
 3168              		.thumb_func
 3169              		.fpu fpv4-sp-d16
 3171              	Power:
 3172              	.LFB162:
1274:Src/Eagle_TRT.c **** }
1275:Src/Eagle_TRT.c **** 
1276:Src/Eagle_TRT.c **** #endif
1277:Src/Eagle_TRT.c **** 
1278:Src/Eagle_TRT.c **** //function to calculate the decimal value from MSB binary array
1279:Src/Eagle_TRT.c **** //bin = pointer to binary array
1280:Src/Eagle_TRT.c **** //max = size of the array
1281:Src/Eagle_TRT.c **** int bin_dec(int *bin, int size)
1282:Src/Eagle_TRT.c **** {
1283:Src/Eagle_TRT.c **** 
1284:Src/Eagle_TRT.c **** 	int dec = 0;
1285:Src/Eagle_TRT.c **** 
1286:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1287:Src/Eagle_TRT.c **** 	{
1288:Src/Eagle_TRT.c **** 		if (bin[i] == 1)
1289:Src/Eagle_TRT.c **** 		{
1290:Src/Eagle_TRT.c **** 			dec += Power(2, size - i - 1);
1291:Src/Eagle_TRT.c **** 		}
1292:Src/Eagle_TRT.c **** 	}
1293:Src/Eagle_TRT.c **** 	return dec;
1294:Src/Eagle_TRT.c **** }
1295:Src/Eagle_TRT.c **** 
1296:Src/Eagle_TRT.c **** //function to calculate the power of a given number
1297:Src/Eagle_TRT.c **** double Power(int base, int expn)
1298:Src/Eagle_TRT.c **** {
 3173              		.loc 1 1298 0
 3174              		.cfi_startproc
 3175              		@ args = 0, pretend = 0, frame = 0
 3176              		@ frame_needed = 0, uses_anonymous_args = 0
 3177              	.LVL308:
 3178 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  /tmp/ccU79PPY.s 			page 85


 3179              	.LCFI40:
 3180              		.cfi_def_cfa_offset 24
 3181              		.cfi_offset 4, -24
 3182              		.cfi_offset 5, -20
 3183              		.cfi_offset 6, -16
 3184              		.cfi_offset 7, -12
 3185              		.cfi_offset 8, -8
 3186              		.cfi_offset 14, -4
 3187              	.LVL309:
1299:Src/Eagle_TRT.c **** 
1300:Src/Eagle_TRT.c **** 	double result = 1;
1301:Src/Eagle_TRT.c **** 
1302:Src/Eagle_TRT.c **** 	if (expn != 0)
 3188              		.loc 1 1302 0
 3189 0004 29B1     		cbz	r1, .L245
 3190 0006 0D46     		mov	r5, r1
 3191 0008 8046     		mov	r8, r0
 3192 000a 0024     		movs	r4, #0
 3193 000c 0026     		movs	r6, #0
 3194 000e 0B4F     		ldr	r7, .L246
 3195 0010 0EE0     		b	.L240
 3196              	.L245:
1300:Src/Eagle_TRT.c **** 
 3197              		.loc 1 1300 0
 3198 0012 0026     		movs	r6, #0
 3199 0014 094F     		ldr	r7, .L246
 3200 0016 0DE0     		b	.L239
 3201              	.LVL310:
 3202              	.L242:
 3203              	.LBB15:
1303:Src/Eagle_TRT.c **** 	{
1304:Src/Eagle_TRT.c **** 		for (int j = 0; j < expn; j++)
1305:Src/Eagle_TRT.c **** 		{
1306:Src/Eagle_TRT.c **** 			result = result * base;
 3204              		.loc 1 1306 0 discriminator 3
 3205 0018 4046     		mov	r0, r8
 3206 001a FFF7FEFF 		bl	__aeabi_i2d
 3207              	.LVL311:
 3208 001e 0246     		mov	r2, r0
 3209 0020 0B46     		mov	r3, r1
 3210 0022 3046     		mov	r0, r6
 3211 0024 3946     		mov	r1, r7
 3212 0026 FFF7FEFF 		bl	__aeabi_dmul
 3213              	.LVL312:
 3214 002a 0646     		mov	r6, r0
 3215              	.LVL313:
 3216 002c 0F46     		mov	r7, r1
 3217              	.LVL314:
1304:Src/Eagle_TRT.c **** 		{
 3218              		.loc 1 1304 0 discriminator 3
 3219 002e 0134     		adds	r4, r4, #1
 3220              	.LVL315:
 3221              	.L240:
1304:Src/Eagle_TRT.c **** 		{
 3222              		.loc 1 1304 0 is_stmt 0 discriminator 1
 3223 0030 AC42     		cmp	r4, r5
 3224 0032 F1DB     		blt	.L242
ARM GAS  /tmp/ccU79PPY.s 			page 86


 3225              	.LVL316:
 3226              	.L239:
 3227              	.LBE15:
1307:Src/Eagle_TRT.c **** 		}
1308:Src/Eagle_TRT.c **** 	}
1309:Src/Eagle_TRT.c **** 
1310:Src/Eagle_TRT.c **** 	return result;
1311:Src/Eagle_TRT.c **** }
 3228              		.loc 1 1311 0 is_stmt 1
 3229 0034 47EC106B 		vmov	d0, r6, r7
 3230 0038 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3231              	.L247:
 3232              		.align	2
 3233              	.L246:
 3234 003c 0000F03F 		.word	1072693248
 3235              		.cfi_endproc
 3236              	.LFE162:
 3238              		.section	.text.bin_dec,"ax",%progbits
 3239              		.align	1
 3240              		.global	bin_dec
 3241              		.syntax unified
 3242              		.thumb
 3243              		.thumb_func
 3244              		.fpu fpv4-sp-d16
 3246              	bin_dec:
 3247              	.LFB161:
1282:Src/Eagle_TRT.c **** 
 3248              		.loc 1 1282 0
 3249              		.cfi_startproc
 3250              		@ args = 0, pretend = 0, frame = 0
 3251              		@ frame_needed = 0, uses_anonymous_args = 0
 3252              	.LVL317:
 3253 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3254              	.LCFI41:
 3255              		.cfi_def_cfa_offset 32
 3256              		.cfi_offset 3, -32
 3257              		.cfi_offset 4, -28
 3258              		.cfi_offset 5, -24
 3259              		.cfi_offset 6, -20
 3260              		.cfi_offset 7, -16
 3261              		.cfi_offset 8, -12
 3262              		.cfi_offset 9, -8
 3263              		.cfi_offset 14, -4
 3264 0004 0646     		mov	r6, r0
 3265 0006 0D46     		mov	r5, r1
 3266              	.LVL318:
 3267              	.LBB16:
1286:Src/Eagle_TRT.c **** 	{
 3268              		.loc 1 1286 0
 3269 0008 0024     		movs	r4, #0
 3270              	.LBE16:
1284:Src/Eagle_TRT.c **** 
 3271              		.loc 1 1284 0
 3272 000a 2746     		mov	r7, r4
 3273              	.LBB17:
1286:Src/Eagle_TRT.c **** 	{
 3274              		.loc 1 1286 0
ARM GAS  /tmp/ccU79PPY.s 			page 87


 3275 000c 00E0     		b	.L249
 3276              	.LVL319:
 3277              	.L250:
1286:Src/Eagle_TRT.c **** 	{
 3278              		.loc 1 1286 0 is_stmt 0 discriminator 2
 3279 000e 0134     		adds	r4, r4, #1
 3280              	.LVL320:
 3281              	.L249:
1286:Src/Eagle_TRT.c **** 	{
 3282              		.loc 1 1286 0 discriminator 1
 3283 0010 AC42     		cmp	r4, r5
 3284 0012 15DA     		bge	.L253
1288:Src/Eagle_TRT.c **** 		{
 3285              		.loc 1 1288 0 is_stmt 1
 3286 0014 56F82430 		ldr	r3, [r6, r4, lsl #2]
 3287 0018 012B     		cmp	r3, #1
 3288 001a F8D1     		bne	.L250
1290:Src/Eagle_TRT.c **** 		}
 3289              		.loc 1 1290 0
 3290 001c 291B     		subs	r1, r5, r4
 3291 001e 0139     		subs	r1, r1, #1
 3292 0020 0220     		movs	r0, #2
 3293 0022 FFF7FEFF 		bl	Power
 3294              	.LVL321:
 3295 0026 59EC108B 		vmov	r8, r9, d0
 3296 002a 3846     		mov	r0, r7
 3297 002c FFF7FEFF 		bl	__aeabi_i2d
 3298              	.LVL322:
 3299 0030 4246     		mov	r2, r8
 3300 0032 4B46     		mov	r3, r9
 3301 0034 FFF7FEFF 		bl	__aeabi_dadd
 3302              	.LVL323:
 3303 0038 FFF7FEFF 		bl	__aeabi_d2iz
 3304              	.LVL324:
 3305 003c 0746     		mov	r7, r0
 3306              	.LVL325:
 3307 003e E6E7     		b	.L250
 3308              	.LVL326:
 3309              	.L253:
 3310              	.LBE17:
1294:Src/Eagle_TRT.c **** 
 3311              		.loc 1 1294 0
 3312 0040 3846     		mov	r0, r7
 3313 0042 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3314              		.cfi_endproc
 3315              	.LFE161:
 3317              		.section	.text.read_SSI,"ax",%progbits
 3318              		.align	1
 3319              		.global	read_SSI
 3320              		.syntax unified
 3321              		.thumb
 3322              		.thumb_func
 3323              		.fpu fpv4-sp-d16
 3325              	read_SSI:
 3326              	.LFB152:
 950:Src/Eagle_TRT.c **** 
 3327              		.loc 1 950 0
ARM GAS  /tmp/ccU79PPY.s 			page 88


 3328              		.cfi_startproc
 3329              		@ args = 0, pretend = 0, frame = 0
 3330              		@ frame_needed = 1, uses_anonymous_args = 0
 3331              	.LVL327:
 3332 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3333              	.LCFI42:
 3334              		.cfi_def_cfa_offset 24
 3335              		.cfi_offset 3, -24
 3336              		.cfi_offset 4, -20
 3337              		.cfi_offset 5, -16
 3338              		.cfi_offset 6, -12
 3339              		.cfi_offset 7, -8
 3340              		.cfi_offset 14, -4
 3341 0002 00AF     		add	r7, sp, #0
 3342              	.LCFI43:
 3343              		.cfi_def_cfa_register 7
 3344 0004 0446     		mov	r4, r0
 952:Src/Eagle_TRT.c **** 
 3345              		.loc 1 952 0
 3346 0006 0368     		ldr	r3, [r0]
 3347              	.LVL328:
 3348 0008 9B00     		lsls	r3, r3, #2
 3349              	.LVL329:
 3350 000a 0A33     		adds	r3, r3, #10
 3351 000c 23F00703 		bic	r3, r3, #7
 3352 0010 ADEB030D 		sub	sp, sp, r3
 3353 0014 6E46     		mov	r6, sp
 3354              	.LVL330:
 954:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3355              		.loc 1 954 0
 3356 0016 0022     		movs	r2, #0
 3357 0018 B0F8E013 		ldrh	r1, [r0, #992]
 3358 001c D0F8D803 		ldr	r0, [r0, #984]
 3359              	.LVL331:
 3360 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3361              	.LVL332:
 955:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3362              		.loc 1 955 0
 3363 0024 D4F8D033 		ldr	r3, [r4, #976]
 3364 0028 1B68     		ldr	r3, [r3]
 3365 002a 0022     		movs	r2, #0
 3366 002c 5A62     		str	r2, [r3, #36]
 3367              	.L255:
 956:Src/Eagle_TRT.c **** 	{
 3368              		.loc 1 956 0 discriminator 1
 3369 002e D4F8D033 		ldr	r3, [r4, #976]
 3370 0032 1B68     		ldr	r3, [r3]
 3371 0034 5A6A     		ldr	r2, [r3, #36]
 3372 0036 E368     		ldr	r3, [r4, #12]
 3373 0038 9A42     		cmp	r2, r3
 3374 003a F8D9     		bls	.L255
 959:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3375              		.loc 1 959 0
 3376 003c 0122     		movs	r2, #1
 3377 003e B4F8E013 		ldrh	r1, [r4, #992]
 3378 0042 D4F8D803 		ldr	r0, [r4, #984]
 3379 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccU79PPY.s 			page 89


 3380              	.LVL333:
 960:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3381              		.loc 1 960 0
 3382 004a D4F8D033 		ldr	r3, [r4, #976]
 3383 004e 1B68     		ldr	r3, [r3]
 3384 0050 0022     		movs	r2, #0
 3385 0052 5A62     		str	r2, [r3, #36]
 3386              	.L256:
 961:Src/Eagle_TRT.c **** 	{
 3387              		.loc 1 961 0 discriminator 1
 3388 0054 D4F8D033 		ldr	r3, [r4, #976]
 3389 0058 1B68     		ldr	r3, [r3]
 3390 005a 5A6A     		ldr	r2, [r3, #36]
 3391 005c E368     		ldr	r3, [r4, #12]
 3392 005e 9A42     		cmp	r2, r3
 3393 0060 F8D9     		bls	.L256
 964:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3394              		.loc 1 964 0
 3395 0062 0022     		movs	r2, #0
 3396 0064 B4F8E013 		ldrh	r1, [r4, #992]
 3397 0068 D4F8D803 		ldr	r0, [r4, #984]
 3398 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 3399              	.LVL334:
 965:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3400              		.loc 1 965 0
 3401 0070 D4F8D033 		ldr	r3, [r4, #976]
 3402 0074 1B68     		ldr	r3, [r3]
 3403 0076 0022     		movs	r2, #0
 3404 0078 5A62     		str	r2, [r3, #36]
 3405              	.L257:
 966:Src/Eagle_TRT.c **** 	{
 3406              		.loc 1 966 0 discriminator 1
 3407 007a D4F8D033 		ldr	r3, [r4, #976]
 3408 007e 1B68     		ldr	r3, [r3]
 3409 0080 5A6A     		ldr	r2, [r3, #36]
 3410 0082 E368     		ldr	r3, [r4, #12]
 3411 0084 9A42     		cmp	r2, r3
 3412 0086 F8D9     		bls	.L257
 3413 0088 0025     		movs	r5, #0
 3414 008a 43E0     		b	.L258
 3415              	.LVL335:
 3416              	.L262:
 3417              	.LBB18:
 975:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3418              		.loc 1 975 0
 3419 008c 0122     		movs	r2, #1
 3420 008e B4F8E013 		ldrh	r1, [r4, #992]
 3421 0092 D4F8D803 		ldr	r0, [r4, #984]
 3422 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3423              	.LVL336:
 976:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 3424              		.loc 1 976 0
 3425 009a D4F8D033 		ldr	r3, [r4, #976]
 3426 009e 1B68     		ldr	r3, [r3]
 3427 00a0 0022     		movs	r2, #0
 3428 00a2 5A62     		str	r2, [r3, #36]
 3429              	.L259:
ARM GAS  /tmp/ccU79PPY.s 			page 90


 977:Src/Eagle_TRT.c **** 		{
 3430              		.loc 1 977 0 discriminator 1
 3431 00a4 D4F8D033 		ldr	r3, [r4, #976]
 3432 00a8 1B68     		ldr	r3, [r3]
 3433 00aa 5A6A     		ldr	r2, [r3, #36]
 3434 00ac E368     		ldr	r3, [r4, #12]
 3435 00ae 03EBD373 		add	r3, r3, r3, lsr #31
 3436 00b2 B2EB630F 		cmp	r2, r3, asr #1
 3437 00b6 F5D9     		bls	.L259
 983:Src/Eagle_TRT.c **** 		enc->Data[i] = bin_data[i];
 3438              		.loc 1 983 0
 3439 00b8 B4F8E213 		ldrh	r1, [r4, #994]
 3440 00bc D4F8DC03 		ldr	r0, [r4, #988]
 3441 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3442              	.LVL337:
 3443 00c4 46F82500 		str	r0, [r6, r5, lsl #2]
 984:Src/Eagle_TRT.c **** 
 3444              		.loc 1 984 0
 3445 00c8 2B1D     		adds	r3, r5, #4
 3446 00ca 44F82300 		str	r0, [r4, r3, lsl #2]
 986:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 3447              		.loc 1 986 0
 3448 00ce D4F8D033 		ldr	r3, [r4, #976]
 3449 00d2 1B68     		ldr	r3, [r3]
 3450 00d4 0022     		movs	r2, #0
 3451 00d6 5A62     		str	r2, [r3, #36]
 3452              	.L260:
 987:Src/Eagle_TRT.c **** 		{
 3453              		.loc 1 987 0 discriminator 1
 3454 00d8 D4F8D033 		ldr	r3, [r4, #976]
 3455 00dc 1B68     		ldr	r3, [r3]
 3456 00de 5A6A     		ldr	r2, [r3, #36]
 3457 00e0 E368     		ldr	r3, [r4, #12]
 3458 00e2 03EBD373 		add	r3, r3, r3, lsr #31
 3459 00e6 B2EB630F 		cmp	r2, r3, asr #1
 3460 00ea F5D9     		bls	.L260
 992:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3461              		.loc 1 992 0
 3462 00ec 0022     		movs	r2, #0
 3463 00ee B4F8E013 		ldrh	r1, [r4, #992]
 3464 00f2 D4F8D803 		ldr	r0, [r4, #984]
 3465 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3466              	.LVL338:
 993:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3467              		.loc 1 993 0
 3468 00fa D4F8D033 		ldr	r3, [r4, #976]
 3469 00fe 1B68     		ldr	r3, [r3]
 3470 0100 0022     		movs	r2, #0
 3471 0102 5A62     		str	r2, [r3, #36]
 3472              	.L261:
 994:Src/Eagle_TRT.c **** 		{
 3473              		.loc 1 994 0 discriminator 1
 3474 0104 D4F8D033 		ldr	r3, [r4, #976]
 3475 0108 1B68     		ldr	r3, [r3]
 3476 010a 5A6A     		ldr	r2, [r3, #36]
 3477 010c E368     		ldr	r3, [r4, #12]
 3478 010e 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccU79PPY.s 			page 91


 3479 0110 F8D9     		bls	.L261
 971:Src/Eagle_TRT.c **** 	{
 3480              		.loc 1 971 0 discriminator 2
 3481 0112 0135     		adds	r5, r5, #1
 3482              	.LVL339:
 3483              	.L258:
 971:Src/Eagle_TRT.c **** 	{
 3484              		.loc 1 971 0 is_stmt 0 discriminator 1
 3485 0114 2368     		ldr	r3, [r4]
 3486 0116 9D42     		cmp	r5, r3
 3487 0118 B8DB     		blt	.L262
 3488              	.LBE18:
1000:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3489              		.loc 1 1000 0 is_stmt 1
 3490 011a 0122     		movs	r2, #1
 3491 011c B4F8E013 		ldrh	r1, [r4, #992]
 3492 0120 D4F8D803 		ldr	r0, [r4, #984]
 3493 0124 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3494              	.LVL340:
1001:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
 3495              		.loc 1 1001 0
 3496 0128 D4F8D033 		ldr	r3, [r4, #976]
 3497 012c 1B68     		ldr	r3, [r3]
 3498 012e 0022     		movs	r2, #0
 3499 0130 5A62     		str	r2, [r3, #36]
 3500              	.L263:
1002:Src/Eagle_TRT.c **** 	{
 3501              		.loc 1 1002 0 discriminator 1
 3502 0132 D4F8D033 		ldr	r3, [r4, #976]
 3503 0136 1B68     		ldr	r3, [r3]
 3504 0138 5B6A     		ldr	r3, [r3, #36]
 3505 013a E268     		ldr	r2, [r4, #12]
 3506 013c B3EB420F 		cmp	r3, r2, lsl #1
 3507 0140 F7D9     		bls	.L263
1006:Src/Eagle_TRT.c **** 
 3508              		.loc 1 1006 0
 3509 0142 B4F8E213 		ldrh	r1, [r4, #994]
 3510 0146 D4F8DC03 		ldr	r0, [r4, #988]
 3511 014a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3512              	.LVL341:
 3513 014e 0546     		mov	r5, r0
 3514              	.LVL342:
1008:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
 3515              		.loc 1 1008 0
 3516 0150 D4F8D033 		ldr	r3, [r4, #976]
 3517 0154 1B68     		ldr	r3, [r3]
 3518 0156 0022     		movs	r2, #0
 3519 0158 5A62     		str	r2, [r3, #36]
 3520              	.L264:
1009:Src/Eagle_TRT.c **** 	{
 3521              		.loc 1 1009 0 discriminator 1
 3522 015a D4F8D033 		ldr	r3, [r4, #976]
 3523 015e 1B68     		ldr	r3, [r3]
 3524 0160 5B6A     		ldr	r3, [r3, #36]
 3525 0162 E268     		ldr	r2, [r4, #12]
 3526 0164 B3EB420F 		cmp	r3, r2, lsl #1
 3527 0168 F7D9     		bls	.L264
ARM GAS  /tmp/ccU79PPY.s 			page 92


1014:Src/Eagle_TRT.c **** 
 3528              		.loc 1 1014 0
 3529 016a 2168     		ldr	r1, [r4]
 3530 016c 04F11000 		add	r0, r4, #16
 3531              	.LVL343:
 3532 0170 FFF7FEFF 		bl	bin_dec
 3533              	.LVL344:
 3534 0174 C4F8C803 		str	r0, [r4, #968]
1017:Src/Eagle_TRT.c **** 
 3535              		.loc 1 1017 0
 3536 0178 2846     		mov	r0, r5
 3537 017a BD46     		mov	sp, r7
 3538              	.LCFI44:
 3539              		.cfi_def_cfa_register 13
 3540              		@ sp needed
 3541 017c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3542              		.cfi_endproc
 3543              	.LFE152:
 3545              		.section	.text.shift_array,"ax",%progbits
 3546              		.align	1
 3547              		.global	shift_array
 3548              		.syntax unified
 3549              		.thumb
 3550              		.thumb_func
 3551              		.fpu fpv4-sp-d16
 3553              	shift_array:
 3554              	.LFB163:
1312:Src/Eagle_TRT.c **** 
1313:Src/Eagle_TRT.c **** //shift all the data of a numeric array and add another one value
1314:Src/Eagle_TRT.c **** //array = array to be shifted
1315:Src/Eagle_TRT.c **** //size = size of the array
1316:Src/Eagle_TRT.c **** //data = value to be added in the last position of the array
1317:Src/Eagle_TRT.c **** void shift_array(long double *array, int size, long double data)
1318:Src/Eagle_TRT.c **** {
 3555              		.loc 1 1318 0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 0
 3558              		@ frame_needed = 0, uses_anonymous_args = 0
 3559              		@ link register save eliminated.
 3560              	.LVL345:
 3561              	.LBB19:
1319:Src/Eagle_TRT.c **** 
1320:Src/Eagle_TRT.c **** 	for (int i = 1; i < size; i++)
 3562              		.loc 1 1320 0
 3563 0000 0122     		movs	r2, #1
 3564              	.LVL346:
 3565 0002 8A42     		cmp	r2, r1
 3566 0004 17DA     		bge	.L273
 3567              	.LBE19:
1318:Src/Eagle_TRT.c **** 
 3568              		.loc 1 1318 0
 3569 0006 30B4     		push	{r4, r5}
 3570              	.LCFI45:
 3571              		.cfi_def_cfa_offset 8
 3572              		.cfi_offset 4, -8
 3573              		.cfi_offset 5, -4
 3574              	.L268:
ARM GAS  /tmp/ccU79PPY.s 			page 93


 3575              	.LBB20:
1321:Src/Eagle_TRT.c **** 	{
1322:Src/Eagle_TRT.c **** 		array[i - 1] = array[i];
 3576              		.loc 1 1322 0 discriminator 3
 3577 0008 02F10053 		add	r3, r2, #536870912
 3578 000c 013B     		subs	r3, r3, #1
 3579 000e 00EBC303 		add	r3, r0, r3, lsl #3
 3580 0012 00EBC204 		add	r4, r0, r2, lsl #3
 3581 0016 D4E90045 		ldrd	r4, [r4]
 3582 001a C3E90045 		strd	r4, [r3]
1320:Src/Eagle_TRT.c **** 	{
 3583              		.loc 1 1320 0 discriminator 3
 3584 001e 0132     		adds	r2, r2, #1
 3585              	.LVL347:
 3586 0020 8A42     		cmp	r2, r1
 3587 0022 F1DB     		blt	.L268
 3588              	.LBE20:
1323:Src/Eagle_TRT.c **** 	}
1324:Src/Eagle_TRT.c **** 	array[size - 1] = data;
 3589              		.loc 1 1324 0
 3590 0024 01F10051 		add	r1, r1, #536870912
 3591              	.LVL348:
 3592 0028 0139     		subs	r1, r1, #1
 3593              	.LVL349:
 3594 002a 00EBC100 		add	r0, r0, r1, lsl #3
 3595              	.LVL350:
 3596 002e 80ED000B 		vstr.64	d0, [r0]
1325:Src/Eagle_TRT.c **** }
 3597              		.loc 1 1325 0
 3598 0032 30BC     		pop	{r4, r5}
 3599              	.LCFI46:
 3600              		.cfi_restore 5
 3601              		.cfi_restore 4
 3602              		.cfi_def_cfa_offset 0
 3603 0034 7047     		bx	lr
 3604              	.LVL351:
 3605              	.L273:
1324:Src/Eagle_TRT.c **** }
 3606              		.loc 1 1324 0
 3607 0036 01F10051 		add	r1, r1, #536870912
 3608              	.LVL352:
 3609 003a 0139     		subs	r1, r1, #1
 3610              	.LVL353:
 3611 003c 00EBC100 		add	r0, r0, r1, lsl #3
 3612              	.LVL354:
 3613 0040 80ED000B 		vstr.64	d0, [r0]
 3614 0044 7047     		bx	lr
 3615              		.cfi_endproc
 3616              	.LFE163:
 3618              		.section	.text.speed_filter,"ax",%progbits
 3619              		.align	1
 3620              		.global	speed_filter
 3621              		.syntax unified
 3622              		.thumb
 3623              		.thumb_func
 3624              		.fpu fpv4-sp-d16
 3626              	speed_filter:
ARM GAS  /tmp/ccU79PPY.s 			page 94


 3627              	.LFB164:
1326:Src/Eagle_TRT.c **** 
1327:Src/Eagle_TRT.c **** double speed_filter(double *data, int size)
1328:Src/Eagle_TRT.c **** {
 3628              		.loc 1 1328 0
 3629              		.cfi_startproc
 3630              		@ args = 0, pretend = 0, frame = 16
 3631              		@ frame_needed = 0, uses_anonymous_args = 0
 3632              	.LVL355:
 3633 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3634              	.LCFI47:
 3635              		.cfi_def_cfa_offset 36
 3636              		.cfi_offset 4, -36
 3637              		.cfi_offset 5, -32
 3638              		.cfi_offset 6, -28
 3639              		.cfi_offset 7, -24
 3640              		.cfi_offset 8, -20
 3641              		.cfi_offset 9, -16
 3642              		.cfi_offset 10, -12
 3643              		.cfi_offset 11, -8
 3644              		.cfi_offset 14, -4
 3645 0004 85B0     		sub	sp, sp, #20
 3646              	.LCFI48:
 3647              		.cfi_def_cfa_offset 56
 3648 0006 8246     		mov	r10, r0
 3649 0008 0D46     		mov	r5, r1
 3650              	.LVL356:
 3651              	.LBB21:
1329:Src/Eagle_TRT.c **** 	double min = 100000000000000;
1330:Src/Eagle_TRT.c **** 	double max = -min;
1331:Src/Eagle_TRT.c **** 	double sum = 0;
1332:Src/Eagle_TRT.c **** 	double average = 0;
1333:Src/Eagle_TRT.c **** 	int index_1;
1334:Src/Eagle_TRT.c **** 	int index_2;
1335:Src/Eagle_TRT.c **** 	int average_members = 0;
1336:Src/Eagle_TRT.c **** 
1337:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
 3652              		.loc 1 1337 0
 3653 000a 0024     		movs	r4, #0
 3654              	.LBE21:
1330:Src/Eagle_TRT.c **** 	double sum = 0;
 3655              		.loc 1 1330 0
 3656 000c 0FF2A009 		adr	r9, .L288+8
 3657 0010 D9E90089 		ldrd	r8, [r9]
1329:Src/Eagle_TRT.c **** 	double min = 100000000000000;
 3658              		.loc 1 1329 0
 3659 0014 9FED247B 		vldr.64	d7, .L288
 3660 0018 8DED007B 		vstr.64	d7, [sp]
 3661              	.LBB22:
 3662              		.loc 1 1337 0
 3663 001c 00E0     		b	.L275
 3664              	.LVL357:
 3665              	.L277:
 3666              		.loc 1 1337 0 is_stmt 0 discriminator 2
 3667 001e 0134     		adds	r4, r4, #1
 3668              	.LVL358:
 3669              	.L275:
ARM GAS  /tmp/ccU79PPY.s 			page 95


 3670              		.loc 1 1337 0 discriminator 1
 3671 0020 AC42     		cmp	r4, r5
 3672 0022 19DA     		bge	.L286
1338:Src/Eagle_TRT.c **** 	{
1339:Src/Eagle_TRT.c **** 		if (data[i] < min)
 3673              		.loc 1 1339 0 is_stmt 1
 3674 0024 0AEBC403 		add	r3, r10, r4, lsl #3
 3675 0028 D3E90067 		ldrd	r6, [r3]
 3676 002c 3246     		mov	r2, r6
 3677 002e 3B46     		mov	r3, r7
 3678 0030 DDE90001 		ldrd	r0, [sp]
 3679 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 3680              	.LVL359:
 3681 0038 10B1     		cbz	r0, .L276
1340:Src/Eagle_TRT.c **** 		{
1341:Src/Eagle_TRT.c **** 			min = data[i];
1342:Src/Eagle_TRT.c **** 			index_1 = i;
 3682              		.loc 1 1342 0
 3683 003a A346     		mov	fp, r4
 3684              	.LVL360:
1341:Src/Eagle_TRT.c **** 			index_1 = i;
 3685              		.loc 1 1341 0
 3686 003c CDE90067 		strd	r6, [sp]
 3687              	.LVL361:
 3688              	.L276:
1343:Src/Eagle_TRT.c **** 		}
1344:Src/Eagle_TRT.c **** 
1345:Src/Eagle_TRT.c **** 		if (data[i] > max)
 3689              		.loc 1 1345 0
 3690 0040 3246     		mov	r2, r6
 3691 0042 3B46     		mov	r3, r7
 3692 0044 4046     		mov	r0, r8
 3693 0046 4946     		mov	r1, r9
 3694 0048 FFF7FEFF 		bl	__aeabi_dcmplt
 3695              	.LVL362:
 3696 004c 0028     		cmp	r0, #0
 3697 004e E6D0     		beq	.L277
1346:Src/Eagle_TRT.c **** 		{
1347:Src/Eagle_TRT.c **** 			max = data[i];
1348:Src/Eagle_TRT.c **** 			index_2 = i;
 3698              		.loc 1 1348 0
 3699 0050 0394     		str	r4, [sp, #12]
 3700              	.LVL363:
1347:Src/Eagle_TRT.c **** 			index_2 = i;
 3701              		.loc 1 1347 0
 3702 0052 B046     		mov	r8, r6
 3703              	.LVL364:
 3704 0054 B946     		mov	r9, r7
 3705 0056 E2E7     		b	.L277
 3706              	.LVL365:
 3707              	.L286:
 3708 0058 0024     		movs	r4, #0
 3709              	.LVL366:
 3710 005a A046     		mov	r8, r4
 3711              	.LVL367:
 3712 005c 0026     		movs	r6, #0
 3713 005e 0027     		movs	r7, #0
ARM GAS  /tmp/ccU79PPY.s 			page 96


 3714 0060 0CE0     		b	.L279
 3715              	.LVL368:
 3716              	.L280:
 3717              	.LBE22:
 3718              	.LBB23:
1349:Src/Eagle_TRT.c **** 		}
1350:Src/Eagle_TRT.c **** 	}
1351:Src/Eagle_TRT.c **** 
1352:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1353:Src/Eagle_TRT.c **** 	{
1354:Src/Eagle_TRT.c **** 		if (i != index_1 || i != index_2)
1355:Src/Eagle_TRT.c **** 		{
1356:Src/Eagle_TRT.c **** 			sum += data[i];
 3719              		.loc 1 1356 0
 3720 0062 0AEBC403 		add	r3, r10, r4, lsl #3
 3721 0066 D3E90023 		ldrd	r2, [r3]
 3722 006a 3046     		mov	r0, r6
 3723 006c 3946     		mov	r1, r7
 3724 006e FFF7FEFF 		bl	__aeabi_dadd
 3725              	.LVL369:
 3726 0072 0646     		mov	r6, r0
 3727              	.LVL370:
 3728 0074 0F46     		mov	r7, r1
 3729              	.LVL371:
1357:Src/Eagle_TRT.c **** 			average_members++;
 3730              		.loc 1 1357 0
 3731 0076 08F10108 		add	r8, r8, #1
 3732              	.LVL372:
 3733              	.L281:
1352:Src/Eagle_TRT.c **** 	{
 3734              		.loc 1 1352 0 discriminator 2
 3735 007a 0134     		adds	r4, r4, #1
 3736              	.LVL373:
 3737              	.L279:
1352:Src/Eagle_TRT.c **** 	{
 3738              		.loc 1 1352 0 is_stmt 0 discriminator 1
 3739 007c AC42     		cmp	r4, r5
 3740 007e 05DA     		bge	.L287
1354:Src/Eagle_TRT.c **** 		{
 3741              		.loc 1 1354 0 is_stmt 1
 3742 0080 A345     		cmp	fp, r4
 3743 0082 EED1     		bne	.L280
1354:Src/Eagle_TRT.c **** 		{
 3744              		.loc 1 1354 0 is_stmt 0 discriminator 1
 3745 0084 039B     		ldr	r3, [sp, #12]
 3746 0086 A342     		cmp	r3, r4
 3747 0088 EBD1     		bne	.L280
 3748 008a F6E7     		b	.L281
 3749              	.L287:
 3750              	.LBE23:
1358:Src/Eagle_TRT.c **** 		}
1359:Src/Eagle_TRT.c **** 	}
1360:Src/Eagle_TRT.c **** 	average = sum / average_members;
 3751              		.loc 1 1360 0 is_stmt 1
 3752 008c 4046     		mov	r0, r8
 3753 008e FFF7FEFF 		bl	__aeabi_i2d
 3754              	.LVL374:
ARM GAS  /tmp/ccU79PPY.s 			page 97


 3755 0092 0246     		mov	r2, r0
 3756 0094 0B46     		mov	r3, r1
 3757 0096 3046     		mov	r0, r6
 3758 0098 3946     		mov	r1, r7
 3759 009a FFF7FEFF 		bl	__aeabi_ddiv
 3760              	.LVL375:
1361:Src/Eagle_TRT.c **** 
1362:Src/Eagle_TRT.c **** 	return average;
1363:Src/Eagle_TRT.c **** }
 3761              		.loc 1 1363 0
 3762 009e 41EC100B 		vmov	d0, r0, r1
 3763 00a2 05B0     		add	sp, sp, #20
 3764              	.LCFI49:
 3765              		.cfi_def_cfa_offset 36
 3766              	.LVL376:
 3767              		@ sp needed
 3768 00a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3769              	.LVL377:
 3770              	.L289:
 3771              		.align	3
 3772              	.L288:
 3773 00a8 0000901E 		.word	512753664
 3774 00ac C4BCD642 		.word	1121369284
 3775 00b0 0000901E 		.word	512753664
 3776 00b4 C4BCD6C2 		.word	-1026114364
 3777              		.cfi_endproc
 3778              	.LFE164:
 3780              		.section	.text.dynamic_average,"ax",%progbits
 3781              		.align	1
 3782              		.global	dynamic_average
 3783              		.syntax unified
 3784              		.thumb
 3785              		.thumb_func
 3786              		.fpu fpv4-sp-d16
 3788              	dynamic_average:
 3789              	.LFB165:
1364:Src/Eagle_TRT.c **** 
1365:Src/Eagle_TRT.c **** //function that calculate the average of all the numbers in one array
1366:Src/Eagle_TRT.c **** double dynamic_average(long double *array, int size)
1367:Src/Eagle_TRT.c **** {
 3790              		.loc 1 1367 0
 3791              		.cfi_startproc
 3792              		@ args = 0, pretend = 0, frame = 0
 3793              		@ frame_needed = 0, uses_anonymous_args = 0
 3794              	.LVL378:
 3795 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3796              	.LCFI50:
 3797              		.cfi_def_cfa_offset 24
 3798              		.cfi_offset 4, -24
 3799              		.cfi_offset 5, -20
 3800              		.cfi_offset 6, -16
 3801              		.cfi_offset 7, -12
 3802              		.cfi_offset 8, -8
 3803              		.cfi_offset 14, -4
 3804 0004 8046     		mov	r8, r0
 3805 0006 0D46     		mov	r5, r1
 3806              	.LVL379:
ARM GAS  /tmp/ccU79PPY.s 			page 98


 3807              	.LBB24:
1368:Src/Eagle_TRT.c **** 
1369:Src/Eagle_TRT.c **** 	double sum = 0;
1370:Src/Eagle_TRT.c **** 	double average = 0;
1371:Src/Eagle_TRT.c **** 
1372:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
 3808              		.loc 1 1372 0
 3809 0008 0024     		movs	r4, #0
 3810              	.LBE24:
1369:Src/Eagle_TRT.c **** 	double average = 0;
 3811              		.loc 1 1369 0
 3812 000a 0026     		movs	r6, #0
 3813 000c 0027     		movs	r7, #0
 3814              	.LBB25:
 3815              		.loc 1 1372 0
 3816 000e 0AE0     		b	.L291
 3817              	.LVL380:
 3818              	.L292:
1373:Src/Eagle_TRT.c **** 	{
1374:Src/Eagle_TRT.c **** 		sum += array[i];
 3819              		.loc 1 1374 0 discriminator 3
 3820 0010 08EBC403 		add	r3, r8, r4, lsl #3
 3821 0014 D3E90023 		ldrd	r2, [r3]
 3822 0018 3046     		mov	r0, r6
 3823 001a 3946     		mov	r1, r7
 3824 001c FFF7FEFF 		bl	__aeabi_dadd
 3825              	.LVL381:
 3826 0020 0646     		mov	r6, r0
 3827              	.LVL382:
 3828 0022 0F46     		mov	r7, r1
 3829              	.LVL383:
1372:Src/Eagle_TRT.c **** 	{
 3830              		.loc 1 1372 0 discriminator 3
 3831 0024 0134     		adds	r4, r4, #1
 3832              	.LVL384:
 3833              	.L291:
1372:Src/Eagle_TRT.c **** 	{
 3834              		.loc 1 1372 0 is_stmt 0 discriminator 1
 3835 0026 AC42     		cmp	r4, r5
 3836 0028 F2DB     		blt	.L292
 3837              	.LBE25:
1375:Src/Eagle_TRT.c **** 	}
1376:Src/Eagle_TRT.c **** 	average = sum / size;
 3838              		.loc 1 1376 0 is_stmt 1
 3839 002a 2846     		mov	r0, r5
 3840 002c FFF7FEFF 		bl	__aeabi_i2d
 3841              	.LVL385:
 3842 0030 0246     		mov	r2, r0
 3843 0032 0B46     		mov	r3, r1
 3844 0034 3046     		mov	r0, r6
 3845 0036 3946     		mov	r1, r7
 3846 0038 FFF7FEFF 		bl	__aeabi_ddiv
 3847              	.LVL386:
1377:Src/Eagle_TRT.c **** 
1378:Src/Eagle_TRT.c **** 	return average;
1379:Src/Eagle_TRT.c **** }
 3848              		.loc 1 1379 0
ARM GAS  /tmp/ccU79PPY.s 			page 99


 3849 003c 41EC100B 		vmov	d0, r0, r1
 3850 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3851              		.cfi_endproc
 3852              	.LFE165:
 3854              		.section	.text.imu_elaborate_data,"ax",%progbits
 3855              		.align	1
 3856              		.global	imu_elaborate_data
 3857              		.syntax unified
 3858              		.thumb
 3859              		.thumb_func
 3860              		.fpu fpv4-sp-d16
 3862              	imu_elaborate_data:
 3863              	.LFB137:
 395:Src/Eagle_TRT.c **** 	if (imu->x > 32768)
 3864              		.loc 1 395 0
 3865              		.cfi_startproc
 3866              		@ args = 0, pretend = 0, frame = 0
 3867              		@ frame_needed = 0, uses_anonymous_args = 0
 3868              	.LVL387:
 3869 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3870              	.LCFI51:
 3871              		.cfi_def_cfa_offset 40
 3872              		.cfi_offset 3, -40
 3873              		.cfi_offset 4, -36
 3874              		.cfi_offset 5, -32
 3875              		.cfi_offset 6, -28
 3876              		.cfi_offset 7, -24
 3877              		.cfi_offset 8, -20
 3878              		.cfi_offset 9, -16
 3879              		.cfi_offset 10, -12
 3880              		.cfi_offset 11, -8
 3881              		.cfi_offset 14, -4
 3882 0004 0446     		mov	r4, r0
 396:Src/Eagle_TRT.c **** 	{
 3883              		.loc 1 396 0
 3884 0006 D0E90067 		ldrd	r6, [r0]
 3885 000a 0022     		movs	r2, #0
 3886 000c 504B     		ldr	r3, .L305
 3887 000e 3046     		mov	r0, r6
 3888              	.LVL388:
 3889 0010 3946     		mov	r1, r7
 3890 0012 FFF7FEFF 		bl	__aeabi_dcmpgt
 3891              	.LVL389:
 3892 0016 38B1     		cbz	r0, .L295
 398:Src/Eagle_TRT.c **** 	}
 3893              		.loc 1 398 0
 3894 0018 0022     		movs	r2, #0
 3895 001a 4E4B     		ldr	r3, .L305+4
 3896 001c 3046     		mov	r0, r6
 3897 001e 3946     		mov	r1, r7
 3898 0020 FFF7FEFF 		bl	__aeabi_dsub
 3899              	.LVL390:
 3900 0024 C4E90001 		strd	r0, [r4]
 3901              	.L295:
 400:Src/Eagle_TRT.c **** 	{
 3902              		.loc 1 400 0
 3903 0028 D4E90267 		ldrd	r6, [r4, #8]
ARM GAS  /tmp/ccU79PPY.s 			page 100


 3904 002c 0022     		movs	r2, #0
 3905 002e 484B     		ldr	r3, .L305
 3906 0030 3046     		mov	r0, r6
 3907 0032 3946     		mov	r1, r7
 3908 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 3909              	.LVL391:
 3910 0038 38B1     		cbz	r0, .L297
 402:Src/Eagle_TRT.c **** 	}
 3911              		.loc 1 402 0
 3912 003a 0022     		movs	r2, #0
 3913 003c 454B     		ldr	r3, .L305+4
 3914 003e 3046     		mov	r0, r6
 3915 0040 3946     		mov	r1, r7
 3916 0042 FFF7FEFF 		bl	__aeabi_dsub
 3917              	.LVL392:
 3918 0046 C4E90201 		strd	r0, [r4, #8]
 3919              	.L297:
 404:Src/Eagle_TRT.c **** 	{
 3920              		.loc 1 404 0
 3921 004a D4E90467 		ldrd	r6, [r4, #16]
 3922 004e 0022     		movs	r2, #0
 3923 0050 3F4B     		ldr	r3, .L305
 3924 0052 3046     		mov	r0, r6
 3925 0054 3946     		mov	r1, r7
 3926 0056 FFF7FEFF 		bl	__aeabi_dcmpgt
 3927              	.LVL393:
 3928 005a 38B1     		cbz	r0, .L299
 406:Src/Eagle_TRT.c **** 	}
 3929              		.loc 1 406 0
 3930 005c 0022     		movs	r2, #0
 3931 005e 3D4B     		ldr	r3, .L305+4
 3932 0060 3046     		mov	r0, r6
 3933 0062 3946     		mov	r1, r7
 3934 0064 FFF7FEFF 		bl	__aeabi_dsub
 3935              	.LVL394:
 3936 0068 C4E90401 		strd	r0, [r4, #16]
 3937              	.L299:
 409:Src/Eagle_TRT.c **** 	imu->y = imu->y * ((float)imu->scale / 32768);
 3938              		.loc 1 409 0
 3939 006c D4E90089 		ldrd	r8, [r4]
 3940 0070 D4ED867A 		vldr.32	s15, [r4, #536]	@ int
 3941 0074 F8EEE77A 		vcvt.f32.s32	s15, s15
 3942 0078 9FED377A 		vldr.32	s14, .L305+8
 3943 007c 67EE877A 		vmul.f32	s15, s15, s14
 3944 0080 17EE900A 		vmov	r0, s15
 3945 0084 FFF7FEFF 		bl	__aeabi_f2d
 3946              	.LVL395:
 3947 0088 0646     		mov	r6, r0
 3948 008a 0F46     		mov	r7, r1
 3949 008c 0246     		mov	r2, r0
 3950 008e 0B46     		mov	r3, r1
 3951 0090 4046     		mov	r0, r8
 3952 0092 4946     		mov	r1, r9
 3953 0094 FFF7FEFF 		bl	__aeabi_dmul
 3954              	.LVL396:
 3955 0098 8046     		mov	r8, r0
 3956 009a 8946     		mov	r9, r1
ARM GAS  /tmp/ccU79PPY.s 			page 101


 3957 009c C4E90089 		strd	r8, [r4]
 410:Src/Eagle_TRT.c **** 	imu->z = imu->z * ((float)imu->scale / 32768);
 3958              		.loc 1 410 0
 3959 00a0 D4E90223 		ldrd	r2, [r4, #8]
 3960 00a4 3046     		mov	r0, r6
 3961 00a6 3946     		mov	r1, r7
 3962 00a8 FFF7FEFF 		bl	__aeabi_dmul
 3963              	.LVL397:
 3964 00ac C4E90201 		strd	r0, [r4, #8]
 411:Src/Eagle_TRT.c **** 
 3965              		.loc 1 411 0
 3966 00b0 D4E90423 		ldrd	r2, [r4, #16]
 3967 00b4 3046     		mov	r0, r6
 3968 00b6 3946     		mov	r1, r7
 3969 00b8 FFF7FEFF 		bl	__aeabi_dmul
 3970              	.LVL398:
 3971 00bc C4E90401 		strd	r0, [r4, #16]
 413:Src/Eagle_TRT.c **** 	shift_array(imu->y_array, 10, imu->y);
 3972              		.loc 1 413 0
 3973 00c0 04F13007 		add	r7, r4, #48
 3974 00c4 49EC108B 		vmov	d0, r8, r9
 3975 00c8 0A21     		movs	r1, #10
 3976 00ca 3846     		mov	r0, r7
 3977 00cc FFF7FEFF 		bl	shift_array
 3978              	.LVL399:
 414:Src/Eagle_TRT.c **** 	shift_array(imu->z_array, 10, imu->z);
 3979              		.loc 1 414 0
 3980 00d0 04F1D006 		add	r6, r4, #208
 3981 00d4 94ED020B 		vldr.64	d0, [r4, #8]
 3982 00d8 0A21     		movs	r1, #10
 3983 00da 3046     		mov	r0, r6
 3984 00dc FFF7FEFF 		bl	shift_array
 3985              	.LVL400:
 415:Src/Eagle_TRT.c **** 
 3986              		.loc 1 415 0
 3987 00e0 04F5B875 		add	r5, r4, #368
 3988 00e4 94ED040B 		vldr.64	d0, [r4, #16]
 3989 00e8 0A21     		movs	r1, #10
 3990 00ea 2846     		mov	r0, r5
 3991 00ec FFF7FEFF 		bl	shift_array
 3992              	.LVL401:
 417:Src/Eagle_TRT.c **** 	imu->y = dynamic_average(imu->y_array, 10);
 3993              		.loc 1 417 0
 3994 00f0 0A21     		movs	r1, #10
 3995 00f2 3846     		mov	r0, r7
 3996 00f4 FFF7FEFF 		bl	dynamic_average
 3997              	.LVL402:
 3998 00f8 59EC108B 		vmov	r8, r9, d0
 3999 00fc 84ED000B 		vstr.64	d0, [r4]
 418:Src/Eagle_TRT.c **** 	imu->z = dynamic_average(imu->z_array, 10);
 4000              		.loc 1 418 0
 4001 0100 0A21     		movs	r1, #10
 4002 0102 3046     		mov	r0, r6
 4003 0104 FFF7FEFF 		bl	dynamic_average
 4004              	.LVL403:
 4005 0108 57EC106B 		vmov	r6, r7, d0
 4006 010c 84ED020B 		vstr.64	d0, [r4, #8]
ARM GAS  /tmp/ccU79PPY.s 			page 102


 419:Src/Eagle_TRT.c **** 
 4007              		.loc 1 419 0
 4008 0110 0A21     		movs	r1, #10
 4009 0112 2846     		mov	r0, r5
 4010 0114 FFF7FEFF 		bl	dynamic_average
 4011              	.LVL404:
 4012 0118 5BEC10AB 		vmov	r10, fp, d0
 421:Src/Eagle_TRT.c **** 	imu->y -= imu->y_offset;
 4013              		.loc 1 421 0
 4014 011c D4E90623 		ldrd	r2, [r4, #24]
 4015 0120 4046     		mov	r0, r8
 4016 0122 4946     		mov	r1, r9
 4017 0124 FFF7FEFF 		bl	__aeabi_dsub
 4018              	.LVL405:
 4019 0128 C4E90001 		strd	r0, [r4]
 422:Src/Eagle_TRT.c **** 	imu->z -= imu->z_offset;
 4020              		.loc 1 422 0
 4021 012c D4E90823 		ldrd	r2, [r4, #32]
 4022 0130 3046     		mov	r0, r6
 4023 0132 3946     		mov	r1, r7
 4024 0134 FFF7FEFF 		bl	__aeabi_dsub
 4025              	.LVL406:
 4026 0138 C4E90201 		strd	r0, [r4, #8]
 423:Src/Eagle_TRT.c **** }
 4027              		.loc 1 423 0
 4028 013c D4E90A23 		ldrd	r2, [r4, #40]
 4029 0140 5046     		mov	r0, r10
 4030 0142 5946     		mov	r1, fp
 4031 0144 FFF7FEFF 		bl	__aeabi_dsub
 4032              	.LVL407:
 4033 0148 C4E90401 		strd	r0, [r4, #16]
 4034 014c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4035              	.LVL408:
 4036              	.L306:
 4037              		.align	2
 4038              	.L305:
 4039 0150 0000E040 		.word	1088421888
 4040 0154 0000F040 		.word	1089470464
 4041 0158 00000038 		.word	939524096
 4042              		.cfi_endproc
 4043              	.LFE137:
 4045              		.global	__aeabi_dcmple
 4046              		.section	.text.get_speed_encoder,"ax",%progbits
 4047              		.align	1
 4048              		.global	get_speed_encoder
 4049              		.syntax unified
 4050              		.thumb
 4051              		.thumb_func
 4052              		.fpu fpv4-sp-d16
 4054              	get_speed_encoder:
 4055              	.LFB154:
1075:Src/Eagle_TRT.c **** 
 4056              		.loc 1 1075 0
 4057              		.cfi_startproc
 4058              		@ args = 0, pretend = 0, frame = 0
 4059              		@ frame_needed = 0, uses_anonymous_args = 0
 4060              	.LVL409:
ARM GAS  /tmp/ccU79PPY.s 			page 103


 4061 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4062              	.LCFI52:
 4063              		.cfi_def_cfa_offset 40
 4064              		.cfi_offset 3, -40
 4065              		.cfi_offset 4, -36
 4066              		.cfi_offset 5, -32
 4067              		.cfi_offset 6, -28
 4068              		.cfi_offset 7, -24
 4069              		.cfi_offset 8, -20
 4070              		.cfi_offset 9, -16
 4071              		.cfi_offset 10, -12
 4072              		.cfi_offset 11, -8
 4073              		.cfi_offset 14, -4
 4074 0004 2DED048B 		vpush.64	{d8, d9}
 4075              	.LCFI53:
 4076              		.cfi_def_cfa_offset 56
 4077              		.cfi_offset 80, -56
 4078              		.cfi_offset 81, -52
 4079              		.cfi_offset 82, -48
 4080              		.cfi_offset 83, -44
 4081 0008 0446     		mov	r4, r0
 4082              	.LVL410:
1080:Src/Eagle_TRT.c **** 	{
 4083              		.loc 1 1080 0
 4084 000a C36C     		ldr	r3, [r0, #76]
 4085 000c 012B     		cmp	r3, #1
 4086 000e 00F01D81 		beq	.L343
1086:Src/Eagle_TRT.c **** 	}
 4087              		.loc 1 1086 0
 4088 0012 D0E92023 		ldrd	r2, [r0, #128]
 4089 0016 D0E91E01 		ldrd	r0, [r0, #120]
 4090              	.LVL411:
 4091 001a FFF7FEFF 		bl	__aeabi_dsub
 4092              	.LVL412:
 4093 001e C4E92601 		strd	r0, [r4, #152]
 4094              	.L309:
1090:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
 4095              		.loc 1 1090 0
 4096 0022 94ED1E9B 		vldr.64	d9, [r4, #120]
 4097 0026 D4ED187A 		vldr.32	s15, [r4, #96]
 4098 002a 37EEA78A 		vadd.f32	s16, s15, s15
 4099 002e 18EE100A 		vmov	r0, s16
 4100 0032 FFF7FEFF 		bl	__aeabi_f2d
 4101              	.LVL413:
 4102 0036 0646     		mov	r6, r0
 4103 0038 0F46     		mov	r7, r1
 4104 003a 0246     		mov	r2, r0
 4105 003c 0B46     		mov	r3, r1
 4106 003e 51EC190B 		vmov	r0, r1, d9
 4107 0042 FFF7FEFF 		bl	__aeabi_dcmplt
 4108              	.LVL414:
 4109 0046 80B1     		cbz	r0, .L310
1090:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
 4110              		.loc 1 1090 0 is_stmt 0 discriminator 1
 4111 0048 D4E92089 		ldrd	r8, [r4, #128]
 4112 004c DFED907A 		vldr.32	s15, .L345+32
 4113 0050 77EEC87A 		vsub.f32	s15, s15, s16
ARM GAS  /tmp/ccU79PPY.s 			page 104


 4114 0054 17EE900A 		vmov	r0, s15
 4115 0058 FFF7FEFF 		bl	__aeabi_f2d
 4116              	.LVL415:
 4117 005c 0246     		mov	r2, r0
 4118 005e 0B46     		mov	r3, r1
 4119 0060 4046     		mov	r0, r8
 4120 0062 4946     		mov	r1, r9
 4121 0064 FFF7FEFF 		bl	__aeabi_dcmpgt
 4122              	.LVL416:
 4123 0068 A8B9     		cbnz	r0, .L312
 4124              	.L310:
1090:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
 4125              		.loc 1 1090 0 discriminator 3
 4126 006a D4E92023 		ldrd	r2, [r4, #128]
 4127 006e 3046     		mov	r0, r6
 4128 0070 3946     		mov	r1, r7
 4129 0072 FFF7FEFF 		bl	__aeabi_dcmpgt
 4130              	.LVL417:
 4131 0076 08B3     		cbz	r0, .L313
1091:Src/Eagle_TRT.c **** 	{
 4132              		.loc 1 1091 0 is_stmt 1
 4133 0078 DFED857A 		vldr.32	s15, .L345+32
 4134 007c 77EEC87A 		vsub.f32	s15, s15, s16
 4135 0080 17EE900A 		vmov	r0, s15
 4136 0084 FFF7FEFF 		bl	__aeabi_f2d
 4137              	.LVL418:
 4138 0088 0246     		mov	r2, r0
 4139 008a 0B46     		mov	r3, r1
 4140 008c 51EC190B 		vmov	r0, r1, d9
 4141 0090 FFF7FEFF 		bl	__aeabi_dcmpgt
 4142              	.LVL419:
 4143 0094 90B1     		cbz	r0, .L313
 4144              	.L312:
1093:Src/Eagle_TRT.c **** 		{
 4145              		.loc 1 1093 0
 4146 0096 D4E92667 		ldrd	r6, [r4, #152]
 4147 009a 0022     		movs	r2, #0
 4148 009c 0023     		movs	r3, #0
 4149 009e 3046     		mov	r0, r6
 4150 00a0 3946     		mov	r1, r7
 4151 00a2 FFF7FEFF 		bl	__aeabi_dcmplt
 4152              	.LVL420:
 4153 00a6 0028     		cmp	r0, #0
 4154 00a8 40F0D980 		bne	.L344
1099:Src/Eagle_TRT.c **** 		}
 4155              		.loc 1 1099 0
 4156 00ac 3246     		mov	r2, r6
 4157 00ae 3B46     		mov	r3, r7
 4158 00b0 0020     		movs	r0, #0
 4159 00b2 7849     		ldr	r1, .L345+36
 4160 00b4 FFF7FEFF 		bl	__aeabi_dsub
 4161              	.LVL421:
 4162 00b8 C4E92601 		strd	r0, [r4, #152]
 4163              	.L313:
1104:Src/Eagle_TRT.c **** 	speed *= enc->frequency;
 4164              		.loc 1 1104 0
 4165 00bc 0022     		movs	r2, #0
ARM GAS  /tmp/ccU79PPY.s 			page 105


 4166 00be 754B     		ldr	r3, .L345+36
 4167 00c0 D4E92601 		ldrd	r0, [r4, #152]
 4168 00c4 FFF7FEFF 		bl	__aeabi_ddiv
 4169              	.LVL422:
 4170 00c8 69A3     		adr	r3, .L345
 4171 00ca D3E90023 		ldrd	r2, [r3]
 4172 00ce FFF7FEFF 		bl	__aeabi_dmul
 4173              	.LVL423:
 4174 00d2 8046     		mov	r8, r0
 4175 00d4 8946     		mov	r9, r1
 4176 00d6 E06D     		ldr	r0, [r4, #92]	@ float
 4177 00d8 FFF7FEFF 		bl	__aeabi_f2d
 4178              	.LVL424:
 4179 00dc 0646     		mov	r6, r0
 4180 00de 0F46     		mov	r7, r1
 4181 00e0 0246     		mov	r2, r0
 4182 00e2 0B46     		mov	r3, r1
 4183 00e4 4046     		mov	r0, r8
 4184 00e6 4946     		mov	r1, r9
 4185 00e8 FFF7FEFF 		bl	__aeabi_dmul
 4186              	.LVL425:
 4187 00ec 8046     		mov	r8, r0
 4188 00ee 8946     		mov	r9, r1
 4189              	.LVL426:
1105:Src/Eagle_TRT.c **** 	speed *= 3.6;
 4190              		.loc 1 1105 0
 4191 00f0 606E     		ldr	r0, [r4, #100]	@ float
 4192 00f2 FFF7FEFF 		bl	__aeabi_f2d
 4193              	.LVL427:
 4194 00f6 0246     		mov	r2, r0
 4195 00f8 0B46     		mov	r3, r1
 4196 00fa 4046     		mov	r0, r8
 4197 00fc 4946     		mov	r1, r9
 4198 00fe FFF7FEFF 		bl	__aeabi_dmul
 4199              	.LVL428:
1106:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
 4200              		.loc 1 1106 0
 4201 0102 5DA3     		adr	r3, .L345+8
 4202 0104 D3E90023 		ldrd	r2, [r3]
 4203 0108 FFF7FEFF 		bl	__aeabi_dmul
 4204              	.LVL429:
1107:Src/Eagle_TRT.c **** 
 4205              		.loc 1 1107 0
 4206 010c 0022     		movs	r2, #0
 4207 010e 624B     		ldr	r3, .L345+40
 4208 0110 FFF7FEFF 		bl	__aeabi_dmul
 4209              	.LVL430:
 4210 0114 41EC100B 		vmov	d0, r0, r1
 4211 0118 FFF7FEFF 		bl	round
 4212              	.LVL431:
 4213 011c 0022     		movs	r2, #0
 4214 011e 5E4B     		ldr	r3, .L345+40
 4215 0120 51EC100B 		vmov	r0, r1, d0
 4216 0124 FFF7FEFF 		bl	__aeabi_ddiv
 4217              	.LVL432:
 4218 0128 41EC180B 		vmov	d8, r0, r1
 4219              	.LVL433:
ARM GAS  /tmp/ccU79PPY.s 			page 106


1113:Src/Eagle_TRT.c **** 	{
 4220              		.loc 1 1113 0
 4221 012c D4E9F089 		ldrd	r8, [r4, #960]
 4222 0130 0022     		movs	r2, #0
 4223 0132 5A4B     		ldr	r3, .L345+44
 4224 0134 4046     		mov	r0, r8
 4225              	.LVL434:
 4226 0136 4946     		mov	r1, r9
 4227 0138 FFF7FEFF 		bl	__aeabi_dcmplt
 4228              	.LVL435:
 4229 013c 38B9     		cbnz	r0, .L318
1113:Src/Eagle_TRT.c **** 	{
 4230              		.loc 1 1113 0 is_stmt 0 discriminator 1
 4231 013e 0022     		movs	r2, #0
 4232 0140 574B     		ldr	r3, .L345+48
 4233 0142 4046     		mov	r0, r8
 4234 0144 4946     		mov	r1, r9
 4235 0146 FFF7FEFF 		bl	__aeabi_dcmpgt
 4236              	.LVL436:
 4237 014a 0028     		cmp	r0, #0
 4238 014c 67D0     		beq	.L319
 4239              	.L318:
1115:Src/Eagle_TRT.c **** 		{
 4240              		.loc 1 1115 0 is_stmt 1
 4241 014e D4E922AB 		ldrd	r10, [r4, #136]
 4242 0152 4BA3     		adr	r3, .L345+16
 4243 0154 D3E90023 		ldrd	r2, [r3]
 4244 0158 5046     		mov	r0, r10
 4245 015a 5946     		mov	r1, fp
 4246 015c FFF7FEFF 		bl	__aeabi_dcmple
 4247              	.LVL437:
 4248 0160 50B3     		cbz	r0, .L321
1115:Src/Eagle_TRT.c **** 		{
 4249              		.loc 1 1115 0 is_stmt 0 discriminator 1
 4250 0162 0022     		movs	r2, #0
 4251 0164 4F4B     		ldr	r3, .L345+52
 4252 0166 5046     		mov	r0, r10
 4253 0168 5946     		mov	r1, fp
 4254 016a FFF7FEFF 		bl	__aeabi_dcmpgt
 4255              	.LVL438:
 4256 016e 18B3     		cbz	r0, .L321
1115:Src/Eagle_TRT.c **** 		{
 4257              		.loc 1 1115 0 discriminator 2
 4258 0170 0022     		movs	r2, #0
 4259 0172 4D4B     		ldr	r3, .L345+56
 4260 0174 51EC190B 		vmov	r0, r1, d9
 4261 0178 FFF7FEFF 		bl	__aeabi_dcmpge
 4262              	.LVL439:
 4263 017c E0B1     		cbz	r0, .L321
1115:Src/Eagle_TRT.c **** 		{
 4264              		.loc 1 1115 0 discriminator 3
 4265 017e 0022     		movs	r2, #0
 4266 0180 4A4B     		ldr	r3, .L345+60
 4267 0182 51EC190B 		vmov	r0, r1, d9
 4268 0186 FFF7FEFF 		bl	__aeabi_dcmplt
 4269              	.LVL440:
 4270 018a A8B1     		cbz	r0, .L321
ARM GAS  /tmp/ccU79PPY.s 			page 107


1117:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
 4271              		.loc 1 1117 0 is_stmt 1
 4272 018c 236D     		ldr	r3, [r4, #80]
 4273 018e 0133     		adds	r3, r3, #1
 4274 0190 2365     		str	r3, [r4, #80]
1118:Src/Eagle_TRT.c **** 		}
 4275              		.loc 1 1118 0
 4276 0192 3DA3     		adr	r3, .L345+24
 4277 0194 D3E90023 		ldrd	r2, [r3]
 4278 0198 3046     		mov	r0, r6
 4279 019a 3946     		mov	r1, r7
 4280 019c FFF7FEFF 		bl	__aeabi_dmul
 4281              	.LVL441:
 4282 01a0 8046     		mov	r8, r0
 4283 01a2 8946     		mov	r9, r1
 4284 01a4 606D     		ldr	r0, [r4, #84]	@ float
 4285 01a6 FFF7FEFF 		bl	__aeabi_f2d
 4286              	.LVL442:
 4287 01aa 4246     		mov	r2, r8
 4288 01ac 4B46     		mov	r3, r9
 4289 01ae FFF7FEFF 		bl	__aeabi_dadd
 4290              	.LVL443:
 4291 01b2 FFF7FEFF 		bl	__aeabi_d2f
 4292              	.LVL444:
 4293 01b6 6065     		str	r0, [r4, #84]	@ float
 4294              	.L321:
1120:Src/Eagle_TRT.c **** 		{
 4295              		.loc 1 1120 0
 4296 01b8 0022     		movs	r2, #0
 4297 01ba 3B4B     		ldr	r3, .L345+56
 4298 01bc 5046     		mov	r0, r10
 4299 01be 5946     		mov	r1, fp
 4300 01c0 FFF7FEFF 		bl	__aeabi_dcmpge
 4301              	.LVL445:
 4302 01c4 58B3     		cbz	r0, .L319
1120:Src/Eagle_TRT.c **** 		{
 4303              		.loc 1 1120 0 is_stmt 0 discriminator 1
 4304 01c6 0022     		movs	r2, #0
 4305 01c8 384B     		ldr	r3, .L345+60
 4306 01ca 5046     		mov	r0, r10
 4307 01cc 5946     		mov	r1, fp
 4308 01ce FFF7FEFF 		bl	__aeabi_dcmplt
 4309              	.LVL446:
 4310 01d2 20B3     		cbz	r0, .L319
1120:Src/Eagle_TRT.c **** 		{
 4311              		.loc 1 1120 0 discriminator 2
 4312 01d4 2AA3     		adr	r3, .L345+16
 4313 01d6 D3E90023 		ldrd	r2, [r3]
 4314 01da 51EC190B 		vmov	r0, r1, d9
 4315 01de FFF7FEFF 		bl	__aeabi_dcmple
 4316              	.LVL447:
 4317 01e2 E0B1     		cbz	r0, .L319
1120:Src/Eagle_TRT.c **** 		{
 4318              		.loc 1 1120 0 discriminator 3
 4319 01e4 0022     		movs	r2, #0
 4320 01e6 2F4B     		ldr	r3, .L345+52
 4321 01e8 51EC190B 		vmov	r0, r1, d9
ARM GAS  /tmp/ccU79PPY.s 			page 108


 4322 01ec FFF7FEFF 		bl	__aeabi_dcmpgt
 4323              	.LVL448:
 4324 01f0 A8B1     		cbz	r0, .L319
1122:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
 4325              		.loc 1 1122 0 is_stmt 1
 4326 01f2 236D     		ldr	r3, [r4, #80]
 4327 01f4 0133     		adds	r3, r3, #1
 4328 01f6 2365     		str	r3, [r4, #80]
1123:Src/Eagle_TRT.c **** 		}
 4329              		.loc 1 1123 0
 4330 01f8 23A3     		adr	r3, .L345+24
 4331 01fa D3E90023 		ldrd	r2, [r3]
 4332 01fe 3046     		mov	r0, r6
 4333 0200 3946     		mov	r1, r7
 4334 0202 FFF7FEFF 		bl	__aeabi_dmul
 4335              	.LVL449:
 4336 0206 0646     		mov	r6, r0
 4337 0208 0F46     		mov	r7, r1
 4338 020a 606D     		ldr	r0, [r4, #84]	@ float
 4339 020c FFF7FEFF 		bl	__aeabi_f2d
 4340              	.LVL450:
 4341 0210 3246     		mov	r2, r6
 4342 0212 3B46     		mov	r3, r7
 4343 0214 FFF7FEFF 		bl	__aeabi_dadd
 4344              	.LVL451:
 4345 0218 FFF7FEFF 		bl	__aeabi_d2f
 4346              	.LVL452:
 4347 021c 6065     		str	r0, [r4, #84]	@ float
 4348              	.L319:
1128:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 10);
 4349              		.loc 1 1128 0
 4350 021e 04F1A005 		add	r5, r4, #160
 4351 0222 B0EE480A 		vmov.f32	s0, s16
 4352 0226 F0EE680A 		vmov.f32	s1, s17
 4353 022a 0A21     		movs	r1, #10
 4354 022c 2846     		mov	r0, r5
 4355 022e FFF7FEFF 		bl	shift_array
 4356              	.LVL453:
1129:Src/Eagle_TRT.c **** 
 4357              		.loc 1 1129 0
 4358 0232 0A21     		movs	r1, #10
 4359 0234 2846     		mov	r0, r5
 4360 0236 FFF7FEFF 		bl	dynamic_average
 4361              	.LVL454:
 4362 023a 84EDF00B 		vstr.64	d0, [r4, #960]
1132:Src/Eagle_TRT.c **** }
 4363              		.loc 1 1132 0
 4364 023e 2046     		mov	r0, r4
 4365 0240 FFF7FEFF 		bl	enc_calculate_optimal_frequency
 4366              	.LVL455:
1133:Src/Eagle_TRT.c **** 
 4367              		.loc 1 1133 0
 4368 0244 BDEC048B 		vldm	sp!, {d8-d9}
 4369              	.LCFI54:
 4370              		.cfi_remember_state
 4371              		.cfi_restore 82
 4372              		.cfi_restore 83
ARM GAS  /tmp/ccU79PPY.s 			page 109


 4373              		.cfi_restore 80
 4374              		.cfi_restore 81
 4375              		.cfi_def_cfa_offset 40
 4376              	.LVL456:
 4377 0248 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4378              	.LVL457:
 4379              	.L343:
 4380              	.LCFI55:
 4381              		.cfi_restore_state
1082:Src/Eagle_TRT.c **** 	}
 4382              		.loc 1 1082 0
 4383 024c D0E91E23 		ldrd	r2, [r0, #120]
 4384 0250 D0E92001 		ldrd	r0, [r0, #128]
 4385              	.LVL458:
 4386 0254 FFF7FEFF 		bl	__aeabi_dsub
 4387              	.LVL459:
 4388 0258 C4E92601 		strd	r0, [r4, #152]
 4389 025c E1E6     		b	.L309
 4390              	.L344:
1095:Src/Eagle_TRT.c **** 		}
 4391              		.loc 1 1095 0
 4392 025e 0022     		movs	r2, #0
 4393 0260 0C4B     		ldr	r3, .L345+36
 4394 0262 3046     		mov	r0, r6
 4395 0264 3946     		mov	r1, r7
 4396 0266 FFF7FEFF 		bl	__aeabi_dadd
 4397              	.LVL460:
 4398 026a C4E92601 		strd	r0, [r4, #152]
 4399 026e 25E7     		b	.L313
 4400              	.L346:
 4401              		.align	3
 4402              	.L345:
 4403 0270 6F1283C0 		.word	3229815407
 4404 0274 CA210940 		.word	1074340298
 4405 0278 CDCCCCCC 		.word	3435973837
 4406 027c CCCC0C40 		.word	1074580684
 4407 0280 00000000 		.word	0
 4408 0284 00907640 		.word	1081511936
 4409 0288 1F85EB51 		.word	1374389535
 4410 028c B81E0940 		.word	1074339512
 4411 0290 0000B443 		.word	1135869952
 4412 0294 00807640 		.word	1081507840
 4413 0298 00408F40 		.word	1083129856
 4414 029c 0000E0BF 		.word	-1075838976
 4415 02a0 0000E03F 		.word	1071644672
 4416 02a4 00407040 		.word	1081098240
 4417 02a8 0000F0BF 		.word	-1074790400
 4418 02ac 00005940 		.word	1079574528
 4419              		.cfi_endproc
 4420              	.LFE154:
 4422              		.section	.text.encoder_tim_interrupt,"ax",%progbits
 4423              		.align	1
 4424              		.global	encoder_tim_interrupt
 4425              		.syntax unified
 4426              		.thumb
 4427              		.thumb_func
 4428              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccU79PPY.s 			page 110


 4430              	encoder_tim_interrupt:
 4431              	.LFB153:
1026:Src/Eagle_TRT.c **** 
 4432              		.loc 1 1026 0
 4433              		.cfi_startproc
 4434              		@ args = 0, pretend = 0, frame = 0
 4435              		@ frame_needed = 0, uses_anonymous_args = 0
 4436              	.LVL461:
 4437 0000 D0B5     		push	{r4, r6, r7, lr}
 4438              	.LCFI56:
 4439              		.cfi_def_cfa_offset 16
 4440              		.cfi_offset 4, -16
 4441              		.cfi_offset 6, -12
 4442              		.cfi_offset 7, -8
 4443              		.cfi_offset 14, -4
 4444 0002 0446     		mov	r4, r0
1028:Src/Eagle_TRT.c **** 	{
 4445              		.loc 1 1028 0
 4446 0004 8368     		ldr	r3, [r0, #8]
 4447 0006 4BB1     		cbz	r3, .L358
1035:Src/Eagle_TRT.c **** 	{
 4448              		.loc 1 1035 0
 4449 0008 012B     		cmp	r3, #1
 4450 000a 19D0     		beq	.L359
1042:Src/Eagle_TRT.c **** 	{
 4451              		.loc 1 1042 0
 4452 000c 022B     		cmp	r3, #2
 4453 000e 29D0     		beq	.L360
 4454              	.LVL462:
 4455              	.L349:
1060:Src/Eagle_TRT.c **** 		enc->interrupt_flag = 0;
 4456              		.loc 1 1060 0
 4457 0010 A368     		ldr	r3, [r4, #8]
 4458 0012 012B     		cmp	r3, #1
 4459 0014 3DDD     		ble	.L353
1061:Src/Eagle_TRT.c **** 	}
 4460              		.loc 1 1061 0
 4461 0016 0023     		movs	r3, #0
 4462 0018 A360     		str	r3, [r4, #8]
 4463 001a D0BD     		pop	{r4, r6, r7, pc}
 4464              	.LVL463:
 4465              	.L358:
1031:Src/Eagle_TRT.c **** 		read_SSI(enc);
 4466              		.loc 1 1031 0
 4467 001c D0E91E23 		ldrd	r2, [r0, #120]
 4468 0020 C0E92223 		strd	r2, [r0, #136]
1032:Src/Eagle_TRT.c **** 		enc->angle0 = enc->converted_data / 45.5055;
 4469              		.loc 1 1032 0
 4470 0024 FFF7FEFF 		bl	read_SSI
 4471              	.LVL464:
1033:Src/Eagle_TRT.c **** 	}
 4472              		.loc 1 1033 0
 4473 0028 D4F8C803 		ldr	r0, [r4, #968]
 4474 002c FFF7FEFF 		bl	__aeabi_i2d
 4475              	.LVL465:
 4476 0030 19A3     		adr	r3, .L362
 4477 0032 D3E90023 		ldrd	r2, [r3]
ARM GAS  /tmp/ccU79PPY.s 			page 111


 4478 0036 FFF7FEFF 		bl	__aeabi_ddiv
 4479              	.LVL466:
 4480 003a C4E91E01 		strd	r0, [r4, #120]
 4481 003e E7E7     		b	.L349
 4482              	.LVL467:
 4483              	.L359:
1038:Src/Eagle_TRT.c **** 		read_SSI(enc);
 4484              		.loc 1 1038 0
 4485 0040 D0E92023 		ldrd	r2, [r0, #128]
 4486 0044 C0E92423 		strd	r2, [r0, #144]
1039:Src/Eagle_TRT.c **** 		enc->angle1 = enc->converted_data / 45.5055;
 4487              		.loc 1 1039 0
 4488 0048 FFF7FEFF 		bl	read_SSI
 4489              	.LVL468:
1040:Src/Eagle_TRT.c **** 	}
 4490              		.loc 1 1040 0
 4491 004c D4F8C803 		ldr	r0, [r4, #968]
 4492 0050 FFF7FEFF 		bl	__aeabi_i2d
 4493              	.LVL469:
 4494 0054 10A3     		adr	r3, .L362
 4495 0056 D3E90023 		ldrd	r2, [r3]
 4496 005a FFF7FEFF 		bl	__aeabi_ddiv
 4497              	.LVL470:
 4498 005e C4E92001 		strd	r0, [r4, #128]
 4499 0062 D5E7     		b	.L349
 4500              	.LVL471:
 4501              	.L360:
1045:Src/Eagle_TRT.c **** 
 4502              		.loc 1 1045 0
 4503 0064 FFF7FEFF 		bl	get_speed_encoder
 4504              	.LVL472:
1048:Src/Eagle_TRT.c **** 		{
 4505              		.loc 1 1048 0
 4506 0068 D4E9F067 		ldrd	r6, [r4, #960]
 4507 006c 0022     		movs	r2, #0
 4508 006e 0023     		movs	r3, #0
 4509 0070 3046     		mov	r0, r6
 4510 0072 3946     		mov	r1, r7
 4511 0074 FFF7FEFF 		bl	__aeabi_dcmplt
 4512              	.LVL473:
 4513 0078 10B9     		cbnz	r0, .L361
1055:Src/Eagle_TRT.c **** 		}
 4514              		.loc 1 1055 0
 4515 007a 0023     		movs	r3, #0
 4516 007c A365     		str	r3, [r4, #88]
 4517 007e C7E7     		b	.L349
 4518              	.L361:
1050:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
 4519              		.loc 1 1050 0
 4520 0080 C4F8C063 		str	r6, [r4, #960]
 4521 0084 07F10043 		add	r3, r7, #-2147483648
 4522 0088 C4F8C433 		str	r3, [r4, #964]
1051:Src/Eagle_TRT.c **** 		}
 4523              		.loc 1 1051 0
 4524 008c 0123     		movs	r3, #1
 4525 008e A365     		str	r3, [r4, #88]
 4526 0090 BEE7     		b	.L349
ARM GAS  /tmp/ccU79PPY.s 			page 112


 4527              	.L353:
1064:Src/Eagle_TRT.c **** 	}
 4528              		.loc 1 1064 0
 4529 0092 0133     		adds	r3, r3, #1
 4530 0094 A360     		str	r3, [r4, #8]
 4531 0096 D0BD     		pop	{r4, r6, r7, pc}
 4532              	.LVL474:
 4533              	.L363:
 4534              		.align	3
 4535              	.L362:
 4536 0098 62105839 		.word	962072674
 4537 009c B4C04640 		.word	1078378676
 4538              		.cfi_endproc
 4539              	.LFE153:
 4541              		.comm	pot_3,24,4
 4542              		.comm	pot_2,24,4
 4543              		.comm	pot_1,24,4
 4544              		.comm	enc,1000,8
 4545              		.comm	buffer_gps,2,4
 4546              		.comm	data_string_gps,1,1
 4547              		.comm	cont_comma,4,4
 4548              		.comm	cont_string,4,4
 4549              		.comm	string_gps,100,4
 4550              		.global	start_string_gps
 4551              		.comm	huart_GPS,4,4
 4552              		.global	print_q
 4553              		.comm	can,28,4
 4554              		.comm	gyro,568,8
 4555              		.comm	accel,568,8
 4556              		.global	OUT_Z_H_A_ADD
 4557              		.global	OUT_Z_L_A_ADD
 4558              		.global	OUT_Y_H_A_ADD
 4559              		.global	OUT_Y_L_A_ADD
 4560              		.global	OUT_X_H_A_ADD
 4561              		.global	OUT_X_L_A_ADD
 4562              		.global	OUT_Z_H_G_ADD
 4563              		.global	OUT_Z_L_G_ADD
 4564              		.global	OUT_Y_H_G_ADD
 4565              		.global	OUT_Y_L_G_ADD
 4566              		.global	OUT_X_H_G_ADD
 4567              		.global	OUT_X_L_G_ADD
 4568              		.global	SCL_M_12
 4569              		.global	SCL_M_8
 4570              		.global	SCL_M_4
 4571              		.global	SCL_M_2
 4572              		.global	CTRL_REG6_XM
 4573              		.global	SCL_A_16
 4574              		.global	SCL_A_8
 4575              		.global	SCL_A_6
 4576              		.global	SCL_A_4
 4577              		.global	SCL_A_2
 4578              		.global	CTRL_REG2_XM
 4579              		.global	SCL_G_2000
 4580              		.global	SCL_G_1000
 4581              		.global	SCL_G_500
 4582              		.global	SCL_G_245
 4583              		.global	CTRL_REG4_G
ARM GAS  /tmp/ccU79PPY.s 			page 113


 4584              		.global	CTRL_REG7_XM_VAL
 4585              		.global	CTRL_REG7_XM_ADD
 4586              		.global	CTRL_REG6_XM_VAL
 4587              		.global	CTRL_REG6_XM_ADD
 4588              		.global	CTRL_REG5_XM_VAL
 4589              		.global	CTRL_REG5_XM_ADD
 4590              		.global	CTRL_REG2_XM_VAL
 4591              		.global	CTRL_REG2_XM_ADD
 4592              		.global	CTRL_REG1_XM_VAL
 4593              		.global	CTRL_REG1_XM_ADD
 4594              		.global	CTRL_REG4_G_VAL
 4595              		.global	CTRL_REG4_G_ADD
 4596              		.global	CTRL_REG1_G_VAL
 4597              		.global	CTRL_REG1_G_ADD
 4598              		.comm	WHO_AM_I_XM_VAL,1,1
 4599              		.global	WHO_AM_I_XM
 4600              		.comm	WHO_AM_I_G_VAL,1,1
 4601              		.global	WHO_AM_I_G
 4602              		.global	ZERO
 4603              		.section	.bss.CTRL_REG7_XM_VAL,"aw",%nobits
 4604              		.set	.LANCHOR9,. + 0
 4607              	CTRL_REG7_XM_VAL:
 4608 0000 00       		.space	1
 4609              		.section	.bss.SCL_A_2,"aw",%nobits
 4610              		.set	.LANCHOR16,. + 0
 4613              	SCL_A_2:
 4614 0000 00       		.space	1
 4615              		.section	.bss.SCL_G_245,"aw",%nobits
 4616              		.set	.LANCHOR11,. + 0
 4619              	SCL_G_245:
 4620 0000 00       		.space	1
 4621              		.section	.bss.SCL_M_2,"aw",%nobits
 4624              	SCL_M_2:
 4625 0000 00       		.space	1
 4626              		.section	.bss.ZERO,"aw",%nobits
 4629              	ZERO:
 4630 0000 00       		.space	1
 4631              		.section	.bss.print_q,"aw",%nobits
 4632              		.align	2
 4633              		.set	.LANCHOR35,. + 0
 4636              	print_q:
 4637 0000 00000000 		.space	224
 4637      00000000 
 4637      00000000 
 4637      00000000 
 4637      00000000 
 4638              		.section	.bss.start_string_gps,"aw",%nobits
 4639              		.align	2
 4640              		.set	.LANCHOR36,. + 0
 4643              	start_string_gps:
 4644 0000 00000000 		.space	4
 4645              		.section	.data.CTRL_REG1_G_ADD,"aw",%progbits
 4646              		.set	.LANCHOR0,. + 0
 4649              	CTRL_REG1_G_ADD:
 4650 0000 20       		.byte	32
 4651              		.section	.data.CTRL_REG1_G_VAL,"aw",%progbits
 4652              		.set	.LANCHOR1,. + 0
ARM GAS  /tmp/ccU79PPY.s 			page 114


 4655              	CTRL_REG1_G_VAL:
 4656 0000 0F       		.byte	15
 4657              		.section	.data.CTRL_REG1_XM_ADD,"aw",%progbits
 4658              		.set	.LANCHOR2,. + 0
 4661              	CTRL_REG1_XM_ADD:
 4662 0000 20       		.byte	32
 4663              		.section	.data.CTRL_REG1_XM_VAL,"aw",%progbits
 4664              		.set	.LANCHOR3,. + 0
 4667              	CTRL_REG1_XM_VAL:
 4668 0000 A7       		.byte	-89
 4669              		.section	.data.CTRL_REG2_XM,"aw",%progbits
 4670              		.set	.LANCHOR15,. + 0
 4673              	CTRL_REG2_XM:
 4674 0000 21       		.byte	33
 4675              		.section	.data.CTRL_REG2_XM_ADD,"aw",%progbits
 4678              	CTRL_REG2_XM_ADD:
 4679 0000 21       		.byte	33
 4680              		.section	.data.CTRL_REG2_XM_VAL,"aw",%progbits
 4683              	CTRL_REG2_XM_VAL:
 4684 0000 08       		.byte	8
 4685              		.section	.data.CTRL_REG4_G,"aw",%progbits
 4686              		.set	.LANCHOR10,. + 0
 4689              	CTRL_REG4_G:
 4690 0000 23       		.byte	35
 4691              		.section	.data.CTRL_REG4_G_ADD,"aw",%progbits
 4694              	CTRL_REG4_G_ADD:
 4695 0000 23       		.byte	35
 4696              		.section	.data.CTRL_REG4_G_VAL,"aw",%progbits
 4699              	CTRL_REG4_G_VAL:
 4700 0000 10       		.byte	16
 4701              		.section	.data.CTRL_REG5_XM_ADD,"aw",%progbits
 4702              		.set	.LANCHOR4,. + 0
 4705              	CTRL_REG5_XM_ADD:
 4706 0000 24       		.byte	36
 4707              		.section	.data.CTRL_REG5_XM_VAL,"aw",%progbits
 4708              		.set	.LANCHOR5,. + 0
 4711              	CTRL_REG5_XM_VAL:
 4712 0000 70       		.byte	112
 4713              		.section	.data.CTRL_REG6_XM,"aw",%progbits
 4716              	CTRL_REG6_XM:
 4717 0000 25       		.byte	37
 4718              		.section	.data.CTRL_REG6_XM_ADD,"aw",%progbits
 4719              		.set	.LANCHOR6,. + 0
 4722              	CTRL_REG6_XM_ADD:
 4723 0000 25       		.byte	37
 4724              		.section	.data.CTRL_REG6_XM_VAL,"aw",%progbits
 4725              		.set	.LANCHOR7,. + 0
 4728              	CTRL_REG6_XM_VAL:
 4729 0000 20       		.byte	32
 4730              		.section	.data.CTRL_REG7_XM_ADD,"aw",%progbits
 4731              		.set	.LANCHOR8,. + 0
 4734              	CTRL_REG7_XM_ADD:
 4735 0000 26       		.byte	38
 4736              		.section	.data.OUT_X_H_A_ADD,"aw",%progbits
 4737              		.set	.LANCHOR29,. + 0
 4740              	OUT_X_H_A_ADD:
 4741 0000 A9       		.byte	-87
ARM GAS  /tmp/ccU79PPY.s 			page 115


 4742              		.section	.data.OUT_X_H_G_ADD,"aw",%progbits
 4743              		.set	.LANCHOR23,. + 0
 4746              	OUT_X_H_G_ADD:
 4747 0000 A9       		.byte	-87
 4748              		.section	.data.OUT_X_L_A_ADD,"aw",%progbits
 4749              		.set	.LANCHOR30,. + 0
 4752              	OUT_X_L_A_ADD:
 4753 0000 A8       		.byte	-88
 4754              		.section	.data.OUT_X_L_G_ADD,"aw",%progbits
 4755              		.set	.LANCHOR24,. + 0
 4758              	OUT_X_L_G_ADD:
 4759 0000 A8       		.byte	-88
 4760              		.section	.data.OUT_Y_H_A_ADD,"aw",%progbits
 4761              		.set	.LANCHOR31,. + 0
 4764              	OUT_Y_H_A_ADD:
 4765 0000 AB       		.byte	-85
 4766              		.section	.data.OUT_Y_H_G_ADD,"aw",%progbits
 4767              		.set	.LANCHOR25,. + 0
 4770              	OUT_Y_H_G_ADD:
 4771 0000 AB       		.byte	-85
 4772              		.section	.data.OUT_Y_L_A_ADD,"aw",%progbits
 4773              		.set	.LANCHOR32,. + 0
 4776              	OUT_Y_L_A_ADD:
 4777 0000 AA       		.byte	-86
 4778              		.section	.data.OUT_Y_L_G_ADD,"aw",%progbits
 4779              		.set	.LANCHOR26,. + 0
 4782              	OUT_Y_L_G_ADD:
 4783 0000 AA       		.byte	-86
 4784              		.section	.data.OUT_Z_H_A_ADD,"aw",%progbits
 4785              		.set	.LANCHOR33,. + 0
 4788              	OUT_Z_H_A_ADD:
 4789 0000 AD       		.byte	-83
 4790              		.section	.data.OUT_Z_H_G_ADD,"aw",%progbits
 4791              		.set	.LANCHOR27,. + 0
 4794              	OUT_Z_H_G_ADD:
 4795 0000 AD       		.byte	-83
 4796              		.section	.data.OUT_Z_L_A_ADD,"aw",%progbits
 4797              		.set	.LANCHOR34,. + 0
 4800              	OUT_Z_L_A_ADD:
 4801 0000 AC       		.byte	-84
 4802              		.section	.data.OUT_Z_L_G_ADD,"aw",%progbits
 4803              		.set	.LANCHOR28,. + 0
 4806              	OUT_Z_L_G_ADD:
 4807 0000 AC       		.byte	-84
 4808              		.section	.data.SCL_A_16,"aw",%progbits
 4809              		.set	.LANCHOR20,. + 0
 4812              	SCL_A_16:
 4813 0000 20       		.byte	32
 4814              		.section	.data.SCL_A_4,"aw",%progbits
 4815              		.set	.LANCHOR17,. + 0
 4818              	SCL_A_4:
 4819 0000 08       		.byte	8
 4820              		.section	.data.SCL_A_6,"aw",%progbits
 4821              		.set	.LANCHOR18,. + 0
 4824              	SCL_A_6:
 4825 0000 10       		.byte	16
 4826              		.section	.data.SCL_A_8,"aw",%progbits
ARM GAS  /tmp/ccU79PPY.s 			page 116


 4827              		.set	.LANCHOR19,. + 0
 4830              	SCL_A_8:
 4831 0000 18       		.byte	24
 4832              		.section	.data.SCL_G_1000,"aw",%progbits
 4833              		.set	.LANCHOR13,. + 0
 4836              	SCL_G_1000:
 4837 0000 20       		.byte	32
 4838              		.section	.data.SCL_G_2000,"aw",%progbits
 4839              		.set	.LANCHOR14,. + 0
 4842              	SCL_G_2000:
 4843 0000 30       		.byte	48
 4844              		.section	.data.SCL_G_500,"aw",%progbits
 4845              		.set	.LANCHOR12,. + 0
 4848              	SCL_G_500:
 4849 0000 10       		.byte	16
 4850              		.section	.data.SCL_M_12,"aw",%progbits
 4853              	SCL_M_12:
 4854 0000 60       		.byte	96
 4855              		.section	.data.SCL_M_4,"aw",%progbits
 4858              	SCL_M_4:
 4859 0000 20       		.byte	32
 4860              		.section	.data.SCL_M_8,"aw",%progbits
 4863              	SCL_M_8:
 4864 0000 40       		.byte	64
 4865              		.section	.data.WHO_AM_I_G,"aw",%progbits
 4866              		.set	.LANCHOR22,. + 0
 4869              	WHO_AM_I_G:
 4870 0000 8F       		.byte	-113
 4871              		.section	.data.WHO_AM_I_XM,"aw",%progbits
 4872              		.set	.LANCHOR21,. + 0
 4875              	WHO_AM_I_XM:
 4876 0000 8F       		.byte	-113
 4877              		.section	.rodata.checksum.str1.4,"aMS",%progbits,1
 4878              		.align	2
 4879              	.LC0:
 4880 0000 257800   		.ascii	"%x\000"
 4881              		.section	.rodata.gps_init.str1.4,"aMS",%progbits,1
 4882              		.align	2
 4883              	.LC1:
 4884 0000 24504D54 		.ascii	"$PMTK251,115200*1F\015\012\000"
 4884      4B323531 
 4884      2C313135 
 4884      3230302A 
 4884      31460D0A 
 4885 0015 000000   		.space	3
 4886              	.LC2:
 4887 0018 24504D54 		.ascii	"$PMTK220,100*2F\015\012\000"
 4887      4B323230 
 4887      2C313030 
 4887      2A32460D 
 4887      0A00
 4888 002a 0000     		.space	2
 4889              	.LC3:
 4890 002c 24504D54 		.ascii	"$PMTK314,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\015"
 4890      4B333134 
 4890      2C302C30 
 4890      2C312C31 
ARM GAS  /tmp/ccU79PPY.s 			page 117


 4890      2C302C30 
 4891 005e 0A00     		.ascii	"\012\000"
 4892              	.LC4:
 4893 0060 3030302E 		.ascii	"000.00\000"
 4893      303000
 4894 0067 00       		.space	1
 4895              	.LC5:
 4896 0068 30303030 		.ascii	"0000.0000\000"
 4896      2E303030 
 4896      3000
 4897 0072 0000     		.space	2
 4898              	.LC6:
 4899 0074 4E00     		.ascii	"N\000"
 4900 0076 0000     		.space	2
 4901              	.LC7:
 4902 0078 30303030 		.ascii	"00000.0000\000"
 4902      302E3030 
 4902      303000
 4903 0083 00       		.space	1
 4904              	.LC8:
 4905 0084 5700     		.ascii	"W\000"
 4906 0086 0000     		.space	2
 4907              	.LC9:
 4908 0088 30303030 		.ascii	"0000.0\000"
 4908      2E3000
 4909 008f 00       		.space	1
 4910              	.LC10:
 4911 0090 30303030 		.ascii	"000000\000"
 4911      303000
 4912              		.text
 4913              	.Letext0:
 4914              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4915              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4916              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4917              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4918              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 4919              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 4920              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4921              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4922              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4923              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 4924              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 4925              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 4926              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4927              		.file 15 "/usr/include/newlib/sys/lock.h"
 4928              		.file 16 "/usr/include/newlib/sys/_types.h"
 4929              		.file 17 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4930              		.file 18 "/usr/include/newlib/sys/reent.h"
 4931              		.file 19 "/usr/include/newlib/stdlib.h"
 4932              		.file 20 "/usr/include/newlib/math.h"
 4933              		.file 21 "Inc/Eagle_TRT.h"
 4934              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 4935              		.file 23 "/usr/include/newlib/stdio.h"
 4936              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4937              		.file 25 "/usr/include/newlib/string.h"
 4938              		.file 26 "/usr/include/newlib/malloc.h"
ARM GAS  /tmp/ccU79PPY.s 			page 118


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Eagle_TRT.c
     /tmp/ccU79PPY.s:18     .text.next:0000000000000000 $t
     /tmp/ccU79PPY.s:24     .text.next:0000000000000000 next
     /tmp/ccU79PPY.s:45     .text.emptyp:0000000000000000 $t
     /tmp/ccU79PPY.s:51     .text.emptyp:0000000000000000 emptyp
     /tmp/ccU79PPY.s:73     .text.fullp:0000000000000000 $t
     /tmp/ccU79PPY.s:79     .text.fullp:0000000000000000 fullp
     /tmp/ccU79PPY.s:109    .text.checksum:0000000000000000 $t
     /tmp/ccU79PPY.s:115    .text.checksum:0000000000000000 checksum
     /tmp/ccU79PPY.s:242    .text.checksum:0000000000000080 $d
     /tmp/ccU79PPY.s:247    .text.send_config:0000000000000000 $t
     /tmp/ccU79PPY.s:254    .text.send_config:0000000000000000 send_config
     /tmp/ccU79PPY.s:328    .text.send_config:0000000000000058 $d
     /tmp/ccU79PPY.s:333    .text.LSMD9S0_accel_gyro_init:0000000000000000 $t
     /tmp/ccU79PPY.s:340    .text.LSMD9S0_accel_gyro_init:0000000000000000 LSMD9S0_accel_gyro_init
     /tmp/ccU79PPY.s:470    .text.LSMD9S0_accel_gyro_init:00000000000000e4 $d
     /tmp/ccU79PPY.s:616    .text.LSMD9S0_accel_gyro_init:00000000000001d0 $d
     /tmp/ccU79PPY.s:641    .text.LSMD9S0_read:0000000000000000 $t
     /tmp/ccU79PPY.s:648    .text.LSMD9S0_read:0000000000000000 LSMD9S0_read
     /tmp/ccU79PPY.s:775    .text.LSMD9S0_read:00000000000000d0 $d
     /tmp/ccU79PPY.s:780    .text.LSMD9S0_check:0000000000000000 $t
     /tmp/ccU79PPY.s:787    .text.LSMD9S0_check:0000000000000000 LSMD9S0_check
     /tmp/ccU79PPY.s:916    .text.LSMD9S0_check:00000000000000bc $d
                            *COM*:0000000000000001 WHO_AM_I_XM_VAL
                            *COM*:0000000000000001 WHO_AM_I_G_VAL
     /tmp/ccU79PPY.s:931    .text.LSMD9S0_gyro_read:0000000000000000 $t
     /tmp/ccU79PPY.s:938    .text.LSMD9S0_gyro_read:0000000000000000 LSMD9S0_gyro_read
     /tmp/ccU79PPY.s:1138   .text.LSMD9S0_gyro_read:0000000000000174 $d
     /tmp/ccU79PPY.s:1153   .text.LSMD9S0_accel_read:0000000000000000 $t
     /tmp/ccU79PPY.s:1160   .text.LSMD9S0_accel_read:0000000000000000 LSMD9S0_accel_read
     /tmp/ccU79PPY.s:1342   .text.LSMD9S0_accel_read:0000000000000154 $d
     /tmp/ccU79PPY.s:1357   .text.LSM9DS0_calibration:0000000000000000 $t
     /tmp/ccU79PPY.s:1364   .text.LSM9DS0_calibration:0000000000000000 LSM9DS0_calibration
     /tmp/ccU79PPY.s:1480   .text.LSM9DS0_calibration:0000000000000098 $d
     /tmp/ccU79PPY.s:1485   .text.CAN_Send:0000000000000000 $t
     /tmp/ccU79PPY.s:1492   .text.CAN_Send:0000000000000000 CAN_Send
     /tmp/ccU79PPY.s:1567   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccU79PPY.s:1574   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccU79PPY.s:1623   .text.init:0000000000000000 $t
     /tmp/ccU79PPY.s:1630   .text.init:0000000000000000 init
     /tmp/ccU79PPY.s:1650   .text.push:0000000000000000 $t
     /tmp/ccU79PPY.s:1657   .text.push:0000000000000000 push
     /tmp/ccU79PPY.s:1725   .text.pop:0000000000000000 $t
     /tmp/ccU79PPY.s:1732   .text.pop:0000000000000000 pop
     /tmp/ccU79PPY.s:1798   .text.print:0000000000000000 $t
     /tmp/ccU79PPY.s:1805   .text.print:0000000000000000 print
     /tmp/ccU79PPY.s:1858   .text.print:0000000000000030 $d
     /tmp/ccU79PPY.s:1863   .text.print_it:0000000000000000 $t
     /tmp/ccU79PPY.s:1870   .text.print_it:0000000000000000 print_it
     /tmp/ccU79PPY.s:1920   .text.print_it:0000000000000028 $d
     /tmp/ccU79PPY.s:1925   .text.gps_init:0000000000000000 $t
     /tmp/ccU79PPY.s:1932   .text.gps_init:0000000000000000 gps_init
     /tmp/ccU79PPY.s:2087   .text.gps_init:00000000000000fc $d
                            *COM*:0000000000000004 huart_GPS
                            *COM*:0000000000000002 buffer_gps
     /tmp/ccU79PPY.s:2104   .text.gps_read_it:0000000000000000 $t
ARM GAS  /tmp/ccU79PPY.s 			page 119


     /tmp/ccU79PPY.s:2111   .text.gps_read_it:0000000000000000 gps_read_it
     /tmp/ccU79PPY.s:2577   .text.gps_read_it:0000000000000280 $d
                            *COM*:0000000000000001 data_string_gps
                            *COM*:0000000000000004 cont_string
                            *COM*:0000000000000064 string_gps
                            *COM*:000000000000001c can
                            *COM*:0000000000000004 cont_comma
     /tmp/ccU79PPY.s:2596   .text.gps_read_it:00000000000002c0 $t
     /tmp/ccU79PPY.s:2667   .text.gps_read_it:0000000000000330 $d
     /tmp/ccU79PPY.s:2674   .text.ReinitTIM7:0000000000000000 $t
     /tmp/ccU79PPY.s:2681   .text.ReinitTIM7:0000000000000000 ReinitTIM7
     /tmp/ccU79PPY.s:2773   .text.ReinitTIM7:0000000000000080 $d
     /tmp/ccU79PPY.s:2781   .text.enc_calculate_optimal_frequency:0000000000000000 $t
     /tmp/ccU79PPY.s:2788   .text.enc_calculate_optimal_frequency:0000000000000000 enc_calculate_optimal_frequency
     /tmp/ccU79PPY.s:2962   .text.enc_calculate_optimal_frequency:0000000000000120 $d
     /tmp/ccU79PPY.s:2975   .text.calc_pot_value:0000000000000000 $t
     /tmp/ccU79PPY.s:2982   .text.calc_pot_value:0000000000000000 calc_pot_value
     /tmp/ccU79PPY.s:3031   .text.implausibility_check:0000000000000000 $t
     /tmp/ccU79PPY.s:3038   .text.implausibility_check:0000000000000000 implausibility_check
     /tmp/ccU79PPY.s:3117   .text.set_max:0000000000000000 $t
     /tmp/ccU79PPY.s:3124   .text.set_max:0000000000000000 set_max
     /tmp/ccU79PPY.s:3140   .text.set_min:0000000000000000 $t
     /tmp/ccU79PPY.s:3147   .text.set_min:0000000000000000 set_min
     /tmp/ccU79PPY.s:3164   .text.Power:0000000000000000 $t
     /tmp/ccU79PPY.s:3171   .text.Power:0000000000000000 Power
     /tmp/ccU79PPY.s:3234   .text.Power:000000000000003c $d
     /tmp/ccU79PPY.s:3239   .text.bin_dec:0000000000000000 $t
     /tmp/ccU79PPY.s:3246   .text.bin_dec:0000000000000000 bin_dec
     /tmp/ccU79PPY.s:3318   .text.read_SSI:0000000000000000 $t
     /tmp/ccU79PPY.s:3325   .text.read_SSI:0000000000000000 read_SSI
     /tmp/ccU79PPY.s:3546   .text.shift_array:0000000000000000 $t
     /tmp/ccU79PPY.s:3553   .text.shift_array:0000000000000000 shift_array
     /tmp/ccU79PPY.s:3619   .text.speed_filter:0000000000000000 $t
     /tmp/ccU79PPY.s:3626   .text.speed_filter:0000000000000000 speed_filter
     /tmp/ccU79PPY.s:3773   .text.speed_filter:00000000000000a8 $d
     /tmp/ccU79PPY.s:3781   .text.dynamic_average:0000000000000000 $t
     /tmp/ccU79PPY.s:3788   .text.dynamic_average:0000000000000000 dynamic_average
     /tmp/ccU79PPY.s:3855   .text.imu_elaborate_data:0000000000000000 $t
     /tmp/ccU79PPY.s:3862   .text.imu_elaborate_data:0000000000000000 imu_elaborate_data
     /tmp/ccU79PPY.s:4039   .text.imu_elaborate_data:0000000000000150 $d
     /tmp/ccU79PPY.s:4047   .text.get_speed_encoder:0000000000000000 $t
     /tmp/ccU79PPY.s:4054   .text.get_speed_encoder:0000000000000000 get_speed_encoder
     /tmp/ccU79PPY.s:4403   .text.get_speed_encoder:0000000000000270 $d
     /tmp/ccU79PPY.s:4423   .text.encoder_tim_interrupt:0000000000000000 $t
     /tmp/ccU79PPY.s:4430   .text.encoder_tim_interrupt:0000000000000000 encoder_tim_interrupt
     /tmp/ccU79PPY.s:4536   .text.encoder_tim_interrupt:0000000000000098 $d
                            *COM*:0000000000000018 pot_3
                            *COM*:0000000000000018 pot_2
                            *COM*:0000000000000018 pot_1
                            *COM*:00000000000003e8 enc
     /tmp/ccU79PPY.s:4643   .bss.start_string_gps:0000000000000000 start_string_gps
     /tmp/ccU79PPY.s:4636   .bss.print_q:0000000000000000 print_q
                            *COM*:0000000000000238 gyro
                            *COM*:0000000000000238 accel
     /tmp/ccU79PPY.s:4788   .data.OUT_Z_H_A_ADD:0000000000000000 OUT_Z_H_A_ADD
     /tmp/ccU79PPY.s:4800   .data.OUT_Z_L_A_ADD:0000000000000000 OUT_Z_L_A_ADD
     /tmp/ccU79PPY.s:4764   .data.OUT_Y_H_A_ADD:0000000000000000 OUT_Y_H_A_ADD
ARM GAS  /tmp/ccU79PPY.s 			page 120


     /tmp/ccU79PPY.s:4776   .data.OUT_Y_L_A_ADD:0000000000000000 OUT_Y_L_A_ADD
     /tmp/ccU79PPY.s:4740   .data.OUT_X_H_A_ADD:0000000000000000 OUT_X_H_A_ADD
     /tmp/ccU79PPY.s:4752   .data.OUT_X_L_A_ADD:0000000000000000 OUT_X_L_A_ADD
     /tmp/ccU79PPY.s:4794   .data.OUT_Z_H_G_ADD:0000000000000000 OUT_Z_H_G_ADD
     /tmp/ccU79PPY.s:4806   .data.OUT_Z_L_G_ADD:0000000000000000 OUT_Z_L_G_ADD
     /tmp/ccU79PPY.s:4770   .data.OUT_Y_H_G_ADD:0000000000000000 OUT_Y_H_G_ADD
     /tmp/ccU79PPY.s:4782   .data.OUT_Y_L_G_ADD:0000000000000000 OUT_Y_L_G_ADD
     /tmp/ccU79PPY.s:4746   .data.OUT_X_H_G_ADD:0000000000000000 OUT_X_H_G_ADD
     /tmp/ccU79PPY.s:4758   .data.OUT_X_L_G_ADD:0000000000000000 OUT_X_L_G_ADD
     /tmp/ccU79PPY.s:4853   .data.SCL_M_12:0000000000000000 SCL_M_12
     /tmp/ccU79PPY.s:4863   .data.SCL_M_8:0000000000000000 SCL_M_8
     /tmp/ccU79PPY.s:4858   .data.SCL_M_4:0000000000000000 SCL_M_4
     /tmp/ccU79PPY.s:4624   .bss.SCL_M_2:0000000000000000 SCL_M_2
     /tmp/ccU79PPY.s:4716   .data.CTRL_REG6_XM:0000000000000000 CTRL_REG6_XM
     /tmp/ccU79PPY.s:4812   .data.SCL_A_16:0000000000000000 SCL_A_16
     /tmp/ccU79PPY.s:4830   .data.SCL_A_8:0000000000000000 SCL_A_8
     /tmp/ccU79PPY.s:4824   .data.SCL_A_6:0000000000000000 SCL_A_6
     /tmp/ccU79PPY.s:4818   .data.SCL_A_4:0000000000000000 SCL_A_4
     /tmp/ccU79PPY.s:4613   .bss.SCL_A_2:0000000000000000 SCL_A_2
     /tmp/ccU79PPY.s:4673   .data.CTRL_REG2_XM:0000000000000000 CTRL_REG2_XM
     /tmp/ccU79PPY.s:4842   .data.SCL_G_2000:0000000000000000 SCL_G_2000
     /tmp/ccU79PPY.s:4836   .data.SCL_G_1000:0000000000000000 SCL_G_1000
     /tmp/ccU79PPY.s:4848   .data.SCL_G_500:0000000000000000 SCL_G_500
     /tmp/ccU79PPY.s:4619   .bss.SCL_G_245:0000000000000000 SCL_G_245
     /tmp/ccU79PPY.s:4689   .data.CTRL_REG4_G:0000000000000000 CTRL_REG4_G
     /tmp/ccU79PPY.s:4607   .bss.CTRL_REG7_XM_VAL:0000000000000000 CTRL_REG7_XM_VAL
     /tmp/ccU79PPY.s:4734   .data.CTRL_REG7_XM_ADD:0000000000000000 CTRL_REG7_XM_ADD
     /tmp/ccU79PPY.s:4728   .data.CTRL_REG6_XM_VAL:0000000000000000 CTRL_REG6_XM_VAL
     /tmp/ccU79PPY.s:4722   .data.CTRL_REG6_XM_ADD:0000000000000000 CTRL_REG6_XM_ADD
     /tmp/ccU79PPY.s:4711   .data.CTRL_REG5_XM_VAL:0000000000000000 CTRL_REG5_XM_VAL
     /tmp/ccU79PPY.s:4705   .data.CTRL_REG5_XM_ADD:0000000000000000 CTRL_REG5_XM_ADD
     /tmp/ccU79PPY.s:4683   .data.CTRL_REG2_XM_VAL:0000000000000000 CTRL_REG2_XM_VAL
     /tmp/ccU79PPY.s:4678   .data.CTRL_REG2_XM_ADD:0000000000000000 CTRL_REG2_XM_ADD
     /tmp/ccU79PPY.s:4667   .data.CTRL_REG1_XM_VAL:0000000000000000 CTRL_REG1_XM_VAL
     /tmp/ccU79PPY.s:4661   .data.CTRL_REG1_XM_ADD:0000000000000000 CTRL_REG1_XM_ADD
     /tmp/ccU79PPY.s:4699   .data.CTRL_REG4_G_VAL:0000000000000000 CTRL_REG4_G_VAL
     /tmp/ccU79PPY.s:4694   .data.CTRL_REG4_G_ADD:0000000000000000 CTRL_REG4_G_ADD
     /tmp/ccU79PPY.s:4655   .data.CTRL_REG1_G_VAL:0000000000000000 CTRL_REG1_G_VAL
     /tmp/ccU79PPY.s:4649   .data.CTRL_REG1_G_ADD:0000000000000000 CTRL_REG1_G_ADD
     /tmp/ccU79PPY.s:4875   .data.WHO_AM_I_XM:0000000000000000 WHO_AM_I_XM
     /tmp/ccU79PPY.s:4869   .data.WHO_AM_I_G:0000000000000000 WHO_AM_I_G
     /tmp/ccU79PPY.s:4629   .bss.ZERO:0000000000000000 ZERO
     /tmp/ccU79PPY.s:4608   .bss.CTRL_REG7_XM_VAL:0000000000000000 $d
     /tmp/ccU79PPY.s:4614   .bss.SCL_A_2:0000000000000000 $d
     /tmp/ccU79PPY.s:4620   .bss.SCL_G_245:0000000000000000 $d
     /tmp/ccU79PPY.s:4625   .bss.SCL_M_2:0000000000000000 $d
     /tmp/ccU79PPY.s:4630   .bss.ZERO:0000000000000000 $d
     /tmp/ccU79PPY.s:4632   .bss.print_q:0000000000000000 $d
     /tmp/ccU79PPY.s:4639   .bss.start_string_gps:0000000000000000 $d
     /tmp/ccU79PPY.s:4878   .rodata.checksum.str1.4:0000000000000000 $d
     /tmp/ccU79PPY.s:4882   .rodata.gps_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccU79PPY.s:485    .text.LSMD9S0_accel_gyro_init:00000000000000f3 $d
     /tmp/ccU79PPY.s:485    .text.LSMD9S0_accel_gyro_init:00000000000000f4 $t

UNDEFINED SYMBOLS
sprintf
ARM GAS  /tmp/ccU79PPY.s 			page 121


HAL_GPIO_WritePin
HAL_SPI_Transmit
htim2
HAL_Delay
HAL_SPI_Receive
__aeabi_f2d
__aeabi_dcmpgt
__aeabi_dsub
__aeabi_dmul
__aeabi_dadd
__aeabi_ddiv
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
strlen
malloc
strcpy
free
HAL_UART_Transmit_IT
HAL_UART_Init
HAL_UART_Transmit
HAL_UART_Receive_IT
__aeabi_d2iz
atof
sqrt
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_dcmpge
__aeabi_dcmplt
__aeabi_d2f
__aeabi_i2d
HAL_GPIO_ReadPin
__aeabi_dcmple
round
