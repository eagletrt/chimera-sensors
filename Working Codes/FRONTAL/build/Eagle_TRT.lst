ARM GAS  /tmp/ccw660IW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Eagle_TRT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.next,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	next:
  25              	.LFB140:
  26              		.file 1 "Src/Eagle_TRT.c"
   1:Src/Eagle_TRT.c **** #include "Eagle_TRT.h"
   2:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_conf.h"
   3:Src/Eagle_TRT.c **** 
   4:Src/Eagle_TRT.c **** /*
   5:Src/Eagle_TRT.c ****  *Driver for all the stm in the Eagle_TRT veichle
   6:Src/Eagle_TRT.c ****  *incude this driver in the main file
   7:Src/Eagle_TRT.c ****  *you can't use all the functions unless you set up the CubeMx project correctly
   8:Src/Eagle_TRT.c **** */
   9:Src/Eagle_TRT.c **** 
  10:Src/Eagle_TRT.c **** //----------------ENCODER----------------//
  11:Src/Eagle_TRT.c **** /*
  12:Src/Eagle_TRT.c ****  *To use encoder functions you have to initialize two timers, one for the clock and one to generate
  13:Src/Eagle_TRT.c ****  *To get the rotational speed of the encoder, you can setup the interrupt timer and call 'encoder_t
  14:Src/Eagle_TRT.c ****  *you have to declare a variable and pass it as argument to the encoder_tim_interrupt() function.
  15:Src/Eagle_TRT.c ****  *The porpouse of that variable is to switch from the three phases needed to calculate the rotation
  16:Src/Eagle_TRT.c ****  *The first and the second phases are to request two angles from the encoder, then third is to calc
  17:Src/Eagle_TRT.c ****  *For the configuration of the first timer go to the description of the read_encoder() function.
  18:Src/Eagle_TRT.c ****  *For the configuration of the second timer you have to configure it to generate an interrupt.
  19:Src/Eagle_TRT.c ****  *That interrupt must be long enough to calculate a speed but not too long because you have to get 
  20:Src/Eagle_TRT.c ****  *
  21:Src/Eagle_TRT.c ****  *working settings:
  22:Src/Eagle_TRT.c ****  *interrupt timer -> prescaler 36, counter period 1000
  23:Src/Eagle_TRT.c ****  *timer2 -> prescaler = 18, counter period = 65500
  24:Src/Eagle_TRT.c ****  *pin PC8 = data in
  25:Src/Eagle_TRT.c ****  *pin PC9 = clock pin
  26:Src/Eagle_TRT.c ****  *angles_array[15]
  27:Src/Eagle_TRT.c **** */
  28:Src/Eagle_TRT.c **** 
  29:Src/Eagle_TRT.c **** //----------------GPS----------------//
  30:Src/Eagle_TRT.c **** /*
  31:Src/Eagle_TRT.c ****  *To use GPS functions you have to setup the UART port to communicate with it.
  32:Src/Eagle_TRT.c ****  *Possibly set the port as interrupt because the received data are cleaner.
ARM GAS  /tmp/ccw660IW.s 			page 2


  33:Src/Eagle_TRT.c ****  *Call GPS_INIT() to setup the GPS
  34:Src/Eagle_TRT.c ****  *Every loop read the input data.
  35:Src/Eagle_TRT.c ****  *Then the function Get_Sentence() looks for a sequence of letters like "GPRMC"
  36:Src/Eagle_TRT.c ****  *Look at NMEA protocol, there you can find all the strings that a GPS can send,
  37:Src/Eagle_TRT.c ****  *every one of them defines the types of data that the GPS sends.
  38:Src/Eagle_TRT.c ****  *If Get_Sentence() found one string, returns the number of the position of that string in the char
  39:Src/Eagle_TRT.c ****  *Go to Get_Sentence() description to find an example of Matrix
  40:Src/Eagle_TRT.c ****  *Once you have the number of the string you can call Get_Requested_Data() to get the data that you
  41:Src/Eagle_TRT.c ****  *If you need to know if the GPS is connected to at least 3 satellites call Is_Valid() function
  42:Src/Eagle_TRT.c ****  *
  43:Src/Eagle_TRT.c ****  *checksum calculator http://www.hhhh.org/wiml/proj/nmeaxor.html
  44:Src/Eagle_TRT.c **** */
  45:Src/Eagle_TRT.c **** 
  46:Src/Eagle_TRT.c **** //----------------IMU----------------//
  47:Src/Eagle_TRT.c **** /*
  48:Src/Eagle_TRT.c ****  *Setup SPI port to communicate with the sensor
  49:Src/Eagle_TRT.c ****  *Call gyro_init() and magn_accel_init() to setup the sensor
  50:Src/Eagle_TRT.c ****  *If you want to calibrate the sensor call gyro_calib() and accel_calib().
  51:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling gyro_read()
  52:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling accel_read()
  53:Src/Eagle_TRT.c **** */
  54:Src/Eagle_TRT.c **** 
  55:Src/Eagle_TRT.c **** #ifdef HAL_SPI_MODULE_ENABLED
  56:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_spi.h"
  57:Src/Eagle_TRT.c **** 
  58:Src/Eagle_TRT.c **** extern TIM_HandleTypeDef htim2;
  59:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
  60:Src/Eagle_TRT.c **** 
  61:Src/Eagle_TRT.c **** ///IMU VARIABLES///
  62:Src/Eagle_TRT.c **** uint8_t ZERO = 0x00;
  63:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G = 0x8F;
  64:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G_VAL;
  65:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM = 0x8F;
  66:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM_VAL;
  67:Src/Eagle_TRT.c **** 
  68:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_ADD = 0x20;
  69:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_VAL = 0x0F;
  70:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_ADD = 0x23;
  71:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_VAL = 0x10;
  72:Src/Eagle_TRT.c **** 
  73:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_ADD = 0x20;
  74:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_VAL = 0xA7;
  75:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_ADD = 0x21;
  76:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_VAL = 0x08;
  77:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_ADD = 0x24;
  78:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_VAL = 0x70;
  79:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_ADD = 0x25;
  80:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_VAL = 0x20;
  81:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_ADD = 0x26;
  82:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_VAL = 0x00;
  83:Src/Eagle_TRT.c **** 
  84:Src/Eagle_TRT.c **** // GYROSCOPE SCALE SETTING
  85:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G = 0x23;
  86:Src/Eagle_TRT.c **** 
  87:Src/Eagle_TRT.c **** uint8_t SCL_G_245 = 0x00;
  88:Src/Eagle_TRT.c **** uint8_t SCL_G_500 = 0x10;
  89:Src/Eagle_TRT.c **** uint8_t SCL_G_1000 = 0x20;
ARM GAS  /tmp/ccw660IW.s 			page 3


  90:Src/Eagle_TRT.c **** uint8_t SCL_G_2000 = 0x30;
  91:Src/Eagle_TRT.c **** 
  92:Src/Eagle_TRT.c **** // ACCELERORMETER SCALE SETTING
  93:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM = 0x21;
  94:Src/Eagle_TRT.c **** 
  95:Src/Eagle_TRT.c **** uint8_t SCL_A_2 = 0x00;
  96:Src/Eagle_TRT.c **** uint8_t SCL_A_4 = 0x08;
  97:Src/Eagle_TRT.c **** uint8_t SCL_A_6 = 0x10;
  98:Src/Eagle_TRT.c **** uint8_t SCL_A_8 = 0x18;
  99:Src/Eagle_TRT.c **** uint8_t SCL_A_16 = 0x20;
 100:Src/Eagle_TRT.c **** 
 101:Src/Eagle_TRT.c **** // MAGNETORMETER SCALE SETTING
 102:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM = 0x25;
 103:Src/Eagle_TRT.c **** 
 104:Src/Eagle_TRT.c **** uint8_t SCL_M_2 = 0x00;
 105:Src/Eagle_TRT.c **** uint8_t SCL_M_4 = 0x20;
 106:Src/Eagle_TRT.c **** uint8_t SCL_M_8 = 0x40;
 107:Src/Eagle_TRT.c **** uint8_t SCL_M_12 = 0x60;
 108:Src/Eagle_TRT.c **** 
 109:Src/Eagle_TRT.c **** // OUTPUT REG
 110:Src/Eagle_TRT.c **** uint8_t OUT_X_L_G_ADD = 0xA8;
 111:Src/Eagle_TRT.c **** uint8_t OUT_X_H_G_ADD = 0xA9;
 112:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_G_ADD = 0xAA;
 113:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_G_ADD = 0xAB;
 114:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_G_ADD = 0xAC;
 115:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_G_ADD = 0xAD;
 116:Src/Eagle_TRT.c **** 
 117:Src/Eagle_TRT.c **** uint8_t OUT_X_L_A_ADD = 0xA8;
 118:Src/Eagle_TRT.c **** uint8_t OUT_X_H_A_ADD = 0xA9;
 119:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_A_ADD = 0xAA;
 120:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_A_ADD = 0xAB;
 121:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_A_ADD = 0xAC;
 122:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_A_ADD = 0xAD;
 123:Src/Eagle_TRT.c **** 
 124:Src/Eagle_TRT.c **** imu_stc imu;
 125:Src/Eagle_TRT.c **** can_stc can;
 126:Src/Eagle_TRT.c **** 
 127:Src/Eagle_TRT.c **** void send_config(GPIO_TypeDef *pinx, uint16_t pinn, uint8_t *addr, uint8_t *val)
 128:Src/Eagle_TRT.c **** {
 129:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 130:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 131:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 132:Src/Eagle_TRT.c **** 	{
 133:Src/Eagle_TRT.c **** 	}										 //delay (must be >5ns)
 134:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu.hspi, addr, 1, 10); ///Writing the address
 135:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu.hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 136:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 137:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 138:Src/Eagle_TRT.c **** 	{
 139:Src/Eagle_TRT.c **** 	}											 //delay (must be >5ns)
 140:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_SET); ///CS_InUse to 1
 141:Src/Eagle_TRT.c **** }
 142:Src/Eagle_TRT.c **** 
 143:Src/Eagle_TRT.c **** //accelerometer, gyroscope and magnetometer initialization
 144:Src/Eagle_TRT.c **** //call this function before requesting data from the sensor
 145:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 146:Src/Eagle_TRT.c **** void LSMD9S0_accel_gyro_init(imu_stc *imu)
ARM GAS  /tmp/ccw660IW.s 			page 4


 147:Src/Eagle_TRT.c **** {
 148:Src/Eagle_TRT.c **** 
 149:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 150:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 151:Src/Eagle_TRT.c **** 
 152:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_G_ADD, (uint8_t *)&CTRL_R
 153:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_XM_ADD, (uint8_t *)&CTRL_
 154:Src/Eagle_TRT.c **** 
 155:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t *)&SCL_A_4);
 156:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&SCL_G_500)
 157:Src/Eagle_TRT.c **** 
 158:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG5_XM_ADD, (uint8_t *)&CTRL_
 159:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8_t *)&CTRL_
 160:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8_t *)&CTRL_
 161:Src/Eagle_TRT.c **** 
 162:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 163:Src/Eagle_TRT.c **** 
 164:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(&huart2, (uint8_t *)"<IMU> Initialization -> Done\r\n", 26, 10);
 165:Src/Eagle_TRT.c **** }
 166:Src/Eagle_TRT.c **** 
 167:Src/Eagle_TRT.c **** float LSMD9S0_read(imu_stc *imu)
 168:Src/Eagle_TRT.c **** {
 169:Src/Eagle_TRT.c **** 
 170:Src/Eagle_TRT.c **** 	uint8_t OUT_L_VAL;
 171:Src/Eagle_TRT.c **** 	uint8_t OUT_H_VAL;
 172:Src/Eagle_TRT.c **** 
 173:Src/Eagle_TRT.c **** 	//__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);			//delay of 1 microsecond like from datasheet
 174:Src/Eagle_TRT.c **** 	//while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){
 175:Src/Eagle_TRT.c **** 	//}
 176:Src/Eagle_TRT.c **** 
 177:Src/Eagle_TRT.c **** 	///READING ROTATION
 178:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 179:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 180:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 181:Src/Eagle_TRT.c **** 	{
 182:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 183:Src/Eagle_TRT.c **** 
 184:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_L), 1, 10);		  ///Writing LOW address
 185:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 186:Src/Eagle_TRT.c **** 
 187:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 188:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 189:Src/Eagle_TRT.c **** 	{
 190:Src/Eagle_TRT.c **** 	}																		//delay (must be >5ns)
 191:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 192:Src/Eagle_TRT.c **** 
 193:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 194:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 195:Src/Eagle_TRT.c **** 	{
 196:Src/Eagle_TRT.c **** 	}																		  //delay (must be >5ns)
 197:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 198:Src/Eagle_TRT.c **** 
 199:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_H), 1, 10);		  ///Writing HIGH address
 200:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 201:Src/Eagle_TRT.c **** 
 202:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 203:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
ARM GAS  /tmp/ccw660IW.s 			page 5


 204:Src/Eagle_TRT.c **** 	{
 205:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 206:Src/Eagle_TRT.c **** 
 207:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 208:Src/Eagle_TRT.c **** 
 209:Src/Eagle_TRT.c **** 	///CALCULATING ROTATION
 210:Src/Eagle_TRT.c **** 	uint32_t value = (OUT_H_VAL << 8) | OUT_L_VAL; ///Calculating axis value shifting and using a logi
 211:Src/Eagle_TRT.c **** 	float axis = value;
 212:Src/Eagle_TRT.c **** 
 213:Src/Eagle_TRT.c **** 	//axis = axis * imu->kp; ///Scaling axis value with appropriate conversion factor from datasheet
 214:Src/Eagle_TRT.c **** 
 215:Src/Eagle_TRT.c **** 	/*char imu_str_1[100];
 216:Src/Eagle_TRT.c **** 		int imu_val_ret = OUT_H_VAL << 8 | OUT_L_VAL;
 217:Src/Eagle_TRT.c **** 		sprintf(imu_str_1,"gyro: %d\n\r",imu_val_ret);
 218:Src/Eagle_TRT.c **** 		HAL_UART_Transmit(&huart2, (uint8_t*)imu_str_1, strlen(imu_str_1), 10);*/
 219:Src/Eagle_TRT.c **** 
 220:Src/Eagle_TRT.c **** 	return axis;
 221:Src/Eagle_TRT.c **** }
 222:Src/Eagle_TRT.c **** 
 223:Src/Eagle_TRT.c **** int LSMD9S0_check(imu_stc *imu)
 224:Src/Eagle_TRT.c **** {
 225:Src/Eagle_TRT.c **** 
 226:Src/Eagle_TRT.c **** 	int check = 0;
 227:Src/Eagle_TRT.c **** 
 228:Src/Eagle_TRT.c **** 	///AXEL/MAGN ARE WORKING
 229:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); ///CS_XM to 0
 230:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 231:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 232:Src/Eagle_TRT.c **** 	{
 233:Src/Eagle_TRT.c **** 	}															 //delay (must be >5ns)
 234:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_XM, 1, 10); ///Writing on register ----> (uint8_t
 235:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_XM_VAL, 1, 10); ///Readi
 236:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_XM_VAL, 1, 10);
 237:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 238:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 239:Src/Eagle_TRT.c **** 	{
 240:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 241:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 242:Src/Eagle_TRT.c **** 
 243:Src/Eagle_TRT.c **** 	///GYRO IS WORKING
 244:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); ///CS_G to 0
 245:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 246:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 247:Src/Eagle_TRT.c **** 	{
 248:Src/Eagle_TRT.c **** 	}															//delay (must be >5ns)
 249:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_G, 1, 10); ///Writing on register ----> (uint8_t*
 250:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 251:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_G_VAL, 1, 10);
 252:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 253:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 254:Src/Eagle_TRT.c **** 	{
 255:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 256:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 257:Src/Eagle_TRT.c **** 
 258:Src/Eagle_TRT.c **** 	char imu_str[100];
 259:Src/Eagle_TRT.c **** 
 260:Src/Eagle_TRT.c **** 	//sprintf(imu_str,"Test with %d and %d\r\n%d, %d\r\n",WHO_AM_I_G,WHO_AM_I_XM,WHO_AM_I_G_VAL,WHO_AM
ARM GAS  /tmp/ccw660IW.s 			page 6


 261:Src/Eagle_TRT.c **** 	//HAL_UART_Transmit(&huart2, (uint8_t*)imu_str, strlen(imu_str), 10);
 262:Src/Eagle_TRT.c **** 
 263:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 264:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 265:Src/Eagle_TRT.c **** 	{
 266:Src/Eagle_TRT.c **** 		check = 1;
 267:Src/Eagle_TRT.c **** 		//HAL_UART_Transmit(&huart2, (uint8_t*)"imu int correct\r\n", 17, 10);
 268:Src/Eagle_TRT.c **** 	}
 269:Src/Eagle_TRT.c **** 	else
 270:Src/Eagle_TRT.c **** 	{
 271:Src/Eagle_TRT.c **** 		check = 0;
 272:Src/Eagle_TRT.c **** 		//HAL_UART_Transmit(&huart2, (uint8_t*)"imu int failed\r\n", 16, 10);
 273:Src/Eagle_TRT.c **** 	}
 274:Src/Eagle_TRT.c **** 
 275:Src/Eagle_TRT.c **** 	return check;
 276:Src/Eagle_TRT.c **** }
 277:Src/Eagle_TRT.c **** 
 278:Src/Eagle_TRT.c **** void LSM9DS0_calibration(imu_stc *imu)
 279:Src/Eagle_TRT.c **** {
 280:Src/Eagle_TRT.c **** 	long int x = 0, y = 0, z = 0;
 281:Src/Eagle_TRT.c **** 	int iterations = 0;
 282:Src/Eagle_TRT.c **** 	for (int i = 0; i < iterations; i++)
 283:Src/Eagle_TRT.c **** 	{
 284:Src/Eagle_TRT.c **** 		LSMD9S0_accel_read(imu);
 285:Src/Eagle_TRT.c **** 		x += imu->X_A_axis;
 286:Src/Eagle_TRT.c **** 		y += imu->Y_A_axis;
 287:Src/Eagle_TRT.c **** 		z += imu->Z_A_axis;
 288:Src/Eagle_TRT.c **** 		HAL_Delay(1);
 289:Src/Eagle_TRT.c **** 	}
 290:Src/Eagle_TRT.c **** 
 291:Src/Eagle_TRT.c **** 	imu->X_A_axis_offset = x / iterations;
 292:Src/Eagle_TRT.c **** 	imu->Y_A_axis_offset = y / iterations;
 293:Src/Eagle_TRT.c **** 	imu->Z_A_axis_offset = z / iterations;
 294:Src/Eagle_TRT.c **** 
 295:Src/Eagle_TRT.c **** 	imu->calibration_done = 1;
 296:Src/Eagle_TRT.c **** }
 297:Src/Eagle_TRT.c **** 
 298:Src/Eagle_TRT.c **** //Reading G_axis values
 299:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 300:Src/Eagle_TRT.c **** //X_G_axis = pointer gyroscope x variable
 301:Src/Eagle_TRT.c **** //Y_G_axis = pointer gyroscope y variable
 302:Src/Eagle_TRT.c **** //Z_G_axis = pointer gyroscope z variable
 303:Src/Eagle_TRT.c **** //X_G_axis_offset = offset x value
 304:Src/Eagle_TRT.c **** //Y_G_axis_offset = offset y value
 305:Src/Eagle_TRT.c **** //Z_G_axis_offset = offset z value
 306:Src/Eagle_TRT.c **** void LSMD9S0_gyro_read(imu_stc *imu)
 307:Src/Eagle_TRT.c **** {
 308:Src/Eagle_TRT.c **** 
 309:Src/Eagle_TRT.c **** 	imu->kp = 0.0175;
 310:Src/Eagle_TRT.c **** 
 311:Src/Eagle_TRT.c **** 	imu->GPIOx_InUse = GPIOC;
 312:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_9;
 313:Src/Eagle_TRT.c **** 
 314:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_X_H_G_ADD;
 315:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_G_ADD;
 316:Src/Eagle_TRT.c **** 	imu->X_G_axis = LSMD9S0_read(imu);
 317:Src/Eagle_TRT.c **** 	//imu->X_G_axis = imu->X_G_axis - imu->X_G_axis_offset;
ARM GAS  /tmp/ccw660IW.s 			page 7


 318:Src/Eagle_TRT.c **** 
 319:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Y_H_G_ADD;
 320:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_G_ADD;
 321:Src/Eagle_TRT.c **** 	imu->Y_G_axis = LSMD9S0_read(imu);
 322:Src/Eagle_TRT.c **** 	//imu->Y_G_axis = imu->Y_G_axis - imu->Y_G_axis_offset;
 323:Src/Eagle_TRT.c **** 
 324:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Z_H_G_ADD;
 325:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_G_ADD;
 326:Src/Eagle_TRT.c **** 	imu->Z_G_axis = LSMD9S0_read(imu);
 327:Src/Eagle_TRT.c **** 	//imu->Z_G_axis = imu->Z_G_axis - imu->Z_G_axis_offset;
 328:Src/Eagle_TRT.c **** 
 329:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 330:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 331:Src/Eagle_TRT.c **** 	{
 332:Src/Eagle_TRT.c **** 		imu->error_flag = 0;
 333:Src/Eagle_TRT.c **** 	}
 334:Src/Eagle_TRT.c **** 	else
 335:Src/Eagle_TRT.c **** 	{
 336:Src/Eagle_TRT.c **** 		imu->error_flag = 1;
 337:Src/Eagle_TRT.c **** 	}
 338:Src/Eagle_TRT.c **** 
 339:Src/Eagle_TRT.c **** 	/*int16_t val_g_x = imu->Y_G_axis * 100;
 340:Src/Eagle_TRT.c **** 		int16_t val_g_y = (0 - imu->X_G_axis) * 100;
 341:Src/Eagle_TRT.c **** 		int16_t val_g_z = imu->Z_G_axis * 100;*/
 342:Src/Eagle_TRT.c **** 
 343:Src/Eagle_TRT.c **** 	if (imu->X_G_axis > 32768)
 344:Src/Eagle_TRT.c **** 	{
 345:Src/Eagle_TRT.c **** 		imu->X_G_axis -= 65536;
 346:Src/Eagle_TRT.c **** 	}
 347:Src/Eagle_TRT.c **** 	if (imu->Y_G_axis > 32768)
 348:Src/Eagle_TRT.c **** 	{
 349:Src/Eagle_TRT.c **** 		imu->Y_G_axis -= 65536;
 350:Src/Eagle_TRT.c **** 	}
 351:Src/Eagle_TRT.c **** 	if (imu->Z_G_axis > 32768)
 352:Src/Eagle_TRT.c **** 	{
 353:Src/Eagle_TRT.c **** 		imu->Z_G_axis -= 65536;
 354:Src/Eagle_TRT.c **** 	}
 355:Src/Eagle_TRT.c **** 
 356:Src/Eagle_TRT.c **** 	shift_array(imu->X_G_axis_array, 10, imu->X_G_axis);
 357:Src/Eagle_TRT.c **** 	shift_array(imu->Y_G_axis_array, 10, imu->Y_G_axis);
 358:Src/Eagle_TRT.c **** 	shift_array(imu->Z_G_axis_array, 10, imu->Z_G_axis);
 359:Src/Eagle_TRT.c **** 
 360:Src/Eagle_TRT.c **** 	imu->X_G_axis = dynamic_average(imu->X_G_axis_array, 10);
 361:Src/Eagle_TRT.c **** 	imu->Y_G_axis = dynamic_average(imu->Y_G_axis_array, 10);
 362:Src/Eagle_TRT.c **** 	imu->Z_G_axis = dynamic_average(imu->Z_G_axis_array, 10);
 363:Src/Eagle_TRT.c **** 
 364:Src/Eagle_TRT.c **** 	/*char imu_str_1[100];
 365:Src/Eagle_TRT.c **** 
 366:Src/Eagle_TRT.c **** 		sprintf(imu_str_1,"gyro: %d %d %d\n\r", (int)imu->X_G_axis, (int)imu->Y_G_axis, (int)imu->Z_G_axi
 367:Src/Eagle_TRT.c **** 		HAL_UART_Transmit(&huart2, (uint8_t*)imu_str_1, strlen(imu_str_1), 10);*/
 368:Src/Eagle_TRT.c **** }
 369:Src/Eagle_TRT.c **** 
 370:Src/Eagle_TRT.c **** ///Reading A_axis values
 371:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 372:Src/Eagle_TRT.c **** //X_A_axis = pointer accelerometer x variable
 373:Src/Eagle_TRT.c **** //Y_A_axis = pointer accelerometer y variable
 374:Src/Eagle_TRT.c **** //Z_A_axis = pointer accelerometer z variable
ARM GAS  /tmp/ccw660IW.s 			page 8


 375:Src/Eagle_TRT.c **** //X_A_axis_offset = offset x value
 376:Src/Eagle_TRT.c **** //Y_A_axis_offset = offset y value
 377:Src/Eagle_TRT.c **** //Z_A_axis_offset = offset z value
 378:Src/Eagle_TRT.c **** void LSMD9S0_accel_read(imu_stc *imu)
 379:Src/Eagle_TRT.c **** {
 380:Src/Eagle_TRT.c **** 
 381:Src/Eagle_TRT.c **** 	imu->kp = 0.00119782; ///0.000122 * 9,81
 382:Src/Eagle_TRT.c **** 
 383:Src/Eagle_TRT.c **** 	imu->GPIOx_InUse = GPIOC;
 384:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_9;
 385:Src/Eagle_TRT.c **** 
 386:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_X_H_A_ADD;
 387:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_A_ADD;
 388:Src/Eagle_TRT.c **** 	imu->X_A_axis = LSMD9S0_read(imu);
 389:Src/Eagle_TRT.c **** 
 390:Src/Eagle_TRT.c **** 	//imu->X_A_axis = imu->X_A_axis - imu->X_A_axis_offset;
 391:Src/Eagle_TRT.c **** 
 392:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Y_H_A_ADD;
 393:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_A_ADD;
 394:Src/Eagle_TRT.c **** 	imu->Y_A_axis = LSMD9S0_read(imu);
 395:Src/Eagle_TRT.c **** 	//imu->Y_A_axis = imu->Y_A_axis - imu->Y_A_axis_offset;
 396:Src/Eagle_TRT.c **** 
 397:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Z_H_A_ADD;
 398:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_A_ADD;
 399:Src/Eagle_TRT.c **** 	imu->Z_A_axis = LSMD9S0_read(imu);
 400:Src/Eagle_TRT.c **** 	//imu->Z_A_axis = imu->Z_A_axis - imu->Z_A_axis_offset + 9.81;
 401:Src/Eagle_TRT.c **** 
 402:Src/Eagle_TRT.c **** 	if (imu->calibration_done)
 403:Src/Eagle_TRT.c **** 	{
 404:Src/Eagle_TRT.c **** 
 405:Src/Eagle_TRT.c **** 		imu->X_A_axis -= imu->X_A_axis_offset;
 406:Src/Eagle_TRT.c **** 		imu->Y_A_axis -= imu->Y_A_axis_offset;
 407:Src/Eagle_TRT.c **** 		imu->Z_A_axis -= imu->Z_A_axis_offset;
 408:Src/Eagle_TRT.c **** 
 409:Src/Eagle_TRT.c **** 		if (imu->X_A_axis > 32768)
 410:Src/Eagle_TRT.c **** 		{
 411:Src/Eagle_TRT.c **** 			imu->X_A_axis -= 65536;
 412:Src/Eagle_TRT.c **** 		}
 413:Src/Eagle_TRT.c **** 		if (imu->Y_A_axis > 32768)
 414:Src/Eagle_TRT.c **** 		{
 415:Src/Eagle_TRT.c **** 			imu->Y_A_axis -= 65536;
 416:Src/Eagle_TRT.c **** 		}
 417:Src/Eagle_TRT.c **** 		if (imu->Z_A_axis > 32768)
 418:Src/Eagle_TRT.c **** 		{
 419:Src/Eagle_TRT.c **** 			imu->Z_A_axis -= 65536;
 420:Src/Eagle_TRT.c **** 		}
 421:Src/Eagle_TRT.c **** 		/*
 422:Src/Eagle_TRT.c **** 			shift_array(imu->X_A_axis_array, 10, imu->X_A_axis);
 423:Src/Eagle_TRT.c **** 			shift_array(imu->Y_A_axis_array, 10, imu->Y_A_axis);
 424:Src/Eagle_TRT.c **** 			shift_array(imu->Z_A_axis_array, 10, imu->Z_A_axis);
 425:Src/Eagle_TRT.c **** 
 426:Src/Eagle_TRT.c **** 			imu->X_A_axis = dynamic_average(imu->X_A_axis_array, 10);
 427:Src/Eagle_TRT.c **** 			imu->Y_A_axis = dynamic_average(imu->Y_A_axis_array, 10);
 428:Src/Eagle_TRT.c **** 			imu->Z_A_axis = dynamic_average(imu->Z_A_axis_array, 10);*/
 429:Src/Eagle_TRT.c **** 	}
 430:Src/Eagle_TRT.c **** }
 431:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccw660IW.s 			page 9


 432:Src/Eagle_TRT.c **** #endif
 433:Src/Eagle_TRT.c **** 
 434:Src/Eagle_TRT.c **** #ifdef HAL_CAN_MODULE_ENABLED
 435:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_can.h"
 436:Src/Eagle_TRT.c **** //function that sends an array via CAN
 437:Src/Eagle_TRT.c **** //hcan = pointer to can port
 438:Src/Eagle_TRT.c **** //id = id of the message to be sent
 439:Src/Eagle_TRT.c **** //dataTx = pointer to array that contains the data to be sent
 440:Src/Eagle_TRT.c **** //size = size of the array
 441:Src/Eagle_TRT.c **** can_stc can;
 442:Src/Eagle_TRT.c **** int CAN_Send(can_stc *can)
 443:Src/Eagle_TRT.c **** {
 444:Src/Eagle_TRT.c **** 
 445:Src/Eagle_TRT.c **** 	uint32_t mailbox;
 446:Src/Eagle_TRT.c **** 	uint8_t flag = 0;
 447:Src/Eagle_TRT.c **** 
 448:Src/Eagle_TRT.c **** 	CAN_TxHeaderTypeDef TxHeader;
 449:Src/Eagle_TRT.c **** 	TxHeader.StdId = can->id;
 450:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 451:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 452:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 453:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 454:Src/Eagle_TRT.c **** 
 455:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetTxMailboxesFreeLevel(can->hcan) != 0 && HAL_CAN_IsTxMessagePending(can->hcan, CAN_T
 456:Src/Eagle_TRT.c **** 	{
 457:Src/Eagle_TRT.c **** 		HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx, &mailbox);
 458:Src/Eagle_TRT.c **** 		flag = 1;
 459:Src/Eagle_TRT.c **** 	}
 460:Src/Eagle_TRT.c **** 
 461:Src/Eagle_TRT.c **** 	return flag;
 462:Src/Eagle_TRT.c **** }
 463:Src/Eagle_TRT.c **** 
 464:Src/Eagle_TRT.c **** //receive a buffer from the CAN communication
 465:Src/Eagle_TRT.c **** //you can call this function in the callback of the CAN interrupt
 466:Src/Eagle_TRT.c **** //hcan = pointer to can port
 467:Src/Eagle_TRT.c **** //DataRx = pointer to the buffer you are receiveng
 468:Src/Eagle_TRT.c **** //size = size of the buffer you are using
 469:Src/Eagle_TRT.c **** int CAN_Receive(can_stc *can)
 470:Src/Eagle_TRT.c **** {
 471:Src/Eagle_TRT.c **** 
 472:Src/Eagle_TRT.c **** 	CAN_RxHeaderTypeDef RxHeader;
 473:Src/Eagle_TRT.c **** 
 474:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetRxFifoFillLevel(can->hcan, CAN_RX_FIFO0) != 0)
 475:Src/Eagle_TRT.c **** 	{
 476:Src/Eagle_TRT.c **** 		HAL_CAN_GetRxMessage(can->hcan, CAN_RX_FIFO0, &RxHeader, can->dataRx);
 477:Src/Eagle_TRT.c **** 	}
 478:Src/Eagle_TRT.c **** 
 479:Src/Eagle_TRT.c **** 	int id = RxHeader.StdId;
 480:Src/Eagle_TRT.c **** 
 481:Src/Eagle_TRT.c **** 	return id;
 482:Src/Eagle_TRT.c **** }
 483:Src/Eagle_TRT.c **** #endif
 484:Src/Eagle_TRT.c **** 
 485:Src/Eagle_TRT.c **** #ifdef HAL_UART_MODULE_ENABLED
 486:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_uart.h"
 487:Src/Eagle_TRT.c **** #include "malloc.h"
 488:Src/Eagle_TRT.c **** ///---- queue ---- ///
ARM GAS  /tmp/ccw660IW.s 			page 10


 489:Src/Eagle_TRT.c **** static int next(int ret, int dim)
 490:Src/Eagle_TRT.c **** {
  27              		.loc 1 490 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 491:Src/Eagle_TRT.c **** 
 492:Src/Eagle_TRT.c **** 	return (ret + 1) % dim;
  33              		.loc 1 492 0
  34 0000 0130     		adds	r0, r0, #1
  35              	.LVL1:
  36 0002 90FBF1F3 		sdiv	r3, r0, r1
 493:Src/Eagle_TRT.c **** }
  37              		.loc 1 493 0
  38 0006 01FB1300 		mls	r0, r1, r3, r0
  39              	.LVL2:
  40 000a 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE140:
  44              		.section	.text.emptyp,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	emptyp:
  52              	.LFB142:
 494:Src/Eagle_TRT.c **** 
 495:Src/Eagle_TRT.c **** // Implementazione dinamica
 496:Src/Eagle_TRT.c **** void init(queue *q)
 497:Src/Eagle_TRT.c **** {
 498:Src/Eagle_TRT.c **** 
 499:Src/Eagle_TRT.c **** 	q->tail = q->head = 0;
 500:Src/Eagle_TRT.c **** 	q->dim = 40;
 501:Src/Eagle_TRT.c **** }
 502:Src/Eagle_TRT.c **** 
 503:Src/Eagle_TRT.c **** static int emptyp(const queue *q)
 504:Src/Eagle_TRT.c **** {
  53              		.loc 1 504 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL3:
 505:Src/Eagle_TRT.c **** 
 506:Src/Eagle_TRT.c **** 	return (q->tail == q->head);
  59              		.loc 1 506 0
  60 0000 4268     		ldr	r2, [r0, #4]
  61 0002 0068     		ldr	r0, [r0]
  62              	.LVL4:
 507:Src/Eagle_TRT.c **** }
  63              		.loc 1 507 0
  64 0004 8242     		cmp	r2, r0
  65 0006 14BF     		ite	ne
  66 0008 0020     		movne	r0, #0
ARM GAS  /tmp/ccw660IW.s 			page 11


  67 000a 0120     		moveq	r0, #1
  68 000c 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE142:
  72              		.section	.text.fullp,"ax",%progbits
  73              		.align	1
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	fullp:
  80              	.LFB143:
 508:Src/Eagle_TRT.c **** 
 509:Src/Eagle_TRT.c **** static int fullp(const queue *q)
 510:Src/Eagle_TRT.c **** {
  81              		.loc 1 510 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL5:
  86 0000 10B5     		push	{r4, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  91 0002 0446     		mov	r4, r0
 511:Src/Eagle_TRT.c **** 
 512:Src/Eagle_TRT.c **** 	return (next(q->tail, q->dim) == q->head);
  92              		.loc 1 512 0
  93 0004 8168     		ldr	r1, [r0, #8]
  94 0006 4068     		ldr	r0, [r0, #4]
  95              	.LVL6:
  96 0008 FFF7FEFF 		bl	next
  97              	.LVL7:
  98 000c 2368     		ldr	r3, [r4]
 513:Src/Eagle_TRT.c **** }
  99              		.loc 1 513 0
 100 000e 9842     		cmp	r0, r3
 101 0010 14BF     		ite	ne
 102 0012 0020     		movne	r0, #0
 103 0014 0120     		moveq	r0, #1
 104 0016 10BD     		pop	{r4, pc}
 105              		.cfi_endproc
 106              	.LFE143:
 108              		.section	.text.checksum,"ax",%progbits
 109              		.align	1
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	checksum:
 116              	.LFB150:
 514:Src/Eagle_TRT.c **** 
 515:Src/Eagle_TRT.c **** int push(char *str, queue *q)
 516:Src/Eagle_TRT.c **** {
 517:Src/Eagle_TRT.c **** 	int res;
 518:Src/Eagle_TRT.c **** 	if (fullp(q))
ARM GAS  /tmp/ccw660IW.s 			page 12


 519:Src/Eagle_TRT.c **** 	{
 520:Src/Eagle_TRT.c **** 		res = FAIL;
 521:Src/Eagle_TRT.c **** 	}
 522:Src/Eagle_TRT.c **** 	else
 523:Src/Eagle_TRT.c **** 	{
 524:Src/Eagle_TRT.c **** 		int length = strlen(str);
 525:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 526:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 527:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 528:Src/Eagle_TRT.c **** 		if (q->tail == 39)
 529:Src/Eagle_TRT.c **** 		{
 530:Src/Eagle_TRT.c **** 			q->tail = 0;
 531:Src/Eagle_TRT.c **** 		}
 532:Src/Eagle_TRT.c **** 		else
 533:Src/Eagle_TRT.c **** 		{
 534:Src/Eagle_TRT.c **** 			q->tail++;
 535:Src/Eagle_TRT.c **** 		}
 536:Src/Eagle_TRT.c **** 		res = OK;
 537:Src/Eagle_TRT.c **** 	}
 538:Src/Eagle_TRT.c **** 
 539:Src/Eagle_TRT.c **** 	return res;
 540:Src/Eagle_TRT.c **** }
 541:Src/Eagle_TRT.c **** 
 542:Src/Eagle_TRT.c **** int pop(char *str, queue *q)
 543:Src/Eagle_TRT.c **** {
 544:Src/Eagle_TRT.c **** 	int res;
 545:Src/Eagle_TRT.c **** 	if (emptyp(q))
 546:Src/Eagle_TRT.c **** 	{
 547:Src/Eagle_TRT.c **** 		res = FAIL;
 548:Src/Eagle_TRT.c **** 	}
 549:Src/Eagle_TRT.c **** 	else
 550:Src/Eagle_TRT.c **** 	{
 551:Src/Eagle_TRT.c **** 		strcpy(str, q->elem[q->head]);
 552:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 553:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 554:Src/Eagle_TRT.c **** 		if (q->head == 39)
 555:Src/Eagle_TRT.c **** 		{
 556:Src/Eagle_TRT.c **** 			q->head = 0;
 557:Src/Eagle_TRT.c **** 		}
 558:Src/Eagle_TRT.c **** 		else
 559:Src/Eagle_TRT.c **** 		{
 560:Src/Eagle_TRT.c **** 			q->head++;
 561:Src/Eagle_TRT.c **** 		}
 562:Src/Eagle_TRT.c **** 		res = OK;
 563:Src/Eagle_TRT.c **** 	}
 564:Src/Eagle_TRT.c **** 
 565:Src/Eagle_TRT.c **** 	return res;
 566:Src/Eagle_TRT.c **** }
 567:Src/Eagle_TRT.c **** /// ---- end queue ----///
 568:Src/Eagle_TRT.c **** queue print_q = {.head = 0, .tail = 0, .dim = 0};
 569:Src/Eagle_TRT.c **** 
 570:Src/Eagle_TRT.c **** int print(UART_HandleTypeDef *huart, char *text_print_function)
 571:Src/Eagle_TRT.c **** {
 572:Src/Eagle_TRT.c **** 
 573:Src/Eagle_TRT.c **** 	int ret = 0;
 574:Src/Eagle_TRT.c **** 
 575:Src/Eagle_TRT.c **** 	if (HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function)) == HA
ARM GAS  /tmp/ccw660IW.s 			page 13


 576:Src/Eagle_TRT.c **** 	{
 577:Src/Eagle_TRT.c **** 		ret = 1;
 578:Src/Eagle_TRT.c **** 	}
 579:Src/Eagle_TRT.c **** 	else
 580:Src/Eagle_TRT.c **** 	{
 581:Src/Eagle_TRT.c **** 		if (push(text_print_function, &print_q) == FAIL)
 582:Src/Eagle_TRT.c **** 		{
 583:Src/Eagle_TRT.c **** 			ret = 0;
 584:Src/Eagle_TRT.c **** 		}
 585:Src/Eagle_TRT.c **** 		else
 586:Src/Eagle_TRT.c **** 		{
 587:Src/Eagle_TRT.c **** 			ret = 1;
 588:Src/Eagle_TRT.c **** 		}
 589:Src/Eagle_TRT.c **** 	}
 590:Src/Eagle_TRT.c **** 
 591:Src/Eagle_TRT.c **** 	return ret;
 592:Src/Eagle_TRT.c **** }
 593:Src/Eagle_TRT.c **** 
 594:Src/Eagle_TRT.c **** void print_it(UART_HandleTypeDef *huart)
 595:Src/Eagle_TRT.c **** { //put in the uart interrupt
 596:Src/Eagle_TRT.c **** 
 597:Src/Eagle_TRT.c **** 	char text_print_function[50];
 598:Src/Eagle_TRT.c **** 
 599:Src/Eagle_TRT.c **** 	if (pop(text_print_function, &print_q) == OK)
 600:Src/Eagle_TRT.c **** 	{
 601:Src/Eagle_TRT.c **** 		HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function));
 602:Src/Eagle_TRT.c **** 	}
 603:Src/Eagle_TRT.c **** }
 604:Src/Eagle_TRT.c **** 
 605:Src/Eagle_TRT.c **** UART_HandleTypeDef *huart_GPS;
 606:Src/Eagle_TRT.c **** int start_string_gps = 0;
 607:Src/Eagle_TRT.c **** char string_gps[100];
 608:Src/Eagle_TRT.c **** int cont_string, cont_comma;
 609:Src/Eagle_TRT.c **** char data_string_gps;
 610:Src/Eagle_TRT.c **** char buffer_gps[2];
 611:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum);
 612:Src/Eagle_TRT.c **** 
 613:Src/Eagle_TRT.c **** /* GPS library
 614:Src/Eagle_TRT.c **** 	gps_init() ->initialize the GPS. Put it in the main initialization. Example:
 615:Src/Eagle_TRT.c **** 	gps_struct gps_main; //define the name of gps_structure istance
 616:Src/Eagle_TRT.c **** 	if(gps_init(&huart3,&gps_main)==0){
 617:Src/Eagle_TRT.c **** 		/--error--/
 618:Src/Eagle_TRT.c **** 	}
 619:Src/Eagle_TRT.c **** 	gps_read_it() -> put it in interrupt. Example:
 620:Src/Eagle_TRT.c **** 	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 621:Src/Eagle_TRT.c **** 		gps_read_it(huart,&gps_main);
 622:Src/Eagle_TRT.c **** 	}*/
 623:Src/Eagle_TRT.c **** 
 624:Src/Eagle_TRT.c **** int gps_init(UART_HandleTypeDef *huart, gps_struct *gps)
 625:Src/Eagle_TRT.c **** { //initialization of GPS
 626:Src/Eagle_TRT.c **** 
 627:Src/Eagle_TRT.c **** 	//if return--> 0=error,1=ok
 628:Src/Eagle_TRT.c **** 	huart_GPS = huart;
 629:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 630:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 631:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 632:Src/Eagle_TRT.c **** 	HAL_Delay(500);
ARM GAS  /tmp/ccw660IW.s 			page 14


 633:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 634:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 635:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 636:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 637:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 638:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 639:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 640:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 641:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 642:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 643:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 644:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 645:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 646:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 647:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 648:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 649:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 650:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
 651:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 652:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 653:Src/Eagle_TRT.c **** 
 654:Src/Eagle_TRT.c **** 	return 1;
 655:Src/Eagle_TRT.c **** }
 656:Src/Eagle_TRT.c **** 
 657:Src/Eagle_TRT.c **** int gps_read_it(UART_HandleTypeDef *huart, gps_struct *gps)
 658:Src/Eagle_TRT.c **** {
 659:Src/Eagle_TRT.c **** 
 660:Src/Eagle_TRT.c **** 	int ret = 0; //return--> 0=error,1=ok
 661:Src/Eagle_TRT.c **** 
 662:Src/Eagle_TRT.c **** 	/*
 663:Src/Eagle_TRT.c **** 			* Example of strings
 664:Src/Eagle_TRT.c **** 			* $GPGGA,064951.000,2307.1256,N,12016.4438,E,1,8,0.95,39.9,M,17.8,M,,*65
 665:Src/Eagle_TRT.c **** 			* $GPGSA,A,3,29,21,26,15,18,09,06,10,,,,,2.32,0.95,2.11*00
 666:Src/Eagle_TRT.c **** 			* $GPGSV,3,1,09,29,36,029,42,21,46,314,43,26,44,020,43,15,21,321,39*7D
 667:Src/Eagle_TRT.c **** 			  $GPGSV,3,2,09,18,26,314,40,09,57,170,44,06,20,229,37,10,26,084,37*77
 668:Src/Eagle_TRT.c **** 			  $GPGSV,3,3,09,07,,,26*73
 669:Src/Eagle_TRT.c **** 			* $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C
 670:Src/Eagle_TRT.c **** 			* $GPVTG,165.48,T,,M,0.03,N,0.06,K,A*37
 671:Src/Eagle_TRT.c **** 			* $PGTOP,11,3 *6F
 672:Src/Eagle_TRT.c **** 			*
 673:Src/Eagle_TRT.c **** 			*
 674:Src/Eagle_TRT.c **** 			*
 675:Src/Eagle_TRT.c **** 			* 	$GPBOD - Bearing, origin to destination
 676:Src/Eagle_TRT.c **** 				$GPBWC - Bearing and distance to waypoint, great circle
 677:Src/Eagle_TRT.c **** 				$GPGGA - Global Positioning System Fix Data
 678:Src/Eagle_TRT.c **** 				$GPGLL - Geographic position, latitude / longitude
 679:Src/Eagle_TRT.c **** 				$GPGSA - GPS DOP and active satellites
 680:Src/Eagle_TRT.c **** 				$GPGSV - GPS Satellites in view
 681:Src/Eagle_TRT.c **** 				$GPHDT - Heading, True
 682:Src/Eagle_TRT.c **** 				$GPR00 - List of waypoints in currently active route
 683:Src/Eagle_TRT.c **** 				$GPRMA - Recommended minimum specific Loran-C data
 684:Src/Eagle_TRT.c **** 				$GPRMB - Recommended minimum navigation info
 685:Src/Eagle_TRT.c **** 				$GPRMC - Recommended minimum specific GPS/Transit data
 686:Src/Eagle_TRT.c **** 				$GPRTE - Routes
 687:Src/Eagle_TRT.c **** 				$GPTRF - Transit Fix Data
 688:Src/Eagle_TRT.c **** 				$GPSTN - Multiple Data ID
 689:Src/Eagle_TRT.c **** 				$GPVBW - Dual Ground / Water Speed
ARM GAS  /tmp/ccw660IW.s 			page 15


 690:Src/Eagle_TRT.c **** 				$GPVTG - Track made good and ground speed
 691:Src/Eagle_TRT.c **** 				$GPWPL - Waypoint location
 692:Src/Eagle_TRT.c **** 				$GPXTE - Cross-track error, Measured
 693:Src/Eagle_TRT.c **** 				$GPZDA - Date & Time
 694:Src/Eagle_TRT.c **** 				http://aprs.gids.nl/nmea/
 695:Src/Eagle_TRT.c **** 			*/
 696:Src/Eagle_TRT.c **** 	if (huart == huart_GPS)
 697:Src/Eagle_TRT.c **** 	{
 698:Src/Eagle_TRT.c **** 		//check if it's the huart_gps interrupt
 699:Src/Eagle_TRT.c **** 		HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request interrupt for the next data
 700:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 701:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 702:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 703:Src/Eagle_TRT.c **** 			string_gps[cont_string] = data_string_gps; //save the data into the array
 704:Src/Eagle_TRT.c **** 			cont_string++;
 705:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 706:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 707:Src/Eagle_TRT.c **** 				cont_string--;
 708:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 709:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 710:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 711:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 712:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 713:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 714:Src/Eagle_TRT.c **** 						int cont_comma = 0, cont_latitude = 0, cont_longitude = 0, cont_altitude = 0, cont_time = 0;
 715:Src/Eagle_TRT.c **** 						for (int i = 5; i < 100; i++)
 716:Src/Eagle_TRT.c **** 						{
 717:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 718:Src/Eagle_TRT.c **** 								cont_comma++;
 719:Src/Eagle_TRT.c **** 							else
 720:Src/Eagle_TRT.c **** 							{
 721:Src/Eagle_TRT.c **** 								if (cont_comma == 1)
 722:Src/Eagle_TRT.c **** 								{ //save the time
 723:Src/Eagle_TRT.c **** 									gps->time[cont_time] = string_gps[i];
 724:Src/Eagle_TRT.c **** 									cont_time++;
 725:Src/Eagle_TRT.c **** 								}
 726:Src/Eagle_TRT.c **** 								else if (cont_comma == 2)
 727:Src/Eagle_TRT.c **** 								{ //save latitude
 728:Src/Eagle_TRT.c **** 									gps->latitude[cont_latitude] = string_gps[i];
 729:Src/Eagle_TRT.c **** 									cont_latitude++;
 730:Src/Eagle_TRT.c **** 								}
 731:Src/Eagle_TRT.c **** 								else if (cont_comma == 3)
 732:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 733:Src/Eagle_TRT.c **** 									gps->latitude_o[0] = string_gps[i];
 734:Src/Eagle_TRT.c **** 								}
 735:Src/Eagle_TRT.c **** 								else if (cont_comma == 4)
 736:Src/Eagle_TRT.c **** 								{ //save longitude
 737:Src/Eagle_TRT.c **** 									gps->longitude[cont_longitude] = string_gps[i];
 738:Src/Eagle_TRT.c **** 									cont_longitude++;
 739:Src/Eagle_TRT.c **** 								}
 740:Src/Eagle_TRT.c **** 								else if (cont_comma == 5)
 741:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 742:Src/Eagle_TRT.c **** 									gps->longitude_o[0] = string_gps[i];
 743:Src/Eagle_TRT.c **** 								}
 744:Src/Eagle_TRT.c **** 								else if (cont_comma == 6)
 745:Src/Eagle_TRT.c **** 								{
 746:Src/Eagle_TRT.c **** 									gps->fix_status = string_gps[i];
ARM GAS  /tmp/ccw660IW.s 			page 16


 747:Src/Eagle_TRT.c **** 								}
 748:Src/Eagle_TRT.c **** 								else if (cont_comma == 9)
 749:Src/Eagle_TRT.c **** 								{ //save altitude
 750:Src/Eagle_TRT.c **** 									gps->altitude[cont_altitude] = string_gps[i];
 751:Src/Eagle_TRT.c **** 									cont_altitude++;
 752:Src/Eagle_TRT.c **** 								}
 753:Src/Eagle_TRT.c **** 								else if (cont_comma == 10)
 754:Src/Eagle_TRT.c **** 								{
 755:Src/Eagle_TRT.c **** 									i = 100; //end the cicle
 756:Src/Eagle_TRT.c **** 								}
 757:Src/Eagle_TRT.c **** 							}
 758:Src/Eagle_TRT.c **** 						}
 759:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 760:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 761:Src/Eagle_TRT.c **** 						{
 762:Src/Eagle_TRT.c **** 							gps->latitude_i_h = 0;
 763:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 764:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
 765:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 766:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 767:Src/Eagle_TRT.c **** 						}
 768:Src/Eagle_TRT.c **** 						else
 769:Src/Eagle_TRT.c **** 						{
 770:Src/Eagle_TRT.c **** 							gps->latitude_i = (long int)(atof(gps->latitude) * 10000);
 771:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 772:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 773:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 774:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 775:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 776:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 777:Src/Eagle_TRT.c **** 						}
 778:Src/Eagle_TRT.c **** 
 779:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x08;
 780:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 781:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 782:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 783:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 784:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 785:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 786:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 787:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 788:Src/Eagle_TRT.c **** 						can.size = 8;
 789:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 790:Src/Eagle_TRT.c **** 					}
 791:Src/Eagle_TRT.c **** 					else
 792:Src/Eagle_TRT.c **** 					{
 793:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 794:Src/Eagle_TRT.c **** 					}
 795:Src/Eagle_TRT.c **** 				}
 796:Src/Eagle_TRT.c **** 				else if (string_gps[2] == 'V' && string_gps[3] == 'T' && string_gps[4] == 'G')
 797:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 798:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 799:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 800:Src/Eagle_TRT.c **** 						cont_comma = 0;
 801:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 802:Src/Eagle_TRT.c **** 						for (int i = 5; i < cont_string; i++)
 803:Src/Eagle_TRT.c **** 						{
ARM GAS  /tmp/ccw660IW.s 			page 17


 804:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 805:Src/Eagle_TRT.c **** 								cont_comma++;
 806:Src/Eagle_TRT.c **** 							else
 807:Src/Eagle_TRT.c **** 							{
 808:Src/Eagle_TRT.c **** 								if (cont_comma == 7)
 809:Src/Eagle_TRT.c **** 								{ //save the speed
 810:Src/Eagle_TRT.c **** 									gps->speed[cont_speed] = string_gps[i];
 811:Src/Eagle_TRT.c **** 									cont_speed++;
 812:Src/Eagle_TRT.c **** 								}
 813:Src/Eagle_TRT.c **** 								else if (cont_comma == 8)
 814:Src/Eagle_TRT.c **** 								{
 815:Src/Eagle_TRT.c **** 									i = cont_string;
 816:Src/Eagle_TRT.c **** 								}
 817:Src/Eagle_TRT.c **** 							}
 818:Src/Eagle_TRT.c **** 						}
 819:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 820:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 821:Src/Eagle_TRT.c **** 						{
 822:Src/Eagle_TRT.c **** 							gps->speed_i = 0;
 823:Src/Eagle_TRT.c **** 						}
 824:Src/Eagle_TRT.c **** 						else
 825:Src/Eagle_TRT.c **** 						{
 826:Src/Eagle_TRT.c **** 							gps->speed_i = (int)(atof(gps->speed) * 100);
 827:Src/Eagle_TRT.c **** 						}
 828:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x07;
 829:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 830:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 831:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 832:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 833:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 834:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 835:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 836:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 837:Src/Eagle_TRT.c **** 						can.size = 8;
 838:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 839:Src/Eagle_TRT.c **** 						ret = 1;
 840:Src/Eagle_TRT.c **** 					}
 841:Src/Eagle_TRT.c **** 					else
 842:Src/Eagle_TRT.c **** 					{
 843:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 844:Src/Eagle_TRT.c **** 					}
 845:Src/Eagle_TRT.c **** 				}
 846:Src/Eagle_TRT.c **** 			}
 847:Src/Eagle_TRT.c **** 		}
 848:Src/Eagle_TRT.c **** 		else
 849:Src/Eagle_TRT.c **** 		{
 850:Src/Eagle_TRT.c **** 			if (data_string_gps == '$')
 851:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 852:Src/Eagle_TRT.c **** 				start_string_gps = 1; //new string started
 853:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 854:Src/Eagle_TRT.c **** 			}
 855:Src/Eagle_TRT.c **** 		}
 856:Src/Eagle_TRT.c **** 	}
 857:Src/Eagle_TRT.c **** 	return ret;
 858:Src/Eagle_TRT.c **** }
 859:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
 860:Src/Eagle_TRT.c **** { //check the checksum
ARM GAS  /tmp/ccw660IW.s 			page 18


 117              		.loc 1 860 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL8:
 122 0000 70B5     		push	{r4, r5, r6, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 4, -16
 126              		.cfi_offset 5, -12
 127              		.cfi_offset 6, -8
 128              		.cfi_offset 14, -4
 129 0002 82B0     		sub	sp, sp, #8
 130              	.LCFI2:
 131              		.cfi_def_cfa_offset 24
 132              	.LVL9:
 861:Src/Eagle_TRT.c **** 	//return 1;
 862:Src/Eagle_TRT.c **** 
 863:Src/Eagle_TRT.c **** 	int res = 0;
 864:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 865:Src/Eagle_TRT.c **** 	int i = 0;
 866:Src/Eagle_TRT.c **** 
 867:Src/Eagle_TRT.c **** 	for (i = 0; (i < size_string_checksum) && (string_checksum[i] != '*'); i++)
 133              		.loc 1 867 0
 134 0004 0023     		movs	r3, #0
 863:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 135              		.loc 1 863 0
 136 0006 1C46     		mov	r4, r3
 137              	.LVL10:
 138              	.L6:
 139              		.loc 1 867 0 discriminator 1
 140 0008 8B42     		cmp	r3, r1
 141 000a 02DA     		bge	.L7
 142              		.loc 1 867 0 is_stmt 0 discriminator 3
 143 000c C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 144 000e 2A2A     		cmp	r2, #42
 145 0010 1ED1     		bne	.L8
 146              	.L7:
 868:Src/Eagle_TRT.c **** 	{
 869:Src/Eagle_TRT.c **** 		res = res ^ string_checksum[i];
 870:Src/Eagle_TRT.c **** 	}
 871:Src/Eagle_TRT.c **** 	char check[2] = {string_checksum[i + 1], string_checksum[i + 2]};
 147              		.loc 1 871 0 is_stmt 1
 148 0012 1844     		add	r0, r0, r3
 149              	.LVL11:
 150 0014 4578     		ldrb	r5, [r0, #1]	@ zero_extendqisi2
 151 0016 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 872:Src/Eagle_TRT.c **** 	char res_char[3];
 873:Src/Eagle_TRT.c **** 	sprintf(res_char, "%x", res);
 152              		.loc 1 873 0
 153 0018 2246     		mov	r2, r4
 154 001a 1949     		ldr	r1, .L17
 155              	.LVL12:
 156 001c 01A8     		add	r0, sp, #4
 157 001e FFF7FEFF 		bl	sprintf
 158              	.LVL13:
 874:Src/Eagle_TRT.c **** 	if (res < 17)
ARM GAS  /tmp/ccw660IW.s 			page 19


 159              		.loc 1 874 0
 160 0022 102C     		cmp	r4, #16
 161 0024 06DC     		bgt	.L9
 875:Src/Eagle_TRT.c **** 	{
 876:Src/Eagle_TRT.c **** 		res_char[1] = res_char[0];
 162              		.loc 1 876 0
 163 0026 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 164 002a 8DF80530 		strb	r3, [sp, #5]
 877:Src/Eagle_TRT.c **** 		res_char[0] = '0';
 165              		.loc 1 877 0
 166 002e 3023     		movs	r3, #48
 167 0030 8DF80430 		strb	r3, [sp, #4]
 168              	.L9:
 863:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 169              		.loc 1 863 0 discriminator 1
 170 0034 0023     		movs	r3, #0
 171              	.L10:
 172              	.LVL14:
 173              	.LBB2:
 878:Src/Eagle_TRT.c **** 	}
 879:Src/Eagle_TRT.c **** 	for (int j = 0; j < 2; j++)
 174              		.loc 1 879 0 discriminator 1
 175 0036 012B     		cmp	r3, #1
 176 0038 0DDD     		ble	.L12
 177              	.LBE2:
 880:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 881:Src/Eagle_TRT.c **** 		if ((int)res_char[j] >= 'a' && (int)res_char[j] <= 'f')
 882:Src/Eagle_TRT.c **** 		{
 883:Src/Eagle_TRT.c **** 			res_char[j] = (char)((int)res_char[j] + offset_maiusc);
 884:Src/Eagle_TRT.c **** 		}
 885:Src/Eagle_TRT.c **** 	}
 886:Src/Eagle_TRT.c **** 	if (res_char[0] == check[0] && res_char[1] == check[1])
 178              		.loc 1 886 0
 179 003a 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 180              	.LVL15:
 181 003e 9D42     		cmp	r5, r3
 182 0040 19D1     		bne	.L14
 183              		.loc 1 886 0 is_stmt 0 discriminator 1
 184 0042 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 185 0046 9E42     		cmp	r6, r3
 186 0048 17D0     		beq	.L15
 887:Src/Eagle_TRT.c **** 	{
 888:Src/Eagle_TRT.c **** 		return 1; //checksum is correct
 889:Src/Eagle_TRT.c **** 	}
 890:Src/Eagle_TRT.c **** 	else
 891:Src/Eagle_TRT.c **** 	{
 892:Src/Eagle_TRT.c **** 		return 0; //checksum failed
 187              		.loc 1 892 0 is_stmt 1
 188 004a 0020     		movs	r0, #0
 189              	.L5:
 893:Src/Eagle_TRT.c **** 	}
 894:Src/Eagle_TRT.c **** }
 190              		.loc 1 894 0
 191 004c 02B0     		add	sp, sp, #8
 192              	.LCFI3:
 193              		.cfi_remember_state
 194              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccw660IW.s 			page 20


 195              		@ sp needed
 196 004e 70BD     		pop	{r4, r5, r6, pc}
 197              	.LVL16:
 198              	.L8:
 199              	.LCFI4:
 200              		.cfi_restore_state
 869:Src/Eagle_TRT.c **** 	}
 201              		.loc 1 869 0 discriminator 4
 202 0050 5440     		eors	r4, r4, r2
 203              	.LVL17:
 867:Src/Eagle_TRT.c **** 	{
 204              		.loc 1 867 0 discriminator 4
 205 0052 0133     		adds	r3, r3, #1
 206              	.LVL18:
 207 0054 D8E7     		b	.L6
 208              	.LVL19:
 209              	.L12:
 210              	.LBB3:
 881:Src/Eagle_TRT.c **** 		{
 211              		.loc 1 881 0
 212 0056 02AA     		add	r2, sp, #8
 213 0058 1A44     		add	r2, r2, r3
 214 005a 12F8042C 		ldrb	r2, [r2, #-4]	@ zero_extendqisi2
 215 005e A2F16101 		sub	r1, r2, #97
 216 0062 C9B2     		uxtb	r1, r1
 217 0064 0529     		cmp	r1, #5
 218 0066 04D8     		bhi	.L11
 883:Src/Eagle_TRT.c **** 		}
 219              		.loc 1 883 0
 220 0068 203A     		subs	r2, r2, #32
 221 006a 02A9     		add	r1, sp, #8
 222 006c 1944     		add	r1, r1, r3
 223 006e 01F8042C 		strb	r2, [r1, #-4]
 224              	.L11:
 879:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 225              		.loc 1 879 0 discriminator 2
 226 0072 0133     		adds	r3, r3, #1
 227              	.LVL20:
 228 0074 DFE7     		b	.L10
 229              	.LVL21:
 230              	.L14:
 231              	.LBE3:
 892:Src/Eagle_TRT.c **** 	}
 232              		.loc 1 892 0
 233 0076 0020     		movs	r0, #0
 234 0078 E8E7     		b	.L5
 235              	.L15:
 888:Src/Eagle_TRT.c **** 	}
 236              		.loc 1 888 0
 237 007a 0120     		movs	r0, #1
 238 007c E6E7     		b	.L5
 239              	.L18:
 240 007e 00BF     		.align	2
 241              	.L17:
 242 0080 00000000 		.word	.LC0
 243              		.cfi_endproc
 244              	.LFE150:
ARM GAS  /tmp/ccw660IW.s 			page 21


 246              		.section	.text.send_config,"ax",%progbits
 247              		.align	1
 248              		.global	send_config
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	send_config:
 255              	.LFB131:
 128:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 256              		.loc 1 128 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL22:
 261 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 262              	.LCFI5:
 263              		.cfi_def_cfa_offset 24
 264              		.cfi_offset 4, -24
 265              		.cfi_offset 5, -20
 266              		.cfi_offset 6, -16
 267              		.cfi_offset 7, -12
 268              		.cfi_offset 8, -8
 269              		.cfi_offset 14, -4
 270 0004 0546     		mov	r5, r0
 271 0006 0E46     		mov	r6, r1
 272 0008 9046     		mov	r8, r2
 273 000a 1F46     		mov	r7, r3
 129:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 274              		.loc 1 129 0
 275 000c 0022     		movs	r2, #0
 276              	.LVL23:
 277 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 278              	.LVL24:
 130:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 279              		.loc 1 130 0
 280 0012 124B     		ldr	r3, .L23
 281 0014 1A68     		ldr	r2, [r3]
 282 0016 0023     		movs	r3, #0
 283 0018 5362     		str	r3, [r2, #36]
 284              	.L20:
 131:Src/Eagle_TRT.c **** 	{
 285              		.loc 1 131 0 discriminator 1
 286 001a 536A     		ldr	r3, [r2, #36]
 287 001c 142B     		cmp	r3, #20
 288 001e FCD9     		bls	.L20
 134:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu.hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 289              		.loc 1 134 0
 290 0020 0F4C     		ldr	r4, .L23+4
 291 0022 0A23     		movs	r3, #10
 292 0024 0122     		movs	r2, #1
 293 0026 4146     		mov	r1, r8
 294 0028 D4F82404 		ldr	r0, [r4, #1060]
 295 002c FFF7FEFF 		bl	HAL_SPI_Transmit
 296              	.LVL25:
 135:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 297              		.loc 1 135 0
ARM GAS  /tmp/ccw660IW.s 			page 22


 298 0030 0A23     		movs	r3, #10
 299 0032 0122     		movs	r2, #1
 300 0034 3946     		mov	r1, r7
 301 0036 D4F82404 		ldr	r0, [r4, #1060]
 302 003a FFF7FEFF 		bl	HAL_SPI_Transmit
 303              	.LVL26:
 136:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 304              		.loc 1 136 0
 305 003e 074B     		ldr	r3, .L23
 306 0040 1A68     		ldr	r2, [r3]
 307 0042 0023     		movs	r3, #0
 308 0044 5362     		str	r3, [r2, #36]
 309              	.L21:
 137:Src/Eagle_TRT.c **** 	{
 310              		.loc 1 137 0 discriminator 1
 311 0046 536A     		ldr	r3, [r2, #36]
 312 0048 142B     		cmp	r3, #20
 313 004a FCD9     		bls	.L21
 140:Src/Eagle_TRT.c **** }
 314              		.loc 1 140 0
 315 004c 0122     		movs	r2, #1
 316 004e 3146     		mov	r1, r6
 317 0050 2846     		mov	r0, r5
 318 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 319              	.LVL27:
 320 0056 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 321              	.LVL28:
 322              	.L24:
 323 005a 00BF     		.align	2
 324              	.L23:
 325 005c 00000000 		.word	htim2
 326 0060 00000000 		.word	imu
 327              		.cfi_endproc
 328              	.LFE131:
 330              		.section	.text.LSMD9S0_accel_gyro_init,"ax",%progbits
 331              		.align	1
 332              		.global	LSMD9S0_accel_gyro_init
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 336              		.fpu fpv4-sp-d16
 338              	LSMD9S0_accel_gyro_init:
 339              	.LFB132:
 147:Src/Eagle_TRT.c **** 
 340              		.loc 1 147 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              	.LVL29:
 345 0000 10B5     		push	{r4, lr}
 346              	.LCFI6:
 347              		.cfi_def_cfa_offset 8
 348              		.cfi_offset 4, -8
 349              		.cfi_offset 14, -4
 350 0002 0446     		mov	r4, r0
 149:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 351              		.loc 1 149 0
ARM GAS  /tmp/ccw660IW.s 			page 23


 352 0004 0122     		movs	r2, #1
 353 0006 4FF48071 		mov	r1, #256
 354 000a 2548     		ldr	r0, .L27
 355              	.LVL30:
 356 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 357              	.LVL31:
 150:Src/Eagle_TRT.c **** 
 358              		.loc 1 150 0
 359 0010 0122     		movs	r2, #1
 360 0012 4FF40071 		mov	r1, #512
 361 0016 2348     		ldr	r0, .L27+4
 362 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 363              	.LVL32:
 152:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_XM_ADD, (uint8_t *)&CTRL_
 364              		.loc 1 152 0
 365 001c 224B     		ldr	r3, .L27+8
 366 001e 234A     		ldr	r2, .L27+12
 367 0020 B4F81814 		ldrh	r1, [r4, #1048]
 368 0024 D4F81404 		ldr	r0, [r4, #1044]
 369 0028 FFF7FEFF 		bl	send_config
 370              	.LVL33:
 153:Src/Eagle_TRT.c **** 
 371              		.loc 1 153 0
 372 002c 204B     		ldr	r3, .L27+16
 373 002e 214A     		ldr	r2, .L27+20
 374 0030 B4F81814 		ldrh	r1, [r4, #1048]
 375 0034 D4F81404 		ldr	r0, [r4, #1044]
 376 0038 FFF7FEFF 		bl	send_config
 377              	.LVL34:
 155:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&SCL_G_500)
 378              		.loc 1 155 0
 379 003c 1E4B     		ldr	r3, .L27+24
 380 003e 1F4A     		ldr	r2, .L27+28
 381 0040 B4F81814 		ldrh	r1, [r4, #1048]
 382 0044 D4F81404 		ldr	r0, [r4, #1044]
 383 0048 FFF7FEFF 		bl	send_config
 384              	.LVL35:
 156:Src/Eagle_TRT.c **** 
 385              		.loc 1 156 0
 386 004c 1C4B     		ldr	r3, .L27+32
 387 004e 1D4A     		ldr	r2, .L27+36
 388 0050 B4F81814 		ldrh	r1, [r4, #1048]
 389 0054 D4F81404 		ldr	r0, [r4, #1044]
 390 0058 FFF7FEFF 		bl	send_config
 391              	.LVL36:
 158:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8_t *)&CTRL_
 392              		.loc 1 158 0
 393 005c 1A4B     		ldr	r3, .L27+40
 394 005e 1B4A     		ldr	r2, .L27+44
 395 0060 B4F81814 		ldrh	r1, [r4, #1048]
 396 0064 D4F81404 		ldr	r0, [r4, #1044]
 397 0068 FFF7FEFF 		bl	send_config
 398              	.LVL37:
 159:Src/Eagle_TRT.c **** 	send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8_t *)&CTRL_
 399              		.loc 1 159 0
 400 006c 184B     		ldr	r3, .L27+48
 401 006e 194A     		ldr	r2, .L27+52
ARM GAS  /tmp/ccw660IW.s 			page 24


 402 0070 B4F81814 		ldrh	r1, [r4, #1048]
 403 0074 D4F81404 		ldr	r0, [r4, #1044]
 404 0078 FFF7FEFF 		bl	send_config
 405              	.LVL38:
 160:Src/Eagle_TRT.c **** 
 406              		.loc 1 160 0
 407 007c 164B     		ldr	r3, .L27+56
 408 007e 174A     		ldr	r2, .L27+60
 409 0080 B4F81814 		ldrh	r1, [r4, #1048]
 410 0084 D4F81404 		ldr	r0, [r4, #1044]
 411 0088 FFF7FEFF 		bl	send_config
 412              	.LVL39:
 162:Src/Eagle_TRT.c **** 
 413              		.loc 1 162 0
 414 008c 0120     		movs	r0, #1
 415 008e FFF7FEFF 		bl	HAL_Delay
 416              	.LVL40:
 164:Src/Eagle_TRT.c **** }
 417              		.loc 1 164 0
 418 0092 0A23     		movs	r3, #10
 419 0094 1A22     		movs	r2, #26
 420 0096 1249     		ldr	r1, .L27+64
 421 0098 1248     		ldr	r0, .L27+68
 422 009a FFF7FEFF 		bl	HAL_UART_Transmit
 423              	.LVL41:
 424 009e 10BD     		pop	{r4, pc}
 425              	.LVL42:
 426              	.L28:
 427              		.align	2
 428              	.L27:
 429 00a0 00000240 		.word	1073872896
 430 00a4 00080240 		.word	1073874944
 431 00a8 00000000 		.word	.LANCHOR0
 432 00ac 00000000 		.word	.LANCHOR1
 433 00b0 00000000 		.word	.LANCHOR2
 434 00b4 00000000 		.word	.LANCHOR3
 435 00b8 00000000 		.word	.LANCHOR4
 436 00bc 00000000 		.word	.LANCHOR5
 437 00c0 00000000 		.word	.LANCHOR6
 438 00c4 00000000 		.word	.LANCHOR7
 439 00c8 00000000 		.word	.LANCHOR8
 440 00cc 00000000 		.word	.LANCHOR9
 441 00d0 00000000 		.word	.LANCHOR10
 442 00d4 00000000 		.word	.LANCHOR11
 443 00d8 00000000 		.word	.LANCHOR12
 444 00dc 00000000 		.word	.LANCHOR13
 445 00e0 00000000 		.word	.LC1
 446 00e4 00000000 		.word	huart2
 447              		.cfi_endproc
 448              	.LFE132:
 450              		.section	.text.LSMD9S0_read,"ax",%progbits
 451              		.align	1
 452              		.global	LSMD9S0_read
 453              		.syntax unified
 454              		.thumb
 455              		.thumb_func
 456              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccw660IW.s 			page 25


 458              	LSMD9S0_read:
 459              	.LFB133:
 168:Src/Eagle_TRT.c **** 
 460              		.loc 1 168 0
 461              		.cfi_startproc
 462              		@ args = 0, pretend = 0, frame = 8
 463              		@ frame_needed = 0, uses_anonymous_args = 0
 464              	.LVL43:
 465 0000 10B5     		push	{r4, lr}
 466              	.LCFI7:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 4, -8
 469              		.cfi_offset 14, -4
 470 0002 82B0     		sub	sp, sp, #8
 471              	.LCFI8:
 472              		.cfi_def_cfa_offset 16
 473 0004 0446     		mov	r4, r0
 178:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 474              		.loc 1 178 0
 475 0006 0022     		movs	r2, #0
 476 0008 B0F81814 		ldrh	r1, [r0, #1048]
 477 000c D0F81404 		ldr	r0, [r0, #1044]
 478              	.LVL44:
 479 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 480              	.LVL45:
 179:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 481              		.loc 1 179 0
 482 0014 2E4B     		ldr	r3, .L35
 483 0016 1A68     		ldr	r2, [r3]
 484 0018 0023     		movs	r3, #0
 485 001a 5362     		str	r3, [r2, #36]
 486              	.L30:
 180:Src/Eagle_TRT.c **** 	{
 487              		.loc 1 180 0 discriminator 1
 488 001c 536A     		ldr	r3, [r2, #36]
 489 001e 142B     		cmp	r3, #20
 490 0020 FCD9     		bls	.L30
 184:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 491              		.loc 1 184 0
 492 0022 0A23     		movs	r3, #10
 493 0024 0122     		movs	r2, #1
 494 0026 04F22241 		addw	r1, r4, #1058
 495 002a D4F82404 		ldr	r0, [r4, #1060]
 496 002e FFF7FEFF 		bl	HAL_SPI_Transmit
 497              	.LVL46:
 185:Src/Eagle_TRT.c **** 
 498              		.loc 1 185 0
 499 0032 0A23     		movs	r3, #10
 500 0034 0122     		movs	r2, #1
 501 0036 0DF10701 		add	r1, sp, #7
 502 003a D4F82404 		ldr	r0, [r4, #1060]
 503 003e FFF7FEFF 		bl	HAL_SPI_Receive
 504              	.LVL47:
 187:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 505              		.loc 1 187 0
 506 0042 234B     		ldr	r3, .L35
 507 0044 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccw660IW.s 			page 26


 508 0046 0023     		movs	r3, #0
 509 0048 5362     		str	r3, [r2, #36]
 510              	.L31:
 188:Src/Eagle_TRT.c **** 	{
 511              		.loc 1 188 0 discriminator 1
 512 004a 536A     		ldr	r3, [r2, #36]
 513 004c 142B     		cmp	r3, #20
 514 004e FCD9     		bls	.L31
 191:Src/Eagle_TRT.c **** 
 515              		.loc 1 191 0
 516 0050 0122     		movs	r2, #1
 517 0052 B4F81814 		ldrh	r1, [r4, #1048]
 518 0056 D4F81404 		ldr	r0, [r4, #1044]
 519 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 520              	.LVL48:
 193:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 521              		.loc 1 193 0
 522 005e 1C4B     		ldr	r3, .L35
 523 0060 1A68     		ldr	r2, [r3]
 524 0062 0023     		movs	r3, #0
 525 0064 5362     		str	r3, [r2, #36]
 526              	.L32:
 194:Src/Eagle_TRT.c **** 	{
 527              		.loc 1 194 0 discriminator 1
 528 0066 536A     		ldr	r3, [r2, #36]
 529 0068 142B     		cmp	r3, #20
 530 006a FCD9     		bls	.L32
 197:Src/Eagle_TRT.c **** 
 531              		.loc 1 197 0
 532 006c 0022     		movs	r2, #0
 533 006e B4F81814 		ldrh	r1, [r4, #1048]
 534 0072 D4F81404 		ldr	r0, [r4, #1044]
 535 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 536              	.LVL49:
 199:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 537              		.loc 1 199 0
 538 007a 0A23     		movs	r3, #10
 539 007c 0122     		movs	r2, #1
 540 007e 04F22341 		addw	r1, r4, #1059
 541 0082 D4F82404 		ldr	r0, [r4, #1060]
 542 0086 FFF7FEFF 		bl	HAL_SPI_Transmit
 543              	.LVL50:
 200:Src/Eagle_TRT.c **** 
 544              		.loc 1 200 0
 545 008a 0A23     		movs	r3, #10
 546 008c 0122     		movs	r2, #1
 547 008e 0DF10601 		add	r1, sp, #6
 548 0092 D4F82404 		ldr	r0, [r4, #1060]
 549 0096 FFF7FEFF 		bl	HAL_SPI_Receive
 550              	.LVL51:
 202:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 551              		.loc 1 202 0
 552 009a 0D4B     		ldr	r3, .L35
 553 009c 1A68     		ldr	r2, [r3]
 554 009e 0023     		movs	r3, #0
 555 00a0 5362     		str	r3, [r2, #36]
 556              	.L33:
ARM GAS  /tmp/ccw660IW.s 			page 27


 203:Src/Eagle_TRT.c **** 	{
 557              		.loc 1 203 0 discriminator 1
 558 00a2 536A     		ldr	r3, [r2, #36]
 559 00a4 142B     		cmp	r3, #20
 560 00a6 FCD9     		bls	.L33
 207:Src/Eagle_TRT.c **** 
 561              		.loc 1 207 0
 562 00a8 0122     		movs	r2, #1
 563 00aa B4F81814 		ldrh	r1, [r4, #1048]
 564 00ae D4F81404 		ldr	r0, [r4, #1044]
 565 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 566              	.LVL52:
 210:Src/Eagle_TRT.c **** 	float axis = value;
 567              		.loc 1 210 0
 568 00b6 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 569 00ba 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 570 00be 43EA0223 		orr	r3, r3, r2, lsl #8
 571 00c2 00EE103A 		vmov	s0, r3	@ int
 572              	.LVL53:
 221:Src/Eagle_TRT.c **** 
 573              		.loc 1 221 0
 574 00c6 B8EE400A 		vcvt.f32.u32	s0, s0
 575              	.LVL54:
 576 00ca 02B0     		add	sp, sp, #8
 577              	.LCFI9:
 578              		.cfi_def_cfa_offset 8
 579              		@ sp needed
 580 00cc 10BD     		pop	{r4, pc}
 581              	.LVL55:
 582              	.L36:
 583 00ce 00BF     		.align	2
 584              	.L35:
 585 00d0 00000000 		.word	htim2
 586              		.cfi_endproc
 587              	.LFE133:
 589              		.section	.text.LSMD9S0_check,"ax",%progbits
 590              		.align	1
 591              		.global	LSMD9S0_check
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu fpv4-sp-d16
 597              	LSMD9S0_check:
 598              	.LFB134:
 224:Src/Eagle_TRT.c **** 
 599              		.loc 1 224 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 0
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 603              	.LVL56:
 604 0000 10B5     		push	{r4, lr}
 605              	.LCFI10:
 606              		.cfi_def_cfa_offset 8
 607              		.cfi_offset 4, -8
 608              		.cfi_offset 14, -4
 609 0002 0446     		mov	r4, r0
 610              	.LVL57:
ARM GAS  /tmp/ccw660IW.s 			page 28


 229:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 611              		.loc 1 229 0
 612 0004 0022     		movs	r2, #0
 613 0006 4FF40071 		mov	r1, #512
 614 000a 2C48     		ldr	r0, .L46
 615              	.LVL58:
 616 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 617              	.LVL59:
 230:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 618              		.loc 1 230 0
 619 0010 2B4B     		ldr	r3, .L46+4
 620 0012 1A68     		ldr	r2, [r3]
 621 0014 0023     		movs	r3, #0
 622 0016 5362     		str	r3, [r2, #36]
 623              	.L38:
 231:Src/Eagle_TRT.c **** 	{
 624              		.loc 1 231 0 discriminator 1
 625 0018 536A     		ldr	r3, [r2, #36]
 626 001a 142B     		cmp	r3, #20
 627 001c FCD9     		bls	.L38
 234:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_XM_VAL, 1, 10); ///Readi
 628              		.loc 1 234 0
 629 001e 0A23     		movs	r3, #10
 630 0020 0122     		movs	r2, #1
 631 0022 2849     		ldr	r1, .L46+8
 632 0024 D4F82404 		ldr	r0, [r4, #1060]
 633 0028 FFF7FEFF 		bl	HAL_SPI_Transmit
 634              	.LVL60:
 236:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 635              		.loc 1 236 0
 636 002c 0A23     		movs	r3, #10
 637 002e 0122     		movs	r2, #1
 638 0030 2549     		ldr	r1, .L46+12
 639 0032 D4F82404 		ldr	r0, [r4, #1060]
 640 0036 FFF7FEFF 		bl	HAL_SPI_Receive
 641              	.LVL61:
 237:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 642              		.loc 1 237 0
 643 003a 214B     		ldr	r3, .L46+4
 644 003c 1A68     		ldr	r2, [r3]
 645 003e 0023     		movs	r3, #0
 646 0040 5362     		str	r3, [r2, #36]
 647              	.L39:
 238:Src/Eagle_TRT.c **** 	{
 648              		.loc 1 238 0 discriminator 1
 649 0042 536A     		ldr	r3, [r2, #36]
 650 0044 142B     		cmp	r3, #20
 651 0046 FCD9     		bls	.L39
 241:Src/Eagle_TRT.c **** 
 652              		.loc 1 241 0
 653 0048 0122     		movs	r2, #1
 654 004a 4FF40071 		mov	r1, #512
 655 004e 1B48     		ldr	r0, .L46
 656 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 657              	.LVL62:
 244:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 658              		.loc 1 244 0
ARM GAS  /tmp/ccw660IW.s 			page 29


 659 0054 0022     		movs	r2, #0
 660 0056 4FF48071 		mov	r1, #256
 661 005a 1C48     		ldr	r0, .L46+16
 662 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 663              	.LVL63:
 245:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 664              		.loc 1 245 0
 665 0060 174B     		ldr	r3, .L46+4
 666 0062 1A68     		ldr	r2, [r3]
 667 0064 0023     		movs	r3, #0
 668 0066 5362     		str	r3, [r2, #36]
 669              	.L40:
 246:Src/Eagle_TRT.c **** 	{
 670              		.loc 1 246 0 discriminator 1
 671 0068 536A     		ldr	r3, [r2, #36]
 672 006a 142B     		cmp	r3, #20
 673 006c FCD9     		bls	.L40
 249:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 674              		.loc 1 249 0
 675 006e 0A23     		movs	r3, #10
 676 0070 0122     		movs	r2, #1
 677 0072 1749     		ldr	r1, .L46+20
 678 0074 D4F82404 		ldr	r0, [r4, #1060]
 679 0078 FFF7FEFF 		bl	HAL_SPI_Transmit
 680              	.LVL64:
 251:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 681              		.loc 1 251 0
 682 007c 0A23     		movs	r3, #10
 683 007e 0122     		movs	r2, #1
 684 0080 1449     		ldr	r1, .L46+24
 685 0082 D4F82404 		ldr	r0, [r4, #1060]
 686 0086 FFF7FEFF 		bl	HAL_SPI_Receive
 687              	.LVL65:
 252:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 688              		.loc 1 252 0
 689 008a 0D4B     		ldr	r3, .L46+4
 690 008c 1A68     		ldr	r2, [r3]
 691 008e 0023     		movs	r3, #0
 692 0090 5362     		str	r3, [r2, #36]
 693              	.L41:
 253:Src/Eagle_TRT.c **** 	{
 694              		.loc 1 253 0 discriminator 1
 695 0092 536A     		ldr	r3, [r2, #36]
 696 0094 142B     		cmp	r3, #20
 697 0096 FCD9     		bls	.L41
 256:Src/Eagle_TRT.c **** 
 698              		.loc 1 256 0
 699 0098 0122     		movs	r2, #1
 700 009a 4FF48071 		mov	r1, #256
 701 009e 0B48     		ldr	r0, .L46+16
 702 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 703              	.LVL66:
 264:Src/Eagle_TRT.c **** 	{
 704              		.loc 1 264 0
 705 00a4 0B4B     		ldr	r3, .L46+24
 706 00a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 707 00a8 074B     		ldr	r3, .L46+12
ARM GAS  /tmp/ccw660IW.s 			page 30


 708 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 709 00ac D42A     		cmp	r2, #212
 710 00ae 08BF     		it	eq
 711 00b0 492B     		cmpeq	r3, #73
 712 00b2 01D0     		beq	.L45
 271:Src/Eagle_TRT.c **** 		//HAL_UART_Transmit(&huart2, (uint8_t*)"imu int failed\r\n", 16, 10);
 713              		.loc 1 271 0
 714 00b4 0020     		movs	r0, #0
 276:Src/Eagle_TRT.c **** 
 715              		.loc 1 276 0
 716 00b6 10BD     		pop	{r4, pc}
 717              	.LVL67:
 718              	.L45:
 266:Src/Eagle_TRT.c **** 		//HAL_UART_Transmit(&huart2, (uint8_t*)"imu int correct\r\n", 17, 10);
 719              		.loc 1 266 0
 720 00b8 0120     		movs	r0, #1
 721 00ba 10BD     		pop	{r4, pc}
 722              	.LVL68:
 723              	.L47:
 724              		.align	2
 725              	.L46:
 726 00bc 00080240 		.word	1073874944
 727 00c0 00000000 		.word	htim2
 728 00c4 00000000 		.word	.LANCHOR14
 729 00c8 00000000 		.word	WHO_AM_I_XM_VAL
 730 00cc 00000240 		.word	1073872896
 731 00d0 00000000 		.word	.LANCHOR15
 732 00d4 00000000 		.word	WHO_AM_I_G_VAL
 733              		.cfi_endproc
 734              	.LFE134:
 736              		.section	.text.LSM9DS0_calibration,"ax",%progbits
 737              		.align	1
 738              		.global	LSM9DS0_calibration
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu fpv4-sp-d16
 744              	LSM9DS0_calibration:
 745              	.LFB135:
 279:Src/Eagle_TRT.c **** 	long int x = 0, y = 0, z = 0;
 746              		.loc 1 279 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751              	.LVL69:
 291:Src/Eagle_TRT.c **** 	imu->Y_A_axis_offset = y / iterations;
 752              		.loc 1 291 0
 753 0000 0023     		movs	r3, #0
 754 0002 4362     		str	r3, [r0, #36]	@ float
 292:Src/Eagle_TRT.c **** 	imu->Z_A_axis_offset = z / iterations;
 755              		.loc 1 292 0
 756 0004 8362     		str	r3, [r0, #40]	@ float
 293:Src/Eagle_TRT.c **** 
 757              		.loc 1 293 0
 758 0006 C362     		str	r3, [r0, #44]	@ float
 295:Src/Eagle_TRT.c **** }
ARM GAS  /tmp/ccw660IW.s 			page 31


 759              		.loc 1 295 0
 760 0008 0123     		movs	r3, #1
 761 000a C0F80834 		str	r3, [r0, #1032]
 762 000e 7047     		bx	lr
 763              		.cfi_endproc
 764              	.LFE135:
 766              		.section	.text.LSMD9S0_accel_read,"ax",%progbits
 767              		.align	1
 768              		.global	LSMD9S0_accel_read
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 772              		.fpu fpv4-sp-d16
 774              	LSMD9S0_accel_read:
 775              	.LFB137:
 379:Src/Eagle_TRT.c **** 
 776              		.loc 1 379 0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              	.LVL70:
 781 0000 10B5     		push	{r4, lr}
 782              	.LCFI11:
 783              		.cfi_def_cfa_offset 8
 784              		.cfi_offset 4, -8
 785              		.cfi_offset 14, -4
 786 0002 0446     		mov	r4, r0
 381:Src/Eagle_TRT.c **** 
 787              		.loc 1 381 0
 788 0004 00F58263 		add	r3, r0, #1040
 789 0008 374A     		ldr	r2, .L60
 790 000a 1A60     		str	r2, [r3]	@ float
 383:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_9;
 791              		.loc 1 383 0
 792 000c 374B     		ldr	r3, .L60+4
 793 000e C0F81434 		str	r3, [r0, #1044]
 384:Src/Eagle_TRT.c **** 
 794              		.loc 1 384 0
 795 0012 4FF40073 		mov	r3, #512
 796 0016 A0F81834 		strh	r3, [r0, #1048]	@ movhi
 386:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_A_ADD;
 797              		.loc 1 386 0
 798 001a 354B     		ldr	r3, .L60+8
 799 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 800 001e 80F82334 		strb	r3, [r0, #1059]
 387:Src/Eagle_TRT.c **** 	imu->X_A_axis = LSMD9S0_read(imu);
 801              		.loc 1 387 0
 802 0022 344B     		ldr	r3, .L60+12
 803 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 804 0026 80F82234 		strb	r3, [r0, #1058]
 388:Src/Eagle_TRT.c **** 
 805              		.loc 1 388 0
 806 002a FFF7FEFF 		bl	LSMD9S0_read
 807              	.LVL71:
 808 002e 84ED060A 		vstr.32	s0, [r4, #24]
 392:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_A_ADD;
 809              		.loc 1 392 0
ARM GAS  /tmp/ccw660IW.s 			page 32


 810 0032 314B     		ldr	r3, .L60+16
 811 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 812 0036 84F82334 		strb	r3, [r4, #1059]
 393:Src/Eagle_TRT.c **** 	imu->Y_A_axis = LSMD9S0_read(imu);
 813              		.loc 1 393 0
 814 003a 304B     		ldr	r3, .L60+20
 815 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 816 003e 84F82234 		strb	r3, [r4, #1058]
 394:Src/Eagle_TRT.c **** 	//imu->Y_A_axis = imu->Y_A_axis - imu->Y_A_axis_offset;
 817              		.loc 1 394 0
 818 0042 2046     		mov	r0, r4
 819 0044 FFF7FEFF 		bl	LSMD9S0_read
 820              	.LVL72:
 821 0048 84ED070A 		vstr.32	s0, [r4, #28]
 397:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_A_ADD;
 822              		.loc 1 397 0
 823 004c 2C4B     		ldr	r3, .L60+24
 824 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 825 0050 84F82334 		strb	r3, [r4, #1059]
 398:Src/Eagle_TRT.c **** 	imu->Z_A_axis = LSMD9S0_read(imu);
 826              		.loc 1 398 0
 827 0054 2B4B     		ldr	r3, .L60+28
 828 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 829 0058 84F82234 		strb	r3, [r4, #1058]
 399:Src/Eagle_TRT.c **** 	//imu->Z_A_axis = imu->Z_A_axis - imu->Z_A_axis_offset + 9.81;
 830              		.loc 1 399 0
 831 005c 2046     		mov	r0, r4
 832 005e FFF7FEFF 		bl	LSMD9S0_read
 833              	.LVL73:
 834 0062 84ED080A 		vstr.32	s0, [r4, #32]
 402:Src/Eagle_TRT.c **** 	{
 835              		.loc 1 402 0
 836 0066 D4F80834 		ldr	r3, [r4, #1032]
 837 006a E3B3     		cbz	r3, .L49
 405:Src/Eagle_TRT.c **** 		imu->Y_A_axis -= imu->Y_A_axis_offset;
 838              		.loc 1 405 0
 839 006c D4ED097A 		vldr.32	s15, [r4, #36]
 840 0070 94ED067A 		vldr.32	s14, [r4, #24]
 841 0074 37EE677A 		vsub.f32	s14, s14, s15
 842 0078 84ED067A 		vstr.32	s14, [r4, #24]
 406:Src/Eagle_TRT.c **** 		imu->Z_A_axis -= imu->Z_A_axis_offset;
 843              		.loc 1 406 0
 844 007c D4ED0A6A 		vldr.32	s13, [r4, #40]
 845 0080 D4ED077A 		vldr.32	s15, [r4, #28]
 846 0084 77EEE67A 		vsub.f32	s15, s15, s13
 847 0088 C4ED077A 		vstr.32	s15, [r4, #28]
 407:Src/Eagle_TRT.c **** 
 848              		.loc 1 407 0
 849 008c D4ED0B6A 		vldr.32	s13, [r4, #44]
 850 0090 30EE660A 		vsub.f32	s0, s0, s13
 851 0094 84ED080A 		vstr.32	s0, [r4, #32]
 409:Src/Eagle_TRT.c **** 		{
 852              		.loc 1 409 0
 853 0098 DFED1B6A 		vldr.32	s13, .L60+32
 854 009c B4EEE67A 		vcmpe.f32	s14, s13
 855 00a0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 856 00a4 05DD     		ble	.L51
ARM GAS  /tmp/ccw660IW.s 			page 33


 411:Src/Eagle_TRT.c **** 		}
 857              		.loc 1 411 0
 858 00a6 DFED196A 		vldr.32	s13, .L60+36
 859 00aa 37EE667A 		vsub.f32	s14, s14, s13
 860 00ae 84ED067A 		vstr.32	s14, [r4, #24]
 861              	.L51:
 413:Src/Eagle_TRT.c **** 		{
 862              		.loc 1 413 0
 863 00b2 9FED157A 		vldr.32	s14, .L60+32
 864 00b6 F4EEC77A 		vcmpe.f32	s15, s14
 865 00ba F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 866 00be 05DD     		ble	.L53
 415:Src/Eagle_TRT.c **** 		}
 867              		.loc 1 415 0
 868 00c0 9FED127A 		vldr.32	s14, .L60+36
 869 00c4 77EEC77A 		vsub.f32	s15, s15, s14
 870 00c8 C4ED077A 		vstr.32	s15, [r4, #28]
 871              	.L53:
 417:Src/Eagle_TRT.c **** 		{
 872              		.loc 1 417 0
 873 00cc DFED0E7A 		vldr.32	s15, .L60+32
 874 00d0 B4EEE70A 		vcmpe.f32	s0, s15
 875 00d4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 876 00d8 05DD     		ble	.L49
 419:Src/Eagle_TRT.c **** 		}
 877              		.loc 1 419 0
 878 00da DFED0C7A 		vldr.32	s15, .L60+36
 879 00de 30EE670A 		vsub.f32	s0, s0, s15
 880 00e2 84ED080A 		vstr.32	s0, [r4, #32]
 881              	.L49:
 882 00e6 10BD     		pop	{r4, pc}
 883              	.LVL74:
 884              	.L61:
 885              		.align	2
 886              	.L60:
 887 00e8 2B009D3A 		.word	983367723
 888 00ec 00080240 		.word	1073874944
 889 00f0 00000000 		.word	.LANCHOR16
 890 00f4 00000000 		.word	.LANCHOR17
 891 00f8 00000000 		.word	.LANCHOR18
 892 00fc 00000000 		.word	.LANCHOR19
 893 0100 00000000 		.word	.LANCHOR20
 894 0104 00000000 		.word	.LANCHOR21
 895 0108 00000047 		.word	1191182336
 896 010c 00008047 		.word	1199570944
 897              		.cfi_endproc
 898              	.LFE137:
 900              		.section	.text.CAN_Send,"ax",%progbits
 901              		.align	1
 902              		.global	CAN_Send
 903              		.syntax unified
 904              		.thumb
 905              		.thumb_func
 906              		.fpu fpv4-sp-d16
 908              	CAN_Send:
 909              	.LFB138:
 443:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccw660IW.s 			page 34


 910              		.loc 1 443 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 32
 913              		@ frame_needed = 0, uses_anonymous_args = 0
 914              	.LVL75:
 915 0000 10B5     		push	{r4, lr}
 916              	.LCFI12:
 917              		.cfi_def_cfa_offset 8
 918              		.cfi_offset 4, -8
 919              		.cfi_offset 14, -4
 920 0002 88B0     		sub	sp, sp, #32
 921              	.LCFI13:
 922              		.cfi_def_cfa_offset 40
 923 0004 0446     		mov	r4, r0
 924              	.LVL76:
 449:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 925              		.loc 1 449 0
 926 0006 0368     		ldr	r3, [r0]
 927 0008 0193     		str	r3, [sp, #4]
 450:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 928              		.loc 1 450 0
 929 000a 0023     		movs	r3, #0
 930 000c 0393     		str	r3, [sp, #12]
 451:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 931              		.loc 1 451 0
 932 000e 0493     		str	r3, [sp, #16]
 452:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 933              		.loc 1 452 0
 934 0010 4268     		ldr	r2, [r0, #4]
 935 0012 0592     		str	r2, [sp, #20]
 453:Src/Eagle_TRT.c **** 
 936              		.loc 1 453 0
 937 0014 8DF81830 		strb	r3, [sp, #24]
 455:Src/Eagle_TRT.c **** 	{
 938              		.loc 1 455 0
 939 0018 8069     		ldr	r0, [r0, #24]
 940              	.LVL77:
 941 001a FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 942              	.LVL78:
 943 001e 10B9     		cbnz	r0, .L67
 446:Src/Eagle_TRT.c **** 
 944              		.loc 1 446 0
 945 0020 0020     		movs	r0, #0
 946              	.LVL79:
 947              	.L63:
 462:Src/Eagle_TRT.c **** 
 948              		.loc 1 462 0
 949 0022 08B0     		add	sp, sp, #32
 950              	.LCFI14:
 951              		.cfi_remember_state
 952              		.cfi_def_cfa_offset 8
 953              		@ sp needed
 954 0024 10BD     		pop	{r4, pc}
 955              	.LVL80:
 956              	.L67:
 957              	.LCFI15:
 958              		.cfi_restore_state
ARM GAS  /tmp/ccw660IW.s 			page 35


 455:Src/Eagle_TRT.c **** 	{
 959              		.loc 1 455 0 discriminator 1
 960 0026 0121     		movs	r1, #1
 961 0028 A069     		ldr	r0, [r4, #24]
 962 002a FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 963              	.LVL81:
 964 002e 08B1     		cbz	r0, .L68
 446:Src/Eagle_TRT.c **** 
 965              		.loc 1 446 0
 966 0030 0020     		movs	r0, #0
 967 0032 F6E7     		b	.L63
 968              	.L68:
 457:Src/Eagle_TRT.c **** 		flag = 1;
 969              		.loc 1 457 0
 970 0034 07AB     		add	r3, sp, #28
 971 0036 04F10802 		add	r2, r4, #8
 972 003a 01A9     		add	r1, sp, #4
 973 003c A069     		ldr	r0, [r4, #24]
 974 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 975              	.LVL82:
 458:Src/Eagle_TRT.c **** 	}
 976              		.loc 1 458 0
 977 0042 0120     		movs	r0, #1
 978 0044 EDE7     		b	.L63
 979              		.cfi_endproc
 980              	.LFE138:
 982              		.section	.text.CAN_Receive,"ax",%progbits
 983              		.align	1
 984              		.global	CAN_Receive
 985              		.syntax unified
 986              		.thumb
 987              		.thumb_func
 988              		.fpu fpv4-sp-d16
 990              	CAN_Receive:
 991              	.LFB139:
 470:Src/Eagle_TRT.c **** 
 992              		.loc 1 470 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 32
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              	.LVL83:
 997 0000 10B5     		push	{r4, lr}
 998              	.LCFI16:
 999              		.cfi_def_cfa_offset 8
 1000              		.cfi_offset 4, -8
 1001              		.cfi_offset 14, -4
 1002 0002 88B0     		sub	sp, sp, #32
 1003              	.LCFI17:
 1004              		.cfi_def_cfa_offset 40
 1005 0004 0446     		mov	r4, r0
 474:Src/Eagle_TRT.c **** 	{
 1006              		.loc 1 474 0
 1007 0006 0021     		movs	r1, #0
 1008 0008 8069     		ldr	r0, [r0, #24]
 1009              	.LVL84:
 1010 000a FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 1011              	.LVL85:
ARM GAS  /tmp/ccw660IW.s 			page 36


 1012 000e 10B9     		cbnz	r0, .L72
 1013              	.L70:
 1014              	.LVL86:
 482:Src/Eagle_TRT.c **** #endif
 1015              		.loc 1 482 0
 1016 0010 0198     		ldr	r0, [sp, #4]
 1017 0012 08B0     		add	sp, sp, #32
 1018              	.LCFI18:
 1019              		.cfi_remember_state
 1020              		.cfi_def_cfa_offset 8
 1021              		@ sp needed
 1022 0014 10BD     		pop	{r4, pc}
 1023              	.LVL87:
 1024              	.L72:
 1025              	.LCFI19:
 1026              		.cfi_restore_state
 476:Src/Eagle_TRT.c **** 	}
 1027              		.loc 1 476 0
 1028 0016 04F11003 		add	r3, r4, #16
 1029 001a 01AA     		add	r2, sp, #4
 1030 001c 0021     		movs	r1, #0
 1031 001e A069     		ldr	r0, [r4, #24]
 1032 0020 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1033              	.LVL88:
 1034 0024 F4E7     		b	.L70
 1035              		.cfi_endproc
 1036              	.LFE139:
 1038              		.section	.text.init,"ax",%progbits
 1039              		.align	1
 1040              		.global	init
 1041              		.syntax unified
 1042              		.thumb
 1043              		.thumb_func
 1044              		.fpu fpv4-sp-d16
 1046              	init:
 1047              	.LFB141:
 497:Src/Eagle_TRT.c **** 
 1048              		.loc 1 497 0
 1049              		.cfi_startproc
 1050              		@ args = 0, pretend = 0, frame = 0
 1051              		@ frame_needed = 0, uses_anonymous_args = 0
 1052              		@ link register save eliminated.
 1053              	.LVL89:
 499:Src/Eagle_TRT.c **** 	q->dim = 40;
 1054              		.loc 1 499 0
 1055 0000 0023     		movs	r3, #0
 1056 0002 0360     		str	r3, [r0]
 1057 0004 4360     		str	r3, [r0, #4]
 500:Src/Eagle_TRT.c **** }
 1058              		.loc 1 500 0
 1059 0006 2823     		movs	r3, #40
 1060 0008 8360     		str	r3, [r0, #8]
 1061 000a 7047     		bx	lr
 1062              		.cfi_endproc
 1063              	.LFE141:
 1065              		.section	.text.push,"ax",%progbits
 1066              		.align	1
ARM GAS  /tmp/ccw660IW.s 			page 37


 1067              		.global	push
 1068              		.syntax unified
 1069              		.thumb
 1070              		.thumb_func
 1071              		.fpu fpv4-sp-d16
 1073              	push:
 1074              	.LFB144:
 516:Src/Eagle_TRT.c **** 	int res;
 1075              		.loc 1 516 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              	.LVL90:
 1080 0000 70B5     		push	{r4, r5, r6, lr}
 1081              	.LCFI20:
 1082              		.cfi_def_cfa_offset 16
 1083              		.cfi_offset 4, -16
 1084              		.cfi_offset 5, -12
 1085              		.cfi_offset 6, -8
 1086              		.cfi_offset 14, -4
 1087 0002 0646     		mov	r6, r0
 1088 0004 0C46     		mov	r4, r1
 518:Src/Eagle_TRT.c **** 	{
 1089              		.loc 1 518 0
 1090 0006 0846     		mov	r0, r1
 1091              	.LVL91:
 1092 0008 FFF7FEFF 		bl	fullp
 1093              	.LVL92:
 1094 000c 08B1     		cbz	r0, .L79
 520:Src/Eagle_TRT.c **** 	}
 1095              		.loc 1 520 0
 1096 000e 0020     		movs	r0, #0
 1097              	.LVL93:
 540:Src/Eagle_TRT.c **** 
 1098              		.loc 1 540 0
 1099 0010 70BD     		pop	{r4, r5, r6, pc}
 1100              	.LVL94:
 1101              	.L79:
 1102              	.LBB4:
 524:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 1103              		.loc 1 524 0
 1104 0012 3046     		mov	r0, r6
 1105 0014 FFF7FEFF 		bl	strlen
 1106              	.LVL95:
 525:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 1107              		.loc 1 525 0
 1108 0018 6568     		ldr	r5, [r4, #4]
 1109 001a FFF7FEFF 		bl	malloc
 1110              	.LVL96:
 1111 001e 0235     		adds	r5, r5, #2
 1112 0020 04EB8505 		add	r5, r4, r5, lsl #2
 1113 0024 6860     		str	r0, [r5, #4]
 526:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 1114              		.loc 1 526 0
 1115 0026 3146     		mov	r1, r6
 1116 0028 FFF7FEFF 		bl	strcpy
 1117              	.LVL97:
ARM GAS  /tmp/ccw660IW.s 			page 38


 528:Src/Eagle_TRT.c **** 		{
 1118              		.loc 1 528 0
 1119 002c 6368     		ldr	r3, [r4, #4]
 1120 002e 272B     		cmp	r3, #39
 1121 0030 03D0     		beq	.L80
 534:Src/Eagle_TRT.c **** 		}
 1122              		.loc 1 534 0
 1123 0032 0133     		adds	r3, r3, #1
 1124 0034 6360     		str	r3, [r4, #4]
 536:Src/Eagle_TRT.c **** 	}
 1125              		.loc 1 536 0
 1126 0036 0120     		movs	r0, #1
 1127 0038 70BD     		pop	{r4, r5, r6, pc}
 1128              	.LVL98:
 1129              	.L80:
 530:Src/Eagle_TRT.c **** 		}
 1130              		.loc 1 530 0
 1131 003a 0023     		movs	r3, #0
 1132 003c 6360     		str	r3, [r4, #4]
 536:Src/Eagle_TRT.c **** 	}
 1133              		.loc 1 536 0
 1134 003e 0120     		movs	r0, #1
 1135 0040 70BD     		pop	{r4, r5, r6, pc}
 1136              	.LBE4:
 1137              		.cfi_endproc
 1138              	.LFE144:
 1140              		.section	.text.pop,"ax",%progbits
 1141              		.align	1
 1142              		.global	pop
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1146              		.fpu fpv4-sp-d16
 1148              	pop:
 1149              	.LFB145:
 543:Src/Eagle_TRT.c **** 	int res;
 1150              		.loc 1 543 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154              	.LVL99:
 1155 0000 38B5     		push	{r3, r4, r5, lr}
 1156              	.LCFI21:
 1157              		.cfi_def_cfa_offset 16
 1158              		.cfi_offset 3, -16
 1159              		.cfi_offset 4, -12
 1160              		.cfi_offset 5, -8
 1161              		.cfi_offset 14, -4
 1162 0002 0546     		mov	r5, r0
 1163 0004 0C46     		mov	r4, r1
 545:Src/Eagle_TRT.c **** 	{
 1164              		.loc 1 545 0
 1165 0006 0846     		mov	r0, r1
 1166              	.LVL100:
 1167 0008 FFF7FEFF 		bl	emptyp
 1168              	.LVL101:
 1169 000c 08B1     		cbz	r0, .L86
ARM GAS  /tmp/ccw660IW.s 			page 39


 547:Src/Eagle_TRT.c **** 	}
 1170              		.loc 1 547 0
 1171 000e 0020     		movs	r0, #0
 1172              	.LVL102:
 566:Src/Eagle_TRT.c **** /// ---- end queue ----///
 1173              		.loc 1 566 0
 1174 0010 38BD     		pop	{r3, r4, r5, pc}
 1175              	.LVL103:
 1176              	.L86:
 551:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 1177              		.loc 1 551 0
 1178 0012 2368     		ldr	r3, [r4]
 1179 0014 0233     		adds	r3, r3, #2
 1180 0016 04EB8303 		add	r3, r4, r3, lsl #2
 1181 001a 5968     		ldr	r1, [r3, #4]
 1182 001c 2846     		mov	r0, r5
 1183 001e FFF7FEFF 		bl	strcpy
 1184              	.LVL104:
 552:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 1185              		.loc 1 552 0
 1186 0022 2368     		ldr	r3, [r4]
 1187 0024 0233     		adds	r3, r3, #2
 1188 0026 04EB8303 		add	r3, r4, r3, lsl #2
 1189 002a 5868     		ldr	r0, [r3, #4]
 1190 002c FFF7FEFF 		bl	free
 1191              	.LVL105:
 554:Src/Eagle_TRT.c **** 		{
 1192              		.loc 1 554 0
 1193 0030 2368     		ldr	r3, [r4]
 1194 0032 272B     		cmp	r3, #39
 1195 0034 03D0     		beq	.L87
 560:Src/Eagle_TRT.c **** 		}
 1196              		.loc 1 560 0
 1197 0036 0133     		adds	r3, r3, #1
 1198 0038 2360     		str	r3, [r4]
 562:Src/Eagle_TRT.c **** 	}
 1199              		.loc 1 562 0
 1200 003a 0120     		movs	r0, #1
 1201 003c 38BD     		pop	{r3, r4, r5, pc}
 1202              	.LVL106:
 1203              	.L87:
 556:Src/Eagle_TRT.c **** 		}
 1204              		.loc 1 556 0
 1205 003e 0023     		movs	r3, #0
 1206 0040 2360     		str	r3, [r4]
 562:Src/Eagle_TRT.c **** 	}
 1207              		.loc 1 562 0
 1208 0042 0120     		movs	r0, #1
 1209 0044 38BD     		pop	{r3, r4, r5, pc}
 1210              		.cfi_endproc
 1211              	.LFE145:
 1213              		.section	.text.print,"ax",%progbits
 1214              		.align	1
 1215              		.global	print
 1216              		.syntax unified
 1217              		.thumb
 1218              		.thumb_func
ARM GAS  /tmp/ccw660IW.s 			page 40


 1219              		.fpu fpv4-sp-d16
 1221              	print:
 1222              	.LFB146:
 571:Src/Eagle_TRT.c **** 
 1223              		.loc 1 571 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              	.LVL107:
 1228 0000 38B5     		push	{r3, r4, r5, lr}
 1229              	.LCFI22:
 1230              		.cfi_def_cfa_offset 16
 1231              		.cfi_offset 3, -16
 1232              		.cfi_offset 4, -12
 1233              		.cfi_offset 5, -8
 1234              		.cfi_offset 14, -4
 1235 0002 0546     		mov	r5, r0
 1236 0004 0C46     		mov	r4, r1
 1237              	.LVL108:
 575:Src/Eagle_TRT.c **** 	{
 1238              		.loc 1 575 0
 1239 0006 0846     		mov	r0, r1
 1240              	.LVL109:
 1241 0008 FFF7FEFF 		bl	strlen
 1242              	.LVL110:
 1243 000c 82B2     		uxth	r2, r0
 1244 000e 2146     		mov	r1, r4
 1245 0010 2846     		mov	r0, r5
 1246 0012 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 1247              	.LVL111:
 1248 0016 10B9     		cbnz	r0, .L93
 577:Src/Eagle_TRT.c **** 	}
 1249              		.loc 1 577 0
 1250 0018 0123     		movs	r3, #1
 1251              	.LVL112:
 1252              	.L88:
 592:Src/Eagle_TRT.c **** 
 1253              		.loc 1 592 0
 1254 001a 1846     		mov	r0, r3
 1255 001c 38BD     		pop	{r3, r4, r5, pc}
 1256              	.LVL113:
 1257              	.L93:
 581:Src/Eagle_TRT.c **** 		{
 1258              		.loc 1 581 0
 1259 001e 0449     		ldr	r1, .L94
 1260 0020 2046     		mov	r0, r4
 1261 0022 FFF7FEFF 		bl	push
 1262              	.LVL114:
 1263 0026 0346     		mov	r3, r0
 1264 0028 0028     		cmp	r0, #0
 1265 002a F6D0     		beq	.L88
 587:Src/Eagle_TRT.c **** 		}
 1266              		.loc 1 587 0
 1267 002c 0123     		movs	r3, #1
 1268              	.LVL115:
 591:Src/Eagle_TRT.c **** }
 1269              		.loc 1 591 0
ARM GAS  /tmp/ccw660IW.s 			page 41


 1270 002e F4E7     		b	.L88
 1271              	.L95:
 1272              		.align	2
 1273              	.L94:
 1274 0030 00000000 		.word	.LANCHOR22
 1275              		.cfi_endproc
 1276              	.LFE146:
 1278              		.section	.text.print_it,"ax",%progbits
 1279              		.align	1
 1280              		.global	print_it
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1284              		.fpu fpv4-sp-d16
 1286              	print_it:
 1287              	.LFB147:
 595:Src/Eagle_TRT.c **** 
 1288              		.loc 1 595 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 56
 1291              		@ frame_needed = 0, uses_anonymous_args = 0
 1292              	.LVL116:
 1293 0000 10B5     		push	{r4, lr}
 1294              	.LCFI23:
 1295              		.cfi_def_cfa_offset 8
 1296              		.cfi_offset 4, -8
 1297              		.cfi_offset 14, -4
 1298 0002 8EB0     		sub	sp, sp, #56
 1299              	.LCFI24:
 1300              		.cfi_def_cfa_offset 64
 1301 0004 0446     		mov	r4, r0
 599:Src/Eagle_TRT.c **** 	{
 1302              		.loc 1 599 0
 1303 0006 0849     		ldr	r1, .L100
 1304 0008 01A8     		add	r0, sp, #4
 1305              	.LVL117:
 1306 000a FFF7FEFF 		bl	pop
 1307              	.LVL118:
 1308 000e 0128     		cmp	r0, #1
 1309 0010 01D0     		beq	.L99
 1310              	.L96:
 603:Src/Eagle_TRT.c **** 
 1311              		.loc 1 603 0
 1312 0012 0EB0     		add	sp, sp, #56
 1313              	.LCFI25:
 1314              		.cfi_remember_state
 1315              		.cfi_def_cfa_offset 8
 1316              		@ sp needed
 1317 0014 10BD     		pop	{r4, pc}
 1318              	.LVL119:
 1319              	.L99:
 1320              	.LCFI26:
 1321              		.cfi_restore_state
 601:Src/Eagle_TRT.c **** 	}
 1322              		.loc 1 601 0
 1323 0016 01A8     		add	r0, sp, #4
 1324 0018 FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccw660IW.s 			page 42


 1325              	.LVL120:
 1326 001c 82B2     		uxth	r2, r0
 1327 001e 01A9     		add	r1, sp, #4
 1328 0020 2046     		mov	r0, r4
 1329 0022 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 1330              	.LVL121:
 603:Src/Eagle_TRT.c **** 
 1331              		.loc 1 603 0
 1332 0026 F4E7     		b	.L96
 1333              	.L101:
 1334              		.align	2
 1335              	.L100:
 1336 0028 00000000 		.word	.LANCHOR22
 1337              		.cfi_endproc
 1338              	.LFE147:
 1340              		.section	.text.gps_init,"ax",%progbits
 1341              		.align	1
 1342              		.global	gps_init
 1343              		.syntax unified
 1344              		.thumb
 1345              		.thumb_func
 1346              		.fpu fpv4-sp-d16
 1348              	gps_init:
 1349              	.LFB148:
 625:Src/Eagle_TRT.c **** 
 1350              		.loc 1 625 0
 1351              		.cfi_startproc
 1352              		@ args = 0, pretend = 0, frame = 0
 1353              		@ frame_needed = 0, uses_anonymous_args = 0
 1354              	.LVL122:
 1355 0000 70B5     		push	{r4, r5, r6, lr}
 1356              	.LCFI27:
 1357              		.cfi_def_cfa_offset 16
 1358              		.cfi_offset 4, -16
 1359              		.cfi_offset 5, -12
 1360              		.cfi_offset 6, -8
 1361              		.cfi_offset 14, -4
 1362 0002 0C46     		mov	r4, r1
 628:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 1363              		.loc 1 628 0
 1364 0004 3D4D     		ldr	r5, .L104
 1365 0006 2860     		str	r0, [r5]
 629:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1366              		.loc 1 629 0
 1367 0008 4FF41652 		mov	r2, #9600
 1368 000c 4260     		str	r2, [r0, #4]
 630:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1369              		.loc 1 630 0
 1370 000e FFF7FEFF 		bl	HAL_UART_Init
 1371              	.LVL123:
 631:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1372              		.loc 1 631 0
 1373 0012 3B4E     		ldr	r6, .L104+4
 1374 0014 C823     		movs	r3, #200
 1375 0016 1422     		movs	r2, #20
 1376 0018 3146     		mov	r1, r6
 1377 001a 2868     		ldr	r0, [r5]
ARM GAS  /tmp/ccw660IW.s 			page 43


 1378 001c FFF7FEFF 		bl	HAL_UART_Transmit
 1379              	.LVL124:
 632:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 1380              		.loc 1 632 0
 1381 0020 4FF4FA70 		mov	r0, #500
 1382 0024 FFF7FEFF 		bl	HAL_Delay
 1383              	.LVL125:
 633:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1384              		.loc 1 633 0
 1385 0028 2868     		ldr	r0, [r5]
 1386 002a 4FF46143 		mov	r3, #57600
 1387 002e 4360     		str	r3, [r0, #4]
 634:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1388              		.loc 1 634 0
 1389 0030 FFF7FEFF 		bl	HAL_UART_Init
 1390              	.LVL126:
 635:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1391              		.loc 1 635 0
 1392 0034 C823     		movs	r3, #200
 1393 0036 1422     		movs	r2, #20
 1394 0038 3146     		mov	r1, r6
 1395 003a 2868     		ldr	r0, [r5]
 1396 003c FFF7FEFF 		bl	HAL_UART_Transmit
 1397              	.LVL127:
 636:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 1398              		.loc 1 636 0
 1399 0040 4FF4FA70 		mov	r0, #500
 1400 0044 FFF7FEFF 		bl	HAL_Delay
 1401              	.LVL128:
 637:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1402              		.loc 1 637 0
 1403 0048 2868     		ldr	r0, [r5]
 1404 004a 4FF4E133 		mov	r3, #115200
 1405 004e 4360     		str	r3, [r0, #4]
 638:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1406              		.loc 1 638 0
 1407 0050 FFF7FEFF 		bl	HAL_UART_Init
 1408              	.LVL129:
 639:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1409              		.loc 1 639 0
 1410 0054 C823     		movs	r3, #200
 1411 0056 1422     		movs	r2, #20
 1412 0058 3146     		mov	r1, r6
 1413 005a 2868     		ldr	r0, [r5]
 1414 005c FFF7FEFF 		bl	HAL_UART_Transmit
 1415              	.LVL130:
 640:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 1416              		.loc 1 640 0
 1417 0060 4FF4FA70 		mov	r0, #500
 1418 0064 FFF7FEFF 		bl	HAL_Delay
 1419              	.LVL131:
 641:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1420              		.loc 1 641 0
 1421 0068 C823     		movs	r3, #200
 1422 006a 1122     		movs	r2, #17
 1423 006c 2549     		ldr	r1, .L104+8
 1424 006e 2868     		ldr	r0, [r5]
ARM GAS  /tmp/ccw660IW.s 			page 44


 1425 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 1426              	.LVL132:
 642:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 1427              		.loc 1 642 0
 1428 0074 4FF4FA70 		mov	r0, #500
 1429 0078 FFF7FEFF 		bl	HAL_Delay
 1430              	.LVL133:
 643:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1431              		.loc 1 643 0
 1432 007c C823     		movs	r3, #200
 1433 007e 3322     		movs	r2, #51
 1434 0080 2149     		ldr	r1, .L104+12
 1435 0082 2868     		ldr	r0, [r5]
 1436 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 1437              	.LVL134:
 644:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 1438              		.loc 1 644 0
 1439 0088 4FF4FA70 		mov	r0, #500
 1440 008c FFF7FEFF 		bl	HAL_Delay
 1441              	.LVL135:
 645:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 1442              		.loc 1 645 0
 1443 0090 1E4B     		ldr	r3, .L104+16
 1444 0092 1868     		ldr	r0, [r3]
 1445 0094 2060     		str	r0, [r4]	@ unaligned
 1446 0096 9A88     		ldrh	r2, [r3, #4]	@ unaligned
 1447 0098 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1448 009a A280     		strh	r2, [r4, #4]	@ unaligned
 1449 009c A371     		strb	r3, [r4, #6]
 646:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 1450              		.loc 1 646 0
 1451 009e 1C4B     		ldr	r3, .L104+20
 1452 00a0 03CB     		ldmia	r3!, {r0, r1}
 1453 00a2 E060     		str	r0, [r4, #12]	@ unaligned
 1454 00a4 2161     		str	r1, [r4, #16]	@ unaligned
 1455 00a6 1B88     		ldrh	r3, [r3]	@ unaligned
 1456 00a8 A382     		strh	r3, [r4, #20]	@ unaligned
 647:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 1457              		.loc 1 647 0
 1458 00aa 1A4B     		ldr	r3, .L104+24
 1459 00ac 1B88     		ldrh	r3, [r3]	@ unaligned
 1460 00ae A383     		strh	r3, [r4, #28]	@ unaligned
 648:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 1461              		.loc 1 648 0
 1462 00b0 194B     		ldr	r3, .L104+28
 1463 00b2 03CB     		ldmia	r3!, {r0, r1}
 1464 00b4 E062     		str	r0, [r4, #44]	@ unaligned
 1465 00b6 2163     		str	r1, [r4, #48]	@ unaligned
 1466 00b8 1988     		ldrh	r1, [r3]	@ unaligned
 1467 00ba 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1468 00bc A186     		strh	r1, [r4, #52]	@ unaligned
 1469 00be 84F83630 		strb	r3, [r4, #54]
 649:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
 1470              		.loc 1 649 0
 1471 00c2 164B     		ldr	r3, .L104+32
 1472 00c4 1B88     		ldrh	r3, [r3]	@ unaligned
 1473 00c6 A387     		strh	r3, [r4, #60]	@ unaligned
ARM GAS  /tmp/ccw660IW.s 			page 45


 650:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 1474              		.loc 1 650 0
 1475 00c8 154B     		ldr	r3, .L104+36
 1476 00ca 1868     		ldr	r0, [r3]
 1477 00cc E064     		str	r0, [r4, #76]	@ unaligned
 1478 00ce 9988     		ldrh	r1, [r3, #4]	@ unaligned
 1479 00d0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1480 00d2 A4F85010 		strh	r1, [r4, #80]	@ unaligned
 1481 00d6 84F85230 		strb	r3, [r4, #82]
 651:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 1482              		.loc 1 651 0
 1483 00da 124B     		ldr	r3, .L104+40
 1484 00dc 1868     		ldr	r0, [r3]
 1485 00de A065     		str	r0, [r4, #88]	@ unaligned
 1486 00e0 9988     		ldrh	r1, [r3, #4]	@ unaligned
 1487 00e2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1488 00e4 A4F85C10 		strh	r1, [r4, #92]	@ unaligned
 1489 00e8 84F85E30 		strb	r3, [r4, #94]
 652:Src/Eagle_TRT.c **** 
 1490              		.loc 1 652 0
 1491 00ec 0122     		movs	r2, #1
 1492 00ee 0E49     		ldr	r1, .L104+44
 1493 00f0 2868     		ldr	r0, [r5]
 1494 00f2 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1495              	.LVL136:
 655:Src/Eagle_TRT.c **** 
 1496              		.loc 1 655 0
 1497 00f6 0120     		movs	r0, #1
 1498 00f8 70BD     		pop	{r4, r5, r6, pc}
 1499              	.LVL137:
 1500              	.L105:
 1501 00fa 00BF     		.align	2
 1502              	.L104:
 1503 00fc 00000000 		.word	huart_GPS
 1504 0100 00000000 		.word	.LC2
 1505 0104 18000000 		.word	.LC3
 1506 0108 2C000000 		.word	.LC4
 1507 010c 60000000 		.word	.LC5
 1508 0110 68000000 		.word	.LC6
 1509 0114 74000000 		.word	.LC7
 1510 0118 78000000 		.word	.LC8
 1511 011c 84000000 		.word	.LC9
 1512 0120 88000000 		.word	.LC10
 1513 0124 90000000 		.word	.LC11
 1514 0128 00000000 		.word	buffer_gps
 1515              		.cfi_endproc
 1516              	.LFE148:
 1518              		.global	__aeabi_dmul
 1519              		.global	__aeabi_d2iz
 1520              		.section	.text.gps_read_it,"ax",%progbits
 1521              		.align	1
 1522              		.global	gps_read_it
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv4-sp-d16
 1528              	gps_read_it:
ARM GAS  /tmp/ccw660IW.s 			page 46


 1529              	.LFB149:
 658:Src/Eagle_TRT.c **** 
 1530              		.loc 1 658 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
 1534              	.LVL138:
 1535 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1536              	.LCFI28:
 1537              		.cfi_def_cfa_offset 24
 1538              		.cfi_offset 3, -24
 1539              		.cfi_offset 4, -20
 1540              		.cfi_offset 5, -16
 1541              		.cfi_offset 6, -12
 1542              		.cfi_offset 7, -8
 1543              		.cfi_offset 14, -4
 1544              	.LVL139:
 696:Src/Eagle_TRT.c **** 	{
 1545              		.loc 1 696 0
 1546 0002 A34B     		ldr	r3, .L160+16
 1547 0004 1B68     		ldr	r3, [r3]
 1548 0006 8342     		cmp	r3, r0
 1549 0008 02D0     		beq	.L142
 660:Src/Eagle_TRT.c **** 
 1550              		.loc 1 660 0
 1551 000a 0024     		movs	r4, #0
 1552              	.LVL140:
 1553              	.L106:
 858:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
 1554              		.loc 1 858 0
 1555 000c 2046     		mov	r0, r4
 1556 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1557              	.LVL141:
 1558              	.L142:
 1559 0010 0D46     		mov	r5, r1
 699:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 1560              		.loc 1 699 0
 1561 0012 A04C     		ldr	r4, .L160+20
 1562 0014 0122     		movs	r2, #1
 1563 0016 2146     		mov	r1, r4
 1564              	.LVL142:
 1565 0018 1846     		mov	r0, r3
 1566              	.LVL143:
 1567 001a FFF7FEFF 		bl	HAL_UART_Receive_IT
 1568              	.LVL144:
 700:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 1569              		.loc 1 700 0
 1570 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1571 0020 9D4A     		ldr	r2, .L160+24
 1572 0022 1370     		strb	r3, [r2]
 701:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 1573              		.loc 1 701 0
 1574 0024 9D4A     		ldr	r2, .L160+28
 1575 0026 1268     		ldr	r2, [r2]
 1576 0028 012A     		cmp	r2, #1
 1577 002a 04D0     		beq	.L143
 1578              	.L108:
ARM GAS  /tmp/ccw660IW.s 			page 47


 850:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 1579              		.loc 1 850 0
 1580 002c 242B     		cmp	r3, #36
 1581 002e 00F07781 		beq	.L144
 660:Src/Eagle_TRT.c **** 
 1582              		.loc 1 660 0
 1583 0032 0024     		movs	r4, #0
 857:Src/Eagle_TRT.c **** }
 1584              		.loc 1 857 0
 1585 0034 EAE7     		b	.L106
 1586              	.L143:
 701:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 1587              		.loc 1 701 0 discriminator 1
 1588 0036 242B     		cmp	r3, #36
 1589 0038 F8D0     		beq	.L108
 703:Src/Eagle_TRT.c **** 			cont_string++;
 1590              		.loc 1 703 0
 1591 003a 994A     		ldr	r2, .L160+32
 1592 003c 1168     		ldr	r1, [r2]
 1593 003e 9948     		ldr	r0, .L160+36
 1594 0040 4354     		strb	r3, [r0, r1]
 704:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 1595              		.loc 1 704 0
 1596 0042 481C     		adds	r0, r1, #1
 1597 0044 1060     		str	r0, [r2]
 705:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 1598              		.loc 1 705 0
 1599 0046 0D2B     		cmp	r3, #13
 1600 0048 03D0     		beq	.L109
 705:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 1601              		.loc 1 705 0 is_stmt 0 discriminator 1
 1602 004a 0A2B     		cmp	r3, #10
 1603 004c 01D0     		beq	.L109
 660:Src/Eagle_TRT.c **** 
 1604              		.loc 1 660 0 is_stmt 1
 1605 004e 0024     		movs	r4, #0
 1606 0050 DCE7     		b	.L106
 1607              	.L109:
 707:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 1608              		.loc 1 707 0
 1609 0052 934B     		ldr	r3, .L160+32
 1610 0054 1960     		str	r1, [r3]
 708:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 1611              		.loc 1 708 0
 1612 0056 934B     		ldr	r3, .L160+36
 1613 0058 0022     		movs	r2, #0
 1614 005a 5A54     		strb	r2, [r3, r1]
 709:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 1615              		.loc 1 709 0
 1616 005c 8F48     		ldr	r0, .L160+28
 1617 005e 0260     		str	r2, [r0]
 710:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 1618              		.loc 1 710 0
 1619 0060 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1620 0062 472B     		cmp	r3, #71
 1621 0064 04D0     		beq	.L145
 1622              	.L110:
ARM GAS  /tmp/ccw660IW.s 			page 48


 796:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 1623              		.loc 1 796 0
 1624 0066 562B     		cmp	r3, #86
 1625 0068 00F0C680 		beq	.L146
 660:Src/Eagle_TRT.c **** 
 1626              		.loc 1 660 0
 1627 006c 0024     		movs	r4, #0
 1628 006e CDE7     		b	.L106
 1629              	.L145:
 710:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 1630              		.loc 1 710 0 discriminator 1
 1631 0070 8C4A     		ldr	r2, .L160+36
 1632 0072 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 1633 0074 472A     		cmp	r2, #71
 1634 0076 F6D1     		bne	.L110
 710:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 1635              		.loc 1 710 0 is_stmt 0 discriminator 2
 1636 0078 8A4A     		ldr	r2, .L160+36
 1637 007a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1638 007c 412A     		cmp	r2, #65
 1639 007e F2D1     		bne	.L110
 712:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 1640              		.loc 1 712 0 is_stmt 1
 1641 0080 8848     		ldr	r0, .L160+36
 1642 0082 FFF7FEFF 		bl	checksum
 1643              	.LVL145:
 1644 0086 0128     		cmp	r0, #1
 1645 0088 3BD0     		beq	.L133
 793:Src/Eagle_TRT.c **** 					}
 1646              		.loc 1 793 0
 1647 008a 0024     		movs	r4, #0
 1648 008c BEE7     		b	.L106
 1649              	.LVL146:
 1650              	.L148:
 1651              	.LBB5:
 1652              	.LBB6:
 718:Src/Eagle_TRT.c **** 							else
 1653              		.loc 1 718 0
 1654 008e 0133     		adds	r3, r3, #1
 1655              	.LVL147:
 1656              	.L113:
 715:Src/Eagle_TRT.c **** 						{
 1657              		.loc 1 715 0 discriminator 2
 1658 0090 0130     		adds	r0, r0, #1
 1659              	.LVL148:
 1660              	.L111:
 715:Src/Eagle_TRT.c **** 						{
 1661              		.loc 1 715 0 is_stmt 0 discriminator 1
 1662 0092 6328     		cmp	r0, #99
 1663 0094 3CDC     		bgt	.L147
 717:Src/Eagle_TRT.c **** 								cont_comma++;
 1664              		.loc 1 717 0 is_stmt 1
 1665 0096 834A     		ldr	r2, .L160+36
 1666 0098 125C     		ldrb	r2, [r2, r0]	@ zero_extendqisi2
 1667 009a 2C2A     		cmp	r2, #44
 1668 009c F7D0     		beq	.L148
 721:Src/Eagle_TRT.c **** 								{ //save the time
ARM GAS  /tmp/ccw660IW.s 			page 49


 1669              		.loc 1 721 0
 1670 009e 012B     		cmp	r3, #1
 1671 00a0 07D0     		beq	.L149
 726:Src/Eagle_TRT.c **** 								{ //save latitude
 1672              		.loc 1 726 0
 1673 00a2 022B     		cmp	r3, #2
 1674 00a4 0BD1     		bne	.L115
 728:Src/Eagle_TRT.c **** 									cont_latitude++;
 1675              		.loc 1 728 0
 1676 00a6 05EB040E 		add	lr, r5, r4
 1677 00aa 8EF80C20 		strb	r2, [lr, #12]
 729:Src/Eagle_TRT.c **** 								}
 1678              		.loc 1 729 0
 1679 00ae 0134     		adds	r4, r4, #1
 1680              	.LVL149:
 1681 00b0 EEE7     		b	.L113
 1682              	.L149:
 723:Src/Eagle_TRT.c **** 									cont_time++;
 1683              		.loc 1 723 0
 1684 00b2 05EB010E 		add	lr, r5, r1
 1685 00b6 8EF85820 		strb	r2, [lr, #88]
 724:Src/Eagle_TRT.c **** 								}
 1686              		.loc 1 724 0
 1687 00ba 0131     		adds	r1, r1, #1
 1688              	.LVL150:
 1689 00bc E8E7     		b	.L113
 1690              	.L115:
 731:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 1691              		.loc 1 731 0
 1692 00be 032B     		cmp	r3, #3
 1693 00c0 01D1     		bne	.L116
 733:Src/Eagle_TRT.c **** 								}
 1694              		.loc 1 733 0
 1695 00c2 2A77     		strb	r2, [r5, #28]
 1696 00c4 E4E7     		b	.L113
 1697              	.L116:
 735:Src/Eagle_TRT.c **** 								{ //save longitude
 1698              		.loc 1 735 0
 1699 00c6 042B     		cmp	r3, #4
 1700 00c8 0BD0     		beq	.L150
 740:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 1701              		.loc 1 740 0
 1702 00ca 052B     		cmp	r3, #5
 1703 00cc 0FD0     		beq	.L151
 744:Src/Eagle_TRT.c **** 								{
 1704              		.loc 1 744 0
 1705 00ce 062B     		cmp	r3, #6
 1706 00d0 10D0     		beq	.L152
 748:Src/Eagle_TRT.c **** 								{ //save altitude
 1707              		.loc 1 748 0
 1708 00d2 092B     		cmp	r3, #9
 1709 00d4 11D1     		bne	.L120
 750:Src/Eagle_TRT.c **** 									cont_altitude++;
 1710              		.loc 1 750 0
 1711 00d6 05EB070E 		add	lr, r5, r7
 1712 00da 8EF84C20 		strb	r2, [lr, #76]
 751:Src/Eagle_TRT.c **** 								}
ARM GAS  /tmp/ccw660IW.s 			page 50


 1713              		.loc 1 751 0
 1714 00de 0137     		adds	r7, r7, #1
 1715              	.LVL151:
 1716 00e0 D6E7     		b	.L113
 1717              	.L150:
 737:Src/Eagle_TRT.c **** 									cont_longitude++;
 1718              		.loc 1 737 0
 1719 00e2 05EB060E 		add	lr, r5, r6
 1720 00e6 8EF82C20 		strb	r2, [lr, #44]
 738:Src/Eagle_TRT.c **** 								}
 1721              		.loc 1 738 0
 1722 00ea 0136     		adds	r6, r6, #1
 1723              	.LVL152:
 1724 00ec D0E7     		b	.L113
 1725              	.L151:
 742:Src/Eagle_TRT.c **** 								}
 1726              		.loc 1 742 0
 1727 00ee 85F83C20 		strb	r2, [r5, #60]
 1728 00f2 CDE7     		b	.L113
 1729              	.L152:
 746:Src/Eagle_TRT.c **** 								}
 1730              		.loc 1 746 0
 1731 00f4 85F86320 		strb	r2, [r5, #99]
 1732 00f8 CAE7     		b	.L113
 1733              	.L120:
 753:Src/Eagle_TRT.c **** 								{
 1734              		.loc 1 753 0
 1735 00fa 0A2B     		cmp	r3, #10
 1736 00fc C8D1     		bne	.L113
 755:Src/Eagle_TRT.c **** 								}
 1737              		.loc 1 755 0
 1738 00fe 6420     		movs	r0, #100
 1739              	.LVL153:
 1740 0100 C6E7     		b	.L113
 1741              	.LVL154:
 1742              	.L133:
 1743              	.LBE6:
 1744              	.LBE5:
 1745 0102 0520     		movs	r0, #5
 1746 0104 0021     		movs	r1, #0
 1747 0106 0F46     		mov	r7, r1
 1748 0108 0E46     		mov	r6, r1
 1749 010a 0C46     		mov	r4, r1
 1750 010c 0B46     		mov	r3, r1
 1751 010e C0E7     		b	.L111
 1752              	.LVL155:
 1753              	.L147:
 1754              	.LBB7:
 760:Src/Eagle_TRT.c **** 						{
 1755              		.loc 1 760 0
 1756 0110 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 1757              	.LVL156:
 1758 0114 302B     		cmp	r3, #48
 1759 0116 32D1     		bne	.L122
 762:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 1760              		.loc 1 762 0
 1761 0118 0023     		movs	r3, #0
ARM GAS  /tmp/ccw660IW.s 			page 51


 1762 011a 6B62     		str	r3, [r5, #36]
 763:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
 1763              		.loc 1 763 0
 1764 011c AB62     		str	r3, [r5, #40]
 764:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 1765              		.loc 1 764 0
 1766 011e 6B64     		str	r3, [r5, #68]
 765:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 1767              		.loc 1 765 0
 1768 0120 AB64     		str	r3, [r5, #72]
 766:Src/Eagle_TRT.c **** 						}
 1769              		.loc 1 766 0
 1770 0122 6B65     		str	r3, [r5, #84]
 1771              	.LVL157:
 1772              	.L123:
 779:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 1773              		.loc 1 779 0
 1774 0124 6048     		ldr	r0, .L160+40
 1775 0126 0824     		movs	r4, #8
 1776              	.LVL158:
 1777 0128 0472     		strb	r4, [r0, #8]
 780:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 1778              		.loc 1 780 0
 1779 012a 6B6C     		ldr	r3, [r5, #68]
 1780 012c 4FF48072 		mov	r2, #256
 1781 0130 93FBF2F1 		sdiv	r1, r3, r2
 1782 0134 4172     		strb	r1, [r0, #9]
 781:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 1783              		.loc 1 781 0
 1784 0136 5942     		rsbs	r1, r3, #0
 1785 0138 DBB2     		uxtb	r3, r3
 1786 013a C9B2     		uxtb	r1, r1
 1787 013c 58BF     		it	pl
 1788 013e 4B42     		rsbpl	r3, r1, #0
 1789 0140 8372     		strb	r3, [r0, #10]
 782:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 1790              		.loc 1 782 0
 1791 0142 AB6C     		ldr	r3, [r5, #72]
 1792 0144 93FBF2F1 		sdiv	r1, r3, r2
 1793 0148 C172     		strb	r1, [r0, #11]
 783:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 1794              		.loc 1 783 0
 1795 014a 5942     		rsbs	r1, r3, #0
 1796 014c DBB2     		uxtb	r3, r3
 1797 014e C9B2     		uxtb	r1, r1
 1798 0150 58BF     		it	pl
 1799 0152 4B42     		rsbpl	r3, r1, #0
 1800 0154 0373     		strb	r3, [r0, #12]
 784:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 1801              		.loc 1 784 0
 1802 0156 05F13C03 		add	r3, r5, #60
 1803 015a 4373     		strb	r3, [r0, #13]
 785:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 1804              		.loc 1 785 0
 1805 015c 6B6D     		ldr	r3, [r5, #84]
 1806 015e 93FBF2F2 		sdiv	r2, r3, r2
 1807 0162 8273     		strb	r2, [r0, #14]
ARM GAS  /tmp/ccw660IW.s 			page 52


 786:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 1808              		.loc 1 786 0
 1809 0164 5A42     		rsbs	r2, r3, #0
 1810 0166 DBB2     		uxtb	r3, r3
 1811 0168 D2B2     		uxtb	r2, r2
 1812 016a 58BF     		it	pl
 1813 016c 5342     		rsbpl	r3, r2, #0
 1814 016e C373     		strb	r3, [r0, #15]
 787:Src/Eagle_TRT.c **** 						can.size = 8;
 1815              		.loc 1 787 0
 1816 0170 D023     		movs	r3, #208
 1817 0172 0360     		str	r3, [r0]
 788:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 1818              		.loc 1 788 0
 1819 0174 4460     		str	r4, [r0, #4]
 789:Src/Eagle_TRT.c **** 					}
 1820              		.loc 1 789 0
 1821 0176 FFF7FEFF 		bl	CAN_Send
 1822              	.LVL159:
 1823              	.LBE7:
 660:Src/Eagle_TRT.c **** 
 1824              		.loc 1 660 0
 1825 017a 0024     		movs	r4, #0
 1826 017c 46E7     		b	.L106
 1827              	.LVL160:
 1828              	.L122:
 1829              	.LBB8:
 770:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 1830              		.loc 1 770 0
 1831 017e 05F10C00 		add	r0, r5, #12
 1832              	.LVL161:
 1833 0182 FFF7FEFF 		bl	atof
 1834              	.LVL162:
 1835 0186 3EA3     		adr	r3, .L160
 1836 0188 D3E90023 		ldrd	r2, [r3]
 1837 018c 51EC100B 		vmov	r0, r1, d0
 1838 0190 FFF7FEFF 		bl	__aeabi_dmul
 1839              	.LVL163:
 1840 0194 FFF7FEFF 		bl	__aeabi_d2iz
 1841              	.LVL164:
 1842 0198 2862     		str	r0, [r5, #32]
 771:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 1843              		.loc 1 771 0
 1844 019a 05F12C00 		add	r0, r5, #44
 1845 019e FFF7FEFF 		bl	atof
 1846              	.LVL165:
 1847 01a2 39A3     		adr	r3, .L160+8
 1848 01a4 D3E90023 		ldrd	r2, [r3]
 1849 01a8 51EC100B 		vmov	r0, r1, d0
 1850 01ac FFF7FEFF 		bl	__aeabi_dmul
 1851              	.LVL166:
 1852 01b0 FFF7FEFF 		bl	__aeabi_d2iz
 1853              	.LVL167:
 1854 01b4 2864     		str	r0, [r5, #64]
 772:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 1855              		.loc 1 772 0
 1856 01b6 05F14C00 		add	r0, r5, #76
ARM GAS  /tmp/ccw660IW.s 			page 53


 1857 01ba FFF7FEFF 		bl	atof
 1858              	.LVL168:
 1859 01be 0022     		movs	r2, #0
 1860 01c0 3A4B     		ldr	r3, .L160+44
 1861 01c2 51EC100B 		vmov	r0, r1, d0
 1862 01c6 FFF7FEFF 		bl	__aeabi_dmul
 1863              	.LVL169:
 1864 01ca FFF7FEFF 		bl	__aeabi_d2iz
 1865              	.LVL170:
 1866 01ce 6865     		str	r0, [r5, #84]
 773:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 1867              		.loc 1 773 0
 1868 01d0 2A6A     		ldr	r2, [r5, #32]
 1869 01d2 42F21073 		movw	r3, #10000
 1870 01d6 92FBF3F3 		sdiv	r3, r2, r3
 1871 01da 6B62     		str	r3, [r5, #36]
 774:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 1872              		.loc 1 774 0
 1873 01dc 3449     		ldr	r1, .L160+48
 1874 01de 01FB0323 		mla	r3, r1, r3, r2
 1875 01e2 AB62     		str	r3, [r5, #40]
 775:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 1876              		.loc 1 775 0
 1877 01e4 2A6C     		ldr	r2, [r5, #64]
 1878 01e6 334B     		ldr	r3, .L160+52
 1879 01e8 92FBF3F3 		sdiv	r3, r2, r3
 1880 01ec 6B64     		str	r3, [r5, #68]
 776:Src/Eagle_TRT.c **** 						}
 1881              		.loc 1 776 0
 1882 01ee 3249     		ldr	r1, .L160+56
 1883 01f0 01FB0323 		mla	r3, r1, r3, r2
 1884 01f4 AB64     		str	r3, [r5, #72]
 1885 01f6 95E7     		b	.L123
 1886              	.LVL171:
 1887              	.L146:
 1888              	.LBE8:
 796:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 1889              		.loc 1 796 0 discriminator 1
 1890 01f8 2A4B     		ldr	r3, .L160+36
 1891 01fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1892 01fc 542B     		cmp	r3, #84
 1893 01fe 01D0     		beq	.L153
 660:Src/Eagle_TRT.c **** 
 1894              		.loc 1 660 0
 1895 0200 0024     		movs	r4, #0
 1896 0202 03E7     		b	.L106
 1897              	.L153:
 796:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 1898              		.loc 1 796 0 discriminator 2
 1899 0204 274B     		ldr	r3, .L160+36
 1900 0206 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1901 0208 472B     		cmp	r3, #71
 1902 020a 01D0     		beq	.L154
 660:Src/Eagle_TRT.c **** 
 1903              		.loc 1 660 0
 1904 020c 0024     		movs	r4, #0
 1905 020e FDE6     		b	.L106
ARM GAS  /tmp/ccw660IW.s 			page 54


 1906              	.L154:
 798:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 1907              		.loc 1 798 0
 1908 0210 2448     		ldr	r0, .L160+36
 1909 0212 FFF7FEFF 		bl	checksum
 1910              	.LVL172:
 1911 0216 0446     		mov	r4, r0
 1912 0218 0128     		cmp	r0, #1
 1913 021a 01D0     		beq	.L155
 843:Src/Eagle_TRT.c **** 					}
 1914              		.loc 1 843 0
 1915 021c 0024     		movs	r4, #0
 1916 021e F5E6     		b	.L106
 1917              	.L155:
 1918              	.LBB9:
 800:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 1919              		.loc 1 800 0
 1920 0220 0023     		movs	r3, #0
 1921 0222 264A     		ldr	r2, .L160+60
 1922 0224 1360     		str	r3, [r2]
 1923              	.LVL173:
 1924              	.LBB10:
 802:Src/Eagle_TRT.c **** 						{
 1925              		.loc 1 802 0
 1926 0226 0522     		movs	r2, #5
 1927 0228 04E0     		b	.L124
 1928              	.LVL174:
 1929              	.L157:
 805:Src/Eagle_TRT.c **** 							else
 1930              		.loc 1 805 0
 1931 022a 2448     		ldr	r0, .L160+60
 1932 022c 0168     		ldr	r1, [r0]
 1933 022e 0131     		adds	r1, r1, #1
 1934 0230 0160     		str	r1, [r0]
 1935              	.LVL175:
 1936              	.L126:
 802:Src/Eagle_TRT.c **** 						{
 1937              		.loc 1 802 0 discriminator 2
 1938 0232 0132     		adds	r2, r2, #1
 1939              	.LVL176:
 1940              	.L124:
 802:Src/Eagle_TRT.c **** 						{
 1941              		.loc 1 802 0 is_stmt 0 discriminator 1
 1942 0234 1A49     		ldr	r1, .L160+32
 1943 0236 0968     		ldr	r1, [r1]
 1944 0238 8A42     		cmp	r2, r1
 1945 023a 0EDA     		bge	.L156
 804:Src/Eagle_TRT.c **** 								cont_comma++;
 1946              		.loc 1 804 0 is_stmt 1
 1947 023c 1948     		ldr	r0, .L160+36
 1948 023e 865C     		ldrb	r6, [r0, r2]	@ zero_extendqisi2
 1949 0240 2C2E     		cmp	r6, #44
 1950 0242 F2D0     		beq	.L157
 808:Src/Eagle_TRT.c **** 								{ //save the speed
 1951              		.loc 1 808 0
 1952 0244 1D48     		ldr	r0, .L160+60
 1953 0246 0068     		ldr	r0, [r0]
ARM GAS  /tmp/ccw660IW.s 			page 55


 1954 0248 0728     		cmp	r0, #7
 1955 024a 03D0     		beq	.L158
 813:Src/Eagle_TRT.c **** 								{
 1956              		.loc 1 813 0
 1957 024c 0828     		cmp	r0, #8
 1958 024e F0D1     		bne	.L126
 815:Src/Eagle_TRT.c **** 								}
 1959              		.loc 1 815 0
 1960 0250 0A46     		mov	r2, r1
 1961              	.LVL177:
 1962 0252 EEE7     		b	.L126
 1963              	.LVL178:
 1964              	.L158:
 810:Src/Eagle_TRT.c **** 									cont_speed++;
 1965              		.loc 1 810 0
 1966 0254 EE54     		strb	r6, [r5, r3]
 811:Src/Eagle_TRT.c **** 								}
 1967              		.loc 1 811 0
 1968 0256 0133     		adds	r3, r3, #1
 1969              	.LVL179:
 1970 0258 EBE7     		b	.L126
 1971              	.L156:
 1972              	.LBE10:
 820:Src/Eagle_TRT.c **** 						{
 1973              		.loc 1 820 0
 1974 025a 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 1975              	.LVL180:
 1976 025e 302B     		cmp	r3, #48
 1977 0260 2ED0     		beq	.L159
 826:Src/Eagle_TRT.c **** 						}
 1978              		.loc 1 826 0
 1979 0262 2846     		mov	r0, r5
 1980 0264 FFF7FEFF 		bl	atof
 1981              	.LVL181:
 1982 0268 0022     		movs	r2, #0
 1983 026a 104B     		ldr	r3, .L160+44
 1984 026c 51EC100B 		vmov	r0, r1, d0
 1985 0270 FFF7FEFF 		bl	__aeabi_dmul
 1986              	.LVL182:
 1987 0274 FFF7FEFF 		bl	__aeabi_d2iz
 1988              	.LVL183:
 1989 0278 A860     		str	r0, [r5, #8]
 1990 027a 23E0     		b	.L130
 1991              	.L161:
 1992 027c AFF30080 		.align	3
 1993              	.L160:
 1994 0280 00000000 		.word	0
 1995 0284 0088C340 		.word	1086556160
 1996 0288 00000000 		.word	0
 1997 028c 006AF840 		.word	1090021888
 1998 0290 00000000 		.word	huart_GPS
 1999 0294 00000000 		.word	buffer_gps
 2000 0298 00000000 		.word	data_string_gps
 2001 029c 00000000 		.word	.LANCHOR23
 2002 02a0 00000000 		.word	cont_string
 2003 02a4 00000000 		.word	string_gps
 2004 02a8 00000000 		.word	can
ARM GAS  /tmp/ccw660IW.s 			page 56


 2005 02ac 00005940 		.word	1079574528
 2006 02b0 F0D8FFFF 		.word	-10000
 2007 02b4 A0860100 		.word	100000
 2008 02b8 6079FEFF 		.word	-100000
 2009 02bc 00000000 		.word	cont_comma
 2010              	.LVL184:
 2011              	.L159:
 822:Src/Eagle_TRT.c **** 						}
 2012              		.loc 1 822 0
 2013 02c0 0023     		movs	r3, #0
 2014 02c2 AB60     		str	r3, [r5, #8]
 2015              	.LVL185:
 2016              	.L130:
 828:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 2017              		.loc 1 828 0
 2018 02c4 1A48     		ldr	r0, .L162
 2019 02c6 0723     		movs	r3, #7
 2020 02c8 0372     		strb	r3, [r0, #8]
 829:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 2021              		.loc 1 829 0
 2022 02ca 6B6A     		ldr	r3, [r5, #36]
 2023 02cc 4FF48072 		mov	r2, #256
 2024 02d0 93FBF2F1 		sdiv	r1, r3, r2
 2025 02d4 4172     		strb	r1, [r0, #9]
 830:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 2026              		.loc 1 830 0
 2027 02d6 5942     		rsbs	r1, r3, #0
 2028 02d8 DBB2     		uxtb	r3, r3
 2029 02da C9B2     		uxtb	r1, r1
 2030 02dc 58BF     		it	pl
 2031 02de 4B42     		rsbpl	r3, r1, #0
 2032 02e0 8372     		strb	r3, [r0, #10]
 831:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 2033              		.loc 1 831 0
 2034 02e2 AB6A     		ldr	r3, [r5, #40]
 2035 02e4 93FBF2F1 		sdiv	r1, r3, r2
 2036 02e8 C172     		strb	r1, [r0, #11]
 832:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 2037              		.loc 1 832 0
 2038 02ea 5942     		rsbs	r1, r3, #0
 2039 02ec DBB2     		uxtb	r3, r3
 2040 02ee C9B2     		uxtb	r1, r1
 2041 02f0 58BF     		it	pl
 2042 02f2 4B42     		rsbpl	r3, r1, #0
 2043 02f4 0373     		strb	r3, [r0, #12]
 833:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 2044              		.loc 1 833 0
 2045 02f6 05F11C03 		add	r3, r5, #28
 2046 02fa 4373     		strb	r3, [r0, #13]
 834:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 2047              		.loc 1 834 0
 2048 02fc AB68     		ldr	r3, [r5, #8]
 2049 02fe 93FBF2F3 		sdiv	r3, r3, r2
 2050 0302 8373     		strb	r3, [r0, #14]
 835:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 2051              		.loc 1 835 0
 2052 0304 AB68     		ldr	r3, [r5, #8]
ARM GAS  /tmp/ccw660IW.s 			page 57


 2053 0306 5A42     		rsbs	r2, r3, #0
 2054 0308 DBB2     		uxtb	r3, r3
 2055 030a D2B2     		uxtb	r2, r2
 2056 030c 58BF     		it	pl
 2057 030e 5342     		rsbpl	r3, r2, #0
 2058 0310 C373     		strb	r3, [r0, #15]
 836:Src/Eagle_TRT.c **** 						can.size = 8;
 2059              		.loc 1 836 0
 2060 0312 D023     		movs	r3, #208
 2061 0314 0360     		str	r3, [r0]
 837:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 2062              		.loc 1 837 0
 2063 0316 0823     		movs	r3, #8
 2064 0318 4360     		str	r3, [r0, #4]
 838:Src/Eagle_TRT.c **** 						ret = 1;
 2065              		.loc 1 838 0
 2066 031a FFF7FEFF 		bl	CAN_Send
 2067              	.LVL186:
 2068              	.LBE9:
 2069 031e 75E6     		b	.L106
 2070              	.LVL187:
 2071              	.L144:
 852:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 2072              		.loc 1 852 0
 2073 0320 0122     		movs	r2, #1
 2074 0322 044B     		ldr	r3, .L162+4
 2075 0324 1A60     		str	r2, [r3]
 853:Src/Eagle_TRT.c **** 			}
 2076              		.loc 1 853 0
 2077 0326 0024     		movs	r4, #0
 2078 0328 034B     		ldr	r3, .L162+8
 2079 032a 1C60     		str	r4, [r3]
 2080 032c 6EE6     		b	.L106
 2081              	.L163:
 2082 032e 00BF     		.align	2
 2083              	.L162:
 2084 0330 00000000 		.word	can
 2085 0334 00000000 		.word	.LANCHOR23
 2086 0338 00000000 		.word	cont_string
 2087              		.cfi_endproc
 2088              	.LFE149:
 2090              		.global	__aeabi_f2d
 2091              		.section	.text.ReinitTIM7,"ax",%progbits
 2092              		.align	1
 2093              		.global	ReinitTIM7
 2094              		.syntax unified
 2095              		.thumb
 2096              		.thumb_func
 2097              		.fpu fpv4-sp-d16
 2099              	ReinitTIM7:
 2100              	.LFB155:
 895:Src/Eagle_TRT.c **** 
 896:Src/Eagle_TRT.c **** #endif
 897:Src/Eagle_TRT.c **** 
 898:Src/Eagle_TRT.c **** #ifdef HAL_TIM_MODULE_ENABLED
 899:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_tim.h"
 900:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccw660IW.s 			page 58


 901:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
 902:Src/Eagle_TRT.c **** extern char txt;
 903:Src/Eagle_TRT.c **** 
 904:Src/Eagle_TRT.c **** // Function to request data from encoder via SSI communication
 905:Src/Eagle_TRT.c **** // This function is called from the interrupt callback of the timer that you are using for the enco
 906:Src/Eagle_TRT.c **** // The tim used for this function must be initialized at most at 2 microsecond per tick
 907:Src/Eagle_TRT.c **** // Lower the number of microseconds per tick better it is
 908:Src/Eagle_TRT.c **** // TimerInstance = struct of the tim used for the encoder
 909:Src/Eagle_TRT.c **** enc_stc enc;
 910:Src/Eagle_TRT.c **** double read_encoder(enc_stc *enc)
 911:Src/Eagle_TRT.c **** {
 912:Src/Eagle_TRT.c **** 
 913:Src/Eagle_TRT.c **** 	enc->clock_period = 2;
 914:Src/Eagle_TRT.c **** 
 915:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 916:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 917:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 918:Src/Eagle_TRT.c **** 	{
 919:Src/Eagle_TRT.c **** 	}
 920:Src/Eagle_TRT.c **** 
 921:Src/Eagle_TRT.c **** 	// CLOCK HIGH
 922:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 923:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 924:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 925:Src/Eagle_TRT.c **** 	{
 926:Src/Eagle_TRT.c **** 	}
 927:Src/Eagle_TRT.c **** 
 928:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 929:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 930:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 931:Src/Eagle_TRT.c **** 	{
 932:Src/Eagle_TRT.c **** 	}
 933:Src/Eagle_TRT.c **** 
 934:Src/Eagle_TRT.c **** 	// Starting the clock to retrieve 14 bits from the sensor
 935:Src/Eagle_TRT.c **** 	for (int i = 0; i < enc->data_size; i++)
 936:Src/Eagle_TRT.c **** 	{
 937:Src/Eagle_TRT.c **** 
 938:Src/Eagle_TRT.c **** 		// CLOCK HIGH
 939:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 940:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 941:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 942:Src/Eagle_TRT.c **** 		{
 943:Src/Eagle_TRT.c **** 		}
 944:Src/Eagle_TRT.c **** 
 945:Src/Eagle_TRT.c **** 		// Set the bit as the pin state (0 or 1)
 946:Src/Eagle_TRT.c **** 		enc->Data[i] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 947:Src/Eagle_TRT.c **** 
 948:Src/Eagle_TRT.c **** 		// CLOCK LOW
 949:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 950:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 951:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 952:Src/Eagle_TRT.c **** 		{
 953:Src/Eagle_TRT.c **** 		}
 954:Src/Eagle_TRT.c **** 	}
 955:Src/Eagle_TRT.c **** 
 956:Src/Eagle_TRT.c **** 	// Requesting an other bit for the aventual error sent from the sensor
 957:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
ARM GAS  /tmp/ccw660IW.s 			page 59


 958:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 959:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
 960:Src/Eagle_TRT.c **** 	{
 961:Src/Eagle_TRT.c **** 	}
 962:Src/Eagle_TRT.c **** 
 963:Src/Eagle_TRT.c **** 	enc->error_flag = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 964:Src/Eagle_TRT.c **** 
 965:Src/Eagle_TRT.c **** 	// Converting bits into number and converting it into angle in degrees (0 ~ 359)
 966:Src/Eagle_TRT.c **** 	enc->converted_data = bin_dec(enc->Data, enc->data_size - 1);
 967:Src/Eagle_TRT.c **** 	enc->converted_data = enc->converted_data / 45.5055;
 968:Src/Eagle_TRT.c **** 
 969:Src/Eagle_TRT.c **** 	return enc->converted_data;
 970:Src/Eagle_TRT.c **** }
 971:Src/Eagle_TRT.c **** 
 972:Src/Eagle_TRT.c **** // Interrupt function of tim 2
 973:Src/Eagle_TRT.c **** // Call this function in the timer callback function of the stm
 974:Src/Eagle_TRT.c **** // htim = timer TimerInstance of the timer that you are using for the clock of the encoder
 975:Src/Eagle_TRT.c **** // Interrupt_flag = initilize a int variable in the main file
 976:Src/Eagle_TRT.c **** // Angles_array = array to store the last angles
 977:Src/Eagle_TRT.c **** // Speed = pointer to the speed value
 978:Src/Eagle_TRT.c **** void encoder_tim_interrupt(enc_stc *enc)
 979:Src/Eagle_TRT.c **** {
 980:Src/Eagle_TRT.c **** 
 981:Src/Eagle_TRT.c **** 	if (enc->interrupt_flag == 0)
 982:Src/Eagle_TRT.c **** 	{
 983:Src/Eagle_TRT.c **** 		// Requesting first angle
 984:Src/Eagle_TRT.c **** 		enc->angle0_prec = enc->angle0;
 985:Src/Eagle_TRT.c **** 		enc->angle0 = read_encoder(enc);
 986:Src/Eagle_TRT.c **** 	}
 987:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 1)
 988:Src/Eagle_TRT.c **** 	{
 989:Src/Eagle_TRT.c **** 		// Requesting second angle
 990:Src/Eagle_TRT.c **** 		enc->angle1_prec = enc->angle1;
 991:Src/Eagle_TRT.c **** 		enc->angle1 = read_encoder(enc);
 992:Src/Eagle_TRT.c **** 	}
 993:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 2)
 994:Src/Eagle_TRT.c **** 	{
 995:Src/Eagle_TRT.c **** 		// Calculate speed from the two angles
 996:Src/Eagle_TRT.c **** 		get_speed_encoder(enc);
 997:Src/Eagle_TRT.c **** 
 998:Src/Eagle_TRT.c **** 		enc->average_speed *= 10;
 999:Src/Eagle_TRT.c **** 
1000:Src/Eagle_TRT.c **** 		// Get the speed sign to be sent in CAN
1001:Src/Eagle_TRT.c **** 		if (enc->average_speed < 0)
1002:Src/Eagle_TRT.c **** 		{
1003:Src/Eagle_TRT.c **** 			enc->average_speed *= -1;
1004:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
1005:Src/Eagle_TRT.c **** 		}
1006:Src/Eagle_TRT.c **** 		else
1007:Src/Eagle_TRT.c **** 		{
1008:Src/Eagle_TRT.c **** 			enc->speed_sign = 0;
1009:Src/Eagle_TRT.c **** 		}
1010:Src/Eagle_TRT.c **** 	}
1011:Src/Eagle_TRT.c **** 
1012:Src/Eagle_TRT.c **** 	// Cycle between steps
1013:Src/Eagle_TRT.c **** 	if (enc->interrupt_flag >= 2)
1014:Src/Eagle_TRT.c **** 	{
ARM GAS  /tmp/ccw660IW.s 			page 60


1015:Src/Eagle_TRT.c **** 		enc->interrupt_flag = 0;
1016:Src/Eagle_TRT.c **** 	}
1017:Src/Eagle_TRT.c **** 	else
1018:Src/Eagle_TRT.c **** 	{
1019:Src/Eagle_TRT.c **** 		enc->interrupt_flag++;
1020:Src/Eagle_TRT.c **** 	}
1021:Src/Eagle_TRT.c **** }
1022:Src/Eagle_TRT.c **** 
1023:Src/Eagle_TRT.c **** // Funtion to calculate the speed
1024:Src/Eagle_TRT.c **** // Angle0 = last angle calculated
1025:Src/Eagle_TRT.c **** // Angle1 = previous angle calculated
1026:Src/Eagle_TRT.c **** // Refresh = delta-time from the two calculations, express it in microseconds
1027:Src/Eagle_TRT.c **** // Wheel_diameter = diameter of the wheel expressed meters
1028:Src/Eagle_TRT.c **** void get_speed_encoder(enc_stc *enc)
1029:Src/Eagle_TRT.c **** {
1030:Src/Eagle_TRT.c **** 
1031:Src/Eagle_TRT.c **** 	long double speed = 0;
1032:Src/Eagle_TRT.c **** 	double dt = 0;
1033:Src/Eagle_TRT.c **** 
1034:Src/Eagle_TRT.c **** 	dt = enc->samle_delta_time;
1035:Src/Eagle_TRT.c **** 
1036:Src/Eagle_TRT.c **** 	if (enc->dx_wheel == 1)
1037:Src/Eagle_TRT.c **** 	{
1038:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle1 - enc->angle0;
1039:Src/Eagle_TRT.c **** 	}
1040:Src/Eagle_TRT.c **** 	else
1041:Src/Eagle_TRT.c **** 	{
1042:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle0 - enc->angle1;
1043:Src/Eagle_TRT.c **** 	}
1044:Src/Eagle_TRT.c **** 
1045:Src/Eagle_TRT.c **** 	//calculate correct delta angle if near to 0-360
1046:Src/Eagle_TRT.c **** 	if ((enc->angle0 < enc->max_delta_angle && enc->angle1 > 360 - enc->max_delta_angle) ||
1047:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
1048:Src/Eagle_TRT.c **** 	{
1049:Src/Eagle_TRT.c **** 		if (enc->delta_angle < 0)
1050:Src/Eagle_TRT.c **** 		{
1051:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 + enc->delta_angle;
1052:Src/Eagle_TRT.c **** 		}
1053:Src/Eagle_TRT.c **** 		else
1054:Src/Eagle_TRT.c **** 		{
1055:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 - enc->delta_angle;
1056:Src/Eagle_TRT.c **** 		}
1057:Src/Eagle_TRT.c **** 	}
1058:Src/Eagle_TRT.c **** 
1059:Src/Eagle_TRT.c **** 	// Calculating rad/s, then m/s, then Km/h
1060:Src/Eagle_TRT.c **** 	speed = (enc->delta_angle / 180) * 3.1415 * (enc->wheel_diameter);
1061:Src/Eagle_TRT.c **** 	speed *= 3.6;
1062:Src/Eagle_TRT.c **** 	speed /= dt;
1063:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
1064:Src/Eagle_TRT.c **** 
1065:Src/Eagle_TRT.c **** 	int off = enc->max_delta_angle;
1066:Src/Eagle_TRT.c **** 
1067:Src/Eagle_TRT.c **** 	// Start detecting eventual new wheel roation
1068:Src/Eagle_TRT.c **** 	// If the speed is too low, don't count rotations
1069:Src/Eagle_TRT.c **** 	if (enc->average_speed < -0.5 || enc->average_speed > 0.5)
1070:Src/Eagle_TRT.c **** 	{
1071:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec <= 361 && enc->angle0_prec > 360 - off) && (enc->angle0 >= -1 && enc->angle
ARM GAS  /tmp/ccw660IW.s 			page 61


1072:Src/Eagle_TRT.c **** 		{
1073:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1074:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
1075:Src/Eagle_TRT.c **** 		}
1076:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec >= -1 && enc->angle0_prec < off) && (enc->angle0 <= 361 && enc->angle0 > 36
1077:Src/Eagle_TRT.c **** 		{
1078:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1079:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
1080:Src/Eagle_TRT.c **** 		}
1081:Src/Eagle_TRT.c **** 	}
1082:Src/Eagle_TRT.c **** 
1083:Src/Eagle_TRT.c **** 	shift_array(enc->speed_array, 50, speed);
1084:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 50);
1085:Src/Eagle_TRT.c **** 
1086:Src/Eagle_TRT.c **** 	enc_calculate_optimal_frequency(enc);
1087:Src/Eagle_TRT.c **** }
1088:Src/Eagle_TRT.c **** 
1089:Src/Eagle_TRT.c **** void enc_calculate_optimal_frequency(enc_stc *enc)
1090:Src/Eagle_TRT.c **** {
1091:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
1092:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.25 || abs_delta_angle < enc->max_delta_angle * 0.5)
1093:Src/Eagle_TRT.c **** 	{
1094:Src/Eagle_TRT.c **** 		double angular_speed = enc->average_speed / (enc->wheel_diameter / 2);
1095:Src/Eagle_TRT.c **** 		double frequency = angular_speed / enc->max_delta_angle;
1096:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
1097:Src/Eagle_TRT.c **** 
1098:Src/Eagle_TRT.c **** 		// Returns 0 if reinitialization is done correctly
1099:Src/Eagle_TRT.c **** 		if (ReinitTIM7(frequency, enc) == 0)
1100:Src/Eagle_TRT.c **** 		{
1101:Src/Eagle_TRT.c **** 			// Set encoder actual frequency
1102:Src/Eagle_TRT.c **** 			enc->frequency = enc->frequency_timer_Hz / (enc->frequency_timer->Init.Prescaler * enc->frequenc
1103:Src/Eagle_TRT.c **** 		}
1104:Src/Eagle_TRT.c **** 	}
1105:Src/Eagle_TRT.c **** }
1106:Src/Eagle_TRT.c **** 
1107:Src/Eagle_TRT.c **** int ReinitTIM7(float frequency, enc_stc *enc)
1108:Src/Eagle_TRT.c **** {
 2101              		.loc 1 1108 0
 2102              		.cfi_startproc
 2103              		@ args = 0, pretend = 0, frame = 8
 2104              		@ frame_needed = 0, uses_anonymous_args = 0
 2105              	.LVL188:
 2106 0000 30B5     		push	{r4, r5, lr}
 2107              	.LCFI29:
 2108              		.cfi_def_cfa_offset 12
 2109              		.cfi_offset 4, -12
 2110              		.cfi_offset 5, -8
 2111              		.cfi_offset 14, -4
 2112 0002 83B0     		sub	sp, sp, #12
 2113              	.LCFI30:
 2114              		.cfi_def_cfa_offset 24
 2115 0004 0446     		mov	r4, r0
 2116              	.LVL189:
1109:Src/Eagle_TRT.c **** 
1110:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 0 */
1111:Src/Eagle_TRT.c **** 	int error_flag = 0;
1112:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccw660IW.s 			page 62


1113:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 0 */
1114:Src/Eagle_TRT.c **** 
1115:Src/Eagle_TRT.c **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 2117              		.loc 1 1115 0
 2118 0006 0025     		movs	r5, #0
 2119 0008 0095     		str	r5, [sp]
 2120 000a 0195     		str	r5, [sp, #4]
1116:Src/Eagle_TRT.c **** 
1117:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 1 */
1118:Src/Eagle_TRT.c **** 
1119:Src/Eagle_TRT.c **** 	enc->frequency_timer_prescaler = sqrt(enc->frequency_timer_Hz * frequency);
 2121              		.loc 1 1119 0
 2122 000c D0ED217A 		vldr.32	s15, [r0, #132]	@ int
 2123 0010 F8EEE77A 		vcvt.f32.s32	s15, s15
 2124 0014 67EE807A 		vmul.f32	s15, s15, s0
 2125 0018 17EE900A 		vmov	r0, s15
 2126              	.LVL190:
 2127 001c FFF7FEFF 		bl	__aeabi_f2d
 2128              	.LVL191:
 2129 0020 41EC100B 		vmov	d0, r0, r1
 2130 0024 FFF7FEFF 		bl	sqrt
 2131              	.LVL192:
 2132 0028 51EC100B 		vmov	r0, r1, d0
 2133 002c FFF7FEFF 		bl	__aeabi_d2iz
 2134              	.LVL193:
 2135 0030 C4F88800 		str	r0, [r4, #136]
1120:Src/Eagle_TRT.c **** 	enc->frequency_timer_period = enc->frequency_timer_prescaler;
 2136              		.loc 1 1120 0
 2137 0034 C4F88C00 		str	r0, [r4, #140]
1121:Src/Eagle_TRT.c **** 
1122:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 1 */
1123:Src/Eagle_TRT.c **** 	enc->frequency_timer->Instance = TIM7;
 2138              		.loc 1 1123 0
 2139 0038 D4F8EC33 		ldr	r3, [r4, #1004]
 2140 003c 124A     		ldr	r2, .L170
 2141 003e 1A60     		str	r2, [r3]
1124:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Prescaler = enc->frequency_timer_prescaler;
 2142              		.loc 1 1124 0
 2143 0040 D4F8EC33 		ldr	r3, [r4, #1004]
 2144 0044 D4F88820 		ldr	r2, [r4, #136]
 2145 0048 5A60     		str	r2, [r3, #4]
1125:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 2146              		.loc 1 1125 0
 2147 004a D4F8EC33 		ldr	r3, [r4, #1004]
 2148 004e 9D60     		str	r5, [r3, #8]
1126:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Period = enc->frequency_timer_period;
 2149              		.loc 1 1126 0
 2150 0050 D4F8EC33 		ldr	r3, [r4, #1004]
 2151 0054 D4F88C20 		ldr	r2, [r4, #140]
 2152 0058 DA60     		str	r2, [r3, #12]
1127:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2153              		.loc 1 1127 0
 2154 005a D4F8EC33 		ldr	r3, [r4, #1004]
 2155 005e 9D61     		str	r5, [r3, #24]
1128:Src/Eagle_TRT.c **** 
1129:Src/Eagle_TRT.c **** 	if (HAL_TIM_Base_Init(enc->frequency_timer) != HAL_OK)
 2156              		.loc 1 1129 0
ARM GAS  /tmp/ccw660IW.s 			page 63


 2157 0060 D4F8EC03 		ldr	r0, [r4, #1004]
 2158 0064 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2159              	.LVL194:
 2160 0068 00B1     		cbz	r0, .L165
1130:Src/Eagle_TRT.c **** 	{
1131:Src/Eagle_TRT.c **** 		error_flag = 1;
 2161              		.loc 1 1131 0
 2162 006a 0125     		movs	r5, #1
 2163              	.L165:
 2164              	.LVL195:
1132:Src/Eagle_TRT.c **** 	}
1133:Src/Eagle_TRT.c **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 2165              		.loc 1 1133 0
 2166 006c 0023     		movs	r3, #0
 2167 006e 0093     		str	r3, [sp]
1134:Src/Eagle_TRT.c **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2168              		.loc 1 1134 0
 2169 0070 0193     		str	r3, [sp, #4]
1135:Src/Eagle_TRT.c **** 	if (HAL_TIMEx_MasterConfigSynchronization(enc->frequency_timer, &sMasterConfig) != HAL_OK)
 2170              		.loc 1 1135 0
 2171 0072 6946     		mov	r1, sp
 2172 0074 D4F8EC03 		ldr	r0, [r4, #1004]
 2173 0078 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2174              	.LVL196:
 2175 007c 00B1     		cbz	r0, .L164
1136:Src/Eagle_TRT.c **** 	{
1137:Src/Eagle_TRT.c **** 		error_flag = 2;
 2176              		.loc 1 1137 0
 2177 007e 0225     		movs	r5, #2
 2178              	.LVL197:
 2179              	.L164:
1138:Src/Eagle_TRT.c **** 	}
1139:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 2 */
1140:Src/Eagle_TRT.c **** 	return error_flag;
1141:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 2 */
1142:Src/Eagle_TRT.c **** }
 2180              		.loc 1 1142 0
 2181 0080 2846     		mov	r0, r5
 2182 0082 03B0     		add	sp, sp, #12
 2183              	.LCFI31:
 2184              		.cfi_def_cfa_offset 12
 2185              		@ sp needed
 2186 0084 30BD     		pop	{r4, r5, pc}
 2187              	.LVL198:
 2188              	.L171:
 2189 0086 00BF     		.align	2
 2190              	.L170:
 2191 0088 00140040 		.word	1073746944
 2192              		.cfi_endproc
 2193              	.LFE155:
 2195              		.global	__aeabi_dcmpge
 2196              		.global	__aeabi_dcmpgt
 2197              		.global	__aeabi_dcmplt
 2198              		.global	__aeabi_ddiv
 2199              		.global	__aeabi_d2f
 2200              		.section	.text.enc_calculate_optimal_frequency,"ax",%progbits
 2201              		.align	1
ARM GAS  /tmp/ccw660IW.s 			page 64


 2202              		.global	enc_calculate_optimal_frequency
 2203              		.syntax unified
 2204              		.thumb
 2205              		.thumb_func
 2206              		.fpu fpv4-sp-d16
 2208              	enc_calculate_optimal_frequency:
 2209              	.LFB154:
1090:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
 2210              		.loc 1 1090 0
 2211              		.cfi_startproc
 2212              		@ args = 0, pretend = 0, frame = 0
 2213              		@ frame_needed = 0, uses_anonymous_args = 0
 2214              	.LVL199:
 2215 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
 2216              	.LCFI32:
 2217              		.cfi_def_cfa_offset 24
 2218              		.cfi_offset 4, -24
 2219              		.cfi_offset 6, -20
 2220              		.cfi_offset 7, -16
 2221              		.cfi_offset 8, -12
 2222              		.cfi_offset 9, -8
 2223              		.cfi_offset 14, -4
 2224 0004 0446     		mov	r4, r0
1091:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.25 || abs_delta_angle < enc->max_delta_angle * 0.5)
 2225              		.loc 1 1091 0
 2226 0006 D0E92C67 		ldrd	r6, [r0, #176]
 2227 000a 0022     		movs	r2, #0
 2228 000c 0023     		movs	r3, #0
 2229 000e 3046     		mov	r0, r6
 2230              	.LVL200:
 2231 0010 3946     		mov	r1, r7
 2232 0012 FFF7FEFF 		bl	__aeabi_dcmpge
 2233              	.LVL201:
 2234 0016 0028     		cmp	r0, #0
 2235 0018 57D0     		beq	.L181
 2236              	.L173:
 2237              	.LVL202:
1092:Src/Eagle_TRT.c **** 	{
 2238              		.loc 1 1092 0 discriminator 4
 2239 001a E06F     		ldr	r0, [r4, #124]	@ float
 2240 001c FFF7FEFF 		bl	__aeabi_f2d
 2241              	.LVL203:
 2242 0020 8046     		mov	r8, r0
 2243 0022 8946     		mov	r9, r1
 2244 0024 0022     		movs	r2, #0
 2245 0026 2B4B     		ldr	r3, .L182
 2246 0028 FFF7FEFF 		bl	__aeabi_dmul
 2247              	.LVL204:
 2248 002c 0246     		mov	r2, r0
 2249 002e 0B46     		mov	r3, r1
 2250 0030 3046     		mov	r0, r6
 2251 0032 3946     		mov	r1, r7
 2252 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2253              	.LVL205:
 2254 0038 60B9     		cbnz	r0, .L174
1092:Src/Eagle_TRT.c **** 	{
 2255              		.loc 1 1092 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccw660IW.s 			page 65


 2256 003a 0022     		movs	r2, #0
 2257 003c 264B     		ldr	r3, .L182+4
 2258 003e 4046     		mov	r0, r8
 2259 0040 4946     		mov	r1, r9
 2260 0042 FFF7FEFF 		bl	__aeabi_dmul
 2261              	.LVL206:
 2262 0046 0246     		mov	r2, r0
 2263 0048 0B46     		mov	r3, r1
 2264 004a 3046     		mov	r0, r6
 2265 004c 3946     		mov	r1, r7
 2266 004e FFF7FEFF 		bl	__aeabi_dcmplt
 2267              	.LVL207:
 2268 0052 C0B3     		cbz	r0, .L172
 2269              	.L174:
 2270              	.LBB11:
1094:Src/Eagle_TRT.c **** 		double frequency = angular_speed / enc->max_delta_angle;
 2271              		.loc 1 1094 0 is_stmt 1
 2272 0054 D4E9F667 		ldrd	r6, [r4, #984]
 2273              	.LVL208:
 2274 0058 94ED1E7A 		vldr.32	s14, [r4, #120]
 2275 005c F6EE007A 		vmov.f32	s15, #5.0e-1
 2276 0060 67EE277A 		vmul.f32	s15, s14, s15
 2277 0064 17EE900A 		vmov	r0, s15
 2278 0068 FFF7FEFF 		bl	__aeabi_f2d
 2279              	.LVL209:
 2280 006c 0246     		mov	r2, r0
 2281 006e 0B46     		mov	r3, r1
 2282 0070 3046     		mov	r0, r6
 2283 0072 3946     		mov	r1, r7
 2284 0074 FFF7FEFF 		bl	__aeabi_ddiv
 2285              	.LVL210:
1095:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
 2286              		.loc 1 1095 0
 2287 0078 4246     		mov	r2, r8
 2288 007a 4B46     		mov	r3, r9
 2289 007c FFF7FEFF 		bl	__aeabi_ddiv
 2290              	.LVL211:
 2291 0080 0646     		mov	r6, r0
 2292 0082 0F46     		mov	r7, r1
 2293              	.LVL212:
1096:Src/Eagle_TRT.c **** 
 2294              		.loc 1 1096 0
 2295 0084 0022     		movs	r2, #0
 2296 0086 154B     		ldr	r3, .L182+8
 2297 0088 FFF7FEFF 		bl	__aeabi_dcmplt
 2298              	.LVL213:
 2299 008c 08B1     		cbz	r0, .L177
 2300 008e 0026     		movs	r6, #0
 2301              	.LVL214:
 2302 0090 124F     		ldr	r7, .L182+8
 2303              	.L177:
 2304              	.LVL215:
1099:Src/Eagle_TRT.c **** 		{
 2305              		.loc 1 1099 0 discriminator 4
 2306 0092 3046     		mov	r0, r6
 2307 0094 3946     		mov	r1, r7
 2308 0096 FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  /tmp/ccw660IW.s 			page 66


 2309              	.LVL216:
 2310 009a 00EE100A 		vmov	s0, r0
 2311 009e 2046     		mov	r0, r4
 2312 00a0 FFF7FEFF 		bl	ReinitTIM7
 2313              	.LVL217:
 2314 00a4 78B9     		cbnz	r0, .L172
1102:Src/Eagle_TRT.c **** 		}
 2315              		.loc 1 1102 0
 2316 00a6 D4F88430 		ldr	r3, [r4, #132]
 2317 00aa D4F8EC13 		ldr	r1, [r4, #1004]
 2318 00ae 4868     		ldr	r0, [r1, #4]
 2319 00b0 CA68     		ldr	r2, [r1, #12]
 2320 00b2 02FB00F2 		mul	r2, r2, r0
 2321 00b6 B3FBF2F3 		udiv	r3, r3, r2
 2322 00ba 07EE903A 		vmov	s15, r3	@ int
 2323 00be F8EE677A 		vcvt.f32.u32	s15, s15
 2324 00c2 C4ED207A 		vstr.32	s15, [r4, #128]
 2325              	.LVL218:
 2326              	.L172:
 2327 00c6 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 2328              	.LVL219:
 2329              	.L181:
 2330              	.LBE11:
1091:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.25 || abs_delta_angle < enc->max_delta_angle * 0.5)
 2331              		.loc 1 1091 0 discriminator 2
 2332 00ca 07F10043 		add	r3, r7, #-2147483648
 2333 00ce 1F46     		mov	r7, r3
 2334 00d0 A3E7     		b	.L173
 2335              	.L183:
 2336 00d2 00BF     		.align	2
 2337              	.L182:
 2338 00d4 0000F43F 		.word	1072955392
 2339 00d8 0000E03F 		.word	1071644672
 2340 00dc 00004940 		.word	1078525952
 2341              		.cfi_endproc
 2342              	.LFE154:
 2344              		.section	.text.calc_pot_value,"ax",%progbits
 2345              		.align	1
 2346              		.global	calc_pot_value
 2347              		.syntax unified
 2348              		.thumb
 2349              		.thumb_func
 2350              		.fpu fpv4-sp-d16
 2352              	calc_pot_value:
 2353              	.LFB156:
1143:Src/Eagle_TRT.c **** 
1144:Src/Eagle_TRT.c **** pot_stc pot_1;
1145:Src/Eagle_TRT.c **** pot_stc pot_2;
1146:Src/Eagle_TRT.c **** pot_stc pot_3;
1147:Src/Eagle_TRT.c **** void calc_pot_value(pot_stc *pot)
1148:Src/Eagle_TRT.c **** {
 2354              		.loc 1 1148 0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 0
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 2358              		@ link register save eliminated.
 2359              	.LVL220:
ARM GAS  /tmp/ccw660IW.s 			page 67


 2360 0000 10B4     		push	{r4}
 2361              	.LCFI33:
 2362              		.cfi_def_cfa_offset 4
 2363              		.cfi_offset 4, -4
1149:Src/Eagle_TRT.c **** 
1150:Src/Eagle_TRT.c **** 	pot->val_100 = round(100 - (abs(pot->val - pot->min) * 100 / (pot->range))); //val0_100 -->STEER -
 2364              		.loc 1 1150 0
 2365 0002 0269     		ldr	r2, [r0, #16]
 2366 0004 8468     		ldr	r4, [r0, #8]
 2367 0006 131B     		subs	r3, r2, r4
 2368 0008 83EAE371 		eor	r1, r3, r3, asr #31
 2369 000c A1EBE371 		sub	r1, r1, r3, asr #31
 2370 0010 6FF06303 		mvn	r3, #99
 2371 0014 03FB01F3 		mul	r3, r3, r1
 2372 0018 C168     		ldr	r1, [r0, #12]
 2373 001a 93FBF1F3 		sdiv	r3, r3, r1
 2374 001e 6433     		adds	r3, r3, #100
 2375 0020 0360     		str	r3, [r0]
1151:Src/Eagle_TRT.c **** 	if (pot->val <= pot->min)
 2376              		.loc 1 1151 0
 2377 0022 A242     		cmp	r2, r4
 2378 0024 01DC     		bgt	.L185
1152:Src/Eagle_TRT.c **** 	{
1153:Src/Eagle_TRT.c **** 		pot->val_100 = 100;
 2379              		.loc 1 1153 0
 2380 0026 6423     		movs	r3, #100
 2381 0028 0360     		str	r3, [r0]
 2382              	.L185:
1154:Src/Eagle_TRT.c **** 	}
1155:Src/Eagle_TRT.c **** 	if (pot->val >= pot->max)
 2383              		.loc 1 1155 0
 2384 002a 4368     		ldr	r3, [r0, #4]
 2385 002c 9A42     		cmp	r2, r3
 2386 002e 01DB     		blt	.L184
1156:Src/Eagle_TRT.c **** 	{
1157:Src/Eagle_TRT.c **** 		pot->val_100 = 0;
 2387              		.loc 1 1157 0
 2388 0030 0023     		movs	r3, #0
 2389 0032 0360     		str	r3, [r0]
 2390              	.L184:
1158:Src/Eagle_TRT.c **** 	}
1159:Src/Eagle_TRT.c **** }
 2391              		.loc 1 1159 0
 2392 0034 5DF8044B 		ldr	r4, [sp], #4
 2393              	.LCFI34:
 2394              		.cfi_restore 4
 2395              		.cfi_def_cfa_offset 0
 2396 0038 7047     		bx	lr
 2397              		.cfi_endproc
 2398              	.LFE156:
 2400              		.section	.text.implausibility_check,"ax",%progbits
 2401              		.align	1
 2402              		.global	implausibility_check
 2403              		.syntax unified
 2404              		.thumb
 2405              		.thumb_func
 2406              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccw660IW.s 			page 68


 2408              	implausibility_check:
 2409              	.LFB157:
1160:Src/Eagle_TRT.c **** 
1161:Src/Eagle_TRT.c **** //Function to check if the two ADC values are approximately the same
1162:Src/Eagle_TRT.c **** //if the values are different for more tha 10 points percentage for more than 100 milliseconds retu
1163:Src/Eagle_TRT.c **** //TimerInstance = pointer to the timer needed to check the SCS error
1164:Src/Eagle_TRT.c **** //val0_100 = pointer to the first potentiometer
1165:Src/Eagle_TRT.c **** //val1_100 = pointer to the second potentiometer
1166:Src/Eagle_TRT.c **** int implausibility_check(pot_stc *pot_1, pot_stc *pot_2)
1167:Src/Eagle_TRT.c **** {
 2410              		.loc 1 1167 0
 2411              		.cfi_startproc
 2412              		@ args = 0, pretend = 0, frame = 0
 2413              		@ frame_needed = 0, uses_anonymous_args = 0
 2414              		@ link register save eliminated.
 2415              	.LVL221:
1168:Src/Eagle_TRT.c **** 
1169:Src/Eagle_TRT.c **** 	int SCS1 = 0;
1170:Src/Eagle_TRT.c **** 
1171:Src/Eagle_TRT.c **** 	if (pot_1->val_100 >= 100)
 2416              		.loc 1 1171 0
 2417 0000 0368     		ldr	r3, [r0]
 2418 0002 632B     		cmp	r3, #99
 2419 0004 01DD     		ble	.L189
1172:Src/Eagle_TRT.c **** 	{
1173:Src/Eagle_TRT.c **** 		pot_1->val_100 = 100;
 2420              		.loc 1 1173 0
 2421 0006 6423     		movs	r3, #100
 2422 0008 0360     		str	r3, [r0]
 2423              	.L189:
1174:Src/Eagle_TRT.c **** 	}
1175:Src/Eagle_TRT.c **** 	if (pot_1->val_100 <= 5)
 2424              		.loc 1 1175 0
 2425 000a 0368     		ldr	r3, [r0]
 2426 000c 052B     		cmp	r3, #5
 2427 000e 01DC     		bgt	.L190
1176:Src/Eagle_TRT.c **** 	{
1177:Src/Eagle_TRT.c **** 		pot_1->val_100 = 0;
 2428              		.loc 1 1177 0
 2429 0010 0023     		movs	r3, #0
 2430 0012 0360     		str	r3, [r0]
 2431              	.L190:
1178:Src/Eagle_TRT.c **** 	}
1179:Src/Eagle_TRT.c **** 	if (pot_2->val_100 >= 100)
 2432              		.loc 1 1179 0
 2433 0014 0B68     		ldr	r3, [r1]
 2434 0016 632B     		cmp	r3, #99
 2435 0018 01DD     		ble	.L191
1180:Src/Eagle_TRT.c **** 	{
1181:Src/Eagle_TRT.c **** 		pot_2->val_100 = 100;
 2436              		.loc 1 1181 0
 2437 001a 6423     		movs	r3, #100
 2438 001c 0B60     		str	r3, [r1]
 2439              	.L191:
1182:Src/Eagle_TRT.c **** 	}
1183:Src/Eagle_TRT.c **** 	if (pot_2->val_100 <= 5)
 2440              		.loc 1 1183 0
ARM GAS  /tmp/ccw660IW.s 			page 69


 2441 001e 0B68     		ldr	r3, [r1]
 2442 0020 052B     		cmp	r3, #5
 2443 0022 01DC     		bgt	.L192
1184:Src/Eagle_TRT.c **** 	{
1185:Src/Eagle_TRT.c **** 		pot_2->val_100 = 0;
 2444              		.loc 1 1185 0
 2445 0024 0023     		movs	r3, #0
 2446 0026 0B60     		str	r3, [r1]
 2447              	.L192:
1186:Src/Eagle_TRT.c **** 	}
1187:Src/Eagle_TRT.c **** 	if (abs(pot_1->val_100 - pot_2->val_100) >= 10)
 2448              		.loc 1 1187 0
 2449 0028 0368     		ldr	r3, [r0]
 2450 002a 0A68     		ldr	r2, [r1]
 2451 002c 9B1A     		subs	r3, r3, r2
 2452 002e 002B     		cmp	r3, #0
 2453 0030 B8BF     		it	lt
 2454 0032 5B42     		rsblt	r3, r3, #0
 2455 0034 092B     		cmp	r3, #9
 2456 0036 06DD     		ble	.L193
1188:Src/Eagle_TRT.c **** 	{
1189:Src/Eagle_TRT.c **** 		if (__HAL_TIM_GET_COUNTER(pot_1->TimerInstance) > 100)
 2457              		.loc 1 1189 0
 2458 0038 4369     		ldr	r3, [r0, #20]
 2459 003a 1B68     		ldr	r3, [r3]
 2460 003c 5B6A     		ldr	r3, [r3, #36]
 2461 003e 642B     		cmp	r3, #100
 2462 0040 06D8     		bhi	.L195
1169:Src/Eagle_TRT.c **** 
 2463              		.loc 1 1169 0
 2464 0042 0020     		movs	r0, #0
 2465              	.LVL222:
 2466 0044 7047     		bx	lr
 2467              	.LVL223:
 2468              	.L193:
1190:Src/Eagle_TRT.c **** 		{
1191:Src/Eagle_TRT.c **** 			SCS1 = 1;
1192:Src/Eagle_TRT.c **** 		}
1193:Src/Eagle_TRT.c **** 	}
1194:Src/Eagle_TRT.c **** 	else
1195:Src/Eagle_TRT.c **** 	{
1196:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(pot_1->TimerInstance, 0);
 2469              		.loc 1 1196 0
 2470 0046 4369     		ldr	r3, [r0, #20]
 2471 0048 1B68     		ldr	r3, [r3]
 2472 004a 0020     		movs	r0, #0
 2473              	.LVL224:
 2474 004c 5862     		str	r0, [r3, #36]
 2475 004e 7047     		bx	lr
 2476              	.LVL225:
 2477              	.L195:
1191:Src/Eagle_TRT.c **** 		}
 2478              		.loc 1 1191 0
 2479 0050 0120     		movs	r0, #1
 2480              	.LVL226:
1197:Src/Eagle_TRT.c **** 		SCS1 = 0;
1198:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccw660IW.s 			page 70


1199:Src/Eagle_TRT.c **** 
1200:Src/Eagle_TRT.c **** 	return SCS1;
1201:Src/Eagle_TRT.c **** }
 2481              		.loc 1 1201 0
 2482 0052 7047     		bx	lr
 2483              		.cfi_endproc
 2484              	.LFE157:
 2486              		.section	.text.set_max,"ax",%progbits
 2487              		.align	1
 2488              		.global	set_max
 2489              		.syntax unified
 2490              		.thumb
 2491              		.thumb_func
 2492              		.fpu fpv4-sp-d16
 2494              	set_max:
 2495              	.LFB158:
1202:Src/Eagle_TRT.c **** 
1203:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is released
1204:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1205:Src/Eagle_TRT.c **** //max1 = pointer to the maximum value of the APPS1
1206:Src/Eagle_TRT.c **** //max2 = pointer to the maximum value of the APPS2
1207:Src/Eagle_TRT.c **** void set_max(pot_stc *pot_1)
1208:Src/Eagle_TRT.c **** {
 2496              		.loc 1 1208 0
 2497              		.cfi_startproc
 2498              		@ args = 0, pretend = 0, frame = 0
 2499              		@ frame_needed = 0, uses_anonymous_args = 0
 2500              		@ link register save eliminated.
 2501              	.LVL227:
1209:Src/Eagle_TRT.c **** 	pot_1->max = pot_1->val;
 2502              		.loc 1 1209 0
 2503 0000 0369     		ldr	r3, [r0, #16]
 2504 0002 4360     		str	r3, [r0, #4]
 2505 0004 7047     		bx	lr
 2506              		.cfi_endproc
 2507              	.LFE158:
 2509              		.section	.text.set_min,"ax",%progbits
 2510              		.align	1
 2511              		.global	set_min
 2512              		.syntax unified
 2513              		.thumb
 2514              		.thumb_func
 2515              		.fpu fpv4-sp-d16
 2517              	set_min:
 2518              	.LFB159:
1210:Src/Eagle_TRT.c **** }
1211:Src/Eagle_TRT.c **** 
1212:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is pressed
1213:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1214:Src/Eagle_TRT.c **** //min1 = pointer to the minimum value of the APPS1
1215:Src/Eagle_TRT.c **** //min2 = pointer to the minimum value of the APPS2
1216:Src/Eagle_TRT.c **** void set_min(pot_stc *pot_1)
1217:Src/Eagle_TRT.c **** {
 2519              		.loc 1 1217 0
 2520              		.cfi_startproc
 2521              		@ args = 0, pretend = 0, frame = 0
 2522              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccw660IW.s 			page 71


 2523              		@ link register save eliminated.
 2524              	.LVL228:
1218:Src/Eagle_TRT.c **** 	pot_1->min = pot_1->val;
 2525              		.loc 1 1218 0
 2526 0000 0369     		ldr	r3, [r0, #16]
 2527 0002 8360     		str	r3, [r0, #8]
 2528 0004 7047     		bx	lr
 2529              		.cfi_endproc
 2530              	.LFE159:
 2532              		.global	__aeabi_i2d
 2533              		.section	.text.Power,"ax",%progbits
 2534              		.align	1
 2535              		.global	Power
 2536              		.syntax unified
 2537              		.thumb
 2538              		.thumb_func
 2539              		.fpu fpv4-sp-d16
 2541              	Power:
 2542              	.LFB161:
1219:Src/Eagle_TRT.c **** }
1220:Src/Eagle_TRT.c **** 
1221:Src/Eagle_TRT.c **** #endif
1222:Src/Eagle_TRT.c **** 
1223:Src/Eagle_TRT.c **** //function to calculate the decimal value from MSB binary array
1224:Src/Eagle_TRT.c **** //bin = pointer to binary array
1225:Src/Eagle_TRT.c **** //max = size of the array
1226:Src/Eagle_TRT.c **** int bin_dec(int *bin, int size)
1227:Src/Eagle_TRT.c **** {
1228:Src/Eagle_TRT.c **** 
1229:Src/Eagle_TRT.c **** 	int dec = 0;
1230:Src/Eagle_TRT.c **** 
1231:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1232:Src/Eagle_TRT.c **** 	{
1233:Src/Eagle_TRT.c **** 		if (bin[i] == 1)
1234:Src/Eagle_TRT.c **** 		{
1235:Src/Eagle_TRT.c **** 			dec += Power(2, size - i - 1);
1236:Src/Eagle_TRT.c **** 		}
1237:Src/Eagle_TRT.c **** 	}
1238:Src/Eagle_TRT.c **** 
1239:Src/Eagle_TRT.c **** 	return dec;
1240:Src/Eagle_TRT.c **** }
1241:Src/Eagle_TRT.c **** 
1242:Src/Eagle_TRT.c **** //function to calculate the power of a given number
1243:Src/Eagle_TRT.c **** double Power(int base, int expn)
1244:Src/Eagle_TRT.c **** {
 2543              		.loc 1 1244 0
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 0
 2546              		@ frame_needed = 0, uses_anonymous_args = 0
 2547              	.LVL229:
 2548 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2549              	.LCFI35:
 2550              		.cfi_def_cfa_offset 24
 2551              		.cfi_offset 4, -24
 2552              		.cfi_offset 5, -20
 2553              		.cfi_offset 6, -16
 2554              		.cfi_offset 7, -12
ARM GAS  /tmp/ccw660IW.s 			page 72


 2555              		.cfi_offset 8, -8
 2556              		.cfi_offset 14, -4
 2557              	.LVL230:
1245:Src/Eagle_TRT.c **** 
1246:Src/Eagle_TRT.c **** 	double result = 1;
1247:Src/Eagle_TRT.c **** 
1248:Src/Eagle_TRT.c **** 	if (expn != 0)
 2558              		.loc 1 1248 0
 2559 0004 29B1     		cbz	r1, .L204
 2560 0006 0D46     		mov	r5, r1
 2561 0008 8046     		mov	r8, r0
 2562 000a 0024     		movs	r4, #0
 2563 000c 0026     		movs	r6, #0
 2564 000e 0B4F     		ldr	r7, .L205
 2565 0010 0EE0     		b	.L199
 2566              	.L204:
1246:Src/Eagle_TRT.c **** 
 2567              		.loc 1 1246 0
 2568 0012 0026     		movs	r6, #0
 2569 0014 094F     		ldr	r7, .L205
 2570 0016 0DE0     		b	.L198
 2571              	.LVL231:
 2572              	.L201:
 2573              	.LBB12:
1249:Src/Eagle_TRT.c **** 	{
1250:Src/Eagle_TRT.c **** 		for (int j = 0; j < expn; j++)
1251:Src/Eagle_TRT.c **** 		{
1252:Src/Eagle_TRT.c **** 			result = result * base;
 2574              		.loc 1 1252 0 discriminator 3
 2575 0018 4046     		mov	r0, r8
 2576 001a FFF7FEFF 		bl	__aeabi_i2d
 2577              	.LVL232:
 2578 001e 0246     		mov	r2, r0
 2579 0020 0B46     		mov	r3, r1
 2580 0022 3046     		mov	r0, r6
 2581 0024 3946     		mov	r1, r7
 2582 0026 FFF7FEFF 		bl	__aeabi_dmul
 2583              	.LVL233:
 2584 002a 0646     		mov	r6, r0
 2585              	.LVL234:
 2586 002c 0F46     		mov	r7, r1
 2587              	.LVL235:
1250:Src/Eagle_TRT.c **** 		{
 2588              		.loc 1 1250 0 discriminator 3
 2589 002e 0134     		adds	r4, r4, #1
 2590              	.LVL236:
 2591              	.L199:
1250:Src/Eagle_TRT.c **** 		{
 2592              		.loc 1 1250 0 is_stmt 0 discriminator 1
 2593 0030 AC42     		cmp	r4, r5
 2594 0032 F1DB     		blt	.L201
 2595              	.LVL237:
 2596              	.L198:
 2597              	.LBE12:
1253:Src/Eagle_TRT.c **** 		}
1254:Src/Eagle_TRT.c **** 	}
1255:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccw660IW.s 			page 73


1256:Src/Eagle_TRT.c **** 	return result;
1257:Src/Eagle_TRT.c **** }
 2598              		.loc 1 1257 0 is_stmt 1
 2599 0034 47EC106B 		vmov	d0, r6, r7
 2600 0038 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2601              	.L206:
 2602              		.align	2
 2603              	.L205:
 2604 003c 0000F03F 		.word	1072693248
 2605              		.cfi_endproc
 2606              	.LFE161:
 2608              		.global	__aeabi_dadd
 2609              		.section	.text.bin_dec,"ax",%progbits
 2610              		.align	1
 2611              		.global	bin_dec
 2612              		.syntax unified
 2613              		.thumb
 2614              		.thumb_func
 2615              		.fpu fpv4-sp-d16
 2617              	bin_dec:
 2618              	.LFB160:
1227:Src/Eagle_TRT.c **** 
 2619              		.loc 1 1227 0
 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 0
 2622              		@ frame_needed = 0, uses_anonymous_args = 0
 2623              	.LVL238:
 2624 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2625              	.LCFI36:
 2626              		.cfi_def_cfa_offset 32
 2627              		.cfi_offset 3, -32
 2628              		.cfi_offset 4, -28
 2629              		.cfi_offset 5, -24
 2630              		.cfi_offset 6, -20
 2631              		.cfi_offset 7, -16
 2632              		.cfi_offset 8, -12
 2633              		.cfi_offset 9, -8
 2634              		.cfi_offset 14, -4
 2635 0004 0646     		mov	r6, r0
 2636 0006 0D46     		mov	r5, r1
 2637              	.LVL239:
 2638              	.LBB13:
1231:Src/Eagle_TRT.c **** 	{
 2639              		.loc 1 1231 0
 2640 0008 0024     		movs	r4, #0
 2641              	.LBE13:
1229:Src/Eagle_TRT.c **** 
 2642              		.loc 1 1229 0
 2643 000a 2746     		mov	r7, r4
 2644              	.LBB14:
1231:Src/Eagle_TRT.c **** 	{
 2645              		.loc 1 1231 0
 2646 000c 00E0     		b	.L208
 2647              	.LVL240:
 2648              	.L209:
1231:Src/Eagle_TRT.c **** 	{
 2649              		.loc 1 1231 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccw660IW.s 			page 74


 2650 000e 0134     		adds	r4, r4, #1
 2651              	.LVL241:
 2652              	.L208:
1231:Src/Eagle_TRT.c **** 	{
 2653              		.loc 1 1231 0 discriminator 1
 2654 0010 AC42     		cmp	r4, r5
 2655 0012 15DA     		bge	.L212
1233:Src/Eagle_TRT.c **** 		{
 2656              		.loc 1 1233 0 is_stmt 1
 2657 0014 56F82430 		ldr	r3, [r6, r4, lsl #2]
 2658 0018 012B     		cmp	r3, #1
 2659 001a F8D1     		bne	.L209
1235:Src/Eagle_TRT.c **** 		}
 2660              		.loc 1 1235 0
 2661 001c 291B     		subs	r1, r5, r4
 2662 001e 0139     		subs	r1, r1, #1
 2663 0020 0220     		movs	r0, #2
 2664 0022 FFF7FEFF 		bl	Power
 2665              	.LVL242:
 2666 0026 59EC108B 		vmov	r8, r9, d0
 2667 002a 3846     		mov	r0, r7
 2668 002c FFF7FEFF 		bl	__aeabi_i2d
 2669              	.LVL243:
 2670 0030 4246     		mov	r2, r8
 2671 0032 4B46     		mov	r3, r9
 2672 0034 FFF7FEFF 		bl	__aeabi_dadd
 2673              	.LVL244:
 2674 0038 FFF7FEFF 		bl	__aeabi_d2iz
 2675              	.LVL245:
 2676 003c 0746     		mov	r7, r0
 2677              	.LVL246:
 2678 003e E6E7     		b	.L209
 2679              	.LVL247:
 2680              	.L212:
 2681              	.LBE14:
1240:Src/Eagle_TRT.c **** 
 2682              		.loc 1 1240 0
 2683 0040 3846     		mov	r0, r7
 2684 0042 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2685              		.cfi_endproc
 2686              	.LFE160:
 2688              		.section	.text.read_encoder,"ax",%progbits
 2689              		.align	1
 2690              		.global	read_encoder
 2691              		.syntax unified
 2692              		.thumb
 2693              		.thumb_func
 2694              		.fpu fpv4-sp-d16
 2696              	read_encoder:
 2697              	.LFB151:
 911:Src/Eagle_TRT.c **** 
 2698              		.loc 1 911 0
 2699              		.cfi_startproc
 2700              		@ args = 0, pretend = 0, frame = 0
 2701              		@ frame_needed = 0, uses_anonymous_args = 0
 2702              	.LVL248:
 2703 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccw660IW.s 			page 75


 2704              	.LCFI37:
 2705              		.cfi_def_cfa_offset 16
 2706              		.cfi_offset 4, -16
 2707              		.cfi_offset 5, -12
 2708              		.cfi_offset 6, -8
 2709              		.cfi_offset 14, -4
 2710 0002 0446     		mov	r4, r0
 913:Src/Eagle_TRT.c **** 
 2711              		.loc 1 913 0
 2712 0004 0223     		movs	r3, #2
 2713 0006 0361     		str	r3, [r0, #16]
 915:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2714              		.loc 1 915 0
 2715 0008 0022     		movs	r2, #0
 2716 000a 4021     		movs	r1, #64
 2717 000c 4848     		ldr	r0, .L223+8
 2718              	.LVL249:
 2719 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 2720              	.LVL250:
 916:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2721              		.loc 1 916 0
 2722 0012 D4F8E833 		ldr	r3, [r4, #1000]
 2723 0016 1B68     		ldr	r3, [r3]
 2724 0018 0022     		movs	r2, #0
 2725 001a 5A62     		str	r2, [r3, #36]
 2726              	.L214:
 917:Src/Eagle_TRT.c **** 	{
 2727              		.loc 1 917 0 discriminator 1
 2728 001c D4F8E833 		ldr	r3, [r4, #1000]
 2729 0020 1B68     		ldr	r3, [r3]
 2730 0022 5A6A     		ldr	r2, [r3, #36]
 2731 0024 2369     		ldr	r3, [r4, #16]
 2732 0026 9A42     		cmp	r2, r3
 2733 0028 F8D9     		bls	.L214
 922:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2734              		.loc 1 922 0
 2735 002a 0122     		movs	r2, #1
 2736 002c 4021     		movs	r1, #64
 2737 002e 4048     		ldr	r0, .L223+8
 2738 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2739              	.LVL251:
 923:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2740              		.loc 1 923 0
 2741 0034 D4F8E833 		ldr	r3, [r4, #1000]
 2742 0038 1B68     		ldr	r3, [r3]
 2743 003a 0022     		movs	r2, #0
 2744 003c 5A62     		str	r2, [r3, #36]
 2745              	.L215:
 924:Src/Eagle_TRT.c **** 	{
 2746              		.loc 1 924 0 discriminator 1
 2747 003e D4F8E833 		ldr	r3, [r4, #1000]
 2748 0042 1B68     		ldr	r3, [r3]
 2749 0044 5A6A     		ldr	r2, [r3, #36]
 2750 0046 2369     		ldr	r3, [r4, #16]
 2751 0048 9A42     		cmp	r2, r3
 2752 004a F8D9     		bls	.L215
 928:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
ARM GAS  /tmp/ccw660IW.s 			page 76


 2753              		.loc 1 928 0
 2754 004c 0022     		movs	r2, #0
 2755 004e 4021     		movs	r1, #64
 2756 0050 3748     		ldr	r0, .L223+8
 2757 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2758              	.LVL252:
 929:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2759              		.loc 1 929 0
 2760 0056 D4F8E833 		ldr	r3, [r4, #1000]
 2761 005a 1B68     		ldr	r3, [r3]
 2762 005c 0022     		movs	r2, #0
 2763 005e 5A62     		str	r2, [r3, #36]
 2764              	.L216:
 930:Src/Eagle_TRT.c **** 	{
 2765              		.loc 1 930 0 discriminator 1
 2766 0060 D4F8E833 		ldr	r3, [r4, #1000]
 2767 0064 1B68     		ldr	r3, [r3]
 2768 0066 5A6A     		ldr	r2, [r3, #36]
 2769 0068 2369     		ldr	r3, [r4, #16]
 2770 006a 9A42     		cmp	r2, r3
 2771 006c F8D9     		bls	.L216
 2772 006e 0025     		movs	r5, #0
 2773 0070 2CE0     		b	.L217
 2774              	.LVL253:
 2775              	.L220:
 2776              	.LBB15:
 939:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2777              		.loc 1 939 0
 2778 0072 0122     		movs	r2, #1
 2779 0074 4021     		movs	r1, #64
 2780 0076 2E48     		ldr	r0, .L223+8
 2781 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2782              	.LVL254:
 940:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2783              		.loc 1 940 0
 2784 007c D4F8E833 		ldr	r3, [r4, #1000]
 2785 0080 1B68     		ldr	r3, [r3]
 2786 0082 0022     		movs	r2, #0
 2787 0084 5A62     		str	r2, [r3, #36]
 2788              	.L218:
 941:Src/Eagle_TRT.c **** 		{
 2789              		.loc 1 941 0 discriminator 1
 2790 0086 D4F8E833 		ldr	r3, [r4, #1000]
 2791 008a 1B68     		ldr	r3, [r3]
 2792 008c 5A6A     		ldr	r2, [r3, #36]
 2793 008e 2369     		ldr	r3, [r4, #16]
 2794 0090 9A42     		cmp	r2, r3
 2795 0092 F8D9     		bls	.L218
 946:Src/Eagle_TRT.c **** 
 2796              		.loc 1 946 0
 2797 0094 264E     		ldr	r6, .L223+8
 2798 0096 4FF48071 		mov	r1, #256
 2799 009a 3046     		mov	r0, r6
 2800 009c FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2801              	.LVL255:
 2802 00a0 2B1D     		adds	r3, r5, #4
 2803 00a2 04EB8303 		add	r3, r4, r3, lsl #2
ARM GAS  /tmp/ccw660IW.s 			page 77


 2804 00a6 5860     		str	r0, [r3, #4]
 949:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2805              		.loc 1 949 0
 2806 00a8 0022     		movs	r2, #0
 2807 00aa 4021     		movs	r1, #64
 2808 00ac 3046     		mov	r0, r6
 2809 00ae FFF7FEFF 		bl	HAL_GPIO_WritePin
 2810              	.LVL256:
 950:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2811              		.loc 1 950 0
 2812 00b2 D4F8E833 		ldr	r3, [r4, #1000]
 2813 00b6 1B68     		ldr	r3, [r3]
 2814 00b8 0022     		movs	r2, #0
 2815 00ba 5A62     		str	r2, [r3, #36]
 2816              	.L219:
 951:Src/Eagle_TRT.c **** 		{
 2817              		.loc 1 951 0 discriminator 1
 2818 00bc D4F8E833 		ldr	r3, [r4, #1000]
 2819 00c0 1B68     		ldr	r3, [r3]
 2820 00c2 5A6A     		ldr	r2, [r3, #36]
 2821 00c4 2369     		ldr	r3, [r4, #16]
 2822 00c6 9A42     		cmp	r2, r3
 2823 00c8 F8D9     		bls	.L219
 935:Src/Eagle_TRT.c **** 	{
 2824              		.loc 1 935 0 discriminator 2
 2825 00ca 0135     		adds	r5, r5, #1
 2826              	.LVL257:
 2827              	.L217:
 935:Src/Eagle_TRT.c **** 	{
 2828              		.loc 1 935 0 is_stmt 0 discriminator 1
 2829 00cc 6368     		ldr	r3, [r4, #4]
 2830 00ce 9D42     		cmp	r5, r3
 2831 00d0 CFDB     		blt	.L220
 2832              	.LBE15:
 957:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2833              		.loc 1 957 0 is_stmt 1
 2834 00d2 0122     		movs	r2, #1
 2835 00d4 4021     		movs	r1, #64
 2836 00d6 1648     		ldr	r0, .L223+8
 2837 00d8 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2838              	.LVL258:
 958:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
 2839              		.loc 1 958 0
 2840 00dc D4F8E833 		ldr	r3, [r4, #1000]
 2841 00e0 1B68     		ldr	r3, [r3]
 2842 00e2 0022     		movs	r2, #0
 2843 00e4 5A62     		str	r2, [r3, #36]
 2844              	.L221:
 959:Src/Eagle_TRT.c **** 	{
 2845              		.loc 1 959 0 discriminator 1
 2846 00e6 D4F8E833 		ldr	r3, [r4, #1000]
 2847 00ea 1B68     		ldr	r3, [r3]
 2848 00ec 5B6A     		ldr	r3, [r3, #36]
 2849 00ee 2269     		ldr	r2, [r4, #16]
 2850 00f0 B3EB420F 		cmp	r3, r2, lsl #1
 2851 00f4 F7D9     		bls	.L221
 963:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccw660IW.s 			page 78


 2852              		.loc 1 963 0
 2853 00f6 4FF48071 		mov	r1, #256
 2854 00fa 0D48     		ldr	r0, .L223+8
 2855 00fc FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2856              	.LVL259:
 2857 0100 A060     		str	r0, [r4, #8]
 966:Src/Eagle_TRT.c **** 	enc->converted_data = enc->converted_data / 45.5055;
 2858              		.loc 1 966 0
 2859 0102 6168     		ldr	r1, [r4, #4]
 2860 0104 0139     		subs	r1, r1, #1
 2861 0106 04F11400 		add	r0, r4, #20
 2862 010a FFF7FEFF 		bl	bin_dec
 2863              	.LVL260:
 2864 010e FFF7FEFF 		bl	__aeabi_i2d
 2865              	.LVL261:
 967:Src/Eagle_TRT.c **** 
 2866              		.loc 1 967 0
 2867 0112 05A3     		adr	r3, .L223
 2868 0114 D3E90023 		ldrd	r2, [r3]
 2869 0118 FFF7FEFF 		bl	__aeabi_ddiv
 2870              	.LVL262:
 2871 011c C4E9F801 		strd	r0, [r4, #992]
 970:Src/Eagle_TRT.c **** 
 2872              		.loc 1 970 0
 2873 0120 41EC100B 		vmov	d0, r0, r1
 2874 0124 70BD     		pop	{r4, r5, r6, pc}
 2875              	.LVL263:
 2876              	.L224:
 2877 0126 00BF     		.align	3
 2878              	.L223:
 2879 0128 62105839 		.word	962072674
 2880 012c B4C04640 		.word	1078378676
 2881 0130 00080240 		.word	1073874944
 2882              		.cfi_endproc
 2883              	.LFE151:
 2885              		.section	.text.shift_array,"ax",%progbits
 2886              		.align	1
 2887              		.global	shift_array
 2888              		.syntax unified
 2889              		.thumb
 2890              		.thumb_func
 2891              		.fpu fpv4-sp-d16
 2893              	shift_array:
 2894              	.LFB162:
1258:Src/Eagle_TRT.c **** 
1259:Src/Eagle_TRT.c **** //shift all the data of a numeric array and add another one value
1260:Src/Eagle_TRT.c **** //array = array to be shifted
1261:Src/Eagle_TRT.c **** //size = size of the array
1262:Src/Eagle_TRT.c **** //data = value to be added in the last position of the array
1263:Src/Eagle_TRT.c **** void shift_array(long double *array, int size, long double data)
1264:Src/Eagle_TRT.c **** {
 2895              		.loc 1 1264 0
 2896              		.cfi_startproc
 2897              		@ args = 0, pretend = 0, frame = 0
 2898              		@ frame_needed = 0, uses_anonymous_args = 0
 2899              		@ link register save eliminated.
 2900              	.LVL264:
ARM GAS  /tmp/ccw660IW.s 			page 79


 2901              	.LBB16:
1265:Src/Eagle_TRT.c **** 
1266:Src/Eagle_TRT.c **** 	for (int i = 1; i < size; i++)
 2902              		.loc 1 1266 0
 2903 0000 0122     		movs	r2, #1
 2904              	.LVL265:
 2905 0002 8A42     		cmp	r2, r1
 2906 0004 17DA     		bge	.L232
 2907              	.LBE16:
1264:Src/Eagle_TRT.c **** 
 2908              		.loc 1 1264 0
 2909 0006 30B4     		push	{r4, r5}
 2910              	.LCFI38:
 2911              		.cfi_def_cfa_offset 8
 2912              		.cfi_offset 4, -8
 2913              		.cfi_offset 5, -4
 2914              	.L227:
 2915              	.LBB17:
1267:Src/Eagle_TRT.c **** 	{
1268:Src/Eagle_TRT.c **** 		array[i - 1] = array[i];
 2916              		.loc 1 1268 0 discriminator 3
 2917 0008 02F10053 		add	r3, r2, #536870912
 2918 000c 013B     		subs	r3, r3, #1
 2919 000e 00EBC303 		add	r3, r0, r3, lsl #3
 2920 0012 00EBC204 		add	r4, r0, r2, lsl #3
 2921 0016 D4E90045 		ldrd	r4, [r4]
 2922 001a C3E90045 		strd	r4, [r3]
1266:Src/Eagle_TRT.c **** 	{
 2923              		.loc 1 1266 0 discriminator 3
 2924 001e 0132     		adds	r2, r2, #1
 2925              	.LVL266:
 2926 0020 8A42     		cmp	r2, r1
 2927 0022 F1DB     		blt	.L227
 2928              	.LBE17:
1269:Src/Eagle_TRT.c **** 	}
1270:Src/Eagle_TRT.c **** 	array[size - 1] = data;
 2929              		.loc 1 1270 0
 2930 0024 01F10051 		add	r1, r1, #536870912
 2931              	.LVL267:
 2932 0028 0139     		subs	r1, r1, #1
 2933              	.LVL268:
 2934 002a 00EBC100 		add	r0, r0, r1, lsl #3
 2935              	.LVL269:
 2936 002e 80ED000B 		vstr.64	d0, [r0]
1271:Src/Eagle_TRT.c **** }
 2937              		.loc 1 1271 0
 2938 0032 30BC     		pop	{r4, r5}
 2939              	.LCFI39:
 2940              		.cfi_restore 5
 2941              		.cfi_restore 4
 2942              		.cfi_def_cfa_offset 0
 2943 0034 7047     		bx	lr
 2944              	.LVL270:
 2945              	.L232:
1270:Src/Eagle_TRT.c **** }
 2946              		.loc 1 1270 0
 2947 0036 01F10051 		add	r1, r1, #536870912
ARM GAS  /tmp/ccw660IW.s 			page 80


 2948              	.LVL271:
 2949 003a 0139     		subs	r1, r1, #1
 2950              	.LVL272:
 2951 003c 00EBC100 		add	r0, r0, r1, lsl #3
 2952              	.LVL273:
 2953 0040 80ED000B 		vstr.64	d0, [r0]
 2954 0044 7047     		bx	lr
 2955              		.cfi_endproc
 2956              	.LFE162:
 2958              		.section	.text.speed_filter,"ax",%progbits
 2959              		.align	1
 2960              		.global	speed_filter
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	speed_filter:
 2967              	.LFB163:
1272:Src/Eagle_TRT.c **** 
1273:Src/Eagle_TRT.c **** double speed_filter(double *data, int size)
1274:Src/Eagle_TRT.c **** {
 2968              		.loc 1 1274 0
 2969              		.cfi_startproc
 2970              		@ args = 0, pretend = 0, frame = 16
 2971              		@ frame_needed = 0, uses_anonymous_args = 0
 2972              	.LVL274:
 2973 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2974              	.LCFI40:
 2975              		.cfi_def_cfa_offset 36
 2976              		.cfi_offset 4, -36
 2977              		.cfi_offset 5, -32
 2978              		.cfi_offset 6, -28
 2979              		.cfi_offset 7, -24
 2980              		.cfi_offset 8, -20
 2981              		.cfi_offset 9, -16
 2982              		.cfi_offset 10, -12
 2983              		.cfi_offset 11, -8
 2984              		.cfi_offset 14, -4
 2985 0004 85B0     		sub	sp, sp, #20
 2986              	.LCFI41:
 2987              		.cfi_def_cfa_offset 56
 2988 0006 8246     		mov	r10, r0
 2989 0008 0D46     		mov	r5, r1
 2990              	.LVL275:
 2991              	.LBB18:
1275:Src/Eagle_TRT.c **** 	double min = 100000000000000;
1276:Src/Eagle_TRT.c **** 	double max = -min;
1277:Src/Eagle_TRT.c **** 	double sum = 0;
1278:Src/Eagle_TRT.c **** 	double average = 0;
1279:Src/Eagle_TRT.c **** 	int index_1;
1280:Src/Eagle_TRT.c **** 	int index_2;
1281:Src/Eagle_TRT.c **** 	int average_members = 0;
1282:Src/Eagle_TRT.c **** 
1283:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
 2992              		.loc 1 1283 0
 2993 000a 0024     		movs	r4, #0
 2994              	.LBE18:
ARM GAS  /tmp/ccw660IW.s 			page 81


1276:Src/Eagle_TRT.c **** 	double sum = 0;
 2995              		.loc 1 1276 0
 2996 000c 0FF2A009 		adr	r9, .L247+8
 2997 0010 D9E90089 		ldrd	r8, [r9]
1275:Src/Eagle_TRT.c **** 	double min = 100000000000000;
 2998              		.loc 1 1275 0
 2999 0014 9FED247B 		vldr.64	d7, .L247
 3000 0018 8DED007B 		vstr.64	d7, [sp]
 3001              	.LBB19:
 3002              		.loc 1 1283 0
 3003 001c 00E0     		b	.L234
 3004              	.LVL276:
 3005              	.L236:
 3006              		.loc 1 1283 0 is_stmt 0 discriminator 2
 3007 001e 0134     		adds	r4, r4, #1
 3008              	.LVL277:
 3009              	.L234:
 3010              		.loc 1 1283 0 discriminator 1
 3011 0020 AC42     		cmp	r4, r5
 3012 0022 19DA     		bge	.L245
1284:Src/Eagle_TRT.c **** 	{
1285:Src/Eagle_TRT.c **** 		if (data[i] < min)
 3013              		.loc 1 1285 0 is_stmt 1
 3014 0024 0AEBC403 		add	r3, r10, r4, lsl #3
 3015 0028 D3E90067 		ldrd	r6, [r3]
 3016 002c 3246     		mov	r2, r6
 3017 002e 3B46     		mov	r3, r7
 3018 0030 DDE90001 		ldrd	r0, [sp]
 3019 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 3020              	.LVL278:
 3021 0038 10B1     		cbz	r0, .L235
1286:Src/Eagle_TRT.c **** 		{
1287:Src/Eagle_TRT.c **** 			min = data[i];
1288:Src/Eagle_TRT.c **** 			index_1 = i;
 3022              		.loc 1 1288 0
 3023 003a A346     		mov	fp, r4
 3024              	.LVL279:
1287:Src/Eagle_TRT.c **** 			index_1 = i;
 3025              		.loc 1 1287 0
 3026 003c CDE90067 		strd	r6, [sp]
 3027              	.LVL280:
 3028              	.L235:
1289:Src/Eagle_TRT.c **** 		}
1290:Src/Eagle_TRT.c **** 
1291:Src/Eagle_TRT.c **** 		if (data[i] > max)
 3029              		.loc 1 1291 0
 3030 0040 3246     		mov	r2, r6
 3031 0042 3B46     		mov	r3, r7
 3032 0044 4046     		mov	r0, r8
 3033 0046 4946     		mov	r1, r9
 3034 0048 FFF7FEFF 		bl	__aeabi_dcmplt
 3035              	.LVL281:
 3036 004c 0028     		cmp	r0, #0
 3037 004e E6D0     		beq	.L236
1292:Src/Eagle_TRT.c **** 		{
1293:Src/Eagle_TRT.c **** 			max = data[i];
1294:Src/Eagle_TRT.c **** 			index_2 = i;
ARM GAS  /tmp/ccw660IW.s 			page 82


 3038              		.loc 1 1294 0
 3039 0050 0394     		str	r4, [sp, #12]
 3040              	.LVL282:
1293:Src/Eagle_TRT.c **** 			index_2 = i;
 3041              		.loc 1 1293 0
 3042 0052 B046     		mov	r8, r6
 3043              	.LVL283:
 3044 0054 B946     		mov	r9, r7
 3045 0056 E2E7     		b	.L236
 3046              	.LVL284:
 3047              	.L245:
 3048 0058 0024     		movs	r4, #0
 3049              	.LVL285:
 3050 005a A046     		mov	r8, r4
 3051              	.LVL286:
 3052 005c 0026     		movs	r6, #0
 3053 005e 0027     		movs	r7, #0
 3054 0060 0CE0     		b	.L238
 3055              	.LVL287:
 3056              	.L239:
 3057              	.LBE19:
 3058              	.LBB20:
1295:Src/Eagle_TRT.c **** 		}
1296:Src/Eagle_TRT.c **** 	}
1297:Src/Eagle_TRT.c **** 
1298:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1299:Src/Eagle_TRT.c **** 	{
1300:Src/Eagle_TRT.c **** 		if (i != index_1 || i != index_2)
1301:Src/Eagle_TRT.c **** 		{
1302:Src/Eagle_TRT.c **** 			sum += data[i];
 3059              		.loc 1 1302 0
 3060 0062 0AEBC403 		add	r3, r10, r4, lsl #3
 3061 0066 D3E90023 		ldrd	r2, [r3]
 3062 006a 3046     		mov	r0, r6
 3063 006c 3946     		mov	r1, r7
 3064 006e FFF7FEFF 		bl	__aeabi_dadd
 3065              	.LVL288:
 3066 0072 0646     		mov	r6, r0
 3067              	.LVL289:
 3068 0074 0F46     		mov	r7, r1
 3069              	.LVL290:
1303:Src/Eagle_TRT.c **** 			average_members++;
 3070              		.loc 1 1303 0
 3071 0076 08F10108 		add	r8, r8, #1
 3072              	.LVL291:
 3073              	.L240:
1298:Src/Eagle_TRT.c **** 	{
 3074              		.loc 1 1298 0 discriminator 2
 3075 007a 0134     		adds	r4, r4, #1
 3076              	.LVL292:
 3077              	.L238:
1298:Src/Eagle_TRT.c **** 	{
 3078              		.loc 1 1298 0 is_stmt 0 discriminator 1
 3079 007c AC42     		cmp	r4, r5
 3080 007e 05DA     		bge	.L246
1300:Src/Eagle_TRT.c **** 		{
 3081              		.loc 1 1300 0 is_stmt 1
ARM GAS  /tmp/ccw660IW.s 			page 83


 3082 0080 A345     		cmp	fp, r4
 3083 0082 EED1     		bne	.L239
1300:Src/Eagle_TRT.c **** 		{
 3084              		.loc 1 1300 0 is_stmt 0 discriminator 1
 3085 0084 039B     		ldr	r3, [sp, #12]
 3086 0086 A342     		cmp	r3, r4
 3087 0088 EBD1     		bne	.L239
 3088 008a F6E7     		b	.L240
 3089              	.L246:
 3090              	.LBE20:
1304:Src/Eagle_TRT.c **** 		}
1305:Src/Eagle_TRT.c **** 	}
1306:Src/Eagle_TRT.c **** 	average = sum / average_members;
 3091              		.loc 1 1306 0 is_stmt 1
 3092 008c 4046     		mov	r0, r8
 3093 008e FFF7FEFF 		bl	__aeabi_i2d
 3094              	.LVL293:
 3095 0092 0246     		mov	r2, r0
 3096 0094 0B46     		mov	r3, r1
 3097 0096 3046     		mov	r0, r6
 3098 0098 3946     		mov	r1, r7
 3099 009a FFF7FEFF 		bl	__aeabi_ddiv
 3100              	.LVL294:
1307:Src/Eagle_TRT.c **** 
1308:Src/Eagle_TRT.c **** 	return average;
1309:Src/Eagle_TRT.c **** }
 3101              		.loc 1 1309 0
 3102 009e 41EC100B 		vmov	d0, r0, r1
 3103 00a2 05B0     		add	sp, sp, #20
 3104              	.LCFI42:
 3105              		.cfi_def_cfa_offset 36
 3106              	.LVL295:
 3107              		@ sp needed
 3108 00a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3109              	.LVL296:
 3110              	.L248:
 3111              		.align	3
 3112              	.L247:
 3113 00a8 0000901E 		.word	512753664
 3114 00ac C4BCD642 		.word	1121369284
 3115 00b0 0000901E 		.word	512753664
 3116 00b4 C4BCD6C2 		.word	-1026114364
 3117              		.cfi_endproc
 3118              	.LFE163:
 3120              		.section	.text.dynamic_average,"ax",%progbits
 3121              		.align	1
 3122              		.global	dynamic_average
 3123              		.syntax unified
 3124              		.thumb
 3125              		.thumb_func
 3126              		.fpu fpv4-sp-d16
 3128              	dynamic_average:
 3129              	.LFB164:
1310:Src/Eagle_TRT.c **** 
1311:Src/Eagle_TRT.c **** //function that calculate the average of all the numbers in one array
1312:Src/Eagle_TRT.c **** double dynamic_average(long double *array, int size)
1313:Src/Eagle_TRT.c **** {
ARM GAS  /tmp/ccw660IW.s 			page 84


 3130              		.loc 1 1313 0
 3131              		.cfi_startproc
 3132              		@ args = 0, pretend = 0, frame = 0
 3133              		@ frame_needed = 0, uses_anonymous_args = 0
 3134              	.LVL297:
 3135 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3136              	.LCFI43:
 3137              		.cfi_def_cfa_offset 24
 3138              		.cfi_offset 4, -24
 3139              		.cfi_offset 5, -20
 3140              		.cfi_offset 6, -16
 3141              		.cfi_offset 7, -12
 3142              		.cfi_offset 8, -8
 3143              		.cfi_offset 14, -4
 3144 0004 8046     		mov	r8, r0
 3145 0006 0D46     		mov	r5, r1
 3146              	.LVL298:
 3147              	.LBB21:
1314:Src/Eagle_TRT.c **** 
1315:Src/Eagle_TRT.c **** 	double sum = 0;
1316:Src/Eagle_TRT.c **** 	double average = 0;
1317:Src/Eagle_TRT.c **** 
1318:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
 3148              		.loc 1 1318 0
 3149 0008 0024     		movs	r4, #0
 3150              	.LBE21:
1315:Src/Eagle_TRT.c **** 	double average = 0;
 3151              		.loc 1 1315 0
 3152 000a 0026     		movs	r6, #0
 3153 000c 0027     		movs	r7, #0
 3154              	.LBB22:
 3155              		.loc 1 1318 0
 3156 000e 0AE0     		b	.L250
 3157              	.LVL299:
 3158              	.L251:
1319:Src/Eagle_TRT.c **** 	{
1320:Src/Eagle_TRT.c **** 		sum += array[i];
 3159              		.loc 1 1320 0 discriminator 3
 3160 0010 08EBC403 		add	r3, r8, r4, lsl #3
 3161 0014 D3E90023 		ldrd	r2, [r3]
 3162 0018 3046     		mov	r0, r6
 3163 001a 3946     		mov	r1, r7
 3164 001c FFF7FEFF 		bl	__aeabi_dadd
 3165              	.LVL300:
 3166 0020 0646     		mov	r6, r0
 3167              	.LVL301:
 3168 0022 0F46     		mov	r7, r1
 3169              	.LVL302:
1318:Src/Eagle_TRT.c **** 	{
 3170              		.loc 1 1318 0 discriminator 3
 3171 0024 0134     		adds	r4, r4, #1
 3172              	.LVL303:
 3173              	.L250:
1318:Src/Eagle_TRT.c **** 	{
 3174              		.loc 1 1318 0 is_stmt 0 discriminator 1
 3175 0026 AC42     		cmp	r4, r5
 3176 0028 F2DB     		blt	.L251
ARM GAS  /tmp/ccw660IW.s 			page 85


 3177              	.LBE22:
1321:Src/Eagle_TRT.c **** 	}
1322:Src/Eagle_TRT.c **** 	average = sum / size;
 3178              		.loc 1 1322 0 is_stmt 1
 3179 002a 2846     		mov	r0, r5
 3180 002c FFF7FEFF 		bl	__aeabi_i2d
 3181              	.LVL304:
 3182 0030 0246     		mov	r2, r0
 3183 0032 0B46     		mov	r3, r1
 3184 0034 3046     		mov	r0, r6
 3185 0036 3946     		mov	r1, r7
 3186 0038 FFF7FEFF 		bl	__aeabi_ddiv
 3187              	.LVL305:
1323:Src/Eagle_TRT.c **** 
1324:Src/Eagle_TRT.c **** 	return average;
1325:Src/Eagle_TRT.c **** }
 3188              		.loc 1 1325 0
 3189 003c 41EC100B 		vmov	d0, r0, r1
 3190 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3191              		.cfi_endproc
 3192              	.LFE164:
 3194              		.section	.text.LSMD9S0_gyro_read,"ax",%progbits
 3195              		.align	1
 3196              		.global	LSMD9S0_gyro_read
 3197              		.syntax unified
 3198              		.thumb
 3199              		.thumb_func
 3200              		.fpu fpv4-sp-d16
 3202              	LSMD9S0_gyro_read:
 3203              	.LFB136:
 307:Src/Eagle_TRT.c **** 
 3204              		.loc 1 307 0
 3205              		.cfi_startproc
 3206              		@ args = 0, pretend = 0, frame = 0
 3207              		@ frame_needed = 0, uses_anonymous_args = 0
 3208              	.LVL306:
 3209 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3210              	.LCFI44:
 3211              		.cfi_def_cfa_offset 24
 3212              		.cfi_offset 3, -24
 3213              		.cfi_offset 4, -20
 3214              		.cfi_offset 5, -16
 3215              		.cfi_offset 6, -12
 3216              		.cfi_offset 7, -8
 3217              		.cfi_offset 14, -4
 3218 0002 0446     		mov	r4, r0
 309:Src/Eagle_TRT.c **** 
 3219              		.loc 1 309 0
 3220 0004 00F58263 		add	r3, r0, #1040
 3221 0008 524A     		ldr	r2, .L266
 3222 000a 1A60     		str	r2, [r3]	@ float
 311:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_9;
 3223              		.loc 1 311 0
 3224 000c 524B     		ldr	r3, .L266+4
 3225 000e C0F81434 		str	r3, [r0, #1044]
 312:Src/Eagle_TRT.c **** 
 3226              		.loc 1 312 0
ARM GAS  /tmp/ccw660IW.s 			page 86


 3227 0012 4FF40073 		mov	r3, #512
 3228 0016 A0F81834 		strh	r3, [r0, #1048]	@ movhi
 314:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_G_ADD;
 3229              		.loc 1 314 0
 3230 001a 504B     		ldr	r3, .L266+8
 3231 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3232 001e 80F82334 		strb	r3, [r0, #1059]
 315:Src/Eagle_TRT.c **** 	imu->X_G_axis = LSMD9S0_read(imu);
 3233              		.loc 1 315 0
 3234 0022 4F4B     		ldr	r3, .L266+12
 3235 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3236 0026 80F82234 		strb	r3, [r0, #1058]
 316:Src/Eagle_TRT.c **** 	//imu->X_G_axis = imu->X_G_axis - imu->X_G_axis_offset;
 3237              		.loc 1 316 0
 3238 002a FFF7FEFF 		bl	LSMD9S0_read
 3239              	.LVL307:
 3240 002e 84ED000A 		vstr.32	s0, [r4]
 319:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_G_ADD;
 3241              		.loc 1 319 0
 3242 0032 4C4B     		ldr	r3, .L266+16
 3243 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3244 0036 84F82334 		strb	r3, [r4, #1059]
 320:Src/Eagle_TRT.c **** 	imu->Y_G_axis = LSMD9S0_read(imu);
 3245              		.loc 1 320 0
 3246 003a 4B4B     		ldr	r3, .L266+20
 3247 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3248 003e 84F82234 		strb	r3, [r4, #1058]
 321:Src/Eagle_TRT.c **** 	//imu->Y_G_axis = imu->Y_G_axis - imu->Y_G_axis_offset;
 3249              		.loc 1 321 0
 3250 0042 2046     		mov	r0, r4
 3251 0044 FFF7FEFF 		bl	LSMD9S0_read
 3252              	.LVL308:
 3253 0048 84ED010A 		vstr.32	s0, [r4, #4]
 324:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_G_ADD;
 3254              		.loc 1 324 0
 3255 004c 474B     		ldr	r3, .L266+24
 3256 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3257 0050 84F82334 		strb	r3, [r4, #1059]
 325:Src/Eagle_TRT.c **** 	imu->Z_G_axis = LSMD9S0_read(imu);
 3258              		.loc 1 325 0
 3259 0054 464B     		ldr	r3, .L266+28
 3260 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3261 0058 84F82234 		strb	r3, [r4, #1058]
 326:Src/Eagle_TRT.c **** 	//imu->Z_G_axis = imu->Z_G_axis - imu->Z_G_axis_offset;
 3262              		.loc 1 326 0
 3263 005c 2046     		mov	r0, r4
 3264 005e FFF7FEFF 		bl	LSMD9S0_read
 3265              	.LVL309:
 3266 0062 84ED020A 		vstr.32	s0, [r4, #8]
 330:Src/Eagle_TRT.c **** 	{
 3267              		.loc 1 330 0
 3268 0066 434B     		ldr	r3, .L266+32
 3269 0068 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 3270 006a 434B     		ldr	r3, .L266+36
 3271 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3272 006e D42A     		cmp	r2, #212
 3273 0070 08BF     		it	eq
ARM GAS  /tmp/ccw660IW.s 			page 87


 3274 0072 492B     		cmpeq	r3, #73
 3275 0074 6AD1     		bne	.L254
 332:Src/Eagle_TRT.c **** 	}
 3276              		.loc 1 332 0
 3277 0076 0023     		movs	r3, #0
 3278 0078 C4F80C34 		str	r3, [r4, #1036]
 3279              	.L255:
 343:Src/Eagle_TRT.c **** 	{
 3280              		.loc 1 343 0
 3281 007c D4ED007A 		vldr.32	s15, [r4]
 3282 0080 9FED3E7A 		vldr.32	s14, .L266+40
 3283 0084 F4EEC77A 		vcmpe.f32	s15, s14
 3284 0088 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3285 008c 05DD     		ble	.L256
 345:Src/Eagle_TRT.c **** 	}
 3286              		.loc 1 345 0
 3287 008e 9FED3C7A 		vldr.32	s14, .L266+44
 3288 0092 77EEC77A 		vsub.f32	s15, s15, s14
 3289 0096 C4ED007A 		vstr.32	s15, [r4]
 3290              	.L256:
 347:Src/Eagle_TRT.c **** 	{
 3291              		.loc 1 347 0
 3292 009a D4ED017A 		vldr.32	s15, [r4, #4]
 3293 009e 9FED377A 		vldr.32	s14, .L266+40
 3294 00a2 F4EEC77A 		vcmpe.f32	s15, s14
 3295 00a6 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3296 00aa 05DD     		ble	.L258
 349:Src/Eagle_TRT.c **** 	}
 3297              		.loc 1 349 0
 3298 00ac 9FED347A 		vldr.32	s14, .L266+44
 3299 00b0 77EEC77A 		vsub.f32	s15, s15, s14
 3300 00b4 C4ED017A 		vstr.32	s15, [r4, #4]
 3301              	.L258:
 351:Src/Eagle_TRT.c **** 	{
 3302              		.loc 1 351 0
 3303 00b8 DFED307A 		vldr.32	s15, .L266+40
 3304 00bc B4EEE70A 		vcmpe.f32	s0, s15
 3305 00c0 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 3306 00c4 05DD     		ble	.L260
 353:Src/Eagle_TRT.c **** 	}
 3307              		.loc 1 353 0
 3308 00c6 DFED2E7A 		vldr.32	s15, .L266+44
 3309 00ca 30EE670A 		vsub.f32	s0, s0, s15
 3310 00ce 84ED020A 		vstr.32	s0, [r4, #8]
 3311              	.L260:
 356:Src/Eagle_TRT.c **** 	shift_array(imu->Y_G_axis_array, 10, imu->Y_G_axis);
 3312              		.loc 1 356 0
 3313 00d2 04F50477 		add	r7, r4, #528
 3314 00d6 2068     		ldr	r0, [r4]	@ float
 3315 00d8 FFF7FEFF 		bl	__aeabi_f2d
 3316              	.LVL310:
 3317 00dc 41EC100B 		vmov	d0, r0, r1
 3318 00e0 0A21     		movs	r1, #10
 3319 00e2 3846     		mov	r0, r7
 3320 00e4 FFF7FEFF 		bl	shift_array
 3321              	.LVL311:
 357:Src/Eagle_TRT.c **** 	shift_array(imu->Z_G_axis_array, 10, imu->Z_G_axis);
ARM GAS  /tmp/ccw660IW.s 			page 88


 3322              		.loc 1 357 0
 3323 00e8 04F52C76 		add	r6, r4, #688
 3324 00ec 6068     		ldr	r0, [r4, #4]	@ float
 3325 00ee FFF7FEFF 		bl	__aeabi_f2d
 3326              	.LVL312:
 3327 00f2 41EC100B 		vmov	d0, r0, r1
 3328 00f6 0A21     		movs	r1, #10
 3329 00f8 3046     		mov	r0, r6
 3330 00fa FFF7FEFF 		bl	shift_array
 3331              	.LVL313:
 358:Src/Eagle_TRT.c **** 
 3332              		.loc 1 358 0
 3333 00fe 04F55475 		add	r5, r4, #848
 3334 0102 A068     		ldr	r0, [r4, #8]	@ float
 3335 0104 FFF7FEFF 		bl	__aeabi_f2d
 3336              	.LVL314:
 3337 0108 41EC100B 		vmov	d0, r0, r1
 3338 010c 0A21     		movs	r1, #10
 3339 010e 2846     		mov	r0, r5
 3340 0110 FFF7FEFF 		bl	shift_array
 3341              	.LVL315:
 360:Src/Eagle_TRT.c **** 	imu->Y_G_axis = dynamic_average(imu->Y_G_axis_array, 10);
 3342              		.loc 1 360 0
 3343 0114 0A21     		movs	r1, #10
 3344 0116 3846     		mov	r0, r7
 3345 0118 FFF7FEFF 		bl	dynamic_average
 3346              	.LVL316:
 3347 011c 51EC100B 		vmov	r0, r1, d0
 3348 0120 FFF7FEFF 		bl	__aeabi_d2f
 3349              	.LVL317:
 3350 0124 2060     		str	r0, [r4]	@ float
 361:Src/Eagle_TRT.c **** 	imu->Z_G_axis = dynamic_average(imu->Z_G_axis_array, 10);
 3351              		.loc 1 361 0
 3352 0126 0A21     		movs	r1, #10
 3353 0128 3046     		mov	r0, r6
 3354 012a FFF7FEFF 		bl	dynamic_average
 3355              	.LVL318:
 3356 012e 51EC100B 		vmov	r0, r1, d0
 3357 0132 FFF7FEFF 		bl	__aeabi_d2f
 3358              	.LVL319:
 3359 0136 6060     		str	r0, [r4, #4]	@ float
 362:Src/Eagle_TRT.c **** 
 3360              		.loc 1 362 0
 3361 0138 0A21     		movs	r1, #10
 3362 013a 2846     		mov	r0, r5
 3363 013c FFF7FEFF 		bl	dynamic_average
 3364              	.LVL320:
 3365 0140 51EC100B 		vmov	r0, r1, d0
 3366 0144 FFF7FEFF 		bl	__aeabi_d2f
 3367              	.LVL321:
 3368 0148 A060     		str	r0, [r4, #8]	@ float
 3369 014a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3370              	.LVL322:
 3371              	.L254:
 336:Src/Eagle_TRT.c **** 	}
 3372              		.loc 1 336 0
 3373 014c 0123     		movs	r3, #1
ARM GAS  /tmp/ccw660IW.s 			page 89


 3374 014e C4F80C34 		str	r3, [r4, #1036]
 3375 0152 93E7     		b	.L255
 3376              	.L267:
 3377              		.align	2
 3378              	.L266:
 3379 0154 295C8F3C 		.word	1016028201
 3380 0158 00080240 		.word	1073874944
 3381 015c 00000000 		.word	.LANCHOR24
 3382 0160 00000000 		.word	.LANCHOR25
 3383 0164 00000000 		.word	.LANCHOR26
 3384 0168 00000000 		.word	.LANCHOR27
 3385 016c 00000000 		.word	.LANCHOR28
 3386 0170 00000000 		.word	.LANCHOR29
 3387 0174 00000000 		.word	WHO_AM_I_G_VAL
 3388 0178 00000000 		.word	WHO_AM_I_XM_VAL
 3389 017c 00000047 		.word	1191182336
 3390 0180 00008047 		.word	1199570944
 3391              		.cfi_endproc
 3392              	.LFE136:
 3394              		.global	__aeabi_dsub
 3395              		.global	__aeabi_dcmple
 3396              		.section	.text.get_speed_encoder,"ax",%progbits
 3397              		.align	1
 3398              		.global	get_speed_encoder
 3399              		.syntax unified
 3400              		.thumb
 3401              		.thumb_func
 3402              		.fpu fpv4-sp-d16
 3404              	get_speed_encoder:
 3405              	.LFB153:
1029:Src/Eagle_TRT.c **** 
 3406              		.loc 1 1029 0
 3407              		.cfi_startproc
 3408              		@ args = 0, pretend = 0, frame = 8
 3409              		@ frame_needed = 0, uses_anonymous_args = 0
 3410              	.LVL323:
 3411 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3412              	.LCFI45:
 3413              		.cfi_def_cfa_offset 32
 3414              		.cfi_offset 4, -32
 3415              		.cfi_offset 5, -28
 3416              		.cfi_offset 6, -24
 3417              		.cfi_offset 7, -20
 3418              		.cfi_offset 8, -16
 3419              		.cfi_offset 9, -12
 3420              		.cfi_offset 10, -8
 3421              		.cfi_offset 14, -4
 3422 0004 2DED068B 		vpush.64	{d8, d9, d10}
 3423              	.LCFI46:
 3424              		.cfi_def_cfa_offset 56
 3425              		.cfi_offset 80, -56
 3426              		.cfi_offset 81, -52
 3427              		.cfi_offset 82, -48
 3428              		.cfi_offset 83, -44
 3429              		.cfi_offset 84, -40
 3430              		.cfi_offset 85, -36
 3431 0008 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccw660IW.s 			page 90


 3432              	.LCFI47:
 3433              		.cfi_def_cfa_offset 64
 3434 000a 8246     		mov	r10, r0
 3435              	.LVL324:
1034:Src/Eagle_TRT.c **** 
 3436              		.loc 1 1034 0
 3437 000c 0068     		ldr	r0, [r0]
 3438              	.LVL325:
 3439 000e FFF7FEFF 		bl	__aeabi_i2d
 3440              	.LVL326:
 3441 0012 0646     		mov	r6, r0
 3442 0014 0F46     		mov	r7, r1
 3443              	.LVL327:
1036:Src/Eagle_TRT.c **** 	{
 3444              		.loc 1 1036 0
 3445 0016 DAF86830 		ldr	r3, [r10, #104]
 3446 001a 012B     		cmp	r3, #1
 3447 001c 00F03A81 		beq	.L304
1042:Src/Eagle_TRT.c **** 	}
 3448              		.loc 1 1042 0
 3449 0020 DAE92623 		ldrd	r2, [r10, #152]
 3450 0024 DAE92401 		ldrd	r0, [r10, #144]
 3451 0028 FFF7FEFF 		bl	__aeabi_dsub
 3452              	.LVL328:
 3453 002c CAE92C01 		strd	r0, [r10, #176]
 3454              	.L270:
1046:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
 3455              		.loc 1 1046 0
 3456 0030 9AED24AB 		vldr.64	d10, [r10, #144]
 3457 0034 9AED1F8A 		vldr.32	s16, [r10, #124]
 3458 0038 18EE100A 		vmov	r0, s16
 3459 003c FFF7FEFF 		bl	__aeabi_f2d
 3460              	.LVL329:
 3461 0040 0446     		mov	r4, r0
 3462 0042 0D46     		mov	r5, r1
 3463 0044 0246     		mov	r2, r0
 3464 0046 0B46     		mov	r3, r1
 3465 0048 51EC1A0B 		vmov	r0, r1, d10
 3466 004c FFF7FEFF 		bl	__aeabi_dcmplt
 3467              	.LVL330:
 3468 0050 80B1     		cbz	r0, .L271
1046:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
 3469              		.loc 1 1046 0 is_stmt 0 discriminator 1
 3470 0052 DAE92689 		ldrd	r8, [r10, #152]
 3471 0056 DFEDA07A 		vldr.32	s15, .L306+32
 3472 005a 77EEC87A 		vsub.f32	s15, s15, s16
 3473 005e 17EE900A 		vmov	r0, s15
 3474 0062 FFF7FEFF 		bl	__aeabi_f2d
 3475              	.LVL331:
 3476 0066 0246     		mov	r2, r0
 3477 0068 0B46     		mov	r3, r1
 3478 006a 4046     		mov	r0, r8
 3479 006c 4946     		mov	r1, r9
 3480 006e FFF7FEFF 		bl	__aeabi_dcmpgt
 3481              	.LVL332:
 3482 0072 A8B9     		cbnz	r0, .L273
 3483              	.L271:
ARM GAS  /tmp/ccw660IW.s 			page 91


1046:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
 3484              		.loc 1 1046 0 discriminator 3
 3485 0074 DAE92623 		ldrd	r2, [r10, #152]
 3486 0078 2046     		mov	r0, r4
 3487 007a 2946     		mov	r1, r5
 3488 007c FFF7FEFF 		bl	__aeabi_dcmpgt
 3489              	.LVL333:
 3490 0080 08B3     		cbz	r0, .L274
1047:Src/Eagle_TRT.c **** 	{
 3491              		.loc 1 1047 0 is_stmt 1
 3492 0082 DFED957A 		vldr.32	s15, .L306+32
 3493 0086 77EEC87A 		vsub.f32	s15, s15, s16
 3494 008a 17EE900A 		vmov	r0, s15
 3495 008e FFF7FEFF 		bl	__aeabi_f2d
 3496              	.LVL334:
 3497 0092 0246     		mov	r2, r0
 3498 0094 0B46     		mov	r3, r1
 3499 0096 51EC1A0B 		vmov	r0, r1, d10
 3500 009a FFF7FEFF 		bl	__aeabi_dcmpgt
 3501              	.LVL335:
 3502 009e 90B1     		cbz	r0, .L274
 3503              	.L273:
1049:Src/Eagle_TRT.c **** 		{
 3504              		.loc 1 1049 0
 3505 00a0 DAE92C45 		ldrd	r4, [r10, #176]
 3506 00a4 0022     		movs	r2, #0
 3507 00a6 0023     		movs	r3, #0
 3508 00a8 2046     		mov	r0, r4
 3509 00aa 2946     		mov	r1, r5
 3510 00ac FFF7FEFF 		bl	__aeabi_dcmplt
 3511              	.LVL336:
 3512 00b0 0028     		cmp	r0, #0
 3513 00b2 40F0F880 		bne	.L305
1055:Src/Eagle_TRT.c **** 		}
 3514              		.loc 1 1055 0
 3515 00b6 2246     		mov	r2, r4
 3516 00b8 2B46     		mov	r3, r5
 3517 00ba 0020     		movs	r0, #0
 3518 00bc 8749     		ldr	r1, .L306+36
 3519 00be FFF7FEFF 		bl	__aeabi_dsub
 3520              	.LVL337:
 3521 00c2 CAE92C01 		strd	r0, [r10, #176]
 3522              	.L274:
1060:Src/Eagle_TRT.c **** 	speed *= 3.6;
 3523              		.loc 1 1060 0
 3524 00c6 0022     		movs	r2, #0
 3525 00c8 854B     		ldr	r3, .L306+40
 3526 00ca DAE92C01 		ldrd	r0, [r10, #176]
 3527 00ce FFF7FEFF 		bl	__aeabi_ddiv
 3528              	.LVL338:
 3529 00d2 79A3     		adr	r3, .L306
 3530 00d4 D3E90023 		ldrd	r2, [r3]
 3531 00d8 FFF7FEFF 		bl	__aeabi_dmul
 3532              	.LVL339:
 3533 00dc 8046     		mov	r8, r0
 3534 00de 8946     		mov	r9, r1
 3535 00e0 DAF87800 		ldr	r0, [r10, #120]	@ float
ARM GAS  /tmp/ccw660IW.s 			page 92


 3536 00e4 FFF7FEFF 		bl	__aeabi_f2d
 3537              	.LVL340:
 3538 00e8 0446     		mov	r4, r0
 3539 00ea 0D46     		mov	r5, r1
 3540 00ec 0246     		mov	r2, r0
 3541 00ee 0B46     		mov	r3, r1
 3542 00f0 4046     		mov	r0, r8
 3543 00f2 4946     		mov	r1, r9
 3544 00f4 FFF7FEFF 		bl	__aeabi_dmul
 3545              	.LVL341:
1061:Src/Eagle_TRT.c **** 	speed /= dt;
 3546              		.loc 1 1061 0
 3547 00f8 71A3     		adr	r3, .L306+8
 3548 00fa D3E90023 		ldrd	r2, [r3]
 3549 00fe FFF7FEFF 		bl	__aeabi_dmul
 3550              	.LVL342:
1062:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
 3551              		.loc 1 1062 0
 3552 0102 3246     		mov	r2, r6
 3553 0104 3B46     		mov	r3, r7
 3554 0106 FFF7FEFF 		bl	__aeabi_ddiv
 3555              	.LVL343:
1063:Src/Eagle_TRT.c **** 
 3556              		.loc 1 1063 0
 3557 010a 0022     		movs	r2, #0
 3558 010c 754B     		ldr	r3, .L306+44
 3559 010e FFF7FEFF 		bl	__aeabi_dmul
 3560              	.LVL344:
 3561 0112 41EC100B 		vmov	d0, r0, r1
 3562 0116 FFF7FEFF 		bl	round
 3563              	.LVL345:
 3564 011a 0022     		movs	r2, #0
 3565 011c 714B     		ldr	r3, .L306+44
 3566 011e 51EC100B 		vmov	r0, r1, d0
 3567 0122 FFF7FEFF 		bl	__aeabi_ddiv
 3568              	.LVL346:
 3569 0126 41EC190B 		vmov	d9, r0, r1
 3570              	.LVL347:
1065:Src/Eagle_TRT.c **** 
 3571              		.loc 1 1065 0
 3572 012a FDEEC87A 		vcvt.s32.f32	s15, s16
 3573 012e 17EE908A 		vmov	r8, s15	@ int
 3574              	.LVL348:
1069:Src/Eagle_TRT.c **** 	{
 3575              		.loc 1 1069 0
 3576 0132 DAE9F667 		ldrd	r6, [r10, #984]
 3577              	.LVL349:
 3578 0136 0022     		movs	r2, #0
 3579 0138 6B4B     		ldr	r3, .L306+48
 3580 013a 3046     		mov	r0, r6
 3581              	.LVL350:
 3582 013c 3946     		mov	r1, r7
 3583 013e FFF7FEFF 		bl	__aeabi_dcmplt
 3584              	.LVL351:
 3585 0142 40B9     		cbnz	r0, .L279
1069:Src/Eagle_TRT.c **** 	{
 3586              		.loc 1 1069 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccw660IW.s 			page 93


 3587 0144 0022     		movs	r2, #0
 3588 0146 694B     		ldr	r3, .L306+52
 3589 0148 3046     		mov	r0, r6
 3590 014a 3946     		mov	r1, r7
 3591 014c FFF7FEFF 		bl	__aeabi_dcmpgt
 3592              	.LVL352:
 3593 0150 0028     		cmp	r0, #0
 3594 0152 00F08780 		beq	.L280
 3595              	.L279:
1071:Src/Eagle_TRT.c **** 		{
 3596              		.loc 1 1071 0 is_stmt 1
 3597 0156 DAE92867 		ldrd	r6, [r10, #160]
 3598 015a 5BA3     		adr	r3, .L306+16
 3599 015c D3E90023 		ldrd	r2, [r3]
 3600 0160 3046     		mov	r0, r6
 3601 0162 3946     		mov	r1, r7
 3602 0164 FFF7FEFF 		bl	__aeabi_dcmple
 3603              	.LVL353:
 3604 0168 0028     		cmp	r0, #0
 3605 016a 39D0     		beq	.L282
1071:Src/Eagle_TRT.c **** 		{
 3606              		.loc 1 1071 0 is_stmt 0 discriminator 1
 3607 016c C8F5B470 		rsb	r0, r8, #360
 3608 0170 FFF7FEFF 		bl	__aeabi_i2d
 3609              	.LVL354:
 3610 0174 0246     		mov	r2, r0
 3611 0176 0B46     		mov	r3, r1
 3612 0178 3046     		mov	r0, r6
 3613 017a 3946     		mov	r1, r7
 3614 017c FFF7FEFF 		bl	__aeabi_dcmpgt
 3615              	.LVL355:
 3616 0180 70B3     		cbz	r0, .L282
1071:Src/Eagle_TRT.c **** 		{
 3617              		.loc 1 1071 0 discriminator 2
 3618 0182 0022     		movs	r2, #0
 3619 0184 5A4B     		ldr	r3, .L306+56
 3620 0186 51EC1A0B 		vmov	r0, r1, d10
 3621 018a FFF7FEFF 		bl	__aeabi_dcmpge
 3622              	.LVL356:
 3623 018e 38B3     		cbz	r0, .L282
1071:Src/Eagle_TRT.c **** 		{
 3624              		.loc 1 1071 0 discriminator 3
 3625 0190 4046     		mov	r0, r8
 3626 0192 FFF7FEFF 		bl	__aeabi_i2d
 3627              	.LVL357:
 3628 0196 0246     		mov	r2, r0
 3629 0198 0B46     		mov	r3, r1
 3630 019a 51EC1A0B 		vmov	r0, r1, d10
 3631 019e FFF7FEFF 		bl	__aeabi_dcmplt
 3632              	.LVL358:
 3633 01a2 E8B1     		cbz	r0, .L282
1073:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
 3634              		.loc 1 1073 0 is_stmt 1
 3635 01a4 DAF86C30 		ldr	r3, [r10, #108]
 3636 01a8 0133     		adds	r3, r3, #1
 3637 01aa CAF86C30 		str	r3, [r10, #108]
1074:Src/Eagle_TRT.c **** 		}
ARM GAS  /tmp/ccw660IW.s 			page 94


 3638              		.loc 1 1074 0
 3639 01ae 48A3     		adr	r3, .L306+24
 3640 01b0 D3E90023 		ldrd	r2, [r3]
 3641 01b4 2046     		mov	r0, r4
 3642 01b6 2946     		mov	r1, r5
 3643 01b8 FFF7FEFF 		bl	__aeabi_dmul
 3644              	.LVL359:
 3645 01bc 0022     		movs	r2, #0
 3646 01be 494B     		ldr	r3, .L306+44
 3647 01c0 FFF7FEFF 		bl	__aeabi_ddiv
 3648              	.LVL360:
 3649 01c4 CDE90001 		strd	r0, [sp]
 3650 01c8 DAF87000 		ldr	r0, [r10, #112]	@ float
 3651 01cc FFF7FEFF 		bl	__aeabi_f2d
 3652              	.LVL361:
 3653 01d0 DDE90023 		ldrd	r2, [sp]
 3654 01d4 FFF7FEFF 		bl	__aeabi_dadd
 3655              	.LVL362:
 3656 01d8 FFF7FEFF 		bl	__aeabi_d2f
 3657              	.LVL363:
 3658 01dc CAF87000 		str	r0, [r10, #112]	@ float
 3659              	.L282:
1076:Src/Eagle_TRT.c **** 		{
 3660              		.loc 1 1076 0
 3661 01e0 0022     		movs	r2, #0
 3662 01e2 434B     		ldr	r3, .L306+56
 3663 01e4 3046     		mov	r0, r6
 3664 01e6 3946     		mov	r1, r7
 3665 01e8 FFF7FEFF 		bl	__aeabi_dcmpge
 3666              	.LVL364:
 3667 01ec D0B3     		cbz	r0, .L280
1076:Src/Eagle_TRT.c **** 		{
 3668              		.loc 1 1076 0 is_stmt 0 discriminator 1
 3669 01ee 4046     		mov	r0, r8
 3670 01f0 FFF7FEFF 		bl	__aeabi_i2d
 3671              	.LVL365:
 3672 01f4 0246     		mov	r2, r0
 3673 01f6 0B46     		mov	r3, r1
 3674 01f8 3046     		mov	r0, r6
 3675 01fa 3946     		mov	r1, r7
 3676 01fc FFF7FEFF 		bl	__aeabi_dcmplt
 3677              	.LVL366:
 3678 0200 80B3     		cbz	r0, .L280
1076:Src/Eagle_TRT.c **** 		{
 3679              		.loc 1 1076 0 discriminator 2
 3680 0202 31A3     		adr	r3, .L306+16
 3681 0204 D3E90023 		ldrd	r2, [r3]
 3682 0208 51EC1A0B 		vmov	r0, r1, d10
 3683 020c FFF7FEFF 		bl	__aeabi_dcmple
 3684              	.LVL367:
 3685 0210 40B3     		cbz	r0, .L280
1076:Src/Eagle_TRT.c **** 		{
 3686              		.loc 1 1076 0 discriminator 3
 3687 0212 C8F5B470 		rsb	r0, r8, #360
 3688 0216 FFF7FEFF 		bl	__aeabi_i2d
 3689              	.LVL368:
 3690 021a 0246     		mov	r2, r0
ARM GAS  /tmp/ccw660IW.s 			page 95


 3691 021c 0B46     		mov	r3, r1
 3692 021e 51EC1A0B 		vmov	r0, r1, d10
 3693 0222 FFF7FEFF 		bl	__aeabi_dcmpgt
 3694              	.LVL369:
 3695 0226 E8B1     		cbz	r0, .L280
1078:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
 3696              		.loc 1 1078 0 is_stmt 1
 3697 0228 DAF86C30 		ldr	r3, [r10, #108]
 3698 022c 0133     		adds	r3, r3, #1
 3699 022e CAF86C30 		str	r3, [r10, #108]
1079:Src/Eagle_TRT.c **** 		}
 3700              		.loc 1 1079 0
 3701 0232 27A3     		adr	r3, .L306+24
 3702 0234 D3E90023 		ldrd	r2, [r3]
 3703 0238 2046     		mov	r0, r4
 3704 023a 2946     		mov	r1, r5
 3705 023c FFF7FEFF 		bl	__aeabi_dmul
 3706              	.LVL370:
 3707 0240 0022     		movs	r2, #0
 3708 0242 284B     		ldr	r3, .L306+44
 3709 0244 FFF7FEFF 		bl	__aeabi_ddiv
 3710              	.LVL371:
 3711 0248 0446     		mov	r4, r0
 3712 024a 0D46     		mov	r5, r1
 3713 024c DAF87000 		ldr	r0, [r10, #112]	@ float
 3714 0250 FFF7FEFF 		bl	__aeabi_f2d
 3715              	.LVL372:
 3716 0254 2246     		mov	r2, r4
 3717 0256 2B46     		mov	r3, r5
 3718 0258 FFF7FEFF 		bl	__aeabi_dadd
 3719              	.LVL373:
 3720 025c FFF7FEFF 		bl	__aeabi_d2f
 3721              	.LVL374:
 3722 0260 CAF87000 		str	r0, [r10, #112]	@ float
 3723              	.L280:
1083:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 50);
 3724              		.loc 1 1083 0
 3725 0264 0AF1B804 		add	r4, r10, #184
 3726 0268 B0EE490A 		vmov.f32	s0, s18
 3727 026c F0EE690A 		vmov.f32	s1, s19
 3728 0270 3221     		movs	r1, #50
 3729 0272 2046     		mov	r0, r4
 3730 0274 FFF7FEFF 		bl	shift_array
 3731              	.LVL375:
1084:Src/Eagle_TRT.c **** 
 3732              		.loc 1 1084 0
 3733 0278 3221     		movs	r1, #50
 3734 027a 2046     		mov	r0, r4
 3735 027c FFF7FEFF 		bl	dynamic_average
 3736              	.LVL376:
 3737 0280 8AEDF60B 		vstr.64	d0, [r10, #984]
1086:Src/Eagle_TRT.c **** }
 3738              		.loc 1 1086 0
 3739 0284 5046     		mov	r0, r10
 3740 0286 FFF7FEFF 		bl	enc_calculate_optimal_frequency
 3741              	.LVL377:
1087:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccw660IW.s 			page 96


 3742              		.loc 1 1087 0
 3743 028a 02B0     		add	sp, sp, #8
 3744              	.LCFI48:
 3745              		.cfi_remember_state
 3746              		.cfi_def_cfa_offset 56
 3747              		@ sp needed
 3748 028c BDEC068B 		vldm	sp!, {d8-d10}
 3749              	.LCFI49:
 3750              		.cfi_restore 84
 3751              		.cfi_restore 85
 3752              		.cfi_restore 82
 3753              		.cfi_restore 83
 3754              		.cfi_restore 80
 3755              		.cfi_restore 81
 3756              		.cfi_def_cfa_offset 32
 3757              	.LVL378:
 3758 0290 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 3759              	.LVL379:
 3760              	.L304:
 3761              	.LCFI50:
 3762              		.cfi_restore_state
1038:Src/Eagle_TRT.c **** 	}
 3763              		.loc 1 1038 0
 3764 0294 DAE92423 		ldrd	r2, [r10, #144]
 3765 0298 DAE92601 		ldrd	r0, [r10, #152]
 3766 029c FFF7FEFF 		bl	__aeabi_dsub
 3767              	.LVL380:
 3768 02a0 CAE92C01 		strd	r0, [r10, #176]
 3769 02a4 C4E6     		b	.L270
 3770              	.L305:
1051:Src/Eagle_TRT.c **** 		}
 3771              		.loc 1 1051 0
 3772 02a6 0022     		movs	r2, #0
 3773 02a8 0C4B     		ldr	r3, .L306+36
 3774 02aa 2046     		mov	r0, r4
 3775 02ac 2946     		mov	r1, r5
 3776 02ae FFF7FEFF 		bl	__aeabi_dadd
 3777              	.LVL381:
 3778 02b2 CAE92C01 		strd	r0, [r10, #176]
 3779 02b6 06E7     		b	.L274
 3780              	.L307:
 3781              		.align	3
 3782              	.L306:
 3783 02b8 6F1283C0 		.word	3229815407
 3784 02bc CA210940 		.word	1074340298
 3785 02c0 CDCCCCCC 		.word	3435973837
 3786 02c4 CCCC0C40 		.word	1074580684
 3787 02c8 00000000 		.word	0
 3788 02cc 00907640 		.word	1081511936
 3789 02d0 1F85EB51 		.word	1374389535
 3790 02d4 B81E0940 		.word	1074339512
 3791 02d8 0000B443 		.word	1135869952
 3792 02dc 00807640 		.word	1081507840
 3793 02e0 00806640 		.word	1080459264
 3794 02e4 00408F40 		.word	1083129856
 3795 02e8 0000E0BF 		.word	-1075838976
 3796 02ec 0000E03F 		.word	1071644672
ARM GAS  /tmp/ccw660IW.s 			page 97


 3797 02f0 0000F0BF 		.word	-1074790400
 3798              		.cfi_endproc
 3799              	.LFE153:
 3801              		.section	.text.encoder_tim_interrupt,"ax",%progbits
 3802              		.align	1
 3803              		.global	encoder_tim_interrupt
 3804              		.syntax unified
 3805              		.thumb
 3806              		.thumb_func
 3807              		.fpu fpv4-sp-d16
 3809              	encoder_tim_interrupt:
 3810              	.LFB152:
 979:Src/Eagle_TRT.c **** 
 3811              		.loc 1 979 0
 3812              		.cfi_startproc
 3813              		@ args = 0, pretend = 0, frame = 0
 3814              		@ frame_needed = 0, uses_anonymous_args = 0
 3815              	.LVL382:
 3816 0000 D0B5     		push	{r4, r6, r7, lr}
 3817              	.LCFI51:
 3818              		.cfi_def_cfa_offset 16
 3819              		.cfi_offset 4, -16
 3820              		.cfi_offset 6, -12
 3821              		.cfi_offset 7, -8
 3822              		.cfi_offset 14, -4
 3823 0002 0446     		mov	r4, r0
 981:Src/Eagle_TRT.c **** 	{
 3824              		.loc 1 981 0
 3825 0004 C368     		ldr	r3, [r0, #12]
 3826 0006 4BB1     		cbz	r3, .L319
 987:Src/Eagle_TRT.c **** 	{
 3827              		.loc 1 987 0
 3828 0008 012B     		cmp	r3, #1
 3829 000a 10D0     		beq	.L320
 993:Src/Eagle_TRT.c **** 	{
 3830              		.loc 1 993 0
 3831 000c 022B     		cmp	r3, #2
 3832 000e 17D0     		beq	.L321
 3833              	.LVL383:
 3834              	.L310:
1013:Src/Eagle_TRT.c **** 	{
 3835              		.loc 1 1013 0
 3836 0010 E368     		ldr	r3, [r4, #12]
 3837 0012 012B     		cmp	r3, #1
 3838 0014 31DD     		ble	.L314
1015:Src/Eagle_TRT.c **** 	}
 3839              		.loc 1 1015 0
 3840 0016 0023     		movs	r3, #0
 3841 0018 E360     		str	r3, [r4, #12]
 3842 001a D0BD     		pop	{r4, r6, r7, pc}
 3843              	.LVL384:
 3844              	.L319:
 984:Src/Eagle_TRT.c **** 		enc->angle0 = read_encoder(enc);
 3845              		.loc 1 984 0
 3846 001c D0E92423 		ldrd	r2, [r0, #144]
 3847 0020 C0E92823 		strd	r2, [r0, #160]
 985:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccw660IW.s 			page 98


 3848              		.loc 1 985 0
 3849 0024 FFF7FEFF 		bl	read_encoder
 3850              	.LVL385:
 3851 0028 84ED240B 		vstr.64	d0, [r4, #144]
 3852 002c F0E7     		b	.L310
 3853              	.LVL386:
 3854              	.L320:
 990:Src/Eagle_TRT.c **** 		enc->angle1 = read_encoder(enc);
 3855              		.loc 1 990 0
 3856 002e D0E92623 		ldrd	r2, [r0, #152]
 3857 0032 C0E92A23 		strd	r2, [r0, #168]
 991:Src/Eagle_TRT.c **** 	}
 3858              		.loc 1 991 0
 3859 0036 FFF7FEFF 		bl	read_encoder
 3860              	.LVL387:
 3861 003a 84ED260B 		vstr.64	d0, [r4, #152]
 3862 003e E7E7     		b	.L310
 3863              	.LVL388:
 3864              	.L321:
 996:Src/Eagle_TRT.c **** 
 3865              		.loc 1 996 0
 3866 0040 FFF7FEFF 		bl	get_speed_encoder
 3867              	.LVL389:
 998:Src/Eagle_TRT.c **** 
 3868              		.loc 1 998 0
 3869 0044 0022     		movs	r2, #0
 3870 0046 0E4B     		ldr	r3, .L323
 3871 0048 D4E9F601 		ldrd	r0, [r4, #984]
 3872 004c FFF7FEFF 		bl	__aeabi_dmul
 3873              	.LVL390:
 3874 0050 0646     		mov	r6, r0
 3875 0052 0F46     		mov	r7, r1
 3876 0054 C4E9F667 		strd	r6, [r4, #984]
1001:Src/Eagle_TRT.c **** 		{
 3877              		.loc 1 1001 0
 3878 0058 0022     		movs	r2, #0
 3879 005a 0023     		movs	r3, #0
 3880 005c FFF7FEFF 		bl	__aeabi_dcmplt
 3881              	.LVL391:
 3882 0060 10B9     		cbnz	r0, .L322
1008:Src/Eagle_TRT.c **** 		}
 3883              		.loc 1 1008 0
 3884 0062 0023     		movs	r3, #0
 3885 0064 6367     		str	r3, [r4, #116]
 3886 0066 D3E7     		b	.L310
 3887              	.L322:
1003:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
 3888              		.loc 1 1003 0
 3889 0068 C4F8D863 		str	r6, [r4, #984]
 3890 006c 07F10043 		add	r3, r7, #-2147483648
 3891 0070 C4F8DC33 		str	r3, [r4, #988]
1004:Src/Eagle_TRT.c **** 		}
 3892              		.loc 1 1004 0
 3893 0074 0123     		movs	r3, #1
 3894 0076 6367     		str	r3, [r4, #116]
 3895 0078 CAE7     		b	.L310
 3896              	.L314:
ARM GAS  /tmp/ccw660IW.s 			page 99


1019:Src/Eagle_TRT.c **** 	}
 3897              		.loc 1 1019 0
 3898 007a 0133     		adds	r3, r3, #1
 3899 007c E360     		str	r3, [r4, #12]
 3900 007e D0BD     		pop	{r4, r6, r7, pc}
 3901              	.LVL392:
 3902              	.L324:
 3903              		.align	2
 3904              	.L323:
 3905 0080 00002440 		.word	1076101120
 3906              		.cfi_endproc
 3907              	.LFE152:
 3909              		.comm	pot_3,24,4
 3910              		.comm	pot_2,24,4
 3911              		.comm	pot_1,24,4
 3912              		.comm	enc,1008,8
 3913              		.comm	buffer_gps,2,4
 3914              		.comm	data_string_gps,1,1
 3915              		.comm	cont_comma,4,4
 3916              		.comm	cont_string,4,4
 3917              		.comm	string_gps,100,4
 3918              		.global	start_string_gps
 3919              		.comm	huart_GPS,4,4
 3920              		.global	print_q
 3921              		.comm	can,28,4
 3922              		.comm	imu,1064,8
 3923              		.global	OUT_Z_H_A_ADD
 3924              		.global	OUT_Z_L_A_ADD
 3925              		.global	OUT_Y_H_A_ADD
 3926              		.global	OUT_Y_L_A_ADD
 3927              		.global	OUT_X_H_A_ADD
 3928              		.global	OUT_X_L_A_ADD
 3929              		.global	OUT_Z_H_G_ADD
 3930              		.global	OUT_Z_L_G_ADD
 3931              		.global	OUT_Y_H_G_ADD
 3932              		.global	OUT_Y_L_G_ADD
 3933              		.global	OUT_X_H_G_ADD
 3934              		.global	OUT_X_L_G_ADD
 3935              		.global	SCL_M_12
 3936              		.global	SCL_M_8
 3937              		.global	SCL_M_4
 3938              		.global	SCL_M_2
 3939              		.global	CTRL_REG6_XM
 3940              		.global	SCL_A_16
 3941              		.global	SCL_A_8
 3942              		.global	SCL_A_6
 3943              		.global	SCL_A_4
 3944              		.global	SCL_A_2
 3945              		.global	CTRL_REG2_XM
 3946              		.global	SCL_G_2000
 3947              		.global	SCL_G_1000
 3948              		.global	SCL_G_500
 3949              		.global	SCL_G_245
 3950              		.global	CTRL_REG4_G
 3951              		.global	CTRL_REG7_XM_VAL
 3952              		.global	CTRL_REG7_XM_ADD
 3953              		.global	CTRL_REG6_XM_VAL
ARM GAS  /tmp/ccw660IW.s 			page 100


 3954              		.global	CTRL_REG6_XM_ADD
 3955              		.global	CTRL_REG5_XM_VAL
 3956              		.global	CTRL_REG5_XM_ADD
 3957              		.global	CTRL_REG2_XM_VAL
 3958              		.global	CTRL_REG2_XM_ADD
 3959              		.global	CTRL_REG1_XM_VAL
 3960              		.global	CTRL_REG1_XM_ADD
 3961              		.global	CTRL_REG4_G_VAL
 3962              		.global	CTRL_REG4_G_ADD
 3963              		.global	CTRL_REG1_G_VAL
 3964              		.global	CTRL_REG1_G_ADD
 3965              		.comm	WHO_AM_I_XM_VAL,1,1
 3966              		.global	WHO_AM_I_XM
 3967              		.comm	WHO_AM_I_G_VAL,1,1
 3968              		.global	WHO_AM_I_G
 3969              		.global	ZERO
 3970              		.section	.bss.CTRL_REG7_XM_VAL,"aw",%nobits
 3971              		.set	.LANCHOR12,. + 0
 3974              	CTRL_REG7_XM_VAL:
 3975 0000 00       		.space	1
 3976              		.section	.bss.SCL_A_2,"aw",%nobits
 3979              	SCL_A_2:
 3980 0000 00       		.space	1
 3981              		.section	.bss.SCL_G_245,"aw",%nobits
 3984              	SCL_G_245:
 3985 0000 00       		.space	1
 3986              		.section	.bss.SCL_M_2,"aw",%nobits
 3989              	SCL_M_2:
 3990 0000 00       		.space	1
 3991              		.section	.bss.ZERO,"aw",%nobits
 3994              	ZERO:
 3995 0000 00       		.space	1
 3996              		.section	.bss.print_q,"aw",%nobits
 3997              		.align	2
 3998              		.set	.LANCHOR22,. + 0
 4001              	print_q:
 4002 0000 00000000 		.space	224
 4002      00000000 
 4002      00000000 
 4002      00000000 
 4002      00000000 
 4003              		.section	.bss.start_string_gps,"aw",%nobits
 4004              		.align	2
 4005              		.set	.LANCHOR23,. + 0
 4008              	start_string_gps:
 4009 0000 00000000 		.space	4
 4010              		.section	.data.CTRL_REG1_G_ADD,"aw",%progbits
 4011              		.set	.LANCHOR1,. + 0
 4014              	CTRL_REG1_G_ADD:
 4015 0000 20       		.byte	32
 4016              		.section	.data.CTRL_REG1_G_VAL,"aw",%progbits
 4017              		.set	.LANCHOR0,. + 0
 4020              	CTRL_REG1_G_VAL:
 4021 0000 0F       		.byte	15
 4022              		.section	.data.CTRL_REG1_XM_ADD,"aw",%progbits
 4023              		.set	.LANCHOR3,. + 0
 4026              	CTRL_REG1_XM_ADD:
ARM GAS  /tmp/ccw660IW.s 			page 101


 4027 0000 20       		.byte	32
 4028              		.section	.data.CTRL_REG1_XM_VAL,"aw",%progbits
 4029              		.set	.LANCHOR2,. + 0
 4032              	CTRL_REG1_XM_VAL:
 4033 0000 A7       		.byte	-89
 4034              		.section	.data.CTRL_REG2_XM,"aw",%progbits
 4035              		.set	.LANCHOR5,. + 0
 4038              	CTRL_REG2_XM:
 4039 0000 21       		.byte	33
 4040              		.section	.data.CTRL_REG2_XM_ADD,"aw",%progbits
 4043              	CTRL_REG2_XM_ADD:
 4044 0000 21       		.byte	33
 4045              		.section	.data.CTRL_REG2_XM_VAL,"aw",%progbits
 4048              	CTRL_REG2_XM_VAL:
 4049 0000 08       		.byte	8
 4050              		.section	.data.CTRL_REG4_G,"aw",%progbits
 4051              		.set	.LANCHOR7,. + 0
 4054              	CTRL_REG4_G:
 4055 0000 23       		.byte	35
 4056              		.section	.data.CTRL_REG4_G_ADD,"aw",%progbits
 4059              	CTRL_REG4_G_ADD:
 4060 0000 23       		.byte	35
 4061              		.section	.data.CTRL_REG4_G_VAL,"aw",%progbits
 4064              	CTRL_REG4_G_VAL:
 4065 0000 10       		.byte	16
 4066              		.section	.data.CTRL_REG5_XM_ADD,"aw",%progbits
 4067              		.set	.LANCHOR9,. + 0
 4070              	CTRL_REG5_XM_ADD:
 4071 0000 24       		.byte	36
 4072              		.section	.data.CTRL_REG5_XM_VAL,"aw",%progbits
 4073              		.set	.LANCHOR8,. + 0
 4076              	CTRL_REG5_XM_VAL:
 4077 0000 70       		.byte	112
 4078              		.section	.data.CTRL_REG6_XM,"aw",%progbits
 4081              	CTRL_REG6_XM:
 4082 0000 25       		.byte	37
 4083              		.section	.data.CTRL_REG6_XM_ADD,"aw",%progbits
 4084              		.set	.LANCHOR11,. + 0
 4087              	CTRL_REG6_XM_ADD:
 4088 0000 25       		.byte	37
 4089              		.section	.data.CTRL_REG6_XM_VAL,"aw",%progbits
 4090              		.set	.LANCHOR10,. + 0
 4093              	CTRL_REG6_XM_VAL:
 4094 0000 20       		.byte	32
 4095              		.section	.data.CTRL_REG7_XM_ADD,"aw",%progbits
 4096              		.set	.LANCHOR13,. + 0
 4099              	CTRL_REG7_XM_ADD:
 4100 0000 26       		.byte	38
 4101              		.section	.data.OUT_X_H_A_ADD,"aw",%progbits
 4102              		.set	.LANCHOR16,. + 0
 4105              	OUT_X_H_A_ADD:
 4106 0000 A9       		.byte	-87
 4107              		.section	.data.OUT_X_H_G_ADD,"aw",%progbits
 4108              		.set	.LANCHOR24,. + 0
 4111              	OUT_X_H_G_ADD:
 4112 0000 A9       		.byte	-87
 4113              		.section	.data.OUT_X_L_A_ADD,"aw",%progbits
ARM GAS  /tmp/ccw660IW.s 			page 102


 4114              		.set	.LANCHOR17,. + 0
 4117              	OUT_X_L_A_ADD:
 4118 0000 A8       		.byte	-88
 4119              		.section	.data.OUT_X_L_G_ADD,"aw",%progbits
 4120              		.set	.LANCHOR25,. + 0
 4123              	OUT_X_L_G_ADD:
 4124 0000 A8       		.byte	-88
 4125              		.section	.data.OUT_Y_H_A_ADD,"aw",%progbits
 4126              		.set	.LANCHOR18,. + 0
 4129              	OUT_Y_H_A_ADD:
 4130 0000 AB       		.byte	-85
 4131              		.section	.data.OUT_Y_H_G_ADD,"aw",%progbits
 4132              		.set	.LANCHOR26,. + 0
 4135              	OUT_Y_H_G_ADD:
 4136 0000 AB       		.byte	-85
 4137              		.section	.data.OUT_Y_L_A_ADD,"aw",%progbits
 4138              		.set	.LANCHOR19,. + 0
 4141              	OUT_Y_L_A_ADD:
 4142 0000 AA       		.byte	-86
 4143              		.section	.data.OUT_Y_L_G_ADD,"aw",%progbits
 4144              		.set	.LANCHOR27,. + 0
 4147              	OUT_Y_L_G_ADD:
 4148 0000 AA       		.byte	-86
 4149              		.section	.data.OUT_Z_H_A_ADD,"aw",%progbits
 4150              		.set	.LANCHOR20,. + 0
 4153              	OUT_Z_H_A_ADD:
 4154 0000 AD       		.byte	-83
 4155              		.section	.data.OUT_Z_H_G_ADD,"aw",%progbits
 4156              		.set	.LANCHOR28,. + 0
 4159              	OUT_Z_H_G_ADD:
 4160 0000 AD       		.byte	-83
 4161              		.section	.data.OUT_Z_L_A_ADD,"aw",%progbits
 4162              		.set	.LANCHOR21,. + 0
 4165              	OUT_Z_L_A_ADD:
 4166 0000 AC       		.byte	-84
 4167              		.section	.data.OUT_Z_L_G_ADD,"aw",%progbits
 4168              		.set	.LANCHOR29,. + 0
 4171              	OUT_Z_L_G_ADD:
 4172 0000 AC       		.byte	-84
 4173              		.section	.data.SCL_A_16,"aw",%progbits
 4176              	SCL_A_16:
 4177 0000 20       		.byte	32
 4178              		.section	.data.SCL_A_4,"aw",%progbits
 4179              		.set	.LANCHOR4,. + 0
 4182              	SCL_A_4:
 4183 0000 08       		.byte	8
 4184              		.section	.data.SCL_A_6,"aw",%progbits
 4187              	SCL_A_6:
 4188 0000 10       		.byte	16
 4189              		.section	.data.SCL_A_8,"aw",%progbits
 4192              	SCL_A_8:
 4193 0000 18       		.byte	24
 4194              		.section	.data.SCL_G_1000,"aw",%progbits
 4197              	SCL_G_1000:
 4198 0000 20       		.byte	32
 4199              		.section	.data.SCL_G_2000,"aw",%progbits
 4202              	SCL_G_2000:
ARM GAS  /tmp/ccw660IW.s 			page 103


 4203 0000 30       		.byte	48
 4204              		.section	.data.SCL_G_500,"aw",%progbits
 4205              		.set	.LANCHOR6,. + 0
 4208              	SCL_G_500:
 4209 0000 10       		.byte	16
 4210              		.section	.data.SCL_M_12,"aw",%progbits
 4213              	SCL_M_12:
 4214 0000 60       		.byte	96
 4215              		.section	.data.SCL_M_4,"aw",%progbits
 4218              	SCL_M_4:
 4219 0000 20       		.byte	32
 4220              		.section	.data.SCL_M_8,"aw",%progbits
 4223              	SCL_M_8:
 4224 0000 40       		.byte	64
 4225              		.section	.data.WHO_AM_I_G,"aw",%progbits
 4226              		.set	.LANCHOR15,. + 0
 4229              	WHO_AM_I_G:
 4230 0000 8F       		.byte	-113
 4231              		.section	.data.WHO_AM_I_XM,"aw",%progbits
 4232              		.set	.LANCHOR14,. + 0
 4235              	WHO_AM_I_XM:
 4236 0000 8F       		.byte	-113
 4237              		.section	.rodata.LSMD9S0_accel_gyro_init.str1.4,"aMS",%progbits,1
 4238              		.align	2
 4239              	.LC1:
 4240 0000 3C494D55 		.ascii	"<IMU> Initialization -> Done\015\012\000"
 4240      3E20496E 
 4240      69746961 
 4240      6C697A61 
 4240      74696F6E 
 4241              		.section	.rodata.checksum.str1.4,"aMS",%progbits,1
 4242              		.align	2
 4243              	.LC0:
 4244 0000 257800   		.ascii	"%x\000"
 4245              		.section	.rodata.gps_init.str1.4,"aMS",%progbits,1
 4246              		.align	2
 4247              	.LC2:
 4248 0000 24504D54 		.ascii	"$PMTK251,115200*1F\015\012\000"
 4248      4B323531 
 4248      2C313135 
 4248      3230302A 
 4248      31460D0A 
 4249 0015 000000   		.space	3
 4250              	.LC3:
 4251 0018 24504D54 		.ascii	"$PMTK220,100*2F\015\012\000"
 4251      4B323230 
 4251      2C313030 
 4251      2A32460D 
 4251      0A00
 4252 002a 0000     		.space	2
 4253              	.LC4:
 4254 002c 24504D54 		.ascii	"$PMTK314,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\015"
 4254      4B333134 
 4254      2C302C30 
 4254      2C312C31 
 4254      2C302C30 
 4255 005e 0A00     		.ascii	"\012\000"
ARM GAS  /tmp/ccw660IW.s 			page 104


 4256              	.LC5:
 4257 0060 3030302E 		.ascii	"000.00\000"
 4257      303000
 4258 0067 00       		.space	1
 4259              	.LC6:
 4260 0068 30303030 		.ascii	"0000.0000\000"
 4260      2E303030 
 4260      3000
 4261 0072 0000     		.space	2
 4262              	.LC7:
 4263 0074 4E00     		.ascii	"N\000"
 4264 0076 0000     		.space	2
 4265              	.LC8:
 4266 0078 30303030 		.ascii	"00000.0000\000"
 4266      302E3030 
 4266      303000
 4267 0083 00       		.space	1
 4268              	.LC9:
 4269 0084 5700     		.ascii	"W\000"
 4270 0086 0000     		.space	2
 4271              	.LC10:
 4272 0088 30303030 		.ascii	"0000.0\000"
 4272      2E3000
 4273 008f 00       		.space	1
 4274              	.LC11:
 4275 0090 30303030 		.ascii	"000000\000"
 4275      303000
 4276              		.text
 4277              	.Letext0:
 4278              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4279              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4280              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4281              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4282              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 4283              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 4284              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4285              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4286              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4287              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 4288              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 4289              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 4290              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4291              		.file 15 "/usr/include/newlib/sys/lock.h"
 4292              		.file 16 "/usr/include/newlib/sys/_types.h"
 4293              		.file 17 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4294              		.file 18 "/usr/include/newlib/sys/reent.h"
 4295              		.file 19 "/usr/include/newlib/stdlib.h"
 4296              		.file 20 "/usr/include/newlib/math.h"
 4297              		.file 21 "Inc/Eagle_TRT.h"
 4298              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 4299              		.file 23 "/usr/include/newlib/stdio.h"
 4300              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4301              		.file 25 "/usr/include/newlib/string.h"
 4302              		.file 26 "/usr/include/newlib/malloc.h"
ARM GAS  /tmp/ccw660IW.s 			page 105


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Eagle_TRT.c
     /tmp/ccw660IW.s:18     .text.next:0000000000000000 $t
     /tmp/ccw660IW.s:24     .text.next:0000000000000000 next
     /tmp/ccw660IW.s:45     .text.emptyp:0000000000000000 $t
     /tmp/ccw660IW.s:51     .text.emptyp:0000000000000000 emptyp
     /tmp/ccw660IW.s:73     .text.fullp:0000000000000000 $t
     /tmp/ccw660IW.s:79     .text.fullp:0000000000000000 fullp
     /tmp/ccw660IW.s:109    .text.checksum:0000000000000000 $t
     /tmp/ccw660IW.s:115    .text.checksum:0000000000000000 checksum
     /tmp/ccw660IW.s:242    .text.checksum:0000000000000080 $d
     /tmp/ccw660IW.s:247    .text.send_config:0000000000000000 $t
     /tmp/ccw660IW.s:254    .text.send_config:0000000000000000 send_config
     /tmp/ccw660IW.s:325    .text.send_config:000000000000005c $d
                            *COM*:0000000000000428 imu
     /tmp/ccw660IW.s:331    .text.LSMD9S0_accel_gyro_init:0000000000000000 $t
     /tmp/ccw660IW.s:338    .text.LSMD9S0_accel_gyro_init:0000000000000000 LSMD9S0_accel_gyro_init
     /tmp/ccw660IW.s:429    .text.LSMD9S0_accel_gyro_init:00000000000000a0 $d
     /tmp/ccw660IW.s:451    .text.LSMD9S0_read:0000000000000000 $t
     /tmp/ccw660IW.s:458    .text.LSMD9S0_read:0000000000000000 LSMD9S0_read
     /tmp/ccw660IW.s:585    .text.LSMD9S0_read:00000000000000d0 $d
     /tmp/ccw660IW.s:590    .text.LSMD9S0_check:0000000000000000 $t
     /tmp/ccw660IW.s:597    .text.LSMD9S0_check:0000000000000000 LSMD9S0_check
     /tmp/ccw660IW.s:726    .text.LSMD9S0_check:00000000000000bc $d
                            *COM*:0000000000000001 WHO_AM_I_XM_VAL
                            *COM*:0000000000000001 WHO_AM_I_G_VAL
     /tmp/ccw660IW.s:737    .text.LSM9DS0_calibration:0000000000000000 $t
     /tmp/ccw660IW.s:744    .text.LSM9DS0_calibration:0000000000000000 LSM9DS0_calibration
     /tmp/ccw660IW.s:767    .text.LSMD9S0_accel_read:0000000000000000 $t
     /tmp/ccw660IW.s:774    .text.LSMD9S0_accel_read:0000000000000000 LSMD9S0_accel_read
     /tmp/ccw660IW.s:887    .text.LSMD9S0_accel_read:00000000000000e8 $d
     /tmp/ccw660IW.s:901    .text.CAN_Send:0000000000000000 $t
     /tmp/ccw660IW.s:908    .text.CAN_Send:0000000000000000 CAN_Send
     /tmp/ccw660IW.s:983    .text.CAN_Receive:0000000000000000 $t
     /tmp/ccw660IW.s:990    .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccw660IW.s:1039   .text.init:0000000000000000 $t
     /tmp/ccw660IW.s:1046   .text.init:0000000000000000 init
     /tmp/ccw660IW.s:1066   .text.push:0000000000000000 $t
     /tmp/ccw660IW.s:1073   .text.push:0000000000000000 push
     /tmp/ccw660IW.s:1141   .text.pop:0000000000000000 $t
     /tmp/ccw660IW.s:1148   .text.pop:0000000000000000 pop
     /tmp/ccw660IW.s:1214   .text.print:0000000000000000 $t
     /tmp/ccw660IW.s:1221   .text.print:0000000000000000 print
     /tmp/ccw660IW.s:1274   .text.print:0000000000000030 $d
     /tmp/ccw660IW.s:1279   .text.print_it:0000000000000000 $t
     /tmp/ccw660IW.s:1286   .text.print_it:0000000000000000 print_it
     /tmp/ccw660IW.s:1336   .text.print_it:0000000000000028 $d
     /tmp/ccw660IW.s:1341   .text.gps_init:0000000000000000 $t
     /tmp/ccw660IW.s:1348   .text.gps_init:0000000000000000 gps_init
     /tmp/ccw660IW.s:1503   .text.gps_init:00000000000000fc $d
                            *COM*:0000000000000004 huart_GPS
                            *COM*:0000000000000002 buffer_gps
     /tmp/ccw660IW.s:1521   .text.gps_read_it:0000000000000000 $t
     /tmp/ccw660IW.s:1528   .text.gps_read_it:0000000000000000 gps_read_it
     /tmp/ccw660IW.s:1994   .text.gps_read_it:0000000000000280 $d
                            *COM*:0000000000000001 data_string_gps
                            *COM*:0000000000000004 cont_string
ARM GAS  /tmp/ccw660IW.s 			page 106


                            *COM*:0000000000000064 string_gps
                            *COM*:000000000000001c can
                            *COM*:0000000000000004 cont_comma
     /tmp/ccw660IW.s:2013   .text.gps_read_it:00000000000002c0 $t
     /tmp/ccw660IW.s:2084   .text.gps_read_it:0000000000000330 $d
     /tmp/ccw660IW.s:2092   .text.ReinitTIM7:0000000000000000 $t
     /tmp/ccw660IW.s:2099   .text.ReinitTIM7:0000000000000000 ReinitTIM7
     /tmp/ccw660IW.s:2191   .text.ReinitTIM7:0000000000000088 $d
     /tmp/ccw660IW.s:2201   .text.enc_calculate_optimal_frequency:0000000000000000 $t
     /tmp/ccw660IW.s:2208   .text.enc_calculate_optimal_frequency:0000000000000000 enc_calculate_optimal_frequency
     /tmp/ccw660IW.s:2338   .text.enc_calculate_optimal_frequency:00000000000000d4 $d
     /tmp/ccw660IW.s:2345   .text.calc_pot_value:0000000000000000 $t
     /tmp/ccw660IW.s:2352   .text.calc_pot_value:0000000000000000 calc_pot_value
     /tmp/ccw660IW.s:2401   .text.implausibility_check:0000000000000000 $t
     /tmp/ccw660IW.s:2408   .text.implausibility_check:0000000000000000 implausibility_check
     /tmp/ccw660IW.s:2487   .text.set_max:0000000000000000 $t
     /tmp/ccw660IW.s:2494   .text.set_max:0000000000000000 set_max
     /tmp/ccw660IW.s:2510   .text.set_min:0000000000000000 $t
     /tmp/ccw660IW.s:2517   .text.set_min:0000000000000000 set_min
     /tmp/ccw660IW.s:2534   .text.Power:0000000000000000 $t
     /tmp/ccw660IW.s:2541   .text.Power:0000000000000000 Power
     /tmp/ccw660IW.s:2604   .text.Power:000000000000003c $d
     /tmp/ccw660IW.s:2610   .text.bin_dec:0000000000000000 $t
     /tmp/ccw660IW.s:2617   .text.bin_dec:0000000000000000 bin_dec
     /tmp/ccw660IW.s:2689   .text.read_encoder:0000000000000000 $t
     /tmp/ccw660IW.s:2696   .text.read_encoder:0000000000000000 read_encoder
     /tmp/ccw660IW.s:2879   .text.read_encoder:0000000000000128 $d
     /tmp/ccw660IW.s:2886   .text.shift_array:0000000000000000 $t
     /tmp/ccw660IW.s:2893   .text.shift_array:0000000000000000 shift_array
     /tmp/ccw660IW.s:2959   .text.speed_filter:0000000000000000 $t
     /tmp/ccw660IW.s:2966   .text.speed_filter:0000000000000000 speed_filter
     /tmp/ccw660IW.s:3113   .text.speed_filter:00000000000000a8 $d
     /tmp/ccw660IW.s:3121   .text.dynamic_average:0000000000000000 $t
     /tmp/ccw660IW.s:3128   .text.dynamic_average:0000000000000000 dynamic_average
     /tmp/ccw660IW.s:3195   .text.LSMD9S0_gyro_read:0000000000000000 $t
     /tmp/ccw660IW.s:3202   .text.LSMD9S0_gyro_read:0000000000000000 LSMD9S0_gyro_read
     /tmp/ccw660IW.s:3379   .text.LSMD9S0_gyro_read:0000000000000154 $d
     /tmp/ccw660IW.s:3397   .text.get_speed_encoder:0000000000000000 $t
     /tmp/ccw660IW.s:3404   .text.get_speed_encoder:0000000000000000 get_speed_encoder
     /tmp/ccw660IW.s:3783   .text.get_speed_encoder:00000000000002b8 $d
     /tmp/ccw660IW.s:3802   .text.encoder_tim_interrupt:0000000000000000 $t
     /tmp/ccw660IW.s:3809   .text.encoder_tim_interrupt:0000000000000000 encoder_tim_interrupt
     /tmp/ccw660IW.s:3905   .text.encoder_tim_interrupt:0000000000000080 $d
                            *COM*:0000000000000018 pot_3
                            *COM*:0000000000000018 pot_2
                            *COM*:0000000000000018 pot_1
                            *COM*:00000000000003f0 enc
     /tmp/ccw660IW.s:4008   .bss.start_string_gps:0000000000000000 start_string_gps
     /tmp/ccw660IW.s:4001   .bss.print_q:0000000000000000 print_q
     /tmp/ccw660IW.s:4153   .data.OUT_Z_H_A_ADD:0000000000000000 OUT_Z_H_A_ADD
     /tmp/ccw660IW.s:4165   .data.OUT_Z_L_A_ADD:0000000000000000 OUT_Z_L_A_ADD
     /tmp/ccw660IW.s:4129   .data.OUT_Y_H_A_ADD:0000000000000000 OUT_Y_H_A_ADD
     /tmp/ccw660IW.s:4141   .data.OUT_Y_L_A_ADD:0000000000000000 OUT_Y_L_A_ADD
     /tmp/ccw660IW.s:4105   .data.OUT_X_H_A_ADD:0000000000000000 OUT_X_H_A_ADD
     /tmp/ccw660IW.s:4117   .data.OUT_X_L_A_ADD:0000000000000000 OUT_X_L_A_ADD
     /tmp/ccw660IW.s:4159   .data.OUT_Z_H_G_ADD:0000000000000000 OUT_Z_H_G_ADD
     /tmp/ccw660IW.s:4171   .data.OUT_Z_L_G_ADD:0000000000000000 OUT_Z_L_G_ADD
ARM GAS  /tmp/ccw660IW.s 			page 107


     /tmp/ccw660IW.s:4135   .data.OUT_Y_H_G_ADD:0000000000000000 OUT_Y_H_G_ADD
     /tmp/ccw660IW.s:4147   .data.OUT_Y_L_G_ADD:0000000000000000 OUT_Y_L_G_ADD
     /tmp/ccw660IW.s:4111   .data.OUT_X_H_G_ADD:0000000000000000 OUT_X_H_G_ADD
     /tmp/ccw660IW.s:4123   .data.OUT_X_L_G_ADD:0000000000000000 OUT_X_L_G_ADD
     /tmp/ccw660IW.s:4213   .data.SCL_M_12:0000000000000000 SCL_M_12
     /tmp/ccw660IW.s:4223   .data.SCL_M_8:0000000000000000 SCL_M_8
     /tmp/ccw660IW.s:4218   .data.SCL_M_4:0000000000000000 SCL_M_4
     /tmp/ccw660IW.s:3989   .bss.SCL_M_2:0000000000000000 SCL_M_2
     /tmp/ccw660IW.s:4081   .data.CTRL_REG6_XM:0000000000000000 CTRL_REG6_XM
     /tmp/ccw660IW.s:4176   .data.SCL_A_16:0000000000000000 SCL_A_16
     /tmp/ccw660IW.s:4192   .data.SCL_A_8:0000000000000000 SCL_A_8
     /tmp/ccw660IW.s:4187   .data.SCL_A_6:0000000000000000 SCL_A_6
     /tmp/ccw660IW.s:4182   .data.SCL_A_4:0000000000000000 SCL_A_4
     /tmp/ccw660IW.s:3979   .bss.SCL_A_2:0000000000000000 SCL_A_2
     /tmp/ccw660IW.s:4038   .data.CTRL_REG2_XM:0000000000000000 CTRL_REG2_XM
     /tmp/ccw660IW.s:4202   .data.SCL_G_2000:0000000000000000 SCL_G_2000
     /tmp/ccw660IW.s:4197   .data.SCL_G_1000:0000000000000000 SCL_G_1000
     /tmp/ccw660IW.s:4208   .data.SCL_G_500:0000000000000000 SCL_G_500
     /tmp/ccw660IW.s:3984   .bss.SCL_G_245:0000000000000000 SCL_G_245
     /tmp/ccw660IW.s:4054   .data.CTRL_REG4_G:0000000000000000 CTRL_REG4_G
     /tmp/ccw660IW.s:3974   .bss.CTRL_REG7_XM_VAL:0000000000000000 CTRL_REG7_XM_VAL
     /tmp/ccw660IW.s:4099   .data.CTRL_REG7_XM_ADD:0000000000000000 CTRL_REG7_XM_ADD
     /tmp/ccw660IW.s:4093   .data.CTRL_REG6_XM_VAL:0000000000000000 CTRL_REG6_XM_VAL
     /tmp/ccw660IW.s:4087   .data.CTRL_REG6_XM_ADD:0000000000000000 CTRL_REG6_XM_ADD
     /tmp/ccw660IW.s:4076   .data.CTRL_REG5_XM_VAL:0000000000000000 CTRL_REG5_XM_VAL
     /tmp/ccw660IW.s:4070   .data.CTRL_REG5_XM_ADD:0000000000000000 CTRL_REG5_XM_ADD
     /tmp/ccw660IW.s:4048   .data.CTRL_REG2_XM_VAL:0000000000000000 CTRL_REG2_XM_VAL
     /tmp/ccw660IW.s:4043   .data.CTRL_REG2_XM_ADD:0000000000000000 CTRL_REG2_XM_ADD
     /tmp/ccw660IW.s:4032   .data.CTRL_REG1_XM_VAL:0000000000000000 CTRL_REG1_XM_VAL
     /tmp/ccw660IW.s:4026   .data.CTRL_REG1_XM_ADD:0000000000000000 CTRL_REG1_XM_ADD
     /tmp/ccw660IW.s:4064   .data.CTRL_REG4_G_VAL:0000000000000000 CTRL_REG4_G_VAL
     /tmp/ccw660IW.s:4059   .data.CTRL_REG4_G_ADD:0000000000000000 CTRL_REG4_G_ADD
     /tmp/ccw660IW.s:4020   .data.CTRL_REG1_G_VAL:0000000000000000 CTRL_REG1_G_VAL
     /tmp/ccw660IW.s:4014   .data.CTRL_REG1_G_ADD:0000000000000000 CTRL_REG1_G_ADD
     /tmp/ccw660IW.s:4235   .data.WHO_AM_I_XM:0000000000000000 WHO_AM_I_XM
     /tmp/ccw660IW.s:4229   .data.WHO_AM_I_G:0000000000000000 WHO_AM_I_G
     /tmp/ccw660IW.s:3994   .bss.ZERO:0000000000000000 ZERO
     /tmp/ccw660IW.s:3975   .bss.CTRL_REG7_XM_VAL:0000000000000000 $d
     /tmp/ccw660IW.s:3980   .bss.SCL_A_2:0000000000000000 $d
     /tmp/ccw660IW.s:3985   .bss.SCL_G_245:0000000000000000 $d
     /tmp/ccw660IW.s:3990   .bss.SCL_M_2:0000000000000000 $d
     /tmp/ccw660IW.s:3995   .bss.ZERO:0000000000000000 $d
     /tmp/ccw660IW.s:3997   .bss.print_q:0000000000000000 $d
     /tmp/ccw660IW.s:4004   .bss.start_string_gps:0000000000000000 $d
     /tmp/ccw660IW.s:4238   .rodata.LSMD9S0_accel_gyro_init.str1.4:0000000000000000 $d
     /tmp/ccw660IW.s:4242   .rodata.checksum.str1.4:0000000000000000 $d
     /tmp/ccw660IW.s:4246   .rodata.gps_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
sprintf
HAL_GPIO_WritePin
HAL_SPI_Transmit
htim2
HAL_Delay
HAL_UART_Transmit
huart2
ARM GAS  /tmp/ccw660IW.s 			page 108


HAL_SPI_Receive
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
strlen
malloc
strcpy
free
HAL_UART_Transmit_IT
HAL_UART_Init
HAL_UART_Receive_IT
__aeabi_dmul
__aeabi_d2iz
atof
__aeabi_f2d
sqrt
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_dcmpge
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_ddiv
__aeabi_d2f
__aeabi_i2d
__aeabi_dadd
HAL_GPIO_ReadPin
__aeabi_dsub
__aeabi_dcmple
round
