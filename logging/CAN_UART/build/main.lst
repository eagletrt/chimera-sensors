ARM GAS  /tmp/ccbujePK.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB141:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccbujePK.s 			page 2


  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** ADC_HandleTypeDef hadc1;
  47:Src/main.c    **** 
  48:Src/main.c    **** CAN_HandleTypeDef hcan1;
  49:Src/main.c    **** 
  50:Src/main.c    **** SD_HandleTypeDef hsd;
  51:Src/main.c    **** DMA_HandleTypeDef hdma_sdio_rx;
  52:Src/main.c    **** DMA_HandleTypeDef hdma_sdio_tx;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim6;
  55:Src/main.c    **** TIM_HandleTypeDef htim7;
  56:Src/main.c    **** 
  57:Src/main.c    **** UART_HandleTypeDef huart2;
  58:Src/main.c    **** UART_HandleTypeDef huart3;
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** CAN_FilterTypeDef sFilter;
  62:Src/main.c    **** CAN_RxHeaderTypeDef RxHeader;
  63:Src/main.c    **** 
  64:Src/main.c    **** int a = 0;
  65:Src/main.c    **** 
  66:Src/main.c    **** int cont_rx = 0;
  67:Src/main.c    **** char messagesToWrite[200][256];
  68:Src/main.c    **** int time = 0;
  69:Src/main.c    **** long int printable_time = 0;
  70:Src/main.c    **** int delta;
  71:Src/main.c    **** 
  72:Src/main.c    **** int mount_ok = 0;
  73:Src/main.c    **** int msg_counter = 0;
  74:Src/main.c    **** int msg_index = 0;
  75:Src/main.c    **** 
  76:Src/main.c    **** static TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  77:Src/main.c    **** static TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  78:Src/main.c    **** 
  79:Src/main.c    **** int interrupt_flag = 0;
  80:Src/main.c    **** 
  81:Src/main.c    **** uint8_t huart_rx[50];
  82:Src/main.c    **** char msg_can_to_send[50];
  83:Src/main.c    **** int cont_msg_can_to_send;
  84:Src/main.c    **** int flag_rx = 0;
  85:Src/main.c    **** int cont_huart_rx;
  86:Src/main.c    **** int cont_length_num;
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END PV */
  89:Src/main.c    **** 
ARM GAS  /tmp/ccbujePK.s 			page 3


  90:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  91:Src/main.c    **** void SystemClock_Config(void);
  92:Src/main.c    **** static void MX_GPIO_Init(void);
  93:Src/main.c    **** static void MX_DMA_Init(void);
  94:Src/main.c    **** static void MX_USART3_UART_Init(void);
  95:Src/main.c    **** static void MX_SDIO_SD_Init(void);
  96:Src/main.c    **** static void MX_USART2_UART_Init(void);
  97:Src/main.c    **** static void MX_CAN1_Init(void);
  98:Src/main.c    **** static void MX_TIM6_Init(void);
  99:Src/main.c    **** static void MX_TIM7_Init(void);
 100:Src/main.c    **** static void MX_ADC1_Init(void);
 101:Src/main.c    **** static void MX_NVIC_Init(void);
 102:Src/main.c    **** /* USER CODE BEGIN PFP */
 103:Src/main.c    **** 
 104:Src/main.c    **** /* USER CODE END PFP */
 105:Src/main.c    **** 
 106:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 107:Src/main.c    **** /* USER CODE BEGIN 0 */
 108:Src/main.c    **** 
 109:Src/main.c    **** /* USER CODE END 0 */
 110:Src/main.c    **** 
 111:Src/main.c    **** /**
 112:Src/main.c    ****   * @brief  The application entry point.
 113:Src/main.c    ****   * @retval int
 114:Src/main.c    ****   */
 115:Src/main.c    **** int main(void)
 116:Src/main.c    **** {
 117:Src/main.c    ****   /* USER CODE BEGIN 1 */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE END 1 */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 124:Src/main.c    ****   HAL_Init();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN Init */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END Init */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Configure the system clock */
 131:Src/main.c    ****   SystemClock_Config();
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE END SysInit */
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* Initialize all configured peripherals */
 138:Src/main.c    ****   MX_GPIO_Init();
 139:Src/main.c    ****   MX_DMA_Init();
 140:Src/main.c    ****   MX_USART3_UART_Init();
 141:Src/main.c    ****   MX_SDIO_SD_Init();
 142:Src/main.c    ****   MX_USART2_UART_Init();
 143:Src/main.c    ****   MX_CAN1_Init();
 144:Src/main.c    ****   MX_TIM6_Init();
 145:Src/main.c    ****   MX_TIM7_Init();
 146:Src/main.c    ****   MX_ADC1_Init();
ARM GAS  /tmp/ccbujePK.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    ****   /* Initialize interrupts */
 149:Src/main.c    ****   MX_NVIC_Init();
 150:Src/main.c    ****   /* USER CODE BEGIN 2 */
 151:Src/main.c    ****   sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 152:Src/main.c    ****   sFilter.FilterIdLow = 0;
 153:Src/main.c    ****   sFilter.FilterIdHigh = 0;
 154:Src/main.c    ****   sFilter.FilterMaskIdHigh = 0;
 155:Src/main.c    ****   sFilter.FilterMaskIdLow = 0;
 156:Src/main.c    ****   sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 157:Src/main.c    ****   sFilter.FilterBank = 0;
 158:Src/main.c    ****   sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 159:Src/main.c    ****   sFilter.FilterActivation = ENABLE;
 160:Src/main.c    ****   HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 161:Src/main.c    **** 
 162:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *)"can init done_1\r\n", 17, 5);
 163:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start_1\r\n", 9, 5);
 164:Src/main.c    **** 
 165:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 166:Src/main.c    ****   HAL_Delay(500);
 167:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 168:Src/main.c    ****   HAL_Delay(500);
 169:Src/main.c    **** 
 170:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 171:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 172:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 173:Src/main.c    **** 
 174:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *)"can init done\r\n", 15, 5);
 175:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start\r\n", 7, 5);
 176:Src/main.c    **** 
 177:Src/main.c    ****   HAL_TIM_Base_Start(&htim6);
 178:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim6);
 179:Src/main.c    **** 
 180:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, huart_rx, 35);
 181:Src/main.c    ****   //HAL_UART_Receive_IT(&huart3, huart_rx, 35);
 182:Src/main.c    **** 
 183:Src/main.c    ****   char txt[200];
 184:Src/main.c    **** 
 185:Src/main.c    ****   /* USER CODE END 2 */
 186:Src/main.c    **** 
 187:Src/main.c    ****   /* Infinite loop */
 188:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 189:Src/main.c    ****   while (1)
 190:Src/main.c    ****   {
 191:Src/main.c    ****     /* USER CODE END WHILE */
 192:Src/main.c    **** 
 193:Src/main.c    ****     /* USER CODE BEGIN 3 */
 194:Src/main.c    ****     a++;
 195:Src/main.c    ****     HAL_Delay(1);
 196:Src/main.c    ****     //print(&huart2,"ciao\r\n");
 197:Src/main.c    ****     //HAL_Delay(10);
 198:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)"ciao\r\n", 7, 5);
 199:Src/main.c    **** 
 200:Src/main.c    ****     if (flag_rx == 1)
 201:Src/main.c    ****     {
 202:Src/main.c    **** 
 203:Src/main.c    ****       flag_rx = 0;
ARM GAS  /tmp/ccbujePK.s 			page 5


 204:Src/main.c    ****       HAL_UART_Transmit(&huart3, (uint8_t *)msg_can_to_send, strlen(msg_can_to_send), 5);
 205:Src/main.c    ****       HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, 5);
 206:Src/main.c    **** 
 207:Src/main.c    ****       uint32_t mailbox;
 208:Src/main.c    ****       uint8_t messaggio_can[8];
 209:Src/main.c    ****       char can_id[] = {msg_can_to_send[0], msg_can_to_send[1], msg_can_to_send[2], '\0'};
 210:Src/main.c    ****       int zero = (int)('0');
 211:Src/main.c    ****       messaggio_can[0] = ((int)(msg_can_to_send[4]) - zero) * 100 + ((int)(msg_can_to_send[5]) - ze
 212:Src/main.c    ****       messaggio_can[1] = ((int)(msg_can_to_send[8]) - zero) * 100 + ((int)(msg_can_to_send[9]) - ze
 213:Src/main.c    ****       messaggio_can[2] = ((int)(msg_can_to_send[12]) - zero) * 100 + ((int)(msg_can_to_send[13]) - 
 214:Src/main.c    ****       messaggio_can[3] = ((int)(msg_can_to_send[16]) - zero) * 100 + ((int)(msg_can_to_send[17]) - 
 215:Src/main.c    ****       messaggio_can[4] = ((int)(msg_can_to_send[20]) - zero) * 100 + ((int)(msg_can_to_send[21]) - 
 216:Src/main.c    ****       messaggio_can[5] = ((int)(msg_can_to_send[24]) - zero) * 100 + ((int)(msg_can_to_send[25]) - 
 217:Src/main.c    ****       messaggio_can[6] = ((int)(msg_can_to_send[26]) - zero) * 100 + ((int)(msg_can_to_send[29]) - 
 218:Src/main.c    ****       messaggio_can[7] = ((int)(msg_can_to_send[30]) - zero) * 100 + ((int)(msg_can_to_send[31]) - 
 219:Src/main.c    **** 
 220:Src/main.c    ****       CAN_TxHeaderTypeDef TxHeader;
 221:Src/main.c    ****       TxHeader.StdId = atoi(can_id);
 222:Src/main.c    ****       TxHeader.IDE = CAN_ID_STD;
 223:Src/main.c    ****       TxHeader.RTR = CAN_RTR_DATA;
 224:Src/main.c    ****       TxHeader.DLC = 8;
 225:Src/main.c    ****       TxHeader.TransmitGlobalTime = DISABLE;
 226:Src/main.c    **** 
 227:Src/main.c    ****       if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0 && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX
 228:Src/main.c    ****       {
 229:Src/main.c    ****         HAL_CAN_AddTxMessage(&hcan1, &TxHeader, messaggio_can, &mailbox);
 230:Src/main.c    ****       }
 231:Src/main.c    ****       //HAL_UART_Receive_IT(&huart2,huart_rx, 36);
 232:Src/main.c    ****     }
 233:Src/main.c    ****   }
 234:Src/main.c    ****   /* USER CODE END 3 */
 235:Src/main.c    **** }
 236:Src/main.c    **** 
 237:Src/main.c    **** /**
 238:Src/main.c    ****   * @brief System Clock Configuration
 239:Src/main.c    ****   * @retval None
 240:Src/main.c    ****   */
 241:Src/main.c    **** void SystemClock_Config(void)
 242:Src/main.c    **** {
 243:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 244:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 245:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 246:Src/main.c    **** 
 247:Src/main.c    ****   /** Configure the main internal regulator output voltage
 248:Src/main.c    ****   */
 249:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 250:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 251:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 252:Src/main.c    ****   */
 253:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 254:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 288;
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 8;
ARM GAS  /tmp/ccbujePK.s 			page 6


 261:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 262:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 263:Src/main.c    ****   {
 264:Src/main.c    ****     Error_Handler();
 265:Src/main.c    ****   }
 266:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 267:Src/main.c    ****   */
 268:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 269:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 270:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 271:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 272:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 273:Src/main.c    **** 
 274:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 275:Src/main.c    ****   {
 276:Src/main.c    ****     Error_Handler();
 277:Src/main.c    ****   }
 278:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO | RCC_PERIPHCLK_CLK48;
 279:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 280:Src/main.c    ****   PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 281:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 282:Src/main.c    ****   {
 283:Src/main.c    ****     Error_Handler();
 284:Src/main.c    ****   }
 285:Src/main.c    **** }
 286:Src/main.c    **** 
 287:Src/main.c    **** /**
 288:Src/main.c    ****   * @brief NVIC Configuration.
 289:Src/main.c    ****   * @retval None
 290:Src/main.c    ****   */
 291:Src/main.c    **** static void MX_NVIC_Init(void)
 292:Src/main.c    **** {
 293:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 294:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 295:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 296:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 297:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 298:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 299:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 300:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 301:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 302:Src/main.c    ****   /* TIM6_DAC_IRQn interrupt configuration */
 303:Src/main.c    ****   HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 304:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 305:Src/main.c    ****   /* TIM7_IRQn interrupt configuration */
 306:Src/main.c    ****   HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 307:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM7_IRQn);
 308:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
 309:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 310:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 311:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 312:Src/main.c    ****   HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 313:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 314:Src/main.c    **** }
 315:Src/main.c    **** 
 316:Src/main.c    **** /**
 317:Src/main.c    ****   * @brief ADC1 Initialization Function
ARM GAS  /tmp/ccbujePK.s 			page 7


 318:Src/main.c    ****   * @param None
 319:Src/main.c    ****   * @retval None
 320:Src/main.c    ****   */
 321:Src/main.c    **** static void MX_ADC1_Init(void)
 322:Src/main.c    **** {
 323:Src/main.c    **** 
 324:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 325:Src/main.c    **** 
 326:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 327:Src/main.c    **** 
 328:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 329:Src/main.c    **** 
 330:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 331:Src/main.c    **** 
 332:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 333:Src/main.c    ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 334:Src/main.c    ****   */
 335:Src/main.c    ****   hadc1.Instance = ADC1;
 336:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 337:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 338:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 339:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 340:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 341:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 342:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 343:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 344:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 345:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 346:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 347:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 348:Src/main.c    ****   {
 349:Src/main.c    ****     Error_Handler();
 350:Src/main.c    ****   }
 351:Src/main.c    ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 352:Src/main.c    ****   */
 353:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 354:Src/main.c    ****   sConfig.Rank = 1;
 355:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 356:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 357:Src/main.c    ****   {
 358:Src/main.c    ****     Error_Handler();
 359:Src/main.c    ****   }
 360:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 361:Src/main.c    **** 
 362:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 363:Src/main.c    **** }
 364:Src/main.c    **** 
 365:Src/main.c    **** /**
 366:Src/main.c    ****   * @brief CAN1 Initialization Function
 367:Src/main.c    ****   * @param None
 368:Src/main.c    ****   * @retval None
 369:Src/main.c    ****   */
 370:Src/main.c    **** static void MX_CAN1_Init(void)
 371:Src/main.c    **** {
 372:Src/main.c    **** 
 373:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
 374:Src/main.c    **** 
ARM GAS  /tmp/ccbujePK.s 			page 8


 375:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 376:Src/main.c    **** 
 377:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 378:Src/main.c    **** 
 379:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 380:Src/main.c    ****   hcan1.Instance = CAN1;
 381:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 382:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 383:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 384:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 385:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 386:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 387:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 388:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 389:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 390:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 391:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 392:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 393:Src/main.c    ****   {
 394:Src/main.c    ****     Error_Handler();
 395:Src/main.c    ****   }
 396:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 397:Src/main.c    **** 
 398:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** /**
 402:Src/main.c    ****   * @brief SDIO Initialization Function
 403:Src/main.c    ****   * @param None
 404:Src/main.c    ****   * @retval None
 405:Src/main.c    ****   */
 406:Src/main.c    **** static void MX_SDIO_SD_Init(void)
 407:Src/main.c    **** {
 408:Src/main.c    **** 
 409:Src/main.c    ****   /* USER CODE BEGIN SDIO_Init 0 */
 410:Src/main.c    **** 
 411:Src/main.c    ****   /* USER CODE END SDIO_Init 0 */
 412:Src/main.c    **** 
 413:Src/main.c    ****   /* USER CODE BEGIN SDIO_Init 1 */
 414:Src/main.c    **** 
 415:Src/main.c    ****   /* USER CODE END SDIO_Init 1 */
 416:Src/main.c    ****   hsd.Instance = SDIO;
 417:Src/main.c    ****   hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 418:Src/main.c    ****   hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 419:Src/main.c    ****   hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 420:Src/main.c    ****   hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 421:Src/main.c    ****   hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 422:Src/main.c    ****   hsd.Init.ClockDiv = 0;
 423:Src/main.c    ****   if (HAL_SD_Init(&hsd) != HAL_OK)
 424:Src/main.c    ****   {
 425:Src/main.c    ****     Error_Handler();
 426:Src/main.c    ****   }
 427:Src/main.c    ****   /* USER CODE BEGIN SDIO_Init 2 */
 428:Src/main.c    **** 
 429:Src/main.c    ****   /* USER CODE END SDIO_Init 2 */
 430:Src/main.c    **** }
 431:Src/main.c    **** 
ARM GAS  /tmp/ccbujePK.s 			page 9


 432:Src/main.c    **** /**
 433:Src/main.c    ****   * @brief TIM6 Initialization Function
 434:Src/main.c    ****   * @param None
 435:Src/main.c    ****   * @retval None
 436:Src/main.c    ****   */
 437:Src/main.c    **** static void MX_TIM6_Init(void)
 438:Src/main.c    **** {
 439:Src/main.c    **** 
 440:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 0 */
 441:Src/main.c    **** 
 442:Src/main.c    ****   /* USER CODE END TIM6_Init 0 */
 443:Src/main.c    **** 
 444:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 445:Src/main.c    **** 
 446:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 1 */
 447:Src/main.c    **** 
 448:Src/main.c    ****   /* USER CODE END TIM6_Init 1 */
 449:Src/main.c    ****   htim6.Instance = TIM6;
 450:Src/main.c    ****   htim6.Init.Prescaler = 36;
 451:Src/main.c    ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 452:Src/main.c    ****   htim6.Init.Period = 1000;
 453:Src/main.c    ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 454:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 455:Src/main.c    ****   {
 456:Src/main.c    ****     Error_Handler();
 457:Src/main.c    ****   }
 458:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 459:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 460:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 461:Src/main.c    ****   {
 462:Src/main.c    ****     Error_Handler();
 463:Src/main.c    ****   }
 464:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 2 */
 465:Src/main.c    **** 
 466:Src/main.c    ****   /* USER CODE END TIM6_Init 2 */
 467:Src/main.c    **** }
 468:Src/main.c    **** 
 469:Src/main.c    **** /**
 470:Src/main.c    ****   * @brief TIM7 Initialization Function
 471:Src/main.c    ****   * @param None
 472:Src/main.c    ****   * @retval None
 473:Src/main.c    ****   */
 474:Src/main.c    **** static void MX_TIM7_Init(void)
 475:Src/main.c    **** {
 476:Src/main.c    **** 
 477:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 0 */
 478:Src/main.c    **** 
 479:Src/main.c    ****   /* USER CODE END TIM7_Init 0 */
 480:Src/main.c    **** 
 481:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 482:Src/main.c    **** 
 483:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 1 */
 484:Src/main.c    **** 
 485:Src/main.c    ****   /* USER CODE END TIM7_Init 1 */
 486:Src/main.c    ****   htim7.Instance = TIM7;
 487:Src/main.c    ****   htim7.Init.Prescaler = 3600;
 488:Src/main.c    ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/ccbujePK.s 			page 10


 489:Src/main.c    ****   htim7.Init.Period = 1999;
 490:Src/main.c    ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 491:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 492:Src/main.c    ****   {
 493:Src/main.c    ****     Error_Handler();
 494:Src/main.c    ****   }
 495:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 496:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 497:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 498:Src/main.c    ****   {
 499:Src/main.c    ****     Error_Handler();
 500:Src/main.c    ****   }
 501:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 2 */
 502:Src/main.c    **** 
 503:Src/main.c    ****   /* USER CODE END TIM7_Init 2 */
 504:Src/main.c    **** }
 505:Src/main.c    **** 
 506:Src/main.c    **** /**
 507:Src/main.c    ****   * @brief USART2 Initialization Function
 508:Src/main.c    ****   * @param None
 509:Src/main.c    ****   * @retval None
 510:Src/main.c    ****   */
 511:Src/main.c    **** static void MX_USART2_UART_Init(void)
 512:Src/main.c    **** {
 513:Src/main.c    **** 
 514:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 515:Src/main.c    **** 
 516:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 517:Src/main.c    **** 
 518:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 519:Src/main.c    **** 
 520:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 521:Src/main.c    ****   huart2.Instance = USART2;
 522:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 523:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 524:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 525:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 526:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 527:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 528:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 529:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 530:Src/main.c    ****   {
 531:Src/main.c    ****     Error_Handler();
 532:Src/main.c    ****   }
 533:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 534:Src/main.c    **** 
 535:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 536:Src/main.c    **** }
 537:Src/main.c    **** 
 538:Src/main.c    **** /**
 539:Src/main.c    ****   * @brief USART3 Initialization Function
 540:Src/main.c    ****   * @param None
 541:Src/main.c    ****   * @retval None
 542:Src/main.c    ****   */
 543:Src/main.c    **** static void MX_USART3_UART_Init(void)
 544:Src/main.c    **** {
 545:Src/main.c    **** 
ARM GAS  /tmp/ccbujePK.s 			page 11


 546:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 547:Src/main.c    **** 
 548:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 549:Src/main.c    **** 
 550:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 551:Src/main.c    **** 
 552:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 553:Src/main.c    ****   huart3.Instance = USART3;
 554:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 555:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 556:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 557:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 558:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 559:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 560:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 561:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 562:Src/main.c    ****   {
 563:Src/main.c    ****     Error_Handler();
 564:Src/main.c    ****   }
 565:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 566:Src/main.c    **** 
 567:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 568:Src/main.c    **** }
 569:Src/main.c    **** 
 570:Src/main.c    **** /**
 571:Src/main.c    ****   * Enable DMA controller clock
 572:Src/main.c    ****   */
 573:Src/main.c    **** static void MX_DMA_Init(void)
 574:Src/main.c    **** {
 575:Src/main.c    **** 
 576:Src/main.c    ****   /* DMA controller clock enable */
 577:Src/main.c    ****   __HAL_RCC_DMA2_CLK_ENABLE();
 578:Src/main.c    **** 
 579:Src/main.c    ****   /* DMA interrupt init */
 580:Src/main.c    ****   /* DMA2_Stream3_IRQn interrupt configuration */
 581:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 582:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 583:Src/main.c    ****   /* DMA2_Stream6_IRQn interrupt configuration */
 584:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 585:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 586:Src/main.c    **** }
 587:Src/main.c    **** 
 588:Src/main.c    **** /**
 589:Src/main.c    ****   * @brief GPIO Initialization Function
 590:Src/main.c    ****   * @param None
 591:Src/main.c    ****   * @retval None
 592:Src/main.c    ****   */
 593:Src/main.c    **** static void MX_GPIO_Init(void)
 594:Src/main.c    **** {
  27              		.loc 1 594 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
ARM GAS  /tmp/ccbujePK.s 			page 12


  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 8BB0     		sub	sp, sp, #44
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 64
 595:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 595 0
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
  49              	.LBB2:
 596:Src/main.c    **** 
 597:Src/main.c    ****   /* GPIO Ports Clock Enable */
 598:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  50              		.loc 1 598 0
  51 0010 0094     		str	r4, [sp]
  52 0012 294B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F08002 		orr	r2, r2, #128
  55 001a 1A63     		str	r2, [r3, #48]
  56 001c 1A6B     		ldr	r2, [r3, #48]
  57 001e 02F08002 		and	r2, r2, #128
  58 0022 0092     		str	r2, [sp]
  59 0024 009A     		ldr	r2, [sp]
  60              	.LBE2:
  61              	.LBB3:
 599:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  62              		.loc 1 599 0
  63 0026 0194     		str	r4, [sp, #4]
  64 0028 1A6B     		ldr	r2, [r3, #48]
  65 002a 42F00102 		orr	r2, r2, #1
  66 002e 1A63     		str	r2, [r3, #48]
  67 0030 1A6B     		ldr	r2, [r3, #48]
  68 0032 02F00102 		and	r2, r2, #1
  69 0036 0192     		str	r2, [sp, #4]
  70 0038 019A     		ldr	r2, [sp, #4]
  71              	.LBE3:
  72              	.LBB4:
 600:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  73              		.loc 1 600 0
  74 003a 0294     		str	r4, [sp, #8]
  75 003c 1A6B     		ldr	r2, [r3, #48]
  76 003e 42F00402 		orr	r2, r2, #4
  77 0042 1A63     		str	r2, [r3, #48]
  78 0044 1A6B     		ldr	r2, [r3, #48]
  79 0046 02F00402 		and	r2, r2, #4
  80 004a 0292     		str	r2, [sp, #8]
  81 004c 029A     		ldr	r2, [sp, #8]
  82              	.LBE4:
  83              	.LBB5:
 601:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  84              		.loc 1 601 0
ARM GAS  /tmp/ccbujePK.s 			page 13


  85 004e 0394     		str	r4, [sp, #12]
  86 0050 1A6B     		ldr	r2, [r3, #48]
  87 0052 42F00202 		orr	r2, r2, #2
  88 0056 1A63     		str	r2, [r3, #48]
  89 0058 1A6B     		ldr	r2, [r3, #48]
  90 005a 02F00202 		and	r2, r2, #2
  91 005e 0392     		str	r2, [sp, #12]
  92 0060 039A     		ldr	r2, [sp, #12]
  93              	.LBE5:
  94              	.LBB6:
 602:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  95              		.loc 1 602 0
  96 0062 0494     		str	r4, [sp, #16]
  97 0064 1A6B     		ldr	r2, [r3, #48]
  98 0066 42F00802 		orr	r2, r2, #8
  99 006a 1A63     		str	r2, [r3, #48]
 100 006c 1B6B     		ldr	r3, [r3, #48]
 101 006e 03F00803 		and	r3, r3, #8
 102 0072 0493     		str	r3, [sp, #16]
 103 0074 049B     		ldr	r3, [sp, #16]
 104              	.LBE6:
 603:Src/main.c    **** 
 604:Src/main.c    ****   /*Configure GPIO pin Output Level */
 605:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 105              		.loc 1 605 0
 106 0076 114F     		ldr	r7, .L3+4
 107 0078 2246     		mov	r2, r4
 108 007a 2021     		movs	r1, #32
 109 007c 3846     		mov	r0, r7
 110 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 111              	.LVL0:
 606:Src/main.c    **** 
 607:Src/main.c    ****   /*Configure GPIO pin Output Level */
 608:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 112              		.loc 1 608 0
 113 0082 0F4E     		ldr	r6, .L3+8
 114 0084 2246     		mov	r2, r4
 115 0086 0121     		movs	r1, #1
 116 0088 3046     		mov	r0, r6
 117 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL1:
 609:Src/main.c    **** 
 610:Src/main.c    ****   /*Configure GPIO pin : PA5 */
 611:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_5;
 119              		.loc 1 611 0
 120 008e 2023     		movs	r3, #32
 121 0090 0593     		str	r3, [sp, #20]
 612:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 122              		.loc 1 612 0
 123 0092 0125     		movs	r5, #1
 124 0094 0695     		str	r5, [sp, #24]
 613:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 125              		.loc 1 613 0
 126 0096 0795     		str	r5, [sp, #28]
 614:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 127              		.loc 1 614 0
 128 0098 0894     		str	r4, [sp, #32]
ARM GAS  /tmp/ccbujePK.s 			page 14


 615:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 129              		.loc 1 615 0
 130 009a 05A9     		add	r1, sp, #20
 131 009c 3846     		mov	r0, r7
 132 009e FFF7FEFF 		bl	HAL_GPIO_Init
 133              	.LVL2:
 616:Src/main.c    **** 
 617:Src/main.c    ****   /*Configure GPIO pin : PB0 */
 618:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 134              		.loc 1 618 0
 135 00a2 0595     		str	r5, [sp, #20]
 619:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 136              		.loc 1 619 0
 137 00a4 0695     		str	r5, [sp, #24]
 620:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 138              		.loc 1 620 0
 139 00a6 0795     		str	r5, [sp, #28]
 621:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 140              		.loc 1 621 0
 141 00a8 0894     		str	r4, [sp, #32]
 622:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 142              		.loc 1 622 0
 143 00aa 05A9     		add	r1, sp, #20
 144 00ac 3046     		mov	r0, r6
 145 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL3:
 623:Src/main.c    **** }
 147              		.loc 1 623 0
 148 00b2 0BB0     		add	sp, sp, #44
 149              	.LCFI2:
 150              		.cfi_def_cfa_offset 20
 151              		@ sp needed
 152 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 153              	.L4:
 154 00b6 00BF     		.align	2
 155              	.L3:
 156 00b8 00380240 		.word	1073887232
 157 00bc 00000240 		.word	1073872896
 158 00c0 00040240 		.word	1073873920
 159              		.cfi_endproc
 160              	.LFE141:
 162              		.section	.text.MX_DMA_Init,"ax",%progbits
 163              		.align	1
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	MX_DMA_Init:
 170              	.LFB140:
 574:Src/main.c    **** 
 171              		.loc 1 574 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 8
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI3:
 177              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccbujePK.s 			page 15


 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 180 0002 82B0     		sub	sp, sp, #8
 181              	.LCFI4:
 182              		.cfi_def_cfa_offset 16
 183              	.LBB7:
 577:Src/main.c    **** 
 184              		.loc 1 577 0
 185 0004 0024     		movs	r4, #0
 186 0006 0194     		str	r4, [sp, #4]
 187 0008 0D4B     		ldr	r3, .L7
 188 000a 1A6B     		ldr	r2, [r3, #48]
 189 000c 42F48002 		orr	r2, r2, #4194304
 190 0010 1A63     		str	r2, [r3, #48]
 191 0012 1B6B     		ldr	r3, [r3, #48]
 192 0014 03F48003 		and	r3, r3, #4194304
 193 0018 0193     		str	r3, [sp, #4]
 194 001a 019B     		ldr	r3, [sp, #4]
 195              	.LBE7:
 581:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 196              		.loc 1 581 0
 197 001c 2246     		mov	r2, r4
 198 001e 2146     		mov	r1, r4
 199 0020 3B20     		movs	r0, #59
 200 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 201              	.LVL4:
 582:Src/main.c    ****   /* DMA2_Stream6_IRQn interrupt configuration */
 202              		.loc 1 582 0
 203 0026 3B20     		movs	r0, #59
 204 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 205              	.LVL5:
 584:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 206              		.loc 1 584 0
 207 002c 2246     		mov	r2, r4
 208 002e 2146     		mov	r1, r4
 209 0030 4520     		movs	r0, #69
 210 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 211              	.LVL6:
 585:Src/main.c    **** }
 212              		.loc 1 585 0
 213 0036 4520     		movs	r0, #69
 214 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 215              	.LVL7:
 586:Src/main.c    **** 
 216              		.loc 1 586 0
 217 003c 02B0     		add	sp, sp, #8
 218              	.LCFI5:
 219              		.cfi_def_cfa_offset 8
 220              		@ sp needed
 221 003e 10BD     		pop	{r4, pc}
 222              	.L8:
 223              		.align	2
 224              	.L7:
 225 0040 00380240 		.word	1073887232
 226              		.cfi_endproc
 227              	.LFE140:
 229              		.section	.text.MX_NVIC_Init,"ax",%progbits
ARM GAS  /tmp/ccbujePK.s 			page 16


 230              		.align	1
 231              		.syntax unified
 232              		.thumb
 233              		.thumb_func
 234              		.fpu fpv4-sp-d16
 236              	MX_NVIC_Init:
 237              	.LFB132:
 292:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 238              		.loc 1 292 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242 0000 08B5     		push	{r3, lr}
 243              	.LCFI6:
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 3, -8
 246              		.cfi_offset 14, -4
 294:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 247              		.loc 1 294 0
 248 0002 0022     		movs	r2, #0
 249 0004 1146     		mov	r1, r2
 250 0006 1420     		movs	r0, #20
 251 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 252              	.LVL8:
 295:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 253              		.loc 1 295 0
 254 000c 1420     		movs	r0, #20
 255 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 256              	.LVL9:
 297:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 257              		.loc 1 297 0
 258 0012 0022     		movs	r2, #0
 259 0014 1146     		mov	r1, r2
 260 0016 1520     		movs	r0, #21
 261 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL10:
 298:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 263              		.loc 1 298 0
 264 001c 1520     		movs	r0, #21
 265 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 266              	.LVL11:
 300:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 267              		.loc 1 300 0
 268 0022 0022     		movs	r2, #0
 269 0024 1146     		mov	r1, r2
 270 0026 1620     		movs	r0, #22
 271 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 272              	.LVL12:
 301:Src/main.c    ****   /* TIM6_DAC_IRQn interrupt configuration */
 273              		.loc 1 301 0
 274 002c 1620     		movs	r0, #22
 275 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 276              	.LVL13:
 303:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 277              		.loc 1 303 0
 278 0032 0022     		movs	r2, #0
 279 0034 1146     		mov	r1, r2
ARM GAS  /tmp/ccbujePK.s 			page 17


 280 0036 3620     		movs	r0, #54
 281 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 282              	.LVL14:
 304:Src/main.c    ****   /* TIM7_IRQn interrupt configuration */
 283              		.loc 1 304 0
 284 003c 3620     		movs	r0, #54
 285 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 286              	.LVL15:
 306:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM7_IRQn);
 287              		.loc 1 306 0
 288 0042 0022     		movs	r2, #0
 289 0044 1146     		mov	r1, r2
 290 0046 3720     		movs	r0, #55
 291 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 292              	.LVL16:
 307:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
 293              		.loc 1 307 0
 294 004c 3720     		movs	r0, #55
 295 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 296              	.LVL17:
 309:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 297              		.loc 1 309 0
 298 0052 0022     		movs	r2, #0
 299 0054 1146     		mov	r1, r2
 300 0056 2620     		movs	r0, #38
 301 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 302              	.LVL18:
 310:Src/main.c    ****   /* USART3_IRQn interrupt configuration */
 303              		.loc 1 310 0
 304 005c 2620     		movs	r0, #38
 305 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 306              	.LVL19:
 312:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART3_IRQn);
 307              		.loc 1 312 0
 308 0062 0022     		movs	r2, #0
 309 0064 1146     		mov	r1, r2
 310 0066 2720     		movs	r0, #39
 311 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 312              	.LVL20:
 313:Src/main.c    **** }
 313              		.loc 1 313 0
 314 006c 2720     		movs	r0, #39
 315 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 316              	.LVL21:
 317 0072 08BD     		pop	{r3, pc}
 318              		.cfi_endproc
 319              	.LFE132:
 321              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 322              		.align	1
 323              		.syntax unified
 324              		.thumb
 325              		.thumb_func
 326              		.fpu fpv4-sp-d16
 328              	MX_USART3_UART_Init:
 329              	.LFB139:
 544:Src/main.c    **** 
 330              		.loc 1 544 0
ARM GAS  /tmp/ccbujePK.s 			page 18


 331              		.cfi_startproc
 332              		@ args = 0, pretend = 0, frame = 0
 333              		@ frame_needed = 0, uses_anonymous_args = 0
 334 0000 08B5     		push	{r3, lr}
 335              	.LCFI7:
 336              		.cfi_def_cfa_offset 8
 337              		.cfi_offset 3, -8
 338              		.cfi_offset 14, -4
 553:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 339              		.loc 1 553 0
 340 0002 0848     		ldr	r0, .L13
 341 0004 084B     		ldr	r3, .L13+4
 342 0006 0360     		str	r3, [r0]
 554:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 343              		.loc 1 554 0
 344 0008 4FF4E133 		mov	r3, #115200
 345 000c 4360     		str	r3, [r0, #4]
 555:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 346              		.loc 1 555 0
 347 000e 0023     		movs	r3, #0
 348 0010 8360     		str	r3, [r0, #8]
 556:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 349              		.loc 1 556 0
 350 0012 C360     		str	r3, [r0, #12]
 557:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 351              		.loc 1 557 0
 352 0014 0361     		str	r3, [r0, #16]
 558:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 353              		.loc 1 558 0
 354 0016 0C22     		movs	r2, #12
 355 0018 4261     		str	r2, [r0, #20]
 559:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 356              		.loc 1 559 0
 357 001a 8361     		str	r3, [r0, #24]
 560:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 358              		.loc 1 560 0
 359 001c C361     		str	r3, [r0, #28]
 561:Src/main.c    ****   {
 360              		.loc 1 561 0
 361 001e FFF7FEFF 		bl	HAL_UART_Init
 362              	.LVL22:
 363 0022 08BD     		pop	{r3, pc}
 364              	.L14:
 365              		.align	2
 366              	.L13:
 367 0024 00000000 		.word	huart3
 368 0028 00480040 		.word	1073760256
 369              		.cfi_endproc
 370              	.LFE139:
 372              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 373              		.align	1
 374              		.syntax unified
 375              		.thumb
 376              		.thumb_func
 377              		.fpu fpv4-sp-d16
 379              	MX_USART2_UART_Init:
 380              	.LFB138:
ARM GAS  /tmp/ccbujePK.s 			page 19


 512:Src/main.c    **** 
 381              		.loc 1 512 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385 0000 08B5     		push	{r3, lr}
 386              	.LCFI8:
 387              		.cfi_def_cfa_offset 8
 388              		.cfi_offset 3, -8
 389              		.cfi_offset 14, -4
 521:Src/main.c    ****   huart2.Init.BaudRate = 115200;
 390              		.loc 1 521 0
 391 0002 0948     		ldr	r0, .L17
 392 0004 094B     		ldr	r3, .L17+4
 393 0006 0360     		str	r3, [r0]
 522:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 394              		.loc 1 522 0
 395 0008 4FF4E133 		mov	r3, #115200
 396 000c 4360     		str	r3, [r0, #4]
 523:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 397              		.loc 1 523 0
 398 000e 0023     		movs	r3, #0
 399 0010 8360     		str	r3, [r0, #8]
 524:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 400              		.loc 1 524 0
 401 0012 C360     		str	r3, [r0, #12]
 525:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 402              		.loc 1 525 0
 403 0014 0361     		str	r3, [r0, #16]
 526:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 404              		.loc 1 526 0
 405 0016 0C22     		movs	r2, #12
 406 0018 4261     		str	r2, [r0, #20]
 527:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 407              		.loc 1 527 0
 408 001a 8361     		str	r3, [r0, #24]
 528:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 409              		.loc 1 528 0
 410 001c 4FF40043 		mov	r3, #32768
 411 0020 C361     		str	r3, [r0, #28]
 529:Src/main.c    ****   {
 412              		.loc 1 529 0
 413 0022 FFF7FEFF 		bl	HAL_UART_Init
 414              	.LVL23:
 415 0026 08BD     		pop	{r3, pc}
 416              	.L18:
 417              		.align	2
 418              	.L17:
 419 0028 00000000 		.word	huart2
 420 002c 00440040 		.word	1073759232
 421              		.cfi_endproc
 422              	.LFE138:
 424              		.section	.text.MX_SDIO_SD_Init,"ax",%progbits
 425              		.align	1
 426              		.syntax unified
 427              		.thumb
 428              		.thumb_func
ARM GAS  /tmp/ccbujePK.s 			page 20


 429              		.fpu fpv4-sp-d16
 431              	MX_SDIO_SD_Init:
 432              	.LFB135:
 407:Src/main.c    **** 
 433              		.loc 1 407 0
 434              		.cfi_startproc
 435              		@ args = 0, pretend = 0, frame = 0
 436              		@ frame_needed = 0, uses_anonymous_args = 0
 437 0000 08B5     		push	{r3, lr}
 438              	.LCFI9:
 439              		.cfi_def_cfa_offset 8
 440              		.cfi_offset 3, -8
 441              		.cfi_offset 14, -4
 416:Src/main.c    ****   hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 442              		.loc 1 416 0
 443 0002 0648     		ldr	r0, .L21
 444 0004 064B     		ldr	r3, .L21+4
 445 0006 0360     		str	r3, [r0]
 417:Src/main.c    ****   hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 446              		.loc 1 417 0
 447 0008 0023     		movs	r3, #0
 448 000a 4360     		str	r3, [r0, #4]
 418:Src/main.c    ****   hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 449              		.loc 1 418 0
 450 000c 8360     		str	r3, [r0, #8]
 419:Src/main.c    ****   hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 451              		.loc 1 419 0
 452 000e C360     		str	r3, [r0, #12]
 420:Src/main.c    ****   hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 453              		.loc 1 420 0
 454 0010 0361     		str	r3, [r0, #16]
 421:Src/main.c    ****   hsd.Init.ClockDiv = 0;
 455              		.loc 1 421 0
 456 0012 4361     		str	r3, [r0, #20]
 422:Src/main.c    ****   if (HAL_SD_Init(&hsd) != HAL_OK)
 457              		.loc 1 422 0
 458 0014 8361     		str	r3, [r0, #24]
 423:Src/main.c    ****   {
 459              		.loc 1 423 0
 460 0016 FFF7FEFF 		bl	HAL_SD_Init
 461              	.LVL24:
 462 001a 08BD     		pop	{r3, pc}
 463              	.L22:
 464              		.align	2
 465              	.L21:
 466 001c 00000000 		.word	hsd
 467 0020 002C0140 		.word	1073818624
 468              		.cfi_endproc
 469              	.LFE135:
 471              		.section	.text.MX_CAN1_Init,"ax",%progbits
 472              		.align	1
 473              		.syntax unified
 474              		.thumb
 475              		.thumb_func
 476              		.fpu fpv4-sp-d16
 478              	MX_CAN1_Init:
 479              	.LFB134:
ARM GAS  /tmp/ccbujePK.s 			page 21


 371:Src/main.c    **** 
 480              		.loc 1 371 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484 0000 08B5     		push	{r3, lr}
 485              	.LCFI10:
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 3, -8
 488              		.cfi_offset 14, -4
 380:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 489              		.loc 1 380 0
 490 0002 0B48     		ldr	r0, .L25
 491 0004 0B4B     		ldr	r3, .L25+4
 492 0006 0360     		str	r3, [r0]
 381:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 493              		.loc 1 381 0
 494 0008 0223     		movs	r3, #2
 495 000a 4360     		str	r3, [r0, #4]
 382:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 496              		.loc 1 382 0
 497 000c 0023     		movs	r3, #0
 498 000e 8360     		str	r3, [r0, #8]
 383:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 499              		.loc 1 383 0
 500 0010 C360     		str	r3, [r0, #12]
 384:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 501              		.loc 1 384 0
 502 0012 4FF43022 		mov	r2, #720896
 503 0016 0261     		str	r2, [r0, #16]
 385:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 504              		.loc 1 385 0
 505 0018 4FF48002 		mov	r2, #4194304
 506 001c 4261     		str	r2, [r0, #20]
 386:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 507              		.loc 1 386 0
 508 001e 0376     		strb	r3, [r0, #24]
 387:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 509              		.loc 1 387 0
 510 0020 4376     		strb	r3, [r0, #25]
 388:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 511              		.loc 1 388 0
 512 0022 8376     		strb	r3, [r0, #26]
 389:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 513              		.loc 1 389 0
 514 0024 C376     		strb	r3, [r0, #27]
 390:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 515              		.loc 1 390 0
 516 0026 0377     		strb	r3, [r0, #28]
 391:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 517              		.loc 1 391 0
 518 0028 4377     		strb	r3, [r0, #29]
 392:Src/main.c    ****   {
 519              		.loc 1 392 0
 520 002a FFF7FEFF 		bl	HAL_CAN_Init
 521              	.LVL25:
 522 002e 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccbujePK.s 			page 22


 523              	.L26:
 524              		.align	2
 525              	.L25:
 526 0030 00000000 		.word	hcan1
 527 0034 00640040 		.word	1073767424
 528              		.cfi_endproc
 529              	.LFE134:
 531              		.section	.text.MX_TIM6_Init,"ax",%progbits
 532              		.align	1
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv4-sp-d16
 538              	MX_TIM6_Init:
 539              	.LFB136:
 438:Src/main.c    **** 
 540              		.loc 1 438 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 8
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544 0000 30B5     		push	{r4, r5, lr}
 545              	.LCFI11:
 546              		.cfi_def_cfa_offset 12
 547              		.cfi_offset 4, -12
 548              		.cfi_offset 5, -8
 549              		.cfi_offset 14, -4
 550 0002 83B0     		sub	sp, sp, #12
 551              	.LCFI12:
 552              		.cfi_def_cfa_offset 24
 444:Src/main.c    **** 
 553              		.loc 1 444 0
 554 0004 0025     		movs	r5, #0
 555 0006 0095     		str	r5, [sp]
 556 0008 0195     		str	r5, [sp, #4]
 449:Src/main.c    ****   htim6.Init.Prescaler = 36;
 557              		.loc 1 449 0
 558 000a 0A4C     		ldr	r4, .L29
 559 000c 0A4B     		ldr	r3, .L29+4
 560 000e 2360     		str	r3, [r4]
 450:Src/main.c    ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 561              		.loc 1 450 0
 562 0010 2423     		movs	r3, #36
 563 0012 6360     		str	r3, [r4, #4]
 451:Src/main.c    ****   htim6.Init.Period = 1000;
 564              		.loc 1 451 0
 565 0014 A560     		str	r5, [r4, #8]
 452:Src/main.c    ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 566              		.loc 1 452 0
 567 0016 4FF47A73 		mov	r3, #1000
 568 001a E360     		str	r3, [r4, #12]
 453:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 569              		.loc 1 453 0
 570 001c A561     		str	r5, [r4, #24]
 454:Src/main.c    ****   {
 571              		.loc 1 454 0
 572 001e 2046     		mov	r0, r4
 573 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
ARM GAS  /tmp/ccbujePK.s 			page 23


 574              	.LVL26:
 458:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 575              		.loc 1 458 0
 576 0024 0095     		str	r5, [sp]
 459:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 577              		.loc 1 459 0
 578 0026 0195     		str	r5, [sp, #4]
 460:Src/main.c    ****   {
 579              		.loc 1 460 0
 580 0028 6946     		mov	r1, sp
 581 002a 2046     		mov	r0, r4
 582 002c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 583              	.LVL27:
 467:Src/main.c    **** 
 584              		.loc 1 467 0
 585 0030 03B0     		add	sp, sp, #12
 586              	.LCFI13:
 587              		.cfi_def_cfa_offset 12
 588              		@ sp needed
 589 0032 30BD     		pop	{r4, r5, pc}
 590              	.L30:
 591              		.align	2
 592              	.L29:
 593 0034 00000000 		.word	htim6
 594 0038 00100040 		.word	1073745920
 595              		.cfi_endproc
 596              	.LFE136:
 598              		.section	.text.MX_TIM7_Init,"ax",%progbits
 599              		.align	1
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 603              		.fpu fpv4-sp-d16
 605              	MX_TIM7_Init:
 606              	.LFB137:
 475:Src/main.c    **** 
 607              		.loc 1 475 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 8
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611 0000 30B5     		push	{r4, r5, lr}
 612              	.LCFI14:
 613              		.cfi_def_cfa_offset 12
 614              		.cfi_offset 4, -12
 615              		.cfi_offset 5, -8
 616              		.cfi_offset 14, -4
 617 0002 83B0     		sub	sp, sp, #12
 618              	.LCFI15:
 619              		.cfi_def_cfa_offset 24
 481:Src/main.c    **** 
 620              		.loc 1 481 0
 621 0004 0025     		movs	r5, #0
 622 0006 0095     		str	r5, [sp]
 623 0008 0195     		str	r5, [sp, #4]
 486:Src/main.c    ****   htim7.Init.Prescaler = 3600;
 624              		.loc 1 486 0
 625 000a 0B4C     		ldr	r4, .L33
ARM GAS  /tmp/ccbujePK.s 			page 24


 626 000c 0B4B     		ldr	r3, .L33+4
 627 000e 2360     		str	r3, [r4]
 487:Src/main.c    ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 628              		.loc 1 487 0
 629 0010 4FF46163 		mov	r3, #3600
 630 0014 6360     		str	r3, [r4, #4]
 488:Src/main.c    ****   htim7.Init.Period = 1999;
 631              		.loc 1 488 0
 632 0016 A560     		str	r5, [r4, #8]
 489:Src/main.c    ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 633              		.loc 1 489 0
 634 0018 40F2CF73 		movw	r3, #1999
 635 001c E360     		str	r3, [r4, #12]
 490:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 636              		.loc 1 490 0
 637 001e A561     		str	r5, [r4, #24]
 491:Src/main.c    ****   {
 638              		.loc 1 491 0
 639 0020 2046     		mov	r0, r4
 640 0022 FFF7FEFF 		bl	HAL_TIM_Base_Init
 641              	.LVL28:
 495:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 642              		.loc 1 495 0
 643 0026 0095     		str	r5, [sp]
 496:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 644              		.loc 1 496 0
 645 0028 0195     		str	r5, [sp, #4]
 497:Src/main.c    ****   {
 646              		.loc 1 497 0
 647 002a 6946     		mov	r1, sp
 648 002c 2046     		mov	r0, r4
 649 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 650              	.LVL29:
 504:Src/main.c    **** 
 651              		.loc 1 504 0
 652 0032 03B0     		add	sp, sp, #12
 653              	.LCFI16:
 654              		.cfi_def_cfa_offset 12
 655              		@ sp needed
 656 0034 30BD     		pop	{r4, r5, pc}
 657              	.L34:
 658 0036 00BF     		.align	2
 659              	.L33:
 660 0038 00000000 		.word	htim7
 661 003c 00140040 		.word	1073746944
 662              		.cfi_endproc
 663              	.LFE137:
 665              		.section	.text.MX_ADC1_Init,"ax",%progbits
 666              		.align	1
 667              		.syntax unified
 668              		.thumb
 669              		.thumb_func
 670              		.fpu fpv4-sp-d16
 672              	MX_ADC1_Init:
 673              	.LFB133:
 322:Src/main.c    **** 
 674              		.loc 1 322 0
ARM GAS  /tmp/ccbujePK.s 			page 25


 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 16
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678 0000 70B5     		push	{r4, r5, r6, lr}
 679              	.LCFI17:
 680              		.cfi_def_cfa_offset 16
 681              		.cfi_offset 4, -16
 682              		.cfi_offset 5, -12
 683              		.cfi_offset 6, -8
 684              		.cfi_offset 14, -4
 685 0002 84B0     		sub	sp, sp, #16
 686              	.LCFI18:
 687              		.cfi_def_cfa_offset 32
 328:Src/main.c    **** 
 688              		.loc 1 328 0
 689 0004 0025     		movs	r5, #0
 690 0006 0095     		str	r5, [sp]
 691 0008 0195     		str	r5, [sp, #4]
 692 000a 0295     		str	r5, [sp, #8]
 693 000c 0395     		str	r5, [sp, #12]
 335:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 694              		.loc 1 335 0
 695 000e 0F4C     		ldr	r4, .L37
 696 0010 0F4B     		ldr	r3, .L37+4
 697 0012 2360     		str	r3, [r4]
 336:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 698              		.loc 1 336 0
 699 0014 6560     		str	r5, [r4, #4]
 337:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 700              		.loc 1 337 0
 701 0016 A560     		str	r5, [r4, #8]
 338:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 702              		.loc 1 338 0
 703 0018 2561     		str	r5, [r4, #16]
 339:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 704              		.loc 1 339 0
 705 001a 2576     		strb	r5, [r4, #24]
 340:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 706              		.loc 1 340 0
 707 001c 84F82050 		strb	r5, [r4, #32]
 341:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 708              		.loc 1 341 0
 709 0020 E562     		str	r5, [r4, #44]
 342:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 710              		.loc 1 342 0
 711 0022 0C4B     		ldr	r3, .L37+8
 712 0024 A362     		str	r3, [r4, #40]
 343:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 713              		.loc 1 343 0
 714 0026 E560     		str	r5, [r4, #12]
 344:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 715              		.loc 1 344 0
 716 0028 0126     		movs	r6, #1
 717 002a E661     		str	r6, [r4, #28]
 345:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 718              		.loc 1 345 0
 719 002c 84F83050 		strb	r5, [r4, #48]
ARM GAS  /tmp/ccbujePK.s 			page 26


 346:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 720              		.loc 1 346 0
 721 0030 6661     		str	r6, [r4, #20]
 347:Src/main.c    ****   {
 722              		.loc 1 347 0
 723 0032 2046     		mov	r0, r4
 724 0034 FFF7FEFF 		bl	HAL_ADC_Init
 725              	.LVL30:
 353:Src/main.c    ****   sConfig.Rank = 1;
 726              		.loc 1 353 0
 727 0038 0095     		str	r5, [sp]
 354:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 728              		.loc 1 354 0
 729 003a 0196     		str	r6, [sp, #4]
 355:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 730              		.loc 1 355 0
 731 003c 0295     		str	r5, [sp, #8]
 356:Src/main.c    ****   {
 732              		.loc 1 356 0
 733 003e 6946     		mov	r1, sp
 734 0040 2046     		mov	r0, r4
 735 0042 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 736              	.LVL31:
 363:Src/main.c    **** 
 737              		.loc 1 363 0
 738 0046 04B0     		add	sp, sp, #16
 739              	.LCFI19:
 740              		.cfi_def_cfa_offset 16
 741              		@ sp needed
 742 0048 70BD     		pop	{r4, r5, r6, pc}
 743              	.L38:
 744 004a 00BF     		.align	2
 745              	.L37:
 746 004c 00000000 		.word	hadc1
 747 0050 00200140 		.word	1073815552
 748 0054 0100000F 		.word	251658241
 749              		.cfi_endproc
 750              	.LFE133:
 752              		.section	.text.SystemClock_Config,"ax",%progbits
 753              		.align	1
 754              		.global	SystemClock_Config
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	SystemClock_Config:
 761              	.LFB131:
 242:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 762              		.loc 1 242 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 176
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766 0000 30B5     		push	{r4, r5, lr}
 767              	.LCFI20:
 768              		.cfi_def_cfa_offset 12
 769              		.cfi_offset 4, -12
 770              		.cfi_offset 5, -8
ARM GAS  /tmp/ccbujePK.s 			page 27


 771              		.cfi_offset 14, -4
 772 0002 ADB0     		sub	sp, sp, #180
 773              	.LCFI21:
 774              		.cfi_def_cfa_offset 192
 243:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 775              		.loc 1 243 0
 776 0004 3422     		movs	r2, #52
 777 0006 0021     		movs	r1, #0
 778 0008 1FA8     		add	r0, sp, #124
 779 000a FFF7FEFF 		bl	memset
 780              	.LVL32:
 244:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 781              		.loc 1 244 0
 782 000e 0024     		movs	r4, #0
 783 0010 1A94     		str	r4, [sp, #104]
 784 0012 1B94     		str	r4, [sp, #108]
 785 0014 1C94     		str	r4, [sp, #112]
 786 0016 1D94     		str	r4, [sp, #116]
 787 0018 1E94     		str	r4, [sp, #120]
 245:Src/main.c    **** 
 788              		.loc 1 245 0
 789 001a 5C22     		movs	r2, #92
 790 001c 2146     		mov	r1, r4
 791 001e 03A8     		add	r0, sp, #12
 792 0020 FFF7FEFF 		bl	memset
 793              	.LVL33:
 794              	.LBB8:
 249:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 795              		.loc 1 249 0
 796 0024 0194     		str	r4, [sp, #4]
 797 0026 204B     		ldr	r3, .L41
 798 0028 1A6C     		ldr	r2, [r3, #64]
 799 002a 42F08052 		orr	r2, r2, #268435456
 800 002e 1A64     		str	r2, [r3, #64]
 801 0030 1B6C     		ldr	r3, [r3, #64]
 802 0032 03F08053 		and	r3, r3, #268435456
 803 0036 0193     		str	r3, [sp, #4]
 804 0038 019B     		ldr	r3, [sp, #4]
 805              	.LBE8:
 806              	.LBB9:
 250:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks
 807              		.loc 1 250 0
 808 003a 0294     		str	r4, [sp, #8]
 809 003c 1B4B     		ldr	r3, .L41+4
 810 003e 1A68     		ldr	r2, [r3]
 811 0040 42F44042 		orr	r2, r2, #49152
 812 0044 1A60     		str	r2, [r3]
 813 0046 1B68     		ldr	r3, [r3]
 814 0048 03F44043 		and	r3, r3, #49152
 815 004c 0293     		str	r3, [sp, #8]
 816 004e 029B     		ldr	r3, [sp, #8]
 817              	.LBE9:
 253:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 818              		.loc 1 253 0
 819 0050 0123     		movs	r3, #1
 820 0052 1F93     		str	r3, [sp, #124]
 254:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccbujePK.s 			page 28


 821              		.loc 1 254 0
 822 0054 4FF4A023 		mov	r3, #327680
 823 0058 2093     		str	r3, [sp, #128]
 255:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 824              		.loc 1 255 0
 825 005a 0225     		movs	r5, #2
 826 005c 2595     		str	r5, [sp, #148]
 256:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 827              		.loc 1 256 0
 828 005e 4FF48003 		mov	r3, #4194304
 829 0062 2693     		str	r3, [sp, #152]
 257:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 288;
 830              		.loc 1 257 0
 831 0064 0823     		movs	r3, #8
 832 0066 2793     		str	r3, [sp, #156]
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 833              		.loc 1 258 0
 834 0068 4FF49072 		mov	r2, #288
 835 006c 2892     		str	r2, [sp, #160]
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 8;
 836              		.loc 1 259 0
 837 006e 2995     		str	r5, [sp, #164]
 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 838              		.loc 1 260 0
 839 0070 2A93     		str	r3, [sp, #168]
 261:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 840              		.loc 1 261 0
 841 0072 2B95     		str	r5, [sp, #172]
 262:Src/main.c    ****   {
 842              		.loc 1 262 0
 843 0074 1FA8     		add	r0, sp, #124
 844 0076 FFF7FEFF 		bl	HAL_RCC_OscConfig
 845              	.LVL34:
 268:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 846              		.loc 1 268 0
 847 007a 0F23     		movs	r3, #15
 848 007c 1A93     		str	r3, [sp, #104]
 269:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 849              		.loc 1 269 0
 850 007e 1B95     		str	r5, [sp, #108]
 270:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 851              		.loc 1 270 0
 852 0080 1C94     		str	r4, [sp, #112]
 271:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 853              		.loc 1 271 0
 854 0082 4FF4A053 		mov	r3, #5120
 855 0086 1D93     		str	r3, [sp, #116]
 272:Src/main.c    **** 
 856              		.loc 1 272 0
 857 0088 1E93     		str	r3, [sp, #120]
 274:Src/main.c    ****   {
 858              		.loc 1 274 0
 859 008a 0421     		movs	r1, #4
 860 008c 1AA8     		add	r0, sp, #104
 861 008e FFF7FEFF 		bl	HAL_RCC_ClockConfig
 862              	.LVL35:
 278:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
ARM GAS  /tmp/ccbujePK.s 			page 29


 863              		.loc 1 278 0
 864 0092 4FF44073 		mov	r3, #768
 865 0096 0393     		str	r3, [sp, #12]
 279:Src/main.c    ****   PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 866              		.loc 1 279 0
 867 0098 1894     		str	r4, [sp, #96]
 280:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 868              		.loc 1 280 0
 869 009a 1494     		str	r4, [sp, #80]
 281:Src/main.c    ****   {
 870              		.loc 1 281 0
 871 009c 03A8     		add	r0, sp, #12
 872 009e FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 873              	.LVL36:
 285:Src/main.c    **** 
 874              		.loc 1 285 0
 875 00a2 2DB0     		add	sp, sp, #180
 876              	.LCFI22:
 877              		.cfi_def_cfa_offset 12
 878              		@ sp needed
 879 00a4 30BD     		pop	{r4, r5, pc}
 880              	.L42:
 881 00a6 00BF     		.align	2
 882              	.L41:
 883 00a8 00380240 		.word	1073887232
 884 00ac 00700040 		.word	1073770496
 885              		.cfi_endproc
 886              	.LFE131:
 888              		.section	.text.main,"ax",%progbits
 889              		.align	1
 890              		.global	main
 891              		.syntax unified
 892              		.thumb
 893              		.thumb_func
 894              		.fpu fpv4-sp-d16
 896              	main:
 897              	.LFB130:
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 898              		.loc 1 116 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 40
 901              		@ frame_needed = 0, uses_anonymous_args = 0
 902 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 903              	.LCFI23:
 904              		.cfi_def_cfa_offset 24
 905              		.cfi_offset 4, -24
 906              		.cfi_offset 5, -20
 907              		.cfi_offset 6, -16
 908              		.cfi_offset 7, -12
 909              		.cfi_offset 8, -8
 910              		.cfi_offset 14, -4
 911 0004 8AB0     		sub	sp, sp, #40
 912              	.LCFI24:
 913              		.cfi_def_cfa_offset 64
 124:Src/main.c    **** 
 914              		.loc 1 124 0
 915 0006 FFF7FEFF 		bl	HAL_Init
ARM GAS  /tmp/ccbujePK.s 			page 30


 916              	.LVL37:
 131:Src/main.c    **** 
 917              		.loc 1 131 0
 918 000a FFF7FEFF 		bl	SystemClock_Config
 919              	.LVL38:
 138:Src/main.c    ****   MX_DMA_Init();
 920              		.loc 1 138 0
 921 000e FFF7FEFF 		bl	MX_GPIO_Init
 922              	.LVL39:
 139:Src/main.c    ****   MX_USART3_UART_Init();
 923              		.loc 1 139 0
 924 0012 FFF7FEFF 		bl	MX_DMA_Init
 925              	.LVL40:
 140:Src/main.c    ****   MX_SDIO_SD_Init();
 926              		.loc 1 140 0
 927 0016 FFF7FEFF 		bl	MX_USART3_UART_Init
 928              	.LVL41:
 141:Src/main.c    ****   MX_USART2_UART_Init();
 929              		.loc 1 141 0
 930 001a FFF7FEFF 		bl	MX_SDIO_SD_Init
 931              	.LVL42:
 142:Src/main.c    ****   MX_CAN1_Init();
 932              		.loc 1 142 0
 933 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 934              	.LVL43:
 143:Src/main.c    ****   MX_TIM6_Init();
 935              		.loc 1 143 0
 936 0022 FFF7FEFF 		bl	MX_CAN1_Init
 937              	.LVL44:
 144:Src/main.c    ****   MX_TIM7_Init();
 938              		.loc 1 144 0
 939 0026 FFF7FEFF 		bl	MX_TIM6_Init
 940              	.LVL45:
 145:Src/main.c    ****   MX_ADC1_Init();
 941              		.loc 1 145 0
 942 002a FFF7FEFF 		bl	MX_TIM7_Init
 943              	.LVL46:
 146:Src/main.c    **** 
 944              		.loc 1 146 0
 945 002e FFF7FEFF 		bl	MX_ADC1_Init
 946              	.LVL47:
 149:Src/main.c    ****   /* USER CODE BEGIN 2 */
 947              		.loc 1 149 0
 948 0032 FFF7FEFF 		bl	MX_NVIC_Init
 949              	.LVL48:
 151:Src/main.c    ****   sFilter.FilterIdLow = 0;
 950              		.loc 1 151 0
 951 0036 9C49     		ldr	r1, .L48
 952 0038 0023     		movs	r3, #0
 953 003a 8B61     		str	r3, [r1, #24]
 152:Src/main.c    ****   sFilter.FilterIdHigh = 0;
 954              		.loc 1 152 0
 955 003c 4B60     		str	r3, [r1, #4]
 153:Src/main.c    ****   sFilter.FilterMaskIdHigh = 0;
 956              		.loc 1 153 0
 957 003e 0B60     		str	r3, [r1]
 154:Src/main.c    ****   sFilter.FilterMaskIdLow = 0;
ARM GAS  /tmp/ccbujePK.s 			page 31


 958              		.loc 1 154 0
 959 0040 8B60     		str	r3, [r1, #8]
 155:Src/main.c    ****   sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 960              		.loc 1 155 0
 961 0042 CB60     		str	r3, [r1, #12]
 156:Src/main.c    ****   sFilter.FilterBank = 0;
 962              		.loc 1 156 0
 963 0044 0B61     		str	r3, [r1, #16]
 157:Src/main.c    ****   sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 964              		.loc 1 157 0
 965 0046 4B61     		str	r3, [r1, #20]
 158:Src/main.c    ****   sFilter.FilterActivation = ENABLE;
 966              		.loc 1 158 0
 967 0048 CB61     		str	r3, [r1, #28]
 159:Src/main.c    ****   HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 968              		.loc 1 159 0
 969 004a 0126     		movs	r6, #1
 970 004c 0E62     		str	r6, [r1, #32]
 160:Src/main.c    **** 
 971              		.loc 1 160 0
 972 004e 974C     		ldr	r4, .L48+4
 973 0050 2046     		mov	r0, r4
 974 0052 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 975              	.LVL49:
 162:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start_1\r\n", 9, 5);
 976              		.loc 1 162 0
 977 0056 964D     		ldr	r5, .L48+8
 978 0058 0523     		movs	r3, #5
 979 005a 1122     		movs	r2, #17
 980 005c 9549     		ldr	r1, .L48+12
 981 005e 2846     		mov	r0, r5
 982 0060 FFF7FEFF 		bl	HAL_UART_Transmit
 983              	.LVL50:
 163:Src/main.c    **** 
 984              		.loc 1 163 0
 985 0064 944F     		ldr	r7, .L48+16
 986 0066 0523     		movs	r3, #5
 987 0068 0922     		movs	r2, #9
 988 006a 9449     		ldr	r1, .L48+20
 989 006c 3846     		mov	r0, r7
 990 006e FFF7FEFF 		bl	HAL_UART_Transmit
 991              	.LVL51:
 165:Src/main.c    ****   HAL_Delay(500);
 992              		.loc 1 165 0
 993 0072 DFF86C82 		ldr	r8, .L48+56
 994 0076 3146     		mov	r1, r6
 995 0078 4046     		mov	r0, r8
 996 007a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 997              	.LVL52:
 166:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 998              		.loc 1 166 0
 999 007e 4FF4FA70 		mov	r0, #500
 1000 0082 FFF7FEFF 		bl	HAL_Delay
 1001              	.LVL53:
 167:Src/main.c    ****   HAL_Delay(500);
 1002              		.loc 1 167 0
 1003 0086 3146     		mov	r1, r6
ARM GAS  /tmp/ccbujePK.s 			page 32


 1004 0088 4046     		mov	r0, r8
 1005 008a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1006              	.LVL54:
 168:Src/main.c    **** 
 1007              		.loc 1 168 0
 1008 008e 4FF4FA70 		mov	r0, #500
 1009 0092 FFF7FEFF 		bl	HAL_Delay
 1010              	.LVL55:
 170:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 1011              		.loc 1 170 0
 1012 0096 2046     		mov	r0, r4
 1013 0098 FFF7FEFF 		bl	HAL_CAN_Start
 1014              	.LVL56:
 171:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 1015              		.loc 1 171 0
 1016 009c 1421     		movs	r1, #20
 1017 009e 2046     		mov	r0, r4
 1018 00a0 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1019              	.LVL57:
 172:Src/main.c    **** 
 1020              		.loc 1 172 0
 1021 00a4 1521     		movs	r1, #21
 1022 00a6 2046     		mov	r0, r4
 1023 00a8 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1024              	.LVL58:
 174:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start\r\n", 7, 5);
 1025              		.loc 1 174 0
 1026 00ac 0523     		movs	r3, #5
 1027 00ae 0F22     		movs	r2, #15
 1028 00b0 8349     		ldr	r1, .L48+24
 1029 00b2 2846     		mov	r0, r5
 1030 00b4 FFF7FEFF 		bl	HAL_UART_Transmit
 1031              	.LVL59:
 175:Src/main.c    **** 
 1032              		.loc 1 175 0
 1033 00b8 0523     		movs	r3, #5
 1034 00ba 0722     		movs	r2, #7
 1035 00bc 8149     		ldr	r1, .L48+28
 1036 00be 3846     		mov	r0, r7
 1037 00c0 FFF7FEFF 		bl	HAL_UART_Transmit
 1038              	.LVL60:
 177:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim6);
 1039              		.loc 1 177 0
 1040 00c4 804C     		ldr	r4, .L48+32
 1041 00c6 2046     		mov	r0, r4
 1042 00c8 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1043              	.LVL61:
 178:Src/main.c    **** 
 1044              		.loc 1 178 0
 1045 00cc 2046     		mov	r0, r4
 1046 00ce FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1047              	.LVL62:
 180:Src/main.c    ****   //HAL_UART_Receive_IT(&huart3, huart_rx, 35);
 1048              		.loc 1 180 0
 1049 00d2 2322     		movs	r2, #35
 1050 00d4 7D49     		ldr	r1, .L48+36
 1051 00d6 2846     		mov	r0, r5
ARM GAS  /tmp/ccbujePK.s 			page 33


 1052 00d8 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1053              	.LVL63:
 1054              	.L44:
 194:Src/main.c    ****     HAL_Delay(1);
 1055              		.loc 1 194 0
 1056 00dc 7C4A     		ldr	r2, .L48+40
 1057 00de 1368     		ldr	r3, [r2]
 1058 00e0 0133     		adds	r3, r3, #1
 1059 00e2 1360     		str	r3, [r2]
 195:Src/main.c    ****     //print(&huart2,"ciao\r\n");
 1060              		.loc 1 195 0
 1061 00e4 0120     		movs	r0, #1
 1062 00e6 FFF7FEFF 		bl	HAL_Delay
 1063              	.LVL64:
 200:Src/main.c    ****     {
 1064              		.loc 1 200 0
 1065 00ea 7A4B     		ldr	r3, .L48+44
 1066 00ec 1B68     		ldr	r3, [r3]
 1067 00ee 012B     		cmp	r3, #1
 1068 00f0 F4D1     		bne	.L44
 1069              	.LBB10:
 203:Src/main.c    ****       HAL_UART_Transmit(&huart3, (uint8_t *)msg_can_to_send, strlen(msg_can_to_send), 5);
 1070              		.loc 1 203 0
 1071 00f2 0025     		movs	r5, #0
 1072 00f4 774B     		ldr	r3, .L48+44
 1073 00f6 1D60     		str	r5, [r3]
 204:Src/main.c    ****       HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, 5);
 1074              		.loc 1 204 0
 1075 00f8 774C     		ldr	r4, .L48+48
 1076 00fa 2046     		mov	r0, r4
 1077 00fc FFF7FEFF 		bl	strlen
 1078              	.LVL65:
 1079 0100 6D4E     		ldr	r6, .L48+16
 1080 0102 0523     		movs	r3, #5
 1081 0104 82B2     		uxth	r2, r0
 1082 0106 2146     		mov	r1, r4
 1083 0108 3046     		mov	r0, r6
 1084 010a FFF7FEFF 		bl	HAL_UART_Transmit
 1085              	.LVL66:
 205:Src/main.c    **** 
 1086              		.loc 1 205 0
 1087 010e 0523     		movs	r3, #5
 1088 0110 0222     		movs	r2, #2
 1089 0112 7249     		ldr	r1, .L48+52
 1090 0114 3046     		mov	r0, r6
 1091 0116 FFF7FEFF 		bl	HAL_UART_Transmit
 1092              	.LVL67:
 209:Src/main.c    ****       int zero = (int)('0');
 1093              		.loc 1 209 0
 1094 011a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1095 011c 8DF80430 		strb	r3, [sp, #4]
 1096 0120 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1097 0122 8DF80530 		strb	r3, [sp, #5]
 1098 0126 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1099 0128 8DF80630 		strb	r3, [sp, #6]
 1100 012c 8DF80750 		strb	r5, [sp, #7]
 1101              	.LVL68:
ARM GAS  /tmp/ccbujePK.s 			page 34


 211:Src/main.c    ****       messaggio_can[1] = ((int)(msg_can_to_send[8]) - zero) * 100 + ((int)(msg_can_to_send[9]) - ze
 1102              		.loc 1 211 0
 1103 0130 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1104 0132 303B     		subs	r3, r3, #48
 1105 0134 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 1106 0136 303A     		subs	r2, r2, #48
 1107 0138 03EB8303 		add	r3, r3, r3, lsl #2
 1108 013c 03EB8303 		add	r3, r3, r3, lsl #2
 1109 0140 9900     		lsls	r1, r3, #2
 1110 0142 02EB8203 		add	r3, r2, r2, lsl #2
 1111 0146 5A00     		lsls	r2, r3, #1
 1112 0148 1144     		add	r1, r1, r2
 1113 014a C9B2     		uxtb	r1, r1
 1114 014c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1115 014e 303B     		subs	r3, r3, #48
 1116 0150 51FA83F1 		uxtab	r1, r1, r3
 1117 0154 8DF80810 		strb	r1, [sp, #8]
 212:Src/main.c    ****       messaggio_can[2] = ((int)(msg_can_to_send[12]) - zero) * 100 + ((int)(msg_can_to_send[13]) - 
 1118              		.loc 1 212 0
 1119 0158 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1120 015a 303B     		subs	r3, r3, #48
 1121 015c 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 1122 015e 303A     		subs	r2, r2, #48
 1123 0160 03EB8303 		add	r3, r3, r3, lsl #2
 1124 0164 03EB8303 		add	r3, r3, r3, lsl #2
 1125 0168 9900     		lsls	r1, r3, #2
 1126 016a 02EB8203 		add	r3, r2, r2, lsl #2
 1127 016e 5A00     		lsls	r2, r3, #1
 1128 0170 1144     		add	r1, r1, r2
 1129 0172 C9B2     		uxtb	r1, r1
 1130 0174 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 1131 0176 303B     		subs	r3, r3, #48
 1132 0178 51FA83F1 		uxtab	r1, r1, r3
 1133 017c 8DF80910 		strb	r1, [sp, #9]
 213:Src/main.c    ****       messaggio_can[3] = ((int)(msg_can_to_send[16]) - zero) * 100 + ((int)(msg_can_to_send[17]) - 
 1134              		.loc 1 213 0
 1135 0180 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 1136 0182 303B     		subs	r3, r3, #48
 1137 0184 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 1138 0186 303A     		subs	r2, r2, #48
 1139 0188 03EB8303 		add	r3, r3, r3, lsl #2
 1140 018c 03EB8303 		add	r3, r3, r3, lsl #2
 1141 0190 9900     		lsls	r1, r3, #2
 1142 0192 02EB8203 		add	r3, r2, r2, lsl #2
 1143 0196 5A00     		lsls	r2, r3, #1
 1144 0198 1144     		add	r1, r1, r2
 1145 019a C9B2     		uxtb	r1, r1
 1146 019c A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 1147 019e 303B     		subs	r3, r3, #48
 1148 01a0 51FA83F1 		uxtab	r1, r1, r3
 1149 01a4 8DF80A10 		strb	r1, [sp, #10]
 214:Src/main.c    ****       messaggio_can[4] = ((int)(msg_can_to_send[20]) - zero) * 100 + ((int)(msg_can_to_send[21]) - 
 1150              		.loc 1 214 0
 1151 01a8 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1152 01aa 303B     		subs	r3, r3, #48
 1153 01ac 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 1154 01ae 303A     		subs	r2, r2, #48
ARM GAS  /tmp/ccbujePK.s 			page 35


 1155 01b0 03EB8303 		add	r3, r3, r3, lsl #2
 1156 01b4 03EB8303 		add	r3, r3, r3, lsl #2
 1157 01b8 9900     		lsls	r1, r3, #2
 1158 01ba 02EB8203 		add	r3, r2, r2, lsl #2
 1159 01be 5A00     		lsls	r2, r3, #1
 1160 01c0 1144     		add	r1, r1, r2
 1161 01c2 C9B2     		uxtb	r1, r1
 1162 01c4 A37C     		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 1163 01c6 303B     		subs	r3, r3, #48
 1164 01c8 51FA83F1 		uxtab	r1, r1, r3
 1165 01cc 8DF80B10 		strb	r1, [sp, #11]
 215:Src/main.c    ****       messaggio_can[5] = ((int)(msg_can_to_send[24]) - zero) * 100 + ((int)(msg_can_to_send[25]) - 
 1166              		.loc 1 215 0
 1167 01d0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 1168 01d2 303B     		subs	r3, r3, #48
 1169 01d4 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 1170 01d6 303A     		subs	r2, r2, #48
 1171 01d8 03EB8303 		add	r3, r3, r3, lsl #2
 1172 01dc 03EB8303 		add	r3, r3, r3, lsl #2
 1173 01e0 9900     		lsls	r1, r3, #2
 1174 01e2 02EB8203 		add	r3, r2, r2, lsl #2
 1175 01e6 5A00     		lsls	r2, r3, #1
 1176 01e8 1144     		add	r1, r1, r2
 1177 01ea C9B2     		uxtb	r1, r1
 1178 01ec A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 1179 01ee 303B     		subs	r3, r3, #48
 1180 01f0 51FA83F1 		uxtab	r1, r1, r3
 1181 01f4 8DF80C10 		strb	r1, [sp, #12]
 216:Src/main.c    ****       messaggio_can[6] = ((int)(msg_can_to_send[26]) - zero) * 100 + ((int)(msg_can_to_send[29]) - 
 1182              		.loc 1 216 0
 1183 01f8 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 1184 01fa 303B     		subs	r3, r3, #48
 1185 01fc 617E     		ldrb	r1, [r4, #25]	@ zero_extendqisi2
 1186 01fe 3039     		subs	r1, r1, #48
 1187 0200 03EB8303 		add	r3, r3, r3, lsl #2
 1188 0204 03EB8303 		add	r3, r3, r3, lsl #2
 1189 0208 9A00     		lsls	r2, r3, #2
 1190 020a 01EB8103 		add	r3, r1, r1, lsl #2
 1191 020e 5900     		lsls	r1, r3, #1
 1192 0210 0A44     		add	r2, r2, r1
 1193 0212 D2B2     		uxtb	r2, r2
 1194 0214 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 1195 0216 303B     		subs	r3, r3, #48
 1196 0218 52FA83F2 		uxtab	r2, r2, r3
 1197 021c 8DF80D20 		strb	r2, [sp, #13]
 217:Src/main.c    ****       messaggio_can[7] = ((int)(msg_can_to_send[30]) - zero) * 100 + ((int)(msg_can_to_send[31]) - 
 1198              		.loc 1 217 0
 1199 0220 617F     		ldrb	r1, [r4, #29]	@ zero_extendqisi2
 1200 0222 3039     		subs	r1, r1, #48
 1201 0224 03EB8303 		add	r3, r3, r3, lsl #2
 1202 0228 03EB8303 		add	r3, r3, r3, lsl #2
 1203 022c 9A00     		lsls	r2, r3, #2
 1204 022e 01EB8103 		add	r3, r1, r1, lsl #2
 1205 0232 5900     		lsls	r1, r3, #1
 1206 0234 0A44     		add	r2, r2, r1
 1207 0236 D2B2     		uxtb	r2, r2
 1208 0238 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
ARM GAS  /tmp/ccbujePK.s 			page 36


 1209 023a 303B     		subs	r3, r3, #48
 1210 023c 52FA83F2 		uxtab	r2, r2, r3
 1211 0240 8DF80E20 		strb	r2, [sp, #14]
 218:Src/main.c    **** 
 1212              		.loc 1 218 0
 1213 0244 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 1214 0246 303A     		subs	r2, r2, #48
 1215 0248 03EB8303 		add	r3, r3, r3, lsl #2
 1216 024c 03EB8303 		add	r3, r3, r3, lsl #2
 1217 0250 9900     		lsls	r1, r3, #2
 1218 0252 02EB8203 		add	r3, r2, r2, lsl #2
 1219 0256 5A00     		lsls	r2, r3, #1
 1220 0258 1144     		add	r1, r1, r2
 1221 025a C9B2     		uxtb	r1, r1
 1222 025c 94F82230 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 1223 0260 303B     		subs	r3, r3, #48
 1224 0262 51FA83F1 		uxtab	r1, r1, r3
 1225 0266 8DF80F10 		strb	r1, [sp, #15]
 221:Src/main.c    ****       TxHeader.IDE = CAN_ID_STD;
 1226              		.loc 1 221 0
 1227 026a 01A8     		add	r0, sp, #4
 1228 026c FFF7FEFF 		bl	atoi
 1229              	.LVL69:
 1230 0270 0490     		str	r0, [sp, #16]
 222:Src/main.c    ****       TxHeader.RTR = CAN_RTR_DATA;
 1231              		.loc 1 222 0
 1232 0272 0695     		str	r5, [sp, #24]
 223:Src/main.c    ****       TxHeader.DLC = 8;
 1233              		.loc 1 223 0
 1234 0274 0795     		str	r5, [sp, #28]
 224:Src/main.c    ****       TxHeader.TransmitGlobalTime = DISABLE;
 1235              		.loc 1 224 0
 1236 0276 0823     		movs	r3, #8
 1237 0278 0893     		str	r3, [sp, #32]
 225:Src/main.c    **** 
 1238              		.loc 1 225 0
 1239 027a 8DF82450 		strb	r5, [sp, #36]
 227:Src/main.c    ****       {
 1240              		.loc 1 227 0
 1241 027e 0B48     		ldr	r0, .L48+4
 1242 0280 FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1243              	.LVL70:
 1244 0284 0028     		cmp	r0, #0
 1245 0286 3FF429AF 		beq	.L44
 227:Src/main.c    ****       {
 1246              		.loc 1 227 0 is_stmt 0 discriminator 1
 1247 028a 0121     		movs	r1, #1
 1248 028c 0748     		ldr	r0, .L48+4
 1249 028e FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 1250              	.LVL71:
 1251 0292 0028     		cmp	r0, #0
 1252 0294 7FF422AF 		bne	.L44
 229:Src/main.c    ****       }
 1253              		.loc 1 229 0 is_stmt 1
 1254 0298 6B46     		mov	r3, sp
 1255 029a 02AA     		add	r2, sp, #8
 1256 029c 04A9     		add	r1, sp, #16
ARM GAS  /tmp/ccbujePK.s 			page 37


 1257 029e 0348     		ldr	r0, .L48+4
 1258 02a0 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1259              	.LVL72:
 1260 02a4 1AE7     		b	.L44
 1261              	.L49:
 1262 02a6 00BF     		.align	2
 1263              	.L48:
 1264 02a8 00000000 		.word	sFilter
 1265 02ac 00000000 		.word	hcan1
 1266 02b0 00000000 		.word	huart2
 1267 02b4 00000000 		.word	.LC0
 1268 02b8 00000000 		.word	huart3
 1269 02bc 14000000 		.word	.LC1
 1270 02c0 20000000 		.word	.LC2
 1271 02c4 30000000 		.word	.LC3
 1272 02c8 00000000 		.word	htim6
 1273 02cc 00000000 		.word	huart_rx
 1274 02d0 00000000 		.word	.LANCHOR0
 1275 02d4 00000000 		.word	.LANCHOR1
 1276 02d8 00000000 		.word	msg_can_to_send
 1277 02dc 38000000 		.word	.LC4
 1278 02e0 00040240 		.word	1073873920
 1279              	.LBE10:
 1280              		.cfi_endproc
 1281              	.LFE130:
 1283              		.section	.text.CAN_Send,"ax",%progbits
 1284              		.align	1
 1285              		.global	CAN_Send
 1286              		.syntax unified
 1287              		.thumb
 1288              		.thumb_func
 1289              		.fpu fpv4-sp-d16
 1291              	CAN_Send:
 1292              	.LFB142:
 624:Src/main.c    **** 
 625:Src/main.c    **** /* USER CODE BEGIN 4 */
 626:Src/main.c    **** 
 627:Src/main.c    **** int CAN_Send(char *msg_can)
 628:Src/main.c    **** {
 1293              		.loc 1 628 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 8
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 1297              	.LVL73:
 1298 0000 00B5     		push	{lr}
 1299              	.LCFI25:
 1300              		.cfi_def_cfa_offset 4
 1301              		.cfi_offset 14, -4
 1302 0002 83B0     		sub	sp, sp, #12
 1303              	.LCFI26:
 1304              		.cfi_def_cfa_offset 16
 1305              	.LVL74:
 629:Src/main.c    **** 
 630:Src/main.c    ****   uint32_t mailbox;
 631:Src/main.c    ****   uint8_t flag = 0;
 632:Src/main.c    **** 
 633:Src/main.c    ****   char msg_id[3];
ARM GAS  /tmp/ccbujePK.s 			page 38


 634:Src/main.c    ****   msg_id[0] = msg_can[0];
 1306              		.loc 1 634 0
 1307 0004 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1308 0006 8DF80430 		strb	r3, [sp, #4]
 635:Src/main.c    ****   msg_id[1] = msg_can[1];
 1309              		.loc 1 635 0
 1310 000a 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 1311 000c 8DF80530 		strb	r3, [sp, #5]
 636:Src/main.c    ****   msg_id[2] = '\0';
 1312              		.loc 1 636 0
 1313 0010 0023     		movs	r3, #0
 1314 0012 8DF80630 		strb	r3, [sp, #6]
 637:Src/main.c    **** 
 638:Src/main.c    ****   CAN_TxHeaderTypeDef TxHeader;
 639:Src/main.c    ****   TxHeader.StdId = (uint32_t)atoi(msg_id);
 1315              		.loc 1 639 0
 1316 0016 01A8     		add	r0, sp, #4
 1317              	.LVL75:
 1318 0018 FFF7FEFF 		bl	atoi
 1319              	.LVL76:
 640:Src/main.c    ****   TxHeader.IDE = CAN_ID_STD;
 641:Src/main.c    ****   TxHeader.RTR = CAN_RTR_DATA;
 642:Src/main.c    ****   TxHeader.DLC = 8;
 643:Src/main.c    ****   TxHeader.TransmitGlobalTime = DISABLE;
 644:Src/main.c    **** 
 645:Src/main.c    ****   return 1;
 646:Src/main.c    **** }
 1320              		.loc 1 646 0
 1321 001c 0120     		movs	r0, #1
 1322 001e 03B0     		add	sp, sp, #12
 1323              	.LCFI27:
 1324              		.cfi_def_cfa_offset 4
 1325              		@ sp needed
 1326 0020 5DF804FB 		ldr	pc, [sp], #4
 1327              		.cfi_endproc
 1328              	.LFE142:
 1330              		.section	.text.CAN_Receive,"ax",%progbits
 1331              		.align	1
 1332              		.global	CAN_Receive
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu fpv4-sp-d16
 1338              	CAN_Receive:
 1339              	.LFB143:
 647:Src/main.c    **** 
 648:Src/main.c    **** int CAN_Receive(uint8_t *DataRx, int size)
 649:Src/main.c    **** {
 1340              		.loc 1 649 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 0
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344              	.LVL77:
 1345 0000 10B5     		push	{r4, lr}
 1346              	.LCFI28:
 1347              		.cfi_def_cfa_offset 8
 1348              		.cfi_offset 4, -8
ARM GAS  /tmp/ccbujePK.s 			page 39


 1349              		.cfi_offset 14, -4
 1350 0002 0446     		mov	r4, r0
 650:Src/main.c    **** 
 651:Src/main.c    ****   if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0)
 1351              		.loc 1 651 0
 1352 0004 0021     		movs	r1, #0
 1353              	.LVL78:
 1354 0006 0748     		ldr	r0, .L56
 1355              	.LVL79:
 1356 0008 FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 1357              	.LVL80:
 1358 000c 10B9     		cbnz	r0, .L55
 1359              	.L53:
 1360              	.LVL81:
 652:Src/main.c    ****   {
 653:Src/main.c    ****     HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, DataRx);
 654:Src/main.c    ****   }
 655:Src/main.c    **** 
 656:Src/main.c    ****   int id = RxHeader.StdId;
 657:Src/main.c    **** 
 658:Src/main.c    ****   return id;
 659:Src/main.c    **** }
 1361              		.loc 1 659 0
 1362 000e 064B     		ldr	r3, .L56+4
 1363 0010 1868     		ldr	r0, [r3]
 1364 0012 10BD     		pop	{r4, pc}
 1365              	.LVL82:
 1366              	.L55:
 653:Src/main.c    ****   }
 1367              		.loc 1 653 0
 1368 0014 2346     		mov	r3, r4
 1369 0016 044A     		ldr	r2, .L56+4
 1370 0018 0021     		movs	r1, #0
 1371 001a 0248     		ldr	r0, .L56
 1372 001c FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1373              	.LVL83:
 1374 0020 F5E7     		b	.L53
 1375              	.L57:
 1376 0022 00BF     		.align	2
 1377              	.L56:
 1378 0024 00000000 		.word	hcan1
 1379 0028 00000000 		.word	RxHeader
 1380              		.cfi_endproc
 1381              	.LFE143:
 1383              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1384              		.align	1
 1385              		.global	HAL_CAN_RxFifo0FullCallback
 1386              		.syntax unified
 1387              		.thumb
 1388              		.thumb_func
 1389              		.fpu fpv4-sp-d16
 1391              	HAL_CAN_RxFifo0FullCallback:
 1392              	.LFB144:
 660:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 661:Src/main.c    **** {
 1393              		.loc 1 661 0
 1394              		.cfi_startproc
ARM GAS  /tmp/ccbujePK.s 			page 40


 1395              		@ args = 0, pretend = 0, frame = 8
 1396              		@ frame_needed = 0, uses_anonymous_args = 0
 1397              	.LVL84:
 1398 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1399              	.LCFI29:
 1400              		.cfi_def_cfa_offset 36
 1401              		.cfi_offset 4, -36
 1402              		.cfi_offset 5, -32
 1403              		.cfi_offset 6, -28
 1404              		.cfi_offset 7, -24
 1405              		.cfi_offset 8, -20
 1406              		.cfi_offset 9, -16
 1407              		.cfi_offset 10, -12
 1408              		.cfi_offset 11, -8
 1409              		.cfi_offset 14, -4
 1410 0004 8BB0     		sub	sp, sp, #44
 1411              	.LCFI30:
 1412              		.cfi_def_cfa_offset 80
 662:Src/main.c    ****   uint8_t RxData[8];
 663:Src/main.c    ****   int id;
 664:Src/main.c    ****   id = CAN_Receive(RxData, 8);
 1413              		.loc 1 664 0
 1414 0006 0821     		movs	r1, #8
 1415 0008 08A8     		add	r0, sp, #32
 1416              	.LVL85:
 1417 000a FFF7FEFF 		bl	CAN_Receive
 1418              	.LVL86:
 665:Src/main.c    ****   cont_rx++;
 1419              		.loc 1 665 0
 1420 000e 2D4A     		ldr	r2, .L60
 1421 0010 1368     		ldr	r3, [r2]
 1422 0012 0133     		adds	r3, r3, #1
 1423 0014 1360     		str	r3, [r2]
 666:Src/main.c    ****   //int time = secondsElapsed * 1000 + __HAL_TIM_GET_COUNTER(&htim6) / 20; //20 ticks for each mill
 667:Src/main.c    ****   //printable_time=time*1000+ __HAL_TIM_GET_COUNTER(&htim6);
 668:Src/main.c    ****   delta = 0;
 1424              		.loc 1 668 0
 1425 0016 0027     		movs	r7, #0
 1426 0018 2B4B     		ldr	r3, .L60+4
 1427 001a 1F60     		str	r7, [r3]
 669:Src/main.c    ****   mount_ok = 1;
 1428              		.loc 1 669 0
 1429 001c 2B4B     		ldr	r3, .L60+8
 1430 001e 0122     		movs	r2, #1
 1431 0020 1A60     		str	r2, [r3]
 1432              	.LBB11:
 670:Src/main.c    ****   if (mount_ok == 1)
 671:Src/main.c    ****   {
 672:Src/main.c    ****     msg_index++;
 1433              		.loc 1 672 0
 1434 0022 2B4D     		ldr	r5, .L60+12
 1435 0024 2E68     		ldr	r6, [r5]
 1436 0026 1644     		add	r6, r6, r2
 1437 0028 2E60     		str	r6, [r5]
 673:Src/main.c    ****     printable_time = time * 1000 + __HAL_TIM_GET_COUNTER(&htim6);
 1438              		.loc 1 673 0
 1439 002a 2A4B     		ldr	r3, .L60+16
ARM GAS  /tmp/ccbujePK.s 			page 41


 1440 002c 1B68     		ldr	r3, [r3]
 1441 002e 2A4A     		ldr	r2, .L60+20
 1442 0030 1268     		ldr	r2, [r2]
 1443 0032 526A     		ldr	r2, [r2, #36]
 1444 0034 4FF47A71 		mov	r1, #1000
 1445 0038 01FB0322 		mla	r2, r1, r3, r2
 1446 003c 274B     		ldr	r3, .L60+24
 1447 003e 1A60     		str	r2, [r3]
 674:Src/main.c    ****     msg_counter++;
 1448              		.loc 1 674 0
 1449 0040 DFF8AC80 		ldr	r8, .L60+44
 1450 0044 D8F80030 		ldr	r3, [r8]
 1451 0048 0133     		adds	r3, r3, #1
 1452 004a C8F80030 		str	r3, [r8]
 675:Src/main.c    ****     //sprintf(messagesToWrite[msg_index], "%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\r\n", time, msg_index
 676:Src/main.c    ****     sprintf(messagesToWrite[msg_index], "%ld\t%d\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\r\n", printable_ti
 1453              		.loc 1 676 0
 1454 004e 244C     		ldr	r4, .L60+28
 1455 0050 9DF82030 		ldrb	r3, [sp, #32]	@ zero_extendqisi2
 1456 0054 9DF82110 		ldrb	r1, [sp, #33]	@ zero_extendqisi2
 1457 0058 0191     		str	r1, [sp, #4]
 1458 005a 9DF82210 		ldrb	r1, [sp, #34]	@ zero_extendqisi2
 1459 005e 9DF823E0 		ldrb	lr, [sp, #35]	@ zero_extendqisi2
 1460 0062 9DF824C0 		ldrb	ip, [sp, #36]	@ zero_extendqisi2
 1461 0066 9DF82590 		ldrb	r9, [sp, #37]	@ zero_extendqisi2
 1462 006a 9DF826A0 		ldrb	r10, [sp, #38]	@ zero_extendqisi2
 1463 006e 9DF827B0 		ldrb	fp, [sp, #39]	@ zero_extendqisi2
 1464 0072 CDF81CB0 		str	fp, [sp, #28]
 1465 0076 CDF818A0 		str	r10, [sp, #24]
 1466 007a CDF81490 		str	r9, [sp, #20]
 1467 007e CDF810C0 		str	ip, [sp, #16]
 1468 0082 CDF80CE0 		str	lr, [sp, #12]
 1469 0086 0291     		str	r1, [sp, #8]
 1470 0088 0093     		str	r3, [sp]
 1471 008a 0346     		mov	r3, r0
 1472 008c 1549     		ldr	r1, .L60+32
 1473 008e 04EB0620 		add	r0, r4, r6, lsl #8
 1474              	.LVL87:
 1475 0092 FFF7FEFF 		bl	sprintf
 1476              	.LVL88:
 677:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 1477              		.loc 1 677 0
 1478 0096 0121     		movs	r1, #1
 1479 0098 1348     		ldr	r0, .L60+36
 1480 009a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1481              	.LVL89:
 678:Src/main.c    ****     //print(&huart2,messagesToWrite[msg_index]);
 679:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t *)messagesToWrite[msg_index], (uint16_t)strlen(messagesTo
 680:Src/main.c    ****     HAL_UART_Transmit(&huart3, (uint8_t *)messagesToWrite[msg_index], (uint16_t)strlen(messagesToWr
 1482              		.loc 1 680 0
 1483 009e 2B68     		ldr	r3, [r5]
 1484 00a0 04EB0324 		add	r4, r4, r3, lsl #8
 1485 00a4 2046     		mov	r0, r4
 1486 00a6 FFF7FEFF 		bl	strlen
 1487              	.LVL90:
 1488 00aa 6423     		movs	r3, #100
 1489 00ac 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccbujePK.s 			page 42


 1490 00ae 2146     		mov	r1, r4
 1491 00b0 0E48     		ldr	r0, .L60+40
 1492 00b2 FFF7FEFF 		bl	HAL_UART_Transmit
 1493              	.LVL91:
 681:Src/main.c    ****     /*char printable_time_s[100];
 682:Src/main.c    **** 		sprintf(printable_time_s,"%d\r\n",printable_time);
 683:Src/main.c    **** 		print(&huart2,printable_time_s);*/
 684:Src/main.c    ****     msg_counter = 0;
 1494              		.loc 1 684 0
 1495 00b6 C8F80070 		str	r7, [r8]
 685:Src/main.c    ****     msg_index = 0;
 1496              		.loc 1 685 0
 1497 00ba 2F60     		str	r7, [r5]
 1498              	.LBE11:
 686:Src/main.c    ****   }
 687:Src/main.c    **** }
 1499              		.loc 1 687 0
 1500 00bc 0BB0     		add	sp, sp, #44
 1501              	.LCFI31:
 1502              		.cfi_def_cfa_offset 36
 1503              		@ sp needed
 1504 00be BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1505              	.L61:
 1506 00c2 00BF     		.align	2
 1507              	.L60:
 1508 00c4 00000000 		.word	.LANCHOR2
 1509 00c8 00000000 		.word	delta
 1510 00cc 00000000 		.word	.LANCHOR3
 1511 00d0 00000000 		.word	.LANCHOR4
 1512 00d4 00000000 		.word	.LANCHOR5
 1513 00d8 00000000 		.word	htim6
 1514 00dc 00000000 		.word	.LANCHOR6
 1515 00e0 00000000 		.word	messagesToWrite
 1516 00e4 00000000 		.word	.LC5
 1517 00e8 00040240 		.word	1073873920
 1518 00ec 00000000 		.word	huart3
 1519 00f0 00000000 		.word	.LANCHOR7
 1520              		.cfi_endproc
 1521              	.LFE144:
 1523              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1524              		.align	1
 1525              		.global	HAL_UART_RxCpltCallback
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu fpv4-sp-d16
 1531              	HAL_UART_RxCpltCallback:
 1532              	.LFB145:
 688:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 689:Src/main.c    **** {
 1533              		.loc 1 689 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              	.LVL92:
 1538 0000 38B5     		push	{r3, r4, r5, lr}
 1539              	.LCFI32:
ARM GAS  /tmp/ccbujePK.s 			page 43


 1540              		.cfi_def_cfa_offset 16
 1541              		.cfi_offset 3, -16
 1542              		.cfi_offset 4, -12
 1543              		.cfi_offset 5, -8
 1544              		.cfi_offset 14, -4
 690:Src/main.c    **** 
 691:Src/main.c    ****   flag_rx = 1;
 1545              		.loc 1 691 0
 1546 0002 0122     		movs	r2, #1
 1547 0004 124B     		ldr	r3, .L66
 1548 0006 1A60     		str	r2, [r3]
 1549              	.LVL93:
 1550              	.LBB12:
 692:Src/main.c    ****   for (int i = 0; i < 35; i++)
 1551              		.loc 1 692 0
 1552 0008 0023     		movs	r3, #0
 1553 000a 04E0     		b	.L63
 1554              	.LVL94:
 1555              	.L64:
 693:Src/main.c    ****   {
 694:Src/main.c    ****     msg_can_to_send[i] = huart_rx[i];
 1556              		.loc 1 694 0 discriminator 3
 1557 000c 114A     		ldr	r2, .L66+4
 1558 000e D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1559 0010 114A     		ldr	r2, .L66+8
 1560 0012 D154     		strb	r1, [r2, r3]
 692:Src/main.c    ****   for (int i = 0; i < 35; i++)
 1561              		.loc 1 692 0 discriminator 3
 1562 0014 0133     		adds	r3, r3, #1
 1563              	.LVL95:
 1564              	.L63:
 692:Src/main.c    ****   for (int i = 0; i < 35; i++)
 1565              		.loc 1 692 0 is_stmt 0 discriminator 1
 1566 0016 222B     		cmp	r3, #34
 1567 0018 F8DD     		ble	.L64
 1568              	.LBE12:
 695:Src/main.c    ****   }
 696:Src/main.c    ****   msg_can_to_send[35] = '\0';
 1569              		.loc 1 696 0 is_stmt 1
 1570 001a 0F4D     		ldr	r5, .L66+8
 1571 001c 0023     		movs	r3, #0
 1572              	.LVL96:
 1573 001e 85F82330 		strb	r3, [r5, #35]
 697:Src/main.c    **** 
 698:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *)msg_can_to_send, strlen(msg_can_to_send), 5);
 1574              		.loc 1 698 0
 1575 0022 2846     		mov	r0, r5
 1576              	.LVL97:
 1577 0024 FFF7FEFF 		bl	strlen
 1578              	.LVL98:
 1579 0028 0C4C     		ldr	r4, .L66+12
 1580 002a 0523     		movs	r3, #5
 1581 002c 82B2     		uxth	r2, r0
 1582 002e 2946     		mov	r1, r5
 1583 0030 2046     		mov	r0, r4
 1584 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 1585              	.LVL99:
ARM GAS  /tmp/ccbujePK.s 			page 44


 699:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 5);
 1586              		.loc 1 699 0
 1587 0036 0523     		movs	r3, #5
 1588 0038 0222     		movs	r2, #2
 1589 003a 0949     		ldr	r1, .L66+16
 1590 003c 2046     		mov	r0, r4
 1591 003e FFF7FEFF 		bl	HAL_UART_Transmit
 1592              	.LVL100:
 700:Src/main.c    **** 
 701:Src/main.c    ****   //HAL_UART_Receive_IT(&huart3, huart_rx, 35);
 702:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, huart_rx, 35);
 1593              		.loc 1 702 0
 1594 0042 2322     		movs	r2, #35
 1595 0044 0349     		ldr	r1, .L66+4
 1596 0046 2046     		mov	r0, r4
 1597 0048 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1598              	.LVL101:
 1599 004c 38BD     		pop	{r3, r4, r5, pc}
 1600              	.L67:
 1601 004e 00BF     		.align	2
 1602              	.L66:
 1603 0050 00000000 		.word	.LANCHOR1
 1604 0054 00000000 		.word	huart_rx
 1605 0058 00000000 		.word	msg_can_to_send
 1606 005c 00000000 		.word	huart2
 1607 0060 38000000 		.word	.LC4
 1608              		.cfi_endproc
 1609              	.LFE145:
 1611              		.section	.text.Error_Handler,"ax",%progbits
 1612              		.align	1
 1613              		.global	Error_Handler
 1614              		.syntax unified
 1615              		.thumb
 1616              		.thumb_func
 1617              		.fpu fpv4-sp-d16
 1619              	Error_Handler:
 1620              	.LFB146:
 703:Src/main.c    **** }
 704:Src/main.c    **** /* USER CODE END 4 */
 705:Src/main.c    **** 
 706:Src/main.c    **** /**
 707:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 708:Src/main.c    ****   * @retval None
 709:Src/main.c    ****   */
 710:Src/main.c    **** void Error_Handler(void)
 711:Src/main.c    **** {
 1621              		.loc 1 711 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 0
 1624              		@ frame_needed = 0, uses_anonymous_args = 0
 1625              		@ link register save eliminated.
 1626 0000 7047     		bx	lr
 1627              		.cfi_endproc
 1628              	.LFE146:
 1630              		.comm	cont_length_num,4,4
 1631              		.comm	cont_huart_rx,4,4
 1632              		.global	flag_rx
ARM GAS  /tmp/ccbujePK.s 			page 45


 1633              		.comm	cont_msg_can_to_send,4,4
 1634              		.comm	msg_can_to_send,50,4
 1635              		.comm	huart_rx,50,4
 1636              		.global	interrupt_flag
 1637              		.global	msg_index
 1638              		.global	msg_counter
 1639              		.global	mount_ok
 1640              		.comm	delta,4,4
 1641              		.global	printable_time
 1642              		.global	time
 1643              		.comm	messagesToWrite,51200,4
 1644              		.global	cont_rx
 1645              		.global	a
 1646              		.comm	RxHeader,28,4
 1647              		.comm	sFilter,40,4
 1648              		.comm	huart3,64,4
 1649              		.comm	huart2,64,4
 1650              		.comm	htim7,64,4
 1651              		.comm	htim6,64,4
 1652              		.comm	hdma_sdio_tx,96,4
 1653              		.comm	hdma_sdio_rx,96,4
 1654              		.comm	hsd,132,4
 1655              		.comm	hcan1,40,4
 1656              		.comm	hadc1,72,4
 1657              		.section	.bss.a,"aw",%nobits
 1658              		.align	2
 1659              		.set	.LANCHOR0,. + 0
 1662              	a:
 1663 0000 00000000 		.space	4
 1664              		.section	.bss.cont_rx,"aw",%nobits
 1665              		.align	2
 1666              		.set	.LANCHOR2,. + 0
 1669              	cont_rx:
 1670 0000 00000000 		.space	4
 1671              		.section	.bss.flag_rx,"aw",%nobits
 1672              		.align	2
 1673              		.set	.LANCHOR1,. + 0
 1676              	flag_rx:
 1677 0000 00000000 		.space	4
 1678              		.section	.bss.interrupt_flag,"aw",%nobits
 1679              		.align	2
 1682              	interrupt_flag:
 1683 0000 00000000 		.space	4
 1684              		.section	.bss.mount_ok,"aw",%nobits
 1685              		.align	2
 1686              		.set	.LANCHOR3,. + 0
 1689              	mount_ok:
 1690 0000 00000000 		.space	4
 1691              		.section	.bss.msg_counter,"aw",%nobits
 1692              		.align	2
 1693              		.set	.LANCHOR7,. + 0
 1696              	msg_counter:
 1697 0000 00000000 		.space	4
 1698              		.section	.bss.msg_index,"aw",%nobits
 1699              		.align	2
 1700              		.set	.LANCHOR4,. + 0
 1703              	msg_index:
ARM GAS  /tmp/ccbujePK.s 			page 46


 1704 0000 00000000 		.space	4
 1705              		.section	.bss.printable_time,"aw",%nobits
 1706              		.align	2
 1707              		.set	.LANCHOR6,. + 0
 1710              	printable_time:
 1711 0000 00000000 		.space	4
 1712              		.section	.bss.time,"aw",%nobits
 1713              		.align	2
 1714              		.set	.LANCHOR5,. + 0
 1717              	time:
 1718 0000 00000000 		.space	4
 1719              		.section	.rodata.HAL_CAN_RxFifo0FullCallback.str1.4,"aMS",%progbits,1
 1720              		.align	2
 1721              	.LC5:
 1722 0000 256C6409 		.ascii	"%ld\011%d\011%u\011%u\011%u\011%u\011%u\011%u\011%u"
 1722      25640925 
 1722      75092575 
 1722      09257509 
 1722      25750925 
 1723 001b 0925750D 		.ascii	"\011%u\015\012\000"
 1723      0A00
 1724              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1725              		.align	2
 1726              	.LC0:
 1727 0000 63616E20 		.ascii	"can init done_1\015\012\000"
 1727      696E6974 
 1727      20646F6E 
 1727      655F310D 
 1727      0A00
 1728 0012 0000     		.space	2
 1729              	.LC1:
 1730 0014 73746172 		.ascii	"start_1\015\012\000"
 1730      745F310D 
 1730      0A00
 1731 001e 0000     		.space	2
 1732              	.LC2:
 1733 0020 63616E20 		.ascii	"can init done\015\012\000"
 1733      696E6974 
 1733      20646F6E 
 1733      650D0A00 
 1734              	.LC3:
 1735 0030 73746172 		.ascii	"start\015\012\000"
 1735      740D0A00 
 1736              	.LC4:
 1737 0038 0D0A00   		.ascii	"\015\012\000"
 1738              		.text
 1739              	.Letext0:
 1740              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1741              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1742              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1743              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1744              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1745              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1746              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1747              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1748              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1749              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
ARM GAS  /tmp/ccbujePK.s 			page 47


 1750              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1751              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1752              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1753              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_sdmmc.h"
 1754              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_sd.h"
 1755              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1756              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1757              		.file 19 "/usr/include/newlib/sys/lock.h"
 1758              		.file 20 "/usr/include/newlib/sys/_types.h"
 1759              		.file 21 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1760              		.file 22 "/usr/include/newlib/sys/reent.h"
 1761              		.file 23 "/usr/include/newlib/string.h"
 1762              		.file 24 "<built-in>"
 1763              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1764              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1765              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccbujePK.s 			page 48


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccbujePK.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccbujePK.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccbujePK.s:156    .text.MX_GPIO_Init:00000000000000b8 $d
     /tmp/ccbujePK.s:163    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccbujePK.s:169    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccbujePK.s:225    .text.MX_DMA_Init:0000000000000040 $d
     /tmp/ccbujePK.s:230    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccbujePK.s:236    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccbujePK.s:322    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/ccbujePK.s:328    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/ccbujePK.s:367    .text.MX_USART3_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart3
     /tmp/ccbujePK.s:373    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccbujePK.s:379    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccbujePK.s:419    .text.MX_USART2_UART_Init:0000000000000028 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccbujePK.s:425    .text.MX_SDIO_SD_Init:0000000000000000 $t
     /tmp/ccbujePK.s:431    .text.MX_SDIO_SD_Init:0000000000000000 MX_SDIO_SD_Init
     /tmp/ccbujePK.s:466    .text.MX_SDIO_SD_Init:000000000000001c $d
                            *COM*:0000000000000084 hsd
     /tmp/ccbujePK.s:472    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccbujePK.s:478    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccbujePK.s:526    .text.MX_CAN1_Init:0000000000000030 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccbujePK.s:532    .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/ccbujePK.s:538    .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/ccbujePK.s:593    .text.MX_TIM6_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim6
     /tmp/ccbujePK.s:599    .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/ccbujePK.s:605    .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/ccbujePK.s:660    .text.MX_TIM7_Init:0000000000000038 $d
                            *COM*:0000000000000040 htim7
     /tmp/ccbujePK.s:666    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccbujePK.s:672    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccbujePK.s:746    .text.MX_ADC1_Init:000000000000004c $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccbujePK.s:753    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccbujePK.s:760    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccbujePK.s:883    .text.SystemClock_Config:00000000000000a8 $d
     /tmp/ccbujePK.s:889    .text.main:0000000000000000 $t
     /tmp/ccbujePK.s:896    .text.main:0000000000000000 main
     /tmp/ccbujePK.s:1264   .text.main:00000000000002a8 $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000032 huart_rx
                            *COM*:0000000000000032 msg_can_to_send
     /tmp/ccbujePK.s:1284   .text.CAN_Send:0000000000000000 $t
     /tmp/ccbujePK.s:1291   .text.CAN_Send:0000000000000000 CAN_Send
     /tmp/ccbujePK.s:1331   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccbujePK.s:1338   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccbujePK.s:1378   .text.CAN_Receive:0000000000000024 $d
                            *COM*:000000000000001c RxHeader
     /tmp/ccbujePK.s:1384   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccbujePK.s:1391   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccbujePK.s:1508   .text.HAL_CAN_RxFifo0FullCallback:00000000000000c4 $d
                            *COM*:0000000000000004 delta
ARM GAS  /tmp/ccbujePK.s 			page 49


                            *COM*:000000000000c800 messagesToWrite
     /tmp/ccbujePK.s:1524   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccbujePK.s:1531   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccbujePK.s:1603   .text.HAL_UART_RxCpltCallback:0000000000000050 $d
     /tmp/ccbujePK.s:1612   .text.Error_Handler:0000000000000000 $t
     /tmp/ccbujePK.s:1619   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000004 cont_length_num
                            *COM*:0000000000000004 cont_huart_rx
     /tmp/ccbujePK.s:1676   .bss.flag_rx:0000000000000000 flag_rx
                            *COM*:0000000000000004 cont_msg_can_to_send
     /tmp/ccbujePK.s:1682   .bss.interrupt_flag:0000000000000000 interrupt_flag
     /tmp/ccbujePK.s:1703   .bss.msg_index:0000000000000000 msg_index
     /tmp/ccbujePK.s:1696   .bss.msg_counter:0000000000000000 msg_counter
     /tmp/ccbujePK.s:1689   .bss.mount_ok:0000000000000000 mount_ok
     /tmp/ccbujePK.s:1710   .bss.printable_time:0000000000000000 printable_time
     /tmp/ccbujePK.s:1717   .bss.time:0000000000000000 time
     /tmp/ccbujePK.s:1669   .bss.cont_rx:0000000000000000 cont_rx
     /tmp/ccbujePK.s:1662   .bss.a:0000000000000000 a
                            *COM*:0000000000000060 hdma_sdio_tx
                            *COM*:0000000000000060 hdma_sdio_rx
     /tmp/ccbujePK.s:1658   .bss.a:0000000000000000 $d
     /tmp/ccbujePK.s:1665   .bss.cont_rx:0000000000000000 $d
     /tmp/ccbujePK.s:1672   .bss.flag_rx:0000000000000000 $d
     /tmp/ccbujePK.s:1679   .bss.interrupt_flag:0000000000000000 $d
     /tmp/ccbujePK.s:1685   .bss.mount_ok:0000000000000000 $d
     /tmp/ccbujePK.s:1692   .bss.msg_counter:0000000000000000 $d
     /tmp/ccbujePK.s:1699   .bss.msg_index:0000000000000000 $d
     /tmp/ccbujePK.s:1706   .bss.printable_time:0000000000000000 $d
     /tmp/ccbujePK.s:1713   .bss.time:0000000000000000 $d
     /tmp/ccbujePK.s:1720   .rodata.HAL_CAN_RxFifo0FullCallback.str1.4:0000000000000000 $d
     /tmp/ccbujePK.s:1725   .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Init
HAL_SD_Init
HAL_CAN_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_ADC_Init
HAL_ADC_ConfigChannel
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_CAN_ConfigFilter
HAL_UART_Transmit
HAL_GPIO_TogglePin
HAL_Delay
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start
ARM GAS  /tmp/ccbujePK.s 			page 50


HAL_TIM_Base_Start_IT
HAL_UART_Receive_IT
strlen
atoi
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
sprintf
