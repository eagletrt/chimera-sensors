ARM GAS  /tmp/cc7zquCe.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB149:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "Eagle_TRT.h"
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** #include "stdio.h"
  29:Src/main.c    **** #include "stdlib.h"
  30:Src/main.c    **** #include <inttypes.h>
  31:Src/main.c    **** #include "stm32f4xx_hal_gpio.h"
  32:Src/main.c    **** #include "stm32f4xx_it.h"
ARM GAS  /tmp/cc7zquCe.s 			page 2


  33:Src/main.c    **** #include <math.h>
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** ADC_HandleTypeDef hadc1;
  53:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_HandleTypeDef hcan1;
  56:Src/main.c    **** 
  57:Src/main.c    **** SPI_HandleTypeDef hspi1;
  58:Src/main.c    **** 
  59:Src/main.c    **** TIM_HandleTypeDef htim2;
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** TIM_HandleTypeDef htim4;
  62:Src/main.c    **** TIM_HandleTypeDef htim5;
  63:Src/main.c    **** TIM_HandleTypeDef htim6;
  64:Src/main.c    **** TIM_HandleTypeDef htim7;
  65:Src/main.c    **** TIM_HandleTypeDef htim10;
  66:Src/main.c    **** TIM_HandleTypeDef htim11;
  67:Src/main.c    **** 
  68:Src/main.c    **** UART_HandleTypeDef huart1;
  69:Src/main.c    **** UART_HandleTypeDef huart2;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  73:Src/main.c    **** extern can_stc can;
  74:Src/main.c    **** extern imu_stc imu;
  75:Src/main.c    **** extern enc_stc enc;
  76:Src/main.c    **** extern pot_stc pot_1;
  77:Src/main.c    **** extern pot_stc pot_2;
  78:Src/main.c    **** extern pot_stc pot_3;
  79:Src/main.c    **** 
  80:Src/main.c    **** CAN_FilterTypeDef sFilter;
  81:Src/main.c    **** uint32_t valMax0, valMin0, val0rang;
  82:Src/main.c    **** uint32_t ADC_buffer[4], val[3];
  83:Src/main.c    **** char txt[100];
  84:Src/main.c    **** int flag = 0;
  85:Src/main.c    **** int multiplier = 1;
  86:Src/main.c    **** int timer_factor = 2;
  87:Src/main.c    **** int command_flag = 0;
  88:Src/main.c    **** int calibration_flag = 0;
  89:Src/main.c    **** 
ARM GAS  /tmp/cc7zquCe.s 			page 3


  90:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance2 = {.Instance = TIM2};
  91:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance3 = {.Instance = TIM3};
  92:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance4 = {.Instance = TIM4};
  93:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance5 = {.Instance = TIM5};
  94:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  95:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  96:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance10 = {.Instance = TIM10};
  97:Src/main.c    **** 
  98:Src/main.c    **** gps_struct gps_main;
  99:Src/main.c    **** /* USER CODE END PV */
 100:Src/main.c    **** 
 101:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 102:Src/main.c    **** void SystemClock_Config(void);
 103:Src/main.c    **** static void MX_GPIO_Init(void);
 104:Src/main.c    **** static void MX_DMA_Init(void);
 105:Src/main.c    **** static void MX_USART2_UART_Init(void);
 106:Src/main.c    **** static void MX_CAN1_Init(void);
 107:Src/main.c    **** static void MX_SPI1_Init(void);
 108:Src/main.c    **** static void MX_ADC1_Init(void);
 109:Src/main.c    **** static void MX_USART1_UART_Init(void);
 110:Src/main.c    **** static void MX_TIM2_Init(void);
 111:Src/main.c    **** static void MX_TIM3_Init(void);
 112:Src/main.c    **** static void MX_TIM4_Init(void);
 113:Src/main.c    **** static void MX_TIM5_Init(void);
 114:Src/main.c    **** static void MX_TIM6_Init(void);
 115:Src/main.c    **** static void MX_TIM7_Init(void);
 116:Src/main.c    **** static void MX_TIM10_Init(void);
 117:Src/main.c    **** static void MX_TIM11_Init(void);
 118:Src/main.c    **** static void MX_NVIC_Init(void);
 119:Src/main.c    **** /* USER CODE BEGIN PFP */
 120:Src/main.c    **** 
 121:Src/main.c    **** int send_CAN_data(uint32_t);
 122:Src/main.c    **** 
 123:Src/main.c    **** /* USER CODE END PFP */
 124:Src/main.c    **** 
 125:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 126:Src/main.c    **** /* USER CODE BEGIN 0 */
 127:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 128:Src/main.c    **** {
 129:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 130:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 131:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 132:Src/main.c    ****     /*int txt_1[100];
 133:Src/main.c    ****     sprintf(txt_1, "sterzo: %d %d %d\r\n", pot_1.val, pot_2.val, pot_3.val);
 134:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)txt_1, strlen(txt_1), 10);*/
 135:Src/main.c    **** }
 136:Src/main.c    **** 
 137:Src/main.c    **** int steer_enc_prescaler;
 138:Src/main.c    **** int encoder_counter;
 139:Src/main.c    **** int previous_millis;
 140:Src/main.c    **** 
 141:Src/main.c    **** /* USER CODE END 0 */
 142:Src/main.c    **** 
 143:Src/main.c    **** /**
 144:Src/main.c    ****   * @brief  The application entry point.
 145:Src/main.c    ****   * @retval int
 146:Src/main.c    ****   */
ARM GAS  /tmp/cc7zquCe.s 			page 4


 147:Src/main.c    **** int main(void)
 148:Src/main.c    **** {
 149:Src/main.c    ****     /* USER CODE BEGIN 1 */
 150:Src/main.c    ****     /* USER CODE END 1 */
 151:Src/main.c    **** 
 152:Src/main.c    ****     /* MCU Configuration--------------------------------------------------------*/
 153:Src/main.c    **** 
 154:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 155:Src/main.c    ****     HAL_Init();
 156:Src/main.c    **** 
 157:Src/main.c    ****     /* USER CODE BEGIN Init */
 158:Src/main.c    **** 
 159:Src/main.c    ****     /* USER CODE END Init */
 160:Src/main.c    **** 
 161:Src/main.c    ****     /* Configure the system clock */
 162:Src/main.c    ****     SystemClock_Config();
 163:Src/main.c    **** 
 164:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 165:Src/main.c    **** 
 166:Src/main.c    ****     /* USER CODE END SysInit */
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* Initialize all configured peripherals */
 169:Src/main.c    ****     MX_GPIO_Init();
 170:Src/main.c    ****     MX_DMA_Init();
 171:Src/main.c    ****     MX_USART2_UART_Init();
 172:Src/main.c    ****     MX_CAN1_Init();
 173:Src/main.c    ****     MX_SPI1_Init();
 174:Src/main.c    ****     MX_ADC1_Init();
 175:Src/main.c    ****     MX_USART1_UART_Init();
 176:Src/main.c    ****     MX_TIM2_Init();
 177:Src/main.c    ****     MX_TIM3_Init();
 178:Src/main.c    ****     MX_TIM4_Init();
 179:Src/main.c    ****     MX_TIM5_Init();
 180:Src/main.c    ****     MX_TIM6_Init();
 181:Src/main.c    ****     MX_TIM7_Init();
 182:Src/main.c    ****     MX_TIM10_Init();
 183:Src/main.c    ****     MX_TIM11_Init();
 184:Src/main.c    **** 
 185:Src/main.c    ****     /* Initialize interrupts */
 186:Src/main.c    ****     MX_NVIC_Init();
 187:Src/main.c    ****     /* USER CODE BEGIN 2 */
 188:Src/main.c    **** 
 189:Src/main.c    ****     sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 190:Src/main.c    ****     sFilter.FilterIdLow = 0;
 191:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 192:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 193:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 194:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 195:Src/main.c    ****     sFilter.FilterBank = 0;
 196:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 197:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 198:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 199:Src/main.c    **** 
 200:Src/main.c    ****     HAL_CAN_Start(&hcan1);
 201:Src/main.c    **** 
 202:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 203:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
ARM GAS  /tmp/cc7zquCe.s 			page 5


 204:Src/main.c    ****     /* USER CODE END 2 */
 205:Src/main.c    **** 
 206:Src/main.c    ****     /* Infinite loop */
 207:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 208:Src/main.c    ****     can.hcan = &hcan1;
 209:Src/main.c    ****     // can initialization //
 210:Src/main.c    **** 
 211:Src/main.c    ****     // imu initialization //
 212:Src/main.c    ****     imu.GPIOx_InUse = GPIOC;
 213:Src/main.c    ****     imu.GPIO_Pin_InUse = GPIO_PIN_9;
 214:Src/main.c    ****     imu.GPIOx_NotInUse = GPIOA;
 215:Src/main.c    ****     imu.GPIO_Pin_NotInUse = GPIO_PIN_8;
 216:Src/main.c    ****     imu.hspi = &hspi1;
 217:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 218:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 219:Src/main.c    **** 
 220:Src/main.c    ****     if (gps_init(&huart1, &gps_main) == 0)
 221:Src/main.c    ****     {
 222:Src/main.c    ****         //--error--//
 223:Src/main.c    ****     }
 224:Src/main.c    **** 
 225:Src/main.c    ****     steer_enc_prescaler = htim3.Init.Period;
 226:Src/main.c    ****     steer_enc_prescaler /= 3;
 227:Src/main.c    ****     steer_enc_prescaler /= 20;
 228:Src/main.c    ****     steer_enc_prescaler += 40;
 229:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 230:Src/main.c    **** 
 231:Src/main.c    ****     pot_2.max = 4060;
 232:Src/main.c    ****     pot_2.min = 2350;
 233:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 234:Src/main.c    **** 
 235:Src/main.c    ****     enc.dx_wheel = 1;
 236:Src/main.c    ****     enc.interrupt_flag = 0;
 237:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 238:Src/main.c    ****     enc.average_speed = 0;
 239:Src/main.c    ****     enc.wheel_diameter = 0.395;
 240:Src/main.c    ****     enc.samle_delta_time = htim7.Init.Period;
 241:Src/main.c    ****     enc.data_size = 15;
 242:Src/main.c    ****     enc.clock_period = 2;
 243:Src/main.c    ****     enc.wheel_rotation = 0;
 244:Src/main.c    ****     enc.Km = 0;
 245:Src/main.c    **** 
 246:Src/main.c    ****     enc.frequency = 0;
 247:Src/main.c    ****     enc.frequency_timer = &htim7;
 248:Src/main.c    **** 
 249:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 250:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 251:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 252:Src/main.c    ****     //HAL_TIM_Base_Start(&htim5);
 253:Src/main.c    ****     //HAL_TIM_Base_Start(&htim6);
 254:Src/main.c    ****     HAL_TIM_Base_Start(&htim7);
 255:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 256:Src/main.c    **** 
 257:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 258:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 259:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 260:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim5);
ARM GAS  /tmp/cc7zquCe.s 			page 6


 261:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim6);
 262:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim7);
 263:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 264:Src/main.c    **** 
 265:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance2, 0);
 266:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 267:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 268:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance5, 0);
 269:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance6, 0);
 270:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance7, 0);
 271:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 272:Src/main.c    **** 
 273:Src/main.c    ****     //HAL_Delay(1000);
 274:Src/main.c    ****     LSMD9S0_accel_gyro_init(&imu);
 275:Src/main.c    ****     LSMD9S0_check(&imu);
 276:Src/main.c    **** 
 277:Src/main.c    ****     imu.calibration_done = 1;
 278:Src/main.c    ****     //LSM9DS0_calibration(&imu);
 279:Src/main.c    **** 
 280:Src/main.c    ****     encoder_counter = 0;
 281:Src/main.c    **** 
 282:Src/main.c    ****     while (1)
 283:Src/main.c    ****     {
 284:Src/main.c    **** 
 285:Src/main.c    ****         /* USER CODE END WHILE */
 286:Src/main.c    **** 
 287:Src/main.c    ****         /* USER CODE BEGIN 3 */
 288:Src/main.c    **** 
 289:Src/main.c    ****         HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 290:Src/main.c    **** 
 291:Src/main.c    ****         // If CAN is free from important messages, send data
 292:Src/main.c    ****         if (command_flag == 0)
 293:Src/main.c    ****         {
 294:Src/main.c    ****             if (previous_millis != HAL_GetTick())
 295:Src/main.c    ****             {
 296:Src/main.c    ****                 send_CAN_data(HAL_GetTick());
 297:Src/main.c    ****                 previous_millis = HAL_GetTick();
 298:Src/main.c    ****             }
 299:Src/main.c    ****         }
 300:Src/main.c    ****         else
 301:Src/main.c    ****         {
 302:Src/main.c    ****             HAL_Delay(1);
 303:Src/main.c    ****             command_flag = 0;
 304:Src/main.c    ****         }
 305:Src/main.c    ****     }
 306:Src/main.c    ****     /* USER CODE END 3 */
 307:Src/main.c    **** }
 308:Src/main.c    **** 
 309:Src/main.c    **** /**
 310:Src/main.c    ****   * @brief System Clock Configuration
 311:Src/main.c    ****   * @retval None
 312:Src/main.c    ****   */
 313:Src/main.c    **** void SystemClock_Config(void)
 314:Src/main.c    **** {
 315:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 316:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 317:Src/main.c    **** 
ARM GAS  /tmp/cc7zquCe.s 			page 7


 318:Src/main.c    ****     /** Configure the main internal regulator output voltage 
 319:Src/main.c    ****   */
 320:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 321:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 322:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 323:Src/main.c    ****   */
 324:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 325:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 326:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 327:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 328:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 329:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 330:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 331:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 332:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 333:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 334:Src/main.c    ****     {
 335:Src/main.c    ****         Error_Handler();
 336:Src/main.c    ****     }
 337:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 338:Src/main.c    ****   */
 339:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 340:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 341:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 342:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 343:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 344:Src/main.c    **** 
 345:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 346:Src/main.c    ****     {
 347:Src/main.c    ****         Error_Handler();
 348:Src/main.c    ****     }
 349:Src/main.c    **** }
 350:Src/main.c    **** 
 351:Src/main.c    **** /**
 352:Src/main.c    ****   * @brief NVIC Configuration.
 353:Src/main.c    ****   * @retval None
 354:Src/main.c    ****   */
 355:Src/main.c    **** static void MX_NVIC_Init(void)
 356:Src/main.c    **** {
 357:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 358:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 359:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 360:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 361:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 362:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 363:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 364:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 365:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 366:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 367:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 368:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 369:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 370:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 371:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 372:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 373:Src/main.c    ****     HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 374:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
ARM GAS  /tmp/cc7zquCe.s 			page 8


 375:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 376:Src/main.c    ****     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 377:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 378:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 379:Src/main.c    ****     HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 380:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 381:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 382:Src/main.c    ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 383:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 384:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 385:Src/main.c    ****     HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 386:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 387:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 388:Src/main.c    ****     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 389:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 390:Src/main.c    **** }
 391:Src/main.c    **** 
 392:Src/main.c    **** /**
 393:Src/main.c    ****   * @brief ADC1 Initialization Function
 394:Src/main.c    ****   * @param None
 395:Src/main.c    ****   * @retval None
 396:Src/main.c    ****   */
 397:Src/main.c    **** static void MX_ADC1_Init(void)
 398:Src/main.c    **** {
 399:Src/main.c    **** 
 400:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 0 */
 401:Src/main.c    **** 
 402:Src/main.c    ****     /* USER CODE END ADC1_Init 0 */
 403:Src/main.c    **** 
 404:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 405:Src/main.c    **** 
 406:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 1 */
 407:Src/main.c    **** 
 408:Src/main.c    ****     /* USER CODE END ADC1_Init 1 */
 409:Src/main.c    ****     /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of c
 410:Src/main.c    ****   */
 411:Src/main.c    ****     hadc1.Instance = ADC1;
 412:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 413:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 414:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 415:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 416:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 417:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 418:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 419:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 420:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 421:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 422:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 423:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 424:Src/main.c    ****     {
 425:Src/main.c    ****         Error_Handler();
 426:Src/main.c    ****     }
 427:Src/main.c    ****     /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and 
 428:Src/main.c    ****   */
 429:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 430:Src/main.c    ****     sConfig.Rank = 1;
 431:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
ARM GAS  /tmp/cc7zquCe.s 			page 9


 432:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 433:Src/main.c    ****     {
 434:Src/main.c    ****         Error_Handler();
 435:Src/main.c    ****     }
 436:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 2 */
 437:Src/main.c    **** 
 438:Src/main.c    ****     /* USER CODE END ADC1_Init 2 */
 439:Src/main.c    **** }
 440:Src/main.c    **** 
 441:Src/main.c    **** /**
 442:Src/main.c    ****   * @brief CAN1 Initialization Function
 443:Src/main.c    ****   * @param None
 444:Src/main.c    ****   * @retval None
 445:Src/main.c    ****   */
 446:Src/main.c    **** static void MX_CAN1_Init(void)
 447:Src/main.c    **** {
 448:Src/main.c    **** 
 449:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 0 */
 450:Src/main.c    **** 
 451:Src/main.c    ****     /* USER CODE END CAN1_Init 0 */
 452:Src/main.c    **** 
 453:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 1 */
 454:Src/main.c    **** 
 455:Src/main.c    ****     /* USER CODE END CAN1_Init 1 */
 456:Src/main.c    ****     hcan1.Instance = CAN1;
 457:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 458:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 459:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 460:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 461:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 462:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 463:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 464:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 465:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 466:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 467:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 468:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 469:Src/main.c    ****     {
 470:Src/main.c    ****         Error_Handler();
 471:Src/main.c    ****     }
 472:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 2 */
 473:Src/main.c    **** 
 474:Src/main.c    ****     /* USER CODE END CAN1_Init 2 */
 475:Src/main.c    **** }
 476:Src/main.c    **** 
 477:Src/main.c    **** /**
 478:Src/main.c    ****   * @brief SPI1 Initialization Function
 479:Src/main.c    ****   * @param None
 480:Src/main.c    ****   * @retval None
 481:Src/main.c    ****   */
 482:Src/main.c    **** static void MX_SPI1_Init(void)
 483:Src/main.c    **** {
 484:Src/main.c    **** 
 485:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 0 */
 486:Src/main.c    **** 
 487:Src/main.c    ****     /* USER CODE END SPI1_Init 0 */
 488:Src/main.c    **** 
ARM GAS  /tmp/cc7zquCe.s 			page 10


 489:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 1 */
 490:Src/main.c    **** 
 491:Src/main.c    ****     /* USER CODE END SPI1_Init 1 */
 492:Src/main.c    ****     /* SPI1 parameter configuration*/
 493:Src/main.c    ****     hspi1.Instance = SPI1;
 494:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 495:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 496:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 497:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 498:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 499:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 500:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 501:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 502:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 503:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 504:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 505:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 506:Src/main.c    ****     {
 507:Src/main.c    ****         Error_Handler();
 508:Src/main.c    ****     }
 509:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 2 */
 510:Src/main.c    **** 
 511:Src/main.c    ****     /* USER CODE END SPI1_Init 2 */
 512:Src/main.c    **** }
 513:Src/main.c    **** 
 514:Src/main.c    **** /**
 515:Src/main.c    ****   * @brief TIM2 Initialization Function
 516:Src/main.c    ****   * @param None
 517:Src/main.c    ****   * @retval None
 518:Src/main.c    ****   */
 519:Src/main.c    **** static void MX_TIM2_Init(void)
 520:Src/main.c    **** {
 521:Src/main.c    **** 
 522:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 0 */
 523:Src/main.c    **** 
 524:Src/main.c    ****     /* USER CODE END TIM2_Init 0 */
 525:Src/main.c    **** 
 526:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 527:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 528:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 529:Src/main.c    **** 
 530:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 1 */
 531:Src/main.c    **** 
 532:Src/main.c    ****     /* USER CODE END TIM2_Init 1 */
 533:Src/main.c    ****     htim2.Instance = TIM2;
 534:Src/main.c    ****     htim2.Init.Prescaler = 36;
 535:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 536:Src/main.c    ****     htim2.Init.Period = 1000;
 537:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 538:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 539:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 540:Src/main.c    ****     {
 541:Src/main.c    ****         Error_Handler();
 542:Src/main.c    ****     }
 543:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 544:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 545:Src/main.c    ****     {
ARM GAS  /tmp/cc7zquCe.s 			page 11


 546:Src/main.c    ****         Error_Handler();
 547:Src/main.c    ****     }
 548:Src/main.c    ****     sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 549:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 550:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 551:Src/main.c    ****     {
 552:Src/main.c    ****         Error_Handler();
 553:Src/main.c    ****     }
 554:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 555:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 556:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 557:Src/main.c    ****     {
 558:Src/main.c    ****         Error_Handler();
 559:Src/main.c    ****     }
 560:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 2 */
 561:Src/main.c    **** 
 562:Src/main.c    ****     /* USER CODE END TIM2_Init 2 */
 563:Src/main.c    **** }
 564:Src/main.c    **** 
 565:Src/main.c    **** /**
 566:Src/main.c    ****   * @brief TIM3 Initialization Function
 567:Src/main.c    ****   * @param None
 568:Src/main.c    ****   * @retval None
 569:Src/main.c    ****   */
 570:Src/main.c    **** static void MX_TIM3_Init(void)
 571:Src/main.c    **** {
 572:Src/main.c    **** 
 573:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 0 */
 574:Src/main.c    **** 
 575:Src/main.c    ****     /* USER CODE END TIM3_Init 0 */
 576:Src/main.c    **** 
 577:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 578:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 579:Src/main.c    **** 
 580:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 1 */
 581:Src/main.c    **** 
 582:Src/main.c    ****     /* USER CODE END TIM3_Init 1 */
 583:Src/main.c    ****     htim3.Instance = TIM3;
 584:Src/main.c    ****     htim3.Init.Prescaler = 18;
 585:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 586:Src/main.c    ****     htim3.Init.Period = 65500;
 587:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 588:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 589:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 590:Src/main.c    ****     {
 591:Src/main.c    ****         Error_Handler();
 592:Src/main.c    ****     }
 593:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 594:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 595:Src/main.c    ****     {
 596:Src/main.c    ****         Error_Handler();
 597:Src/main.c    ****     }
 598:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 599:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 600:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 601:Src/main.c    ****     {
 602:Src/main.c    ****         Error_Handler();
ARM GAS  /tmp/cc7zquCe.s 			page 12


 603:Src/main.c    ****     }
 604:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 2 */
 605:Src/main.c    **** 
 606:Src/main.c    ****     /* USER CODE END TIM3_Init 2 */
 607:Src/main.c    **** }
 608:Src/main.c    **** 
 609:Src/main.c    **** /**
 610:Src/main.c    ****   * @brief TIM4 Initialization Function
 611:Src/main.c    ****   * @param None
 612:Src/main.c    ****   * @retval None
 613:Src/main.c    ****   */
 614:Src/main.c    **** static void MX_TIM4_Init(void)
 615:Src/main.c    **** {
 616:Src/main.c    **** 
 617:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 0 */
 618:Src/main.c    **** 
 619:Src/main.c    ****     /* USER CODE END TIM4_Init 0 */
 620:Src/main.c    **** 
 621:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 622:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 623:Src/main.c    **** 
 624:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 1 */
 625:Src/main.c    **** 
 626:Src/main.c    ****     /* USER CODE END TIM4_Init 1 */
 627:Src/main.c    ****     htim4.Instance = TIM4;
 628:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 629:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 630:Src/main.c    ****     htim4.Init.Period = 2000;
 631:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 632:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 633:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 634:Src/main.c    ****     {
 635:Src/main.c    ****         Error_Handler();
 636:Src/main.c    ****     }
 637:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 638:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 639:Src/main.c    ****     {
 640:Src/main.c    ****         Error_Handler();
 641:Src/main.c    ****     }
 642:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 643:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 644:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 645:Src/main.c    ****     {
 646:Src/main.c    ****         Error_Handler();
 647:Src/main.c    ****     }
 648:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 2 */
 649:Src/main.c    **** 
 650:Src/main.c    ****     /* USER CODE END TIM4_Init 2 */
 651:Src/main.c    **** }
 652:Src/main.c    **** 
 653:Src/main.c    **** /**
 654:Src/main.c    ****   * @brief TIM5 Initialization Function
 655:Src/main.c    ****   * @param None
 656:Src/main.c    ****   * @retval None
 657:Src/main.c    ****   */
 658:Src/main.c    **** static void MX_TIM5_Init(void)
 659:Src/main.c    **** {
ARM GAS  /tmp/cc7zquCe.s 			page 13


 660:Src/main.c    **** 
 661:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 0 */
 662:Src/main.c    **** 
 663:Src/main.c    ****     /* USER CODE END TIM5_Init 0 */
 664:Src/main.c    **** 
 665:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 666:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 667:Src/main.c    **** 
 668:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 1 */
 669:Src/main.c    **** 
 670:Src/main.c    ****     /* USER CODE END TIM5_Init 1 */
 671:Src/main.c    ****     htim5.Instance = TIM5;
 672:Src/main.c    ****     htim5.Init.Prescaler = 36;
 673:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 674:Src/main.c    ****     htim5.Init.Period = 2000;
 675:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 676:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 677:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 678:Src/main.c    ****     {
 679:Src/main.c    ****         Error_Handler();
 680:Src/main.c    ****     }
 681:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 682:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 683:Src/main.c    ****     {
 684:Src/main.c    ****         Error_Handler();
 685:Src/main.c    ****     }
 686:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 687:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 688:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 689:Src/main.c    ****     {
 690:Src/main.c    ****         Error_Handler();
 691:Src/main.c    ****     }
 692:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 2 */
 693:Src/main.c    **** 
 694:Src/main.c    ****     /* USER CODE END TIM5_Init 2 */
 695:Src/main.c    **** }
 696:Src/main.c    **** 
 697:Src/main.c    **** /**
 698:Src/main.c    ****   * @brief TIM6 Initialization Function
 699:Src/main.c    ****   * @param None
 700:Src/main.c    ****   * @retval None
 701:Src/main.c    ****   */
 702:Src/main.c    **** static void MX_TIM6_Init(void)
 703:Src/main.c    **** {
 704:Src/main.c    **** 
 705:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 0 */
 706:Src/main.c    **** 
 707:Src/main.c    ****     /* USER CODE END TIM6_Init 0 */
 708:Src/main.c    **** 
 709:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 710:Src/main.c    **** 
 711:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 1 */
 712:Src/main.c    **** 
 713:Src/main.c    ****     /* USER CODE END TIM6_Init 1 */
 714:Src/main.c    ****     htim6.Instance = TIM6;
 715:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 716:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/cc7zquCe.s 			page 14


 717:Src/main.c    ****     htim6.Init.Period = 2000;
 718:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 719:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 720:Src/main.c    ****     {
 721:Src/main.c    ****         Error_Handler();
 722:Src/main.c    ****     }
 723:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 724:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 725:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 726:Src/main.c    ****     {
 727:Src/main.c    ****         Error_Handler();
 728:Src/main.c    ****     }
 729:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 2 */
 730:Src/main.c    **** 
 731:Src/main.c    ****     /* USER CODE END TIM6_Init 2 */
 732:Src/main.c    **** }
 733:Src/main.c    **** 
 734:Src/main.c    **** /**
 735:Src/main.c    ****   * @brief TIM7 Initialization Function
 736:Src/main.c    ****   * @param None
 737:Src/main.c    ****   * @retval None
 738:Src/main.c    ****   */
 739:Src/main.c    **** static void MX_TIM7_Init(void)
 740:Src/main.c    **** {
 741:Src/main.c    **** 
 742:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 0 */
 743:Src/main.c    **** 
 744:Src/main.c    ****     /* USER CODE END TIM7_Init 0 */
 745:Src/main.c    **** 
 746:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 747:Src/main.c    **** 
 748:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 1 */
 749:Src/main.c    **** 
 750:Src/main.c    ****     /* USER CODE END TIM7_Init 1 */
 751:Src/main.c    ****     htim7.Instance = TIM7;
 752:Src/main.c    ****     htim7.Init.Prescaler = 36;
 753:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 754:Src/main.c    ****     htim7.Init.Period = 6000;
 755:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 756:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 757:Src/main.c    ****     {
 758:Src/main.c    ****         Error_Handler();
 759:Src/main.c    ****     }
 760:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 761:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 762:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 763:Src/main.c    ****     {
 764:Src/main.c    ****         Error_Handler();
 765:Src/main.c    ****     }
 766:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 2 */
 767:Src/main.c    **** 
 768:Src/main.c    ****     /* USER CODE END TIM7_Init 2 */
 769:Src/main.c    **** }
 770:Src/main.c    **** 
 771:Src/main.c    **** /**
 772:Src/main.c    ****   * @brief TIM10 Initialization Function
 773:Src/main.c    ****   * @param None
ARM GAS  /tmp/cc7zquCe.s 			page 15


 774:Src/main.c    ****   * @retval None
 775:Src/main.c    ****   */
 776:Src/main.c    **** static void MX_TIM10_Init(void)
 777:Src/main.c    **** {
 778:Src/main.c    **** 
 779:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 0 */
 780:Src/main.c    **** 
 781:Src/main.c    ****     /* USER CODE END TIM10_Init 0 */
 782:Src/main.c    **** 
 783:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 1 */
 784:Src/main.c    **** 
 785:Src/main.c    ****     /* USER CODE END TIM10_Init 1 */
 786:Src/main.c    ****     htim10.Instance = TIM10;
 787:Src/main.c    ****     htim10.Init.Prescaler = 36;
 788:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 789:Src/main.c    ****     htim10.Init.Period = 500;
 790:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 791:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 792:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 793:Src/main.c    ****     {
 794:Src/main.c    ****         Error_Handler();
 795:Src/main.c    ****     }
 796:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 2 */
 797:Src/main.c    **** 
 798:Src/main.c    ****     /* USER CODE END TIM10_Init 2 */
 799:Src/main.c    **** }
 800:Src/main.c    **** 
 801:Src/main.c    **** /**
 802:Src/main.c    ****   * @brief TIM11 Initialization Function
 803:Src/main.c    ****   * @param None
 804:Src/main.c    ****   * @retval None
 805:Src/main.c    ****   */
 806:Src/main.c    **** static void MX_TIM11_Init(void)
 807:Src/main.c    **** {
 808:Src/main.c    **** 
 809:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 0 */
 810:Src/main.c    **** 
 811:Src/main.c    ****     /* USER CODE END TIM11_Init 0 */
 812:Src/main.c    **** 
 813:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 1 */
 814:Src/main.c    **** 
 815:Src/main.c    ****     /* USER CODE END TIM11_Init 1 */
 816:Src/main.c    ****     htim11.Instance = TIM11;
 817:Src/main.c    ****     htim11.Init.Prescaler = 0;
 818:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 819:Src/main.c    ****     htim11.Init.Period = 0;
 820:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 821:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 822:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 823:Src/main.c    ****     {
 824:Src/main.c    ****         Error_Handler();
 825:Src/main.c    ****     }
 826:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 2 */
 827:Src/main.c    **** 
 828:Src/main.c    ****     /* USER CODE END TIM11_Init 2 */
 829:Src/main.c    **** }
 830:Src/main.c    **** 
ARM GAS  /tmp/cc7zquCe.s 			page 16


 831:Src/main.c    **** /**
 832:Src/main.c    ****   * @brief USART1 Initialization Function
 833:Src/main.c    ****   * @param None
 834:Src/main.c    ****   * @retval None
 835:Src/main.c    ****   */
 836:Src/main.c    **** static void MX_USART1_UART_Init(void)
 837:Src/main.c    **** {
 838:Src/main.c    **** 
 839:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 0 */
 840:Src/main.c    **** 
 841:Src/main.c    ****     /* USER CODE END USART1_Init 0 */
 842:Src/main.c    **** 
 843:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 1 */
 844:Src/main.c    **** 
 845:Src/main.c    ****     /* USER CODE END USART1_Init 1 */
 846:Src/main.c    ****     huart1.Instance = USART1;
 847:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 848:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 849:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 850:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 851:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 852:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 853:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 854:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 855:Src/main.c    ****     {
 856:Src/main.c    ****         Error_Handler();
 857:Src/main.c    ****     }
 858:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 2 */
 859:Src/main.c    **** 
 860:Src/main.c    ****     /* USER CODE END USART1_Init 2 */
 861:Src/main.c    **** }
 862:Src/main.c    **** 
 863:Src/main.c    **** /**
 864:Src/main.c    ****   * @brief USART2 Initialization Function
 865:Src/main.c    ****   * @param None
 866:Src/main.c    ****   * @retval None
 867:Src/main.c    ****   */
 868:Src/main.c    **** static void MX_USART2_UART_Init(void)
 869:Src/main.c    **** {
 870:Src/main.c    **** 
 871:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 0 */
 872:Src/main.c    **** 
 873:Src/main.c    ****     /* USER CODE END USART2_Init 0 */
 874:Src/main.c    **** 
 875:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 1 */
 876:Src/main.c    **** 
 877:Src/main.c    ****     /* USER CODE END USART2_Init 1 */
 878:Src/main.c    ****     huart2.Instance = USART2;
 879:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 880:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 881:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 882:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 883:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 884:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 885:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 886:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 887:Src/main.c    ****     {
ARM GAS  /tmp/cc7zquCe.s 			page 17


 888:Src/main.c    ****         Error_Handler();
 889:Src/main.c    ****     }
 890:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 2 */
 891:Src/main.c    **** 
 892:Src/main.c    ****     /* USER CODE END USART2_Init 2 */
 893:Src/main.c    **** }
 894:Src/main.c    **** 
 895:Src/main.c    **** /** 
 896:Src/main.c    ****   * Enable DMA controller clock
 897:Src/main.c    ****   */
 898:Src/main.c    **** static void MX_DMA_Init(void)
 899:Src/main.c    **** {
 900:Src/main.c    **** 
 901:Src/main.c    ****     /* DMA controller clock enable */
 902:Src/main.c    ****     __HAL_RCC_DMA2_CLK_ENABLE();
 903:Src/main.c    **** 
 904:Src/main.c    ****     /* DMA interrupt init */
 905:Src/main.c    ****     /* DMA2_Stream0_IRQn interrupt configuration */
 906:Src/main.c    ****     HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 907:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 908:Src/main.c    **** }
 909:Src/main.c    **** 
 910:Src/main.c    **** /**
 911:Src/main.c    ****   * @brief GPIO Initialization Function
 912:Src/main.c    ****   * @param None
 913:Src/main.c    ****   * @retval None
 914:Src/main.c    ****   */
 915:Src/main.c    **** static void MX_GPIO_Init(void)
 916:Src/main.c    **** {
  27              		.loc 1 916 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 917:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 917 0
  44 0006 0024     		movs	r4, #0
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 918:Src/main.c    **** 
 919:Src/main.c    ****     /* GPIO Ports Clock Enable */
 920:Src/main.c    ****     __HAL_RCC_GPIOH_CLK_ENABLE();
ARM GAS  /tmp/cc7zquCe.s 			page 18


  51              		.loc 1 920 0
  52 0012 0194     		str	r4, [sp, #4]
  53 0014 354B     		ldr	r3, .L3
  54 0016 1A6B     		ldr	r2, [r3, #48]
  55 0018 42F08002 		orr	r2, r2, #128
  56 001c 1A63     		str	r2, [r3, #48]
  57 001e 1A6B     		ldr	r2, [r3, #48]
  58 0020 02F08002 		and	r2, r2, #128
  59 0024 0192     		str	r2, [sp, #4]
  60 0026 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 921:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 921 0
  64 0028 0294     		str	r4, [sp, #8]
  65 002a 1A6B     		ldr	r2, [r3, #48]
  66 002c 42F00102 		orr	r2, r2, #1
  67 0030 1A63     		str	r2, [r3, #48]
  68 0032 1A6B     		ldr	r2, [r3, #48]
  69 0034 02F00102 		and	r2, r2, #1
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 922:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  74              		.loc 1 922 0
  75 003c 0394     		str	r4, [sp, #12]
  76 003e 1A6B     		ldr	r2, [r3, #48]
  77 0040 42F00202 		orr	r2, r2, #2
  78 0044 1A63     		str	r2, [r3, #48]
  79 0046 1A6B     		ldr	r2, [r3, #48]
  80 0048 02F00202 		and	r2, r2, #2
  81 004c 0392     		str	r2, [sp, #12]
  82 004e 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 923:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  85              		.loc 1 923 0
  86 0050 0494     		str	r4, [sp, #16]
  87 0052 1A6B     		ldr	r2, [r3, #48]
  88 0054 42F00402 		orr	r2, r2, #4
  89 0058 1A63     		str	r2, [r3, #48]
  90 005a 1B6B     		ldr	r3, [r3, #48]
  91 005c 03F00403 		and	r3, r3, #4
  92 0060 0493     		str	r3, [sp, #16]
  93 0062 049B     		ldr	r3, [sp, #16]
  94              	.LBE5:
 924:Src/main.c    **** 
 925:Src/main.c    ****     /*Configure GPIO pin Output Level */
 926:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  95              		.loc 1 926 0
  96 0064 224D     		ldr	r5, .L3+4
  97 0066 0122     		movs	r2, #1
  98 0068 4021     		movs	r1, #64
  99 006a 2846     		mov	r0, r5
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
ARM GAS  /tmp/cc7zquCe.s 			page 19


 927:Src/main.c    **** 
 928:Src/main.c    ****     /*Configure GPIO pin Output Level */
 929:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 102              		.loc 1 929 0
 103 0070 2246     		mov	r2, r4
 104 0072 4FF40071 		mov	r1, #512
 105 0076 2846     		mov	r0, r5
 106 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 930:Src/main.c    **** 
 931:Src/main.c    ****     /*Configure GPIO pin Output Level */
 932:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 108              		.loc 1 932 0
 109 007c DFF87880 		ldr	r8, .L3+12
 110 0080 2246     		mov	r2, r4
 111 0082 4FF48071 		mov	r1, #256
 112 0086 4046     		mov	r0, r8
 113 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL2:
 933:Src/main.c    **** 
 934:Src/main.c    ****     /*Configure GPIO pin : PC6 */
 935:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_6;
 115              		.loc 1 935 0
 116 008c 4023     		movs	r3, #64
 117 008e 0593     		str	r3, [sp, #20]
 936:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 936 0
 119 0090 0127     		movs	r7, #1
 120 0092 0697     		str	r7, [sp, #24]
 937:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 937 0
 122 0094 0794     		str	r4, [sp, #28]
 938:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 123              		.loc 1 938 0
 124 0096 0323     		movs	r3, #3
 125 0098 0893     		str	r3, [sp, #32]
 939:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 126              		.loc 1 939 0
 127 009a 05A9     		add	r1, sp, #20
 128 009c 2846     		mov	r0, r5
 129 009e FFF7FEFF 		bl	HAL_GPIO_Init
 130              	.LVL3:
 940:Src/main.c    **** 
 941:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 942:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 131              		.loc 1 942 0
 132 00a2 4FF48076 		mov	r6, #256
 133 00a6 0596     		str	r6, [sp, #20]
 943:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 943 0
 135 00a8 0694     		str	r4, [sp, #24]
 944:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 944 0
 137 00aa 0794     		str	r4, [sp, #28]
 945:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 138              		.loc 1 945 0
 139 00ac 05A9     		add	r1, sp, #20
ARM GAS  /tmp/cc7zquCe.s 			page 20


 140 00ae 2846     		mov	r0, r5
 141 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL4:
 946:Src/main.c    **** 
 947:Src/main.c    ****     /*Configure GPIO pin : PC9 */
 948:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_9;
 143              		.loc 1 948 0
 144 00b4 4FF40073 		mov	r3, #512
 145 00b8 0593     		str	r3, [sp, #20]
 949:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 949 0
 147 00ba 0697     		str	r7, [sp, #24]
 950:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 950 0
 149 00bc 0794     		str	r4, [sp, #28]
 951:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 150              		.loc 1 951 0
 151 00be 0894     		str	r4, [sp, #32]
 952:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 152              		.loc 1 952 0
 153 00c0 05A9     		add	r1, sp, #20
 154 00c2 2846     		mov	r0, r5
 155 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL5:
 953:Src/main.c    **** 
 954:Src/main.c    ****     /*Configure GPIO pin : PA8 */
 955:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 157              		.loc 1 955 0
 158 00c8 0596     		str	r6, [sp, #20]
 956:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 159              		.loc 1 956 0
 160 00ca 0697     		str	r7, [sp, #24]
 957:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 957 0
 162 00cc 0794     		str	r4, [sp, #28]
 958:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 163              		.loc 1 958 0
 164 00ce 0894     		str	r4, [sp, #32]
 959:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 959 0
 166 00d0 05A9     		add	r1, sp, #20
 167 00d2 4046     		mov	r0, r8
 168 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL6:
 960:Src/main.c    **** 
 961:Src/main.c    ****     /*Configure GPIO pin : PB8 */
 962:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 170              		.loc 1 962 0
 171 00d8 0596     		str	r6, [sp, #20]
 963:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 172              		.loc 1 963 0
 173 00da 0694     		str	r4, [sp, #24]
 964:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 174              		.loc 1 964 0
 175 00dc 0794     		str	r4, [sp, #28]
 965:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 176              		.loc 1 965 0
ARM GAS  /tmp/cc7zquCe.s 			page 21


 177 00de 05A9     		add	r1, sp, #20
 178 00e0 0448     		ldr	r0, .L3+8
 179 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL7:
 966:Src/main.c    **** }
 181              		.loc 1 966 0
 182 00e6 0AB0     		add	sp, sp, #40
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 24
 185              		@ sp needed
 186 00e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 187              	.L4:
 188              		.align	2
 189              	.L3:
 190 00ec 00380240 		.word	1073887232
 191 00f0 00080240 		.word	1073874944
 192 00f4 00040240 		.word	1073873920
 193 00f8 00000240 		.word	1073872896
 194              		.cfi_endproc
 195              	.LFE149:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	MX_DMA_Init:
 205              	.LFB148:
 899:Src/main.c    **** 
 206              		.loc 1 899 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 16
 217              	.LBB6:
 902:Src/main.c    **** 
 218              		.loc 1 902 0
 219 0004 0021     		movs	r1, #0
 220 0006 0191     		str	r1, [sp, #4]
 221 0008 094B     		ldr	r3, .L7
 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F48002 		orr	r2, r2, #4194304
 224 0010 1A63     		str	r2, [r3, #48]
 225 0012 1B6B     		ldr	r3, [r3, #48]
 226 0014 03F48003 		and	r3, r3, #4194304
 227 0018 0193     		str	r3, [sp, #4]
 228 001a 019B     		ldr	r3, [sp, #4]
 229              	.LBE6:
 906:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 906 0
 231 001c 0A46     		mov	r2, r1
ARM GAS  /tmp/cc7zquCe.s 			page 22


 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL8:
 907:Src/main.c    **** }
 235              		.loc 1 907 0
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL9:
 908:Src/main.c    **** 
 239              		.loc 1 908 0
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE148:
 252              		.section	.text.MX_NVIC_Init,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	MX_NVIC_Init:
 260              	.LFB134:
 356:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 261              		.loc 1 356 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 358:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 270              		.loc 1 358 0
 271 0002 0022     		movs	r2, #0
 272 0004 1146     		mov	r1, r2
 273 0006 1320     		movs	r0, #19
 274 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 275              	.LVL10:
 359:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 276              		.loc 1 359 0
 277 000c 1320     		movs	r0, #19
 278 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 279              	.LVL11:
 361:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 280              		.loc 1 361 0
 281 0012 0022     		movs	r2, #0
 282 0014 1146     		mov	r1, r2
 283 0016 1420     		movs	r0, #20
 284 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/cc7zquCe.s 			page 23


 285              	.LVL12:
 362:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 286              		.loc 1 362 0
 287 001c 1420     		movs	r0, #20
 288 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 289              	.LVL13:
 364:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 290              		.loc 1 364 0
 291 0022 0022     		movs	r2, #0
 292 0024 1146     		mov	r1, r2
 293 0026 1520     		movs	r0, #21
 294 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL14:
 365:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 296              		.loc 1 365 0
 297 002c 1520     		movs	r0, #21
 298 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 299              	.LVL15:
 367:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 300              		.loc 1 367 0
 301 0032 0022     		movs	r2, #0
 302 0034 1146     		mov	r1, r2
 303 0036 1620     		movs	r0, #22
 304 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 305              	.LVL16:
 368:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 306              		.loc 1 368 0
 307 003c 1620     		movs	r0, #22
 308 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 309              	.LVL17:
 370:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 310              		.loc 1 370 0
 311 0042 0022     		movs	r2, #0
 312 0044 1146     		mov	r1, r2
 313 0046 1220     		movs	r0, #18
 314 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 315              	.LVL18:
 371:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 316              		.loc 1 371 0
 317 004c 1220     		movs	r0, #18
 318 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 319              	.LVL19:
 373:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 320              		.loc 1 373 0
 321 0052 0022     		movs	r2, #0
 322 0054 1146     		mov	r1, r2
 323 0056 3720     		movs	r0, #55
 324 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 325              	.LVL20:
 374:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 326              		.loc 1 374 0
 327 005c 3720     		movs	r0, #55
 328 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 329              	.LVL21:
 376:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 330              		.loc 1 376 0
 331 0062 0022     		movs	r2, #0
ARM GAS  /tmp/cc7zquCe.s 			page 24


 332 0064 1146     		mov	r1, r2
 333 0066 3620     		movs	r0, #54
 334 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 335              	.LVL22:
 377:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 336              		.loc 1 377 0
 337 006c 3620     		movs	r0, #54
 338 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 339              	.LVL23:
 379:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 340              		.loc 1 379 0
 341 0072 0022     		movs	r2, #0
 342 0074 1146     		mov	r1, r2
 343 0076 3220     		movs	r0, #50
 344 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 345              	.LVL24:
 380:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 346              		.loc 1 380 0
 347 007c 3220     		movs	r0, #50
 348 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 349              	.LVL25:
 382:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 350              		.loc 1 382 0
 351 0082 0022     		movs	r2, #0
 352 0084 1146     		mov	r1, r2
 353 0086 1C20     		movs	r0, #28
 354 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 355              	.LVL26:
 383:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 356              		.loc 1 383 0
 357 008c 1C20     		movs	r0, #28
 358 008e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 359              	.LVL27:
 385:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 360              		.loc 1 385 0
 361 0092 0022     		movs	r2, #0
 362 0094 1146     		mov	r1, r2
 363 0096 1920     		movs	r0, #25
 364 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 365              	.LVL28:
 386:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 366              		.loc 1 386 0
 367 009c 1920     		movs	r0, #25
 368 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 369              	.LVL29:
 388:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 370              		.loc 1 388 0
 371 00a2 0022     		movs	r2, #0
 372 00a4 1146     		mov	r1, r2
 373 00a6 2520     		movs	r0, #37
 374 00a8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 375              	.LVL30:
 389:Src/main.c    **** }
 376              		.loc 1 389 0
 377 00ac 2520     		movs	r0, #37
 378 00ae FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 379              	.LVL31:
ARM GAS  /tmp/cc7zquCe.s 			page 25


 380 00b2 08BD     		pop	{r3, pc}
 381              		.cfi_endproc
 382              	.LFE134:
 384              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_ADC_ConvCpltCallback
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	HAL_ADC_ConvCpltCallback:
 393              	.LFB131:
 128:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 394              		.loc 1 128 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL32:
 129:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 400              		.loc 1 129 0
 401 0000 054B     		ldr	r3, .L12
 402 0002 1968     		ldr	r1, [r3]
 403 0004 054A     		ldr	r2, .L12+4
 404 0006 1161     		str	r1, [r2, #16]
 130:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 405              		.loc 1 130 0
 406 0008 5968     		ldr	r1, [r3, #4]
 407 000a 054A     		ldr	r2, .L12+8
 408 000c 1161     		str	r1, [r2, #16]
 131:Src/main.c    ****     /*int txt_1[100];
 409              		.loc 1 131 0
 410 000e 9A68     		ldr	r2, [r3, #8]
 411 0010 044B     		ldr	r3, .L12+12
 412 0012 1A61     		str	r2, [r3, #16]
 413 0014 7047     		bx	lr
 414              	.L13:
 415 0016 00BF     		.align	2
 416              	.L12:
 417 0018 00000000 		.word	ADC_buffer
 418 001c 00000000 		.word	pot_1
 419 0020 00000000 		.word	pot_2
 420 0024 00000000 		.word	pot_3
 421              		.cfi_endproc
 422              	.LFE131:
 424              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 425              		.align	1
 426              		.global	HAL_UART_RxCpltCallback
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	HAL_UART_RxCpltCallback:
 433              	.LFB150:
 967:Src/main.c    **** 
 968:Src/main.c    **** /* USER CODE BEGIN 4 */
 969:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
ARM GAS  /tmp/cc7zquCe.s 			page 26


 970:Src/main.c    **** {
 434              		.loc 1 970 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL33:
 439 0000 08B5     		push	{r3, lr}
 440              	.LCFI7:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 3, -8
 443              		.cfi_offset 14, -4
 971:Src/main.c    ****     if (huart == &huart1)
 444              		.loc 1 971 0
 445 0002 044B     		ldr	r3, .L18
 446 0004 9842     		cmp	r0, r3
 447 0006 00D0     		beq	.L17
 448              	.LVL34:
 449              	.L14:
 450 0008 08BD     		pop	{r3, pc}
 451              	.LVL35:
 452              	.L17:
 972:Src/main.c    ****     {
 973:Src/main.c    ****         gps_read_it(huart, &gps_main);
 453              		.loc 1 973 0
 454 000a 0349     		ldr	r1, .L18+4
 455 000c FFF7FEFF 		bl	gps_read_it
 456              	.LVL36:
 974:Src/main.c    ****     }
 975:Src/main.c    **** }
 457              		.loc 1 975 0
 458 0010 FAE7     		b	.L14
 459              	.L19:
 460 0012 00BF     		.align	2
 461              	.L18:
 462 0014 00000000 		.word	huart1
 463 0018 00000000 		.word	gps_main
 464              		.cfi_endproc
 465              	.LFE150:
 467              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 468              		.align	1
 469              		.global	HAL_UART_TxCpltCallback
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	HAL_UART_TxCpltCallback:
 476              	.LFB151:
 976:Src/main.c    **** 
 977:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 978:Src/main.c    **** {
 477              		.loc 1 978 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL37:
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI8:
ARM GAS  /tmp/cc7zquCe.s 			page 27


 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
 979:Src/main.c    ****     if (huart == &huart2)
 487              		.loc 1 979 0
 488 0002 044B     		ldr	r3, .L24
 489 0004 8342     		cmp	r3, r0
 490 0006 00D0     		beq	.L23
 491              	.LVL38:
 492              	.L20:
 493 0008 08BD     		pop	{r3, pc}
 494              	.LVL39:
 495              	.L23:
 980:Src/main.c    ****     {
 981:Src/main.c    ****         print_it(&huart2);
 496              		.loc 1 981 0
 497 000a 1846     		mov	r0, r3
 498              	.LVL40:
 499 000c FFF7FEFF 		bl	print_it
 500              	.LVL41:
 982:Src/main.c    ****     }
 983:Src/main.c    **** }
 501              		.loc 1 983 0
 502 0010 FAE7     		b	.L20
 503              	.L25:
 504 0012 00BF     		.align	2
 505              	.L24:
 506 0014 00000000 		.word	huart2
 507              		.cfi_endproc
 508              	.LFE151:
 510              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 511              		.align	1
 512              		.global	HAL_CAN_RxFifo0FullCallback
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	HAL_CAN_RxFifo0FullCallback:
 519              	.LFB152:
 984:Src/main.c    **** 
 985:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 986:Src/main.c    **** {
 520              		.loc 1 986 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              	.LVL42:
 525 0000 38B5     		push	{r3, r4, r5, lr}
 526              	.LCFI9:
 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
 987:Src/main.c    ****     /// CALIBRATION CODE///
 988:Src/main.c    ****     int idsave = CAN_Receive(&can);
 532              		.loc 1 988 0
ARM GAS  /tmp/cc7zquCe.s 			page 28


 533 0002 4B48     		ldr	r0, .L46
 534              	.LVL43:
 535 0004 FFF7FEFF 		bl	CAN_Receive
 536              	.LVL44:
 537 0008 0446     		mov	r4, r0
 538              	.LVL45:
 989:Src/main.c    ****     //201/202
 990:Src/main.c    **** 
 991:Src/main.c    ****     if (idsave == 0x55 || idsave == 0x201)
 539              		.loc 1 991 0
 540 000a 5528     		cmp	r0, #85
 541 000c 1ED0     		beq	.L27
 542              		.loc 1 991 0 is_stmt 0 discriminator 1
 543 000e 40F20123 		movw	r3, #513
 544 0012 9842     		cmp	r0, r3
 545 0014 1AD0     		beq	.L27
 546              	.LVL46:
 547              	.L28:
 992:Src/main.c    ****     {
 993:Src/main.c    ****         if (can.dataRx[0] == 0x51 || can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0
 994:Src/main.c    ****         {
 995:Src/main.c    ****             command_flag = 1;
 996:Src/main.c    ****             idsave = 0;
 997:Src/main.c    ****         }
 998:Src/main.c    ****     }
 999:Src/main.c    ****     if (idsave == 0xA0 || idsave == 0xAA || idsave == 0x181)
 548              		.loc 1 999 0 is_stmt 1
 549 0016 A02C     		cmp	r4, #160
 550 0018 05D0     		beq	.L30
 551              		.loc 1 999 0 is_stmt 0 discriminator 1
 552 001a AA2C     		cmp	r4, #170
 553 001c 03D0     		beq	.L30
 554              		.loc 1 999 0 discriminator 2
 555 001e 40F28113 		movw	r3, #385
 556 0022 9C42     		cmp	r4, r3
 557 0024 0DD1     		bne	.L31
 558              	.L30:
1000:Src/main.c    ****     {
1001:Src/main.c    ****         if (can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0
 559              		.loc 1 1001 0 is_stmt 1
 560 0026 424B     		ldr	r3, .L46
 561 0028 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 562 002a D31E     		subs	r3, r2, #3
 563 002c DBB2     		uxtb	r3, r3
 564 002e 022B     		cmp	r3, #2
 565 0030 03D9     		bls	.L32
 566              		.loc 1 1001 0 is_stmt 0 discriminator 1
 567 0032 082A     		cmp	r2, #8
 568 0034 01D0     		beq	.L32
 569              		.loc 1 1001 0 discriminator 2
 570 0036 D82A     		cmp	r2, #216
 571 0038 03D1     		bne	.L31
 572              	.L32:
1002:Src/main.c    ****         {
1003:Src/main.c    ****             command_flag = 1;
 573              		.loc 1 1003 0 is_stmt 1
 574 003a 0122     		movs	r2, #1
ARM GAS  /tmp/cc7zquCe.s 			page 29


 575 003c 3D4B     		ldr	r3, .L46+4
 576 003e 1A60     		str	r2, [r3]
 577              	.LVL47:
1004:Src/main.c    ****             idsave = 0;
 578              		.loc 1 1004 0
 579 0040 0024     		movs	r4, #0
 580              	.LVL48:
 581              	.L31:
1005:Src/main.c    ****         }
1006:Src/main.c    ****     }
1007:Src/main.c    **** 
1008:Src/main.c    ****     if (idsave == 0xBB)
 582              		.loc 1 1008 0
 583 0042 BB2C     		cmp	r4, #187
 584 0044 17D0     		beq	.L42
 585              	.L33:
1009:Src/main.c    ****     {
1010:Src/main.c    ****         //sprintf(val0, "APPS1: %d \r\n", idsave);  //use "%lu" for long, "%d" for int
1011:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), 10);
1012:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 0))
1013:Src/main.c    ****         {
1014:Src/main.c    ****             set_min(&pot_2);
1015:Src/main.c    ****             calibration_flag = 1;
1016:Src/main.c    **** 
1017:Src/main.c    ****             can.dataTx[0] = 2;
1018:Src/main.c    ****             can.dataTx[1] = 0;
1019:Src/main.c    ****             can.dataTx[2] = 0;
1020:Src/main.c    ****             can.dataTx[3] = 0;
1021:Src/main.c    ****             can.dataTx[4] = 0;
1022:Src/main.c    ****             can.dataTx[5] = 0;
1023:Src/main.c    ****             can.dataTx[6] = 0;
1024:Src/main.c    ****             can.dataTx[7] = 0;
1025:Src/main.c    ****             can.id = 0xBC;
1026:Src/main.c    ****             can.size = 8;
1027:Src/main.c    ****             for (int i = 0; i < 10; i++)
1028:Src/main.c    ****             {
1029:Src/main.c    ****                 CAN_Send(&can);
1030:Src/main.c    ****             }
1031:Src/main.c    ****         }
1032:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 1))
1033:Src/main.c    ****         {
1034:Src/main.c    ****             set_max(&pot_2);
1035:Src/main.c    ****             calibration_flag = 0;
1036:Src/main.c    **** 
1037:Src/main.c    ****             can.dataTx[0] = 2;
1038:Src/main.c    ****             can.dataTx[1] = 1;
1039:Src/main.c    ****             can.dataTx[2] = 0;
1040:Src/main.c    ****             can.dataTx[3] = 0;
1041:Src/main.c    ****             can.dataTx[4] = 0;
1042:Src/main.c    ****             can.dataTx[5] = 0;
1043:Src/main.c    ****             ;
1044:Src/main.c    ****             can.dataTx[6] = 0;
1045:Src/main.c    ****             can.dataTx[7] = 0;
1046:Src/main.c    ****             can.id = 0xBC;
1047:Src/main.c    ****             can.size = 8;
1048:Src/main.c    ****             for (int i = 0; i < 10; i++)
1049:Src/main.c    ****             {
ARM GAS  /tmp/cc7zquCe.s 			page 30


1050:Src/main.c    ****                 CAN_Send(&can);
1051:Src/main.c    ****             }
1052:Src/main.c    ****         }
1053:Src/main.c    ****         //val0rang = abs(valMax0 - valMin0);
1054:Src/main.c    ****         pot_2.range = abs(pot_2.max - pot_2.min);
1055:Src/main.c    ****         int max_tmp = pot_2.max;
1056:Src/main.c    ****         int min_tmp = pot_2.min;
1057:Src/main.c    ****         if (max_tmp > min_tmp)
1058:Src/main.c    ****         {
1059:Src/main.c    ****             pot_2.max = max_tmp;
1060:Src/main.c    ****             pot_2.min = min_tmp;
1061:Src/main.c    ****         }
1062:Src/main.c    ****         if (max_tmp < min_tmp)
1063:Src/main.c    ****         {
1064:Src/main.c    ****             pot_2.max = min_tmp;
1065:Src/main.c    ****             pot_2.min = max_tmp;
1066:Src/main.c    ****         }
1067:Src/main.c    ****     }
1068:Src/main.c    **** 
1069:Src/main.c    ****     //TIMER Interrupt setup via CAN Message
1070:Src/main.c    ****     if (idsave == 195 && can.dataRx[0] == 1)
 586              		.loc 1 1070 0
 587 0046 C32C     		cmp	r4, #195
 588 0048 65D0     		beq	.L43
 589              	.L26:
 590 004a 38BD     		pop	{r3, r4, r5, pc}
 591              	.LVL49:
 592              	.L27:
 993:Src/main.c    ****         {
 593              		.loc 1 993 0
 594 004c 384B     		ldr	r3, .L46
 595 004e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 596 0050 512B     		cmp	r3, #81
 597 0052 0BD0     		beq	.L29
 993:Src/main.c    ****         {
 598              		.loc 1 993 0 is_stmt 0 discriminator 1
 599 0054 032B     		cmp	r3, #3
 600 0056 09D0     		beq	.L29
 993:Src/main.c    ****         {
 601              		.loc 1 993 0 discriminator 2
 602 0058 042B     		cmp	r3, #4
 603 005a 07D0     		beq	.L29
 993:Src/main.c    ****         {
 604              		.loc 1 993 0 discriminator 3
 605 005c 052B     		cmp	r3, #5
 606 005e 05D0     		beq	.L29
 993:Src/main.c    ****         {
 607              		.loc 1 993 0 discriminator 4
 608 0060 082B     		cmp	r3, #8
 609 0062 03D0     		beq	.L29
 993:Src/main.c    ****         {
 610              		.loc 1 993 0 discriminator 5
 611 0064 0A2B     		cmp	r3, #10
 612 0066 01D0     		beq	.L29
 993:Src/main.c    ****         {
 613              		.loc 1 993 0 discriminator 6
 614 0068 0B2B     		cmp	r3, #11
ARM GAS  /tmp/cc7zquCe.s 			page 31


 615 006a D4D1     		bne	.L28
 616              	.L29:
 995:Src/main.c    ****             idsave = 0;
 617              		.loc 1 995 0 is_stmt 1
 618 006c 0122     		movs	r2, #1
 619 006e 314B     		ldr	r3, .L46+4
 620 0070 1A60     		str	r2, [r3]
 621              	.LVL50:
 996:Src/main.c    ****         }
 622              		.loc 1 996 0
 623 0072 0024     		movs	r4, #0
 624 0074 CFE7     		b	.L28
 625              	.LVL51:
 626              	.L42:
 627              	.LBB7:
1012:Src/main.c    ****         {
 628              		.loc 1 1012 0
 629 0076 2E4B     		ldr	r3, .L46
 630 0078 1B8A     		ldrh	r3, [r3, #16]
 631 007a 022B     		cmp	r3, #2
 632 007c 11D0     		beq	.L44
 633              	.L34:
1032:Src/main.c    ****         {
 634              		.loc 1 1032 0
 635 007e 2C4B     		ldr	r3, .L46
 636 0080 1B8A     		ldrh	r3, [r3, #16]
 637 0082 B3F5817F 		cmp	r3, #258
 638 0086 29D0     		beq	.L45
 639              	.L37:
1054:Src/main.c    ****         int max_tmp = pot_2.max;
 640              		.loc 1 1054 0
 641 0088 2B4B     		ldr	r3, .L46+8
 642 008a 5968     		ldr	r1, [r3, #4]
 643 008c 9868     		ldr	r0, [r3, #8]
 644 008e 0A1A     		subs	r2, r1, r0
 645 0090 002A     		cmp	r2, #0
 646 0092 B8BF     		it	lt
 647 0094 5242     		rsblt	r2, r2, #0
 648 0096 DA60     		str	r2, [r3, #12]
 649              	.LVL52:
1062:Src/main.c    ****         {
 650              		.loc 1 1062 0
 651 0098 8142     		cmp	r1, r0
 652 009a D4DA     		bge	.L33
1064:Src/main.c    ****             pot_2.min = max_tmp;
 653              		.loc 1 1064 0
 654 009c 5860     		str	r0, [r3, #4]
1065:Src/main.c    ****         }
 655              		.loc 1 1065 0
 656 009e 9960     		str	r1, [r3, #8]
 657 00a0 D1E7     		b	.L33
 658              	.LVL53:
 659              	.L44:
1014:Src/main.c    ****             calibration_flag = 1;
 660              		.loc 1 1014 0
 661 00a2 2548     		ldr	r0, .L46+8
 662 00a4 FFF7FEFF 		bl	set_min
ARM GAS  /tmp/cc7zquCe.s 			page 32


 663              	.LVL54:
1015:Src/main.c    **** 
 664              		.loc 1 1015 0
 665 00a8 0122     		movs	r2, #1
 666 00aa 244B     		ldr	r3, .L46+12
 667 00ac 1A60     		str	r2, [r3]
1017:Src/main.c    ****             can.dataTx[1] = 0;
 668              		.loc 1 1017 0
 669 00ae 204B     		ldr	r3, .L46
 670 00b0 0222     		movs	r2, #2
 671 00b2 1A72     		strb	r2, [r3, #8]
1018:Src/main.c    ****             can.dataTx[2] = 0;
 672              		.loc 1 1018 0
 673 00b4 0025     		movs	r5, #0
 674 00b6 5D72     		strb	r5, [r3, #9]
1019:Src/main.c    ****             can.dataTx[3] = 0;
 675              		.loc 1 1019 0
 676 00b8 9D72     		strb	r5, [r3, #10]
1020:Src/main.c    ****             can.dataTx[4] = 0;
 677              		.loc 1 1020 0
 678 00ba DD72     		strb	r5, [r3, #11]
1021:Src/main.c    ****             can.dataTx[5] = 0;
 679              		.loc 1 1021 0
 680 00bc 1D73     		strb	r5, [r3, #12]
1022:Src/main.c    ****             can.dataTx[6] = 0;
 681              		.loc 1 1022 0
 682 00be 5D73     		strb	r5, [r3, #13]
1023:Src/main.c    ****             can.dataTx[7] = 0;
 683              		.loc 1 1023 0
 684 00c0 9D73     		strb	r5, [r3, #14]
1024:Src/main.c    ****             can.id = 0xBC;
 685              		.loc 1 1024 0
 686 00c2 DD73     		strb	r5, [r3, #15]
1025:Src/main.c    ****             can.size = 8;
 687              		.loc 1 1025 0
 688 00c4 BC22     		movs	r2, #188
 689 00c6 1A60     		str	r2, [r3]
1026:Src/main.c    ****             for (int i = 0; i < 10; i++)
 690              		.loc 1 1026 0
 691 00c8 0822     		movs	r2, #8
 692 00ca 5A60     		str	r2, [r3, #4]
 693              	.LVL55:
 694              	.LBB8:
1027:Src/main.c    ****             {
 695              		.loc 1 1027 0
 696 00cc 03E0     		b	.L35
 697              	.LVL56:
 698              	.L36:
1029:Src/main.c    ****             }
 699              		.loc 1 1029 0 discriminator 3
 700 00ce 1848     		ldr	r0, .L46
 701 00d0 FFF7FEFF 		bl	CAN_Send
 702              	.LVL57:
1027:Src/main.c    ****             {
 703              		.loc 1 1027 0 discriminator 3
 704 00d4 0135     		adds	r5, r5, #1
 705              	.LVL58:
ARM GAS  /tmp/cc7zquCe.s 			page 33


 706              	.L35:
1027:Src/main.c    ****             {
 707              		.loc 1 1027 0 is_stmt 0 discriminator 1
 708 00d6 092D     		cmp	r5, #9
 709 00d8 F9DD     		ble	.L36
 710 00da D0E7     		b	.L34
 711              	.LVL59:
 712              	.L45:
 713              	.LBE8:
1034:Src/main.c    ****             calibration_flag = 0;
 714              		.loc 1 1034 0 is_stmt 1
 715 00dc 1648     		ldr	r0, .L46+8
 716 00de FFF7FEFF 		bl	set_max
 717              	.LVL60:
1035:Src/main.c    **** 
 718              		.loc 1 1035 0
 719 00e2 0025     		movs	r5, #0
 720 00e4 154B     		ldr	r3, .L46+12
 721 00e6 1D60     		str	r5, [r3]
1037:Src/main.c    ****             can.dataTx[1] = 1;
 722              		.loc 1 1037 0
 723 00e8 114B     		ldr	r3, .L46
 724 00ea 0222     		movs	r2, #2
 725 00ec 1A72     		strb	r2, [r3, #8]
1038:Src/main.c    ****             can.dataTx[2] = 0;
 726              		.loc 1 1038 0
 727 00ee 0122     		movs	r2, #1
 728 00f0 5A72     		strb	r2, [r3, #9]
1039:Src/main.c    ****             can.dataTx[3] = 0;
 729              		.loc 1 1039 0
 730 00f2 9D72     		strb	r5, [r3, #10]
1040:Src/main.c    ****             can.dataTx[4] = 0;
 731              		.loc 1 1040 0
 732 00f4 DD72     		strb	r5, [r3, #11]
1041:Src/main.c    ****             can.dataTx[5] = 0;
 733              		.loc 1 1041 0
 734 00f6 1D73     		strb	r5, [r3, #12]
1042:Src/main.c    ****             ;
 735              		.loc 1 1042 0
 736 00f8 5D73     		strb	r5, [r3, #13]
1044:Src/main.c    ****             can.dataTx[7] = 0;
 737              		.loc 1 1044 0
 738 00fa 9D73     		strb	r5, [r3, #14]
1045:Src/main.c    ****             can.id = 0xBC;
 739              		.loc 1 1045 0
 740 00fc DD73     		strb	r5, [r3, #15]
1046:Src/main.c    ****             can.size = 8;
 741              		.loc 1 1046 0
 742 00fe BC22     		movs	r2, #188
 743 0100 1A60     		str	r2, [r3]
1047:Src/main.c    ****             for (int i = 0; i < 10; i++)
 744              		.loc 1 1047 0
 745 0102 0822     		movs	r2, #8
 746 0104 5A60     		str	r2, [r3, #4]
 747              	.LVL61:
 748              	.LBB9:
1048:Src/main.c    ****             {
ARM GAS  /tmp/cc7zquCe.s 			page 34


 749              		.loc 1 1048 0
 750 0106 03E0     		b	.L38
 751              	.LVL62:
 752              	.L39:
1050:Src/main.c    ****             }
 753              		.loc 1 1050 0 discriminator 3
 754 0108 0948     		ldr	r0, .L46
 755 010a FFF7FEFF 		bl	CAN_Send
 756              	.LVL63:
1048:Src/main.c    ****             {
 757              		.loc 1 1048 0 discriminator 3
 758 010e 0135     		adds	r5, r5, #1
 759              	.LVL64:
 760              	.L38:
1048:Src/main.c    ****             {
 761              		.loc 1 1048 0 is_stmt 0 discriminator 1
 762 0110 092D     		cmp	r5, #9
 763 0112 F9DD     		ble	.L39
 764 0114 B8E7     		b	.L37
 765              	.LVL65:
 766              	.L43:
 767              	.LBE9:
 768              	.LBE7:
 769              		.loc 1 1070 0 is_stmt 1 discriminator 1
 770 0116 064B     		ldr	r3, .L46
 771 0118 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 772 011a 012B     		cmp	r3, #1
 773 011c 95D1     		bne	.L26
1071:Src/main.c    ****     {
1072:Src/main.c    ****         multiplier = can.dataRx[1] * 256 + can.dataRx[2];
 774              		.loc 1 1072 0
 775 011e 044A     		ldr	r2, .L46
 776 0120 517C     		ldrb	r1, [r2, #17]	@ zero_extendqisi2
 777 0122 937C     		ldrb	r3, [r2, #18]	@ zero_extendqisi2
 778 0124 03EB0123 		add	r3, r3, r1, lsl #8
 779 0128 054A     		ldr	r2, .L46+16
 780 012a 1360     		str	r3, [r2]
1073:Src/main.c    ****     }
1074:Src/main.c    **** }
 781              		.loc 1 1074 0
 782 012c 8DE7     		b	.L26
 783              	.L47:
 784 012e 00BF     		.align	2
 785              	.L46:
 786 0130 00000000 		.word	can
 787 0134 00000000 		.word	.LANCHOR0
 788 0138 00000000 		.word	pot_2
 789 013c 00000000 		.word	.LANCHOR1
 790 0140 00000000 		.word	.LANCHOR2
 791              		.cfi_endproc
 792              	.LFE152:
 794              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 795              		.align	1
 796              		.global	HAL_TIM_PeriodElapsedCallback
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
ARM GAS  /tmp/cc7zquCe.s 			page 35


 800              		.fpu fpv4-sp-d16
 802              	HAL_TIM_PeriodElapsedCallback:
 803              	.LFB153:
1075:Src/main.c    **** 
1076:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1077:Src/main.c    **** {
 804              		.loc 1 1077 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              	.LVL66:
 809 0000 10B5     		push	{r4, lr}
 810              	.LCFI10:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 4, -8
 813              		.cfi_offset 14, -4
 814 0002 0446     		mov	r4, r0
1078:Src/main.c    **** 
1079:Src/main.c    ****     if (htim == &htim10)
 815              		.loc 1 1079 0
 816 0004 194B     		ldr	r3, .L61
 817 0006 9842     		cmp	r0, r3
 818 0008 03D0     		beq	.L56
 819              	.LVL67:
 820              	.L49:
1080:Src/main.c    ****     {
1081:Src/main.c    ****         //READING SENSORS
1082:Src/main.c    ****         if (flag == 1 * multiplier)
1083:Src/main.c    ****         {
1084:Src/main.c    ****             // ACCEL
1085:Src/main.c    ****             LSMD9S0_accel_read(&imu);
1086:Src/main.c    ****         }
1087:Src/main.c    ****         else if (flag == 2 * multiplier)
1088:Src/main.c    ****         {
1089:Src/main.c    ****             // STEER
1090:Src/main.c    ****             calc_pot_value(&pot_2);
1091:Src/main.c    ****         }
1092:Src/main.c    ****         else if (flag == 3 * multiplier)
1093:Src/main.c    ****         {
1094:Src/main.c    ****             // GYRO
1095:Src/main.c    ****             LSMD9S0_gyro_read(&imu);
1096:Src/main.c    ****         }
1097:Src/main.c    **** 
1098:Src/main.c    ****         if (flag >= (3 * multiplier))
1099:Src/main.c    ****         {
1100:Src/main.c    ****             flag = 0;
1101:Src/main.c    ****         }
1102:Src/main.c    ****         else
1103:Src/main.c    ****         {
1104:Src/main.c    ****             flag++;
1105:Src/main.c    ****         }
1106:Src/main.c    ****     }
1107:Src/main.c    **** 
1108:Src/main.c    ****     if (htim == &htim7)
 821              		.loc 1 1108 0
 822 000a 194B     		ldr	r3, .L61+4
 823 000c 9C42     		cmp	r4, r3
ARM GAS  /tmp/cc7zquCe.s 			page 36


 824 000e 29D0     		beq	.L57
 825              	.L48:
 826 0010 10BD     		pop	{r4, pc}
 827              	.LVL68:
 828              	.L56:
1082:Src/main.c    ****         {
 829              		.loc 1 1082 0
 830 0012 184B     		ldr	r3, .L61+8
 831 0014 1A68     		ldr	r2, [r3]
 832 0016 184B     		ldr	r3, .L61+12
 833 0018 1B68     		ldr	r3, [r3]
 834 001a 9A42     		cmp	r2, r3
 835 001c 12D0     		beq	.L58
1087:Src/main.c    ****         {
 836              		.loc 1 1087 0
 837 001e B2EB430F 		cmp	r2, r3, lsl #1
 838 0022 13D0     		beq	.L59
1092:Src/main.c    ****         {
 839              		.loc 1 1092 0
 840 0024 03EB4303 		add	r3, r3, r3, lsl #1
 841 0028 9A42     		cmp	r2, r3
 842 002a 13D0     		beq	.L60
 843              	.LVL69:
 844              	.L51:
1098:Src/main.c    ****         {
 845              		.loc 1 1098 0
 846 002c 124B     		ldr	r3, .L61+12
 847 002e 1B68     		ldr	r3, [r3]
 848 0030 03EB4303 		add	r3, r3, r3, lsl #1
 849 0034 0F4A     		ldr	r2, .L61+8
 850 0036 1268     		ldr	r2, [r2]
 851 0038 9342     		cmp	r3, r2
 852 003a 0FDC     		bgt	.L53
1100:Src/main.c    ****         }
 853              		.loc 1 1100 0
 854 003c 0022     		movs	r2, #0
 855 003e 0D4B     		ldr	r3, .L61+8
 856 0040 1A60     		str	r2, [r3]
 857 0042 E2E7     		b	.L49
 858              	.LVL70:
 859              	.L58:
1085:Src/main.c    ****         }
 860              		.loc 1 1085 0
 861 0044 0D48     		ldr	r0, .L61+16
 862              	.LVL71:
 863 0046 FFF7FEFF 		bl	LSMD9S0_accel_read
 864              	.LVL72:
 865 004a EFE7     		b	.L51
 866              	.LVL73:
 867              	.L59:
1090:Src/main.c    ****         }
 868              		.loc 1 1090 0
 869 004c 0C48     		ldr	r0, .L61+20
 870              	.LVL74:
 871 004e FFF7FEFF 		bl	calc_pot_value
 872              	.LVL75:
 873 0052 EBE7     		b	.L51
ARM GAS  /tmp/cc7zquCe.s 			page 37


 874              	.LVL76:
 875              	.L60:
1095:Src/main.c    ****         }
 876              		.loc 1 1095 0
 877 0054 0948     		ldr	r0, .L61+16
 878              	.LVL77:
 879 0056 FFF7FEFF 		bl	LSMD9S0_gyro_read
 880              	.LVL78:
 881 005a E7E7     		b	.L51
 882              	.L53:
1104:Src/main.c    ****         }
 883              		.loc 1 1104 0
 884 005c 0132     		adds	r2, r2, #1
 885 005e 054B     		ldr	r3, .L61+8
 886 0060 1A60     		str	r2, [r3]
 887 0062 D2E7     		b	.L49
 888              	.L57:
1109:Src/main.c    ****     {
1110:Src/main.c    ****         encoder_tim_interrupt(&enc);
 889              		.loc 1 1110 0
 890 0064 0748     		ldr	r0, .L61+24
 891 0066 FFF7FEFF 		bl	encoder_tim_interrupt
 892              	.LVL79:
1111:Src/main.c    ****     }
1112:Src/main.c    **** }
 893              		.loc 1 1112 0
 894 006a D1E7     		b	.L48
 895              	.L62:
 896              		.align	2
 897              	.L61:
 898 006c 00000000 		.word	htim10
 899 0070 00000000 		.word	htim7
 900 0074 00000000 		.word	.LANCHOR3
 901 0078 00000000 		.word	.LANCHOR2
 902 007c 00000000 		.word	imu
 903 0080 00000000 		.word	pot_2
 904 0084 00000000 		.word	enc
 905              		.cfi_endproc
 906              	.LFE153:
 908              		.global	__aeabi_d2uiz
 909              		.global	__aeabi_ddiv
 910              		.section	.text.send_CAN_data,"ax",%progbits
 911              		.align	1
 912              		.global	send_CAN_data
 913              		.syntax unified
 914              		.thumb
 915              		.thumb_func
 916              		.fpu fpv4-sp-d16
 918              	send_CAN_data:
 919              	.LFB154:
1113:Src/main.c    **** 
1114:Src/main.c    **** int send_CAN_data(uint32_t millis)
1115:Src/main.c    **** {
 920              		.loc 1 1115 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 8
 923              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc7zquCe.s 			page 38


 924              	.LVL80:
 925 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 926              	.LCFI11:
 927              		.cfi_def_cfa_offset 24
 928              		.cfi_offset 4, -24
 929              		.cfi_offset 5, -20
 930              		.cfi_offset 6, -16
 931              		.cfi_offset 7, -12
 932              		.cfi_offset 8, -8
 933              		.cfi_offset 14, -4
 934 0004 82B0     		sub	sp, sp, #8
 935              	.LCFI12:
 936              		.cfi_def_cfa_offset 32
 937 0006 0446     		mov	r4, r0
 938              	.LVL81:
1116:Src/main.c    **** 
1117:Src/main.c    ****     int sent_flag = 0;
1118:Src/main.c    **** 
1119:Src/main.c    ****     //-------------------SEND Encoder-------------------//
1120:Src/main.c    ****     if (millis % 100 == 0)
 939              		.loc 1 1120 0
 940 0008 974B     		ldr	r3, .L78
 941 000a A3FB0023 		umull	r2, r3, r3, r0
 942 000e 5B09     		lsrs	r3, r3, #5
 943 0010 6422     		movs	r2, #100
 944 0012 02FB1303 		mls	r3, r2, r3, r0
 945 0016 002B     		cmp	r3, #0
 946 0018 40D0     		beq	.L72
1117:Src/main.c    **** 
 947              		.loc 1 1117 0
 948 001a 0025     		movs	r5, #0
 949              	.LVL82:
 950              	.L64:
1121:Src/main.c    ****     {
1122:Src/main.c    ****         uint16_t speed_Send = enc.average_speed;
1123:Src/main.c    **** 
1124:Src/main.c    ****         can.dataTx[0] = 0x06;
1125:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
1126:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
1127:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
1128:Src/main.c    ****         can.dataTx[4] = 0;
1129:Src/main.c    ****         can.dataTx[5] = 0;
1130:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
1131:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
1132:Src/main.c    ****         can.id = 0xD0;
1133:Src/main.c    ****         can.size = 8;
1134:Src/main.c    ****         CAN_Send(&can);
1135:Src/main.c    **** 
1136:Src/main.c    ****         sent_flag = 1;
1137:Src/main.c    ****     }
1138:Src/main.c    **** 
1139:Src/main.c    ****     millis += 5;
 951              		.loc 1 1139 0
 952 001c 621D     		adds	r2, r4, #5
 953              	.LVL83:
1140:Src/main.c    **** 
1141:Src/main.c    ****     //-------------SEND KM & WHEEL ROTAIONS-------------//
ARM GAS  /tmp/cc7zquCe.s 			page 39


1142:Src/main.c    ****     if (millis % 500 == 0)
 954              		.loc 1 1142 0
 955 001e 934B     		ldr	r3, .L78+4
 956 0020 A3FB0213 		umull	r1, r3, r3, r2
 957 0024 5B09     		lsrs	r3, r3, #5
 958 0026 4FF4FA71 		mov	r1, #500
 959 002a 01FB1323 		mls	r3, r1, r3, r2
 960 002e 002B     		cmp	r3, #0
 961 0030 51D0     		beq	.L73
 962              	.LVL84:
 963              	.L65:
1143:Src/main.c    ****     {
1144:Src/main.c    **** 
1145:Src/main.c    ****         uint16_t Km = (enc.Km);
1146:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
1147:Src/main.c    **** 
1148:Src/main.c    ****         can.dataTx[0] = 0x08;
1149:Src/main.c    ****         can.dataTx[1] = Km >> 8;
1150:Src/main.c    ****         can.dataTx[2] = Km;
1151:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
1152:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
1153:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
1154:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
1155:Src/main.c    ****         can.dataTx[7] = 0;
1156:Src/main.c    ****         can.id = 0xD0;
1157:Src/main.c    ****         can.size = 8;
1158:Src/main.c    ****         CAN_Send(&can);
1159:Src/main.c    **** 
1160:Src/main.c    ****         sent_flag = 2;
1161:Src/main.c    ****     }
1162:Src/main.c    **** 
1163:Src/main.c    ****     millis += 5;
 964              		.loc 1 1163 0
 965 0032 04F10A02 		add	r2, r4, #10
 966              	.LVL85:
1164:Src/main.c    **** 
1165:Src/main.c    ****     //--------------------SEND Accel--------------------//
1166:Src/main.c    ****     if (millis % 100 == 0)
 967              		.loc 1 1166 0
 968 0036 8C4B     		ldr	r3, .L78
 969 0038 A3FB0213 		umull	r1, r3, r3, r2
 970 003c 5B09     		lsrs	r3, r3, #5
 971 003e 6421     		movs	r1, #100
 972 0040 01FB1323 		mls	r3, r1, r3, r2
 973 0044 002B     		cmp	r3, #0
 974 0046 71D0     		beq	.L74
 975              	.LVL86:
 976              	.L66:
1167:Src/main.c    ****     {
1168:Src/main.c    **** 
1169:Src/main.c    ****         //removing negative values
1170:Src/main.c    ****         uint16_t val_a_x = imu.Y_A_axis + 32768;
1171:Src/main.c    ****         uint16_t val_a_y = imu.X_A_axis + 32768;
1172:Src/main.c    ****         uint16_t val_a_z = imu.Z_A_axis + 32768;
1173:Src/main.c    **** 
1174:Src/main.c    ****         can.dataTx[0] = 0x05;
1175:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
ARM GAS  /tmp/cc7zquCe.s 			page 40


1176:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
1177:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
1178:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
1179:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
1180:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
1181:Src/main.c    ****         can.dataTx[7] = 0;
1182:Src/main.c    ****         can.id = 0xC0;
1183:Src/main.c    ****         can.size = 8;
1184:Src/main.c    ****         CAN_Send(&can);
1185:Src/main.c    **** 
1186:Src/main.c    ****         sent_flag = 3;
1187:Src/main.c    ****     }
1188:Src/main.c    **** 
1189:Src/main.c    ****     millis += 5;
 977              		.loc 1 1189 0
 978 0048 04F10F02 		add	r2, r4, #15
 979              	.LVL87:
1190:Src/main.c    **** 
1191:Src/main.c    ****     //---------------------SEND Gyro---------------------//
1192:Src/main.c    ****     if (millis % 100 == 0)
 980              		.loc 1 1192 0
 981 004c 864B     		ldr	r3, .L78
 982 004e A3FB0213 		umull	r1, r3, r3, r2
 983 0052 5B09     		lsrs	r3, r3, #5
 984 0054 6421     		movs	r1, #100
 985 0056 01FB1323 		mls	r3, r1, r3, r2
 986 005a 002B     		cmp	r3, #0
 987 005c 00F09D80 		beq	.L75
 988              	.LVL88:
 989              	.L67:
1193:Src/main.c    ****     {
1194:Src/main.c    ****         uint16_t val_g_x = imu.X_G_axis + 32768;
1195:Src/main.c    ****         uint16_t val_g_y = imu.Y_G_axis + 32768;
1196:Src/main.c    **** 
1197:Src/main.c    ****         can.dataTx[0] = 0x03;
1198:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
1199:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
1200:Src/main.c    ****         can.dataTx[3] = imu.x_g_sign;
1201:Src/main.c    ****         can.dataTx[4] = val_g_y / 256;
1202:Src/main.c    ****         can.dataTx[5] = val_g_y % 256;
1203:Src/main.c    ****         can.dataTx[6] = imu.x_g_sign;
1204:Src/main.c    ****         can.dataTx[7] = 0;
1205:Src/main.c    ****         can.id = 0xC0;
1206:Src/main.c    ****         can.size = 8;
1207:Src/main.c    ****         CAN_Send(&can);
1208:Src/main.c    **** 
1209:Src/main.c    ****         sent_flag = 4;
1210:Src/main.c    ****     }
1211:Src/main.c    **** 
1212:Src/main.c    ****     millis += 1;
 990              		.loc 1 1212 0
 991 0060 04F11002 		add	r2, r4, #16
 992              	.LVL89:
1213:Src/main.c    **** 
1214:Src/main.c    ****     //---------------------SEND Gyro---------------------//
1215:Src/main.c    ****     if (millis % 100 == 0)
 993              		.loc 1 1215 0
ARM GAS  /tmp/cc7zquCe.s 			page 41


 994 0064 804B     		ldr	r3, .L78
 995 0066 A3FB0213 		umull	r1, r3, r3, r2
 996 006a 5B09     		lsrs	r3, r3, #5
 997 006c 6421     		movs	r1, #100
 998 006e 01FB1323 		mls	r3, r1, r3, r2
 999 0072 002B     		cmp	r3, #0
 1000 0074 00F0BF80 		beq	.L76
 1001              	.LVL90:
 1002              	.L68:
1216:Src/main.c    ****     {
1217:Src/main.c    ****         uint16_t val_g_z = (imu.Z_G_axis + 32768);
1218:Src/main.c    **** 
1219:Src/main.c    ****         can.dataTx[0] = 0x04;
1220:Src/main.c    ****         can.dataTx[1] = val_g_z / 256;
1221:Src/main.c    ****         can.dataTx[2] = val_g_z % 256;
1222:Src/main.c    ****         can.dataTx[3] = imu.z_g_sign;
1223:Src/main.c    ****         can.dataTx[4] = 0;
1224:Src/main.c    ****         can.dataTx[5] = 0;
1225:Src/main.c    ****         can.dataTx[6] = 0;
1226:Src/main.c    ****         can.dataTx[7] = imu.error_flag;
1227:Src/main.c    ****         can.id = 0xC0;
1228:Src/main.c    ****         can.size = 8;
1229:Src/main.c    ****         CAN_Send(&can);
1230:Src/main.c    ****     }
1231:Src/main.c    **** 
1232:Src/main.c    ****     millis += 5;
 1003              		.loc 1 1232 0
 1004 0078 1534     		adds	r4, r4, #21
 1005              	.LVL91:
1233:Src/main.c    **** 
1234:Src/main.c    ****     //--------------------SEND Steer--------------------//
1235:Src/main.c    ****     if (millis % 100 == 0)
 1006              		.loc 1 1235 0
 1007 007a 7B4B     		ldr	r3, .L78
 1008 007c A3FB0423 		umull	r2, r3, r3, r4
 1009 0080 5B09     		lsrs	r3, r3, #5
 1010 0082 6422     		movs	r2, #100
 1011 0084 02FB1343 		mls	r3, r2, r3, r4
 1012 0088 23B9     		cbnz	r3, .L63
1236:Src/main.c    ****     {
1237:Src/main.c    ****         if (calibration_flag == 0)
 1013              		.loc 1 1237 0
 1014 008a 794B     		ldr	r3, .L78+8
 1015 008c 1B68     		ldr	r3, [r3]
 1016 008e 002B     		cmp	r3, #0
 1017 0090 00F0D580 		beq	.L77
 1018              	.LVL92:
 1019              	.L63:
1238:Src/main.c    ****         {
1239:Src/main.c    ****             can.dataTx[0] = 2;
1240:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
1241:Src/main.c    ****             can.dataTx[2] = 0;
1242:Src/main.c    ****             can.dataTx[3] = 0;
1243:Src/main.c    ****             can.dataTx[4] = 0;
1244:Src/main.c    ****             can.dataTx[5] = 0;
1245:Src/main.c    ****             can.dataTx[6] = 0;
1246:Src/main.c    ****             can.dataTx[7] = 0;
ARM GAS  /tmp/cc7zquCe.s 			page 42


1247:Src/main.c    ****             can.id = 0xC0;
1248:Src/main.c    ****             can.size = 8;
1249:Src/main.c    ****             CAN_Send(&can);
1250:Src/main.c    **** 
1251:Src/main.c    ****             sent_flag = 5;
1252:Src/main.c    ****         }
1253:Src/main.c    ****     }
1254:Src/main.c    **** 
1255:Src/main.c    ****     return sent_flag;
1256:Src/main.c    **** }
 1020              		.loc 1 1256 0
 1021 0094 2846     		mov	r0, r5
 1022 0096 02B0     		add	sp, sp, #8
 1023              	.LCFI13:
 1024              		.cfi_remember_state
 1025              		.cfi_def_cfa_offset 24
 1026              		@ sp needed
 1027 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1028              	.LVL93:
 1029              	.L72:
 1030              	.LCFI14:
 1031              		.cfi_restore_state
 1032              	.LBB10:
1122:Src/main.c    **** 
 1033              		.loc 1 1122 0
 1034 009c 754D     		ldr	r5, .L78+12
 1035 009e D5E9F601 		ldrd	r0, [r5, #984]
 1036              	.LVL94:
 1037 00a2 FFF7FEFF 		bl	__aeabi_d2uiz
 1038              	.LVL95:
 1039 00a6 83B2     		uxth	r3, r0
 1040              	.LVL96:
1124:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
 1041              		.loc 1 1124 0
 1042 00a8 7348     		ldr	r0, .L78+16
 1043 00aa 0622     		movs	r2, #6
 1044 00ac 0272     		strb	r2, [r0, #8]
1125:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
 1045              		.loc 1 1125 0
 1046 00ae 1A0A     		lsrs	r2, r3, #8
 1047 00b0 4272     		strb	r2, [r0, #9]
1126:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
 1048              		.loc 1 1126 0
 1049 00b2 8372     		strb	r3, [r0, #10]
1127:Src/main.c    ****         can.dataTx[4] = 0;
 1050              		.loc 1 1127 0
 1051 00b4 6B6F     		ldr	r3, [r5, #116]
 1052              	.LVL97:
 1053 00b6 C372     		strb	r3, [r0, #11]
1128:Src/main.c    ****         can.dataTx[5] = 0;
 1054              		.loc 1 1128 0
 1055 00b8 0023     		movs	r3, #0
 1056 00ba 0373     		strb	r3, [r0, #12]
1129:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
 1057              		.loc 1 1129 0
 1058 00bc 4373     		strb	r3, [r0, #13]
1130:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
ARM GAS  /tmp/cc7zquCe.s 			page 43


 1059              		.loc 1 1130 0
 1060 00be AB68     		ldr	r3, [r5, #8]
 1061 00c0 8373     		strb	r3, [r0, #14]
1131:Src/main.c    ****         can.id = 0xD0;
 1062              		.loc 1 1131 0
 1063 00c2 6B6E     		ldr	r3, [r5, #100]
 1064 00c4 C373     		strb	r3, [r0, #15]
1132:Src/main.c    ****         can.size = 8;
 1065              		.loc 1 1132 0
 1066 00c6 D023     		movs	r3, #208
 1067 00c8 0360     		str	r3, [r0]
1133:Src/main.c    ****         CAN_Send(&can);
 1068              		.loc 1 1133 0
 1069 00ca 0823     		movs	r3, #8
 1070 00cc 4360     		str	r3, [r0, #4]
1134:Src/main.c    **** 
 1071              		.loc 1 1134 0
 1072 00ce FFF7FEFF 		bl	CAN_Send
 1073              	.LVL98:
1136:Src/main.c    ****     }
 1074              		.loc 1 1136 0
 1075 00d2 0125     		movs	r5, #1
 1076 00d4 A2E7     		b	.L64
 1077              	.LVL99:
 1078              	.L73:
 1079              	.LBE10:
 1080              	.LBB11:
1145:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
 1081              		.loc 1 1145 0
 1082 00d6 674E     		ldr	r6, .L78+12
 1083 00d8 D6ED1C7A 		vldr.32	s15, [r6, #112]
 1084 00dc FCEEE77A 		vcvt.u32.f32	s15, s15
 1085 00e0 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1086 00e4 BDF80430 		ldrh	r3, [sp, #4]
 1087              	.LVL100:
1146:Src/main.c    **** 
 1088              		.loc 1 1146 0
 1089 00e8 F26E     		ldr	r2, [r6, #108]
 1090              	.LVL101:
1148:Src/main.c    ****         can.dataTx[1] = Km >> 8;
 1091              		.loc 1 1148 0
 1092 00ea 634D     		ldr	r5, .L78+16
 1093              	.LVL102:
 1094 00ec 0827     		movs	r7, #8
 1095 00ee 2F72     		strb	r7, [r5, #8]
1149:Src/main.c    ****         can.dataTx[2] = Km;
 1096              		.loc 1 1149 0
 1097 00f0 23FA07F1 		lsr	r1, r3, r7
 1098 00f4 6972     		strb	r1, [r5, #9]
1150:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
 1099              		.loc 1 1150 0
 1100 00f6 AB72     		strb	r3, [r5, #10]
1151:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
 1101              		.loc 1 1151 0
 1102 00f8 4FF00008 		mov	r8, #0
 1103 00fc 85F80B80 		strb	r8, [r5, #11]
1152:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
ARM GAS  /tmp/cc7zquCe.s 			page 44


 1104              		.loc 1 1152 0
 1105 0100 2A73     		strb	r2, [r5, #12]
1153:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
 1106              		.loc 1 1153 0
 1107 0102 0022     		movs	r2, #0
 1108              	.LVL103:
 1109 0104 5D4B     		ldr	r3, .L78+20
 1110              	.LVL104:
 1111 0106 D6E92401 		ldrd	r0, [r6, #144]
 1112 010a FFF7FEFF 		bl	__aeabi_ddiv
 1113              	.LVL105:
 1114 010e FFF7FEFF 		bl	__aeabi_d2uiz
 1115              	.LVL106:
 1116 0112 6873     		strb	r0, [r5, #13]
1154:Src/main.c    ****         can.dataTx[7] = 0;
 1117              		.loc 1 1154 0
 1118 0114 3369     		ldr	r3, [r6, #16]
 1119 0116 AB73     		strb	r3, [r5, #14]
1155:Src/main.c    ****         can.id = 0xD0;
 1120              		.loc 1 1155 0
 1121 0118 85F80F80 		strb	r8, [r5, #15]
1156:Src/main.c    ****         can.size = 8;
 1122              		.loc 1 1156 0
 1123 011c D023     		movs	r3, #208
 1124 011e 2B60     		str	r3, [r5]
1157:Src/main.c    ****         CAN_Send(&can);
 1125              		.loc 1 1157 0
 1126 0120 6F60     		str	r7, [r5, #4]
1158:Src/main.c    **** 
 1127              		.loc 1 1158 0
 1128 0122 2846     		mov	r0, r5
 1129 0124 FFF7FEFF 		bl	CAN_Send
 1130              	.LVL107:
1160:Src/main.c    ****     }
 1131              		.loc 1 1160 0
 1132 0128 0225     		movs	r5, #2
 1133 012a 82E7     		b	.L65
 1134              	.LVL108:
 1135              	.L74:
 1136              	.LBE11:
 1137              	.LBB12:
1170:Src/main.c    ****         uint16_t val_a_y = imu.X_A_axis + 32768;
 1138              		.loc 1 1170 0
 1139 012c 544B     		ldr	r3, .L78+24
 1140 012e D3ED077A 		vldr.32	s15, [r3, #28]
 1141 0132 9FED547A 		vldr.32	s14, .L78+28
 1142 0136 77EE877A 		vadd.f32	s15, s15, s14
 1143 013a FCEEE77A 		vcvt.u32.f32	s15, s15
 1144 013e CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1145 0142 BDF80410 		ldrh	r1, [sp, #4]
 1146              	.LVL109:
1171:Src/main.c    ****         uint16_t val_a_z = imu.Z_A_axis + 32768;
 1147              		.loc 1 1171 0
 1148 0146 D3ED067A 		vldr.32	s15, [r3, #24]
 1149 014a 77EE877A 		vadd.f32	s15, s15, s14
 1150 014e FCEEE77A 		vcvt.u32.f32	s15, s15
 1151 0152 CDED017A 		vstr.32	s15, [sp, #4]	@ int
ARM GAS  /tmp/cc7zquCe.s 			page 45


 1152 0156 BDF80420 		ldrh	r2, [sp, #4]
 1153              	.LVL110:
1172:Src/main.c    **** 
 1154              		.loc 1 1172 0
 1155 015a D3ED087A 		vldr.32	s15, [r3, #32]
 1156 015e 77EE877A 		vadd.f32	s15, s15, s14
 1157 0162 FCEEE77A 		vcvt.u32.f32	s15, s15
 1158 0166 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1159 016a BDF80430 		ldrh	r3, [sp, #4]
 1160              	.LVL111:
1174:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
 1161              		.loc 1 1174 0
 1162 016e 4248     		ldr	r0, .L78+16
 1163 0170 0525     		movs	r5, #5
 1164              	.LVL112:
 1165 0172 0572     		strb	r5, [r0, #8]
1175:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
 1166              		.loc 1 1175 0
 1167 0174 0D0A     		lsrs	r5, r1, #8
 1168 0176 4572     		strb	r5, [r0, #9]
1176:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
 1169              		.loc 1 1176 0
 1170 0178 8172     		strb	r1, [r0, #10]
1177:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
 1171              		.loc 1 1177 0
 1172 017a 110A     		lsrs	r1, r2, #8
 1173              	.LVL113:
 1174 017c C172     		strb	r1, [r0, #11]
1178:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
 1175              		.loc 1 1178 0
 1176 017e 0273     		strb	r2, [r0, #12]
1179:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
 1177              		.loc 1 1179 0
 1178 0180 1A0A     		lsrs	r2, r3, #8
 1179              	.LVL114:
 1180 0182 4273     		strb	r2, [r0, #13]
1180:Src/main.c    ****         can.dataTx[7] = 0;
 1181              		.loc 1 1180 0
 1182 0184 8373     		strb	r3, [r0, #14]
1181:Src/main.c    ****         can.id = 0xC0;
 1183              		.loc 1 1181 0
 1184 0186 0023     		movs	r3, #0
 1185              	.LVL115:
 1186 0188 C373     		strb	r3, [r0, #15]
1182:Src/main.c    ****         can.size = 8;
 1187              		.loc 1 1182 0
 1188 018a C023     		movs	r3, #192
 1189 018c 0360     		str	r3, [r0]
1183:Src/main.c    ****         CAN_Send(&can);
 1190              		.loc 1 1183 0
 1191 018e 0823     		movs	r3, #8
 1192 0190 4360     		str	r3, [r0, #4]
1184:Src/main.c    **** 
 1193              		.loc 1 1184 0
 1194 0192 FFF7FEFF 		bl	CAN_Send
 1195              	.LVL116:
1186:Src/main.c    ****     }
ARM GAS  /tmp/cc7zquCe.s 			page 46


 1196              		.loc 1 1186 0
 1197 0196 0325     		movs	r5, #3
 1198 0198 56E7     		b	.L66
 1199              	.LVL117:
 1200              	.L75:
 1201              	.LBE12:
 1202              	.LBB13:
1194:Src/main.c    ****         uint16_t val_g_y = imu.Y_G_axis + 32768;
 1203              		.loc 1 1194 0
 1204 019a 3949     		ldr	r1, .L78+24
 1205 019c 91ED007A 		vldr.32	s14, [r1]
 1206 01a0 DFED386A 		vldr.32	s13, .L78+28
 1207 01a4 37EE267A 		vadd.f32	s14, s14, s13
 1208 01a8 FCEEC77A 		vcvt.u32.f32	s15, s14
 1209 01ac CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1210 01b0 BDF80420 		ldrh	r2, [sp, #4]
 1211              	.LVL118:
1195:Src/main.c    **** 
 1212              		.loc 1 1195 0
 1213 01b4 D1ED017A 		vldr.32	s15, [r1, #4]
 1214 01b8 77EEA67A 		vadd.f32	s15, s15, s13
 1215 01bc FCEEE77A 		vcvt.u32.f32	s15, s15
 1216 01c0 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1217 01c4 BDF80430 		ldrh	r3, [sp, #4]
 1218              	.LVL119:
1197:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
 1219              		.loc 1 1197 0
 1220 01c8 2B48     		ldr	r0, .L78+16
 1221 01ca 0325     		movs	r5, #3
 1222              	.LVL120:
 1223 01cc 0572     		strb	r5, [r0, #8]
1198:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
 1224              		.loc 1 1198 0
 1225 01ce 150A     		lsrs	r5, r2, #8
 1226 01d0 4572     		strb	r5, [r0, #9]
1199:Src/main.c    ****         can.dataTx[3] = imu.x_g_sign;
 1227              		.loc 1 1199 0
 1228 01d2 8272     		strb	r2, [r0, #10]
1200:Src/main.c    ****         can.dataTx[4] = val_g_y / 256;
 1229              		.loc 1 1200 0
 1230 01d4 91F8FC23 		ldrb	r2, [r1, #1020]	@ zero_extendqisi2
 1231              	.LVL121:
 1232 01d8 C272     		strb	r2, [r0, #11]
1201:Src/main.c    ****         can.dataTx[5] = val_g_y % 256;
 1233              		.loc 1 1201 0
 1234 01da 190A     		lsrs	r1, r3, #8
 1235 01dc 0173     		strb	r1, [r0, #12]
1202:Src/main.c    ****         can.dataTx[6] = imu.x_g_sign;
 1236              		.loc 1 1202 0
 1237 01de 4373     		strb	r3, [r0, #13]
1203:Src/main.c    ****         can.dataTx[7] = 0;
 1238              		.loc 1 1203 0
 1239 01e0 8273     		strb	r2, [r0, #14]
1204:Src/main.c    ****         can.id = 0xC0;
 1240              		.loc 1 1204 0
 1241 01e2 0023     		movs	r3, #0
 1242              	.LVL122:
ARM GAS  /tmp/cc7zquCe.s 			page 47


 1243 01e4 C373     		strb	r3, [r0, #15]
1205:Src/main.c    ****         can.size = 8;
 1244              		.loc 1 1205 0
 1245 01e6 C023     		movs	r3, #192
 1246 01e8 0360     		str	r3, [r0]
1206:Src/main.c    ****         CAN_Send(&can);
 1247              		.loc 1 1206 0
 1248 01ea 0823     		movs	r3, #8
 1249 01ec 4360     		str	r3, [r0, #4]
1207:Src/main.c    **** 
 1250              		.loc 1 1207 0
 1251 01ee FFF7FEFF 		bl	CAN_Send
 1252              	.LVL123:
1209:Src/main.c    ****     }
 1253              		.loc 1 1209 0
 1254 01f2 0425     		movs	r5, #4
 1255 01f4 34E7     		b	.L67
 1256              	.LVL124:
 1257              	.L76:
 1258              	.LBE13:
 1259              	.LBB14:
1217:Src/main.c    **** 
 1260              		.loc 1 1217 0
 1261 01f6 224A     		ldr	r2, .L78+24
 1262              	.LVL125:
 1263 01f8 D2ED027A 		vldr.32	s15, [r2, #8]
 1264 01fc 9FED217A 		vldr.32	s14, .L78+28
 1265 0200 77EE877A 		vadd.f32	s15, s15, s14
 1266 0204 FCEEE77A 		vcvt.u32.f32	s15, s15
 1267 0208 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1268 020c BDF80430 		ldrh	r3, [sp, #4]
 1269              	.LVL126:
1219:Src/main.c    ****         can.dataTx[1] = val_g_z / 256;
 1270              		.loc 1 1219 0
 1271 0210 1948     		ldr	r0, .L78+16
 1272 0212 0421     		movs	r1, #4
 1273 0214 0172     		strb	r1, [r0, #8]
1220:Src/main.c    ****         can.dataTx[2] = val_g_z % 256;
 1274              		.loc 1 1220 0
 1275 0216 190A     		lsrs	r1, r3, #8
 1276 0218 4172     		strb	r1, [r0, #9]
1221:Src/main.c    ****         can.dataTx[3] = imu.z_g_sign;
 1277              		.loc 1 1221 0
 1278 021a 8372     		strb	r3, [r0, #10]
1222:Src/main.c    ****         can.dataTx[4] = 0;
 1279              		.loc 1 1222 0
 1280 021c D2F80434 		ldr	r3, [r2, #1028]
 1281              	.LVL127:
 1282 0220 C372     		strb	r3, [r0, #11]
1223:Src/main.c    ****         can.dataTx[5] = 0;
 1283              		.loc 1 1223 0
 1284 0222 0023     		movs	r3, #0
 1285 0224 0373     		strb	r3, [r0, #12]
1224:Src/main.c    ****         can.dataTx[6] = 0;
 1286              		.loc 1 1224 0
 1287 0226 4373     		strb	r3, [r0, #13]
1225:Src/main.c    ****         can.dataTx[7] = imu.error_flag;
ARM GAS  /tmp/cc7zquCe.s 			page 48


 1288              		.loc 1 1225 0
 1289 0228 8373     		strb	r3, [r0, #14]
1226:Src/main.c    ****         can.id = 0xC0;
 1290              		.loc 1 1226 0
 1291 022a D2F80C34 		ldr	r3, [r2, #1036]
 1292 022e C373     		strb	r3, [r0, #15]
1227:Src/main.c    ****         can.size = 8;
 1293              		.loc 1 1227 0
 1294 0230 C023     		movs	r3, #192
 1295 0232 0360     		str	r3, [r0]
1228:Src/main.c    ****         CAN_Send(&can);
 1296              		.loc 1 1228 0
 1297 0234 0823     		movs	r3, #8
 1298 0236 4360     		str	r3, [r0, #4]
1229:Src/main.c    ****     }
 1299              		.loc 1 1229 0
 1300 0238 FFF7FEFF 		bl	CAN_Send
 1301              	.LVL128:
 1302 023c 1CE7     		b	.L68
 1303              	.LVL129:
 1304              	.L77:
 1305              	.LBE14:
1239:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
 1306              		.loc 1 1239 0
 1307 023e 0E48     		ldr	r0, .L78+16
 1308 0240 0223     		movs	r3, #2
 1309 0242 0372     		strb	r3, [r0, #8]
1240:Src/main.c    ****             can.dataTx[2] = 0;
 1310              		.loc 1 1240 0
 1311 0244 104B     		ldr	r3, .L78+32
 1312 0246 1B68     		ldr	r3, [r3]
 1313 0248 4372     		strb	r3, [r0, #9]
1241:Src/main.c    ****             can.dataTx[3] = 0;
 1314              		.loc 1 1241 0
 1315 024a 0023     		movs	r3, #0
 1316 024c 8372     		strb	r3, [r0, #10]
1242:Src/main.c    ****             can.dataTx[4] = 0;
 1317              		.loc 1 1242 0
 1318 024e C372     		strb	r3, [r0, #11]
1243:Src/main.c    ****             can.dataTx[5] = 0;
 1319              		.loc 1 1243 0
 1320 0250 0373     		strb	r3, [r0, #12]
1244:Src/main.c    ****             can.dataTx[6] = 0;
 1321              		.loc 1 1244 0
 1322 0252 4373     		strb	r3, [r0, #13]
1245:Src/main.c    ****             can.dataTx[7] = 0;
 1323              		.loc 1 1245 0
 1324 0254 8373     		strb	r3, [r0, #14]
1246:Src/main.c    ****             can.id = 0xC0;
 1325              		.loc 1 1246 0
 1326 0256 C373     		strb	r3, [r0, #15]
1247:Src/main.c    ****             can.size = 8;
 1327              		.loc 1 1247 0
 1328 0258 C023     		movs	r3, #192
 1329 025a 0360     		str	r3, [r0]
1248:Src/main.c    ****             CAN_Send(&can);
 1330              		.loc 1 1248 0
ARM GAS  /tmp/cc7zquCe.s 			page 49


 1331 025c 0823     		movs	r3, #8
 1332 025e 4360     		str	r3, [r0, #4]
1249:Src/main.c    **** 
 1333              		.loc 1 1249 0
 1334 0260 FFF7FEFF 		bl	CAN_Send
 1335              	.LVL130:
1251:Src/main.c    ****         }
 1336              		.loc 1 1251 0
 1337 0264 0525     		movs	r5, #5
1255:Src/main.c    **** }
 1338              		.loc 1 1255 0
 1339 0266 15E7     		b	.L63
 1340              	.L79:
 1341              		.align	2
 1342              	.L78:
 1343 0268 1F85EB51 		.word	1374389535
 1344 026c D34D6210 		.word	274877907
 1345 0270 00000000 		.word	.LANCHOR1
 1346 0274 00000000 		.word	enc
 1347 0278 00000000 		.word	can
 1348 027c 00002440 		.word	1076101120
 1349 0280 00000000 		.word	imu
 1350 0284 00000047 		.word	1191182336
 1351 0288 00000000 		.word	pot_2
 1352              		.cfi_endproc
 1353              	.LFE154:
 1355              		.section	.text.Error_Handler,"ax",%progbits
 1356              		.align	1
 1357              		.global	Error_Handler
 1358              		.syntax unified
 1359              		.thumb
 1360              		.thumb_func
 1361              		.fpu fpv4-sp-d16
 1363              	Error_Handler:
 1364              	.LFB155:
1257:Src/main.c    **** 
1258:Src/main.c    **** /* USER CODE END 4 */
1259:Src/main.c    **** 
1260:Src/main.c    **** /**
1261:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1262:Src/main.c    ****   * @retval None
1263:Src/main.c    ****   */
1264:Src/main.c    **** void Error_Handler(void)
1265:Src/main.c    **** {
 1365              		.loc 1 1265 0
 1366              		.cfi_startproc
 1367              		@ Volatile: function does not return.
 1368              		@ args = 0, pretend = 0, frame = 0
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370 0000 08B5     		push	{r3, lr}
 1371              	.LCFI15:
 1372              		.cfi_def_cfa_offset 8
 1373              		.cfi_offset 3, -8
 1374              		.cfi_offset 14, -4
 1375              	.L81:
1266:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1267:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
ARM GAS  /tmp/cc7zquCe.s 			page 50


1268:Src/main.c    ****     while (1)
1269:Src/main.c    ****     {
1270:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 1376              		.loc 1 1270 0 discriminator 1
 1377 0002 074C     		ldr	r4, .L83
 1378 0004 0A23     		movs	r3, #10
 1379 0006 0F22     		movs	r2, #15
 1380 0008 0649     		ldr	r1, .L83+4
 1381 000a 2046     		mov	r0, r4
 1382 000c FFF7FEFF 		bl	HAL_UART_Transmit
 1383              	.LVL131:
1271:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t *)file, strlen(file), 10);
1272:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 1384              		.loc 1 1272 0 discriminator 1
 1385 0010 0A23     		movs	r3, #10
 1386 0012 0222     		movs	r2, #2
 1387 0014 0449     		ldr	r1, .L83+8
 1388 0016 2046     		mov	r0, r4
 1389 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 1390              	.LVL132:
 1391 001c F1E7     		b	.L81
 1392              	.L84:
 1393 001e 00BF     		.align	2
 1394              	.L83:
 1395 0020 00000000 		.word	huart2
 1396 0024 00000000 		.word	.LC0
 1397 0028 10000000 		.word	.LC1
 1398              		.cfi_endproc
 1399              	.LFE155:
 1401              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1402              		.align	1
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu fpv4-sp-d16
 1408              	MX_USART2_UART_Init:
 1409              	.LFB147:
 869:Src/main.c    **** 
 1410              		.loc 1 869 0
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 0
 1413              		@ frame_needed = 0, uses_anonymous_args = 0
 1414 0000 08B5     		push	{r3, lr}
 1415              	.LCFI16:
 1416              		.cfi_def_cfa_offset 8
 1417              		.cfi_offset 3, -8
 1418              		.cfi_offset 14, -4
 878:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 1419              		.loc 1 878 0
 1420 0002 0948     		ldr	r0, .L89
 1421 0004 094B     		ldr	r3, .L89+4
 1422 0006 0360     		str	r3, [r0]
 879:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1423              		.loc 1 879 0
 1424 0008 094B     		ldr	r3, .L89+8
 1425 000a 4360     		str	r3, [r0, #4]
 880:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
ARM GAS  /tmp/cc7zquCe.s 			page 51


 1426              		.loc 1 880 0
 1427 000c 0023     		movs	r3, #0
 1428 000e 8360     		str	r3, [r0, #8]
 881:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 1429              		.loc 1 881 0
 1430 0010 C360     		str	r3, [r0, #12]
 882:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 1431              		.loc 1 882 0
 1432 0012 0361     		str	r3, [r0, #16]
 883:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1433              		.loc 1 883 0
 1434 0014 0C22     		movs	r2, #12
 1435 0016 4261     		str	r2, [r0, #20]
 884:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1436              		.loc 1 884 0
 1437 0018 8361     		str	r3, [r0, #24]
 885:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 1438              		.loc 1 885 0
 1439 001a C361     		str	r3, [r0, #28]
 886:Src/main.c    ****     {
 1440              		.loc 1 886 0
 1441 001c FFF7FEFF 		bl	HAL_UART_Init
 1442              	.LVL133:
 1443 0020 00B9     		cbnz	r0, .L88
 1444 0022 08BD     		pop	{r3, pc}
 1445              	.L88:
 888:Src/main.c    ****     }
 1446              		.loc 1 888 0
 1447 0024 FFF7FEFF 		bl	Error_Handler
 1448              	.LVL134:
 1449              	.L90:
 1450              		.align	2
 1451              	.L89:
 1452 0028 00000000 		.word	huart2
 1453 002c 00440040 		.word	1073759232
 1454 0030 10552200 		.word	2250000
 1455              		.cfi_endproc
 1456              	.LFE147:
 1458              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1459              		.align	1
 1460              		.syntax unified
 1461              		.thumb
 1462              		.thumb_func
 1463              		.fpu fpv4-sp-d16
 1465              	MX_CAN1_Init:
 1466              	.LFB136:
 447:Src/main.c    **** 
 1467              		.loc 1 447 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 1471 0000 08B5     		push	{r3, lr}
 1472              	.LCFI17:
 1473              		.cfi_def_cfa_offset 8
 1474              		.cfi_offset 3, -8
 1475              		.cfi_offset 14, -4
 456:Src/main.c    ****     hcan1.Init.Prescaler = 2;
ARM GAS  /tmp/cc7zquCe.s 			page 52


 1476              		.loc 1 456 0
 1477 0002 0D48     		ldr	r0, .L95
 1478 0004 0D4B     		ldr	r3, .L95+4
 1479 0006 0360     		str	r3, [r0]
 457:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 1480              		.loc 1 457 0
 1481 0008 0223     		movs	r3, #2
 1482 000a 4360     		str	r3, [r0, #4]
 458:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1483              		.loc 1 458 0
 1484 000c 0023     		movs	r3, #0
 1485 000e 8360     		str	r3, [r0, #8]
 459:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 1486              		.loc 1 459 0
 1487 0010 C360     		str	r3, [r0, #12]
 460:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 1488              		.loc 1 460 0
 1489 0012 4FF43022 		mov	r2, #720896
 1490 0016 0261     		str	r2, [r0, #16]
 461:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 1491              		.loc 1 461 0
 1492 0018 4FF48002 		mov	r2, #4194304
 1493 001c 4261     		str	r2, [r0, #20]
 462:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 1494              		.loc 1 462 0
 1495 001e 0376     		strb	r3, [r0, #24]
 463:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 1496              		.loc 1 463 0
 1497 0020 4376     		strb	r3, [r0, #25]
 464:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 1498              		.loc 1 464 0
 1499 0022 0122     		movs	r2, #1
 1500 0024 8276     		strb	r2, [r0, #26]
 465:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 1501              		.loc 1 465 0
 1502 0026 C376     		strb	r3, [r0, #27]
 466:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 1503              		.loc 1 466 0
 1504 0028 0377     		strb	r3, [r0, #28]
 467:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1505              		.loc 1 467 0
 1506 002a 4377     		strb	r3, [r0, #29]
 468:Src/main.c    ****     {
 1507              		.loc 1 468 0
 1508 002c FFF7FEFF 		bl	HAL_CAN_Init
 1509              	.LVL135:
 1510 0030 00B9     		cbnz	r0, .L94
 1511 0032 08BD     		pop	{r3, pc}
 1512              	.L94:
 470:Src/main.c    ****     }
 1513              		.loc 1 470 0
 1514 0034 FFF7FEFF 		bl	Error_Handler
 1515              	.LVL136:
 1516              	.L96:
 1517              		.align	2
 1518              	.L95:
 1519 0038 00000000 		.word	hcan1
ARM GAS  /tmp/cc7zquCe.s 			page 53


 1520 003c 00640040 		.word	1073767424
 1521              		.cfi_endproc
 1522              	.LFE136:
 1524              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1525              		.align	1
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu fpv4-sp-d16
 1531              	MX_SPI1_Init:
 1532              	.LFB137:
 483:Src/main.c    **** 
 1533              		.loc 1 483 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 0
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537 0000 08B5     		push	{r3, lr}
 1538              	.LCFI18:
 1539              		.cfi_def_cfa_offset 8
 1540              		.cfi_offset 3, -8
 1541              		.cfi_offset 14, -4
 493:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 1542              		.loc 1 493 0
 1543 0002 0D48     		ldr	r0, .L101
 1544 0004 0D4B     		ldr	r3, .L101+4
 1545 0006 0360     		str	r3, [r0]
 494:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1546              		.loc 1 494 0
 1547 0008 4FF48273 		mov	r3, #260
 1548 000c 4360     		str	r3, [r0, #4]
 495:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1549              		.loc 1 495 0
 1550 000e 0023     		movs	r3, #0
 1551 0010 8360     		str	r3, [r0, #8]
 496:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1552              		.loc 1 496 0
 1553 0012 C360     		str	r3, [r0, #12]
 497:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1554              		.loc 1 497 0
 1555 0014 0361     		str	r3, [r0, #16]
 498:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 1556              		.loc 1 498 0
 1557 0016 4361     		str	r3, [r0, #20]
 499:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1558              		.loc 1 499 0
 1559 0018 4FF40072 		mov	r2, #512
 1560 001c 8261     		str	r2, [r0, #24]
 500:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1561              		.loc 1 500 0
 1562 001e C361     		str	r3, [r0, #28]
 501:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1563              		.loc 1 501 0
 1564 0020 0362     		str	r3, [r0, #32]
 502:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1565              		.loc 1 502 0
 1566 0022 4362     		str	r3, [r0, #36]
 503:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
ARM GAS  /tmp/cc7zquCe.s 			page 54


 1567              		.loc 1 503 0
 1568 0024 8362     		str	r3, [r0, #40]
 504:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1569              		.loc 1 504 0
 1570 0026 0A23     		movs	r3, #10
 1571 0028 C362     		str	r3, [r0, #44]
 505:Src/main.c    ****     {
 1572              		.loc 1 505 0
 1573 002a FFF7FEFF 		bl	HAL_SPI_Init
 1574              	.LVL137:
 1575 002e 00B9     		cbnz	r0, .L100
 1576 0030 08BD     		pop	{r3, pc}
 1577              	.L100:
 507:Src/main.c    ****     }
 1578              		.loc 1 507 0
 1579 0032 FFF7FEFF 		bl	Error_Handler
 1580              	.LVL138:
 1581              	.L102:
 1582 0036 00BF     		.align	2
 1583              	.L101:
 1584 0038 00000000 		.word	hspi1
 1585 003c 00300140 		.word	1073819648
 1586              		.cfi_endproc
 1587              	.LFE137:
 1589              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1590              		.align	1
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1594              		.fpu fpv4-sp-d16
 1596              	MX_ADC1_Init:
 1597              	.LFB135:
 398:Src/main.c    **** 
 1598              		.loc 1 398 0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 16
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
 1602 0000 00B5     		push	{lr}
 1603              	.LCFI19:
 1604              		.cfi_def_cfa_offset 4
 1605              		.cfi_offset 14, -4
 1606 0002 85B0     		sub	sp, sp, #20
 1607              	.LCFI20:
 1608              		.cfi_def_cfa_offset 24
 404:Src/main.c    **** 
 1609              		.loc 1 404 0
 1610 0004 0023     		movs	r3, #0
 1611 0006 0093     		str	r3, [sp]
 1612 0008 0193     		str	r3, [sp, #4]
 1613 000a 0293     		str	r3, [sp, #8]
 1614 000c 0393     		str	r3, [sp, #12]
 411:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1615              		.loc 1 411 0
 1616 000e 1348     		ldr	r0, .L109
 1617 0010 134A     		ldr	r2, .L109+4
 1618 0012 0260     		str	r2, [r0]
 412:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
ARM GAS  /tmp/cc7zquCe.s 			page 55


 1619              		.loc 1 412 0
 1620 0014 4360     		str	r3, [r0, #4]
 413:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 1621              		.loc 1 413 0
 1622 0016 8360     		str	r3, [r0, #8]
 414:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 1623              		.loc 1 414 0
 1624 0018 0122     		movs	r2, #1
 1625 001a 0261     		str	r2, [r0, #16]
 415:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 1626              		.loc 1 415 0
 1627 001c 0276     		strb	r2, [r0, #24]
 416:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1628              		.loc 1 416 0
 1629 001e 80F82030 		strb	r3, [r0, #32]
 417:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1630              		.loc 1 417 0
 1631 0022 C362     		str	r3, [r0, #44]
 418:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1632              		.loc 1 418 0
 1633 0024 0F49     		ldr	r1, .L109+8
 1634 0026 8162     		str	r1, [r0, #40]
 419:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 1635              		.loc 1 419 0
 1636 0028 C360     		str	r3, [r0, #12]
 420:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 1637              		.loc 1 420 0
 1638 002a C261     		str	r2, [r0, #28]
 421:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1639              		.loc 1 421 0
 1640 002c 80F83020 		strb	r2, [r0, #48]
 422:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1641              		.loc 1 422 0
 1642 0030 4261     		str	r2, [r0, #20]
 423:Src/main.c    ****     {
 1643              		.loc 1 423 0
 1644 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1645              	.LVL139:
 1646 0036 68B9     		cbnz	r0, .L107
 429:Src/main.c    ****     sConfig.Rank = 1;
 1647              		.loc 1 429 0
 1648 0038 0823     		movs	r3, #8
 1649 003a 0093     		str	r3, [sp]
 430:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1650              		.loc 1 430 0
 1651 003c 0123     		movs	r3, #1
 1652 003e 0193     		str	r3, [sp, #4]
 431:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1653              		.loc 1 431 0
 1654 0040 0023     		movs	r3, #0
 1655 0042 0293     		str	r3, [sp, #8]
 432:Src/main.c    ****     {
 1656              		.loc 1 432 0
 1657 0044 6946     		mov	r1, sp
 1658 0046 0548     		ldr	r0, .L109
 1659 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1660              	.LVL140:
ARM GAS  /tmp/cc7zquCe.s 			page 56


 1661 004c 20B9     		cbnz	r0, .L108
 439:Src/main.c    **** 
 1662              		.loc 1 439 0
 1663 004e 05B0     		add	sp, sp, #20
 1664              	.LCFI21:
 1665              		.cfi_remember_state
 1666              		.cfi_def_cfa_offset 4
 1667              		@ sp needed
 1668 0050 5DF804FB 		ldr	pc, [sp], #4
 1669              	.L107:
 1670              	.LCFI22:
 1671              		.cfi_restore_state
 425:Src/main.c    ****     }
 1672              		.loc 1 425 0
 1673 0054 FFF7FEFF 		bl	Error_Handler
 1674              	.LVL141:
 1675              	.L108:
 434:Src/main.c    ****     }
 1676              		.loc 1 434 0
 1677 0058 FFF7FEFF 		bl	Error_Handler
 1678              	.LVL142:
 1679              	.L110:
 1680              		.align	2
 1681              	.L109:
 1682 005c 00000000 		.word	hadc1
 1683 0060 00200140 		.word	1073815552
 1684 0064 0100000F 		.word	251658241
 1685              		.cfi_endproc
 1686              	.LFE135:
 1688              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1689              		.align	1
 1690              		.syntax unified
 1691              		.thumb
 1692              		.thumb_func
 1693              		.fpu fpv4-sp-d16
 1695              	MX_USART1_UART_Init:
 1696              	.LFB146:
 837:Src/main.c    **** 
 1697              		.loc 1 837 0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701 0000 08B5     		push	{r3, lr}
 1702              	.LCFI23:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 3, -8
 1705              		.cfi_offset 14, -4
 846:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 1706              		.loc 1 846 0
 1707 0002 0A48     		ldr	r0, .L115
 1708 0004 0A4B     		ldr	r3, .L115+4
 1709 0006 0360     		str	r3, [r0]
 847:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1710              		.loc 1 847 0
 1711 0008 4FF4E133 		mov	r3, #115200
 1712 000c 4360     		str	r3, [r0, #4]
 848:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
ARM GAS  /tmp/cc7zquCe.s 			page 57


 1713              		.loc 1 848 0
 1714 000e 0023     		movs	r3, #0
 1715 0010 8360     		str	r3, [r0, #8]
 849:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 1716              		.loc 1 849 0
 1717 0012 C360     		str	r3, [r0, #12]
 850:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 1718              		.loc 1 850 0
 1719 0014 0361     		str	r3, [r0, #16]
 851:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1720              		.loc 1 851 0
 1721 0016 0C22     		movs	r2, #12
 1722 0018 4261     		str	r2, [r0, #20]
 852:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1723              		.loc 1 852 0
 1724 001a 8361     		str	r3, [r0, #24]
 853:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 1725              		.loc 1 853 0
 1726 001c C361     		str	r3, [r0, #28]
 854:Src/main.c    ****     {
 1727              		.loc 1 854 0
 1728 001e FFF7FEFF 		bl	HAL_UART_Init
 1729              	.LVL143:
 1730 0022 00B9     		cbnz	r0, .L114
 1731 0024 08BD     		pop	{r3, pc}
 1732              	.L114:
 856:Src/main.c    ****     }
 1733              		.loc 1 856 0
 1734 0026 FFF7FEFF 		bl	Error_Handler
 1735              	.LVL144:
 1736              	.L116:
 1737 002a 00BF     		.align	2
 1738              	.L115:
 1739 002c 00000000 		.word	huart1
 1740 0030 00100140 		.word	1073811456
 1741              		.cfi_endproc
 1742              	.LFE146:
 1744              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1745              		.align	1
 1746              		.syntax unified
 1747              		.thumb
 1748              		.thumb_func
 1749              		.fpu fpv4-sp-d16
 1751              	MX_TIM2_Init:
 1752              	.LFB138:
 520:Src/main.c    **** 
 1753              		.loc 1 520 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 48
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 1757 0000 00B5     		push	{lr}
 1758              	.LCFI24:
 1759              		.cfi_def_cfa_offset 4
 1760              		.cfi_offset 14, -4
 1761 0002 8DB0     		sub	sp, sp, #52
 1762              	.LCFI25:
 1763              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/cc7zquCe.s 			page 58


 526:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 1764              		.loc 1 526 0
 1765 0004 0023     		movs	r3, #0
 1766 0006 0893     		str	r3, [sp, #32]
 1767 0008 0993     		str	r3, [sp, #36]
 1768 000a 0A93     		str	r3, [sp, #40]
 1769 000c 0B93     		str	r3, [sp, #44]
 527:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1770              		.loc 1 527 0
 1771 000e 0393     		str	r3, [sp, #12]
 1772 0010 0493     		str	r3, [sp, #16]
 1773 0012 0593     		str	r3, [sp, #20]
 1774 0014 0693     		str	r3, [sp, #24]
 1775 0016 0793     		str	r3, [sp, #28]
 528:Src/main.c    **** 
 1776              		.loc 1 528 0
 1777 0018 0193     		str	r3, [sp, #4]
 1778 001a 0293     		str	r3, [sp, #8]
 533:Src/main.c    ****     htim2.Init.Prescaler = 36;
 1779              		.loc 1 533 0
 1780 001c 1948     		ldr	r0, .L127
 1781 001e 4FF08042 		mov	r2, #1073741824
 1782 0022 0260     		str	r2, [r0]
 534:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1783              		.loc 1 534 0
 1784 0024 2422     		movs	r2, #36
 1785 0026 4260     		str	r2, [r0, #4]
 535:Src/main.c    ****     htim2.Init.Period = 1000;
 1786              		.loc 1 535 0
 1787 0028 8360     		str	r3, [r0, #8]
 536:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1788              		.loc 1 536 0
 1789 002a 4FF47A72 		mov	r2, #1000
 1790 002e C260     		str	r2, [r0, #12]
 537:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1791              		.loc 1 537 0
 1792 0030 0361     		str	r3, [r0, #16]
 538:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1793              		.loc 1 538 0
 1794 0032 8361     		str	r3, [r0, #24]
 539:Src/main.c    ****     {
 1795              		.loc 1 539 0
 1796 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1797              	.LVL145:
 1798 0038 D8B9     		cbnz	r0, .L123
 543:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1799              		.loc 1 543 0
 1800 003a 0CA9     		add	r1, sp, #48
 1801 003c 4FF48053 		mov	r3, #4096
 1802 0040 41F8103D 		str	r3, [r1, #-16]!
 544:Src/main.c    ****     {
 1803              		.loc 1 544 0
 1804 0044 0F48     		ldr	r0, .L127
 1805 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1806              	.LVL146:
 1807 004a A0B9     		cbnz	r0, .L124
 548:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
ARM GAS  /tmp/cc7zquCe.s 			page 59


 1808              		.loc 1 548 0
 1809 004c 0023     		movs	r3, #0
 1810 004e 0393     		str	r3, [sp, #12]
 549:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 1811              		.loc 1 549 0
 1812 0050 0493     		str	r3, [sp, #16]
 550:Src/main.c    ****     {
 1813              		.loc 1 550 0
 1814 0052 03A9     		add	r1, sp, #12
 1815 0054 0B48     		ldr	r0, .L127
 1816 0056 FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 1817              	.LVL147:
 1818 005a 70B9     		cbnz	r0, .L125
 554:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1819              		.loc 1 554 0
 1820 005c 0023     		movs	r3, #0
 1821 005e 0193     		str	r3, [sp, #4]
 555:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1822              		.loc 1 555 0
 1823 0060 0293     		str	r3, [sp, #8]
 556:Src/main.c    ****     {
 1824              		.loc 1 556 0
 1825 0062 01A9     		add	r1, sp, #4
 1826 0064 0748     		ldr	r0, .L127
 1827 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1828              	.LVL148:
 1829 006a 40B9     		cbnz	r0, .L126
 563:Src/main.c    **** 
 1830              		.loc 1 563 0
 1831 006c 0DB0     		add	sp, sp, #52
 1832              	.LCFI26:
 1833              		.cfi_remember_state
 1834              		.cfi_def_cfa_offset 4
 1835              		@ sp needed
 1836 006e 5DF804FB 		ldr	pc, [sp], #4
 1837              	.L123:
 1838              	.LCFI27:
 1839              		.cfi_restore_state
 541:Src/main.c    ****     }
 1840              		.loc 1 541 0
 1841 0072 FFF7FEFF 		bl	Error_Handler
 1842              	.LVL149:
 1843              	.L124:
 546:Src/main.c    ****     }
 1844              		.loc 1 546 0
 1845 0076 FFF7FEFF 		bl	Error_Handler
 1846              	.LVL150:
 1847              	.L125:
 552:Src/main.c    ****     }
 1848              		.loc 1 552 0
 1849 007a FFF7FEFF 		bl	Error_Handler
 1850              	.LVL151:
 1851              	.L126:
 558:Src/main.c    ****     }
 1852              		.loc 1 558 0
 1853 007e FFF7FEFF 		bl	Error_Handler
 1854              	.LVL152:
ARM GAS  /tmp/cc7zquCe.s 			page 60


 1855              	.L128:
 1856 0082 00BF     		.align	2
 1857              	.L127:
 1858 0084 00000000 		.word	htim2
 1859              		.cfi_endproc
 1860              	.LFE138:
 1862              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1863              		.align	1
 1864              		.syntax unified
 1865              		.thumb
 1866              		.thumb_func
 1867              		.fpu fpv4-sp-d16
 1869              	MX_TIM3_Init:
 1870              	.LFB139:
 571:Src/main.c    **** 
 1871              		.loc 1 571 0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 24
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
 1875 0000 00B5     		push	{lr}
 1876              	.LCFI28:
 1877              		.cfi_def_cfa_offset 4
 1878              		.cfi_offset 14, -4
 1879 0002 87B0     		sub	sp, sp, #28
 1880              	.LCFI29:
 1881              		.cfi_def_cfa_offset 32
 577:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1882              		.loc 1 577 0
 1883 0004 0023     		movs	r3, #0
 1884 0006 0293     		str	r3, [sp, #8]
 1885 0008 0393     		str	r3, [sp, #12]
 1886 000a 0493     		str	r3, [sp, #16]
 1887 000c 0593     		str	r3, [sp, #20]
 578:Src/main.c    **** 
 1888              		.loc 1 578 0
 1889 000e 0093     		str	r3, [sp]
 1890 0010 0193     		str	r3, [sp, #4]
 583:Src/main.c    ****     htim3.Init.Prescaler = 18;
 1891              		.loc 1 583 0
 1892 0012 1448     		ldr	r0, .L137
 1893 0014 144A     		ldr	r2, .L137+4
 1894 0016 0260     		str	r2, [r0]
 584:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1895              		.loc 1 584 0
 1896 0018 1222     		movs	r2, #18
 1897 001a 4260     		str	r2, [r0, #4]
 585:Src/main.c    ****     htim3.Init.Period = 65500;
 1898              		.loc 1 585 0
 1899 001c 8360     		str	r3, [r0, #8]
 586:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1900              		.loc 1 586 0
 1901 001e 4FF6DC72 		movw	r2, #65500
 1902 0022 C260     		str	r2, [r0, #12]
 587:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1903              		.loc 1 587 0
 1904 0024 0361     		str	r3, [r0, #16]
 588:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
ARM GAS  /tmp/cc7zquCe.s 			page 61


 1905              		.loc 1 588 0
 1906 0026 8361     		str	r3, [r0, #24]
 589:Src/main.c    ****     {
 1907              		.loc 1 589 0
 1908 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1909              	.LVL153:
 1910 002c 98B9     		cbnz	r0, .L134
 593:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1911              		.loc 1 593 0
 1912 002e 06A9     		add	r1, sp, #24
 1913 0030 4FF48053 		mov	r3, #4096
 1914 0034 41F8103D 		str	r3, [r1, #-16]!
 594:Src/main.c    ****     {
 1915              		.loc 1 594 0
 1916 0038 0A48     		ldr	r0, .L137
 1917 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1918              	.LVL154:
 1919 003e 60B9     		cbnz	r0, .L135
 598:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1920              		.loc 1 598 0
 1921 0040 0023     		movs	r3, #0
 1922 0042 0093     		str	r3, [sp]
 599:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1923              		.loc 1 599 0
 1924 0044 0193     		str	r3, [sp, #4]
 600:Src/main.c    ****     {
 1925              		.loc 1 600 0
 1926 0046 6946     		mov	r1, sp
 1927 0048 0648     		ldr	r0, .L137
 1928 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1929              	.LVL155:
 1930 004e 30B9     		cbnz	r0, .L136
 607:Src/main.c    **** 
 1931              		.loc 1 607 0
 1932 0050 07B0     		add	sp, sp, #28
 1933              	.LCFI30:
 1934              		.cfi_remember_state
 1935              		.cfi_def_cfa_offset 4
 1936              		@ sp needed
 1937 0052 5DF804FB 		ldr	pc, [sp], #4
 1938              	.L134:
 1939              	.LCFI31:
 1940              		.cfi_restore_state
 591:Src/main.c    ****     }
 1941              		.loc 1 591 0
 1942 0056 FFF7FEFF 		bl	Error_Handler
 1943              	.LVL156:
 1944              	.L135:
 596:Src/main.c    ****     }
 1945              		.loc 1 596 0
 1946 005a FFF7FEFF 		bl	Error_Handler
 1947              	.LVL157:
 1948              	.L136:
 602:Src/main.c    ****     }
 1949              		.loc 1 602 0
 1950 005e FFF7FEFF 		bl	Error_Handler
 1951              	.LVL158:
ARM GAS  /tmp/cc7zquCe.s 			page 62


 1952              	.L138:
 1953 0062 00BF     		.align	2
 1954              	.L137:
 1955 0064 00000000 		.word	htim3
 1956 0068 00040040 		.word	1073742848
 1957              		.cfi_endproc
 1958              	.LFE139:
 1960              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1961              		.align	1
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1965              		.fpu fpv4-sp-d16
 1967              	MX_TIM4_Init:
 1968              	.LFB140:
 615:Src/main.c    **** 
 1969              		.loc 1 615 0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 24
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973 0000 00B5     		push	{lr}
 1974              	.LCFI32:
 1975              		.cfi_def_cfa_offset 4
 1976              		.cfi_offset 14, -4
 1977 0002 87B0     		sub	sp, sp, #28
 1978              	.LCFI33:
 1979              		.cfi_def_cfa_offset 32
 621:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1980              		.loc 1 621 0
 1981 0004 0023     		movs	r3, #0
 1982 0006 0293     		str	r3, [sp, #8]
 1983 0008 0393     		str	r3, [sp, #12]
 1984 000a 0493     		str	r3, [sp, #16]
 1985 000c 0593     		str	r3, [sp, #20]
 622:Src/main.c    **** 
 1986              		.loc 1 622 0
 1987 000e 0093     		str	r3, [sp]
 1988 0010 0193     		str	r3, [sp, #4]
 627:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 1989              		.loc 1 627 0
 1990 0012 1448     		ldr	r0, .L147
 1991 0014 144A     		ldr	r2, .L147+4
 1992 0016 0260     		str	r2, [r0]
 628:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 1993              		.loc 1 628 0
 1994 0018 4FF46162 		mov	r2, #3600
 1995 001c 4260     		str	r2, [r0, #4]
 629:Src/main.c    ****     htim4.Init.Period = 2000;
 1996              		.loc 1 629 0
 1997 001e 8360     		str	r3, [r0, #8]
 630:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1998              		.loc 1 630 0
 1999 0020 4FF4FA62 		mov	r2, #2000
 2000 0024 C260     		str	r2, [r0, #12]
 631:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2001              		.loc 1 631 0
 2002 0026 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/cc7zquCe.s 			page 63


 632:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 2003              		.loc 1 632 0
 2004 0028 8361     		str	r3, [r0, #24]
 633:Src/main.c    ****     {
 2005              		.loc 1 633 0
 2006 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2007              	.LVL159:
 2008 002e 98B9     		cbnz	r0, .L144
 637:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2009              		.loc 1 637 0
 2010 0030 06A9     		add	r1, sp, #24
 2011 0032 4FF48053 		mov	r3, #4096
 2012 0036 41F8103D 		str	r3, [r1, #-16]!
 638:Src/main.c    ****     {
 2013              		.loc 1 638 0
 2014 003a 0A48     		ldr	r0, .L147
 2015 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2016              	.LVL160:
 2017 0040 60B9     		cbnz	r0, .L145
 642:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2018              		.loc 1 642 0
 2019 0042 0023     		movs	r3, #0
 2020 0044 0093     		str	r3, [sp]
 643:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2021              		.loc 1 643 0
 2022 0046 0193     		str	r3, [sp, #4]
 644:Src/main.c    ****     {
 2023              		.loc 1 644 0
 2024 0048 6946     		mov	r1, sp
 2025 004a 0648     		ldr	r0, .L147
 2026 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2027              	.LVL161:
 2028 0050 30B9     		cbnz	r0, .L146
 651:Src/main.c    **** 
 2029              		.loc 1 651 0
 2030 0052 07B0     		add	sp, sp, #28
 2031              	.LCFI34:
 2032              		.cfi_remember_state
 2033              		.cfi_def_cfa_offset 4
 2034              		@ sp needed
 2035 0054 5DF804FB 		ldr	pc, [sp], #4
 2036              	.L144:
 2037              	.LCFI35:
 2038              		.cfi_restore_state
 635:Src/main.c    ****     }
 2039              		.loc 1 635 0
 2040 0058 FFF7FEFF 		bl	Error_Handler
 2041              	.LVL162:
 2042              	.L145:
 640:Src/main.c    ****     }
 2043              		.loc 1 640 0
 2044 005c FFF7FEFF 		bl	Error_Handler
 2045              	.LVL163:
 2046              	.L146:
 646:Src/main.c    ****     }
 2047              		.loc 1 646 0
 2048 0060 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cc7zquCe.s 			page 64


 2049              	.LVL164:
 2050              	.L148:
 2051              		.align	2
 2052              	.L147:
 2053 0064 00000000 		.word	htim4
 2054 0068 00080040 		.word	1073743872
 2055              		.cfi_endproc
 2056              	.LFE140:
 2058              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2059              		.align	1
 2060              		.syntax unified
 2061              		.thumb
 2062              		.thumb_func
 2063              		.fpu fpv4-sp-d16
 2065              	MX_TIM5_Init:
 2066              	.LFB141:
 659:Src/main.c    **** 
 2067              		.loc 1 659 0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 24
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071 0000 00B5     		push	{lr}
 2072              	.LCFI36:
 2073              		.cfi_def_cfa_offset 4
 2074              		.cfi_offset 14, -4
 2075 0002 87B0     		sub	sp, sp, #28
 2076              	.LCFI37:
 2077              		.cfi_def_cfa_offset 32
 665:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2078              		.loc 1 665 0
 2079 0004 0023     		movs	r3, #0
 2080 0006 0293     		str	r3, [sp, #8]
 2081 0008 0393     		str	r3, [sp, #12]
 2082 000a 0493     		str	r3, [sp, #16]
 2083 000c 0593     		str	r3, [sp, #20]
 666:Src/main.c    **** 
 2084              		.loc 1 666 0
 2085 000e 0093     		str	r3, [sp]
 2086 0010 0193     		str	r3, [sp, #4]
 671:Src/main.c    ****     htim5.Init.Prescaler = 36;
 2087              		.loc 1 671 0
 2088 0012 1448     		ldr	r0, .L157
 2089 0014 144A     		ldr	r2, .L157+4
 2090 0016 0260     		str	r2, [r0]
 672:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2091              		.loc 1 672 0
 2092 0018 2422     		movs	r2, #36
 2093 001a 4260     		str	r2, [r0, #4]
 673:Src/main.c    ****     htim5.Init.Period = 2000;
 2094              		.loc 1 673 0
 2095 001c 8360     		str	r3, [r0, #8]
 674:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2096              		.loc 1 674 0
 2097 001e 4FF4FA62 		mov	r2, #2000
 2098 0022 C260     		str	r2, [r0, #12]
 675:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2099              		.loc 1 675 0
ARM GAS  /tmp/cc7zquCe.s 			page 65


 2100 0024 0361     		str	r3, [r0, #16]
 676:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2101              		.loc 1 676 0
 2102 0026 8361     		str	r3, [r0, #24]
 677:Src/main.c    ****     {
 2103              		.loc 1 677 0
 2104 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2105              	.LVL165:
 2106 002c 98B9     		cbnz	r0, .L154
 681:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2107              		.loc 1 681 0
 2108 002e 06A9     		add	r1, sp, #24
 2109 0030 4FF48053 		mov	r3, #4096
 2110 0034 41F8103D 		str	r3, [r1, #-16]!
 682:Src/main.c    ****     {
 2111              		.loc 1 682 0
 2112 0038 0A48     		ldr	r0, .L157
 2113 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2114              	.LVL166:
 2115 003e 60B9     		cbnz	r0, .L155
 686:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2116              		.loc 1 686 0
 2117 0040 0023     		movs	r3, #0
 2118 0042 0093     		str	r3, [sp]
 687:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2119              		.loc 1 687 0
 2120 0044 0193     		str	r3, [sp, #4]
 688:Src/main.c    ****     {
 2121              		.loc 1 688 0
 2122 0046 6946     		mov	r1, sp
 2123 0048 0648     		ldr	r0, .L157
 2124 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2125              	.LVL167:
 2126 004e 30B9     		cbnz	r0, .L156
 695:Src/main.c    **** 
 2127              		.loc 1 695 0
 2128 0050 07B0     		add	sp, sp, #28
 2129              	.LCFI38:
 2130              		.cfi_remember_state
 2131              		.cfi_def_cfa_offset 4
 2132              		@ sp needed
 2133 0052 5DF804FB 		ldr	pc, [sp], #4
 2134              	.L154:
 2135              	.LCFI39:
 2136              		.cfi_restore_state
 679:Src/main.c    ****     }
 2137              		.loc 1 679 0
 2138 0056 FFF7FEFF 		bl	Error_Handler
 2139              	.LVL168:
 2140              	.L155:
 684:Src/main.c    ****     }
 2141              		.loc 1 684 0
 2142 005a FFF7FEFF 		bl	Error_Handler
 2143              	.LVL169:
 2144              	.L156:
 690:Src/main.c    ****     }
 2145              		.loc 1 690 0
ARM GAS  /tmp/cc7zquCe.s 			page 66


 2146 005e FFF7FEFF 		bl	Error_Handler
 2147              	.LVL170:
 2148              	.L158:
 2149 0062 00BF     		.align	2
 2150              	.L157:
 2151 0064 00000000 		.word	htim5
 2152 0068 000C0040 		.word	1073744896
 2153              		.cfi_endproc
 2154              	.LFE141:
 2156              		.section	.text.MX_TIM6_Init,"ax",%progbits
 2157              		.align	1
 2158              		.syntax unified
 2159              		.thumb
 2160              		.thumb_func
 2161              		.fpu fpv4-sp-d16
 2163              	MX_TIM6_Init:
 2164              	.LFB142:
 703:Src/main.c    **** 
 2165              		.loc 1 703 0
 2166              		.cfi_startproc
 2167              		@ args = 0, pretend = 0, frame = 8
 2168              		@ frame_needed = 0, uses_anonymous_args = 0
 2169 0000 00B5     		push	{lr}
 2170              	.LCFI40:
 2171              		.cfi_def_cfa_offset 4
 2172              		.cfi_offset 14, -4
 2173 0002 83B0     		sub	sp, sp, #12
 2174              	.LCFI41:
 2175              		.cfi_def_cfa_offset 16
 709:Src/main.c    **** 
 2176              		.loc 1 709 0
 2177 0004 0023     		movs	r3, #0
 2178 0006 0093     		str	r3, [sp]
 2179 0008 0193     		str	r3, [sp, #4]
 714:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 2180              		.loc 1 714 0
 2181 000a 0E48     		ldr	r0, .L165
 2182 000c 0E4A     		ldr	r2, .L165+4
 2183 000e 0260     		str	r2, [r0]
 715:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2184              		.loc 1 715 0
 2185 0010 4FF46162 		mov	r2, #3600
 2186 0014 4260     		str	r2, [r0, #4]
 716:Src/main.c    ****     htim6.Init.Period = 2000;
 2187              		.loc 1 716 0
 2188 0016 8360     		str	r3, [r0, #8]
 717:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2189              		.loc 1 717 0
 2190 0018 4FF4FA62 		mov	r2, #2000
 2191 001c C260     		str	r2, [r0, #12]
 718:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2192              		.loc 1 718 0
 2193 001e 8361     		str	r3, [r0, #24]
 719:Src/main.c    ****     {
 2194              		.loc 1 719 0
 2195 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2196              	.LVL171:
ARM GAS  /tmp/cc7zquCe.s 			page 67


 2197 0024 50B9     		cbnz	r0, .L163
 723:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2198              		.loc 1 723 0
 2199 0026 0023     		movs	r3, #0
 2200 0028 0093     		str	r3, [sp]
 724:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2201              		.loc 1 724 0
 2202 002a 0193     		str	r3, [sp, #4]
 725:Src/main.c    ****     {
 2203              		.loc 1 725 0
 2204 002c 6946     		mov	r1, sp
 2205 002e 0548     		ldr	r0, .L165
 2206 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2207              	.LVL172:
 2208 0034 20B9     		cbnz	r0, .L164
 732:Src/main.c    **** 
 2209              		.loc 1 732 0
 2210 0036 03B0     		add	sp, sp, #12
 2211              	.LCFI42:
 2212              		.cfi_remember_state
 2213              		.cfi_def_cfa_offset 4
 2214              		@ sp needed
 2215 0038 5DF804FB 		ldr	pc, [sp], #4
 2216              	.L163:
 2217              	.LCFI43:
 2218              		.cfi_restore_state
 721:Src/main.c    ****     }
 2219              		.loc 1 721 0
 2220 003c FFF7FEFF 		bl	Error_Handler
 2221              	.LVL173:
 2222              	.L164:
 727:Src/main.c    ****     }
 2223              		.loc 1 727 0
 2224 0040 FFF7FEFF 		bl	Error_Handler
 2225              	.LVL174:
 2226              	.L166:
 2227              		.align	2
 2228              	.L165:
 2229 0044 00000000 		.word	htim6
 2230 0048 00100040 		.word	1073745920
 2231              		.cfi_endproc
 2232              	.LFE142:
 2234              		.section	.text.MX_TIM7_Init,"ax",%progbits
 2235              		.align	1
 2236              		.syntax unified
 2237              		.thumb
 2238              		.thumb_func
 2239              		.fpu fpv4-sp-d16
 2241              	MX_TIM7_Init:
 2242              	.LFB143:
 740:Src/main.c    **** 
 2243              		.loc 1 740 0
 2244              		.cfi_startproc
 2245              		@ args = 0, pretend = 0, frame = 8
 2246              		@ frame_needed = 0, uses_anonymous_args = 0
 2247 0000 00B5     		push	{lr}
 2248              	.LCFI44:
ARM GAS  /tmp/cc7zquCe.s 			page 68


 2249              		.cfi_def_cfa_offset 4
 2250              		.cfi_offset 14, -4
 2251 0002 83B0     		sub	sp, sp, #12
 2252              	.LCFI45:
 2253              		.cfi_def_cfa_offset 16
 746:Src/main.c    **** 
 2254              		.loc 1 746 0
 2255 0004 0023     		movs	r3, #0
 2256 0006 0093     		str	r3, [sp]
 2257 0008 0193     		str	r3, [sp, #4]
 751:Src/main.c    ****     htim7.Init.Prescaler = 36;
 2258              		.loc 1 751 0
 2259 000a 0E48     		ldr	r0, .L173
 2260 000c 0E4A     		ldr	r2, .L173+4
 2261 000e 0260     		str	r2, [r0]
 752:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 2262              		.loc 1 752 0
 2263 0010 2422     		movs	r2, #36
 2264 0012 4260     		str	r2, [r0, #4]
 753:Src/main.c    ****     htim7.Init.Period = 6000;
 2265              		.loc 1 753 0
 2266 0014 8360     		str	r3, [r0, #8]
 754:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2267              		.loc 1 754 0
 2268 0016 41F27072 		movw	r2, #6000
 2269 001a C260     		str	r2, [r0, #12]
 755:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 2270              		.loc 1 755 0
 2271 001c 8361     		str	r3, [r0, #24]
 756:Src/main.c    ****     {
 2272              		.loc 1 756 0
 2273 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2274              	.LVL175:
 2275 0022 50B9     		cbnz	r0, .L171
 760:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2276              		.loc 1 760 0
 2277 0024 0023     		movs	r3, #0
 2278 0026 0093     		str	r3, [sp]
 761:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 2279              		.loc 1 761 0
 2280 0028 0193     		str	r3, [sp, #4]
 762:Src/main.c    ****     {
 2281              		.loc 1 762 0
 2282 002a 6946     		mov	r1, sp
 2283 002c 0548     		ldr	r0, .L173
 2284 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2285              	.LVL176:
 2286 0032 20B9     		cbnz	r0, .L172
 769:Src/main.c    **** 
 2287              		.loc 1 769 0
 2288 0034 03B0     		add	sp, sp, #12
 2289              	.LCFI46:
 2290              		.cfi_remember_state
 2291              		.cfi_def_cfa_offset 4
 2292              		@ sp needed
 2293 0036 5DF804FB 		ldr	pc, [sp], #4
 2294              	.L171:
ARM GAS  /tmp/cc7zquCe.s 			page 69


 2295              	.LCFI47:
 2296              		.cfi_restore_state
 758:Src/main.c    ****     }
 2297              		.loc 1 758 0
 2298 003a FFF7FEFF 		bl	Error_Handler
 2299              	.LVL177:
 2300              	.L172:
 764:Src/main.c    ****     }
 2301              		.loc 1 764 0
 2302 003e FFF7FEFF 		bl	Error_Handler
 2303              	.LVL178:
 2304              	.L174:
 2305 0042 00BF     		.align	2
 2306              	.L173:
 2307 0044 00000000 		.word	htim7
 2308 0048 00140040 		.word	1073746944
 2309              		.cfi_endproc
 2310              	.LFE143:
 2312              		.section	.text.MX_TIM10_Init,"ax",%progbits
 2313              		.align	1
 2314              		.syntax unified
 2315              		.thumb
 2316              		.thumb_func
 2317              		.fpu fpv4-sp-d16
 2319              	MX_TIM10_Init:
 2320              	.LFB144:
 777:Src/main.c    **** 
 2321              		.loc 1 777 0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 0
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 2325 0000 08B5     		push	{r3, lr}
 2326              	.LCFI48:
 2327              		.cfi_def_cfa_offset 8
 2328              		.cfi_offset 3, -8
 2329              		.cfi_offset 14, -4
 786:Src/main.c    ****     htim10.Init.Prescaler = 36;
 2330              		.loc 1 786 0
 2331 0002 0948     		ldr	r0, .L179
 2332 0004 094B     		ldr	r3, .L179+4
 2333 0006 0360     		str	r3, [r0]
 787:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 2334              		.loc 1 787 0
 2335 0008 2423     		movs	r3, #36
 2336 000a 4360     		str	r3, [r0, #4]
 788:Src/main.c    ****     htim10.Init.Period = 500;
 2337              		.loc 1 788 0
 2338 000c 0023     		movs	r3, #0
 2339 000e 8360     		str	r3, [r0, #8]
 789:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2340              		.loc 1 789 0
 2341 0010 4FF4FA72 		mov	r2, #500
 2342 0014 C260     		str	r2, [r0, #12]
 790:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2343              		.loc 1 790 0
 2344 0016 0361     		str	r3, [r0, #16]
 791:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
ARM GAS  /tmp/cc7zquCe.s 			page 70


 2345              		.loc 1 791 0
 2346 0018 8361     		str	r3, [r0, #24]
 792:Src/main.c    ****     {
 2347              		.loc 1 792 0
 2348 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2349              	.LVL179:
 2350 001e 00B9     		cbnz	r0, .L178
 2351 0020 08BD     		pop	{r3, pc}
 2352              	.L178:
 794:Src/main.c    ****     }
 2353              		.loc 1 794 0
 2354 0022 FFF7FEFF 		bl	Error_Handler
 2355              	.LVL180:
 2356              	.L180:
 2357 0026 00BF     		.align	2
 2358              	.L179:
 2359 0028 00000000 		.word	htim10
 2360 002c 00440140 		.word	1073824768
 2361              		.cfi_endproc
 2362              	.LFE144:
 2364              		.section	.text.MX_TIM11_Init,"ax",%progbits
 2365              		.align	1
 2366              		.syntax unified
 2367              		.thumb
 2368              		.thumb_func
 2369              		.fpu fpv4-sp-d16
 2371              	MX_TIM11_Init:
 2372              	.LFB145:
 807:Src/main.c    **** 
 2373              		.loc 1 807 0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 0
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377 0000 08B5     		push	{r3, lr}
 2378              	.LCFI49:
 2379              		.cfi_def_cfa_offset 8
 2380              		.cfi_offset 3, -8
 2381              		.cfi_offset 14, -4
 816:Src/main.c    ****     htim11.Init.Prescaler = 0;
 2382              		.loc 1 816 0
 2383 0002 0748     		ldr	r0, .L185
 2384 0004 074B     		ldr	r3, .L185+4
 2385 0006 0360     		str	r3, [r0]
 817:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 2386              		.loc 1 817 0
 2387 0008 0023     		movs	r3, #0
 2388 000a 4360     		str	r3, [r0, #4]
 818:Src/main.c    ****     htim11.Init.Period = 0;
 2389              		.loc 1 818 0
 2390 000c 8360     		str	r3, [r0, #8]
 819:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2391              		.loc 1 819 0
 2392 000e C360     		str	r3, [r0, #12]
 820:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2393              		.loc 1 820 0
 2394 0010 0361     		str	r3, [r0, #16]
 821:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
ARM GAS  /tmp/cc7zquCe.s 			page 71


 2395              		.loc 1 821 0
 2396 0012 8361     		str	r3, [r0, #24]
 822:Src/main.c    ****     {
 2397              		.loc 1 822 0
 2398 0014 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2399              	.LVL181:
 2400 0018 00B9     		cbnz	r0, .L184
 2401 001a 08BD     		pop	{r3, pc}
 2402              	.L184:
 824:Src/main.c    ****     }
 2403              		.loc 1 824 0
 2404 001c FFF7FEFF 		bl	Error_Handler
 2405              	.LVL182:
 2406              	.L186:
 2407              		.align	2
 2408              	.L185:
 2409 0020 00000000 		.word	htim11
 2410 0024 00480140 		.word	1073825792
 2411              		.cfi_endproc
 2412              	.LFE145:
 2414              		.section	.text.SystemClock_Config,"ax",%progbits
 2415              		.align	1
 2416              		.global	SystemClock_Config
 2417              		.syntax unified
 2418              		.thumb
 2419              		.thumb_func
 2420              		.fpu fpv4-sp-d16
 2422              	SystemClock_Config:
 2423              	.LFB133:
 314:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2424              		.loc 1 314 0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 80
 2427              		@ frame_needed = 0, uses_anonymous_args = 0
 2428 0000 00B5     		push	{lr}
 2429              	.LCFI50:
 2430              		.cfi_def_cfa_offset 4
 2431              		.cfi_offset 14, -4
 2432 0002 95B0     		sub	sp, sp, #84
 2433              	.LCFI51:
 2434              		.cfi_def_cfa_offset 88
 315:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2435              		.loc 1 315 0
 2436 0004 3422     		movs	r2, #52
 2437 0006 0021     		movs	r1, #0
 2438 0008 07A8     		add	r0, sp, #28
 2439 000a FFF7FEFF 		bl	memset
 2440              	.LVL183:
 316:Src/main.c    **** 
 2441              		.loc 1 316 0
 2442 000e 0023     		movs	r3, #0
 2443 0010 0293     		str	r3, [sp, #8]
 2444 0012 0393     		str	r3, [sp, #12]
 2445 0014 0493     		str	r3, [sp, #16]
 2446 0016 0593     		str	r3, [sp, #20]
 2447 0018 0693     		str	r3, [sp, #24]
 2448              	.LBB15:
ARM GAS  /tmp/cc7zquCe.s 			page 72


 320:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2449              		.loc 1 320 0
 2450 001a 0093     		str	r3, [sp]
 2451 001c 204A     		ldr	r2, .L193
 2452 001e 116C     		ldr	r1, [r2, #64]
 2453 0020 41F08051 		orr	r1, r1, #268435456
 2454 0024 1164     		str	r1, [r2, #64]
 2455 0026 126C     		ldr	r2, [r2, #64]
 2456 0028 02F08052 		and	r2, r2, #268435456
 2457 002c 0092     		str	r2, [sp]
 2458 002e 009A     		ldr	r2, [sp]
 2459              	.LBE15:
 2460              	.LBB16:
 321:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 2461              		.loc 1 321 0
 2462 0030 0193     		str	r3, [sp, #4]
 2463 0032 1C4B     		ldr	r3, .L193+4
 2464 0034 1A68     		ldr	r2, [r3]
 2465 0036 42F44042 		orr	r2, r2, #49152
 2466 003a 1A60     		str	r2, [r3]
 2467 003c 1B68     		ldr	r3, [r3]
 2468 003e 03F44043 		and	r3, r3, #49152
 2469 0042 0193     		str	r3, [sp, #4]
 2470 0044 019B     		ldr	r3, [sp, #4]
 2471              	.LBE16:
 324:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 2472              		.loc 1 324 0
 2473 0046 0123     		movs	r3, #1
 2474 0048 0793     		str	r3, [sp, #28]
 325:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2475              		.loc 1 325 0
 2476 004a 4FF4A023 		mov	r3, #327680
 2477 004e 0893     		str	r3, [sp, #32]
 326:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2478              		.loc 1 326 0
 2479 0050 0223     		movs	r3, #2
 2480 0052 0D93     		str	r3, [sp, #52]
 327:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2481              		.loc 1 327 0
 2482 0054 4FF48002 		mov	r2, #4194304
 2483 0058 0E92     		str	r2, [sp, #56]
 328:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 2484              		.loc 1 328 0
 2485 005a 0822     		movs	r2, #8
 2486 005c 0F92     		str	r2, [sp, #60]
 329:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2487              		.loc 1 329 0
 2488 005e 4FF49072 		mov	r2, #288
 2489 0062 1092     		str	r2, [sp, #64]
 330:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 2490              		.loc 1 330 0
 2491 0064 1193     		str	r3, [sp, #68]
 331:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 2492              		.loc 1 331 0
 2493 0066 1293     		str	r3, [sp, #72]
 332:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2494              		.loc 1 332 0
ARM GAS  /tmp/cc7zquCe.s 			page 73


 2495 0068 1393     		str	r3, [sp, #76]
 333:Src/main.c    ****     {
 2496              		.loc 1 333 0
 2497 006a 07A8     		add	r0, sp, #28
 2498 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2499              	.LVL184:
 2500 0070 88B9     		cbnz	r0, .L191
 339:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 2501              		.loc 1 339 0
 2502 0072 0F23     		movs	r3, #15
 2503 0074 0293     		str	r3, [sp, #8]
 340:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2504              		.loc 1 340 0
 2505 0076 0223     		movs	r3, #2
 2506 0078 0393     		str	r3, [sp, #12]
 341:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 2507              		.loc 1 341 0
 2508 007a 0023     		movs	r3, #0
 2509 007c 0493     		str	r3, [sp, #16]
 342:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 2510              		.loc 1 342 0
 2511 007e 4FF4A053 		mov	r3, #5120
 2512 0082 0593     		str	r3, [sp, #20]
 343:Src/main.c    **** 
 2513              		.loc 1 343 0
 2514 0084 0693     		str	r3, [sp, #24]
 345:Src/main.c    ****     {
 2515              		.loc 1 345 0
 2516 0086 0421     		movs	r1, #4
 2517 0088 02A8     		add	r0, sp, #8
 2518 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2519              	.LVL185:
 2520 008e 20B9     		cbnz	r0, .L192
 349:Src/main.c    **** 
 2521              		.loc 1 349 0
 2522 0090 15B0     		add	sp, sp, #84
 2523              	.LCFI52:
 2524              		.cfi_remember_state
 2525              		.cfi_def_cfa_offset 4
 2526              		@ sp needed
 2527 0092 5DF804FB 		ldr	pc, [sp], #4
 2528              	.L191:
 2529              	.LCFI53:
 2530              		.cfi_restore_state
 335:Src/main.c    ****     }
 2531              		.loc 1 335 0
 2532 0096 FFF7FEFF 		bl	Error_Handler
 2533              	.LVL186:
 2534              	.L192:
 347:Src/main.c    ****     }
 2535              		.loc 1 347 0
 2536 009a FFF7FEFF 		bl	Error_Handler
 2537              	.LVL187:
 2538              	.L194:
 2539 009e 00BF     		.align	2
 2540              	.L193:
 2541 00a0 00380240 		.word	1073887232
ARM GAS  /tmp/cc7zquCe.s 			page 74


 2542 00a4 00700040 		.word	1073770496
 2543              		.cfi_endproc
 2544              	.LFE133:
 2546              		.section	.text.main,"ax",%progbits
 2547              		.align	1
 2548              		.global	main
 2549              		.syntax unified
 2550              		.thumb
 2551              		.thumb_func
 2552              		.fpu fpv4-sp-d16
 2554              	main:
 2555              	.LFB132:
 148:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2556              		.loc 1 148 0
 2557              		.cfi_startproc
 2558              		@ Volatile: function does not return.
 2559              		@ args = 0, pretend = 0, frame = 0
 2560              		@ frame_needed = 0, uses_anonymous_args = 0
 2561 0000 2DE98848 		push	{r3, r7, fp, lr}
 2562              	.LCFI54:
 2563              		.cfi_def_cfa_offset 16
 2564              		.cfi_offset 3, -16
 2565              		.cfi_offset 7, -12
 2566              		.cfi_offset 11, -8
 2567              		.cfi_offset 14, -4
 155:Src/main.c    **** 
 2568              		.loc 1 155 0
 2569 0004 FFF7FEFF 		bl	HAL_Init
 2570              	.LVL188:
 162:Src/main.c    **** 
 2571              		.loc 1 162 0
 2572 0008 FFF7FEFF 		bl	SystemClock_Config
 2573              	.LVL189:
 169:Src/main.c    ****     MX_DMA_Init();
 2574              		.loc 1 169 0
 2575 000c FFF7FEFF 		bl	MX_GPIO_Init
 2576              	.LVL190:
 170:Src/main.c    ****     MX_USART2_UART_Init();
 2577              		.loc 1 170 0
 2578 0010 FFF7FEFF 		bl	MX_DMA_Init
 2579              	.LVL191:
 171:Src/main.c    ****     MX_CAN1_Init();
 2580              		.loc 1 171 0
 2581 0014 FFF7FEFF 		bl	MX_USART2_UART_Init
 2582              	.LVL192:
 172:Src/main.c    ****     MX_SPI1_Init();
 2583              		.loc 1 172 0
 2584 0018 FFF7FEFF 		bl	MX_CAN1_Init
 2585              	.LVL193:
 173:Src/main.c    ****     MX_ADC1_Init();
 2586              		.loc 1 173 0
 2587 001c FFF7FEFF 		bl	MX_SPI1_Init
 2588              	.LVL194:
 174:Src/main.c    ****     MX_USART1_UART_Init();
 2589              		.loc 1 174 0
 2590 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2591              	.LVL195:
ARM GAS  /tmp/cc7zquCe.s 			page 75


 175:Src/main.c    ****     MX_TIM2_Init();
 2592              		.loc 1 175 0
 2593 0024 FFF7FEFF 		bl	MX_USART1_UART_Init
 2594              	.LVL196:
 176:Src/main.c    ****     MX_TIM3_Init();
 2595              		.loc 1 176 0
 2596 0028 FFF7FEFF 		bl	MX_TIM2_Init
 2597              	.LVL197:
 177:Src/main.c    ****     MX_TIM4_Init();
 2598              		.loc 1 177 0
 2599 002c FFF7FEFF 		bl	MX_TIM3_Init
 2600              	.LVL198:
 178:Src/main.c    ****     MX_TIM5_Init();
 2601              		.loc 1 178 0
 2602 0030 FFF7FEFF 		bl	MX_TIM4_Init
 2603              	.LVL199:
 179:Src/main.c    ****     MX_TIM6_Init();
 2604              		.loc 1 179 0
 2605 0034 FFF7FEFF 		bl	MX_TIM5_Init
 2606              	.LVL200:
 180:Src/main.c    ****     MX_TIM7_Init();
 2607              		.loc 1 180 0
 2608 0038 FFF7FEFF 		bl	MX_TIM6_Init
 2609              	.LVL201:
 181:Src/main.c    ****     MX_TIM10_Init();
 2610              		.loc 1 181 0
 2611 003c FFF7FEFF 		bl	MX_TIM7_Init
 2612              	.LVL202:
 182:Src/main.c    ****     MX_TIM11_Init();
 2613              		.loc 1 182 0
 2614 0040 FFF7FEFF 		bl	MX_TIM10_Init
 2615              	.LVL203:
 183:Src/main.c    **** 
 2616              		.loc 1 183 0
 2617 0044 FFF7FEFF 		bl	MX_TIM11_Init
 2618              	.LVL204:
 186:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2619              		.loc 1 186 0
 2620 0048 FFF7FEFF 		bl	MX_NVIC_Init
 2621              	.LVL205:
 189:Src/main.c    ****     sFilter.FilterIdLow = 0;
 2622              		.loc 1 189 0
 2623 004c 6149     		ldr	r1, .L200
 2624 004e 0024     		movs	r4, #0
 2625 0050 8C61     		str	r4, [r1, #24]
 190:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 2626              		.loc 1 190 0
 2627 0052 4C60     		str	r4, [r1, #4]
 191:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 2628              		.loc 1 191 0
 2629 0054 0C60     		str	r4, [r1]
 192:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 2630              		.loc 1 192 0
 2631 0056 8C60     		str	r4, [r1, #8]
 193:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 2632              		.loc 1 193 0
 2633 0058 CC60     		str	r4, [r1, #12]
ARM GAS  /tmp/cc7zquCe.s 			page 76


 194:Src/main.c    ****     sFilter.FilterBank = 0;
 2634              		.loc 1 194 0
 2635 005a 0C61     		str	r4, [r1, #16]
 195:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 2636              		.loc 1 195 0
 2637 005c 4C61     		str	r4, [r1, #20]
 196:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 2638              		.loc 1 196 0
 2639 005e CC61     		str	r4, [r1, #28]
 197:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 2640              		.loc 1 197 0
 2641 0060 0126     		movs	r6, #1
 2642 0062 0E62     		str	r6, [r1, #32]
 198:Src/main.c    **** 
 2643              		.loc 1 198 0
 2644 0064 5C4D     		ldr	r5, .L200+4
 2645 0066 2846     		mov	r0, r5
 2646 0068 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 2647              	.LVL206:
 200:Src/main.c    **** 
 2648              		.loc 1 200 0
 2649 006c 2846     		mov	r0, r5
 2650 006e FFF7FEFF 		bl	HAL_CAN_Start
 2651              	.LVL207:
 202:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 2652              		.loc 1 202 0
 2653 0072 1421     		movs	r1, #20
 2654 0074 2846     		mov	r0, r5
 2655 0076 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2656              	.LVL208:
 203:Src/main.c    ****     /* USER CODE END 2 */
 2657              		.loc 1 203 0
 2658 007a 1521     		movs	r1, #21
 2659 007c 2846     		mov	r0, r5
 2660 007e FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2661              	.LVL209:
 208:Src/main.c    ****     // can initialization //
 2662              		.loc 1 208 0
 2663 0082 564B     		ldr	r3, .L200+8
 2664 0084 9D61     		str	r5, [r3, #24]
 212:Src/main.c    ****     imu.GPIO_Pin_InUse = GPIO_PIN_9;
 2665              		.loc 1 212 0
 2666 0086 564D     		ldr	r5, .L200+12
 2667 0088 564F     		ldr	r7, .L200+16
 2668 008a C5F81474 		str	r7, [r5, #1044]
 213:Src/main.c    ****     imu.GPIOx_NotInUse = GPIOA;
 2669              		.loc 1 213 0
 2670 008e 4FF40078 		mov	r8, #512
 2671 0092 A5F81884 		strh	r8, [r5, #1048]	@ movhi
 214:Src/main.c    ****     imu.GPIO_Pin_NotInUse = GPIO_PIN_8;
 2672              		.loc 1 214 0
 2673 0096 5448     		ldr	r0, .L200+20
 2674 0098 C5F81C04 		str	r0, [r5, #1052]
 215:Src/main.c    ****     imu.hspi = &hspi1;
 2675              		.loc 1 215 0
 2676 009c 4FF48071 		mov	r1, #256
 2677 00a0 A5F82014 		strh	r1, [r5, #1056]	@ movhi
ARM GAS  /tmp/cc7zquCe.s 			page 77


 216:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 2678              		.loc 1 216 0
 2679 00a4 514B     		ldr	r3, .L200+24
 2680 00a6 C5F82434 		str	r3, [r5, #1060]
 217:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 2681              		.loc 1 217 0
 2682 00aa 3246     		mov	r2, r6
 2683 00ac FFF7FEFF 		bl	HAL_GPIO_WritePin
 2684              	.LVL210:
 218:Src/main.c    **** 
 2685              		.loc 1 218 0
 2686 00b0 3246     		mov	r2, r6
 2687 00b2 4146     		mov	r1, r8
 2688 00b4 3846     		mov	r0, r7
 2689 00b6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2690              	.LVL211:
 220:Src/main.c    ****     {
 2691              		.loc 1 220 0
 2692 00ba 4D49     		ldr	r1, .L200+28
 2693 00bc 4D48     		ldr	r0, .L200+32
 2694 00be FFF7FEFF 		bl	gps_init
 2695              	.LVL212:
 225:Src/main.c    ****     steer_enc_prescaler /= 3;
 2696              		.loc 1 225 0
 2697 00c2 4D4F     		ldr	r7, .L200+36
 2698 00c4 FA68     		ldr	r2, [r7, #12]
 226:Src/main.c    ****     steer_enc_prescaler /= 20;
 2699              		.loc 1 226 0
 2700 00c6 4D4B     		ldr	r3, .L200+40
 2701 00c8 83FB0213 		smull	r1, r3, r3, r2
 2702 00cc A3EBE273 		sub	r3, r3, r2, asr #31
 227:Src/main.c    ****     steer_enc_prescaler += 40;
 2703              		.loc 1 227 0
 2704 00d0 4B49     		ldr	r1, .L200+44
 2705 00d2 81FB0321 		smull	r2, r1, r1, r3
 2706 00d6 DA17     		asrs	r2, r3, #31
 2707 00d8 C2EBE102 		rsb	r2, r2, r1, asr #3
 228:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 2708              		.loc 1 228 0
 2709 00dc 2832     		adds	r2, r2, #40
 2710 00de 494B     		ldr	r3, .L200+48
 2711 00e0 1A60     		str	r2, [r3]
 229:Src/main.c    **** 
 2712              		.loc 1 229 0
 2713 00e2 494B     		ldr	r3, .L200+52
 2714 00e4 5A66     		str	r2, [r3, #100]
 231:Src/main.c    ****     pot_2.min = 2350;
 2715              		.loc 1 231 0
 2716 00e6 494A     		ldr	r2, .L200+56
 2717 00e8 40F6DC71 		movw	r1, #4060
 2718 00ec 5160     		str	r1, [r2, #4]
 232:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 2719              		.loc 1 232 0
 2720 00ee 40F62E11 		movw	r1, #2350
 2721 00f2 9160     		str	r1, [r2, #8]
 233:Src/main.c    **** 
 2722              		.loc 1 233 0
ARM GAS  /tmp/cc7zquCe.s 			page 78


 2723 00f4 40F2AE61 		movw	r1, #1710
 2724 00f8 D160     		str	r1, [r2, #12]
 235:Src/main.c    ****     enc.interrupt_flag = 0;
 2725              		.loc 1 235 0
 2726 00fa 9E66     		str	r6, [r3, #104]
 236:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 2727              		.loc 1 236 0
 2728 00fc DC60     		str	r4, [r3, #12]
 237:Src/main.c    ****     enc.average_speed = 0;
 2729              		.loc 1 237 0
 2730 00fe DFF83491 		ldr	r9, .L200+96
 2731 0102 C3F8E893 		str	r9, [r3, #1000]
 238:Src/main.c    ****     enc.wheel_diameter = 0.395;
 2732              		.loc 1 238 0
 2733 0106 0020     		movs	r0, #0
 2734 0108 0021     		movs	r1, #0
 2735 010a C3E9F601 		strd	r0, [r3, #984]
 239:Src/main.c    ****     enc.samle_delta_time = htim7.Init.Period;
 2736              		.loc 1 239 0
 2737 010e 404A     		ldr	r2, .L200+60
 2738 0110 9A67     		str	r2, [r3, #120]	@ float
 240:Src/main.c    ****     enc.data_size = 15;
 2739              		.loc 1 240 0
 2740 0112 DFF82481 		ldr	r8, .L200+100
 2741 0116 D8F80C20 		ldr	r2, [r8, #12]
 2742 011a 1A60     		str	r2, [r3]
 241:Src/main.c    ****     enc.clock_period = 2;
 2743              		.loc 1 241 0
 2744 011c 0F22     		movs	r2, #15
 2745 011e 5A60     		str	r2, [r3, #4]
 242:Src/main.c    ****     enc.wheel_rotation = 0;
 2746              		.loc 1 242 0
 2747 0120 0222     		movs	r2, #2
 2748 0122 1A61     		str	r2, [r3, #16]
 243:Src/main.c    ****     enc.Km = 0;
 2749              		.loc 1 243 0
 2750 0124 DC66     		str	r4, [r3, #108]
 244:Src/main.c    **** 
 2751              		.loc 1 244 0
 2752 0126 0022     		movs	r2, #0
 2753 0128 1A67     		str	r2, [r3, #112]	@ float
 246:Src/main.c    ****     enc.frequency_timer = &htim7;
 2754              		.loc 1 246 0
 2755 012a C3F88020 		str	r2, [r3, #128]	@ float
 247:Src/main.c    **** 
 2756              		.loc 1 247 0
 2757 012e C3F8EC83 		str	r8, [r3, #1004]
 249:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 2758              		.loc 1 249 0
 2759 0132 DFF808B1 		ldr	fp, .L200+104
 2760 0136 5846     		mov	r0, fp
 2761 0138 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2762              	.LVL213:
 250:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 2763              		.loc 1 250 0
 2764 013c 3846     		mov	r0, r7
 2765 013e FFF7FEFF 		bl	HAL_TIM_Base_Start
ARM GAS  /tmp/cc7zquCe.s 			page 79


 2766              	.LVL214:
 254:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 2767              		.loc 1 254 0
 2768 0142 4046     		mov	r0, r8
 2769 0144 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2770              	.LVL215:
 255:Src/main.c    **** 
 2771              		.loc 1 255 0
 2772 0148 DFF8F4A0 		ldr	r10, .L200+108
 2773 014c 5046     		mov	r0, r10
 2774 014e FFF7FEFF 		bl	HAL_TIM_Base_Start
 2775              	.LVL216:
 257:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 2776              		.loc 1 257 0
 2777 0152 5846     		mov	r0, fp
 2778 0154 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2779              	.LVL217:
 258:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 2780              		.loc 1 258 0
 2781 0158 3846     		mov	r0, r7
 2782 015a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2783              	.LVL218:
 262:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 2784              		.loc 1 262 0
 2785 015e 4046     		mov	r0, r8
 2786 0160 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2787              	.LVL219:
 263:Src/main.c    **** 
 2788              		.loc 1 263 0
 2789 0164 5046     		mov	r0, r10
 2790 0166 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2791              	.LVL220:
 265:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 2792              		.loc 1 265 0
 2793 016a 2A4B     		ldr	r3, .L200+64
 2794 016c 1B68     		ldr	r3, [r3]
 2795 016e 5C62     		str	r4, [r3, #36]
 266:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 2796              		.loc 1 266 0
 2797 0170 D9F80030 		ldr	r3, [r9]
 2798 0174 5C62     		str	r4, [r3, #36]
 270:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 2799              		.loc 1 270 0
 2800 0176 284B     		ldr	r3, .L200+68
 2801 0178 1B68     		ldr	r3, [r3]
 2802 017a 5C62     		str	r4, [r3, #36]
 271:Src/main.c    **** 
 2803              		.loc 1 271 0
 2804 017c 274B     		ldr	r3, .L200+72
 2805 017e 1B68     		ldr	r3, [r3]
 2806 0180 5C62     		str	r4, [r3, #36]
 274:Src/main.c    ****     LSMD9S0_check(&imu);
 2807              		.loc 1 274 0
 2808 0182 2846     		mov	r0, r5
 2809 0184 FFF7FEFF 		bl	LSMD9S0_accel_gyro_init
 2810              	.LVL221:
 275:Src/main.c    **** 
ARM GAS  /tmp/cc7zquCe.s 			page 80


 2811              		.loc 1 275 0
 2812 0188 2846     		mov	r0, r5
 2813 018a FFF7FEFF 		bl	LSMD9S0_check
 2814              	.LVL222:
 277:Src/main.c    ****     //LSM9DS0_calibration(&imu);
 2815              		.loc 1 277 0
 2816 018e C5F80864 		str	r6, [r5, #1032]
 280:Src/main.c    **** 
 2817              		.loc 1 280 0
 2818 0192 234B     		ldr	r3, .L200+76
 2819 0194 1C60     		str	r4, [r3]
 2820 0196 05E0     		b	.L196
 2821              	.L197:
 302:Src/main.c    ****             command_flag = 0;
 2822              		.loc 1 302 0
 2823 0198 0120     		movs	r0, #1
 2824 019a FFF7FEFF 		bl	HAL_Delay
 2825              	.LVL223:
 303:Src/main.c    ****         }
 2826              		.loc 1 303 0
 2827 019e 0022     		movs	r2, #0
 2828 01a0 204B     		ldr	r3, .L200+80
 2829 01a2 1A60     		str	r2, [r3]
 2830              	.L196:
 289:Src/main.c    **** 
 2831              		.loc 1 289 0
 2832 01a4 0322     		movs	r2, #3
 2833 01a6 2049     		ldr	r1, .L200+84
 2834 01a8 2048     		ldr	r0, .L200+88
 2835 01aa FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2836              	.LVL224:
 292:Src/main.c    ****         {
 2837              		.loc 1 292 0
 2838 01ae 1D4B     		ldr	r3, .L200+80
 2839 01b0 1B68     		ldr	r3, [r3]
 2840 01b2 002B     		cmp	r3, #0
 2841 01b4 F0D1     		bne	.L197
 294:Src/main.c    ****             {
 2842              		.loc 1 294 0
 2843 01b6 FFF7FEFF 		bl	HAL_GetTick
 2844              	.LVL225:
 2845 01ba 1D4B     		ldr	r3, .L200+92
 2846 01bc 1B68     		ldr	r3, [r3]
 2847 01be 9842     		cmp	r0, r3
 2848 01c0 F0D0     		beq	.L196
 296:Src/main.c    ****                 previous_millis = HAL_GetTick();
 2849              		.loc 1 296 0
 2850 01c2 FFF7FEFF 		bl	HAL_GetTick
 2851              	.LVL226:
 2852 01c6 FFF7FEFF 		bl	send_CAN_data
 2853              	.LVL227:
 297:Src/main.c    ****             }
 2854              		.loc 1 297 0
 2855 01ca FFF7FEFF 		bl	HAL_GetTick
 2856              	.LVL228:
 2857 01ce 184B     		ldr	r3, .L200+92
 2858 01d0 1860     		str	r0, [r3]
ARM GAS  /tmp/cc7zquCe.s 			page 81


 2859 01d2 E7E7     		b	.L196
 2860              	.L201:
 2861              		.align	2
 2862              	.L200:
 2863 01d4 00000000 		.word	sFilter
 2864 01d8 00000000 		.word	hcan1
 2865 01dc 00000000 		.word	can
 2866 01e0 00000000 		.word	imu
 2867 01e4 00080240 		.word	1073874944
 2868 01e8 00000240 		.word	1073872896
 2869 01ec 00000000 		.word	hspi1
 2870 01f0 00000000 		.word	gps_main
 2871 01f4 00000000 		.word	huart1
 2872 01f8 00000000 		.word	htim3
 2873 01fc 56555555 		.word	1431655766
 2874 0200 67666666 		.word	1717986919
 2875 0204 00000000 		.word	steer_enc_prescaler
 2876 0208 00000000 		.word	enc
 2877 020c 00000000 		.word	pot_2
 2878 0210 713DCA3E 		.word	1053441393
 2879 0214 00000000 		.word	.LANCHOR5
 2880 0218 00000000 		.word	.LANCHOR6
 2881 021c 00000000 		.word	.LANCHOR7
 2882 0220 00000000 		.word	encoder_counter
 2883 0224 00000000 		.word	.LANCHOR0
 2884 0228 00000000 		.word	ADC_buffer
 2885 022c 00000000 		.word	hadc1
 2886 0230 00000000 		.word	previous_millis
 2887 0234 00000000 		.word	.LANCHOR4
 2888 0238 00000000 		.word	htim7
 2889 023c 00000000 		.word	htim2
 2890 0240 00000000 		.word	htim10
 2891              		.cfi_endproc
 2892              	.LFE132:
 2894              		.comm	previous_millis,4,4
 2895              		.comm	encoder_counter,4,4
 2896              		.comm	steer_enc_prescaler,4,4
 2897              		.comm	gps_main,100,4
 2898              		.global	a_TimerInstance10
 2899              		.global	a_TimerInstance7
 2900              		.global	a_TimerInstance6
 2901              		.global	a_TimerInstance5
 2902              		.global	a_TimerInstance4
 2903              		.global	a_TimerInstance3
 2904              		.global	a_TimerInstance2
 2905              		.global	calibration_flag
 2906              		.global	command_flag
 2907              		.global	timer_factor
 2908              		.global	multiplier
 2909              		.global	flag
 2910              		.comm	txt,100,4
 2911              		.comm	val,12,4
 2912              		.comm	ADC_buffer,16,4
 2913              		.comm	val0rang,4,4
 2914              		.comm	valMin0,4,4
 2915              		.comm	valMax0,4,4
 2916              		.comm	sFilter,40,4
ARM GAS  /tmp/cc7zquCe.s 			page 82


 2917              		.comm	huart2,64,4
 2918              		.comm	huart1,64,4
 2919              		.comm	htim11,64,4
 2920              		.comm	htim10,64,4
 2921              		.comm	htim7,64,4
 2922              		.comm	htim6,64,4
 2923              		.comm	htim5,64,4
 2924              		.comm	htim4,64,4
 2925              		.comm	htim3,64,4
 2926              		.comm	htim2,64,4
 2927              		.comm	hspi1,88,4
 2928              		.comm	hcan1,40,4
 2929              		.comm	hdma_adc1,96,4
 2930              		.comm	hadc1,72,4
 2931              		.section	.bss.calibration_flag,"aw",%nobits
 2932              		.align	2
 2933              		.set	.LANCHOR1,. + 0
 2936              	calibration_flag:
 2937 0000 00000000 		.space	4
 2938              		.section	.bss.command_flag,"aw",%nobits
 2939              		.align	2
 2940              		.set	.LANCHOR0,. + 0
 2943              	command_flag:
 2944 0000 00000000 		.space	4
 2945              		.section	.bss.flag,"aw",%nobits
 2946              		.align	2
 2947              		.set	.LANCHOR3,. + 0
 2950              	flag:
 2951 0000 00000000 		.space	4
 2952              		.section	.data.a_TimerInstance10,"aw",%progbits
 2953              		.align	2
 2954              		.set	.LANCHOR7,. + 0
 2957              	a_TimerInstance10:
 2958 0000 00440140 		.word	1073824768
 2959 0004 00000000 		.space	60
 2959      00000000 
 2959      00000000 
 2959      00000000 
 2959      00000000 
 2960              		.section	.data.a_TimerInstance2,"aw",%progbits
 2961              		.align	2
 2962              		.set	.LANCHOR5,. + 0
 2965              	a_TimerInstance2:
 2966 0000 00000040 		.word	1073741824
 2967 0004 00000000 		.space	60
 2967      00000000 
 2967      00000000 
 2967      00000000 
 2967      00000000 
 2968              		.section	.data.a_TimerInstance3,"aw",%progbits
 2969              		.align	2
 2970              		.set	.LANCHOR4,. + 0
 2973              	a_TimerInstance3:
 2974 0000 00040040 		.word	1073742848
 2975 0004 00000000 		.space	60
 2975      00000000 
 2975      00000000 
ARM GAS  /tmp/cc7zquCe.s 			page 83


 2975      00000000 
 2975      00000000 
 2976              		.section	.data.a_TimerInstance4,"aw",%progbits
 2977              		.align	2
 2980              	a_TimerInstance4:
 2981 0000 00080040 		.word	1073743872
 2982 0004 00000000 		.space	60
 2982      00000000 
 2982      00000000 
 2982      00000000 
 2982      00000000 
 2983              		.section	.data.a_TimerInstance5,"aw",%progbits
 2984              		.align	2
 2987              	a_TimerInstance5:
 2988 0000 000C0040 		.word	1073744896
 2989 0004 00000000 		.space	60
 2989      00000000 
 2989      00000000 
 2989      00000000 
 2989      00000000 
 2990              		.section	.data.a_TimerInstance6,"aw",%progbits
 2991              		.align	2
 2994              	a_TimerInstance6:
 2995 0000 00100040 		.word	1073745920
 2996 0004 00000000 		.space	60
 2996      00000000 
 2996      00000000 
 2996      00000000 
 2996      00000000 
 2997              		.section	.data.a_TimerInstance7,"aw",%progbits
 2998              		.align	2
 2999              		.set	.LANCHOR6,. + 0
 3002              	a_TimerInstance7:
 3003 0000 00140040 		.word	1073746944
 3004 0004 00000000 		.space	60
 3004      00000000 
 3004      00000000 
 3004      00000000 
 3004      00000000 
 3005              		.section	.data.multiplier,"aw",%progbits
 3006              		.align	2
 3007              		.set	.LANCHOR2,. + 0
 3010              	multiplier:
 3011 0000 01000000 		.word	1
 3012              		.section	.data.timer_factor,"aw",%progbits
 3013              		.align	2
 3016              	timer_factor:
 3017 0000 02000000 		.word	2
 3018              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 3019              		.align	2
 3020              	.LC0:
 3021 0000 4572726F 		.ascii	"Error on file: \000"
 3021      72206F6E 
 3021      2066696C 
 3021      653A2000 
 3022              	.LC1:
 3023 0010 0D0A00   		.ascii	"\015\012\000"
ARM GAS  /tmp/cc7zquCe.s 			page 84


 3024              		.text
 3025              	.Letext0:
 3026              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3027              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3028              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3029              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3030              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3031              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3032              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3033              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3034              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3035              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3036              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3037              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3038              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3039              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 3040              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3041              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3042              		.file 18 "/usr/include/newlib/sys/lock.h"
 3043              		.file 19 "/usr/include/newlib/sys/_types.h"
 3044              		.file 20 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3045              		.file 21 "/usr/include/newlib/sys/reent.h"
 3046              		.file 22 "/usr/include/newlib/stdlib.h"
 3047              		.file 23 "/usr/include/newlib/math.h"
 3048              		.file 24 "Inc/Eagle_TRT.h"
 3049              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 3050              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 3051              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc7zquCe.s 			page 85


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc7zquCe.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc7zquCe.s:190    .text.MX_GPIO_Init:00000000000000ec $d
     /tmp/cc7zquCe.s:198    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:204    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc7zquCe.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc7zquCe.s:253    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:259    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/cc7zquCe.s:385    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc7zquCe.s:392    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc7zquCe.s:417    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000010 ADC_buffer
     /tmp/cc7zquCe.s:425    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc7zquCe.s:432    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc7zquCe.s:462    .text.HAL_UART_RxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart1
                            *COM*:0000000000000064 gps_main
     /tmp/cc7zquCe.s:468    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cc7zquCe.s:475    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cc7zquCe.s:506    .text.HAL_UART_TxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart2
     /tmp/cc7zquCe.s:511    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cc7zquCe.s:518    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/cc7zquCe.s:786    .text.HAL_CAN_RxFifo0FullCallback:0000000000000130 $d
     /tmp/cc7zquCe.s:795    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc7zquCe.s:802    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc7zquCe.s:898    .text.HAL_TIM_PeriodElapsedCallback:000000000000006c $d
                            *COM*:0000000000000040 htim10
                            *COM*:0000000000000040 htim7
     /tmp/cc7zquCe.s:911    .text.send_CAN_data:0000000000000000 $t
     /tmp/cc7zquCe.s:918    .text.send_CAN_data:0000000000000000 send_CAN_data
     /tmp/cc7zquCe.s:1343   .text.send_CAN_data:0000000000000268 $d
     /tmp/cc7zquCe.s:1356   .text.Error_Handler:0000000000000000 $t
     /tmp/cc7zquCe.s:1363   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc7zquCe.s:1395   .text.Error_Handler:0000000000000020 $d
     /tmp/cc7zquCe.s:1402   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1408   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc7zquCe.s:1452   .text.MX_USART2_UART_Init:0000000000000028 $d
     /tmp/cc7zquCe.s:1459   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1465   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc7zquCe.s:1519   .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/cc7zquCe.s:1525   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1531   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc7zquCe.s:1584   .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/cc7zquCe.s:1590   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1596   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc7zquCe.s:1682   .text.MX_ADC1_Init:000000000000005c $d
                            *COM*:0000000000000048 hadc1
     /tmp/cc7zquCe.s:1689   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1695   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc7zquCe.s:1739   .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/cc7zquCe.s:1745   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1751   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
ARM GAS  /tmp/cc7zquCe.s 			page 86


     /tmp/cc7zquCe.s:1858   .text.MX_TIM2_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc7zquCe.s:1863   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1869   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc7zquCe.s:1955   .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/cc7zquCe.s:1961   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:1967   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/cc7zquCe.s:2053   .text.MX_TIM4_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim4
     /tmp/cc7zquCe.s:2059   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:2065   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/cc7zquCe.s:2151   .text.MX_TIM5_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim5
     /tmp/cc7zquCe.s:2157   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:2163   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/cc7zquCe.s:2229   .text.MX_TIM6_Init:0000000000000044 $d
                            *COM*:0000000000000040 htim6
     /tmp/cc7zquCe.s:2235   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:2241   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/cc7zquCe.s:2307   .text.MX_TIM7_Init:0000000000000044 $d
     /tmp/cc7zquCe.s:2313   .text.MX_TIM10_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:2319   .text.MX_TIM10_Init:0000000000000000 MX_TIM10_Init
     /tmp/cc7zquCe.s:2359   .text.MX_TIM10_Init:0000000000000028 $d
     /tmp/cc7zquCe.s:2365   .text.MX_TIM11_Init:0000000000000000 $t
     /tmp/cc7zquCe.s:2371   .text.MX_TIM11_Init:0000000000000000 MX_TIM11_Init
     /tmp/cc7zquCe.s:2409   .text.MX_TIM11_Init:0000000000000020 $d
                            *COM*:0000000000000040 htim11
     /tmp/cc7zquCe.s:2415   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc7zquCe.s:2422   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc7zquCe.s:2541   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/cc7zquCe.s:2547   .text.main:0000000000000000 $t
     /tmp/cc7zquCe.s:2554   .text.main:0000000000000000 main
     /tmp/cc7zquCe.s:2863   .text.main:00000000000001d4 $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000004 steer_enc_prescaler
                            *COM*:0000000000000004 encoder_counter
                            *COM*:0000000000000004 previous_millis
     /tmp/cc7zquCe.s:2957   .data.a_TimerInstance10:0000000000000000 a_TimerInstance10
     /tmp/cc7zquCe.s:3002   .data.a_TimerInstance7:0000000000000000 a_TimerInstance7
     /tmp/cc7zquCe.s:2994   .data.a_TimerInstance6:0000000000000000 a_TimerInstance6
     /tmp/cc7zquCe.s:2987   .data.a_TimerInstance5:0000000000000000 a_TimerInstance5
     /tmp/cc7zquCe.s:2980   .data.a_TimerInstance4:0000000000000000 a_TimerInstance4
     /tmp/cc7zquCe.s:2973   .data.a_TimerInstance3:0000000000000000 a_TimerInstance3
     /tmp/cc7zquCe.s:2965   .data.a_TimerInstance2:0000000000000000 a_TimerInstance2
     /tmp/cc7zquCe.s:2936   .bss.calibration_flag:0000000000000000 calibration_flag
     /tmp/cc7zquCe.s:2943   .bss.command_flag:0000000000000000 command_flag
     /tmp/cc7zquCe.s:3016   .data.timer_factor:0000000000000000 timer_factor
     /tmp/cc7zquCe.s:3010   .data.multiplier:0000000000000000 multiplier
     /tmp/cc7zquCe.s:2950   .bss.flag:0000000000000000 flag
                            *COM*:0000000000000064 txt
                            *COM*:000000000000000c val
                            *COM*:0000000000000004 val0rang
                            *COM*:0000000000000004 valMin0
                            *COM*:0000000000000004 valMax0
                            *COM*:0000000000000060 hdma_adc1
     /tmp/cc7zquCe.s:2932   .bss.calibration_flag:0000000000000000 $d
ARM GAS  /tmp/cc7zquCe.s 			page 87


     /tmp/cc7zquCe.s:2939   .bss.command_flag:0000000000000000 $d
     /tmp/cc7zquCe.s:2946   .bss.flag:0000000000000000 $d
     /tmp/cc7zquCe.s:2953   .data.a_TimerInstance10:0000000000000000 $d
     /tmp/cc7zquCe.s:2961   .data.a_TimerInstance2:0000000000000000 $d
     /tmp/cc7zquCe.s:2969   .data.a_TimerInstance3:0000000000000000 $d
     /tmp/cc7zquCe.s:2977   .data.a_TimerInstance4:0000000000000000 $d
     /tmp/cc7zquCe.s:2984   .data.a_TimerInstance5:0000000000000000 $d
     /tmp/cc7zquCe.s:2991   .data.a_TimerInstance6:0000000000000000 $d
     /tmp/cc7zquCe.s:2998   .data.a_TimerInstance7:0000000000000000 $d
     /tmp/cc7zquCe.s:3006   .data.multiplier:0000000000000000 $d
     /tmp/cc7zquCe.s:3013   .data.timer_factor:0000000000000000 $d
     /tmp/cc7zquCe.s:3019   .rodata.Error_Handler.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
pot_1
pot_2
pot_3
gps_read_it
print_it
CAN_Receive
set_min
CAN_Send
set_max
can
LSMD9S0_accel_read
calc_pot_value
LSMD9S0_gyro_read
encoder_tim_interrupt
imu
enc
__aeabi_d2uiz
__aeabi_ddiv
HAL_UART_Transmit
HAL_UART_Init
HAL_CAN_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
gps_init
HAL_TIM_Base_Start
HAL_TIM_Base_Start_IT
ARM GAS  /tmp/cc7zquCe.s 			page 88


LSMD9S0_accel_gyro_init
LSMD9S0_check
HAL_Delay
HAL_ADC_Start_DMA
HAL_GetTick
