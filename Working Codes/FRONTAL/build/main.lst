ARM GAS  /tmp/cc7Pcclv.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB149:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "Eagle_TRT.h"
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** #include "stdio.h"
  29:Src/main.c    **** #include "stdlib.h"
  30:Src/main.c    **** #include <inttypes.h>
  31:Src/main.c    **** #include "stm32f4xx_hal_gpio.h"
  32:Src/main.c    **** #include "stm32f4xx_it.h"
ARM GAS  /tmp/cc7Pcclv.s 			page 2


  33:Src/main.c    **** #include <math.h>
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** ADC_HandleTypeDef hadc1;
  53:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_HandleTypeDef hcan1;
  56:Src/main.c    **** 
  57:Src/main.c    **** SPI_HandleTypeDef hspi1;
  58:Src/main.c    **** 
  59:Src/main.c    **** TIM_HandleTypeDef htim2;
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** TIM_HandleTypeDef htim4;
  62:Src/main.c    **** TIM_HandleTypeDef htim5;
  63:Src/main.c    **** TIM_HandleTypeDef htim6;
  64:Src/main.c    **** TIM_HandleTypeDef htim7;
  65:Src/main.c    **** TIM_HandleTypeDef htim10;
  66:Src/main.c    **** TIM_HandleTypeDef htim11;
  67:Src/main.c    **** 
  68:Src/main.c    **** UART_HandleTypeDef huart1;
  69:Src/main.c    **** UART_HandleTypeDef huart2;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  73:Src/main.c    **** extern can_stc can;
  74:Src/main.c    **** extern imu_stc accel;
  75:Src/main.c    **** extern imu_stc gyro;
  76:Src/main.c    **** extern enc_stc enc;
  77:Src/main.c    **** extern pot_stc pot_1;
  78:Src/main.c    **** extern pot_stc pot_2;
  79:Src/main.c    **** extern pot_stc pot_3;
  80:Src/main.c    **** 
  81:Src/main.c    **** CAN_FilterTypeDef sFilter;
  82:Src/main.c    **** uint32_t valMax0, valMin0, val0rang;
  83:Src/main.c    **** uint32_t ADC_buffer[4], val[3];
  84:Src/main.c    **** char txt[100];
  85:Src/main.c    **** int flag = 0;
  86:Src/main.c    **** int multiplier = 1;
  87:Src/main.c    **** int timer_factor = 2;
  88:Src/main.c    **** int command_flag = 0;
  89:Src/main.c    **** int calibration_flag = 0;
ARM GAS  /tmp/cc7Pcclv.s 			page 3


  90:Src/main.c    **** int inverter_rpm = 0;
  91:Src/main.c    **** 
  92:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance2 = {.Instance = TIM2};
  93:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance3 = {.Instance = TIM3};
  94:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance4 = {.Instance = TIM4};
  95:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance5 = {.Instance = TIM5};
  96:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  97:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  98:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance10 = {.Instance = TIM10};
  99:Src/main.c    **** 
 100:Src/main.c    **** gps_struct gps_main;
 101:Src/main.c    **** /* USER CODE END PV */
 102:Src/main.c    **** 
 103:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 104:Src/main.c    **** void SystemClock_Config(void);
 105:Src/main.c    **** static void MX_GPIO_Init(void);
 106:Src/main.c    **** static void MX_DMA_Init(void);
 107:Src/main.c    **** static void MX_USART2_UART_Init(void);
 108:Src/main.c    **** static void MX_CAN1_Init(void);
 109:Src/main.c    **** static void MX_SPI1_Init(void);
 110:Src/main.c    **** static void MX_ADC1_Init(void);
 111:Src/main.c    **** static void MX_USART1_UART_Init(void);
 112:Src/main.c    **** static void MX_TIM2_Init(void);
 113:Src/main.c    **** static void MX_TIM3_Init(void);
 114:Src/main.c    **** static void MX_TIM4_Init(void);
 115:Src/main.c    **** static void MX_TIM5_Init(void);
 116:Src/main.c    **** static void MX_TIM6_Init(void);
 117:Src/main.c    **** static void MX_TIM7_Init(void);
 118:Src/main.c    **** static void MX_TIM10_Init(void);
 119:Src/main.c    **** static void MX_TIM11_Init(void);
 120:Src/main.c    **** static void MX_NVIC_Init(void);
 121:Src/main.c    **** /* USER CODE BEGIN PFP */
 122:Src/main.c    **** 
 123:Src/main.c    **** int send_CAN_data(uint32_t);
 124:Src/main.c    **** 
 125:Src/main.c    **** /* USER CODE END PFP */
 126:Src/main.c    **** 
 127:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 128:Src/main.c    **** /* USER CODE BEGIN 0 */
 129:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 130:Src/main.c    **** {
 131:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 132:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 133:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 134:Src/main.c    ****     /*int txt_1[100];
 135:Src/main.c    ****     sprintf(txt_1, "sterzo: %d %d %d\r\n", pot_1.val, pot_2.val, pot_3.val);
 136:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)txt_1, strlen(txt_1), 10);*/
 137:Src/main.c    **** }
 138:Src/main.c    **** 
 139:Src/main.c    **** int steer_enc_prescaler;
 140:Src/main.c    **** int encoder_counter;
 141:Src/main.c    **** int previous_millis;
 142:Src/main.c    **** int second_millis;
 143:Src/main.c    **** 
 144:Src/main.c    **** int count_message;
 145:Src/main.c    **** 
 146:Src/main.c    **** /* USER CODE END 0 */
ARM GAS  /tmp/cc7Pcclv.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    **** /**
 149:Src/main.c    ****   * @brief  The application entry point.
 150:Src/main.c    ****   * @retval int
 151:Src/main.c    ****   */
 152:Src/main.c    **** int main(void)
 153:Src/main.c    **** {
 154:Src/main.c    ****     /* USER CODE BEGIN 1 */
 155:Src/main.c    ****     /* USER CODE END 1 */
 156:Src/main.c    **** 
 157:Src/main.c    ****     /* MCU Configuration--------------------------------------------------------*/
 158:Src/main.c    **** 
 159:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 160:Src/main.c    ****     HAL_Init();
 161:Src/main.c    **** 
 162:Src/main.c    ****     /* USER CODE BEGIN Init */
 163:Src/main.c    **** 
 164:Src/main.c    ****     /* USER CODE END Init */
 165:Src/main.c    **** 
 166:Src/main.c    ****     /* Configure the system clock */
 167:Src/main.c    ****     SystemClock_Config();
 168:Src/main.c    **** 
 169:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 170:Src/main.c    **** 
 171:Src/main.c    ****     /* USER CODE END SysInit */
 172:Src/main.c    **** 
 173:Src/main.c    ****     /* Initialize all configured peripherals */
 174:Src/main.c    ****     MX_GPIO_Init();
 175:Src/main.c    ****     MX_DMA_Init();
 176:Src/main.c    ****     MX_USART2_UART_Init();
 177:Src/main.c    ****     MX_CAN1_Init();
 178:Src/main.c    ****     MX_SPI1_Init();
 179:Src/main.c    ****     MX_ADC1_Init();
 180:Src/main.c    ****     MX_USART1_UART_Init();
 181:Src/main.c    ****     MX_TIM2_Init();
 182:Src/main.c    ****     MX_TIM3_Init();
 183:Src/main.c    ****     MX_TIM4_Init();
 184:Src/main.c    ****     MX_TIM5_Init();
 185:Src/main.c    ****     MX_TIM6_Init();
 186:Src/main.c    ****     MX_TIM7_Init();
 187:Src/main.c    ****     MX_TIM10_Init();
 188:Src/main.c    ****     MX_TIM11_Init();
 189:Src/main.c    **** 
 190:Src/main.c    ****     /* Initialize interrupts */
 191:Src/main.c    ****     MX_NVIC_Init();
 192:Src/main.c    ****     /* USER CODE BEGIN 2 */
 193:Src/main.c    **** 
 194:Src/main.c    ****     sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 195:Src/main.c    ****     sFilter.FilterIdLow = 0;
 196:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 197:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 198:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 199:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 200:Src/main.c    ****     sFilter.FilterBank = 0;
 201:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 202:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 203:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
ARM GAS  /tmp/cc7Pcclv.s 			page 5


 204:Src/main.c    **** 
 205:Src/main.c    ****     HAL_CAN_Start(&hcan1);
 206:Src/main.c    **** 
 207:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 208:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 209:Src/main.c    ****     /* USER CODE END 2 */
 210:Src/main.c    **** 
 211:Src/main.c    ****     /* Infinite loop */
 212:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 213:Src/main.c    ****     can.hcan = &hcan1;
 214:Src/main.c    ****     // can initialization //
 215:Src/main.c    **** 
 216:Src/main.c    ****     // imu initialization //
 217:Src/main.c    ****     accel.GPIOx_InUse = GPIOC;
 218:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 219:Src/main.c    ****     accel.hspi = &hspi1;
 220:Src/main.c    **** 
 221:Src/main.c    ****     gyro.GPIOx_InUse = GPIOA;
 222:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 223:Src/main.c    ****     gyro.hspi = &hspi1;
 224:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 225:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 226:Src/main.c    **** 
 227:Src/main.c    ****     steer_enc_prescaler = htim3.Init.Period;
 228:Src/main.c    ****     steer_enc_prescaler /= 3;
 229:Src/main.c    ****     steer_enc_prescaler /= 20;
 230:Src/main.c    ****     steer_enc_prescaler += 40;
 231:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 232:Src/main.c    **** 
 233:Src/main.c    ****     pot_2.max = 4060;
 234:Src/main.c    ****     pot_2.min = 2350;
 235:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 236:Src/main.c    **** 
 237:Src/main.c    ****     enc.ClockPinName = GPIOC;
 238:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 239:Src/main.c    ****     enc.DataPinName = GPIOC;
 240:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 241:Src/main.c    **** 
 242:Src/main.c    ****     enc.dx_wheel = 1;
 243:Src/main.c    ****     enc.interrupt_flag = 0;
 244:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 245:Src/main.c    ****     enc.average_speed = 0;
 246:Src/main.c    ****     enc.wheel_diameter = 0.395;
 247:Src/main.c    ****     enc.data_size = 14;
 248:Src/main.c    ****     enc.clock_period = 2;
 249:Src/main.c    ****     enc.wheel_rotation = 0;
 250:Src/main.c    ****     enc.Km = 0;
 251:Src/main.c    **** 
 252:Src/main.c    ****     enc.max_delta_angle = 5;
 253:Src/main.c    ****     enc.frequency = 0;
 254:Src/main.c    ****     enc.frequency_timer = &htim7;
 255:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 256:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 257:Src/main.c    **** 
 258:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 259:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 260:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
ARM GAS  /tmp/cc7Pcclv.s 			page 6


 261:Src/main.c    ****     //HAL_TIM_Base_Start(&htim5);
 262:Src/main.c    ****     //HAL_TIM_Base_Start(&htim6);
 263:Src/main.c    ****     HAL_TIM_Base_Start(&htim7);
 264:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 265:Src/main.c    **** 
 266:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 267:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 268:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 269:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim5);
 270:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim6);
 271:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim7);
 272:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 273:Src/main.c    **** 
 274:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance2, 0);
 275:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 276:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 277:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance5, 0);
 278:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance6, 0);
 279:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance7, 0);
 280:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 281:Src/main.c    **** 
 282:Src/main.c    ****     // INIT Encoder
 283:Src/main.c    ****     enc_calculate_optimal_frequency(&enc);
 284:Src/main.c    **** 
 285:Src/main.c    ****     accel.scale = 4;
 286:Src/main.c    ****     gyro.scale = 500;
 287:Src/main.c    **** 
 288:Src/main.c    ****     //HAL_Delay(1000);
 289:Src/main.c    ****     LSMD9S0_accel_gyro_init(&accel, &gyro);
 290:Src/main.c    ****     LSMD9S0_check(&accel);
 291:Src/main.c    **** 
 292:Src/main.c    ****     LSM9DS0_calibration(&accel);
 293:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 294:Src/main.c    **** 
 295:Src/main.c    ****     encoder_counter = 0;
 296:Src/main.c    **** 
 297:Src/main.c    ****     HAL_Delay(1);
 298:Src/main.c    **** 
 299:Src/main.c    ****     can.dataTx[0] = 0x3D;
 300:Src/main.c    ****     can.dataTx[1] = 0xA8;
 301:Src/main.c    ****     can.dataTx[2] = 0x64;
 302:Src/main.c    ****     can.id = 0x201;
 303:Src/main.c    ****     can.size = 3;
 304:Src/main.c    ****     CAN_Send(&can);
 305:Src/main.c    **** 
 306:Src/main.c    ****     can.dataTx[0] = 0x3D;
 307:Src/main.c    ****     can.dataTx[1] = 0xA8;
 308:Src/main.c    ****     can.dataTx[2] = 0x64;
 309:Src/main.c    ****     can.id = 0x202;
 310:Src/main.c    ****     can.size = 3;
 311:Src/main.c    ****     CAN_Send(&can);
 312:Src/main.c    **** 
 313:Src/main.c    ****     HAL_Delay(1);
 314:Src/main.c    **** 
 315:Src/main.c    ****     second_millis = HAL_GetTick();
 316:Src/main.c    **** 
 317:Src/main.c    ****     if (gps_init(&huart1, &gps_main) == 0)
ARM GAS  /tmp/cc7Pcclv.s 			page 7


 318:Src/main.c    ****     {
 319:Src/main.c    ****         //--error--//
 320:Src/main.c    ****     }
 321:Src/main.c    **** 
 322:Src/main.c    ****     while (1)
 323:Src/main.c    ****     {
 324:Src/main.c    **** 
 325:Src/main.c    ****         /* USER CODE END WHILE */
 326:Src/main.c    **** 
 327:Src/main.c    ****         /* USER CODE BEGIN 3 */
 328:Src/main.c    **** 
 329:Src/main.c    ****         HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 330:Src/main.c    ****         
 331:Src/main.c    ****         /*
 332:Src/main.c    ****         for(int i = 0; i < enc.data_size; i++){
 333:Src/main.c    ****             sprintf(txt, "%d ", enc.Data[i]);
 334:Src/main.c    ****             HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 335:Src/main.c    ****         }
 336:Src/main.c    ****         sprintf(txt, "\r\n");
 337:Src/main.c    ****         HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);*/
 338:Src/main.c    **** 
 339:Src/main.c    **** 
 340:Src/main.c    ****         // If CAN is free from important messages, send data
 341:Src/main.c    ****         if (command_flag == 0)
 342:Src/main.c    ****         {
 343:Src/main.c    ****             if (previous_millis != HAL_GetTick())
 344:Src/main.c    ****             {
 345:Src/main.c    ****                 // ALL DATA
 346:Src/main.c    ****                 // sprintf(txt, "speed: %d distance: %d ax: %d, ay: %d, az: %d gx: %d gy: %d gz: %d
 347:Src/main.c    ****                 // GPS
 348:Src/main.c    ****                 //sprintf(txt, "latitude: %d lat orientation: %c longitude: %d lon orientation: %c 
 349:Src/main.c    ****                 sprintf(txt,"%d\r\n", gps_main.latitude_i);
 350:Src/main.c    ****                 HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 351:Src/main.c    **** 
 352:Src/main.c    ****                 int sent = send_CAN_data(HAL_GetTick());
 353:Src/main.c    ****                 previous_millis = HAL_GetTick();
 354:Src/main.c    ****                 /*
 355:Src/main.c    ****                 second_millis = HAL_GetTick();
 356:Src/main.c    ****                 if (sent != 0){
 357:Src/main.c    ****                     count_message ++;
 358:Src/main.c    ****                 }
 359:Src/main.c    ****                 if(second_millis % 1000 == 0){
 360:Src/main.c    ****                     sprintf(txt, "messages Per second %d\r\n", count_message);
 361:Src/main.c    ****                     HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 362:Src/main.c    ****                     count_message = 0;
 363:Src/main.c    ****                 }*/
 364:Src/main.c    ****             }
 365:Src/main.c    ****         }
 366:Src/main.c    ****         else
 367:Src/main.c    ****         {
 368:Src/main.c    ****             HAL_Delay(1);
 369:Src/main.c    ****             command_flag = 0;
 370:Src/main.c    ****         }
 371:Src/main.c    ****     }
 372:Src/main.c    ****     /* USER CODE END 3 */
 373:Src/main.c    **** }
 374:Src/main.c    **** 
ARM GAS  /tmp/cc7Pcclv.s 			page 8


 375:Src/main.c    **** /**
 376:Src/main.c    ****   * @brief System Clock Configuration
 377:Src/main.c    ****   * @retval None
 378:Src/main.c    ****   */
 379:Src/main.c    **** void SystemClock_Config(void)
 380:Src/main.c    **** {
 381:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 382:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 383:Src/main.c    **** 
 384:Src/main.c    ****     /** Configure the main internal regulator output voltage 
 385:Src/main.c    ****   */
 386:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 387:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 388:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 389:Src/main.c    ****   */
 390:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 391:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 392:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 393:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 394:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 395:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 396:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 397:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 398:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 399:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 400:Src/main.c    ****     {
 401:Src/main.c    ****         Error_Handler();
 402:Src/main.c    ****     }
 403:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 404:Src/main.c    ****   */
 405:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 406:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 407:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 408:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 409:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 410:Src/main.c    **** 
 411:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 412:Src/main.c    ****     {
 413:Src/main.c    ****         Error_Handler();
 414:Src/main.c    ****     }
 415:Src/main.c    **** }
 416:Src/main.c    **** 
 417:Src/main.c    **** /**
 418:Src/main.c    ****   * @brief NVIC Configuration.
 419:Src/main.c    ****   * @retval None
 420:Src/main.c    ****   */
 421:Src/main.c    **** static void MX_NVIC_Init(void)
 422:Src/main.c    **** {
 423:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 424:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 425:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 426:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 427:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 428:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 429:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 430:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 431:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
ARM GAS  /tmp/cc7Pcclv.s 			page 9


 432:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 433:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 434:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 435:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 436:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 437:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 438:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 439:Src/main.c    ****     HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 440:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 441:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 442:Src/main.c    ****     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 443:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 444:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 445:Src/main.c    ****     HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 446:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 447:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 448:Src/main.c    ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 449:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 450:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 451:Src/main.c    ****     HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 452:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 453:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 454:Src/main.c    ****     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 455:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 456:Src/main.c    **** }
 457:Src/main.c    **** 
 458:Src/main.c    **** /**
 459:Src/main.c    ****   * @brief ADC1 Initialization Function
 460:Src/main.c    ****   * @param None
 461:Src/main.c    ****   * @retval None
 462:Src/main.c    ****   */
 463:Src/main.c    **** static void MX_ADC1_Init(void)
 464:Src/main.c    **** {
 465:Src/main.c    **** 
 466:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 0 */
 467:Src/main.c    **** 
 468:Src/main.c    ****     /* USER CODE END ADC1_Init 0 */
 469:Src/main.c    **** 
 470:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 471:Src/main.c    **** 
 472:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 1 */
 473:Src/main.c    **** 
 474:Src/main.c    ****     /* USER CODE END ADC1_Init 1 */
 475:Src/main.c    ****     /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of c
 476:Src/main.c    ****   */
 477:Src/main.c    ****     hadc1.Instance = ADC1;
 478:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 479:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 480:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 481:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 482:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 483:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 484:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 485:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 486:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 487:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 488:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
ARM GAS  /tmp/cc7Pcclv.s 			page 10


 489:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 490:Src/main.c    ****     {
 491:Src/main.c    ****         Error_Handler();
 492:Src/main.c    ****     }
 493:Src/main.c    ****     /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and 
 494:Src/main.c    ****   */
 495:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 496:Src/main.c    ****     sConfig.Rank = 1;
 497:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 498:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 499:Src/main.c    ****     {
 500:Src/main.c    ****         Error_Handler();
 501:Src/main.c    ****     }
 502:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 2 */
 503:Src/main.c    **** 
 504:Src/main.c    ****     /* USER CODE END ADC1_Init 2 */
 505:Src/main.c    **** }
 506:Src/main.c    **** 
 507:Src/main.c    **** /**
 508:Src/main.c    ****   * @brief CAN1 Initialization Function
 509:Src/main.c    ****   * @param None
 510:Src/main.c    ****   * @retval None
 511:Src/main.c    ****   */
 512:Src/main.c    **** static void MX_CAN1_Init(void)
 513:Src/main.c    **** {
 514:Src/main.c    **** 
 515:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 0 */
 516:Src/main.c    **** 
 517:Src/main.c    ****     /* USER CODE END CAN1_Init 0 */
 518:Src/main.c    **** 
 519:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 1 */
 520:Src/main.c    **** 
 521:Src/main.c    ****     /* USER CODE END CAN1_Init 1 */
 522:Src/main.c    ****     hcan1.Instance = CAN1;
 523:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 524:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 525:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 526:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 527:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 528:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 529:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 530:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 531:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 532:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 533:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 534:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 535:Src/main.c    ****     {
 536:Src/main.c    ****         Error_Handler();
 537:Src/main.c    ****     }
 538:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 2 */
 539:Src/main.c    **** 
 540:Src/main.c    ****     /* USER CODE END CAN1_Init 2 */
 541:Src/main.c    **** }
 542:Src/main.c    **** 
 543:Src/main.c    **** /**
 544:Src/main.c    ****   * @brief SPI1 Initialization Function
 545:Src/main.c    ****   * @param None
ARM GAS  /tmp/cc7Pcclv.s 			page 11


 546:Src/main.c    ****   * @retval None
 547:Src/main.c    ****   */
 548:Src/main.c    **** static void MX_SPI1_Init(void)
 549:Src/main.c    **** {
 550:Src/main.c    **** 
 551:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 0 */
 552:Src/main.c    **** 
 553:Src/main.c    ****     /* USER CODE END SPI1_Init 0 */
 554:Src/main.c    **** 
 555:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 1 */
 556:Src/main.c    **** 
 557:Src/main.c    ****     /* USER CODE END SPI1_Init 1 */
 558:Src/main.c    ****     /* SPI1 parameter configuration*/
 559:Src/main.c    ****     hspi1.Instance = SPI1;
 560:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 561:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 562:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 563:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 564:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 565:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 566:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 567:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 568:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 569:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 570:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 571:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 572:Src/main.c    ****     {
 573:Src/main.c    ****         Error_Handler();
 574:Src/main.c    ****     }
 575:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 2 */
 576:Src/main.c    **** 
 577:Src/main.c    ****     /* USER CODE END SPI1_Init 2 */
 578:Src/main.c    **** }
 579:Src/main.c    **** 
 580:Src/main.c    **** /**
 581:Src/main.c    ****   * @brief TIM2 Initialization Function
 582:Src/main.c    ****   * @param None
 583:Src/main.c    ****   * @retval None
 584:Src/main.c    ****   */
 585:Src/main.c    **** static void MX_TIM2_Init(void)
 586:Src/main.c    **** {
 587:Src/main.c    **** 
 588:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 0 */
 589:Src/main.c    **** 
 590:Src/main.c    ****     /* USER CODE END TIM2_Init 0 */
 591:Src/main.c    **** 
 592:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 593:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 594:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 595:Src/main.c    **** 
 596:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 1 */
 597:Src/main.c    **** 
 598:Src/main.c    ****     /* USER CODE END TIM2_Init 1 */
 599:Src/main.c    ****     htim2.Instance = TIM2;
 600:Src/main.c    ****     htim2.Init.Prescaler = 36;
 601:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 602:Src/main.c    ****     htim2.Init.Period = 1000;
ARM GAS  /tmp/cc7Pcclv.s 			page 12


 603:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 604:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 605:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 606:Src/main.c    ****     {
 607:Src/main.c    ****         Error_Handler();
 608:Src/main.c    ****     }
 609:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 610:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 611:Src/main.c    ****     {
 612:Src/main.c    ****         Error_Handler();
 613:Src/main.c    ****     }
 614:Src/main.c    ****     sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 615:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 616:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 617:Src/main.c    ****     {
 618:Src/main.c    ****         Error_Handler();
 619:Src/main.c    ****     }
 620:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 621:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 622:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 623:Src/main.c    ****     {
 624:Src/main.c    ****         Error_Handler();
 625:Src/main.c    ****     }
 626:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 2 */
 627:Src/main.c    **** 
 628:Src/main.c    ****     /* USER CODE END TIM2_Init 2 */
 629:Src/main.c    **** }
 630:Src/main.c    **** 
 631:Src/main.c    **** /**
 632:Src/main.c    ****   * @brief TIM3 Initialization Function
 633:Src/main.c    ****   * @param None
 634:Src/main.c    ****   * @retval None
 635:Src/main.c    ****   */
 636:Src/main.c    **** static void MX_TIM3_Init(void)
 637:Src/main.c    **** {
 638:Src/main.c    **** 
 639:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 0 */
 640:Src/main.c    **** 
 641:Src/main.c    ****     /* USER CODE END TIM3_Init 0 */
 642:Src/main.c    **** 
 643:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 644:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 645:Src/main.c    **** 
 646:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 1 */
 647:Src/main.c    **** 
 648:Src/main.c    ****     /* USER CODE END TIM3_Init 1 */
 649:Src/main.c    ****     htim3.Instance = TIM3;
 650:Src/main.c    ****     htim3.Init.Prescaler = 18;
 651:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 652:Src/main.c    ****     htim3.Init.Period = 65500;
 653:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 654:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 655:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 656:Src/main.c    ****     {
 657:Src/main.c    ****         Error_Handler();
 658:Src/main.c    ****     }
 659:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
ARM GAS  /tmp/cc7Pcclv.s 			page 13


 660:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 661:Src/main.c    ****     {
 662:Src/main.c    ****         Error_Handler();
 663:Src/main.c    ****     }
 664:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 665:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 666:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 667:Src/main.c    ****     {
 668:Src/main.c    ****         Error_Handler();
 669:Src/main.c    ****     }
 670:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 2 */
 671:Src/main.c    **** 
 672:Src/main.c    ****     /* USER CODE END TIM3_Init 2 */
 673:Src/main.c    **** }
 674:Src/main.c    **** 
 675:Src/main.c    **** /**
 676:Src/main.c    ****   * @brief TIM4 Initialization Function
 677:Src/main.c    ****   * @param None
 678:Src/main.c    ****   * @retval None
 679:Src/main.c    ****   */
 680:Src/main.c    **** static void MX_TIM4_Init(void)
 681:Src/main.c    **** {
 682:Src/main.c    **** 
 683:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 0 */
 684:Src/main.c    **** 
 685:Src/main.c    ****     /* USER CODE END TIM4_Init 0 */
 686:Src/main.c    **** 
 687:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 688:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 689:Src/main.c    **** 
 690:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 1 */
 691:Src/main.c    **** 
 692:Src/main.c    ****     /* USER CODE END TIM4_Init 1 */
 693:Src/main.c    ****     htim4.Instance = TIM4;
 694:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 695:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 696:Src/main.c    ****     htim4.Init.Period = 2000;
 697:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 698:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 699:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 700:Src/main.c    ****     {
 701:Src/main.c    ****         Error_Handler();
 702:Src/main.c    ****     }
 703:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 704:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 705:Src/main.c    ****     {
 706:Src/main.c    ****         Error_Handler();
 707:Src/main.c    ****     }
 708:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 709:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 710:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 711:Src/main.c    ****     {
 712:Src/main.c    ****         Error_Handler();
 713:Src/main.c    ****     }
 714:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 2 */
 715:Src/main.c    **** 
 716:Src/main.c    ****     /* USER CODE END TIM4_Init 2 */
ARM GAS  /tmp/cc7Pcclv.s 			page 14


 717:Src/main.c    **** }
 718:Src/main.c    **** 
 719:Src/main.c    **** /**
 720:Src/main.c    ****   * @brief TIM5 Initialization Function
 721:Src/main.c    ****   * @param None
 722:Src/main.c    ****   * @retval None
 723:Src/main.c    ****   */
 724:Src/main.c    **** static void MX_TIM5_Init(void)
 725:Src/main.c    **** {
 726:Src/main.c    **** 
 727:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 0 */
 728:Src/main.c    **** 
 729:Src/main.c    ****     /* USER CODE END TIM5_Init 0 */
 730:Src/main.c    **** 
 731:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 732:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 733:Src/main.c    **** 
 734:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 1 */
 735:Src/main.c    **** 
 736:Src/main.c    ****     /* USER CODE END TIM5_Init 1 */
 737:Src/main.c    ****     htim5.Instance = TIM5;
 738:Src/main.c    ****     htim5.Init.Prescaler = 36;
 739:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 740:Src/main.c    ****     htim5.Init.Period = 2000;
 741:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 742:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 743:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 744:Src/main.c    ****     {
 745:Src/main.c    ****         Error_Handler();
 746:Src/main.c    ****     }
 747:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 748:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 749:Src/main.c    ****     {
 750:Src/main.c    ****         Error_Handler();
 751:Src/main.c    ****     }
 752:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 753:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 754:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 755:Src/main.c    ****     {
 756:Src/main.c    ****         Error_Handler();
 757:Src/main.c    ****     }
 758:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 2 */
 759:Src/main.c    **** 
 760:Src/main.c    ****     /* USER CODE END TIM5_Init 2 */
 761:Src/main.c    **** }
 762:Src/main.c    **** 
 763:Src/main.c    **** /**
 764:Src/main.c    ****   * @brief TIM6 Initialization Function
 765:Src/main.c    ****   * @param None
 766:Src/main.c    ****   * @retval None
 767:Src/main.c    ****   */
 768:Src/main.c    **** static void MX_TIM6_Init(void)
 769:Src/main.c    **** {
 770:Src/main.c    **** 
 771:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 0 */
 772:Src/main.c    **** 
 773:Src/main.c    ****     /* USER CODE END TIM6_Init 0 */
ARM GAS  /tmp/cc7Pcclv.s 			page 15


 774:Src/main.c    **** 
 775:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 776:Src/main.c    **** 
 777:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 1 */
 778:Src/main.c    **** 
 779:Src/main.c    ****     /* USER CODE END TIM6_Init 1 */
 780:Src/main.c    ****     htim6.Instance = TIM6;
 781:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 782:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 783:Src/main.c    ****     htim6.Init.Period = 2000;
 784:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 785:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 786:Src/main.c    ****     {
 787:Src/main.c    ****         Error_Handler();
 788:Src/main.c    ****     }
 789:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 790:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 791:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 792:Src/main.c    ****     {
 793:Src/main.c    ****         Error_Handler();
 794:Src/main.c    ****     }
 795:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 2 */
 796:Src/main.c    **** 
 797:Src/main.c    ****     /* USER CODE END TIM6_Init 2 */
 798:Src/main.c    **** }
 799:Src/main.c    **** 
 800:Src/main.c    **** /**
 801:Src/main.c    ****   * @brief TIM7 Initialization Function
 802:Src/main.c    ****   * @param None
 803:Src/main.c    ****   * @retval None
 804:Src/main.c    ****   */
 805:Src/main.c    **** static void MX_TIM7_Init(void)
 806:Src/main.c    **** {
 807:Src/main.c    **** 
 808:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 0 */
 809:Src/main.c    **** 
 810:Src/main.c    ****     /* USER CODE END TIM7_Init 0 */
 811:Src/main.c    **** 
 812:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 813:Src/main.c    **** 
 814:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 1 */
 815:Src/main.c    **** 
 816:Src/main.c    ****     /* USER CODE END TIM7_Init 1 */
 817:Src/main.c    ****     htim7.Instance = TIM7;
 818:Src/main.c    ****     htim7.Init.Prescaler = 36;
 819:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 820:Src/main.c    ****     htim7.Init.Period = 6000;
 821:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 822:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 823:Src/main.c    ****     {
 824:Src/main.c    ****         Error_Handler();
 825:Src/main.c    ****     }
 826:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 827:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 828:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 829:Src/main.c    ****     {
 830:Src/main.c    ****         Error_Handler();
ARM GAS  /tmp/cc7Pcclv.s 			page 16


 831:Src/main.c    ****     }
 832:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 2 */
 833:Src/main.c    **** 
 834:Src/main.c    ****     /* USER CODE END TIM7_Init 2 */
 835:Src/main.c    **** }
 836:Src/main.c    **** 
 837:Src/main.c    **** /**
 838:Src/main.c    ****   * @brief TIM10 Initialization Function
 839:Src/main.c    ****   * @param None
 840:Src/main.c    ****   * @retval None
 841:Src/main.c    ****   */
 842:Src/main.c    **** static void MX_TIM10_Init(void)
 843:Src/main.c    **** {
 844:Src/main.c    **** 
 845:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 0 */
 846:Src/main.c    **** 
 847:Src/main.c    ****     /* USER CODE END TIM10_Init 0 */
 848:Src/main.c    **** 
 849:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 1 */
 850:Src/main.c    **** 
 851:Src/main.c    ****     /* USER CODE END TIM10_Init 1 */
 852:Src/main.c    ****     htim10.Instance = TIM10;
 853:Src/main.c    ****     htim10.Init.Prescaler = 72;
 854:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 855:Src/main.c    ****     htim10.Init.Period = 1000;
 856:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 857:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 858:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 859:Src/main.c    ****     {
 860:Src/main.c    ****         Error_Handler();
 861:Src/main.c    ****     }
 862:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 2 */
 863:Src/main.c    **** 
 864:Src/main.c    ****     /* USER CODE END TIM10_Init 2 */
 865:Src/main.c    **** }
 866:Src/main.c    **** 
 867:Src/main.c    **** /**
 868:Src/main.c    ****   * @brief TIM11 Initialization Function
 869:Src/main.c    ****   * @param None
 870:Src/main.c    ****   * @retval None
 871:Src/main.c    ****   */
 872:Src/main.c    **** static void MX_TIM11_Init(void)
 873:Src/main.c    **** {
 874:Src/main.c    **** 
 875:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 0 */
 876:Src/main.c    **** 
 877:Src/main.c    ****     /* USER CODE END TIM11_Init 0 */
 878:Src/main.c    **** 
 879:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 1 */
 880:Src/main.c    **** 
 881:Src/main.c    ****     /* USER CODE END TIM11_Init 1 */
 882:Src/main.c    ****     htim11.Instance = TIM11;
 883:Src/main.c    ****     htim11.Init.Prescaler = 0;
 884:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 885:Src/main.c    ****     htim11.Init.Period = 0;
 886:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 887:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/cc7Pcclv.s 			page 17


 888:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 889:Src/main.c    ****     {
 890:Src/main.c    ****         Error_Handler();
 891:Src/main.c    ****     }
 892:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 2 */
 893:Src/main.c    **** 
 894:Src/main.c    ****     /* USER CODE END TIM11_Init 2 */
 895:Src/main.c    **** }
 896:Src/main.c    **** 
 897:Src/main.c    **** /**
 898:Src/main.c    ****   * @brief USART1 Initialization Function
 899:Src/main.c    ****   * @param None
 900:Src/main.c    ****   * @retval None
 901:Src/main.c    ****   */
 902:Src/main.c    **** static void MX_USART1_UART_Init(void)
 903:Src/main.c    **** {
 904:Src/main.c    **** 
 905:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 0 */
 906:Src/main.c    **** 
 907:Src/main.c    ****     /* USER CODE END USART1_Init 0 */
 908:Src/main.c    **** 
 909:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 1 */
 910:Src/main.c    **** 
 911:Src/main.c    ****     /* USER CODE END USART1_Init 1 */
 912:Src/main.c    ****     huart1.Instance = USART1;
 913:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 914:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 915:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 916:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 917:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 918:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 919:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 920:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 921:Src/main.c    ****     {
 922:Src/main.c    ****         Error_Handler();
 923:Src/main.c    ****     }
 924:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 2 */
 925:Src/main.c    **** 
 926:Src/main.c    ****     /* USER CODE END USART1_Init 2 */
 927:Src/main.c    **** }
 928:Src/main.c    **** 
 929:Src/main.c    **** /**
 930:Src/main.c    ****   * @brief USART2 Initialization Function
 931:Src/main.c    ****   * @param None
 932:Src/main.c    ****   * @retval None
 933:Src/main.c    ****   */
 934:Src/main.c    **** static void MX_USART2_UART_Init(void)
 935:Src/main.c    **** {
 936:Src/main.c    **** 
 937:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 0 */
 938:Src/main.c    **** 
 939:Src/main.c    ****     /* USER CODE END USART2_Init 0 */
 940:Src/main.c    **** 
 941:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 1 */
 942:Src/main.c    **** 
 943:Src/main.c    ****     /* USER CODE END USART2_Init 1 */
 944:Src/main.c    ****     huart2.Instance = USART2;
ARM GAS  /tmp/cc7Pcclv.s 			page 18


 945:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 946:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 947:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 948:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 949:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 950:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 951:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 952:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 953:Src/main.c    ****     {
 954:Src/main.c    ****         Error_Handler();
 955:Src/main.c    ****     }
 956:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 2 */
 957:Src/main.c    **** 
 958:Src/main.c    ****     /* USER CODE END USART2_Init 2 */
 959:Src/main.c    **** }
 960:Src/main.c    **** 
 961:Src/main.c    **** /** 
 962:Src/main.c    ****   * Enable DMA controller clock
 963:Src/main.c    ****   */
 964:Src/main.c    **** static void MX_DMA_Init(void)
 965:Src/main.c    **** {
 966:Src/main.c    **** 
 967:Src/main.c    ****     /* DMA controller clock enable */
 968:Src/main.c    ****     __HAL_RCC_DMA2_CLK_ENABLE();
 969:Src/main.c    **** 
 970:Src/main.c    ****     /* DMA interrupt init */
 971:Src/main.c    ****     /* DMA2_Stream0_IRQn interrupt configuration */
 972:Src/main.c    ****     HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 973:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 974:Src/main.c    **** }
 975:Src/main.c    **** 
 976:Src/main.c    **** /**
 977:Src/main.c    ****   * @brief GPIO Initialization Function
 978:Src/main.c    ****   * @param None
 979:Src/main.c    ****   * @retval None
 980:Src/main.c    ****   */
 981:Src/main.c    **** static void MX_GPIO_Init(void)
 982:Src/main.c    **** {
  27              		.loc 1 982 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 983:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 983 0
  44 0006 0024     		movs	r4, #0
ARM GAS  /tmp/cc7Pcclv.s 			page 19


  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 984:Src/main.c    **** 
 985:Src/main.c    ****     /* GPIO Ports Clock Enable */
 986:Src/main.c    ****     __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 986 0
  52 0012 0194     		str	r4, [sp, #4]
  53 0014 354B     		ldr	r3, .L3
  54 0016 1A6B     		ldr	r2, [r3, #48]
  55 0018 42F08002 		orr	r2, r2, #128
  56 001c 1A63     		str	r2, [r3, #48]
  57 001e 1A6B     		ldr	r2, [r3, #48]
  58 0020 02F08002 		and	r2, r2, #128
  59 0024 0192     		str	r2, [sp, #4]
  60 0026 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 987:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 987 0
  64 0028 0294     		str	r4, [sp, #8]
  65 002a 1A6B     		ldr	r2, [r3, #48]
  66 002c 42F00102 		orr	r2, r2, #1
  67 0030 1A63     		str	r2, [r3, #48]
  68 0032 1A6B     		ldr	r2, [r3, #48]
  69 0034 02F00102 		and	r2, r2, #1
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 988:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  74              		.loc 1 988 0
  75 003c 0394     		str	r4, [sp, #12]
  76 003e 1A6B     		ldr	r2, [r3, #48]
  77 0040 42F00202 		orr	r2, r2, #2
  78 0044 1A63     		str	r2, [r3, #48]
  79 0046 1A6B     		ldr	r2, [r3, #48]
  80 0048 02F00202 		and	r2, r2, #2
  81 004c 0392     		str	r2, [sp, #12]
  82 004e 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 989:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  85              		.loc 1 989 0
  86 0050 0494     		str	r4, [sp, #16]
  87 0052 1A6B     		ldr	r2, [r3, #48]
  88 0054 42F00402 		orr	r2, r2, #4
  89 0058 1A63     		str	r2, [r3, #48]
  90 005a 1B6B     		ldr	r3, [r3, #48]
  91 005c 03F00403 		and	r3, r3, #4
  92 0060 0493     		str	r3, [sp, #16]
  93 0062 049B     		ldr	r3, [sp, #16]
  94              	.LBE5:
 990:Src/main.c    **** 
ARM GAS  /tmp/cc7Pcclv.s 			page 20


 991:Src/main.c    ****     /*Configure GPIO pin Output Level */
 992:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  95              		.loc 1 992 0
  96 0064 224D     		ldr	r5, .L3+4
  97 0066 0122     		movs	r2, #1
  98 0068 4021     		movs	r1, #64
  99 006a 2846     		mov	r0, r5
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 993:Src/main.c    **** 
 994:Src/main.c    ****     /*Configure GPIO pin Output Level */
 995:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 102              		.loc 1 995 0
 103 0070 2246     		mov	r2, r4
 104 0072 4FF40071 		mov	r1, #512
 105 0076 2846     		mov	r0, r5
 106 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 996:Src/main.c    **** 
 997:Src/main.c    ****     /*Configure GPIO pin Output Level */
 998:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 108              		.loc 1 998 0
 109 007c DFF87880 		ldr	r8, .L3+12
 110 0080 2246     		mov	r2, r4
 111 0082 4FF48071 		mov	r1, #256
 112 0086 4046     		mov	r0, r8
 113 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL2:
 999:Src/main.c    **** 
1000:Src/main.c    ****     /*Configure GPIO pin : PC6 */
1001:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_6;
 115              		.loc 1 1001 0
 116 008c 4023     		movs	r3, #64
 117 008e 0593     		str	r3, [sp, #20]
1002:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 1002 0
 119 0090 0127     		movs	r7, #1
 120 0092 0697     		str	r7, [sp, #24]
1003:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 1003 0
 122 0094 0794     		str	r4, [sp, #28]
1004:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 123              		.loc 1 1004 0
 124 0096 0323     		movs	r3, #3
 125 0098 0893     		str	r3, [sp, #32]
1005:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 126              		.loc 1 1005 0
 127 009a 05A9     		add	r1, sp, #20
 128 009c 2846     		mov	r0, r5
 129 009e FFF7FEFF 		bl	HAL_GPIO_Init
 130              	.LVL3:
1006:Src/main.c    **** 
1007:Src/main.c    ****     /*Configure GPIO pin : PC8 */
1008:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 131              		.loc 1 1008 0
 132 00a2 4FF48076 		mov	r6, #256
 133 00a6 0596     		str	r6, [sp, #20]
ARM GAS  /tmp/cc7Pcclv.s 			page 21


1009:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 1009 0
 135 00a8 0694     		str	r4, [sp, #24]
1010:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 1010 0
 137 00aa 0794     		str	r4, [sp, #28]
1011:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 138              		.loc 1 1011 0
 139 00ac 05A9     		add	r1, sp, #20
 140 00ae 2846     		mov	r0, r5
 141 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL4:
1012:Src/main.c    **** 
1013:Src/main.c    ****     /*Configure GPIO pin : PC9 */
1014:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_9;
 143              		.loc 1 1014 0
 144 00b4 4FF40073 		mov	r3, #512
 145 00b8 0593     		str	r3, [sp, #20]
1015:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 1015 0
 147 00ba 0697     		str	r7, [sp, #24]
1016:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 1016 0
 149 00bc 0794     		str	r4, [sp, #28]
1017:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 150              		.loc 1 1017 0
 151 00be 0894     		str	r4, [sp, #32]
1018:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 152              		.loc 1 1018 0
 153 00c0 05A9     		add	r1, sp, #20
 154 00c2 2846     		mov	r0, r5
 155 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL5:
1019:Src/main.c    **** 
1020:Src/main.c    ****     /*Configure GPIO pin : PA8 */
1021:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 157              		.loc 1 1021 0
 158 00c8 0596     		str	r6, [sp, #20]
1022:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 159              		.loc 1 1022 0
 160 00ca 0697     		str	r7, [sp, #24]
1023:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 1023 0
 162 00cc 0794     		str	r4, [sp, #28]
1024:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 163              		.loc 1 1024 0
 164 00ce 0894     		str	r4, [sp, #32]
1025:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 1025 0
 166 00d0 05A9     		add	r1, sp, #20
 167 00d2 4046     		mov	r0, r8
 168 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL6:
1026:Src/main.c    **** 
1027:Src/main.c    ****     /*Configure GPIO pin : PB8 */
1028:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 170              		.loc 1 1028 0
ARM GAS  /tmp/cc7Pcclv.s 			page 22


 171 00d8 0596     		str	r6, [sp, #20]
1029:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 172              		.loc 1 1029 0
 173 00da 0694     		str	r4, [sp, #24]
1030:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 174              		.loc 1 1030 0
 175 00dc 0794     		str	r4, [sp, #28]
1031:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 176              		.loc 1 1031 0
 177 00de 05A9     		add	r1, sp, #20
 178 00e0 0448     		ldr	r0, .L3+8
 179 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL7:
1032:Src/main.c    **** }
 181              		.loc 1 1032 0
 182 00e6 0AB0     		add	sp, sp, #40
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 24
 185              		@ sp needed
 186 00e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 187              	.L4:
 188              		.align	2
 189              	.L3:
 190 00ec 00380240 		.word	1073887232
 191 00f0 00080240 		.word	1073874944
 192 00f4 00040240 		.word	1073873920
 193 00f8 00000240 		.word	1073872896
 194              		.cfi_endproc
 195              	.LFE149:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	MX_DMA_Init:
 205              	.LFB148:
 965:Src/main.c    **** 
 206              		.loc 1 965 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 16
 217              	.LBB6:
 968:Src/main.c    **** 
 218              		.loc 1 968 0
 219 0004 0021     		movs	r1, #0
 220 0006 0191     		str	r1, [sp, #4]
 221 0008 094B     		ldr	r3, .L7
 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F48002 		orr	r2, r2, #4194304
ARM GAS  /tmp/cc7Pcclv.s 			page 23


 224 0010 1A63     		str	r2, [r3, #48]
 225 0012 1B6B     		ldr	r3, [r3, #48]
 226 0014 03F48003 		and	r3, r3, #4194304
 227 0018 0193     		str	r3, [sp, #4]
 228 001a 019B     		ldr	r3, [sp, #4]
 229              	.LBE6:
 972:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 972 0
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL8:
 973:Src/main.c    **** }
 235              		.loc 1 973 0
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL9:
 974:Src/main.c    **** 
 239              		.loc 1 974 0
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE148:
 252              		.section	.text.MX_NVIC_Init,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	MX_NVIC_Init:
 260              	.LFB134:
 422:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 261              		.loc 1 422 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 424:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 270              		.loc 1 424 0
 271 0002 0022     		movs	r2, #0
 272 0004 1146     		mov	r1, r2
 273 0006 1320     		movs	r0, #19
 274 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 275              	.LVL10:
 425:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 276              		.loc 1 425 0
ARM GAS  /tmp/cc7Pcclv.s 			page 24


 277 000c 1320     		movs	r0, #19
 278 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 279              	.LVL11:
 427:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 280              		.loc 1 427 0
 281 0012 0022     		movs	r2, #0
 282 0014 1146     		mov	r1, r2
 283 0016 1420     		movs	r0, #20
 284 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 285              	.LVL12:
 428:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 286              		.loc 1 428 0
 287 001c 1420     		movs	r0, #20
 288 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 289              	.LVL13:
 430:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 290              		.loc 1 430 0
 291 0022 0022     		movs	r2, #0
 292 0024 1146     		mov	r1, r2
 293 0026 1520     		movs	r0, #21
 294 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL14:
 431:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 296              		.loc 1 431 0
 297 002c 1520     		movs	r0, #21
 298 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 299              	.LVL15:
 433:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 300              		.loc 1 433 0
 301 0032 0022     		movs	r2, #0
 302 0034 1146     		mov	r1, r2
 303 0036 1620     		movs	r0, #22
 304 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 305              	.LVL16:
 434:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 306              		.loc 1 434 0
 307 003c 1620     		movs	r0, #22
 308 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 309              	.LVL17:
 436:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 310              		.loc 1 436 0
 311 0042 0022     		movs	r2, #0
 312 0044 1146     		mov	r1, r2
 313 0046 1220     		movs	r0, #18
 314 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 315              	.LVL18:
 437:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 316              		.loc 1 437 0
 317 004c 1220     		movs	r0, #18
 318 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 319              	.LVL19:
 439:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 320              		.loc 1 439 0
 321 0052 0022     		movs	r2, #0
 322 0054 1146     		mov	r1, r2
 323 0056 3720     		movs	r0, #55
 324 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
ARM GAS  /tmp/cc7Pcclv.s 			page 25


 325              	.LVL20:
 440:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 326              		.loc 1 440 0
 327 005c 3720     		movs	r0, #55
 328 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 329              	.LVL21:
 442:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 330              		.loc 1 442 0
 331 0062 0022     		movs	r2, #0
 332 0064 1146     		mov	r1, r2
 333 0066 3620     		movs	r0, #54
 334 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 335              	.LVL22:
 443:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 336              		.loc 1 443 0
 337 006c 3620     		movs	r0, #54
 338 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 339              	.LVL23:
 445:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 340              		.loc 1 445 0
 341 0072 0022     		movs	r2, #0
 342 0074 1146     		mov	r1, r2
 343 0076 3220     		movs	r0, #50
 344 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 345              	.LVL24:
 446:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 346              		.loc 1 446 0
 347 007c 3220     		movs	r0, #50
 348 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 349              	.LVL25:
 448:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 350              		.loc 1 448 0
 351 0082 0022     		movs	r2, #0
 352 0084 1146     		mov	r1, r2
 353 0086 1C20     		movs	r0, #28
 354 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 355              	.LVL26:
 449:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 356              		.loc 1 449 0
 357 008c 1C20     		movs	r0, #28
 358 008e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 359              	.LVL27:
 451:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 360              		.loc 1 451 0
 361 0092 0022     		movs	r2, #0
 362 0094 1146     		mov	r1, r2
 363 0096 1920     		movs	r0, #25
 364 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 365              	.LVL28:
 452:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 366              		.loc 1 452 0
 367 009c 1920     		movs	r0, #25
 368 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 369              	.LVL29:
 454:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 370              		.loc 1 454 0
 371 00a2 0022     		movs	r2, #0
ARM GAS  /tmp/cc7Pcclv.s 			page 26


 372 00a4 1146     		mov	r1, r2
 373 00a6 2520     		movs	r0, #37
 374 00a8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 375              	.LVL30:
 455:Src/main.c    **** }
 376              		.loc 1 455 0
 377 00ac 2520     		movs	r0, #37
 378 00ae FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 379              	.LVL31:
 380 00b2 08BD     		pop	{r3, pc}
 381              		.cfi_endproc
 382              	.LFE134:
 384              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_ADC_ConvCpltCallback
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	HAL_ADC_ConvCpltCallback:
 393              	.LFB131:
 130:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 394              		.loc 1 130 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL32:
 131:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 400              		.loc 1 131 0
 401 0000 054B     		ldr	r3, .L12
 402 0002 1968     		ldr	r1, [r3]
 403 0004 054A     		ldr	r2, .L12+4
 404 0006 1161     		str	r1, [r2, #16]
 132:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 405              		.loc 1 132 0
 406 0008 5968     		ldr	r1, [r3, #4]
 407 000a 054A     		ldr	r2, .L12+8
 408 000c 1161     		str	r1, [r2, #16]
 133:Src/main.c    ****     /*int txt_1[100];
 409              		.loc 1 133 0
 410 000e 9A68     		ldr	r2, [r3, #8]
 411 0010 044B     		ldr	r3, .L12+12
 412 0012 1A61     		str	r2, [r3, #16]
 413 0014 7047     		bx	lr
 414              	.L13:
 415 0016 00BF     		.align	2
 416              	.L12:
 417 0018 00000000 		.word	ADC_buffer
 418 001c 00000000 		.word	pot_1
 419 0020 00000000 		.word	pot_2
 420 0024 00000000 		.word	pot_3
 421              		.cfi_endproc
 422              	.LFE131:
 424              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 425              		.align	1
 426              		.global	HAL_UART_RxCpltCallback
ARM GAS  /tmp/cc7Pcclv.s 			page 27


 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	HAL_UART_RxCpltCallback:
 433              	.LFB150:
1033:Src/main.c    **** 
1034:Src/main.c    **** /* USER CODE BEGIN 4 */
1035:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1036:Src/main.c    **** {
 434              		.loc 1 1036 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL33:
 439 0000 08B5     		push	{r3, lr}
 440              	.LCFI7:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 3, -8
 443              		.cfi_offset 14, -4
1037:Src/main.c    ****     if (huart == &huart1)
 444              		.loc 1 1037 0
 445 0002 044B     		ldr	r3, .L18
 446 0004 9842     		cmp	r0, r3
 447 0006 00D0     		beq	.L17
 448              	.LVL34:
 449              	.L14:
 450 0008 08BD     		pop	{r3, pc}
 451              	.LVL35:
 452              	.L17:
1038:Src/main.c    ****     {
1039:Src/main.c    ****         gps_read_it(huart, &gps_main);
 453              		.loc 1 1039 0
 454 000a 0349     		ldr	r1, .L18+4
 455 000c FFF7FEFF 		bl	gps_read_it
 456              	.LVL36:
1040:Src/main.c    ****     }
1041:Src/main.c    **** }
 457              		.loc 1 1041 0
 458 0010 FAE7     		b	.L14
 459              	.L19:
 460 0012 00BF     		.align	2
 461              	.L18:
 462 0014 00000000 		.word	huart1
 463 0018 00000000 		.word	gps_main
 464              		.cfi_endproc
 465              	.LFE150:
 467              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 468              		.align	1
 469              		.global	HAL_UART_TxCpltCallback
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	HAL_UART_TxCpltCallback:
 476              	.LFB151:
1042:Src/main.c    **** 
ARM GAS  /tmp/cc7Pcclv.s 			page 28


1043:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1044:Src/main.c    **** {
 477              		.loc 1 1044 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL37:
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
1045:Src/main.c    ****     if (huart == &huart2)
 487              		.loc 1 1045 0
 488 0002 044B     		ldr	r3, .L24
 489 0004 8342     		cmp	r3, r0
 490 0006 00D0     		beq	.L23
 491              	.LVL38:
 492              	.L20:
 493 0008 08BD     		pop	{r3, pc}
 494              	.LVL39:
 495              	.L23:
1046:Src/main.c    ****     {
1047:Src/main.c    ****         print_it(&huart2);
 496              		.loc 1 1047 0
 497 000a 1846     		mov	r0, r3
 498              	.LVL40:
 499 000c FFF7FEFF 		bl	print_it
 500              	.LVL41:
1048:Src/main.c    ****     }
1049:Src/main.c    **** }
 501              		.loc 1 1049 0
 502 0010 FAE7     		b	.L20
 503              	.L25:
 504 0012 00BF     		.align	2
 505              	.L24:
 506 0014 00000000 		.word	huart2
 507              		.cfi_endproc
 508              	.LFE151:
 510              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 511              		.align	1
 512              		.global	HAL_CAN_RxFifo0FullCallback
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	HAL_CAN_RxFifo0FullCallback:
 519              	.LFB152:
1050:Src/main.c    **** 
1051:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1052:Src/main.c    **** {
 520              		.loc 1 1052 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              	.LVL42:
 525 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/cc7Pcclv.s 			page 29


 526              	.LCFI9:
 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
1053:Src/main.c    ****     /// CALIBRATION CODE///
1054:Src/main.c    ****     int idsave = CAN_Receive(&can);
 532              		.loc 1 1054 0
 533 0002 4B48     		ldr	r0, .L46
 534              	.LVL43:
 535 0004 FFF7FEFF 		bl	CAN_Receive
 536              	.LVL44:
 537 0008 0446     		mov	r4, r0
 538              	.LVL45:
1055:Src/main.c    ****     //201/202
1056:Src/main.c    **** 
1057:Src/main.c    ****     if (idsave == 0x55 || idsave == 0x201)
 539              		.loc 1 1057 0
 540 000a 5528     		cmp	r0, #85
 541 000c 1ED0     		beq	.L27
 542              		.loc 1 1057 0 is_stmt 0 discriminator 1
 543 000e 40F20123 		movw	r3, #513
 544 0012 9842     		cmp	r0, r3
 545 0014 1AD0     		beq	.L27
 546              	.LVL46:
 547              	.L28:
1058:Src/main.c    ****     {
1059:Src/main.c    ****         if (can.dataRx[0] == 0x51 || can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0
1060:Src/main.c    ****         {
1061:Src/main.c    ****             command_flag = 1;
1062:Src/main.c    ****             idsave = 0;
1063:Src/main.c    ****         }
1064:Src/main.c    ****     }
1065:Src/main.c    ****     if (idsave == 0xA0 || idsave == 0xAA || idsave == 0x181)
 548              		.loc 1 1065 0 is_stmt 1
 549 0016 A02C     		cmp	r4, #160
 550 0018 05D0     		beq	.L30
 551              		.loc 1 1065 0 is_stmt 0 discriminator 1
 552 001a AA2C     		cmp	r4, #170
 553 001c 03D0     		beq	.L30
 554              		.loc 1 1065 0 discriminator 2
 555 001e 40F28113 		movw	r3, #385
 556 0022 9C42     		cmp	r4, r3
 557 0024 0DD1     		bne	.L31
 558              	.L30:
1066:Src/main.c    ****     {
1067:Src/main.c    ****         if (can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0
 559              		.loc 1 1067 0 is_stmt 1
 560 0026 424B     		ldr	r3, .L46
 561 0028 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 562 002a D31E     		subs	r3, r2, #3
 563 002c DBB2     		uxtb	r3, r3
 564 002e 022B     		cmp	r3, #2
 565 0030 03D9     		bls	.L32
 566              		.loc 1 1067 0 is_stmt 0 discriminator 1
 567 0032 082A     		cmp	r2, #8
ARM GAS  /tmp/cc7Pcclv.s 			page 30


 568 0034 01D0     		beq	.L32
 569              		.loc 1 1067 0 discriminator 2
 570 0036 D82A     		cmp	r2, #216
 571 0038 03D1     		bne	.L31
 572              	.L32:
1068:Src/main.c    ****         {
1069:Src/main.c    ****             command_flag = 1;
 573              		.loc 1 1069 0 is_stmt 1
 574 003a 0122     		movs	r2, #1
 575 003c 3D4B     		ldr	r3, .L46+4
 576 003e 1A60     		str	r2, [r3]
 577              	.LVL47:
1070:Src/main.c    ****             idsave = 0;
 578              		.loc 1 1070 0
 579 0040 0024     		movs	r4, #0
 580              	.LVL48:
 581              	.L31:
1071:Src/main.c    ****         }
1072:Src/main.c    ****     }
1073:Src/main.c    **** /*
1074:Src/main.c    ****     if (idsave == 0x181){
1075:Src/main.c    ****         if (can.dataRx[0] = 0xA8){
1076:Src/main.c    ****             inverter_rpm = can.dataRx[2] * 256 + can.dataRx[1];
1077:Src/main.c    ****             //x : 32000 = 100 : 7000
1078:Src/main.c    ****             inverter_rpm = inverter_rpm * 7000/32767;
1079:Src/main.c    ****             if (inverter_rpm > 7000){
1080:Src/main.c    ****                 inverter_rpm -= 14000;
1081:Src/main.c    ****             }
1082:Src/main.c    ****         }
1083:Src/main.c    ****     }*/
1084:Src/main.c    **** 
1085:Src/main.c    ****     if (idsave == 0xBB)
 582              		.loc 1 1085 0
 583 0042 BB2C     		cmp	r4, #187
 584 0044 17D0     		beq	.L42
 585              	.L33:
1086:Src/main.c    ****     {
1087:Src/main.c    ****         //sprintf(val0, "APPS1: %d \r\n", idsave);  //use "%lu" for long, "%d" for int
1088:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), 10);
1089:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 0))
1090:Src/main.c    ****         {
1091:Src/main.c    ****             set_min(&pot_2);
1092:Src/main.c    ****             calibration_flag = 1;
1093:Src/main.c    **** 
1094:Src/main.c    ****             can.dataTx[0] = 2;
1095:Src/main.c    ****             can.dataTx[1] = 0;
1096:Src/main.c    ****             can.dataTx[2] = 0;
1097:Src/main.c    ****             can.dataTx[3] = 0;
1098:Src/main.c    ****             can.dataTx[4] = 0;
1099:Src/main.c    ****             can.dataTx[5] = 0;
1100:Src/main.c    ****             can.dataTx[6] = 0;
1101:Src/main.c    ****             can.dataTx[7] = 0;
1102:Src/main.c    ****             can.id = 0xBC;
1103:Src/main.c    ****             can.size = 8;
1104:Src/main.c    ****             for (int i = 0; i < 10; i++)
1105:Src/main.c    ****             {
1106:Src/main.c    ****                 CAN_Send(&can);
ARM GAS  /tmp/cc7Pcclv.s 			page 31


1107:Src/main.c    ****             }
1108:Src/main.c    ****         }
1109:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 1))
1110:Src/main.c    ****         {
1111:Src/main.c    ****             set_max(&pot_2);
1112:Src/main.c    ****             calibration_flag = 0;
1113:Src/main.c    **** 
1114:Src/main.c    ****             can.dataTx[0] = 2;
1115:Src/main.c    ****             can.dataTx[1] = 1;
1116:Src/main.c    ****             can.dataTx[2] = 0;
1117:Src/main.c    ****             can.dataTx[3] = 0;
1118:Src/main.c    ****             can.dataTx[4] = 0;
1119:Src/main.c    ****             can.dataTx[5] = 0;
1120:Src/main.c    ****             ;
1121:Src/main.c    ****             can.dataTx[6] = 0;
1122:Src/main.c    ****             can.dataTx[7] = 0;
1123:Src/main.c    ****             can.id = 0xBC;
1124:Src/main.c    ****             can.size = 8;
1125:Src/main.c    ****             for (int i = 0; i < 10; i++)
1126:Src/main.c    ****             {
1127:Src/main.c    ****                 CAN_Send(&can);
1128:Src/main.c    ****             }
1129:Src/main.c    ****         }
1130:Src/main.c    ****         //val0rang = abs(valMax0 - valMin0);
1131:Src/main.c    ****         pot_2.range = abs(pot_2.max - pot_2.min);
1132:Src/main.c    ****         int max_tmp = pot_2.max;
1133:Src/main.c    ****         int min_tmp = pot_2.min;
1134:Src/main.c    ****         if (max_tmp > min_tmp)
1135:Src/main.c    ****         {
1136:Src/main.c    ****             pot_2.max = max_tmp;
1137:Src/main.c    ****             pot_2.min = min_tmp;
1138:Src/main.c    ****         }
1139:Src/main.c    ****         if (max_tmp < min_tmp)
1140:Src/main.c    ****         {
1141:Src/main.c    ****             pot_2.max = min_tmp;
1142:Src/main.c    ****             pot_2.min = max_tmp;
1143:Src/main.c    ****         }
1144:Src/main.c    ****     }
1145:Src/main.c    **** 
1146:Src/main.c    ****     //TIMER Interrupt setup via CAN Message
1147:Src/main.c    ****     if (idsave == 195 && can.dataRx[0] == 1)
 586              		.loc 1 1147 0
 587 0046 C32C     		cmp	r4, #195
 588 0048 65D0     		beq	.L43
 589              	.L26:
 590 004a 38BD     		pop	{r3, r4, r5, pc}
 591              	.LVL49:
 592              	.L27:
1059:Src/main.c    ****         {
 593              		.loc 1 1059 0
 594 004c 384B     		ldr	r3, .L46
 595 004e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 596 0050 512B     		cmp	r3, #81
 597 0052 0BD0     		beq	.L29
1059:Src/main.c    ****         {
 598              		.loc 1 1059 0 is_stmt 0 discriminator 1
 599 0054 032B     		cmp	r3, #3
ARM GAS  /tmp/cc7Pcclv.s 			page 32


 600 0056 09D0     		beq	.L29
1059:Src/main.c    ****         {
 601              		.loc 1 1059 0 discriminator 2
 602 0058 042B     		cmp	r3, #4
 603 005a 07D0     		beq	.L29
1059:Src/main.c    ****         {
 604              		.loc 1 1059 0 discriminator 3
 605 005c 052B     		cmp	r3, #5
 606 005e 05D0     		beq	.L29
1059:Src/main.c    ****         {
 607              		.loc 1 1059 0 discriminator 4
 608 0060 082B     		cmp	r3, #8
 609 0062 03D0     		beq	.L29
1059:Src/main.c    ****         {
 610              		.loc 1 1059 0 discriminator 5
 611 0064 0A2B     		cmp	r3, #10
 612 0066 01D0     		beq	.L29
1059:Src/main.c    ****         {
 613              		.loc 1 1059 0 discriminator 6
 614 0068 0B2B     		cmp	r3, #11
 615 006a D4D1     		bne	.L28
 616              	.L29:
1061:Src/main.c    ****             idsave = 0;
 617              		.loc 1 1061 0 is_stmt 1
 618 006c 0122     		movs	r2, #1
 619 006e 314B     		ldr	r3, .L46+4
 620 0070 1A60     		str	r2, [r3]
 621              	.LVL50:
1062:Src/main.c    ****         }
 622              		.loc 1 1062 0
 623 0072 0024     		movs	r4, #0
 624 0074 CFE7     		b	.L28
 625              	.LVL51:
 626              	.L42:
 627              	.LBB7:
1089:Src/main.c    ****         {
 628              		.loc 1 1089 0
 629 0076 2E4B     		ldr	r3, .L46
 630 0078 1B8A     		ldrh	r3, [r3, #16]
 631 007a 022B     		cmp	r3, #2
 632 007c 11D0     		beq	.L44
 633              	.L34:
1109:Src/main.c    ****         {
 634              		.loc 1 1109 0
 635 007e 2C4B     		ldr	r3, .L46
 636 0080 1B8A     		ldrh	r3, [r3, #16]
 637 0082 B3F5817F 		cmp	r3, #258
 638 0086 29D0     		beq	.L45
 639              	.L37:
1131:Src/main.c    ****         int max_tmp = pot_2.max;
 640              		.loc 1 1131 0
 641 0088 2B4B     		ldr	r3, .L46+8
 642 008a 5968     		ldr	r1, [r3, #4]
 643 008c 9868     		ldr	r0, [r3, #8]
 644 008e 0A1A     		subs	r2, r1, r0
 645 0090 002A     		cmp	r2, #0
 646 0092 B8BF     		it	lt
ARM GAS  /tmp/cc7Pcclv.s 			page 33


 647 0094 5242     		rsblt	r2, r2, #0
 648 0096 DA60     		str	r2, [r3, #12]
 649              	.LVL52:
1139:Src/main.c    ****         {
 650              		.loc 1 1139 0
 651 0098 8142     		cmp	r1, r0
 652 009a D4DA     		bge	.L33
1141:Src/main.c    ****             pot_2.min = max_tmp;
 653              		.loc 1 1141 0
 654 009c 5860     		str	r0, [r3, #4]
1142:Src/main.c    ****         }
 655              		.loc 1 1142 0
 656 009e 9960     		str	r1, [r3, #8]
 657 00a0 D1E7     		b	.L33
 658              	.LVL53:
 659              	.L44:
1091:Src/main.c    ****             calibration_flag = 1;
 660              		.loc 1 1091 0
 661 00a2 2548     		ldr	r0, .L46+8
 662 00a4 FFF7FEFF 		bl	set_min
 663              	.LVL54:
1092:Src/main.c    **** 
 664              		.loc 1 1092 0
 665 00a8 0122     		movs	r2, #1
 666 00aa 244B     		ldr	r3, .L46+12
 667 00ac 1A60     		str	r2, [r3]
1094:Src/main.c    ****             can.dataTx[1] = 0;
 668              		.loc 1 1094 0
 669 00ae 204B     		ldr	r3, .L46
 670 00b0 0222     		movs	r2, #2
 671 00b2 1A72     		strb	r2, [r3, #8]
1095:Src/main.c    ****             can.dataTx[2] = 0;
 672              		.loc 1 1095 0
 673 00b4 0025     		movs	r5, #0
 674 00b6 5D72     		strb	r5, [r3, #9]
1096:Src/main.c    ****             can.dataTx[3] = 0;
 675              		.loc 1 1096 0
 676 00b8 9D72     		strb	r5, [r3, #10]
1097:Src/main.c    ****             can.dataTx[4] = 0;
 677              		.loc 1 1097 0
 678 00ba DD72     		strb	r5, [r3, #11]
1098:Src/main.c    ****             can.dataTx[5] = 0;
 679              		.loc 1 1098 0
 680 00bc 1D73     		strb	r5, [r3, #12]
1099:Src/main.c    ****             can.dataTx[6] = 0;
 681              		.loc 1 1099 0
 682 00be 5D73     		strb	r5, [r3, #13]
1100:Src/main.c    ****             can.dataTx[7] = 0;
 683              		.loc 1 1100 0
 684 00c0 9D73     		strb	r5, [r3, #14]
1101:Src/main.c    ****             can.id = 0xBC;
 685              		.loc 1 1101 0
 686 00c2 DD73     		strb	r5, [r3, #15]
1102:Src/main.c    ****             can.size = 8;
 687              		.loc 1 1102 0
 688 00c4 BC22     		movs	r2, #188
 689 00c6 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc7Pcclv.s 			page 34


1103:Src/main.c    ****             for (int i = 0; i < 10; i++)
 690              		.loc 1 1103 0
 691 00c8 0822     		movs	r2, #8
 692 00ca 5A60     		str	r2, [r3, #4]
 693              	.LVL55:
 694              	.LBB8:
1104:Src/main.c    ****             {
 695              		.loc 1 1104 0
 696 00cc 03E0     		b	.L35
 697              	.LVL56:
 698              	.L36:
1106:Src/main.c    ****             }
 699              		.loc 1 1106 0 discriminator 3
 700 00ce 1848     		ldr	r0, .L46
 701 00d0 FFF7FEFF 		bl	CAN_Send
 702              	.LVL57:
1104:Src/main.c    ****             {
 703              		.loc 1 1104 0 discriminator 3
 704 00d4 0135     		adds	r5, r5, #1
 705              	.LVL58:
 706              	.L35:
1104:Src/main.c    ****             {
 707              		.loc 1 1104 0 is_stmt 0 discriminator 1
 708 00d6 092D     		cmp	r5, #9
 709 00d8 F9DD     		ble	.L36
 710 00da D0E7     		b	.L34
 711              	.LVL59:
 712              	.L45:
 713              	.LBE8:
1111:Src/main.c    ****             calibration_flag = 0;
 714              		.loc 1 1111 0 is_stmt 1
 715 00dc 1648     		ldr	r0, .L46+8
 716 00de FFF7FEFF 		bl	set_max
 717              	.LVL60:
1112:Src/main.c    **** 
 718              		.loc 1 1112 0
 719 00e2 0025     		movs	r5, #0
 720 00e4 154B     		ldr	r3, .L46+12
 721 00e6 1D60     		str	r5, [r3]
1114:Src/main.c    ****             can.dataTx[1] = 1;
 722              		.loc 1 1114 0
 723 00e8 114B     		ldr	r3, .L46
 724 00ea 0222     		movs	r2, #2
 725 00ec 1A72     		strb	r2, [r3, #8]
1115:Src/main.c    ****             can.dataTx[2] = 0;
 726              		.loc 1 1115 0
 727 00ee 0122     		movs	r2, #1
 728 00f0 5A72     		strb	r2, [r3, #9]
1116:Src/main.c    ****             can.dataTx[3] = 0;
 729              		.loc 1 1116 0
 730 00f2 9D72     		strb	r5, [r3, #10]
1117:Src/main.c    ****             can.dataTx[4] = 0;
 731              		.loc 1 1117 0
 732 00f4 DD72     		strb	r5, [r3, #11]
1118:Src/main.c    ****             can.dataTx[5] = 0;
 733              		.loc 1 1118 0
 734 00f6 1D73     		strb	r5, [r3, #12]
ARM GAS  /tmp/cc7Pcclv.s 			page 35


1119:Src/main.c    ****             ;
 735              		.loc 1 1119 0
 736 00f8 5D73     		strb	r5, [r3, #13]
1121:Src/main.c    ****             can.dataTx[7] = 0;
 737              		.loc 1 1121 0
 738 00fa 9D73     		strb	r5, [r3, #14]
1122:Src/main.c    ****             can.id = 0xBC;
 739              		.loc 1 1122 0
 740 00fc DD73     		strb	r5, [r3, #15]
1123:Src/main.c    ****             can.size = 8;
 741              		.loc 1 1123 0
 742 00fe BC22     		movs	r2, #188
 743 0100 1A60     		str	r2, [r3]
1124:Src/main.c    ****             for (int i = 0; i < 10; i++)
 744              		.loc 1 1124 0
 745 0102 0822     		movs	r2, #8
 746 0104 5A60     		str	r2, [r3, #4]
 747              	.LVL61:
 748              	.LBB9:
1125:Src/main.c    ****             {
 749              		.loc 1 1125 0
 750 0106 03E0     		b	.L38
 751              	.LVL62:
 752              	.L39:
1127:Src/main.c    ****             }
 753              		.loc 1 1127 0 discriminator 3
 754 0108 0948     		ldr	r0, .L46
 755 010a FFF7FEFF 		bl	CAN_Send
 756              	.LVL63:
1125:Src/main.c    ****             {
 757              		.loc 1 1125 0 discriminator 3
 758 010e 0135     		adds	r5, r5, #1
 759              	.LVL64:
 760              	.L38:
1125:Src/main.c    ****             {
 761              		.loc 1 1125 0 is_stmt 0 discriminator 1
 762 0110 092D     		cmp	r5, #9
 763 0112 F9DD     		ble	.L39
 764 0114 B8E7     		b	.L37
 765              	.LVL65:
 766              	.L43:
 767              	.LBE9:
 768              	.LBE7:
 769              		.loc 1 1147 0 is_stmt 1 discriminator 1
 770 0116 064B     		ldr	r3, .L46
 771 0118 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 772 011a 012B     		cmp	r3, #1
 773 011c 95D1     		bne	.L26
1148:Src/main.c    ****     {
1149:Src/main.c    ****         multiplier = can.dataRx[1] * 256 + can.dataRx[2];
 774              		.loc 1 1149 0
 775 011e 044A     		ldr	r2, .L46
 776 0120 517C     		ldrb	r1, [r2, #17]	@ zero_extendqisi2
 777 0122 937C     		ldrb	r3, [r2, #18]	@ zero_extendqisi2
 778 0124 03EB0123 		add	r3, r3, r1, lsl #8
 779 0128 054A     		ldr	r2, .L46+16
 780 012a 1360     		str	r3, [r2]
ARM GAS  /tmp/cc7Pcclv.s 			page 36


1150:Src/main.c    ****     }
1151:Src/main.c    **** }
 781              		.loc 1 1151 0
 782 012c 8DE7     		b	.L26
 783              	.L47:
 784 012e 00BF     		.align	2
 785              	.L46:
 786 0130 00000000 		.word	can
 787 0134 00000000 		.word	.LANCHOR0
 788 0138 00000000 		.word	pot_2
 789 013c 00000000 		.word	.LANCHOR1
 790 0140 00000000 		.word	.LANCHOR2
 791              		.cfi_endproc
 792              	.LFE152:
 794              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 795              		.align	1
 796              		.global	HAL_TIM_PeriodElapsedCallback
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	HAL_TIM_PeriodElapsedCallback:
 803              	.LFB153:
1152:Src/main.c    **** 
1153:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1154:Src/main.c    **** {
 804              		.loc 1 1154 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              	.LVL66:
 809 0000 10B5     		push	{r4, lr}
 810              	.LCFI10:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 4, -8
 813              		.cfi_offset 14, -4
 814 0002 0446     		mov	r4, r0
1155:Src/main.c    **** 
1156:Src/main.c    ****     if (htim == &htim10)
 815              		.loc 1 1156 0
 816 0004 194B     		ldr	r3, .L61
 817 0006 9842     		cmp	r0, r3
 818 0008 03D0     		beq	.L56
 819              	.LVL67:
 820              	.L49:
1157:Src/main.c    ****     {
1158:Src/main.c    ****         //READING SENSORS
1159:Src/main.c    ****         if (flag == 1 * multiplier)
1160:Src/main.c    ****         {
1161:Src/main.c    ****             // ACCEL
1162:Src/main.c    ****             LSMD9S0_accel_read(&accel);
1163:Src/main.c    **** 
1164:Src/main.c    ****         }
1165:Src/main.c    ****         else if (flag == 2 * multiplier)
1166:Src/main.c    ****         {
1167:Src/main.c    ****             // STEER
1168:Src/main.c    ****             calc_pot_value(&pot_2);
ARM GAS  /tmp/cc7Pcclv.s 			page 37


1169:Src/main.c    ****         }
1170:Src/main.c    ****         else if (flag == 3 * multiplier)
1171:Src/main.c    ****         {
1172:Src/main.c    ****             // GYRO
1173:Src/main.c    ****             LSMD9S0_gyro_read(&gyro);
1174:Src/main.c    ****             //imu_elaborate_data(&gyro);
1175:Src/main.c    ****         }
1176:Src/main.c    **** 
1177:Src/main.c    ****         if (flag >= (3 * multiplier))
1178:Src/main.c    ****         {
1179:Src/main.c    ****             flag = 0;
1180:Src/main.c    ****         }
1181:Src/main.c    ****         else
1182:Src/main.c    ****         {
1183:Src/main.c    ****             flag++;
1184:Src/main.c    ****         }
1185:Src/main.c    ****     }
1186:Src/main.c    **** 
1187:Src/main.c    ****     if (htim == &htim7)
 821              		.loc 1 1187 0
 822 000a 194B     		ldr	r3, .L61+4
 823 000c 9C42     		cmp	r4, r3
 824 000e 29D0     		beq	.L57
 825              	.L48:
 826 0010 10BD     		pop	{r4, pc}
 827              	.LVL68:
 828              	.L56:
1159:Src/main.c    ****         {
 829              		.loc 1 1159 0
 830 0012 184B     		ldr	r3, .L61+8
 831 0014 1A68     		ldr	r2, [r3]
 832 0016 184B     		ldr	r3, .L61+12
 833 0018 1B68     		ldr	r3, [r3]
 834 001a 9A42     		cmp	r2, r3
 835 001c 12D0     		beq	.L58
1165:Src/main.c    ****         {
 836              		.loc 1 1165 0
 837 001e B2EB430F 		cmp	r2, r3, lsl #1
 838 0022 13D0     		beq	.L59
1170:Src/main.c    ****         {
 839              		.loc 1 1170 0
 840 0024 03EB4303 		add	r3, r3, r3, lsl #1
 841 0028 9A42     		cmp	r2, r3
 842 002a 13D0     		beq	.L60
 843              	.LVL69:
 844              	.L51:
1177:Src/main.c    ****         {
 845              		.loc 1 1177 0
 846 002c 124B     		ldr	r3, .L61+12
 847 002e 1B68     		ldr	r3, [r3]
 848 0030 03EB4303 		add	r3, r3, r3, lsl #1
 849 0034 0F4A     		ldr	r2, .L61+8
 850 0036 1268     		ldr	r2, [r2]
 851 0038 9342     		cmp	r3, r2
 852 003a 0FDC     		bgt	.L53
1179:Src/main.c    ****         }
 853              		.loc 1 1179 0
ARM GAS  /tmp/cc7Pcclv.s 			page 38


 854 003c 0022     		movs	r2, #0
 855 003e 0D4B     		ldr	r3, .L61+8
 856 0040 1A60     		str	r2, [r3]
 857 0042 E2E7     		b	.L49
 858              	.LVL70:
 859              	.L58:
1162:Src/main.c    **** 
 860              		.loc 1 1162 0
 861 0044 0D48     		ldr	r0, .L61+16
 862              	.LVL71:
 863 0046 FFF7FEFF 		bl	LSMD9S0_accel_read
 864              	.LVL72:
 865 004a EFE7     		b	.L51
 866              	.LVL73:
 867              	.L59:
1168:Src/main.c    ****         }
 868              		.loc 1 1168 0
 869 004c 0C48     		ldr	r0, .L61+20
 870              	.LVL74:
 871 004e FFF7FEFF 		bl	calc_pot_value
 872              	.LVL75:
 873 0052 EBE7     		b	.L51
 874              	.LVL76:
 875              	.L60:
1173:Src/main.c    ****             //imu_elaborate_data(&gyro);
 876              		.loc 1 1173 0
 877 0054 0B48     		ldr	r0, .L61+24
 878              	.LVL77:
 879 0056 FFF7FEFF 		bl	LSMD9S0_gyro_read
 880              	.LVL78:
 881 005a E7E7     		b	.L51
 882              	.L53:
1183:Src/main.c    ****         }
 883              		.loc 1 1183 0
 884 005c 0132     		adds	r2, r2, #1
 885 005e 054B     		ldr	r3, .L61+8
 886 0060 1A60     		str	r2, [r3]
 887 0062 D2E7     		b	.L49
 888              	.L57:
1188:Src/main.c    ****     {
1189:Src/main.c    ****         encoder_tim_interrupt(&enc);
 889              		.loc 1 1189 0
 890 0064 0848     		ldr	r0, .L61+28
 891 0066 FFF7FEFF 		bl	encoder_tim_interrupt
 892              	.LVL79:
1190:Src/main.c    ****     }
1191:Src/main.c    **** }
 893              		.loc 1 1191 0
 894 006a D1E7     		b	.L48
 895              	.L62:
 896              		.align	2
 897              	.L61:
 898 006c 00000000 		.word	htim10
 899 0070 00000000 		.word	htim7
 900 0074 00000000 		.word	.LANCHOR3
 901 0078 00000000 		.word	.LANCHOR2
 902 007c 00000000 		.word	accel
ARM GAS  /tmp/cc7Pcclv.s 			page 39


 903 0080 00000000 		.word	pot_2
 904 0084 00000000 		.word	gyro
 905 0088 00000000 		.word	enc
 906              		.cfi_endproc
 907              	.LFE153:
 909              		.global	__aeabi_d2uiz
 910              		.global	__aeabi_ddiv
 911              		.global	__aeabi_dmul
 912              		.global	__aeabi_i2d
 913              		.global	__aeabi_dadd
 914              		.section	.text.send_CAN_data,"ax",%progbits
 915              		.align	1
 916              		.global	send_CAN_data
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
 920              		.fpu fpv4-sp-d16
 922              	send_CAN_data:
 923              	.LFB154:
1192:Src/main.c    **** 
1193:Src/main.c    **** int send_CAN_data(uint32_t millis)
1194:Src/main.c    **** {
 924              		.loc 1 1194 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 8
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              	.LVL80:
 929 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 930              	.LCFI11:
 931              		.cfi_def_cfa_offset 36
 932              		.cfi_offset 4, -36
 933              		.cfi_offset 5, -32
 934              		.cfi_offset 6, -28
 935              		.cfi_offset 7, -24
 936              		.cfi_offset 8, -20
 937              		.cfi_offset 9, -16
 938              		.cfi_offset 10, -12
 939              		.cfi_offset 11, -8
 940              		.cfi_offset 14, -4
 941 0004 83B0     		sub	sp, sp, #12
 942              	.LCFI12:
 943              		.cfi_def_cfa_offset 48
 944 0006 0446     		mov	r4, r0
 945              	.LVL81:
1195:Src/main.c    **** 
1196:Src/main.c    ****     int sent_flag = 0;
1197:Src/main.c    **** 
1198:Src/main.c    ****     //-------------------SEND Encoder-------------------//
1199:Src/main.c    ****     if (millis % 100 == 0)
 946              		.loc 1 1199 0
 947 0008 C54B     		ldr	r3, .L92+8
 948 000a A3FB0023 		umull	r2, r3, r3, r0
 949 000e 5B09     		lsrs	r3, r3, #5
 950 0010 6422     		movs	r2, #100
 951 0012 02FB1303 		mls	r3, r2, r3, r0
 952 0016 002B     		cmp	r3, #0
 953 0018 48D0     		beq	.L79
ARM GAS  /tmp/cc7Pcclv.s 			page 40


1196:Src/main.c    **** 
 954              		.loc 1 1196 0
 955 001a 0020     		movs	r0, #0
 956              	.LVL82:
 957              	.L64:
1200:Src/main.c    ****     {
1201:Src/main.c    ****         uint16_t speed_kmh = enc.average_speed;
1202:Src/main.c    ****         uint16_t speed_ms = enc.average_speed / 3.6 * 100;
1203:Src/main.c    **** 
1204:Src/main.c    ****         can.dataTx[0] = 0x06;
1205:Src/main.c    ****         can.dataTx[1] = speed_kmh / 256;
1206:Src/main.c    ****         can.dataTx[2] = speed_kmh % 256;
1207:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
1208:Src/main.c    ****         can.dataTx[4] = speed_ms / 256;
1209:Src/main.c    ****         can.dataTx[5] = speed_ms % 256;
1210:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
1211:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
1212:Src/main.c    ****         can.id = 0xD0;
1213:Src/main.c    ****         can.size = 8;
1214:Src/main.c    ****         CAN_Send(&can);
1215:Src/main.c    **** 
1216:Src/main.c    ****         sent_flag = 1;
1217:Src/main.c    **** 
1218:Src/main.c    ****         // sprintf(txt, "%d\t%d\r\n", (int)(speed_Send), (int)(enc.Km));
1219:Src/main.c    ****         // HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
1220:Src/main.c    ****     }
1221:Src/main.c    **** 
1222:Src/main.c    ****     millis += 2;
 958              		.loc 1 1222 0
 959 001c A21C     		adds	r2, r4, #2
 960              	.LVL83:
1223:Src/main.c    **** 
1224:Src/main.c    ****     //-------------SEND KM & WHEEL ROTAIONS-------------//
1225:Src/main.c    ****     if (millis % 100 == 0)
 961              		.loc 1 1225 0
 962 001e C04B     		ldr	r3, .L92+8
 963 0020 A3FB0213 		umull	r1, r3, r3, r2
 964 0024 5B09     		lsrs	r3, r3, #5
 965 0026 6421     		movs	r1, #100
 966 0028 01FB1323 		mls	r3, r1, r3, r2
 967 002c 002B     		cmp	r3, #0
 968 002e 6AD0     		beq	.L80
 969              	.LVL84:
 970              	.L65:
1226:Src/main.c    ****     {
1227:Src/main.c    **** 
1228:Src/main.c    ****         uint16_t Km = (enc.Km);
1229:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
1230:Src/main.c    **** 
1231:Src/main.c    ****         can.dataTx[0] = 0x08;
1232:Src/main.c    ****         can.dataTx[1] = Km >> 8;
1233:Src/main.c    ****         can.dataTx[2] = Km;
1234:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
1235:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
1236:Src/main.c    ****         can.dataTx[5] = 0;
1237:Src/main.c    ****         can.dataTx[6] = 0;
1238:Src/main.c    ****         can.dataTx[7] = 0;
ARM GAS  /tmp/cc7Pcclv.s 			page 41


1239:Src/main.c    ****         can.id = 0xD0;
1240:Src/main.c    ****         can.size = 8;
1241:Src/main.c    ****         CAN_Send(&can);
1242:Src/main.c    **** 
1243:Src/main.c    ****         sent_flag = 2;
1244:Src/main.c    ****     }
1245:Src/main.c    **** 
1246:Src/main.c    ****     millis += 2;
 971              		.loc 1 1246 0
 972 0030 221D     		adds	r2, r4, #4
 973              	.LVL85:
1247:Src/main.c    **** 
1248:Src/main.c    ****     //--------------------SEND Accel--------------------//
1249:Src/main.c    ****     if (millis % 100 == 0)
 974              		.loc 1 1249 0
 975 0032 BB4B     		ldr	r3, .L92+8
 976 0034 A3FB0213 		umull	r1, r3, r3, r2
 977 0038 5B09     		lsrs	r3, r3, #5
 978 003a 6421     		movs	r1, #100
 979 003c 01FB1323 		mls	r3, r1, r3, r2
 980 0040 002B     		cmp	r3, #0
 981 0042 7ED0     		beq	.L81
 982              	.LVL86:
 983              	.L66:
1250:Src/main.c    ****     {
1251:Src/main.c    **** 
1252:Src/main.c    ****         //removing negative values
1253:Src/main.c    ****         uint16_t val_a_x = (accel.x + accel.scale) * 100;
1254:Src/main.c    ****         uint16_t val_a_y = (accel.y + accel.scale) * 100;
1255:Src/main.c    ****         uint16_t val_a_z = (accel.z + accel.scale) * 100;
1256:Src/main.c    **** 
1257:Src/main.c    ****         can.dataTx[0] = 0x00;
1258:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
1259:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
1260:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
1261:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
1262:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
1263:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
1264:Src/main.c    ****         can.dataTx[7] = (uint8_t)accel.scale;
1265:Src/main.c    ****         can.id = 0xC0;
1266:Src/main.c    ****         can.size = 8;
1267:Src/main.c    ****         CAN_Send(&can);
1268:Src/main.c    **** 
1269:Src/main.c    ****         sent_flag = 3;
1270:Src/main.c    ****     }
1271:Src/main.c    **** 
1272:Src/main.c    ****     millis += 2;
 984              		.loc 1 1272 0
 985 0044 A21D     		adds	r2, r4, #6
 986              	.LVL87:
1273:Src/main.c    **** 
1274:Src/main.c    ****     //---------------------SEND Gyro---------------------//
1275:Src/main.c    ****     if (millis % 100 == 0)
 987              		.loc 1 1275 0
 988 0046 B64B     		ldr	r3, .L92+8
 989 0048 A3FB0213 		umull	r1, r3, r3, r2
 990 004c 5B09     		lsrs	r3, r3, #5
ARM GAS  /tmp/cc7Pcclv.s 			page 42


 991 004e 6421     		movs	r1, #100
 992 0050 01FB1323 		mls	r3, r1, r3, r2
 993 0054 002B     		cmp	r3, #0
 994 0056 00F0C180 		beq	.L82
 995              	.LVL88:
 996              	.L67:
1276:Src/main.c    ****     {
1277:Src/main.c    ****         uint16_t val_g_x = (gyro.x + gyro.scale) * 10;
1278:Src/main.c    ****         uint16_t val_g_y = (gyro.y + gyro.scale) * 10;
1279:Src/main.c    ****         uint16_t val_g_z = (gyro.z + gyro.scale) * 10;
1280:Src/main.c    **** 
1281:Src/main.c    ****         can.dataTx[0] = 0x01;
1282:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
1283:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
1284:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
1285:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
1286:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
1287:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
1288:Src/main.c    ****         can.dataTx[7] = (uint8_t)(gyro.scale / 10);
1289:Src/main.c    ****         can.id = 0xC0;
1290:Src/main.c    ****         can.size = 8;
1291:Src/main.c    ****         CAN_Send(&can);
1292:Src/main.c    **** 
1293:Src/main.c    ****         // sprintf(txt, "%d\t%d\r\n", (int)(val_g_x), (int)(val_g_y));
1294:Src/main.c    ****         // HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
1295:Src/main.c    **** 
1296:Src/main.c    ****         sent_flag = 4;
1297:Src/main.c    ****     }
1298:Src/main.c    **** 
1299:Src/main.c    ****     millis += 2;
 997              		.loc 1 1299 0
 998 005a 04F10802 		add	r2, r4, #8
 999              	.LVL89:
1300:Src/main.c    **** 
1301:Src/main.c    ****     //--------------------SEND Steer--------------------//
1302:Src/main.c    ****     if (millis % 100 == 0)
 1000              		.loc 1 1302 0
 1001 005e B04B     		ldr	r3, .L92+8
 1002 0060 A3FB0213 		umull	r1, r3, r3, r2
 1003 0064 5B09     		lsrs	r3, r3, #5
 1004 0066 6421     		movs	r1, #100
 1005 0068 01FB1323 		mls	r3, r1, r3, r2
 1006 006c 23B9     		cbnz	r3, .L68
1303:Src/main.c    ****     {
1304:Src/main.c    ****         if (calibration_flag == 0)
 1007              		.loc 1 1304 0
 1008 006e AD4B     		ldr	r3, .L92+12
 1009 0070 1B68     		ldr	r3, [r3]
 1010 0072 002B     		cmp	r3, #0
 1011 0074 00F00181 		beq	.L83
 1012              	.LVL90:
 1013              	.L68:
1305:Src/main.c    ****         {
1306:Src/main.c    ****             can.dataTx[0] = 2;
1307:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
1308:Src/main.c    ****             can.dataTx[2] = 0;
1309:Src/main.c    ****             can.dataTx[3] = 0;
ARM GAS  /tmp/cc7Pcclv.s 			page 43


1310:Src/main.c    ****             can.dataTx[4] = 0;
1311:Src/main.c    ****             can.dataTx[5] = 0;
1312:Src/main.c    ****             can.dataTx[6] = 0;
1313:Src/main.c    ****             can.dataTx[7] = 0;
1314:Src/main.c    ****             can.id = 0xC0;
1315:Src/main.c    ****             can.size = 8;
1316:Src/main.c    ****             CAN_Send(&can);
1317:Src/main.c    **** 
1318:Src/main.c    ****             sent_flag = 5;
1319:Src/main.c    ****         }
1320:Src/main.c    ****     }
1321:Src/main.c    **** 
1322:Src/main.c    ****     millis += 2;
 1014              		.loc 1 1322 0
 1015 0078 04F10A02 		add	r2, r4, #10
 1016              	.LVL91:
1323:Src/main.c    **** 
1324:Src/main.c    ****     //--------------------SEND GPS--------------------//
1325:Src/main.c    ****     if (millis % 100 == 0)
 1017              		.loc 1 1325 0
 1018 007c A84B     		ldr	r3, .L92+8
 1019 007e A3FB0213 		umull	r1, r3, r3, r2
 1020 0082 5B09     		lsrs	r3, r3, #5
 1021 0084 6421     		movs	r1, #100
 1022 0086 01FB1323 		mls	r3, r1, r3, r2
 1023 008a 002B     		cmp	r3, #0
 1024 008c 00F00A81 		beq	.L84
 1025              	.LVL92:
 1026              	.L69:
1326:Src/main.c    ****     {
1327:Src/main.c    ****         can.dataTx[0] = 0x010;
1328:Src/main.c    ****         can.dataTx[1] = gps_main.latitude_i_h / 256;
1329:Src/main.c    ****         can.dataTx[2] = gps_main.latitude_i_h % 256;
1330:Src/main.c    ****         can.dataTx[3] = gps_main.latitude_i_l / 256;
1331:Src/main.c    ****         can.dataTx[4] = gps_main.latitude_i_l % 256;
1332:Src/main.c    ****         can.dataTx[5] = (int)gps_main.latitude_o;
1333:Src/main.c    ****         can.dataTx[6] = gps_main.speed_i / 256;
1334:Src/main.c    ****         can.dataTx[7] = gps_main.speed_i % 256;
1335:Src/main.c    ****         can.id = 0xD0;
1336:Src/main.c    ****         can.size = 8;
1337:Src/main.c    ****         CAN_Send(&can);
1338:Src/main.c    **** 
1339:Src/main.c    ****         sent_flag = 6;
1340:Src/main.c    ****     }
1341:Src/main.c    **** 
1342:Src/main.c    ****     millis += 2;
 1027              		.loc 1 1342 0
 1028 0090 0C34     		adds	r4, r4, #12
 1029              	.LVL93:
1343:Src/main.c    **** 
1344:Src/main.c    ****     //--------------------SEND GPS--------------------//
1345:Src/main.c    ****     if (millis % 100 == 0)
 1030              		.loc 1 1345 0
 1031 0092 A34B     		ldr	r3, .L92+8
 1032 0094 A3FB0423 		umull	r2, r3, r3, r4
 1033 0098 5B09     		lsrs	r3, r3, #5
 1034 009a 6422     		movs	r2, #100
ARM GAS  /tmp/cc7Pcclv.s 			page 44


 1035 009c 02FB1343 		mls	r3, r2, r3, r4
 1036 00a0 002B     		cmp	r3, #0
 1037 00a2 00F05B81 		beq	.L85
 1038              	.LVL94:
 1039              	.L63:
1346:Src/main.c    ****     {
1347:Src/main.c    ****         can.dataTx[0] = 0x011;
1348:Src/main.c    ****         can.dataTx[1] = gps_main.longitude_i_h / 256;
1349:Src/main.c    ****         can.dataTx[2] = gps_main.longitude_i_h % 256;
1350:Src/main.c    ****         can.dataTx[3] = gps_main.longitude_i_l / 256;
1351:Src/main.c    ****         can.dataTx[4] = gps_main.longitude_i_l % 256;
1352:Src/main.c    ****         can.dataTx[5] = (int)gps_main.longitude_o;
1353:Src/main.c    ****         can.dataTx[6] = gps_main.altitude_i / 256;
1354:Src/main.c    ****         can.dataTx[7] = gps_main.altitude_i % 256;
1355:Src/main.c    ****         can.id = 0xD0;
1356:Src/main.c    ****         can.size = 8;
1357:Src/main.c    ****         CAN_Send(&can);
1358:Src/main.c    ****         
1359:Src/main.c    ****         sent_flag = 7;
1360:Src/main.c    ****     }
1361:Src/main.c    **** 
1362:Src/main.c    **** 
1363:Src/main.c    ****     return sent_flag;
1364:Src/main.c    **** }
 1040              		.loc 1 1364 0
 1041 00a6 03B0     		add	sp, sp, #12
 1042              	.LCFI13:
 1043              		.cfi_remember_state
 1044              		.cfi_def_cfa_offset 36
 1045              		@ sp needed
 1046 00a8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1047              	.LVL95:
 1048              	.L79:
 1049              	.LCFI14:
 1050              		.cfi_restore_state
 1051              	.LBB10:
1201:Src/main.c    ****         uint16_t speed_ms = enc.average_speed / 3.6 * 100;
 1052              		.loc 1 1201 0
 1053 00ac 9E4D     		ldr	r5, .L92+16
 1054 00ae D5E9F089 		ldrd	r8, [r5, #960]
 1055 00b2 4046     		mov	r0, r8
 1056              	.LVL96:
 1057 00b4 4946     		mov	r1, r9
 1058 00b6 FFF7FEFF 		bl	__aeabi_d2uiz
 1059              	.LVL97:
 1060 00ba 86B2     		uxth	r6, r0
 1061              	.LVL98:
1202:Src/main.c    **** 
 1062              		.loc 1 1202 0
 1063 00bc 96A3     		adr	r3, .L92
 1064 00be D3E90023 		ldrd	r2, [r3]
 1065 00c2 4046     		mov	r0, r8
 1066 00c4 4946     		mov	r1, r9
 1067 00c6 FFF7FEFF 		bl	__aeabi_ddiv
 1068              	.LVL99:
 1069 00ca 0022     		movs	r2, #0
 1070 00cc 974B     		ldr	r3, .L92+20
ARM GAS  /tmp/cc7Pcclv.s 			page 45


 1071 00ce FFF7FEFF 		bl	__aeabi_dmul
 1072              	.LVL100:
 1073 00d2 FFF7FEFF 		bl	__aeabi_d2uiz
 1074              	.LVL101:
 1075 00d6 83B2     		uxth	r3, r0
 1076              	.LVL102:
1204:Src/main.c    ****         can.dataTx[1] = speed_kmh / 256;
 1077              		.loc 1 1204 0
 1078 00d8 9548     		ldr	r0, .L92+24
 1079 00da 0622     		movs	r2, #6
 1080 00dc 0272     		strb	r2, [r0, #8]
1205:Src/main.c    ****         can.dataTx[2] = speed_kmh % 256;
 1081              		.loc 1 1205 0
 1082 00de 320A     		lsrs	r2, r6, #8
 1083 00e0 4272     		strb	r2, [r0, #9]
1206:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
 1084              		.loc 1 1206 0
 1085 00e2 8672     		strb	r6, [r0, #10]
1207:Src/main.c    ****         can.dataTx[4] = speed_ms / 256;
 1086              		.loc 1 1207 0
 1087 00e4 AA6D     		ldr	r2, [r5, #88]
 1088 00e6 C272     		strb	r2, [r0, #11]
1208:Src/main.c    ****         can.dataTx[5] = speed_ms % 256;
 1089              		.loc 1 1208 0
 1090 00e8 1A0A     		lsrs	r2, r3, #8
 1091 00ea 0273     		strb	r2, [r0, #12]
1209:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
 1092              		.loc 1 1209 0
 1093 00ec 4373     		strb	r3, [r0, #13]
1210:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
 1094              		.loc 1 1210 0
 1095 00ee 6B68     		ldr	r3, [r5, #4]
 1096              	.LVL103:
 1097 00f0 8373     		strb	r3, [r0, #14]
1211:Src/main.c    ****         can.id = 0xD0;
 1098              		.loc 1 1211 0
 1099 00f2 AB6C     		ldr	r3, [r5, #72]
 1100 00f4 C373     		strb	r3, [r0, #15]
1212:Src/main.c    ****         can.size = 8;
 1101              		.loc 1 1212 0
 1102 00f6 D023     		movs	r3, #208
 1103 00f8 0360     		str	r3, [r0]
1213:Src/main.c    ****         CAN_Send(&can);
 1104              		.loc 1 1213 0
 1105 00fa 0823     		movs	r3, #8
 1106 00fc 4360     		str	r3, [r0, #4]
1214:Src/main.c    **** 
 1107              		.loc 1 1214 0
 1108 00fe FFF7FEFF 		bl	CAN_Send
 1109              	.LVL104:
1216:Src/main.c    **** 
 1110              		.loc 1 1216 0
 1111 0102 0120     		movs	r0, #1
 1112 0104 8AE7     		b	.L64
 1113              	.LVL105:
 1114              	.L80:
 1115              	.LBE10:
ARM GAS  /tmp/cc7Pcclv.s 			page 46


 1116              	.LBB11:
1228:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
 1117              		.loc 1 1228 0
 1118 0106 884A     		ldr	r2, .L92+16
 1119              	.LVL106:
 1120 0108 D2ED157A 		vldr.32	s15, [r2, #84]
 1121 010c FCEEE77A 		vcvt.u32.f32	s15, s15
 1122 0110 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1123 0114 BDF80430 		ldrh	r3, [sp, #4]
 1124              	.LVL107:
1229:Src/main.c    **** 
 1125              		.loc 1 1229 0
 1126 0118 116D     		ldr	r1, [r2, #80]
 1127              	.LVL108:
1231:Src/main.c    ****         can.dataTx[1] = Km >> 8;
 1128              		.loc 1 1231 0
 1129 011a 8548     		ldr	r0, .L92+24
 1130              	.LVL109:
 1131 011c 0822     		movs	r2, #8
 1132 011e 0272     		strb	r2, [r0, #8]
1232:Src/main.c    ****         can.dataTx[2] = Km;
 1133              		.loc 1 1232 0
 1134 0120 23FA02F5 		lsr	r5, r3, r2
 1135 0124 4572     		strb	r5, [r0, #9]
1233:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
 1136              		.loc 1 1233 0
 1137 0126 8372     		strb	r3, [r0, #10]
1234:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
 1138              		.loc 1 1234 0
 1139 0128 0023     		movs	r3, #0
 1140              	.LVL110:
 1141 012a C372     		strb	r3, [r0, #11]
1235:Src/main.c    ****         can.dataTx[5] = 0;
 1142              		.loc 1 1235 0
 1143 012c 0173     		strb	r1, [r0, #12]
1236:Src/main.c    ****         can.dataTx[6] = 0;
 1144              		.loc 1 1236 0
 1145 012e 4373     		strb	r3, [r0, #13]
1237:Src/main.c    ****         can.dataTx[7] = 0;
 1146              		.loc 1 1237 0
 1147 0130 8373     		strb	r3, [r0, #14]
1238:Src/main.c    ****         can.id = 0xD0;
 1148              		.loc 1 1238 0
 1149 0132 C373     		strb	r3, [r0, #15]
1239:Src/main.c    ****         can.size = 8;
 1150              		.loc 1 1239 0
 1151 0134 D023     		movs	r3, #208
 1152 0136 0360     		str	r3, [r0]
1240:Src/main.c    ****         CAN_Send(&can);
 1153              		.loc 1 1240 0
 1154 0138 4260     		str	r2, [r0, #4]
1241:Src/main.c    **** 
 1155              		.loc 1 1241 0
 1156 013a FFF7FEFF 		bl	CAN_Send
 1157              	.LVL111:
1243:Src/main.c    ****     }
 1158              		.loc 1 1243 0
ARM GAS  /tmp/cc7Pcclv.s 			page 47


 1159 013e 0220     		movs	r0, #2
 1160 0140 76E7     		b	.L65
 1161              	.LVL112:
 1162              	.L81:
 1163              	.LBE11:
 1164              	.LBB12:
1253:Src/main.c    ****         uint16_t val_a_y = (accel.y + accel.scale) * 100;
 1165              		.loc 1 1253 0
 1166 0142 7C4D     		ldr	r5, .L92+28
 1167 0144 D5E900AB 		ldrd	r10, [r5]
 1168 0148 D5F81882 		ldr	r8, [r5, #536]
 1169 014c 4046     		mov	r0, r8
 1170              	.LVL113:
 1171 014e FFF7FEFF 		bl	__aeabi_i2d
 1172              	.LVL114:
 1173 0152 0646     		mov	r6, r0
 1174 0154 0F46     		mov	r7, r1
 1175 0156 0246     		mov	r2, r0
 1176 0158 0B46     		mov	r3, r1
 1177 015a 5046     		mov	r0, r10
 1178 015c 5946     		mov	r1, fp
 1179 015e FFF7FEFF 		bl	__aeabi_dadd
 1180              	.LVL115:
 1181 0162 0022     		movs	r2, #0
 1182 0164 714B     		ldr	r3, .L92+20
 1183 0166 FFF7FEFF 		bl	__aeabi_dmul
 1184              	.LVL116:
 1185 016a FFF7FEFF 		bl	__aeabi_d2uiz
 1186              	.LVL117:
 1187 016e 1FFA80FA 		uxth	r10, r0
 1188              	.LVL118:
1254:Src/main.c    ****         uint16_t val_a_z = (accel.z + accel.scale) * 100;
 1189              		.loc 1 1254 0
 1190 0172 D5E90223 		ldrd	r2, [r5, #8]
 1191 0176 3046     		mov	r0, r6
 1192 0178 3946     		mov	r1, r7
 1193 017a FFF7FEFF 		bl	__aeabi_dadd
 1194              	.LVL119:
 1195 017e 0022     		movs	r2, #0
 1196 0180 6A4B     		ldr	r3, .L92+20
 1197 0182 FFF7FEFF 		bl	__aeabi_dmul
 1198              	.LVL120:
 1199 0186 FFF7FEFF 		bl	__aeabi_d2uiz
 1200              	.LVL121:
 1201 018a 1FFA80F9 		uxth	r9, r0
 1202              	.LVL122:
1255:Src/main.c    **** 
 1203              		.loc 1 1255 0
 1204 018e D5E90423 		ldrd	r2, [r5, #16]
 1205 0192 3046     		mov	r0, r6
 1206 0194 3946     		mov	r1, r7
 1207 0196 FFF7FEFF 		bl	__aeabi_dadd
 1208              	.LVL123:
 1209 019a 0022     		movs	r2, #0
 1210 019c 634B     		ldr	r3, .L92+20
 1211 019e FFF7FEFF 		bl	__aeabi_dmul
 1212              	.LVL124:
ARM GAS  /tmp/cc7Pcclv.s 			page 48


 1213 01a2 FFF7FEFF 		bl	__aeabi_d2uiz
 1214              	.LVL125:
 1215 01a6 83B2     		uxth	r3, r0
 1216              	.LVL126:
1257:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
 1217              		.loc 1 1257 0
 1218 01a8 6148     		ldr	r0, .L92+24
 1219 01aa 0022     		movs	r2, #0
 1220 01ac 0272     		strb	r2, [r0, #8]
1258:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
 1221              		.loc 1 1258 0
 1222 01ae 4FEA1A22 		lsr	r2, r10, #8
 1223 01b2 4272     		strb	r2, [r0, #9]
1259:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
 1224              		.loc 1 1259 0
 1225 01b4 80F80AA0 		strb	r10, [r0, #10]
1260:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
 1226              		.loc 1 1260 0
 1227 01b8 4FEA1922 		lsr	r2, r9, #8
 1228 01bc C272     		strb	r2, [r0, #11]
1261:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
 1229              		.loc 1 1261 0
 1230 01be 80F80C90 		strb	r9, [r0, #12]
1262:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
 1231              		.loc 1 1262 0
 1232 01c2 1A0A     		lsrs	r2, r3, #8
 1233 01c4 4273     		strb	r2, [r0, #13]
1263:Src/main.c    ****         can.dataTx[7] = (uint8_t)accel.scale;
 1234              		.loc 1 1263 0
 1235 01c6 8373     		strb	r3, [r0, #14]
1264:Src/main.c    ****         can.id = 0xC0;
 1236              		.loc 1 1264 0
 1237 01c8 80F80F80 		strb	r8, [r0, #15]
1265:Src/main.c    ****         can.size = 8;
 1238              		.loc 1 1265 0
 1239 01cc C023     		movs	r3, #192
 1240              	.LVL127:
 1241 01ce 0360     		str	r3, [r0]
1266:Src/main.c    ****         CAN_Send(&can);
 1242              		.loc 1 1266 0
 1243 01d0 0823     		movs	r3, #8
 1244 01d2 4360     		str	r3, [r0, #4]
1267:Src/main.c    **** 
 1245              		.loc 1 1267 0
 1246 01d4 FFF7FEFF 		bl	CAN_Send
 1247              	.LVL128:
1269:Src/main.c    ****     }
 1248              		.loc 1 1269 0
 1249 01d8 0320     		movs	r0, #3
 1250 01da 33E7     		b	.L66
 1251              	.LVL129:
 1252              	.L82:
 1253              	.LBE12:
 1254              	.LBB13:
1277:Src/main.c    ****         uint16_t val_g_y = (gyro.y + gyro.scale) * 10;
 1255              		.loc 1 1277 0
 1256 01dc 564E     		ldr	r6, .L92+32
ARM GAS  /tmp/cc7Pcclv.s 			page 49


 1257 01de D6E900AB 		ldrd	r10, [r6]
 1258 01e2 D6F81852 		ldr	r5, [r6, #536]
 1259 01e6 2846     		mov	r0, r5
 1260              	.LVL130:
 1261 01e8 FFF7FEFF 		bl	__aeabi_i2d
 1262              	.LVL131:
 1263 01ec 8046     		mov	r8, r0
 1264 01ee 8946     		mov	r9, r1
 1265 01f0 0246     		mov	r2, r0
 1266 01f2 0B46     		mov	r3, r1
 1267 01f4 5046     		mov	r0, r10
 1268 01f6 5946     		mov	r1, fp
 1269 01f8 FFF7FEFF 		bl	__aeabi_dadd
 1270              	.LVL132:
 1271 01fc 0022     		movs	r2, #0
 1272 01fe 4F4B     		ldr	r3, .L92+36
 1273 0200 FFF7FEFF 		bl	__aeabi_dmul
 1274              	.LVL133:
 1275 0204 FFF7FEFF 		bl	__aeabi_d2uiz
 1276              	.LVL134:
 1277 0208 1FFA80FA 		uxth	r10, r0
 1278              	.LVL135:
1278:Src/main.c    ****         uint16_t val_g_z = (gyro.z + gyro.scale) * 10;
 1279              		.loc 1 1278 0
 1280 020c D6E90223 		ldrd	r2, [r6, #8]
 1281 0210 4046     		mov	r0, r8
 1282 0212 4946     		mov	r1, r9
 1283 0214 FFF7FEFF 		bl	__aeabi_dadd
 1284              	.LVL136:
 1285 0218 0022     		movs	r2, #0
 1286 021a 484B     		ldr	r3, .L92+36
 1287 021c FFF7FEFF 		bl	__aeabi_dmul
 1288              	.LVL137:
 1289 0220 FFF7FEFF 		bl	__aeabi_d2uiz
 1290              	.LVL138:
 1291 0224 87B2     		uxth	r7, r0
 1292              	.LVL139:
1279:Src/main.c    **** 
 1293              		.loc 1 1279 0
 1294 0226 D6E90423 		ldrd	r2, [r6, #16]
 1295 022a 4046     		mov	r0, r8
 1296 022c 4946     		mov	r1, r9
 1297 022e FFF7FEFF 		bl	__aeabi_dadd
 1298              	.LVL140:
 1299 0232 0022     		movs	r2, #0
 1300 0234 414B     		ldr	r3, .L92+36
 1301 0236 FFF7FEFF 		bl	__aeabi_dmul
 1302              	.LVL141:
 1303 023a FFF7FEFF 		bl	__aeabi_d2uiz
 1304              	.LVL142:
 1305 023e 83B2     		uxth	r3, r0
 1306              	.LVL143:
1281:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
 1307              		.loc 1 1281 0
 1308 0240 3B48     		ldr	r0, .L92+24
 1309 0242 0122     		movs	r2, #1
 1310 0244 0272     		strb	r2, [r0, #8]
ARM GAS  /tmp/cc7Pcclv.s 			page 50


1282:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
 1311              		.loc 1 1282 0
 1312 0246 4FEA1A22 		lsr	r2, r10, #8
 1313 024a 4272     		strb	r2, [r0, #9]
1283:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
 1314              		.loc 1 1283 0
 1315 024c 80F80AA0 		strb	r10, [r0, #10]
1284:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
 1316              		.loc 1 1284 0
 1317 0250 3A0A     		lsrs	r2, r7, #8
 1318 0252 C272     		strb	r2, [r0, #11]
1285:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
 1319              		.loc 1 1285 0
 1320 0254 0773     		strb	r7, [r0, #12]
1286:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
 1321              		.loc 1 1286 0
 1322 0256 1A0A     		lsrs	r2, r3, #8
 1323 0258 4273     		strb	r2, [r0, #13]
1287:Src/main.c    ****         can.dataTx[7] = (uint8_t)(gyro.scale / 10);
 1324              		.loc 1 1287 0
 1325 025a 8373     		strb	r3, [r0, #14]
1288:Src/main.c    ****         can.id = 0xC0;
 1326              		.loc 1 1288 0
 1327 025c 384B     		ldr	r3, .L92+40
 1328              	.LVL144:
 1329 025e 83FB0523 		smull	r2, r3, r3, r5
 1330 0262 ED17     		asrs	r5, r5, #31
 1331 0264 C5EBA305 		rsb	r5, r5, r3, asr #2
 1332 0268 C573     		strb	r5, [r0, #15]
1289:Src/main.c    ****         can.size = 8;
 1333              		.loc 1 1289 0
 1334 026a C023     		movs	r3, #192
 1335 026c 0360     		str	r3, [r0]
1290:Src/main.c    ****         CAN_Send(&can);
 1336              		.loc 1 1290 0
 1337 026e 0823     		movs	r3, #8
 1338 0270 4360     		str	r3, [r0, #4]
1291:Src/main.c    **** 
 1339              		.loc 1 1291 0
 1340 0272 FFF7FEFF 		bl	CAN_Send
 1341              	.LVL145:
1296:Src/main.c    ****     }
 1342              		.loc 1 1296 0
 1343 0276 0420     		movs	r0, #4
 1344 0278 EFE6     		b	.L67
 1345              	.LVL146:
 1346              	.L83:
 1347              	.LBE13:
1306:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
 1348              		.loc 1 1306 0
 1349 027a 2D48     		ldr	r0, .L92+24
 1350              	.LVL147:
 1351 027c 0223     		movs	r3, #2
 1352 027e 0372     		strb	r3, [r0, #8]
1307:Src/main.c    ****             can.dataTx[2] = 0;
 1353              		.loc 1 1307 0
 1354 0280 304B     		ldr	r3, .L92+44
ARM GAS  /tmp/cc7Pcclv.s 			page 51


 1355 0282 1B68     		ldr	r3, [r3]
 1356 0284 4372     		strb	r3, [r0, #9]
1308:Src/main.c    ****             can.dataTx[3] = 0;
 1357              		.loc 1 1308 0
 1358 0286 0023     		movs	r3, #0
 1359 0288 8372     		strb	r3, [r0, #10]
1309:Src/main.c    ****             can.dataTx[4] = 0;
 1360              		.loc 1 1309 0
 1361 028a C372     		strb	r3, [r0, #11]
1310:Src/main.c    ****             can.dataTx[5] = 0;
 1362              		.loc 1 1310 0
 1363 028c 0373     		strb	r3, [r0, #12]
1311:Src/main.c    ****             can.dataTx[6] = 0;
 1364              		.loc 1 1311 0
 1365 028e 4373     		strb	r3, [r0, #13]
1312:Src/main.c    ****             can.dataTx[7] = 0;
 1366              		.loc 1 1312 0
 1367 0290 8373     		strb	r3, [r0, #14]
1313:Src/main.c    ****             can.id = 0xC0;
 1368              		.loc 1 1313 0
 1369 0292 C373     		strb	r3, [r0, #15]
1314:Src/main.c    ****             can.size = 8;
 1370              		.loc 1 1314 0
 1371 0294 C023     		movs	r3, #192
 1372 0296 0360     		str	r3, [r0]
1315:Src/main.c    ****             CAN_Send(&can);
 1373              		.loc 1 1315 0
 1374 0298 0823     		movs	r3, #8
 1375 029a 4360     		str	r3, [r0, #4]
1316:Src/main.c    **** 
 1376              		.loc 1 1316 0
 1377 029c FFF7FEFF 		bl	CAN_Send
 1378              	.LVL148:
1318:Src/main.c    ****         }
 1379              		.loc 1 1318 0
 1380 02a0 0520     		movs	r0, #5
 1381 02a2 E9E6     		b	.L68
 1382              	.LVL149:
 1383              	.L84:
1327:Src/main.c    ****         can.dataTx[1] = gps_main.latitude_i_h / 256;
 1384              		.loc 1 1327 0
 1385 02a4 1022     		movs	r2, #16
 1386              	.LVL150:
 1387 02a6 224B     		ldr	r3, .L92+24
 1388 02a8 1A72     		strb	r2, [r3, #8]
1328:Src/main.c    ****         can.dataTx[2] = gps_main.latitude_i_h % 256;
 1389              		.loc 1 1328 0
 1390 02aa 274B     		ldr	r3, .L92+48
 1391 02ac 5B6A     		ldr	r3, [r3, #36]
 1392 02ae 1A46     		mov	r2, r3
 1393 02b0 002B     		cmp	r3, #0
 1394 02b2 2EDB     		blt	.L86
 1395              	.L70:
 1396 02b4 1212     		asrs	r2, r2, #8
 1397 02b6 1E49     		ldr	r1, .L92+24
 1398 02b8 4A72     		strb	r2, [r1, #9]
1329:Src/main.c    ****         can.dataTx[3] = gps_main.latitude_i_l / 256;
ARM GAS  /tmp/cc7Pcclv.s 			page 52


 1399              		.loc 1 1329 0
 1400 02ba 5A42     		rsbs	r2, r3, #0
 1401 02bc DBB2     		uxtb	r3, r3
 1402 02be D2B2     		uxtb	r2, r2
 1403 02c0 58BF     		it	pl
 1404 02c2 5342     		rsbpl	r3, r2, #0
 1405 02c4 8B72     		strb	r3, [r1, #10]
1330:Src/main.c    ****         can.dataTx[4] = gps_main.latitude_i_l % 256;
 1406              		.loc 1 1330 0
 1407 02c6 204B     		ldr	r3, .L92+48
 1408 02c8 9B6A     		ldr	r3, [r3, #40]
 1409 02ca 1A46     		mov	r2, r3
 1410 02cc 002B     		cmp	r3, #0
 1411 02ce 3FDB     		blt	.L87
 1412              	.L71:
 1413 02d0 1212     		asrs	r2, r2, #8
 1414 02d2 1749     		ldr	r1, .L92+24
 1415 02d4 CA72     		strb	r2, [r1, #11]
1331:Src/main.c    ****         can.dataTx[5] = (int)gps_main.latitude_o;
 1416              		.loc 1 1331 0
 1417 02d6 5A42     		rsbs	r2, r3, #0
 1418 02d8 DBB2     		uxtb	r3, r3
 1419 02da D2B2     		uxtb	r2, r2
 1420 02dc 58BF     		it	pl
 1421 02de 5342     		rsbpl	r3, r2, #0
 1422 02e0 0B73     		strb	r3, [r1, #12]
1332:Src/main.c    ****         can.dataTx[6] = gps_main.speed_i / 256;
 1423              		.loc 1 1332 0
 1424 02e2 1A4B     		ldr	r3, .L92+52
 1425 02e4 4B73     		strb	r3, [r1, #13]
1333:Src/main.c    ****         can.dataTx[7] = gps_main.speed_i % 256;
 1426              		.loc 1 1333 0
 1427 02e6 53F8143C 		ldr	r3, [r3, #-20]
 1428 02ea 1A46     		mov	r2, r3
 1429 02ec 002B     		cmp	r3, #0
 1430 02ee 32DB     		blt	.L88
 1431              	.L72:
 1432 02f0 1212     		asrs	r2, r2, #8
 1433 02f2 0F48     		ldr	r0, .L92+24
 1434              	.LVL151:
 1435 02f4 8273     		strb	r2, [r0, #14]
1334:Src/main.c    ****         can.id = 0xD0;
 1436              		.loc 1 1334 0
 1437 02f6 5A42     		rsbs	r2, r3, #0
 1438 02f8 DBB2     		uxtb	r3, r3
 1439 02fa D2B2     		uxtb	r2, r2
 1440 02fc 58BF     		it	pl
 1441 02fe 5342     		rsbpl	r3, r2, #0
 1442 0300 C373     		strb	r3, [r0, #15]
1335:Src/main.c    ****         can.size = 8;
 1443              		.loc 1 1335 0
 1444 0302 D023     		movs	r3, #208
 1445 0304 0360     		str	r3, [r0]
1336:Src/main.c    ****         CAN_Send(&can);
 1446              		.loc 1 1336 0
 1447 0306 0823     		movs	r3, #8
 1448 0308 4360     		str	r3, [r0, #4]
ARM GAS  /tmp/cc7Pcclv.s 			page 53


1337:Src/main.c    **** 
 1449              		.loc 1 1337 0
 1450 030a FFF7FEFF 		bl	CAN_Send
 1451              	.LVL152:
1339:Src/main.c    ****     }
 1452              		.loc 1 1339 0
 1453 030e 0620     		movs	r0, #6
 1454 0310 BEE6     		b	.L69
 1455              	.LVL153:
 1456              	.L86:
1328:Src/main.c    ****         can.dataTx[2] = gps_main.latitude_i_h % 256;
 1457              		.loc 1 1328 0
 1458 0312 03F1FF02 		add	r2, r3, #255
 1459 0316 CDE7     		b	.L70
 1460              	.L93:
 1461              		.align	3
 1462              	.L92:
 1463 0318 CDCCCCCC 		.word	3435973837
 1464 031c CCCC0C40 		.word	1074580684
 1465 0320 1F85EB51 		.word	1374389535
 1466 0324 00000000 		.word	.LANCHOR1
 1467 0328 00000000 		.word	enc
 1468 032c 00005940 		.word	1079574528
 1469 0330 00000000 		.word	can
 1470 0334 00000000 		.word	accel
 1471 0338 00000000 		.word	gyro
 1472 033c 00002440 		.word	1076101120
 1473 0340 67666666 		.word	1717986919
 1474 0344 00000000 		.word	pot_2
 1475 0348 00000000 		.word	gps_main
 1476 034c 1C000000 		.word	gps_main+28
 1477              	.L87:
1330:Src/main.c    ****         can.dataTx[4] = gps_main.latitude_i_l % 256;
 1478              		.loc 1 1330 0
 1479 0350 03F1FF02 		add	r2, r3, #255
 1480 0354 BCE7     		b	.L71
 1481              	.L88:
1333:Src/main.c    ****         can.dataTx[7] = gps_main.speed_i % 256;
 1482              		.loc 1 1333 0
 1483 0356 03F1FF02 		add	r2, r3, #255
 1484 035a C9E7     		b	.L72
 1485              	.LVL154:
 1486              	.L85:
1347:Src/main.c    ****         can.dataTx[1] = gps_main.longitude_i_h / 256;
 1487              		.loc 1 1347 0
 1488 035c 1122     		movs	r2, #17
 1489 035e 1F4B     		ldr	r3, .L94
 1490 0360 1A72     		strb	r2, [r3, #8]
1348:Src/main.c    ****         can.dataTx[2] = gps_main.longitude_i_h % 256;
 1491              		.loc 1 1348 0
 1492 0362 1F4B     		ldr	r3, .L94+4
 1493 0364 5B6C     		ldr	r3, [r3, #68]
 1494 0366 1A46     		mov	r2, r3
 1495 0368 002B     		cmp	r3, #0
 1496 036a 2DDB     		blt	.L89
 1497              	.L74:
 1498 036c 1212     		asrs	r2, r2, #8
ARM GAS  /tmp/cc7Pcclv.s 			page 54


 1499 036e 1B49     		ldr	r1, .L94
 1500 0370 4A72     		strb	r2, [r1, #9]
1349:Src/main.c    ****         can.dataTx[3] = gps_main.longitude_i_l / 256;
 1501              		.loc 1 1349 0
 1502 0372 5A42     		rsbs	r2, r3, #0
 1503 0374 DBB2     		uxtb	r3, r3
 1504 0376 D2B2     		uxtb	r2, r2
 1505 0378 58BF     		it	pl
 1506 037a 5342     		rsbpl	r3, r2, #0
 1507 037c 8B72     		strb	r3, [r1, #10]
1350:Src/main.c    ****         can.dataTx[4] = gps_main.longitude_i_l % 256;
 1508              		.loc 1 1350 0
 1509 037e 184B     		ldr	r3, .L94+4
 1510 0380 9B6C     		ldr	r3, [r3, #72]
 1511 0382 1A46     		mov	r2, r3
 1512 0384 002B     		cmp	r3, #0
 1513 0386 22DB     		blt	.L90
 1514              	.L75:
 1515 0388 1212     		asrs	r2, r2, #8
 1516 038a 1449     		ldr	r1, .L94
 1517 038c CA72     		strb	r2, [r1, #11]
1351:Src/main.c    ****         can.dataTx[5] = (int)gps_main.longitude_o;
 1518              		.loc 1 1351 0
 1519 038e 5A42     		rsbs	r2, r3, #0
 1520 0390 DBB2     		uxtb	r3, r3
 1521 0392 D2B2     		uxtb	r2, r2
 1522 0394 58BF     		it	pl
 1523 0396 5342     		rsbpl	r3, r2, #0
 1524 0398 0B73     		strb	r3, [r1, #12]
1352:Src/main.c    ****         can.dataTx[6] = gps_main.altitude_i / 256;
 1525              		.loc 1 1352 0
 1526 039a 124B     		ldr	r3, .L94+8
 1527 039c 4B73     		strb	r3, [r1, #13]
1353:Src/main.c    ****         can.dataTx[7] = gps_main.altitude_i % 256;
 1528              		.loc 1 1353 0
 1529 039e 9B69     		ldr	r3, [r3, #24]
 1530 03a0 1A46     		mov	r2, r3
 1531 03a2 002B     		cmp	r3, #0
 1532 03a4 16DB     		blt	.L91
 1533              	.L76:
 1534 03a6 1212     		asrs	r2, r2, #8
 1535 03a8 0C48     		ldr	r0, .L94
 1536              	.LVL155:
 1537 03aa 8273     		strb	r2, [r0, #14]
1354:Src/main.c    ****         can.id = 0xD0;
 1538              		.loc 1 1354 0
 1539 03ac 5A42     		rsbs	r2, r3, #0
 1540 03ae DBB2     		uxtb	r3, r3
 1541 03b0 D2B2     		uxtb	r2, r2
 1542 03b2 58BF     		it	pl
 1543 03b4 5342     		rsbpl	r3, r2, #0
 1544 03b6 C373     		strb	r3, [r0, #15]
1355:Src/main.c    ****         can.size = 8;
 1545              		.loc 1 1355 0
 1546 03b8 D023     		movs	r3, #208
 1547 03ba 0360     		str	r3, [r0]
1356:Src/main.c    ****         CAN_Send(&can);
ARM GAS  /tmp/cc7Pcclv.s 			page 55


 1548              		.loc 1 1356 0
 1549 03bc 0823     		movs	r3, #8
 1550 03be 4360     		str	r3, [r0, #4]
1357:Src/main.c    ****         
 1551              		.loc 1 1357 0
 1552 03c0 FFF7FEFF 		bl	CAN_Send
 1553              	.LVL156:
1359:Src/main.c    ****     }
 1554              		.loc 1 1359 0
 1555 03c4 0720     		movs	r0, #7
1363:Src/main.c    **** }
 1556              		.loc 1 1363 0
 1557 03c6 6EE6     		b	.L63
 1558              	.LVL157:
 1559              	.L89:
1348:Src/main.c    ****         can.dataTx[2] = gps_main.longitude_i_h % 256;
 1560              		.loc 1 1348 0
 1561 03c8 03F1FF02 		add	r2, r3, #255
 1562 03cc CEE7     		b	.L74
 1563              	.L90:
1350:Src/main.c    ****         can.dataTx[4] = gps_main.longitude_i_l % 256;
 1564              		.loc 1 1350 0
 1565 03ce 03F1FF02 		add	r2, r3, #255
 1566 03d2 D9E7     		b	.L75
 1567              	.L91:
1353:Src/main.c    ****         can.dataTx[7] = gps_main.altitude_i % 256;
 1568              		.loc 1 1353 0
 1569 03d4 03F1FF02 		add	r2, r3, #255
 1570 03d8 E5E7     		b	.L76
 1571              	.L95:
 1572 03da 00BF     		.align	2
 1573              	.L94:
 1574 03dc 00000000 		.word	can
 1575 03e0 00000000 		.word	gps_main
 1576 03e4 3C000000 		.word	gps_main+60
 1577              		.cfi_endproc
 1578              	.LFE154:
 1580              		.section	.text.Error_Handler,"ax",%progbits
 1581              		.align	1
 1582              		.global	Error_Handler
 1583              		.syntax unified
 1584              		.thumb
 1585              		.thumb_func
 1586              		.fpu fpv4-sp-d16
 1588              	Error_Handler:
 1589              	.LFB155:
1365:Src/main.c    **** 
1366:Src/main.c    **** /* USER CODE END 4 */
1367:Src/main.c    **** 
1368:Src/main.c    **** /**
1369:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1370:Src/main.c    ****   * @retval None
1371:Src/main.c    ****   */
1372:Src/main.c    **** void Error_Handler(void)
1373:Src/main.c    **** {
 1590              		.loc 1 1373 0
 1591              		.cfi_startproc
ARM GAS  /tmp/cc7Pcclv.s 			page 56


 1592              		@ Volatile: function does not return.
 1593              		@ args = 0, pretend = 0, frame = 0
 1594              		@ frame_needed = 0, uses_anonymous_args = 0
 1595 0000 08B5     		push	{r3, lr}
 1596              	.LCFI15:
 1597              		.cfi_def_cfa_offset 8
 1598              		.cfi_offset 3, -8
 1599              		.cfi_offset 14, -4
 1600              	.L97:
1374:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1375:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1376:Src/main.c    ****     while (1)
1377:Src/main.c    ****     {
1378:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 1601              		.loc 1 1378 0 discriminator 1
 1602 0002 074C     		ldr	r4, .L99
 1603 0004 0A23     		movs	r3, #10
 1604 0006 0F22     		movs	r2, #15
 1605 0008 0649     		ldr	r1, .L99+4
 1606 000a 2046     		mov	r0, r4
 1607 000c FFF7FEFF 		bl	HAL_UART_Transmit
 1608              	.LVL158:
1379:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t *)file, strlen(file), 10);
1380:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 1609              		.loc 1 1380 0 discriminator 1
 1610 0010 0A23     		movs	r3, #10
 1611 0012 0222     		movs	r2, #2
 1612 0014 0449     		ldr	r1, .L99+8
 1613 0016 2046     		mov	r0, r4
 1614 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 1615              	.LVL159:
 1616 001c F1E7     		b	.L97
 1617              	.L100:
 1618 001e 00BF     		.align	2
 1619              	.L99:
 1620 0020 00000000 		.word	huart2
 1621 0024 00000000 		.word	.LC0
 1622 0028 10000000 		.word	.LC1
 1623              		.cfi_endproc
 1624              	.LFE155:
 1626              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1627              		.align	1
 1628              		.syntax unified
 1629              		.thumb
 1630              		.thumb_func
 1631              		.fpu fpv4-sp-d16
 1633              	MX_USART2_UART_Init:
 1634              	.LFB147:
 935:Src/main.c    **** 
 1635              		.loc 1 935 0
 1636              		.cfi_startproc
 1637              		@ args = 0, pretend = 0, frame = 0
 1638              		@ frame_needed = 0, uses_anonymous_args = 0
 1639 0000 08B5     		push	{r3, lr}
 1640              	.LCFI16:
 1641              		.cfi_def_cfa_offset 8
 1642              		.cfi_offset 3, -8
ARM GAS  /tmp/cc7Pcclv.s 			page 57


 1643              		.cfi_offset 14, -4
 944:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 1644              		.loc 1 944 0
 1645 0002 0948     		ldr	r0, .L105
 1646 0004 094B     		ldr	r3, .L105+4
 1647 0006 0360     		str	r3, [r0]
 945:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1648              		.loc 1 945 0
 1649 0008 094B     		ldr	r3, .L105+8
 1650 000a 4360     		str	r3, [r0, #4]
 946:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 1651              		.loc 1 946 0
 1652 000c 0023     		movs	r3, #0
 1653 000e 8360     		str	r3, [r0, #8]
 947:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 1654              		.loc 1 947 0
 1655 0010 C360     		str	r3, [r0, #12]
 948:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 1656              		.loc 1 948 0
 1657 0012 0361     		str	r3, [r0, #16]
 949:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1658              		.loc 1 949 0
 1659 0014 0C22     		movs	r2, #12
 1660 0016 4261     		str	r2, [r0, #20]
 950:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1661              		.loc 1 950 0
 1662 0018 8361     		str	r3, [r0, #24]
 951:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 1663              		.loc 1 951 0
 1664 001a C361     		str	r3, [r0, #28]
 952:Src/main.c    ****     {
 1665              		.loc 1 952 0
 1666 001c FFF7FEFF 		bl	HAL_UART_Init
 1667              	.LVL160:
 1668 0020 00B9     		cbnz	r0, .L104
 1669 0022 08BD     		pop	{r3, pc}
 1670              	.L104:
 954:Src/main.c    ****     }
 1671              		.loc 1 954 0
 1672 0024 FFF7FEFF 		bl	Error_Handler
 1673              	.LVL161:
 1674              	.L106:
 1675              		.align	2
 1676              	.L105:
 1677 0028 00000000 		.word	huart2
 1678 002c 00440040 		.word	1073759232
 1679 0030 10552200 		.word	2250000
 1680              		.cfi_endproc
 1681              	.LFE147:
 1683              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1684              		.align	1
 1685              		.syntax unified
 1686              		.thumb
 1687              		.thumb_func
 1688              		.fpu fpv4-sp-d16
 1690              	MX_CAN1_Init:
 1691              	.LFB136:
ARM GAS  /tmp/cc7Pcclv.s 			page 58


 513:Src/main.c    **** 
 1692              		.loc 1 513 0
 1693              		.cfi_startproc
 1694              		@ args = 0, pretend = 0, frame = 0
 1695              		@ frame_needed = 0, uses_anonymous_args = 0
 1696 0000 08B5     		push	{r3, lr}
 1697              	.LCFI17:
 1698              		.cfi_def_cfa_offset 8
 1699              		.cfi_offset 3, -8
 1700              		.cfi_offset 14, -4
 522:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 1701              		.loc 1 522 0
 1702 0002 0D48     		ldr	r0, .L111
 1703 0004 0D4B     		ldr	r3, .L111+4
 1704 0006 0360     		str	r3, [r0]
 523:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 1705              		.loc 1 523 0
 1706 0008 0223     		movs	r3, #2
 1707 000a 4360     		str	r3, [r0, #4]
 524:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1708              		.loc 1 524 0
 1709 000c 0023     		movs	r3, #0
 1710 000e 8360     		str	r3, [r0, #8]
 525:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 1711              		.loc 1 525 0
 1712 0010 C360     		str	r3, [r0, #12]
 526:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 1713              		.loc 1 526 0
 1714 0012 4FF43022 		mov	r2, #720896
 1715 0016 0261     		str	r2, [r0, #16]
 527:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 1716              		.loc 1 527 0
 1717 0018 4FF48002 		mov	r2, #4194304
 1718 001c 4261     		str	r2, [r0, #20]
 528:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 1719              		.loc 1 528 0
 1720 001e 0376     		strb	r3, [r0, #24]
 529:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 1721              		.loc 1 529 0
 1722 0020 4376     		strb	r3, [r0, #25]
 530:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 1723              		.loc 1 530 0
 1724 0022 0122     		movs	r2, #1
 1725 0024 8276     		strb	r2, [r0, #26]
 531:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 1726              		.loc 1 531 0
 1727 0026 C376     		strb	r3, [r0, #27]
 532:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 1728              		.loc 1 532 0
 1729 0028 0377     		strb	r3, [r0, #28]
 533:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1730              		.loc 1 533 0
 1731 002a 4377     		strb	r3, [r0, #29]
 534:Src/main.c    ****     {
 1732              		.loc 1 534 0
 1733 002c FFF7FEFF 		bl	HAL_CAN_Init
 1734              	.LVL162:
ARM GAS  /tmp/cc7Pcclv.s 			page 59


 1735 0030 00B9     		cbnz	r0, .L110
 1736 0032 08BD     		pop	{r3, pc}
 1737              	.L110:
 536:Src/main.c    ****     }
 1738              		.loc 1 536 0
 1739 0034 FFF7FEFF 		bl	Error_Handler
 1740              	.LVL163:
 1741              	.L112:
 1742              		.align	2
 1743              	.L111:
 1744 0038 00000000 		.word	hcan1
 1745 003c 00640040 		.word	1073767424
 1746              		.cfi_endproc
 1747              	.LFE136:
 1749              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1750              		.align	1
 1751              		.syntax unified
 1752              		.thumb
 1753              		.thumb_func
 1754              		.fpu fpv4-sp-d16
 1756              	MX_SPI1_Init:
 1757              	.LFB137:
 549:Src/main.c    **** 
 1758              		.loc 1 549 0
 1759              		.cfi_startproc
 1760              		@ args = 0, pretend = 0, frame = 0
 1761              		@ frame_needed = 0, uses_anonymous_args = 0
 1762 0000 08B5     		push	{r3, lr}
 1763              	.LCFI18:
 1764              		.cfi_def_cfa_offset 8
 1765              		.cfi_offset 3, -8
 1766              		.cfi_offset 14, -4
 559:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 1767              		.loc 1 559 0
 1768 0002 0D48     		ldr	r0, .L117
 1769 0004 0D4B     		ldr	r3, .L117+4
 1770 0006 0360     		str	r3, [r0]
 560:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1771              		.loc 1 560 0
 1772 0008 4FF48273 		mov	r3, #260
 1773 000c 4360     		str	r3, [r0, #4]
 561:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1774              		.loc 1 561 0
 1775 000e 0023     		movs	r3, #0
 1776 0010 8360     		str	r3, [r0, #8]
 562:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1777              		.loc 1 562 0
 1778 0012 C360     		str	r3, [r0, #12]
 563:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1779              		.loc 1 563 0
 1780 0014 0361     		str	r3, [r0, #16]
 564:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 1781              		.loc 1 564 0
 1782 0016 4361     		str	r3, [r0, #20]
 565:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1783              		.loc 1 565 0
 1784 0018 4FF40072 		mov	r2, #512
ARM GAS  /tmp/cc7Pcclv.s 			page 60


 1785 001c 8261     		str	r2, [r0, #24]
 566:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1786              		.loc 1 566 0
 1787 001e C361     		str	r3, [r0, #28]
 567:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1788              		.loc 1 567 0
 1789 0020 0362     		str	r3, [r0, #32]
 568:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1790              		.loc 1 568 0
 1791 0022 4362     		str	r3, [r0, #36]
 569:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 1792              		.loc 1 569 0
 1793 0024 8362     		str	r3, [r0, #40]
 570:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1794              		.loc 1 570 0
 1795 0026 0A23     		movs	r3, #10
 1796 0028 C362     		str	r3, [r0, #44]
 571:Src/main.c    ****     {
 1797              		.loc 1 571 0
 1798 002a FFF7FEFF 		bl	HAL_SPI_Init
 1799              	.LVL164:
 1800 002e 00B9     		cbnz	r0, .L116
 1801 0030 08BD     		pop	{r3, pc}
 1802              	.L116:
 573:Src/main.c    ****     }
 1803              		.loc 1 573 0
 1804 0032 FFF7FEFF 		bl	Error_Handler
 1805              	.LVL165:
 1806              	.L118:
 1807 0036 00BF     		.align	2
 1808              	.L117:
 1809 0038 00000000 		.word	hspi1
 1810 003c 00300140 		.word	1073819648
 1811              		.cfi_endproc
 1812              	.LFE137:
 1814              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1815              		.align	1
 1816              		.syntax unified
 1817              		.thumb
 1818              		.thumb_func
 1819              		.fpu fpv4-sp-d16
 1821              	MX_ADC1_Init:
 1822              	.LFB135:
 464:Src/main.c    **** 
 1823              		.loc 1 464 0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 16
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827 0000 00B5     		push	{lr}
 1828              	.LCFI19:
 1829              		.cfi_def_cfa_offset 4
 1830              		.cfi_offset 14, -4
 1831 0002 85B0     		sub	sp, sp, #20
 1832              	.LCFI20:
 1833              		.cfi_def_cfa_offset 24
 470:Src/main.c    **** 
 1834              		.loc 1 470 0
ARM GAS  /tmp/cc7Pcclv.s 			page 61


 1835 0004 0023     		movs	r3, #0
 1836 0006 0093     		str	r3, [sp]
 1837 0008 0193     		str	r3, [sp, #4]
 1838 000a 0293     		str	r3, [sp, #8]
 1839 000c 0393     		str	r3, [sp, #12]
 477:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1840              		.loc 1 477 0
 1841 000e 1348     		ldr	r0, .L125
 1842 0010 134A     		ldr	r2, .L125+4
 1843 0012 0260     		str	r2, [r0]
 478:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1844              		.loc 1 478 0
 1845 0014 4360     		str	r3, [r0, #4]
 479:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 1846              		.loc 1 479 0
 1847 0016 8360     		str	r3, [r0, #8]
 480:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 1848              		.loc 1 480 0
 1849 0018 0122     		movs	r2, #1
 1850 001a 0261     		str	r2, [r0, #16]
 481:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 1851              		.loc 1 481 0
 1852 001c 0276     		strb	r2, [r0, #24]
 482:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1853              		.loc 1 482 0
 1854 001e 80F82030 		strb	r3, [r0, #32]
 483:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1855              		.loc 1 483 0
 1856 0022 C362     		str	r3, [r0, #44]
 484:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1857              		.loc 1 484 0
 1858 0024 0F49     		ldr	r1, .L125+8
 1859 0026 8162     		str	r1, [r0, #40]
 485:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 1860              		.loc 1 485 0
 1861 0028 C360     		str	r3, [r0, #12]
 486:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 1862              		.loc 1 486 0
 1863 002a C261     		str	r2, [r0, #28]
 487:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1864              		.loc 1 487 0
 1865 002c 80F83020 		strb	r2, [r0, #48]
 488:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1866              		.loc 1 488 0
 1867 0030 4261     		str	r2, [r0, #20]
 489:Src/main.c    ****     {
 1868              		.loc 1 489 0
 1869 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1870              	.LVL166:
 1871 0036 68B9     		cbnz	r0, .L123
 495:Src/main.c    ****     sConfig.Rank = 1;
 1872              		.loc 1 495 0
 1873 0038 0823     		movs	r3, #8
 1874 003a 0093     		str	r3, [sp]
 496:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1875              		.loc 1 496 0
 1876 003c 0123     		movs	r3, #1
ARM GAS  /tmp/cc7Pcclv.s 			page 62


 1877 003e 0193     		str	r3, [sp, #4]
 497:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1878              		.loc 1 497 0
 1879 0040 0023     		movs	r3, #0
 1880 0042 0293     		str	r3, [sp, #8]
 498:Src/main.c    ****     {
 1881              		.loc 1 498 0
 1882 0044 6946     		mov	r1, sp
 1883 0046 0548     		ldr	r0, .L125
 1884 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1885              	.LVL167:
 1886 004c 20B9     		cbnz	r0, .L124
 505:Src/main.c    **** 
 1887              		.loc 1 505 0
 1888 004e 05B0     		add	sp, sp, #20
 1889              	.LCFI21:
 1890              		.cfi_remember_state
 1891              		.cfi_def_cfa_offset 4
 1892              		@ sp needed
 1893 0050 5DF804FB 		ldr	pc, [sp], #4
 1894              	.L123:
 1895              	.LCFI22:
 1896              		.cfi_restore_state
 491:Src/main.c    ****     }
 1897              		.loc 1 491 0
 1898 0054 FFF7FEFF 		bl	Error_Handler
 1899              	.LVL168:
 1900              	.L124:
 500:Src/main.c    ****     }
 1901              		.loc 1 500 0
 1902 0058 FFF7FEFF 		bl	Error_Handler
 1903              	.LVL169:
 1904              	.L126:
 1905              		.align	2
 1906              	.L125:
 1907 005c 00000000 		.word	hadc1
 1908 0060 00200140 		.word	1073815552
 1909 0064 0100000F 		.word	251658241
 1910              		.cfi_endproc
 1911              	.LFE135:
 1913              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1914              		.align	1
 1915              		.syntax unified
 1916              		.thumb
 1917              		.thumb_func
 1918              		.fpu fpv4-sp-d16
 1920              	MX_USART1_UART_Init:
 1921              	.LFB146:
 903:Src/main.c    **** 
 1922              		.loc 1 903 0
 1923              		.cfi_startproc
 1924              		@ args = 0, pretend = 0, frame = 0
 1925              		@ frame_needed = 0, uses_anonymous_args = 0
 1926 0000 08B5     		push	{r3, lr}
 1927              	.LCFI23:
 1928              		.cfi_def_cfa_offset 8
 1929              		.cfi_offset 3, -8
ARM GAS  /tmp/cc7Pcclv.s 			page 63


 1930              		.cfi_offset 14, -4
 912:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 1931              		.loc 1 912 0
 1932 0002 0A48     		ldr	r0, .L131
 1933 0004 0A4B     		ldr	r3, .L131+4
 1934 0006 0360     		str	r3, [r0]
 913:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1935              		.loc 1 913 0
 1936 0008 4FF4E133 		mov	r3, #115200
 1937 000c 4360     		str	r3, [r0, #4]
 914:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 1938              		.loc 1 914 0
 1939 000e 0023     		movs	r3, #0
 1940 0010 8360     		str	r3, [r0, #8]
 915:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 1941              		.loc 1 915 0
 1942 0012 C360     		str	r3, [r0, #12]
 916:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 1943              		.loc 1 916 0
 1944 0014 0361     		str	r3, [r0, #16]
 917:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1945              		.loc 1 917 0
 1946 0016 0C22     		movs	r2, #12
 1947 0018 4261     		str	r2, [r0, #20]
 918:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1948              		.loc 1 918 0
 1949 001a 8361     		str	r3, [r0, #24]
 919:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 1950              		.loc 1 919 0
 1951 001c C361     		str	r3, [r0, #28]
 920:Src/main.c    ****     {
 1952              		.loc 1 920 0
 1953 001e FFF7FEFF 		bl	HAL_UART_Init
 1954              	.LVL170:
 1955 0022 00B9     		cbnz	r0, .L130
 1956 0024 08BD     		pop	{r3, pc}
 1957              	.L130:
 922:Src/main.c    ****     }
 1958              		.loc 1 922 0
 1959 0026 FFF7FEFF 		bl	Error_Handler
 1960              	.LVL171:
 1961              	.L132:
 1962 002a 00BF     		.align	2
 1963              	.L131:
 1964 002c 00000000 		.word	huart1
 1965 0030 00100140 		.word	1073811456
 1966              		.cfi_endproc
 1967              	.LFE146:
 1969              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1970              		.align	1
 1971              		.syntax unified
 1972              		.thumb
 1973              		.thumb_func
 1974              		.fpu fpv4-sp-d16
 1976              	MX_TIM2_Init:
 1977              	.LFB138:
 586:Src/main.c    **** 
ARM GAS  /tmp/cc7Pcclv.s 			page 64


 1978              		.loc 1 586 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 48
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982 0000 00B5     		push	{lr}
 1983              	.LCFI24:
 1984              		.cfi_def_cfa_offset 4
 1985              		.cfi_offset 14, -4
 1986 0002 8DB0     		sub	sp, sp, #52
 1987              	.LCFI25:
 1988              		.cfi_def_cfa_offset 56
 592:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 1989              		.loc 1 592 0
 1990 0004 0023     		movs	r3, #0
 1991 0006 0893     		str	r3, [sp, #32]
 1992 0008 0993     		str	r3, [sp, #36]
 1993 000a 0A93     		str	r3, [sp, #40]
 1994 000c 0B93     		str	r3, [sp, #44]
 593:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1995              		.loc 1 593 0
 1996 000e 0393     		str	r3, [sp, #12]
 1997 0010 0493     		str	r3, [sp, #16]
 1998 0012 0593     		str	r3, [sp, #20]
 1999 0014 0693     		str	r3, [sp, #24]
 2000 0016 0793     		str	r3, [sp, #28]
 594:Src/main.c    **** 
 2001              		.loc 1 594 0
 2002 0018 0193     		str	r3, [sp, #4]
 2003 001a 0293     		str	r3, [sp, #8]
 599:Src/main.c    ****     htim2.Init.Prescaler = 36;
 2004              		.loc 1 599 0
 2005 001c 1948     		ldr	r0, .L143
 2006 001e 4FF08042 		mov	r2, #1073741824
 2007 0022 0260     		str	r2, [r0]
 600:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 2008              		.loc 1 600 0
 2009 0024 2422     		movs	r2, #36
 2010 0026 4260     		str	r2, [r0, #4]
 601:Src/main.c    ****     htim2.Init.Period = 1000;
 2011              		.loc 1 601 0
 2012 0028 8360     		str	r3, [r0, #8]
 602:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2013              		.loc 1 602 0
 2014 002a 4FF47A72 		mov	r2, #1000
 2015 002e C260     		str	r2, [r0, #12]
 603:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2016              		.loc 1 603 0
 2017 0030 0361     		str	r3, [r0, #16]
 604:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 2018              		.loc 1 604 0
 2019 0032 8361     		str	r3, [r0, #24]
 605:Src/main.c    ****     {
 2020              		.loc 1 605 0
 2021 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2022              	.LVL172:
 2023 0038 D8B9     		cbnz	r0, .L139
 609:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
ARM GAS  /tmp/cc7Pcclv.s 			page 65


 2024              		.loc 1 609 0
 2025 003a 0CA9     		add	r1, sp, #48
 2026 003c 4FF48053 		mov	r3, #4096
 2027 0040 41F8103D 		str	r3, [r1, #-16]!
 610:Src/main.c    ****     {
 2028              		.loc 1 610 0
 2029 0044 0F48     		ldr	r0, .L143
 2030 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2031              	.LVL173:
 2032 004a A0B9     		cbnz	r0, .L140
 614:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 2033              		.loc 1 614 0
 2034 004c 0023     		movs	r3, #0
 2035 004e 0393     		str	r3, [sp, #12]
 615:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 2036              		.loc 1 615 0
 2037 0050 0493     		str	r3, [sp, #16]
 616:Src/main.c    ****     {
 2038              		.loc 1 616 0
 2039 0052 03A9     		add	r1, sp, #12
 2040 0054 0B48     		ldr	r0, .L143
 2041 0056 FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 2042              	.LVL174:
 2043 005a 70B9     		cbnz	r0, .L141
 620:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2044              		.loc 1 620 0
 2045 005c 0023     		movs	r3, #0
 2046 005e 0193     		str	r3, [sp, #4]
 621:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 2047              		.loc 1 621 0
 2048 0060 0293     		str	r3, [sp, #8]
 622:Src/main.c    ****     {
 2049              		.loc 1 622 0
 2050 0062 01A9     		add	r1, sp, #4
 2051 0064 0748     		ldr	r0, .L143
 2052 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2053              	.LVL175:
 2054 006a 40B9     		cbnz	r0, .L142
 629:Src/main.c    **** 
 2055              		.loc 1 629 0
 2056 006c 0DB0     		add	sp, sp, #52
 2057              	.LCFI26:
 2058              		.cfi_remember_state
 2059              		.cfi_def_cfa_offset 4
 2060              		@ sp needed
 2061 006e 5DF804FB 		ldr	pc, [sp], #4
 2062              	.L139:
 2063              	.LCFI27:
 2064              		.cfi_restore_state
 607:Src/main.c    ****     }
 2065              		.loc 1 607 0
 2066 0072 FFF7FEFF 		bl	Error_Handler
 2067              	.LVL176:
 2068              	.L140:
 612:Src/main.c    ****     }
 2069              		.loc 1 612 0
 2070 0076 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cc7Pcclv.s 			page 66


 2071              	.LVL177:
 2072              	.L141:
 618:Src/main.c    ****     }
 2073              		.loc 1 618 0
 2074 007a FFF7FEFF 		bl	Error_Handler
 2075              	.LVL178:
 2076              	.L142:
 624:Src/main.c    ****     }
 2077              		.loc 1 624 0
 2078 007e FFF7FEFF 		bl	Error_Handler
 2079              	.LVL179:
 2080              	.L144:
 2081 0082 00BF     		.align	2
 2082              	.L143:
 2083 0084 00000000 		.word	htim2
 2084              		.cfi_endproc
 2085              	.LFE138:
 2087              		.section	.text.MX_TIM3_Init,"ax",%progbits
 2088              		.align	1
 2089              		.syntax unified
 2090              		.thumb
 2091              		.thumb_func
 2092              		.fpu fpv4-sp-d16
 2094              	MX_TIM3_Init:
 2095              	.LFB139:
 637:Src/main.c    **** 
 2096              		.loc 1 637 0
 2097              		.cfi_startproc
 2098              		@ args = 0, pretend = 0, frame = 24
 2099              		@ frame_needed = 0, uses_anonymous_args = 0
 2100 0000 00B5     		push	{lr}
 2101              	.LCFI28:
 2102              		.cfi_def_cfa_offset 4
 2103              		.cfi_offset 14, -4
 2104 0002 87B0     		sub	sp, sp, #28
 2105              	.LCFI29:
 2106              		.cfi_def_cfa_offset 32
 643:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2107              		.loc 1 643 0
 2108 0004 0023     		movs	r3, #0
 2109 0006 0293     		str	r3, [sp, #8]
 2110 0008 0393     		str	r3, [sp, #12]
 2111 000a 0493     		str	r3, [sp, #16]
 2112 000c 0593     		str	r3, [sp, #20]
 644:Src/main.c    **** 
 2113              		.loc 1 644 0
 2114 000e 0093     		str	r3, [sp]
 2115 0010 0193     		str	r3, [sp, #4]
 649:Src/main.c    ****     htim3.Init.Prescaler = 18;
 2116              		.loc 1 649 0
 2117 0012 1448     		ldr	r0, .L153
 2118 0014 144A     		ldr	r2, .L153+4
 2119 0016 0260     		str	r2, [r0]
 650:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 2120              		.loc 1 650 0
 2121 0018 1222     		movs	r2, #18
 2122 001a 4260     		str	r2, [r0, #4]
ARM GAS  /tmp/cc7Pcclv.s 			page 67


 651:Src/main.c    ****     htim3.Init.Period = 65500;
 2123              		.loc 1 651 0
 2124 001c 8360     		str	r3, [r0, #8]
 652:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2125              		.loc 1 652 0
 2126 001e 4FF6DC72 		movw	r2, #65500
 2127 0022 C260     		str	r2, [r0, #12]
 653:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2128              		.loc 1 653 0
 2129 0024 0361     		str	r3, [r0, #16]
 654:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 2130              		.loc 1 654 0
 2131 0026 8361     		str	r3, [r0, #24]
 655:Src/main.c    ****     {
 2132              		.loc 1 655 0
 2133 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2134              	.LVL180:
 2135 002c 98B9     		cbnz	r0, .L150
 659:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 2136              		.loc 1 659 0
 2137 002e 06A9     		add	r1, sp, #24
 2138 0030 4FF48053 		mov	r3, #4096
 2139 0034 41F8103D 		str	r3, [r1, #-16]!
 660:Src/main.c    ****     {
 2140              		.loc 1 660 0
 2141 0038 0A48     		ldr	r0, .L153
 2142 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2143              	.LVL181:
 2144 003e 60B9     		cbnz	r0, .L151
 664:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2145              		.loc 1 664 0
 2146 0040 0023     		movs	r3, #0
 2147 0042 0093     		str	r3, [sp]
 665:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 2148              		.loc 1 665 0
 2149 0044 0193     		str	r3, [sp, #4]
 666:Src/main.c    ****     {
 2150              		.loc 1 666 0
 2151 0046 6946     		mov	r1, sp
 2152 0048 0648     		ldr	r0, .L153
 2153 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2154              	.LVL182:
 2155 004e 30B9     		cbnz	r0, .L152
 673:Src/main.c    **** 
 2156              		.loc 1 673 0
 2157 0050 07B0     		add	sp, sp, #28
 2158              	.LCFI30:
 2159              		.cfi_remember_state
 2160              		.cfi_def_cfa_offset 4
 2161              		@ sp needed
 2162 0052 5DF804FB 		ldr	pc, [sp], #4
 2163              	.L150:
 2164              	.LCFI31:
 2165              		.cfi_restore_state
 657:Src/main.c    ****     }
 2166              		.loc 1 657 0
 2167 0056 FFF7FEFF 		bl	Error_Handler
ARM GAS  /tmp/cc7Pcclv.s 			page 68


 2168              	.LVL183:
 2169              	.L151:
 662:Src/main.c    ****     }
 2170              		.loc 1 662 0
 2171 005a FFF7FEFF 		bl	Error_Handler
 2172              	.LVL184:
 2173              	.L152:
 668:Src/main.c    ****     }
 2174              		.loc 1 668 0
 2175 005e FFF7FEFF 		bl	Error_Handler
 2176              	.LVL185:
 2177              	.L154:
 2178 0062 00BF     		.align	2
 2179              	.L153:
 2180 0064 00000000 		.word	htim3
 2181 0068 00040040 		.word	1073742848
 2182              		.cfi_endproc
 2183              	.LFE139:
 2185              		.section	.text.MX_TIM4_Init,"ax",%progbits
 2186              		.align	1
 2187              		.syntax unified
 2188              		.thumb
 2189              		.thumb_func
 2190              		.fpu fpv4-sp-d16
 2192              	MX_TIM4_Init:
 2193              	.LFB140:
 681:Src/main.c    **** 
 2194              		.loc 1 681 0
 2195              		.cfi_startproc
 2196              		@ args = 0, pretend = 0, frame = 24
 2197              		@ frame_needed = 0, uses_anonymous_args = 0
 2198 0000 00B5     		push	{lr}
 2199              	.LCFI32:
 2200              		.cfi_def_cfa_offset 4
 2201              		.cfi_offset 14, -4
 2202 0002 87B0     		sub	sp, sp, #28
 2203              	.LCFI33:
 2204              		.cfi_def_cfa_offset 32
 687:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2205              		.loc 1 687 0
 2206 0004 0023     		movs	r3, #0
 2207 0006 0293     		str	r3, [sp, #8]
 2208 0008 0393     		str	r3, [sp, #12]
 2209 000a 0493     		str	r3, [sp, #16]
 2210 000c 0593     		str	r3, [sp, #20]
 688:Src/main.c    **** 
 2211              		.loc 1 688 0
 2212 000e 0093     		str	r3, [sp]
 2213 0010 0193     		str	r3, [sp, #4]
 693:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 2214              		.loc 1 693 0
 2215 0012 1448     		ldr	r0, .L163
 2216 0014 144A     		ldr	r2, .L163+4
 2217 0016 0260     		str	r2, [r0]
 694:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 2218              		.loc 1 694 0
 2219 0018 4FF46162 		mov	r2, #3600
ARM GAS  /tmp/cc7Pcclv.s 			page 69


 2220 001c 4260     		str	r2, [r0, #4]
 695:Src/main.c    ****     htim4.Init.Period = 2000;
 2221              		.loc 1 695 0
 2222 001e 8360     		str	r3, [r0, #8]
 696:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2223              		.loc 1 696 0
 2224 0020 4FF4FA62 		mov	r2, #2000
 2225 0024 C260     		str	r2, [r0, #12]
 697:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2226              		.loc 1 697 0
 2227 0026 0361     		str	r3, [r0, #16]
 698:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 2228              		.loc 1 698 0
 2229 0028 8361     		str	r3, [r0, #24]
 699:Src/main.c    ****     {
 2230              		.loc 1 699 0
 2231 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2232              	.LVL186:
 2233 002e 98B9     		cbnz	r0, .L160
 703:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2234              		.loc 1 703 0
 2235 0030 06A9     		add	r1, sp, #24
 2236 0032 4FF48053 		mov	r3, #4096
 2237 0036 41F8103D 		str	r3, [r1, #-16]!
 704:Src/main.c    ****     {
 2238              		.loc 1 704 0
 2239 003a 0A48     		ldr	r0, .L163
 2240 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2241              	.LVL187:
 2242 0040 60B9     		cbnz	r0, .L161
 708:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2243              		.loc 1 708 0
 2244 0042 0023     		movs	r3, #0
 2245 0044 0093     		str	r3, [sp]
 709:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2246              		.loc 1 709 0
 2247 0046 0193     		str	r3, [sp, #4]
 710:Src/main.c    ****     {
 2248              		.loc 1 710 0
 2249 0048 6946     		mov	r1, sp
 2250 004a 0648     		ldr	r0, .L163
 2251 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2252              	.LVL188:
 2253 0050 30B9     		cbnz	r0, .L162
 717:Src/main.c    **** 
 2254              		.loc 1 717 0
 2255 0052 07B0     		add	sp, sp, #28
 2256              	.LCFI34:
 2257              		.cfi_remember_state
 2258              		.cfi_def_cfa_offset 4
 2259              		@ sp needed
 2260 0054 5DF804FB 		ldr	pc, [sp], #4
 2261              	.L160:
 2262              	.LCFI35:
 2263              		.cfi_restore_state
 701:Src/main.c    ****     }
 2264              		.loc 1 701 0
ARM GAS  /tmp/cc7Pcclv.s 			page 70


 2265 0058 FFF7FEFF 		bl	Error_Handler
 2266              	.LVL189:
 2267              	.L161:
 706:Src/main.c    ****     }
 2268              		.loc 1 706 0
 2269 005c FFF7FEFF 		bl	Error_Handler
 2270              	.LVL190:
 2271              	.L162:
 712:Src/main.c    ****     }
 2272              		.loc 1 712 0
 2273 0060 FFF7FEFF 		bl	Error_Handler
 2274              	.LVL191:
 2275              	.L164:
 2276              		.align	2
 2277              	.L163:
 2278 0064 00000000 		.word	htim4
 2279 0068 00080040 		.word	1073743872
 2280              		.cfi_endproc
 2281              	.LFE140:
 2283              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2284              		.align	1
 2285              		.syntax unified
 2286              		.thumb
 2287              		.thumb_func
 2288              		.fpu fpv4-sp-d16
 2290              	MX_TIM5_Init:
 2291              	.LFB141:
 725:Src/main.c    **** 
 2292              		.loc 1 725 0
 2293              		.cfi_startproc
 2294              		@ args = 0, pretend = 0, frame = 24
 2295              		@ frame_needed = 0, uses_anonymous_args = 0
 2296 0000 00B5     		push	{lr}
 2297              	.LCFI36:
 2298              		.cfi_def_cfa_offset 4
 2299              		.cfi_offset 14, -4
 2300 0002 87B0     		sub	sp, sp, #28
 2301              	.LCFI37:
 2302              		.cfi_def_cfa_offset 32
 731:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2303              		.loc 1 731 0
 2304 0004 0023     		movs	r3, #0
 2305 0006 0293     		str	r3, [sp, #8]
 2306 0008 0393     		str	r3, [sp, #12]
 2307 000a 0493     		str	r3, [sp, #16]
 2308 000c 0593     		str	r3, [sp, #20]
 732:Src/main.c    **** 
 2309              		.loc 1 732 0
 2310 000e 0093     		str	r3, [sp]
 2311 0010 0193     		str	r3, [sp, #4]
 737:Src/main.c    ****     htim5.Init.Prescaler = 36;
 2312              		.loc 1 737 0
 2313 0012 1448     		ldr	r0, .L173
 2314 0014 144A     		ldr	r2, .L173+4
 2315 0016 0260     		str	r2, [r0]
 738:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2316              		.loc 1 738 0
ARM GAS  /tmp/cc7Pcclv.s 			page 71


 2317 0018 2422     		movs	r2, #36
 2318 001a 4260     		str	r2, [r0, #4]
 739:Src/main.c    ****     htim5.Init.Period = 2000;
 2319              		.loc 1 739 0
 2320 001c 8360     		str	r3, [r0, #8]
 740:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2321              		.loc 1 740 0
 2322 001e 4FF4FA62 		mov	r2, #2000
 2323 0022 C260     		str	r2, [r0, #12]
 741:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2324              		.loc 1 741 0
 2325 0024 0361     		str	r3, [r0, #16]
 742:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2326              		.loc 1 742 0
 2327 0026 8361     		str	r3, [r0, #24]
 743:Src/main.c    ****     {
 2328              		.loc 1 743 0
 2329 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2330              	.LVL192:
 2331 002c 98B9     		cbnz	r0, .L170
 747:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2332              		.loc 1 747 0
 2333 002e 06A9     		add	r1, sp, #24
 2334 0030 4FF48053 		mov	r3, #4096
 2335 0034 41F8103D 		str	r3, [r1, #-16]!
 748:Src/main.c    ****     {
 2336              		.loc 1 748 0
 2337 0038 0A48     		ldr	r0, .L173
 2338 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2339              	.LVL193:
 2340 003e 60B9     		cbnz	r0, .L171
 752:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2341              		.loc 1 752 0
 2342 0040 0023     		movs	r3, #0
 2343 0042 0093     		str	r3, [sp]
 753:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2344              		.loc 1 753 0
 2345 0044 0193     		str	r3, [sp, #4]
 754:Src/main.c    ****     {
 2346              		.loc 1 754 0
 2347 0046 6946     		mov	r1, sp
 2348 0048 0648     		ldr	r0, .L173
 2349 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2350              	.LVL194:
 2351 004e 30B9     		cbnz	r0, .L172
 761:Src/main.c    **** 
 2352              		.loc 1 761 0
 2353 0050 07B0     		add	sp, sp, #28
 2354              	.LCFI38:
 2355              		.cfi_remember_state
 2356              		.cfi_def_cfa_offset 4
 2357              		@ sp needed
 2358 0052 5DF804FB 		ldr	pc, [sp], #4
 2359              	.L170:
 2360              	.LCFI39:
 2361              		.cfi_restore_state
 745:Src/main.c    ****     }
ARM GAS  /tmp/cc7Pcclv.s 			page 72


 2362              		.loc 1 745 0
 2363 0056 FFF7FEFF 		bl	Error_Handler
 2364              	.LVL195:
 2365              	.L171:
 750:Src/main.c    ****     }
 2366              		.loc 1 750 0
 2367 005a FFF7FEFF 		bl	Error_Handler
 2368              	.LVL196:
 2369              	.L172:
 756:Src/main.c    ****     }
 2370              		.loc 1 756 0
 2371 005e FFF7FEFF 		bl	Error_Handler
 2372              	.LVL197:
 2373              	.L174:
 2374 0062 00BF     		.align	2
 2375              	.L173:
 2376 0064 00000000 		.word	htim5
 2377 0068 000C0040 		.word	1073744896
 2378              		.cfi_endproc
 2379              	.LFE141:
 2381              		.section	.text.MX_TIM6_Init,"ax",%progbits
 2382              		.align	1
 2383              		.syntax unified
 2384              		.thumb
 2385              		.thumb_func
 2386              		.fpu fpv4-sp-d16
 2388              	MX_TIM6_Init:
 2389              	.LFB142:
 769:Src/main.c    **** 
 2390              		.loc 1 769 0
 2391              		.cfi_startproc
 2392              		@ args = 0, pretend = 0, frame = 8
 2393              		@ frame_needed = 0, uses_anonymous_args = 0
 2394 0000 00B5     		push	{lr}
 2395              	.LCFI40:
 2396              		.cfi_def_cfa_offset 4
 2397              		.cfi_offset 14, -4
 2398 0002 83B0     		sub	sp, sp, #12
 2399              	.LCFI41:
 2400              		.cfi_def_cfa_offset 16
 775:Src/main.c    **** 
 2401              		.loc 1 775 0
 2402 0004 0023     		movs	r3, #0
 2403 0006 0093     		str	r3, [sp]
 2404 0008 0193     		str	r3, [sp, #4]
 780:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 2405              		.loc 1 780 0
 2406 000a 0E48     		ldr	r0, .L181
 2407 000c 0E4A     		ldr	r2, .L181+4
 2408 000e 0260     		str	r2, [r0]
 781:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2409              		.loc 1 781 0
 2410 0010 4FF46162 		mov	r2, #3600
 2411 0014 4260     		str	r2, [r0, #4]
 782:Src/main.c    ****     htim6.Init.Period = 2000;
 2412              		.loc 1 782 0
 2413 0016 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/cc7Pcclv.s 			page 73


 783:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2414              		.loc 1 783 0
 2415 0018 4FF4FA62 		mov	r2, #2000
 2416 001c C260     		str	r2, [r0, #12]
 784:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2417              		.loc 1 784 0
 2418 001e 8361     		str	r3, [r0, #24]
 785:Src/main.c    ****     {
 2419              		.loc 1 785 0
 2420 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2421              	.LVL198:
 2422 0024 50B9     		cbnz	r0, .L179
 789:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2423              		.loc 1 789 0
 2424 0026 0023     		movs	r3, #0
 2425 0028 0093     		str	r3, [sp]
 790:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2426              		.loc 1 790 0
 2427 002a 0193     		str	r3, [sp, #4]
 791:Src/main.c    ****     {
 2428              		.loc 1 791 0
 2429 002c 6946     		mov	r1, sp
 2430 002e 0548     		ldr	r0, .L181
 2431 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2432              	.LVL199:
 2433 0034 20B9     		cbnz	r0, .L180
 798:Src/main.c    **** 
 2434              		.loc 1 798 0
 2435 0036 03B0     		add	sp, sp, #12
 2436              	.LCFI42:
 2437              		.cfi_remember_state
 2438              		.cfi_def_cfa_offset 4
 2439              		@ sp needed
 2440 0038 5DF804FB 		ldr	pc, [sp], #4
 2441              	.L179:
 2442              	.LCFI43:
 2443              		.cfi_restore_state
 787:Src/main.c    ****     }
 2444              		.loc 1 787 0
 2445 003c FFF7FEFF 		bl	Error_Handler
 2446              	.LVL200:
 2447              	.L180:
 793:Src/main.c    ****     }
 2448              		.loc 1 793 0
 2449 0040 FFF7FEFF 		bl	Error_Handler
 2450              	.LVL201:
 2451              	.L182:
 2452              		.align	2
 2453              	.L181:
 2454 0044 00000000 		.word	htim6
 2455 0048 00100040 		.word	1073745920
 2456              		.cfi_endproc
 2457              	.LFE142:
 2459              		.section	.text.MX_TIM7_Init,"ax",%progbits
 2460              		.align	1
 2461              		.syntax unified
 2462              		.thumb
ARM GAS  /tmp/cc7Pcclv.s 			page 74


 2463              		.thumb_func
 2464              		.fpu fpv4-sp-d16
 2466              	MX_TIM7_Init:
 2467              	.LFB143:
 806:Src/main.c    **** 
 2468              		.loc 1 806 0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 8
 2471              		@ frame_needed = 0, uses_anonymous_args = 0
 2472 0000 00B5     		push	{lr}
 2473              	.LCFI44:
 2474              		.cfi_def_cfa_offset 4
 2475              		.cfi_offset 14, -4
 2476 0002 83B0     		sub	sp, sp, #12
 2477              	.LCFI45:
 2478              		.cfi_def_cfa_offset 16
 812:Src/main.c    **** 
 2479              		.loc 1 812 0
 2480 0004 0023     		movs	r3, #0
 2481 0006 0093     		str	r3, [sp]
 2482 0008 0193     		str	r3, [sp, #4]
 817:Src/main.c    ****     htim7.Init.Prescaler = 36;
 2483              		.loc 1 817 0
 2484 000a 0E48     		ldr	r0, .L189
 2485 000c 0E4A     		ldr	r2, .L189+4
 2486 000e 0260     		str	r2, [r0]
 818:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 2487              		.loc 1 818 0
 2488 0010 2422     		movs	r2, #36
 2489 0012 4260     		str	r2, [r0, #4]
 819:Src/main.c    ****     htim7.Init.Period = 6000;
 2490              		.loc 1 819 0
 2491 0014 8360     		str	r3, [r0, #8]
 820:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2492              		.loc 1 820 0
 2493 0016 41F27072 		movw	r2, #6000
 2494 001a C260     		str	r2, [r0, #12]
 821:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 2495              		.loc 1 821 0
 2496 001c 8361     		str	r3, [r0, #24]
 822:Src/main.c    ****     {
 2497              		.loc 1 822 0
 2498 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2499              	.LVL202:
 2500 0022 50B9     		cbnz	r0, .L187
 826:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2501              		.loc 1 826 0
 2502 0024 0023     		movs	r3, #0
 2503 0026 0093     		str	r3, [sp]
 827:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 2504              		.loc 1 827 0
 2505 0028 0193     		str	r3, [sp, #4]
 828:Src/main.c    ****     {
 2506              		.loc 1 828 0
 2507 002a 6946     		mov	r1, sp
 2508 002c 0548     		ldr	r0, .L189
 2509 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/cc7Pcclv.s 			page 75


 2510              	.LVL203:
 2511 0032 20B9     		cbnz	r0, .L188
 835:Src/main.c    **** 
 2512              		.loc 1 835 0
 2513 0034 03B0     		add	sp, sp, #12
 2514              	.LCFI46:
 2515              		.cfi_remember_state
 2516              		.cfi_def_cfa_offset 4
 2517              		@ sp needed
 2518 0036 5DF804FB 		ldr	pc, [sp], #4
 2519              	.L187:
 2520              	.LCFI47:
 2521              		.cfi_restore_state
 824:Src/main.c    ****     }
 2522              		.loc 1 824 0
 2523 003a FFF7FEFF 		bl	Error_Handler
 2524              	.LVL204:
 2525              	.L188:
 830:Src/main.c    ****     }
 2526              		.loc 1 830 0
 2527 003e FFF7FEFF 		bl	Error_Handler
 2528              	.LVL205:
 2529              	.L190:
 2530 0042 00BF     		.align	2
 2531              	.L189:
 2532 0044 00000000 		.word	htim7
 2533 0048 00140040 		.word	1073746944
 2534              		.cfi_endproc
 2535              	.LFE143:
 2537              		.section	.text.MX_TIM10_Init,"ax",%progbits
 2538              		.align	1
 2539              		.syntax unified
 2540              		.thumb
 2541              		.thumb_func
 2542              		.fpu fpv4-sp-d16
 2544              	MX_TIM10_Init:
 2545              	.LFB144:
 843:Src/main.c    **** 
 2546              		.loc 1 843 0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 0
 2549              		@ frame_needed = 0, uses_anonymous_args = 0
 2550 0000 08B5     		push	{r3, lr}
 2551              	.LCFI48:
 2552              		.cfi_def_cfa_offset 8
 2553              		.cfi_offset 3, -8
 2554              		.cfi_offset 14, -4
 852:Src/main.c    ****     htim10.Init.Prescaler = 72;
 2555              		.loc 1 852 0
 2556 0002 0948     		ldr	r0, .L195
 2557 0004 094B     		ldr	r3, .L195+4
 2558 0006 0360     		str	r3, [r0]
 853:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 2559              		.loc 1 853 0
 2560 0008 4823     		movs	r3, #72
 2561 000a 4360     		str	r3, [r0, #4]
 854:Src/main.c    ****     htim10.Init.Period = 1000;
ARM GAS  /tmp/cc7Pcclv.s 			page 76


 2562              		.loc 1 854 0
 2563 000c 0023     		movs	r3, #0
 2564 000e 8360     		str	r3, [r0, #8]
 855:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2565              		.loc 1 855 0
 2566 0010 4FF47A72 		mov	r2, #1000
 2567 0014 C260     		str	r2, [r0, #12]
 856:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2568              		.loc 1 856 0
 2569 0016 0361     		str	r3, [r0, #16]
 857:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 2570              		.loc 1 857 0
 2571 0018 8361     		str	r3, [r0, #24]
 858:Src/main.c    ****     {
 2572              		.loc 1 858 0
 2573 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2574              	.LVL206:
 2575 001e 00B9     		cbnz	r0, .L194
 2576 0020 08BD     		pop	{r3, pc}
 2577              	.L194:
 860:Src/main.c    ****     }
 2578              		.loc 1 860 0
 2579 0022 FFF7FEFF 		bl	Error_Handler
 2580              	.LVL207:
 2581              	.L196:
 2582 0026 00BF     		.align	2
 2583              	.L195:
 2584 0028 00000000 		.word	htim10
 2585 002c 00440140 		.word	1073824768
 2586              		.cfi_endproc
 2587              	.LFE144:
 2589              		.section	.text.MX_TIM11_Init,"ax",%progbits
 2590              		.align	1
 2591              		.syntax unified
 2592              		.thumb
 2593              		.thumb_func
 2594              		.fpu fpv4-sp-d16
 2596              	MX_TIM11_Init:
 2597              	.LFB145:
 873:Src/main.c    **** 
 2598              		.loc 1 873 0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 0
 2601              		@ frame_needed = 0, uses_anonymous_args = 0
 2602 0000 08B5     		push	{r3, lr}
 2603              	.LCFI49:
 2604              		.cfi_def_cfa_offset 8
 2605              		.cfi_offset 3, -8
 2606              		.cfi_offset 14, -4
 882:Src/main.c    ****     htim11.Init.Prescaler = 0;
 2607              		.loc 1 882 0
 2608 0002 0748     		ldr	r0, .L201
 2609 0004 074B     		ldr	r3, .L201+4
 2610 0006 0360     		str	r3, [r0]
 883:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 2611              		.loc 1 883 0
 2612 0008 0023     		movs	r3, #0
ARM GAS  /tmp/cc7Pcclv.s 			page 77


 2613 000a 4360     		str	r3, [r0, #4]
 884:Src/main.c    ****     htim11.Init.Period = 0;
 2614              		.loc 1 884 0
 2615 000c 8360     		str	r3, [r0, #8]
 885:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2616              		.loc 1 885 0
 2617 000e C360     		str	r3, [r0, #12]
 886:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2618              		.loc 1 886 0
 2619 0010 0361     		str	r3, [r0, #16]
 887:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 2620              		.loc 1 887 0
 2621 0012 8361     		str	r3, [r0, #24]
 888:Src/main.c    ****     {
 2622              		.loc 1 888 0
 2623 0014 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2624              	.LVL208:
 2625 0018 00B9     		cbnz	r0, .L200
 2626 001a 08BD     		pop	{r3, pc}
 2627              	.L200:
 890:Src/main.c    ****     }
 2628              		.loc 1 890 0
 2629 001c FFF7FEFF 		bl	Error_Handler
 2630              	.LVL209:
 2631              	.L202:
 2632              		.align	2
 2633              	.L201:
 2634 0020 00000000 		.word	htim11
 2635 0024 00480140 		.word	1073825792
 2636              		.cfi_endproc
 2637              	.LFE145:
 2639              		.section	.text.SystemClock_Config,"ax",%progbits
 2640              		.align	1
 2641              		.global	SystemClock_Config
 2642              		.syntax unified
 2643              		.thumb
 2644              		.thumb_func
 2645              		.fpu fpv4-sp-d16
 2647              	SystemClock_Config:
 2648              	.LFB133:
 380:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2649              		.loc 1 380 0
 2650              		.cfi_startproc
 2651              		@ args = 0, pretend = 0, frame = 80
 2652              		@ frame_needed = 0, uses_anonymous_args = 0
 2653 0000 00B5     		push	{lr}
 2654              	.LCFI50:
 2655              		.cfi_def_cfa_offset 4
 2656              		.cfi_offset 14, -4
 2657 0002 95B0     		sub	sp, sp, #84
 2658              	.LCFI51:
 2659              		.cfi_def_cfa_offset 88
 381:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2660              		.loc 1 381 0
 2661 0004 3422     		movs	r2, #52
 2662 0006 0021     		movs	r1, #0
 2663 0008 07A8     		add	r0, sp, #28
ARM GAS  /tmp/cc7Pcclv.s 			page 78


 2664 000a FFF7FEFF 		bl	memset
 2665              	.LVL210:
 382:Src/main.c    **** 
 2666              		.loc 1 382 0
 2667 000e 0023     		movs	r3, #0
 2668 0010 0293     		str	r3, [sp, #8]
 2669 0012 0393     		str	r3, [sp, #12]
 2670 0014 0493     		str	r3, [sp, #16]
 2671 0016 0593     		str	r3, [sp, #20]
 2672 0018 0693     		str	r3, [sp, #24]
 2673              	.LBB14:
 386:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2674              		.loc 1 386 0
 2675 001a 0093     		str	r3, [sp]
 2676 001c 204A     		ldr	r2, .L209
 2677 001e 116C     		ldr	r1, [r2, #64]
 2678 0020 41F08051 		orr	r1, r1, #268435456
 2679 0024 1164     		str	r1, [r2, #64]
 2680 0026 126C     		ldr	r2, [r2, #64]
 2681 0028 02F08052 		and	r2, r2, #268435456
 2682 002c 0092     		str	r2, [sp]
 2683 002e 009A     		ldr	r2, [sp]
 2684              	.LBE14:
 2685              	.LBB15:
 387:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 2686              		.loc 1 387 0
 2687 0030 0193     		str	r3, [sp, #4]
 2688 0032 1C4B     		ldr	r3, .L209+4
 2689 0034 1A68     		ldr	r2, [r3]
 2690 0036 42F44042 		orr	r2, r2, #49152
 2691 003a 1A60     		str	r2, [r3]
 2692 003c 1B68     		ldr	r3, [r3]
 2693 003e 03F44043 		and	r3, r3, #49152
 2694 0042 0193     		str	r3, [sp, #4]
 2695 0044 019B     		ldr	r3, [sp, #4]
 2696              	.LBE15:
 390:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 2697              		.loc 1 390 0
 2698 0046 0123     		movs	r3, #1
 2699 0048 0793     		str	r3, [sp, #28]
 391:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2700              		.loc 1 391 0
 2701 004a 4FF4A023 		mov	r3, #327680
 2702 004e 0893     		str	r3, [sp, #32]
 392:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2703              		.loc 1 392 0
 2704 0050 0223     		movs	r3, #2
 2705 0052 0D93     		str	r3, [sp, #52]
 393:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2706              		.loc 1 393 0
 2707 0054 4FF48002 		mov	r2, #4194304
 2708 0058 0E92     		str	r2, [sp, #56]
 394:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 2709              		.loc 1 394 0
 2710 005a 0822     		movs	r2, #8
 2711 005c 0F92     		str	r2, [sp, #60]
 395:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
ARM GAS  /tmp/cc7Pcclv.s 			page 79


 2712              		.loc 1 395 0
 2713 005e 4FF49072 		mov	r2, #288
 2714 0062 1092     		str	r2, [sp, #64]
 396:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 2715              		.loc 1 396 0
 2716 0064 1193     		str	r3, [sp, #68]
 397:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 2717              		.loc 1 397 0
 2718 0066 1293     		str	r3, [sp, #72]
 398:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2719              		.loc 1 398 0
 2720 0068 1393     		str	r3, [sp, #76]
 399:Src/main.c    ****     {
 2721              		.loc 1 399 0
 2722 006a 07A8     		add	r0, sp, #28
 2723 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2724              	.LVL211:
 2725 0070 88B9     		cbnz	r0, .L207
 405:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 2726              		.loc 1 405 0
 2727 0072 0F23     		movs	r3, #15
 2728 0074 0293     		str	r3, [sp, #8]
 406:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2729              		.loc 1 406 0
 2730 0076 0223     		movs	r3, #2
 2731 0078 0393     		str	r3, [sp, #12]
 407:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 2732              		.loc 1 407 0
 2733 007a 0023     		movs	r3, #0
 2734 007c 0493     		str	r3, [sp, #16]
 408:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 2735              		.loc 1 408 0
 2736 007e 4FF4A053 		mov	r3, #5120
 2737 0082 0593     		str	r3, [sp, #20]
 409:Src/main.c    **** 
 2738              		.loc 1 409 0
 2739 0084 0693     		str	r3, [sp, #24]
 411:Src/main.c    ****     {
 2740              		.loc 1 411 0
 2741 0086 0421     		movs	r1, #4
 2742 0088 02A8     		add	r0, sp, #8
 2743 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2744              	.LVL212:
 2745 008e 20B9     		cbnz	r0, .L208
 415:Src/main.c    **** 
 2746              		.loc 1 415 0
 2747 0090 15B0     		add	sp, sp, #84
 2748              	.LCFI52:
 2749              		.cfi_remember_state
 2750              		.cfi_def_cfa_offset 4
 2751              		@ sp needed
 2752 0092 5DF804FB 		ldr	pc, [sp], #4
 2753              	.L207:
 2754              	.LCFI53:
 2755              		.cfi_restore_state
 401:Src/main.c    ****     }
 2756              		.loc 1 401 0
ARM GAS  /tmp/cc7Pcclv.s 			page 80


 2757 0096 FFF7FEFF 		bl	Error_Handler
 2758              	.LVL213:
 2759              	.L208:
 413:Src/main.c    ****     }
 2760              		.loc 1 413 0
 2761 009a FFF7FEFF 		bl	Error_Handler
 2762              	.LVL214:
 2763              	.L210:
 2764 009e 00BF     		.align	2
 2765              	.L209:
 2766 00a0 00380240 		.word	1073887232
 2767 00a4 00700040 		.word	1073770496
 2768              		.cfi_endproc
 2769              	.LFE133:
 2771              		.section	.text.main,"ax",%progbits
 2772              		.align	1
 2773              		.global	main
 2774              		.syntax unified
 2775              		.thumb
 2776              		.thumb_func
 2777              		.fpu fpv4-sp-d16
 2779              	main:
 2780              	.LFB132:
 153:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2781              		.loc 1 153 0
 2782              		.cfi_startproc
 2783              		@ args = 0, pretend = 0, frame = 0
 2784              		@ frame_needed = 0, uses_anonymous_args = 0
 2785 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2786              	.LCFI54:
 2787              		.cfi_def_cfa_offset 40
 2788              		.cfi_offset 3, -40
 2789              		.cfi_offset 4, -36
 2790              		.cfi_offset 5, -32
 2791              		.cfi_offset 6, -28
 2792              		.cfi_offset 7, -24
 2793              		.cfi_offset 8, -20
 2794              		.cfi_offset 9, -16
 2795              		.cfi_offset 10, -12
 2796              		.cfi_offset 11, -8
 2797              		.cfi_offset 14, -4
 160:Src/main.c    **** 
 2798              		.loc 1 160 0
 2799 0004 FFF7FEFF 		bl	HAL_Init
 2800              	.LVL215:
 167:Src/main.c    **** 
 2801              		.loc 1 167 0
 2802 0008 FFF7FEFF 		bl	SystemClock_Config
 2803              	.LVL216:
 174:Src/main.c    ****     MX_DMA_Init();
 2804              		.loc 1 174 0
 2805 000c FFF7FEFF 		bl	MX_GPIO_Init
 2806              	.LVL217:
 175:Src/main.c    ****     MX_USART2_UART_Init();
 2807              		.loc 1 175 0
 2808 0010 FFF7FEFF 		bl	MX_DMA_Init
 2809              	.LVL218:
ARM GAS  /tmp/cc7Pcclv.s 			page 81


 176:Src/main.c    ****     MX_CAN1_Init();
 2810              		.loc 1 176 0
 2811 0014 FFF7FEFF 		bl	MX_USART2_UART_Init
 2812              	.LVL219:
 177:Src/main.c    ****     MX_SPI1_Init();
 2813              		.loc 1 177 0
 2814 0018 FFF7FEFF 		bl	MX_CAN1_Init
 2815              	.LVL220:
 178:Src/main.c    ****     MX_ADC1_Init();
 2816              		.loc 1 178 0
 2817 001c FFF7FEFF 		bl	MX_SPI1_Init
 2818              	.LVL221:
 179:Src/main.c    ****     MX_USART1_UART_Init();
 2819              		.loc 1 179 0
 2820 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2821              	.LVL222:
 180:Src/main.c    ****     MX_TIM2_Init();
 2822              		.loc 1 180 0
 2823 0024 FFF7FEFF 		bl	MX_USART1_UART_Init
 2824              	.LVL223:
 181:Src/main.c    ****     MX_TIM3_Init();
 2825              		.loc 1 181 0
 2826 0028 FFF7FEFF 		bl	MX_TIM2_Init
 2827              	.LVL224:
 182:Src/main.c    ****     MX_TIM4_Init();
 2828              		.loc 1 182 0
 2829 002c FFF7FEFF 		bl	MX_TIM3_Init
 2830              	.LVL225:
 183:Src/main.c    ****     MX_TIM5_Init();
 2831              		.loc 1 183 0
 2832 0030 FFF7FEFF 		bl	MX_TIM4_Init
 2833              	.LVL226:
 184:Src/main.c    ****     MX_TIM6_Init();
 2834              		.loc 1 184 0
 2835 0034 FFF7FEFF 		bl	MX_TIM5_Init
 2836              	.LVL227:
 185:Src/main.c    ****     MX_TIM7_Init();
 2837              		.loc 1 185 0
 2838 0038 FFF7FEFF 		bl	MX_TIM6_Init
 2839              	.LVL228:
 186:Src/main.c    ****     MX_TIM10_Init();
 2840              		.loc 1 186 0
 2841 003c FFF7FEFF 		bl	MX_TIM7_Init
 2842              	.LVL229:
 187:Src/main.c    ****     MX_TIM11_Init();
 2843              		.loc 1 187 0
 2844 0040 FFF7FEFF 		bl	MX_TIM10_Init
 2845              	.LVL230:
 188:Src/main.c    **** 
 2846              		.loc 1 188 0
 2847 0044 FFF7FEFF 		bl	MX_TIM11_Init
 2848              	.LVL231:
 191:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2849              		.loc 1 191 0
 2850 0048 FFF7FEFF 		bl	MX_NVIC_Init
 2851              	.LVL232:
 194:Src/main.c    ****     sFilter.FilterIdLow = 0;
ARM GAS  /tmp/cc7Pcclv.s 			page 82


 2852              		.loc 1 194 0
 2853 004c 8D49     		ldr	r1, .L216
 2854 004e 0025     		movs	r5, #0
 2855 0050 8D61     		str	r5, [r1, #24]
 195:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 2856              		.loc 1 195 0
 2857 0052 4D60     		str	r5, [r1, #4]
 196:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 2858              		.loc 1 196 0
 2859 0054 0D60     		str	r5, [r1]
 197:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 2860              		.loc 1 197 0
 2861 0056 8D60     		str	r5, [r1, #8]
 198:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 2862              		.loc 1 198 0
 2863 0058 CD60     		str	r5, [r1, #12]
 199:Src/main.c    ****     sFilter.FilterBank = 0;
 2864              		.loc 1 199 0
 2865 005a 0D61     		str	r5, [r1, #16]
 200:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 2866              		.loc 1 200 0
 2867 005c 4D61     		str	r5, [r1, #20]
 201:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 2868              		.loc 1 201 0
 2869 005e CD61     		str	r5, [r1, #28]
 202:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 2870              		.loc 1 202 0
 2871 0060 0127     		movs	r7, #1
 2872 0062 0F62     		str	r7, [r1, #32]
 203:Src/main.c    **** 
 2873              		.loc 1 203 0
 2874 0064 884C     		ldr	r4, .L216+4
 2875 0066 2046     		mov	r0, r4
 2876 0068 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 2877              	.LVL233:
 205:Src/main.c    **** 
 2878              		.loc 1 205 0
 2879 006c 2046     		mov	r0, r4
 2880 006e FFF7FEFF 		bl	HAL_CAN_Start
 2881              	.LVL234:
 207:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 2882              		.loc 1 207 0
 2883 0072 1421     		movs	r1, #20
 2884 0074 2046     		mov	r0, r4
 2885 0076 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2886              	.LVL235:
 208:Src/main.c    ****     /* USER CODE END 2 */
 2887              		.loc 1 208 0
 2888 007a 1521     		movs	r1, #21
 2889 007c 2046     		mov	r0, r4
 2890 007e FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2891              	.LVL236:
 213:Src/main.c    ****     // can initialization //
 2892              		.loc 1 213 0
 2893 0082 824E     		ldr	r6, .L216+8
 2894 0084 B461     		str	r4, [r6, #24]
 217:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
ARM GAS  /tmp/cc7Pcclv.s 			page 83


 2895              		.loc 1 217 0
 2896 0086 DFF87882 		ldr	r8, .L216+124
 2897 008a DFF878A2 		ldr	r10, .L216+128
 2898 008e C8F820A2 		str	r10, [r8, #544]
 218:Src/main.c    ****     accel.hspi = &hspi1;
 2899              		.loc 1 218 0
 2900 0092 4FF40074 		mov	r4, #512
 2901 0096 A8F82442 		strh	r4, [r8, #548]	@ movhi
 219:Src/main.c    **** 
 2902              		.loc 1 219 0
 2903 009a 7D4B     		ldr	r3, .L216+12
 2904 009c C8F83032 		str	r3, [r8, #560]
 221:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 2905              		.loc 1 221 0
 2906 00a0 DFF86492 		ldr	r9, .L216+132
 2907 00a4 7B48     		ldr	r0, .L216+16
 2908 00a6 C9F82002 		str	r0, [r9, #544]
 222:Src/main.c    ****     gyro.hspi = &hspi1;
 2909              		.loc 1 222 0
 2910 00aa 4FF4807B 		mov	fp, #256
 2911 00ae A9F824B2 		strh	fp, [r9, #548]	@ movhi
 223:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 2912              		.loc 1 223 0
 2913 00b2 C9F83032 		str	r3, [r9, #560]
 224:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 2914              		.loc 1 224 0
 2915 00b6 3A46     		mov	r2, r7
 2916 00b8 5946     		mov	r1, fp
 2917 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 2918              	.LVL237:
 225:Src/main.c    **** 
 2919              		.loc 1 225 0
 2920 00be 3A46     		mov	r2, r7
 2921 00c0 2146     		mov	r1, r4
 2922 00c2 5046     		mov	r0, r10
 2923 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2924              	.LVL238:
 227:Src/main.c    ****     steer_enc_prescaler /= 3;
 2925              		.loc 1 227 0
 2926 00c8 734B     		ldr	r3, .L216+20
 2927 00ca DA68     		ldr	r2, [r3, #12]
 228:Src/main.c    ****     steer_enc_prescaler /= 20;
 2928              		.loc 1 228 0
 2929 00cc 734B     		ldr	r3, .L216+24
 2930 00ce 83FB0213 		smull	r1, r3, r3, r2
 2931 00d2 A3EBE273 		sub	r3, r3, r2, asr #31
 229:Src/main.c    ****     steer_enc_prescaler += 40;
 2932              		.loc 1 229 0
 2933 00d6 724A     		ldr	r2, .L216+28
 2934 00d8 82FB0312 		smull	r1, r2, r2, r3
 2935 00dc DB17     		asrs	r3, r3, #31
 2936 00de C3EBE203 		rsb	r3, r3, r2, asr #3
 230:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 2937              		.loc 1 230 0
 2938 00e2 2833     		adds	r3, r3, #40
 2939 00e4 6F4A     		ldr	r2, .L216+32
 2940 00e6 1360     		str	r3, [r2]
ARM GAS  /tmp/cc7Pcclv.s 			page 84


 231:Src/main.c    **** 
 2941              		.loc 1 231 0
 2942 00e8 6F4C     		ldr	r4, .L216+36
 2943 00ea A364     		str	r3, [r4, #72]
 233:Src/main.c    ****     pot_2.min = 2350;
 2944              		.loc 1 233 0
 2945 00ec 6F4B     		ldr	r3, .L216+40
 2946 00ee 40F6DC72 		movw	r2, #4060
 2947 00f2 5A60     		str	r2, [r3, #4]
 234:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 2948              		.loc 1 234 0
 2949 00f4 40F62E12 		movw	r2, #2350
 2950 00f8 9A60     		str	r2, [r3, #8]
 235:Src/main.c    **** 
 2951              		.loc 1 235 0
 2952 00fa 40F2AE62 		movw	r2, #1710
 2953 00fe DA60     		str	r2, [r3, #12]
 237:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 2954              		.loc 1 237 0
 2955 0100 C4F8D8A3 		str	r10, [r4, #984]
 238:Src/main.c    ****     enc.DataPinName = GPIOC;
 2956              		.loc 1 238 0
 2957 0104 4021     		movs	r1, #64
 2958 0106 A4F8E013 		strh	r1, [r4, #992]	@ movhi
 239:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 2959              		.loc 1 239 0
 2960 010a C4F8DCA3 		str	r10, [r4, #988]
 240:Src/main.c    **** 
 2961              		.loc 1 240 0
 2962 010e A4F8E2B3 		strh	fp, [r4, #994]	@ movhi
 242:Src/main.c    ****     enc.interrupt_flag = 0;
 2963              		.loc 1 242 0
 2964 0112 E764     		str	r7, [r4, #76]
 243:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 2965              		.loc 1 243 0
 2966 0114 A560     		str	r5, [r4, #8]
 244:Src/main.c    ****     enc.average_speed = 0;
 2967              		.loc 1 244 0
 2968 0116 664B     		ldr	r3, .L216+44
 2969 0118 C4F8D033 		str	r3, [r4, #976]
 245:Src/main.c    ****     enc.wheel_diameter = 0.395;
 2970              		.loc 1 245 0
 2971 011c 0022     		movs	r2, #0
 2972 011e 0023     		movs	r3, #0
 2973 0120 C4E9F023 		strd	r2, [r4, #960]
 246:Src/main.c    ****     enc.data_size = 14;
 2974              		.loc 1 246 0
 2975 0124 634B     		ldr	r3, .L216+48
 2976 0126 E365     		str	r3, [r4, #92]	@ float
 247:Src/main.c    ****     enc.clock_period = 2;
 2977              		.loc 1 247 0
 2978 0128 0E23     		movs	r3, #14
 2979 012a 2360     		str	r3, [r4]
 248:Src/main.c    ****     enc.wheel_rotation = 0;
 2980              		.loc 1 248 0
 2981 012c 0223     		movs	r3, #2
 2982 012e E360     		str	r3, [r4, #12]
ARM GAS  /tmp/cc7Pcclv.s 			page 85


 249:Src/main.c    ****     enc.Km = 0;
 2983              		.loc 1 249 0
 2984 0130 2565     		str	r5, [r4, #80]
 250:Src/main.c    **** 
 2985              		.loc 1 250 0
 2986 0132 0023     		movs	r3, #0
 2987 0134 6365     		str	r3, [r4, #84]	@ float
 252:Src/main.c    ****     enc.frequency = 0;
 2988              		.loc 1 252 0
 2989 0136 604A     		ldr	r2, .L216+52
 2990 0138 2266     		str	r2, [r4, #96]	@ float
 253:Src/main.c    ****     enc.frequency_timer = &htim7;
 2991              		.loc 1 253 0
 2992 013a 6366     		str	r3, [r4, #100]	@ float
 254:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 2993              		.loc 1 254 0
 2994 013c 5F4B     		ldr	r3, .L216+56
 2995 013e C4F8D433 		str	r3, [r4, #980]
 255:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 2996              		.loc 1 255 0
 2997 0142 5F4B     		ldr	r3, .L216+60
 2998 0144 A366     		str	r3, [r4, #104]
 256:Src/main.c    **** 
 2999              		.loc 1 256 0
 3000 0146 3A46     		mov	r2, r7
 3001 0148 5046     		mov	r0, r10
 3002 014a FFF7FEFF 		bl	HAL_GPIO_WritePin
 3003              	.LVL239:
 258:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 3004              		.loc 1 258 0
 3005 014e DFF8BCA1 		ldr	r10, .L216+136
 3006 0152 5046     		mov	r0, r10
 3007 0154 FFF7FEFF 		bl	HAL_TIM_Base_Start
 3008              	.LVL240:
 259:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 3009              		.loc 1 259 0
 3010 0158 4F48     		ldr	r0, .L216+20
 3011 015a FFF7FEFF 		bl	HAL_TIM_Base_Start
 3012              	.LVL241:
 263:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 3013              		.loc 1 263 0
 3014 015e 5748     		ldr	r0, .L216+56
 3015 0160 FFF7FEFF 		bl	HAL_TIM_Base_Start
 3016              	.LVL242:
 264:Src/main.c    **** 
 3017              		.loc 1 264 0
 3018 0164 5748     		ldr	r0, .L216+64
 3019 0166 FFF7FEFF 		bl	HAL_TIM_Base_Start
 3020              	.LVL243:
 266:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 3021              		.loc 1 266 0
 3022 016a 5046     		mov	r0, r10
 3023 016c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3024              	.LVL244:
 267:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 3025              		.loc 1 267 0
 3026 0170 4948     		ldr	r0, .L216+20
ARM GAS  /tmp/cc7Pcclv.s 			page 86


 3027 0172 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3028              	.LVL245:
 271:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 3029              		.loc 1 271 0
 3030 0176 5148     		ldr	r0, .L216+56
 3031 0178 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3032              	.LVL246:
 272:Src/main.c    **** 
 3033              		.loc 1 272 0
 3034 017c 5148     		ldr	r0, .L216+64
 3035 017e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 3036              	.LVL247:
 274:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 3037              		.loc 1 274 0
 3038 0182 514B     		ldr	r3, .L216+68
 3039 0184 1B68     		ldr	r3, [r3]
 3040 0186 5D62     		str	r5, [r3, #36]
 275:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 3041              		.loc 1 275 0
 3042 0188 494B     		ldr	r3, .L216+44
 3043 018a 1B68     		ldr	r3, [r3]
 3044 018c 5D62     		str	r5, [r3, #36]
 279:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 3045              		.loc 1 279 0
 3046 018e 4F4B     		ldr	r3, .L216+72
 3047 0190 1B68     		ldr	r3, [r3]
 3048 0192 5D62     		str	r5, [r3, #36]
 280:Src/main.c    **** 
 3049              		.loc 1 280 0
 3050 0194 4E4B     		ldr	r3, .L216+76
 3051 0196 1B68     		ldr	r3, [r3]
 3052 0198 5D62     		str	r5, [r3, #36]
 283:Src/main.c    **** 
 3053              		.loc 1 283 0
 3054 019a 2046     		mov	r0, r4
 3055 019c FFF7FEFF 		bl	enc_calculate_optimal_frequency
 3056              	.LVL248:
 285:Src/main.c    ****     gyro.scale = 500;
 3057              		.loc 1 285 0
 3058 01a0 0423     		movs	r3, #4
 3059 01a2 C8F81832 		str	r3, [r8, #536]
 286:Src/main.c    **** 
 3060              		.loc 1 286 0
 3061 01a6 4FF4FA73 		mov	r3, #500
 3062 01aa C9F81832 		str	r3, [r9, #536]
 289:Src/main.c    ****     LSMD9S0_check(&accel);
 3063              		.loc 1 289 0
 3064 01ae 4946     		mov	r1, r9
 3065 01b0 4046     		mov	r0, r8
 3066 01b2 FFF7FEFF 		bl	LSMD9S0_accel_gyro_init
 3067              	.LVL249:
 290:Src/main.c    **** 
 3068              		.loc 1 290 0
 3069 01b6 4046     		mov	r0, r8
 3070 01b8 FFF7FEFF 		bl	LSMD9S0_check
 3071              	.LVL250:
 292:Src/main.c    ****     LSM9DS0_calibration(&gyro);
ARM GAS  /tmp/cc7Pcclv.s 			page 87


 3072              		.loc 1 292 0
 3073 01bc 4046     		mov	r0, r8
 3074 01be FFF7FEFF 		bl	LSM9DS0_calibration
 3075              	.LVL251:
 293:Src/main.c    **** 
 3076              		.loc 1 293 0
 3077 01c2 4846     		mov	r0, r9
 3078 01c4 FFF7FEFF 		bl	LSM9DS0_calibration
 3079              	.LVL252:
 295:Src/main.c    **** 
 3080              		.loc 1 295 0
 3081 01c8 424B     		ldr	r3, .L216+80
 3082 01ca 1D60     		str	r5, [r3]
 297:Src/main.c    **** 
 3083              		.loc 1 297 0
 3084 01cc 3846     		mov	r0, r7
 3085 01ce FFF7FEFF 		bl	HAL_Delay
 3086              	.LVL253:
 299:Src/main.c    ****     can.dataTx[1] = 0xA8;
 3087              		.loc 1 299 0
 3088 01d2 4FF03D09 		mov	r9, #61
 3089 01d6 86F80890 		strb	r9, [r6, #8]
 300:Src/main.c    ****     can.dataTx[2] = 0x64;
 3090              		.loc 1 300 0
 3091 01da 4FF0A808 		mov	r8, #168
 3092 01de 86F80980 		strb	r8, [r6, #9]
 301:Src/main.c    ****     can.id = 0x201;
 3093              		.loc 1 301 0
 3094 01e2 6425     		movs	r5, #100
 3095 01e4 B572     		strb	r5, [r6, #10]
 302:Src/main.c    ****     can.size = 3;
 3096              		.loc 1 302 0
 3097 01e6 40F20123 		movw	r3, #513
 3098 01ea 3360     		str	r3, [r6]
 303:Src/main.c    ****     CAN_Send(&can);
 3099              		.loc 1 303 0
 3100 01ec 0324     		movs	r4, #3
 3101 01ee 7460     		str	r4, [r6, #4]
 304:Src/main.c    **** 
 3102              		.loc 1 304 0
 3103 01f0 3046     		mov	r0, r6
 3104 01f2 FFF7FEFF 		bl	CAN_Send
 3105              	.LVL254:
 306:Src/main.c    ****     can.dataTx[1] = 0xA8;
 3106              		.loc 1 306 0
 3107 01f6 86F80890 		strb	r9, [r6, #8]
 307:Src/main.c    ****     can.dataTx[2] = 0x64;
 3108              		.loc 1 307 0
 3109 01fa 86F80980 		strb	r8, [r6, #9]
 308:Src/main.c    ****     can.id = 0x202;
 3110              		.loc 1 308 0
 3111 01fe B572     		strb	r5, [r6, #10]
 309:Src/main.c    ****     can.size = 3;
 3112              		.loc 1 309 0
 3113 0200 40F20223 		movw	r3, #514
 3114 0204 3360     		str	r3, [r6]
 310:Src/main.c    ****     CAN_Send(&can);
ARM GAS  /tmp/cc7Pcclv.s 			page 88


 3115              		.loc 1 310 0
 3116 0206 7460     		str	r4, [r6, #4]
 311:Src/main.c    **** 
 3117              		.loc 1 311 0
 3118 0208 3046     		mov	r0, r6
 3119 020a FFF7FEFF 		bl	CAN_Send
 3120              	.LVL255:
 313:Src/main.c    **** 
 3121              		.loc 1 313 0
 3122 020e 3846     		mov	r0, r7
 3123 0210 FFF7FEFF 		bl	HAL_Delay
 3124              	.LVL256:
 315:Src/main.c    **** 
 3125              		.loc 1 315 0
 3126 0214 FFF7FEFF 		bl	HAL_GetTick
 3127              	.LVL257:
 3128 0218 2F4B     		ldr	r3, .L216+84
 3129 021a 1860     		str	r0, [r3]
 317:Src/main.c    ****     {
 3130              		.loc 1 317 0
 3131 021c 2F49     		ldr	r1, .L216+88
 3132 021e 3048     		ldr	r0, .L216+92
 3133 0220 FFF7FEFF 		bl	gps_init
 3134              	.LVL258:
 3135 0224 05E0     		b	.L212
 3136              	.L213:
 368:Src/main.c    ****             command_flag = 0;
 3137              		.loc 1 368 0
 3138 0226 0120     		movs	r0, #1
 3139 0228 FFF7FEFF 		bl	HAL_Delay
 3140              	.LVL259:
 369:Src/main.c    ****         }
 3141              		.loc 1 369 0
 3142 022c 0022     		movs	r2, #0
 3143 022e 2D4B     		ldr	r3, .L216+96
 3144 0230 1A60     		str	r2, [r3]
 3145              	.L212:
 329:Src/main.c    ****         
 3146              		.loc 1 329 0
 3147 0232 0322     		movs	r2, #3
 3148 0234 2C49     		ldr	r1, .L216+100
 3149 0236 2D48     		ldr	r0, .L216+104
 3150 0238 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 3151              	.LVL260:
 341:Src/main.c    ****         {
 3152              		.loc 1 341 0
 3153 023c 294B     		ldr	r3, .L216+96
 3154 023e 1B68     		ldr	r3, [r3]
 3155 0240 002B     		cmp	r3, #0
 3156 0242 F0D1     		bne	.L213
 343:Src/main.c    ****             {
 3157              		.loc 1 343 0
 3158 0244 FFF7FEFF 		bl	HAL_GetTick
 3159              	.LVL261:
 3160 0248 294B     		ldr	r3, .L216+108
 3161 024a 1B68     		ldr	r3, [r3]
 3162 024c 9842     		cmp	r0, r3
ARM GAS  /tmp/cc7Pcclv.s 			page 89


 3163 024e F0D0     		beq	.L212
 3164              	.LBB16:
 349:Src/main.c    ****                 HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 3165              		.loc 1 349 0
 3166 0250 284C     		ldr	r4, .L216+112
 3167 0252 224B     		ldr	r3, .L216+88
 3168 0254 1A6A     		ldr	r2, [r3, #32]
 3169 0256 2849     		ldr	r1, .L216+116
 3170 0258 2046     		mov	r0, r4
 3171 025a FFF7FEFF 		bl	sprintf
 3172              	.LVL262:
 350:Src/main.c    **** 
 3173              		.loc 1 350 0
 3174 025e 2046     		mov	r0, r4
 3175 0260 FFF7FEFF 		bl	strlen
 3176              	.LVL263:
 3177 0264 0A23     		movs	r3, #10
 3178 0266 82B2     		uxth	r2, r0
 3179 0268 2146     		mov	r1, r4
 3180 026a 2448     		ldr	r0, .L216+120
 3181 026c FFF7FEFF 		bl	HAL_UART_Transmit
 3182              	.LVL264:
 352:Src/main.c    ****                 previous_millis = HAL_GetTick();
 3183              		.loc 1 352 0
 3184 0270 FFF7FEFF 		bl	HAL_GetTick
 3185              	.LVL265:
 3186 0274 FFF7FEFF 		bl	send_CAN_data
 3187              	.LVL266:
 353:Src/main.c    ****                 /*
 3188              		.loc 1 353 0
 3189 0278 FFF7FEFF 		bl	HAL_GetTick
 3190              	.LVL267:
 3191 027c 1C4B     		ldr	r3, .L216+108
 3192 027e 1860     		str	r0, [r3]
 3193 0280 D7E7     		b	.L212
 3194              	.L217:
 3195 0282 00BF     		.align	2
 3196              	.L216:
 3197 0284 00000000 		.word	sFilter
 3198 0288 00000000 		.word	hcan1
 3199 028c 00000000 		.word	can
 3200 0290 00000000 		.word	hspi1
 3201 0294 00000240 		.word	1073872896
 3202 0298 00000000 		.word	htim3
 3203 029c 56555555 		.word	1431655766
 3204 02a0 67666666 		.word	1717986919
 3205 02a4 00000000 		.word	steer_enc_prescaler
 3206 02a8 00000000 		.word	enc
 3207 02ac 00000000 		.word	pot_2
 3208 02b0 00000000 		.word	.LANCHOR4
 3209 02b4 713DCA3E 		.word	1053441393
 3210 02b8 0000A040 		.word	1084227584
 3211 02bc 00000000 		.word	htim7
 3212 02c0 00A24A04 		.word	72000000
 3213 02c4 00000000 		.word	htim10
 3214 02c8 00000000 		.word	.LANCHOR5
 3215 02cc 00000000 		.word	.LANCHOR6
ARM GAS  /tmp/cc7Pcclv.s 			page 90


 3216 02d0 00000000 		.word	.LANCHOR7
 3217 02d4 00000000 		.word	encoder_counter
 3218 02d8 00000000 		.word	second_millis
 3219 02dc 00000000 		.word	gps_main
 3220 02e0 00000000 		.word	huart1
 3221 02e4 00000000 		.word	.LANCHOR0
 3222 02e8 00000000 		.word	ADC_buffer
 3223 02ec 00000000 		.word	hadc1
 3224 02f0 00000000 		.word	previous_millis
 3225 02f4 00000000 		.word	txt
 3226 02f8 00000000 		.word	.LC2
 3227 02fc 00000000 		.word	huart2
 3228 0300 00000000 		.word	accel
 3229 0304 00080240 		.word	1073874944
 3230 0308 00000000 		.word	gyro
 3231 030c 00000000 		.word	htim2
 3232              	.LBE16:
 3233              		.cfi_endproc
 3234              	.LFE132:
 3236              		.comm	count_message,4,4
 3237              		.comm	second_millis,4,4
 3238              		.comm	previous_millis,4,4
 3239              		.comm	encoder_counter,4,4
 3240              		.comm	steer_enc_prescaler,4,4
 3241              		.comm	gps_main,200,4
 3242              		.global	a_TimerInstance10
 3243              		.global	a_TimerInstance7
 3244              		.global	a_TimerInstance6
 3245              		.global	a_TimerInstance5
 3246              		.global	a_TimerInstance4
 3247              		.global	a_TimerInstance3
 3248              		.global	a_TimerInstance2
 3249              		.global	inverter_rpm
 3250              		.global	calibration_flag
 3251              		.global	command_flag
 3252              		.global	timer_factor
 3253              		.global	multiplier
 3254              		.global	flag
 3255              		.comm	txt,100,4
 3256              		.comm	val,12,4
 3257              		.comm	ADC_buffer,16,4
 3258              		.comm	val0rang,4,4
 3259              		.comm	valMin0,4,4
 3260              		.comm	valMax0,4,4
 3261              		.comm	sFilter,40,4
 3262              		.comm	huart2,64,4
 3263              		.comm	huart1,64,4
 3264              		.comm	htim11,64,4
 3265              		.comm	htim10,64,4
 3266              		.comm	htim7,64,4
 3267              		.comm	htim6,64,4
 3268              		.comm	htim5,64,4
 3269              		.comm	htim4,64,4
 3270              		.comm	htim3,64,4
 3271              		.comm	htim2,64,4
 3272              		.comm	hspi1,88,4
 3273              		.comm	hcan1,40,4
ARM GAS  /tmp/cc7Pcclv.s 			page 91


 3274              		.comm	hdma_adc1,96,4
 3275              		.comm	hadc1,72,4
 3276              		.section	.bss.calibration_flag,"aw",%nobits
 3277              		.align	2
 3278              		.set	.LANCHOR1,. + 0
 3281              	calibration_flag:
 3282 0000 00000000 		.space	4
 3283              		.section	.bss.command_flag,"aw",%nobits
 3284              		.align	2
 3285              		.set	.LANCHOR0,. + 0
 3288              	command_flag:
 3289 0000 00000000 		.space	4
 3290              		.section	.bss.flag,"aw",%nobits
 3291              		.align	2
 3292              		.set	.LANCHOR3,. + 0
 3295              	flag:
 3296 0000 00000000 		.space	4
 3297              		.section	.bss.inverter_rpm,"aw",%nobits
 3298              		.align	2
 3301              	inverter_rpm:
 3302 0000 00000000 		.space	4
 3303              		.section	.data.a_TimerInstance10,"aw",%progbits
 3304              		.align	2
 3305              		.set	.LANCHOR7,. + 0
 3308              	a_TimerInstance10:
 3309 0000 00440140 		.word	1073824768
 3310 0004 00000000 		.space	60
 3310      00000000 
 3310      00000000 
 3310      00000000 
 3310      00000000 
 3311              		.section	.data.a_TimerInstance2,"aw",%progbits
 3312              		.align	2
 3313              		.set	.LANCHOR5,. + 0
 3316              	a_TimerInstance2:
 3317 0000 00000040 		.word	1073741824
 3318 0004 00000000 		.space	60
 3318      00000000 
 3318      00000000 
 3318      00000000 
 3318      00000000 
 3319              		.section	.data.a_TimerInstance3,"aw",%progbits
 3320              		.align	2
 3321              		.set	.LANCHOR4,. + 0
 3324              	a_TimerInstance3:
 3325 0000 00040040 		.word	1073742848
 3326 0004 00000000 		.space	60
 3326      00000000 
 3326      00000000 
 3326      00000000 
 3326      00000000 
 3327              		.section	.data.a_TimerInstance4,"aw",%progbits
 3328              		.align	2
 3331              	a_TimerInstance4:
 3332 0000 00080040 		.word	1073743872
 3333 0004 00000000 		.space	60
 3333      00000000 
ARM GAS  /tmp/cc7Pcclv.s 			page 92


 3333      00000000 
 3333      00000000 
 3333      00000000 
 3334              		.section	.data.a_TimerInstance5,"aw",%progbits
 3335              		.align	2
 3338              	a_TimerInstance5:
 3339 0000 000C0040 		.word	1073744896
 3340 0004 00000000 		.space	60
 3340      00000000 
 3340      00000000 
 3340      00000000 
 3340      00000000 
 3341              		.section	.data.a_TimerInstance6,"aw",%progbits
 3342              		.align	2
 3345              	a_TimerInstance6:
 3346 0000 00100040 		.word	1073745920
 3347 0004 00000000 		.space	60
 3347      00000000 
 3347      00000000 
 3347      00000000 
 3347      00000000 
 3348              		.section	.data.a_TimerInstance7,"aw",%progbits
 3349              		.align	2
 3350              		.set	.LANCHOR6,. + 0
 3353              	a_TimerInstance7:
 3354 0000 00140040 		.word	1073746944
 3355 0004 00000000 		.space	60
 3355      00000000 
 3355      00000000 
 3355      00000000 
 3355      00000000 
 3356              		.section	.data.multiplier,"aw",%progbits
 3357              		.align	2
 3358              		.set	.LANCHOR2,. + 0
 3361              	multiplier:
 3362 0000 01000000 		.word	1
 3363              		.section	.data.timer_factor,"aw",%progbits
 3364              		.align	2
 3367              	timer_factor:
 3368 0000 02000000 		.word	2
 3369              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 3370              		.align	2
 3371              	.LC0:
 3372 0000 4572726F 		.ascii	"Error on file: \000"
 3372      72206F6E 
 3372      2066696C 
 3372      653A2000 
 3373              	.LC1:
 3374 0010 0D0A00   		.ascii	"\015\012\000"
 3375              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3376              		.align	2
 3377              	.LC2:
 3378 0000 25640D0A 		.ascii	"%d\015\012\000"
 3378      00
 3379              		.text
 3380              	.Letext0:
 3381              		.file 2 "/usr/include/newlib/machine/_default_types.h"
ARM GAS  /tmp/cc7Pcclv.s 			page 93


 3382              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3383              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3384              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3385              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3386              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3387              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3388              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3389              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3390              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3391              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3392              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3393              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3394              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 3395              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3396              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3397              		.file 18 "/usr/include/newlib/sys/lock.h"
 3398              		.file 19 "/usr/include/newlib/sys/_types.h"
 3399              		.file 20 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3400              		.file 21 "/usr/include/newlib/sys/reent.h"
 3401              		.file 22 "/usr/include/newlib/stdlib.h"
 3402              		.file 23 "/usr/include/newlib/math.h"
 3403              		.file 24 "Inc/Eagle_TRT.h"
 3404              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 3405              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 3406              		.file 27 "/usr/include/newlib/stdio.h"
 3407              		.file 28 "/usr/include/newlib/string.h"
 3408              		.file 29 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc7Pcclv.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc7Pcclv.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc7Pcclv.s:190    .text.MX_GPIO_Init:00000000000000ec $d
     /tmp/cc7Pcclv.s:198    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:204    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc7Pcclv.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/cc7Pcclv.s:253    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:259    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/cc7Pcclv.s:385    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/cc7Pcclv.s:392    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/cc7Pcclv.s:417    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000010 ADC_buffer
     /tmp/cc7Pcclv.s:425    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc7Pcclv.s:432    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc7Pcclv.s:462    .text.HAL_UART_RxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart1
                            *COM*:00000000000000c8 gps_main
     /tmp/cc7Pcclv.s:468    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/cc7Pcclv.s:475    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/cc7Pcclv.s:506    .text.HAL_UART_TxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart2
     /tmp/cc7Pcclv.s:511    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cc7Pcclv.s:518    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/cc7Pcclv.s:786    .text.HAL_CAN_RxFifo0FullCallback:0000000000000130 $d
     /tmp/cc7Pcclv.s:795    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc7Pcclv.s:802    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc7Pcclv.s:898    .text.HAL_TIM_PeriodElapsedCallback:000000000000006c $d
                            *COM*:0000000000000040 htim10
                            *COM*:0000000000000040 htim7
     /tmp/cc7Pcclv.s:915    .text.send_CAN_data:0000000000000000 $t
     /tmp/cc7Pcclv.s:922    .text.send_CAN_data:0000000000000000 send_CAN_data
     /tmp/cc7Pcclv.s:1463   .text.send_CAN_data:0000000000000318 $d
     /tmp/cc7Pcclv.s:1479   .text.send_CAN_data:0000000000000350 $t
     /tmp/cc7Pcclv.s:1574   .text.send_CAN_data:00000000000003dc $d
     /tmp/cc7Pcclv.s:1581   .text.Error_Handler:0000000000000000 $t
     /tmp/cc7Pcclv.s:1588   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/cc7Pcclv.s:1620   .text.Error_Handler:0000000000000020 $d
     /tmp/cc7Pcclv.s:1627   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:1633   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc7Pcclv.s:1677   .text.MX_USART2_UART_Init:0000000000000028 $d
     /tmp/cc7Pcclv.s:1684   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:1690   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc7Pcclv.s:1744   .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/cc7Pcclv.s:1750   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:1756   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/cc7Pcclv.s:1809   .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/cc7Pcclv.s:1815   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:1821   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc7Pcclv.s:1907   .text.MX_ADC1_Init:000000000000005c $d
                            *COM*:0000000000000048 hadc1
     /tmp/cc7Pcclv.s:1914   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:1920   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc7Pcclv.s:1964   .text.MX_USART1_UART_Init:000000000000002c $d
ARM GAS  /tmp/cc7Pcclv.s 			page 95


     /tmp/cc7Pcclv.s:1970   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:1976   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/cc7Pcclv.s:2083   .text.MX_TIM2_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim2
     /tmp/cc7Pcclv.s:2088   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:2094   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/cc7Pcclv.s:2180   .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/cc7Pcclv.s:2186   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:2192   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/cc7Pcclv.s:2278   .text.MX_TIM4_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim4
     /tmp/cc7Pcclv.s:2284   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:2290   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/cc7Pcclv.s:2376   .text.MX_TIM5_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim5
     /tmp/cc7Pcclv.s:2382   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:2388   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/cc7Pcclv.s:2454   .text.MX_TIM6_Init:0000000000000044 $d
                            *COM*:0000000000000040 htim6
     /tmp/cc7Pcclv.s:2460   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:2466   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/cc7Pcclv.s:2532   .text.MX_TIM7_Init:0000000000000044 $d
     /tmp/cc7Pcclv.s:2538   .text.MX_TIM10_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:2544   .text.MX_TIM10_Init:0000000000000000 MX_TIM10_Init
     /tmp/cc7Pcclv.s:2584   .text.MX_TIM10_Init:0000000000000028 $d
     /tmp/cc7Pcclv.s:2590   .text.MX_TIM11_Init:0000000000000000 $t
     /tmp/cc7Pcclv.s:2596   .text.MX_TIM11_Init:0000000000000000 MX_TIM11_Init
     /tmp/cc7Pcclv.s:2634   .text.MX_TIM11_Init:0000000000000020 $d
                            *COM*:0000000000000040 htim11
     /tmp/cc7Pcclv.s:2640   .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc7Pcclv.s:2647   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc7Pcclv.s:2766   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/cc7Pcclv.s:2772   .text.main:0000000000000000 $t
     /tmp/cc7Pcclv.s:2779   .text.main:0000000000000000 main
     /tmp/cc7Pcclv.s:3197   .text.main:0000000000000284 $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000004 steer_enc_prescaler
                            *COM*:0000000000000004 encoder_counter
                            *COM*:0000000000000004 second_millis
                            *COM*:0000000000000004 previous_millis
                            *COM*:0000000000000064 txt
                            *COM*:0000000000000004 count_message
     /tmp/cc7Pcclv.s:3308   .data.a_TimerInstance10:0000000000000000 a_TimerInstance10
     /tmp/cc7Pcclv.s:3353   .data.a_TimerInstance7:0000000000000000 a_TimerInstance7
     /tmp/cc7Pcclv.s:3345   .data.a_TimerInstance6:0000000000000000 a_TimerInstance6
     /tmp/cc7Pcclv.s:3338   .data.a_TimerInstance5:0000000000000000 a_TimerInstance5
     /tmp/cc7Pcclv.s:3331   .data.a_TimerInstance4:0000000000000000 a_TimerInstance4
     /tmp/cc7Pcclv.s:3324   .data.a_TimerInstance3:0000000000000000 a_TimerInstance3
     /tmp/cc7Pcclv.s:3316   .data.a_TimerInstance2:0000000000000000 a_TimerInstance2
     /tmp/cc7Pcclv.s:3301   .bss.inverter_rpm:0000000000000000 inverter_rpm
     /tmp/cc7Pcclv.s:3281   .bss.calibration_flag:0000000000000000 calibration_flag
     /tmp/cc7Pcclv.s:3288   .bss.command_flag:0000000000000000 command_flag
     /tmp/cc7Pcclv.s:3367   .data.timer_factor:0000000000000000 timer_factor
     /tmp/cc7Pcclv.s:3361   .data.multiplier:0000000000000000 multiplier
     /tmp/cc7Pcclv.s:3295   .bss.flag:0000000000000000 flag
                            *COM*:000000000000000c val
ARM GAS  /tmp/cc7Pcclv.s 			page 96


                            *COM*:0000000000000004 val0rang
                            *COM*:0000000000000004 valMin0
                            *COM*:0000000000000004 valMax0
                            *COM*:0000000000000060 hdma_adc1
     /tmp/cc7Pcclv.s:3277   .bss.calibration_flag:0000000000000000 $d
     /tmp/cc7Pcclv.s:3284   .bss.command_flag:0000000000000000 $d
     /tmp/cc7Pcclv.s:3291   .bss.flag:0000000000000000 $d
     /tmp/cc7Pcclv.s:3298   .bss.inverter_rpm:0000000000000000 $d
     /tmp/cc7Pcclv.s:3304   .data.a_TimerInstance10:0000000000000000 $d
     /tmp/cc7Pcclv.s:3312   .data.a_TimerInstance2:0000000000000000 $d
     /tmp/cc7Pcclv.s:3320   .data.a_TimerInstance3:0000000000000000 $d
     /tmp/cc7Pcclv.s:3328   .data.a_TimerInstance4:0000000000000000 $d
     /tmp/cc7Pcclv.s:3335   .data.a_TimerInstance5:0000000000000000 $d
     /tmp/cc7Pcclv.s:3342   .data.a_TimerInstance6:0000000000000000 $d
     /tmp/cc7Pcclv.s:3349   .data.a_TimerInstance7:0000000000000000 $d
     /tmp/cc7Pcclv.s:3357   .data.multiplier:0000000000000000 $d
     /tmp/cc7Pcclv.s:3364   .data.timer_factor:0000000000000000 $d
     /tmp/cc7Pcclv.s:3370   .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/cc7Pcclv.s:3376   .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
pot_1
pot_2
pot_3
gps_read_it
print_it
CAN_Receive
set_min
CAN_Send
set_max
can
LSMD9S0_accel_read
calc_pot_value
LSMD9S0_gyro_read
encoder_tim_interrupt
accel
gyro
enc
__aeabi_d2uiz
__aeabi_ddiv
__aeabi_dmul
__aeabi_i2d
__aeabi_dadd
HAL_UART_Transmit
HAL_UART_Init
HAL_CAN_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_SlaveConfigSynchro
ARM GAS  /tmp/cc7Pcclv.s 			page 97


HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start
HAL_TIM_Base_Start_IT
enc_calculate_optimal_frequency
LSMD9S0_accel_gyro_init
LSMD9S0_check
LSM9DS0_calibration
HAL_Delay
HAL_GetTick
gps_init
HAL_ADC_Start_DMA
sprintf
strlen
