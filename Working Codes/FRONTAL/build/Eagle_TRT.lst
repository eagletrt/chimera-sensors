ARM GAS  /tmp/ccYuDwjm.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Eagle_TRT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.next,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	next:
  25              	.LFB141:
  26              		.file 1 "Src/Eagle_TRT.c"
   1:Src/Eagle_TRT.c **** #include "Eagle_TRT.h"
   2:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_conf.h"
   3:Src/Eagle_TRT.c **** 
   4:Src/Eagle_TRT.c **** /*
   5:Src/Eagle_TRT.c ****  *Driver for all the stm in the Eagle_TRT veichle
   6:Src/Eagle_TRT.c ****  *incude this driver in the main file
   7:Src/Eagle_TRT.c ****  *you can't use all the functions unless you set up the CubeMx project correctly
   8:Src/Eagle_TRT.c **** */
   9:Src/Eagle_TRT.c **** 
  10:Src/Eagle_TRT.c **** //----------------ENCODER----------------//
  11:Src/Eagle_TRT.c **** /*
  12:Src/Eagle_TRT.c ****  *To use encoder functions you have to initialize two timers, one for the clock and one to generate
  13:Src/Eagle_TRT.c ****  *To get the rotational speed of the encoder, you can setup the interrupt timer and call 'encoder_t
  14:Src/Eagle_TRT.c ****  *you have to declare a variable and pass it as argument to the encoder_tim_interrupt() function.
  15:Src/Eagle_TRT.c ****  *The porpouse of that variable is to switch from the three phases needed to calculate the rotation
  16:Src/Eagle_TRT.c ****  *The first and the second phases are to request two angles from the encoder, then third is to calc
  17:Src/Eagle_TRT.c ****  *For the configuration of the first timer go to the description of the read_encoder() function.
  18:Src/Eagle_TRT.c ****  *For the configuration of the second timer you have to configure it to generate an interrupt.
  19:Src/Eagle_TRT.c ****  *That interrupt must be long enough to calculate a speed but not too long because you have to get 
  20:Src/Eagle_TRT.c ****  *
  21:Src/Eagle_TRT.c ****  *working settings:
  22:Src/Eagle_TRT.c ****  *interrupt timer -> prescaler 36, counter period 1000
  23:Src/Eagle_TRT.c ****  *timer2 -> prescaler = 18, counter period = 65500
  24:Src/Eagle_TRT.c ****  *pin PC8 = data in
  25:Src/Eagle_TRT.c ****  *pin PC9 = clock pin
  26:Src/Eagle_TRT.c ****  *angles_array[15]
  27:Src/Eagle_TRT.c **** */
  28:Src/Eagle_TRT.c **** 
  29:Src/Eagle_TRT.c **** //----------------GPS----------------//
  30:Src/Eagle_TRT.c **** /*
  31:Src/Eagle_TRT.c ****  *To use GPS functions you have to setup the UART port to communicate with it.
  32:Src/Eagle_TRT.c ****  *Possibly set the port as interrupt because the received data are cleaner.
ARM GAS  /tmp/ccYuDwjm.s 			page 2


  33:Src/Eagle_TRT.c ****  *Call GPS_INIT() to setup the GPS
  34:Src/Eagle_TRT.c ****  *Every loop read the input data.
  35:Src/Eagle_TRT.c ****  *Then the function Get_Sentence() looks for a sequence of letters like "GPRMC"
  36:Src/Eagle_TRT.c ****  *Look at NMEA protocol, there you can find all the strings that a GPS can send,
  37:Src/Eagle_TRT.c ****  *every one of them defines the types of data that the GPS sends.
  38:Src/Eagle_TRT.c ****  *If Get_Sentence() found one string, returns the number of the position of that string in the char
  39:Src/Eagle_TRT.c ****  *Go to Get_Sentence() description to find an example of Matrix
  40:Src/Eagle_TRT.c ****  *Once you have the number of the string you can call Get_Requested_Data() to get the data that you
  41:Src/Eagle_TRT.c ****  *If you need to know if the GPS is connected to at least 3 satellites call Is_Valid() function
  42:Src/Eagle_TRT.c ****  *
  43:Src/Eagle_TRT.c ****  *checksum calculator http://www.hhhh.org/wiml/proj/nmeaxor.html
  44:Src/Eagle_TRT.c **** */
  45:Src/Eagle_TRT.c **** 
  46:Src/Eagle_TRT.c **** //----------------IMU----------------//
  47:Src/Eagle_TRT.c **** /*
  48:Src/Eagle_TRT.c ****  *Setup SPI port to communicate with the sensor
  49:Src/Eagle_TRT.c ****  *Call gyro_init() and magn_accel_init() to setup the sensor
  50:Src/Eagle_TRT.c ****  *If you want to calibrate the sensor call gyro_calib() and accel_calib().
  51:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling gyro_read()
  52:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling accel_read()
  53:Src/Eagle_TRT.c **** */
  54:Src/Eagle_TRT.c **** 
  55:Src/Eagle_TRT.c **** #ifdef HAL_SPI_MODULE_ENABLED
  56:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_spi.h"
  57:Src/Eagle_TRT.c **** 
  58:Src/Eagle_TRT.c **** extern TIM_HandleTypeDef htim2;
  59:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
  60:Src/Eagle_TRT.c **** 
  61:Src/Eagle_TRT.c **** ///IMU VARIABLES///
  62:Src/Eagle_TRT.c **** uint8_t ZERO = 0x00;
  63:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G = 0x8F;
  64:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G_VAL;
  65:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM = 0x8F;
  66:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM_VAL;
  67:Src/Eagle_TRT.c **** 
  68:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_ADD = 0x20;
  69:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_VAL = 0x0F;
  70:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_ADD = 0x23;
  71:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_VAL = 0x10;
  72:Src/Eagle_TRT.c **** 
  73:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_ADD = 0x20;
  74:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_VAL = 0xA7;
  75:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_ADD = 0x21;
  76:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_VAL = 0x08;
  77:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_ADD = 0x24;
  78:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_VAL = 0x70;
  79:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_ADD = 0x25;
  80:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_VAL = 0x20;
  81:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_ADD = 0x26;
  82:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_VAL = 0x00;
  83:Src/Eagle_TRT.c **** 
  84:Src/Eagle_TRT.c **** // GYROSCOPE SCALE SETTING
  85:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G = 0x23;
  86:Src/Eagle_TRT.c **** 
  87:Src/Eagle_TRT.c **** uint8_t SCL_G_245 = 0x00;
  88:Src/Eagle_TRT.c **** uint8_t SCL_G_500 = 0x10;
  89:Src/Eagle_TRT.c **** uint8_t SCL_G_1000 = 0x20;
ARM GAS  /tmp/ccYuDwjm.s 			page 3


  90:Src/Eagle_TRT.c **** uint8_t SCL_G_2000 = 0x30;
  91:Src/Eagle_TRT.c **** 
  92:Src/Eagle_TRT.c **** // ACCELERORMETER SCALE SETTING
  93:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM = 0x21;
  94:Src/Eagle_TRT.c **** 
  95:Src/Eagle_TRT.c **** uint8_t SCL_A_2 = 0x00;
  96:Src/Eagle_TRT.c **** uint8_t SCL_A_4 = 0x08;
  97:Src/Eagle_TRT.c **** uint8_t SCL_A_6 = 0x10;
  98:Src/Eagle_TRT.c **** uint8_t SCL_A_8 = 0x18;
  99:Src/Eagle_TRT.c **** uint8_t SCL_A_16 = 0x20;
 100:Src/Eagle_TRT.c **** 
 101:Src/Eagle_TRT.c **** // MAGNETORMETER SCALE SETTING
 102:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM = 0x25;
 103:Src/Eagle_TRT.c **** 
 104:Src/Eagle_TRT.c **** uint8_t SCL_M_2 = 0x00;
 105:Src/Eagle_TRT.c **** uint8_t SCL_M_4 = 0x20;
 106:Src/Eagle_TRT.c **** uint8_t SCL_M_8 = 0x40;
 107:Src/Eagle_TRT.c **** uint8_t SCL_M_12 = 0x60;
 108:Src/Eagle_TRT.c **** 
 109:Src/Eagle_TRT.c **** // OUTPUT REG
 110:Src/Eagle_TRT.c **** uint8_t OUT_X_L_G_ADD = 0xA8;
 111:Src/Eagle_TRT.c **** uint8_t OUT_X_H_G_ADD = 0xA9;
 112:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_G_ADD = 0xAA;
 113:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_G_ADD = 0xAB;
 114:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_G_ADD = 0xAC;
 115:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_G_ADD = 0xAD;
 116:Src/Eagle_TRT.c **** 
 117:Src/Eagle_TRT.c **** uint8_t OUT_X_L_A_ADD = 0xA8;
 118:Src/Eagle_TRT.c **** uint8_t OUT_X_H_A_ADD = 0xA9;
 119:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_A_ADD = 0xAA;
 120:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_A_ADD = 0xAB;
 121:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_A_ADD = 0xAC;
 122:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_A_ADD = 0xAD;
 123:Src/Eagle_TRT.c **** 
 124:Src/Eagle_TRT.c **** imu_stc imu;
 125:Src/Eagle_TRT.c **** imu_stc accel;
 126:Src/Eagle_TRT.c **** imu_stc gyro;
 127:Src/Eagle_TRT.c **** can_stc can;
 128:Src/Eagle_TRT.c **** 
 129:Src/Eagle_TRT.c **** void send_config(GPIO_TypeDef *pinx, uint16_t pinn, uint8_t *addr, uint8_t *val)
 130:Src/Eagle_TRT.c **** {
 131:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 132:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 133:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 134:Src/Eagle_TRT.c **** 	{
 135:Src/Eagle_TRT.c **** 	}										 //delay (must be >5ns)
 136:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu.hspi, addr, 1, 10); ///Writing the address
 137:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu.hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 138:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 139:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 140:Src/Eagle_TRT.c **** 	{
 141:Src/Eagle_TRT.c **** 	}											 //delay (must be >5ns)
 142:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_SET); ///CS_InUse to 1
 143:Src/Eagle_TRT.c **** }
 144:Src/Eagle_TRT.c **** 
 145:Src/Eagle_TRT.c **** //accelerometer, gyroscope and magnetometer initialization
 146:Src/Eagle_TRT.c **** //call this function before requesting data from the sensor
ARM GAS  /tmp/ccYuDwjm.s 			page 4


 147:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 148:Src/Eagle_TRT.c **** void LSMD9S0_accel_gyro_init(imu_stc *accel, imu_stc *gyro)
 149:Src/Eagle_TRT.c **** {
 150:Src/Eagle_TRT.c **** 
 151:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 152:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 153:Src/Eagle_TRT.c **** 
 154:Src/Eagle_TRT.c **** 	// Wake Up Gyro, enabling x, y, z axis
 155:Src/Eagle_TRT.c **** 	send_config(gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_G_ADD, (uint8_t *)&CTRL
 156:Src/Eagle_TRT.c **** 
 157:Src/Eagle_TRT.c **** 	// Wake Up Accel, enabling x, y, z axis
 158:Src/Eagle_TRT.c **** 	send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_XM_ADD, (uint8_t *)&C
 159:Src/Eagle_TRT.c **** 
 160:Src/Eagle_TRT.c **** 	send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG5_XM_ADD, (uint8_t *)&C
 161:Src/Eagle_TRT.c **** 	send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8_t *)&C
 162:Src/Eagle_TRT.c **** 	send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8_t *)&C
 163:Src/Eagle_TRT.c **** 
 164:Src/Eagle_TRT.c **** 	// Set Gyro scale range
 165:Src/Eagle_TRT.c **** 	switch (gyro->scale)
 166:Src/Eagle_TRT.c **** 	{
 167:Src/Eagle_TRT.c **** 	case 245:
 168:Src/Eagle_TRT.c **** 		send_config(gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&SCL_G_2
 169:Src/Eagle_TRT.c **** 		break;
 170:Src/Eagle_TRT.c **** 	case 500:
 171:Src/Eagle_TRT.c **** 		send_config(gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&SCL_G_5
 172:Src/Eagle_TRT.c **** 		break;
 173:Src/Eagle_TRT.c **** 	case 1000:
 174:Src/Eagle_TRT.c **** 		send_config(gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&SCL_G_1
 175:Src/Eagle_TRT.c **** 		break;
 176:Src/Eagle_TRT.c **** 	case 2000:
 177:Src/Eagle_TRT.c **** 		send_config(gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&SCL_G_2
 178:Src/Eagle_TRT.c **** 		break;
 179:Src/Eagle_TRT.c **** 	default:
 180:Src/Eagle_TRT.c **** 		send_config(gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&SCL_G_2
 181:Src/Eagle_TRT.c **** 		gyro->scale = 500;
 182:Src/Eagle_TRT.c **** 		break;
 183:Src/Eagle_TRT.c **** 	}
 184:Src/Eagle_TRT.c **** 
 185:Src/Eagle_TRT.c **** 	// Set Accel scale range
 186:Src/Eagle_TRT.c **** 	switch (accel->scale)
 187:Src/Eagle_TRT.c **** 	{
 188:Src/Eagle_TRT.c **** 	case 2:
 189:Src/Eagle_TRT.c **** 		send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t *)&SCL_
 190:Src/Eagle_TRT.c **** 		break;
 191:Src/Eagle_TRT.c **** 	case 4:
 192:Src/Eagle_TRT.c **** 		send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t *)&SCL_
 193:Src/Eagle_TRT.c **** 		break;
 194:Src/Eagle_TRT.c **** 	case 6:
 195:Src/Eagle_TRT.c **** 		send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t *)&SCL_
 196:Src/Eagle_TRT.c **** 		break;
 197:Src/Eagle_TRT.c **** 	case 8:
 198:Src/Eagle_TRT.c **** 		send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t *)&SCL_
 199:Src/Eagle_TRT.c **** 		break;
 200:Src/Eagle_TRT.c **** 	case 16:
 201:Src/Eagle_TRT.c **** 		send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t *)&SCL_
 202:Src/Eagle_TRT.c **** 		break;
 203:Src/Eagle_TRT.c **** 	default:
ARM GAS  /tmp/ccYuDwjm.s 			page 5


 204:Src/Eagle_TRT.c **** 		send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t *)&SCL_
 205:Src/Eagle_TRT.c **** 		accel->scale = 4;
 206:Src/Eagle_TRT.c **** 		break;
 207:Src/Eagle_TRT.c **** 	}
 208:Src/Eagle_TRT.c **** 
 209:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 210:Src/Eagle_TRT.c **** 
 211:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(&huart2, (uint8_t *)"<IMU> Initialization -> Done\r\n", 26, 10);
 212:Src/Eagle_TRT.c **** }
 213:Src/Eagle_TRT.c **** 
 214:Src/Eagle_TRT.c **** float LSMD9S0_read(imu_stc *imu)
 215:Src/Eagle_TRT.c **** {
 216:Src/Eagle_TRT.c **** 
 217:Src/Eagle_TRT.c **** 	uint8_t OUT_L_VAL;
 218:Src/Eagle_TRT.c **** 	uint8_t OUT_H_VAL;
 219:Src/Eagle_TRT.c **** 
 220:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 221:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 222:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 223:Src/Eagle_TRT.c **** 	{
 224:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 225:Src/Eagle_TRT.c **** 
 226:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_L), 1, 10);		  ///Writing LOW address
 227:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 228:Src/Eagle_TRT.c **** 
 229:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 230:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 231:Src/Eagle_TRT.c **** 	{
 232:Src/Eagle_TRT.c **** 	}																		//delay (must be >5ns)
 233:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 234:Src/Eagle_TRT.c **** 
 235:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 236:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 237:Src/Eagle_TRT.c **** 	{
 238:Src/Eagle_TRT.c **** 	}																		  //delay (must be >5ns)
 239:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 240:Src/Eagle_TRT.c **** 
 241:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_H), 1, 10);		  ///Writing HIGH address
 242:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 243:Src/Eagle_TRT.c **** 
 244:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 245:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 246:Src/Eagle_TRT.c **** 	{
 247:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 248:Src/Eagle_TRT.c **** 
 249:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 250:Src/Eagle_TRT.c **** 
 251:Src/Eagle_TRT.c **** 	///CALCULATING ROTATION
 252:Src/Eagle_TRT.c **** 	uint32_t value = (OUT_H_VAL << 8) | OUT_L_VAL; ///Calculating axis value shifting and using a logi
 253:Src/Eagle_TRT.c **** 	float axis = value;
 254:Src/Eagle_TRT.c **** 
 255:Src/Eagle_TRT.c **** 	return axis;
 256:Src/Eagle_TRT.c **** }
 257:Src/Eagle_TRT.c **** 
 258:Src/Eagle_TRT.c **** int LSMD9S0_check(imu_stc *imu)
 259:Src/Eagle_TRT.c **** {
 260:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccYuDwjm.s 			page 6


 261:Src/Eagle_TRT.c **** 	int check = 0;
 262:Src/Eagle_TRT.c **** 
 263:Src/Eagle_TRT.c **** 	///AXEL/MAGN ARE WORKING
 264:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); ///CS_XM to 0
 265:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 266:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 267:Src/Eagle_TRT.c **** 	{
 268:Src/Eagle_TRT.c **** 	}															 //delay (must be >5ns)
 269:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_XM, 1, 10); ///Writing on register ----> (uint8_t
 270:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_XM_VAL, 1, 10);
 271:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 272:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 273:Src/Eagle_TRT.c **** 	{
 274:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 275:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 276:Src/Eagle_TRT.c **** 
 277:Src/Eagle_TRT.c **** 	///GYRO IS WORKING
 278:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); ///CS_G to 0
 279:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 280:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 281:Src/Eagle_TRT.c **** 	{
 282:Src/Eagle_TRT.c **** 	}															//delay (must be >5ns)
 283:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_G, 1, 10); ///Writing on register ----> (uint8_t*
 284:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 285:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_G_VAL, 1, 10);
 286:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 287:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 288:Src/Eagle_TRT.c **** 	{
 289:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 290:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 291:Src/Eagle_TRT.c **** 
 292:Src/Eagle_TRT.c **** 	char imu_str[100];
 293:Src/Eagle_TRT.c **** 
 294:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 295:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 296:Src/Eagle_TRT.c **** 	{
 297:Src/Eagle_TRT.c **** 		check = 1;
 298:Src/Eagle_TRT.c **** 	}
 299:Src/Eagle_TRT.c **** 	else
 300:Src/Eagle_TRT.c **** 	{
 301:Src/Eagle_TRT.c **** 		check = 0;
 302:Src/Eagle_TRT.c **** 	}
 303:Src/Eagle_TRT.c **** 
 304:Src/Eagle_TRT.c **** 	return check;
 305:Src/Eagle_TRT.c **** }
 306:Src/Eagle_TRT.c **** 
 307:Src/Eagle_TRT.c **** // Request inital axis values, average them, set as initial offsets
 308:Src/Eagle_TRT.c **** void LSM9DS0_calibration(imu_stc *imu)
 309:Src/Eagle_TRT.c **** {
 310:Src/Eagle_TRT.c **** 	double x = 0, y = 0, z = 0;
 311:Src/Eagle_TRT.c **** 	int iterations = 200;
 312:Src/Eagle_TRT.c **** 	for (int i = 0; i < iterations; i++)
 313:Src/Eagle_TRT.c **** 	{
 314:Src/Eagle_TRT.c **** 		LSMD9S0_accel_read(imu);
 315:Src/Eagle_TRT.c **** 		imu_elaborate_data(imu);
 316:Src/Eagle_TRT.c **** 		x += imu->x;
 317:Src/Eagle_TRT.c **** 		y += imu->y;
ARM GAS  /tmp/ccYuDwjm.s 			page 7


 318:Src/Eagle_TRT.c **** 		z += imu->z;
 319:Src/Eagle_TRT.c **** 		HAL_Delay(1);
 320:Src/Eagle_TRT.c **** 	}
 321:Src/Eagle_TRT.c **** 
 322:Src/Eagle_TRT.c **** 	imu->x_offset = x / iterations;
 323:Src/Eagle_TRT.c **** 	imu->y_offset = y / iterations;
 324:Src/Eagle_TRT.c **** 	imu->z_offset = z / iterations;
 325:Src/Eagle_TRT.c **** 
 326:Src/Eagle_TRT.c **** 	imu->calibration_done = 1;
 327:Src/Eagle_TRT.c **** }
 328:Src/Eagle_TRT.c **** 
 329:Src/Eagle_TRT.c **** //Reading G_axis values
 330:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 331:Src/Eagle_TRT.c **** //x = pointer gyroscope x variable
 332:Src/Eagle_TRT.c **** //y = pointer gyroscope y variable
 333:Src/Eagle_TRT.c **** //z = pointer gyroscope z variable
 334:Src/Eagle_TRT.c **** //x_offset = offset x value
 335:Src/Eagle_TRT.c **** //y_offset = offset y value
 336:Src/Eagle_TRT.c **** //z_offset = offset z value
 337:Src/Eagle_TRT.c **** void LSMD9S0_gyro_read(imu_stc *imu)
 338:Src/Eagle_TRT.c **** {
 339:Src/Eagle_TRT.c **** 
 340:Src/Eagle_TRT.c **** 	imu->GPIOx_InUse = GPIOA;
 341:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_8;
 342:Src/Eagle_TRT.c **** 
 343:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_X_H_G_ADD;
 344:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_G_ADD;
 345:Src/Eagle_TRT.c **** 	imu->x = LSMD9S0_read(imu);
 346:Src/Eagle_TRT.c **** 
 347:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Y_H_G_ADD;
 348:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_G_ADD;
 349:Src/Eagle_TRT.c **** 	imu->y = LSMD9S0_read(imu);
 350:Src/Eagle_TRT.c **** 
 351:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Z_H_G_ADD;
 352:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_G_ADD;
 353:Src/Eagle_TRT.c **** 	imu->z = LSMD9S0_read(imu);
 354:Src/Eagle_TRT.c **** 
 355:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 356:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 357:Src/Eagle_TRT.c **** 	{
 358:Src/Eagle_TRT.c **** 		imu->error_flag = 0;
 359:Src/Eagle_TRT.c **** 	}
 360:Src/Eagle_TRT.c **** 	else
 361:Src/Eagle_TRT.c **** 	{
 362:Src/Eagle_TRT.c **** 		imu->error_flag = 1;
 363:Src/Eagle_TRT.c **** 	}
 364:Src/Eagle_TRT.c **** }
 365:Src/Eagle_TRT.c **** 
 366:Src/Eagle_TRT.c **** // Elaborating data
 367:Src/Eagle_TRT.c **** // Use the setted scale to calculate data in the correct ranges
 368:Src/Eagle_TRT.c **** // Aveage an array to remove noise
 369:Src/Eagle_TRT.c **** // Remove inital offset
 370:Src/Eagle_TRT.c **** void imu_elaborate_data(imu_stc *imu)
 371:Src/Eagle_TRT.c **** {
 372:Src/Eagle_TRT.c **** 	if (imu->x > 32768)
 373:Src/Eagle_TRT.c **** 	{
 374:Src/Eagle_TRT.c **** 		imu->x -= 65536;
ARM GAS  /tmp/ccYuDwjm.s 			page 8


 375:Src/Eagle_TRT.c **** 	}
 376:Src/Eagle_TRT.c **** 	if (imu->y > 32768)
 377:Src/Eagle_TRT.c **** 	{
 378:Src/Eagle_TRT.c **** 		imu->y -= 65536;
 379:Src/Eagle_TRT.c **** 	}
 380:Src/Eagle_TRT.c **** 	if (imu->z > 32768)
 381:Src/Eagle_TRT.c **** 	{
 382:Src/Eagle_TRT.c **** 		imu->z -= 65536;
 383:Src/Eagle_TRT.c **** 	}
 384:Src/Eagle_TRT.c **** 
 385:Src/Eagle_TRT.c **** 	imu->x = imu->x * (imu->scale / 32768);
 386:Src/Eagle_TRT.c **** 	imu->y = imu->y * (imu->scale / 32768);
 387:Src/Eagle_TRT.c **** 	imu->z = imu->z * (imu->scale / 32768);
 388:Src/Eagle_TRT.c **** 
 389:Src/Eagle_TRT.c **** 	shift_array(imu->x_array, 10, imu->x);
 390:Src/Eagle_TRT.c **** 	shift_array(imu->y_array, 10, imu->y);
 391:Src/Eagle_TRT.c **** 	shift_array(imu->z_array, 10, imu->z);
 392:Src/Eagle_TRT.c **** 
 393:Src/Eagle_TRT.c **** 	imu->x = dynamic_average(imu->x_array, 10);
 394:Src/Eagle_TRT.c **** 	imu->y = dynamic_average(imu->y_array, 10);
 395:Src/Eagle_TRT.c **** 	imu->z = dynamic_average(imu->z_array, 10);
 396:Src/Eagle_TRT.c **** 
 397:Src/Eagle_TRT.c **** 	imu->x -= imu->x_offset;
 398:Src/Eagle_TRT.c **** 	imu->y -= imu->y_offset;
 399:Src/Eagle_TRT.c **** 	imu->z -= imu->z_offset;
 400:Src/Eagle_TRT.c **** }
 401:Src/Eagle_TRT.c **** 
 402:Src/Eagle_TRT.c **** ///Reading A_axis values
 403:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 404:Src/Eagle_TRT.c **** //x = pointer gyroscope x variable
 405:Src/Eagle_TRT.c **** //y = pointer gyroscope y variable
 406:Src/Eagle_TRT.c **** //z = pointer gyroscope z variable
 407:Src/Eagle_TRT.c **** //x_offset = offset x value
 408:Src/Eagle_TRT.c **** //y_offset = offset y value
 409:Src/Eagle_TRT.c **** //z_offset = offset z value
 410:Src/Eagle_TRT.c **** void LSMD9S0_accel_read(imu_stc *imu)
 411:Src/Eagle_TRT.c **** {
 412:Src/Eagle_TRT.c **** 
 413:Src/Eagle_TRT.c **** 	imu->GPIOx_InUse = GPIOC;
 414:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_9;
 415:Src/Eagle_TRT.c **** 
 416:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_X_H_A_ADD;
 417:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_A_ADD;
 418:Src/Eagle_TRT.c **** 	imu->x = LSMD9S0_read(imu);
 419:Src/Eagle_TRT.c **** 
 420:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Y_H_A_ADD;
 421:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_A_ADD;
 422:Src/Eagle_TRT.c **** 	imu->y = LSMD9S0_read(imu);
 423:Src/Eagle_TRT.c **** 
 424:Src/Eagle_TRT.c **** 	imu->REG_H = OUT_Z_H_A_ADD;
 425:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_A_ADD;
 426:Src/Eagle_TRT.c **** 	imu->z = LSMD9S0_read(imu);
 427:Src/Eagle_TRT.c **** }
 428:Src/Eagle_TRT.c **** 
 429:Src/Eagle_TRT.c **** #endif
 430:Src/Eagle_TRT.c **** 
 431:Src/Eagle_TRT.c **** #ifdef HAL_CAN_MODULE_ENABLED
ARM GAS  /tmp/ccYuDwjm.s 			page 9


 432:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_can.h"
 433:Src/Eagle_TRT.c **** //function that sends an array via CAN
 434:Src/Eagle_TRT.c **** //hcan = pointer to can port
 435:Src/Eagle_TRT.c **** //id = id of the message to be sent
 436:Src/Eagle_TRT.c **** //dataTx = pointer to array that contains the data to be sent
 437:Src/Eagle_TRT.c **** //size = size of the array
 438:Src/Eagle_TRT.c **** can_stc can;
 439:Src/Eagle_TRT.c **** int CAN_Send(can_stc *can)
 440:Src/Eagle_TRT.c **** {
 441:Src/Eagle_TRT.c **** 
 442:Src/Eagle_TRT.c **** 	uint32_t mailbox;
 443:Src/Eagle_TRT.c **** 	uint8_t flag = 0;
 444:Src/Eagle_TRT.c **** 
 445:Src/Eagle_TRT.c **** 	CAN_TxHeaderTypeDef TxHeader;
 446:Src/Eagle_TRT.c **** 	TxHeader.StdId = can->id;
 447:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 448:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 449:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 450:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 451:Src/Eagle_TRT.c **** 
 452:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetTxMailboxesFreeLevel(can->hcan) != 0 && HAL_CAN_IsTxMessagePending(can->hcan, CAN_T
 453:Src/Eagle_TRT.c **** 	{
 454:Src/Eagle_TRT.c **** 		HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx, &mailbox);
 455:Src/Eagle_TRT.c **** 		flag = 1;
 456:Src/Eagle_TRT.c **** 	}
 457:Src/Eagle_TRT.c **** 
 458:Src/Eagle_TRT.c **** 	return flag;
 459:Src/Eagle_TRT.c **** }
 460:Src/Eagle_TRT.c **** 
 461:Src/Eagle_TRT.c **** //receive a buffer from the CAN communication
 462:Src/Eagle_TRT.c **** //you can call this function in the callback of the CAN interrupt
 463:Src/Eagle_TRT.c **** //hcan = pointer to can port
 464:Src/Eagle_TRT.c **** //DataRx = pointer to the buffer you are receiveng
 465:Src/Eagle_TRT.c **** //size = size of the buffer you are using
 466:Src/Eagle_TRT.c **** int CAN_Receive(can_stc *can)
 467:Src/Eagle_TRT.c **** {
 468:Src/Eagle_TRT.c **** 
 469:Src/Eagle_TRT.c **** 	CAN_RxHeaderTypeDef RxHeader;
 470:Src/Eagle_TRT.c **** 
 471:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetRxFifoFillLevel(can->hcan, CAN_RX_FIFO0) != 0)
 472:Src/Eagle_TRT.c **** 	{
 473:Src/Eagle_TRT.c **** 		HAL_CAN_GetRxMessage(can->hcan, CAN_RX_FIFO0, &RxHeader, can->dataRx);
 474:Src/Eagle_TRT.c **** 	}
 475:Src/Eagle_TRT.c **** 
 476:Src/Eagle_TRT.c **** 	int id = RxHeader.StdId;
 477:Src/Eagle_TRT.c **** 
 478:Src/Eagle_TRT.c **** 	return id;
 479:Src/Eagle_TRT.c **** }
 480:Src/Eagle_TRT.c **** #endif
 481:Src/Eagle_TRT.c **** 
 482:Src/Eagle_TRT.c **** #ifdef HAL_UART_MODULE_ENABLED
 483:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_uart.h"
 484:Src/Eagle_TRT.c **** #include "malloc.h"
 485:Src/Eagle_TRT.c **** ///---- queue ---- ///
 486:Src/Eagle_TRT.c **** static int next(int ret, int dim)
 487:Src/Eagle_TRT.c **** {
  27              		.loc 1 487 0
ARM GAS  /tmp/ccYuDwjm.s 			page 10


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 488:Src/Eagle_TRT.c **** 
 489:Src/Eagle_TRT.c **** 	return (ret + 1) % dim;
  33              		.loc 1 489 0
  34 0000 0130     		adds	r0, r0, #1
  35              	.LVL1:
  36 0002 90FBF1F3 		sdiv	r3, r0, r1
 490:Src/Eagle_TRT.c **** }
  37              		.loc 1 490 0
  38 0006 01FB1300 		mls	r0, r1, r3, r0
  39              	.LVL2:
  40 000a 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE141:
  44              		.section	.text.emptyp,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	emptyp:
  52              	.LFB143:
 491:Src/Eagle_TRT.c **** 
 492:Src/Eagle_TRT.c **** // Implementazione dinamica
 493:Src/Eagle_TRT.c **** void init(queue *q)
 494:Src/Eagle_TRT.c **** {
 495:Src/Eagle_TRT.c **** 
 496:Src/Eagle_TRT.c **** 	q->tail = q->head = 0;
 497:Src/Eagle_TRT.c **** 	q->dim = 40;
 498:Src/Eagle_TRT.c **** }
 499:Src/Eagle_TRT.c **** 
 500:Src/Eagle_TRT.c **** static int emptyp(const queue *q)
 501:Src/Eagle_TRT.c **** {
  53              		.loc 1 501 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL3:
 502:Src/Eagle_TRT.c **** 
 503:Src/Eagle_TRT.c **** 	return (q->tail == q->head);
  59              		.loc 1 503 0
  60 0000 4268     		ldr	r2, [r0, #4]
  61 0002 0068     		ldr	r0, [r0]
  62              	.LVL4:
 504:Src/Eagle_TRT.c **** }
  63              		.loc 1 504 0
  64 0004 8242     		cmp	r2, r0
  65 0006 14BF     		ite	ne
  66 0008 0020     		movne	r0, #0
  67 000a 0120     		moveq	r0, #1
  68 000c 7047     		bx	lr
  69              		.cfi_endproc
ARM GAS  /tmp/ccYuDwjm.s 			page 11


  70              	.LFE143:
  72              		.section	.text.fullp,"ax",%progbits
  73              		.align	1
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	fullp:
  80              	.LFB144:
 505:Src/Eagle_TRT.c **** 
 506:Src/Eagle_TRT.c **** static int fullp(const queue *q)
 507:Src/Eagle_TRT.c **** {
  81              		.loc 1 507 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL5:
  86 0000 10B5     		push	{r4, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  91 0002 0446     		mov	r4, r0
 508:Src/Eagle_TRT.c **** 
 509:Src/Eagle_TRT.c **** 	return (next(q->tail, q->dim) == q->head);
  92              		.loc 1 509 0
  93 0004 8168     		ldr	r1, [r0, #8]
  94 0006 4068     		ldr	r0, [r0, #4]
  95              	.LVL6:
  96 0008 FFF7FEFF 		bl	next
  97              	.LVL7:
  98 000c 2368     		ldr	r3, [r4]
 510:Src/Eagle_TRT.c **** }
  99              		.loc 1 510 0
 100 000e 9842     		cmp	r0, r3
 101 0010 14BF     		ite	ne
 102 0012 0020     		movne	r0, #0
 103 0014 0120     		moveq	r0, #1
 104 0016 10BD     		pop	{r4, pc}
 105              		.cfi_endproc
 106              	.LFE144:
 108              		.section	.text.checksum,"ax",%progbits
 109              		.align	1
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	checksum:
 116              	.LFB151:
 511:Src/Eagle_TRT.c **** 
 512:Src/Eagle_TRT.c **** int push(char *str, queue *q)
 513:Src/Eagle_TRT.c **** {
 514:Src/Eagle_TRT.c **** 	int res;
 515:Src/Eagle_TRT.c **** 	if (fullp(q))
 516:Src/Eagle_TRT.c **** 	{
 517:Src/Eagle_TRT.c **** 		res = FAIL;
 518:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccYuDwjm.s 			page 12


 519:Src/Eagle_TRT.c **** 	else
 520:Src/Eagle_TRT.c **** 	{
 521:Src/Eagle_TRT.c **** 		int length = strlen(str);
 522:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 523:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 524:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 525:Src/Eagle_TRT.c **** 		if (q->tail == 39)
 526:Src/Eagle_TRT.c **** 		{
 527:Src/Eagle_TRT.c **** 			q->tail = 0;
 528:Src/Eagle_TRT.c **** 		}
 529:Src/Eagle_TRT.c **** 		else
 530:Src/Eagle_TRT.c **** 		{
 531:Src/Eagle_TRT.c **** 			q->tail++;
 532:Src/Eagle_TRT.c **** 		}
 533:Src/Eagle_TRT.c **** 		res = OK;
 534:Src/Eagle_TRT.c **** 	}
 535:Src/Eagle_TRT.c **** 
 536:Src/Eagle_TRT.c **** 	return res;
 537:Src/Eagle_TRT.c **** }
 538:Src/Eagle_TRT.c **** 
 539:Src/Eagle_TRT.c **** int pop(char *str, queue *q)
 540:Src/Eagle_TRT.c **** {
 541:Src/Eagle_TRT.c **** 	int res;
 542:Src/Eagle_TRT.c **** 	if (emptyp(q))
 543:Src/Eagle_TRT.c **** 	{
 544:Src/Eagle_TRT.c **** 		res = FAIL;
 545:Src/Eagle_TRT.c **** 	}
 546:Src/Eagle_TRT.c **** 	else
 547:Src/Eagle_TRT.c **** 	{
 548:Src/Eagle_TRT.c **** 		strcpy(str, q->elem[q->head]);
 549:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 550:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 551:Src/Eagle_TRT.c **** 		if (q->head == 39)
 552:Src/Eagle_TRT.c **** 		{
 553:Src/Eagle_TRT.c **** 			q->head = 0;
 554:Src/Eagle_TRT.c **** 		}
 555:Src/Eagle_TRT.c **** 		else
 556:Src/Eagle_TRT.c **** 		{
 557:Src/Eagle_TRT.c **** 			q->head++;
 558:Src/Eagle_TRT.c **** 		}
 559:Src/Eagle_TRT.c **** 		res = OK;
 560:Src/Eagle_TRT.c **** 	}
 561:Src/Eagle_TRT.c **** 
 562:Src/Eagle_TRT.c **** 	return res;
 563:Src/Eagle_TRT.c **** }
 564:Src/Eagle_TRT.c **** /// ---- end queue ----///
 565:Src/Eagle_TRT.c **** queue print_q = {.head = 0, .tail = 0, .dim = 0};
 566:Src/Eagle_TRT.c **** 
 567:Src/Eagle_TRT.c **** int print(UART_HandleTypeDef *huart, char *text_print_function)
 568:Src/Eagle_TRT.c **** {
 569:Src/Eagle_TRT.c **** 
 570:Src/Eagle_TRT.c **** 	int ret = 0;
 571:Src/Eagle_TRT.c **** 
 572:Src/Eagle_TRT.c **** 	if (HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function)) == HA
 573:Src/Eagle_TRT.c **** 	{
 574:Src/Eagle_TRT.c **** 		ret = 1;
 575:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccYuDwjm.s 			page 13


 576:Src/Eagle_TRT.c **** 	else
 577:Src/Eagle_TRT.c **** 	{
 578:Src/Eagle_TRT.c **** 		if (push(text_print_function, &print_q) == FAIL)
 579:Src/Eagle_TRT.c **** 		{
 580:Src/Eagle_TRT.c **** 			ret = 0;
 581:Src/Eagle_TRT.c **** 		}
 582:Src/Eagle_TRT.c **** 		else
 583:Src/Eagle_TRT.c **** 		{
 584:Src/Eagle_TRT.c **** 			ret = 1;
 585:Src/Eagle_TRT.c **** 		}
 586:Src/Eagle_TRT.c **** 	}
 587:Src/Eagle_TRT.c **** 
 588:Src/Eagle_TRT.c **** 	return ret;
 589:Src/Eagle_TRT.c **** }
 590:Src/Eagle_TRT.c **** 
 591:Src/Eagle_TRT.c **** void print_it(UART_HandleTypeDef *huart)
 592:Src/Eagle_TRT.c **** { //put in the uart interrupt
 593:Src/Eagle_TRT.c **** 
 594:Src/Eagle_TRT.c **** 	char text_print_function[50];
 595:Src/Eagle_TRT.c **** 
 596:Src/Eagle_TRT.c **** 	if (pop(text_print_function, &print_q) == OK)
 597:Src/Eagle_TRT.c **** 	{
 598:Src/Eagle_TRT.c **** 		HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function));
 599:Src/Eagle_TRT.c **** 	}
 600:Src/Eagle_TRT.c **** }
 601:Src/Eagle_TRT.c **** 
 602:Src/Eagle_TRT.c **** UART_HandleTypeDef *huart_GPS;
 603:Src/Eagle_TRT.c **** int start_string_gps = 0;
 604:Src/Eagle_TRT.c **** char string_gps[100];
 605:Src/Eagle_TRT.c **** int cont_string, cont_comma;
 606:Src/Eagle_TRT.c **** char data_string_gps;
 607:Src/Eagle_TRT.c **** char buffer_gps[2];
 608:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum);
 609:Src/Eagle_TRT.c **** 
 610:Src/Eagle_TRT.c **** /* GPS library
 611:Src/Eagle_TRT.c **** 	gps_init() ->initialize the GPS. Put it in the main initialization. Example:
 612:Src/Eagle_TRT.c **** 	gps_struct gps_main; //define the name of gps_structure istance
 613:Src/Eagle_TRT.c **** 	if(gps_init(&huart3,&gps_main)==0){
 614:Src/Eagle_TRT.c **** 		/--error--/
 615:Src/Eagle_TRT.c **** 	}
 616:Src/Eagle_TRT.c **** 	gps_read_it() -> put it in interrupt. Example:
 617:Src/Eagle_TRT.c **** 	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 618:Src/Eagle_TRT.c **** 		gps_read_it(huart,&gps_main);
 619:Src/Eagle_TRT.c **** 	}*/
 620:Src/Eagle_TRT.c **** 
 621:Src/Eagle_TRT.c **** int gps_init(UART_HandleTypeDef *huart, gps_struct *gps)
 622:Src/Eagle_TRT.c **** { //initialization of GPS
 623:Src/Eagle_TRT.c **** 
 624:Src/Eagle_TRT.c **** 	//if return--> 0=error,1=ok
 625:Src/Eagle_TRT.c **** 	huart_GPS = huart;
 626:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 627:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 628:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 629:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 630:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 631:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 632:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
ARM GAS  /tmp/ccYuDwjm.s 			page 14


 633:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 634:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 635:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 636:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 637:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 638:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 639:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 640:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 641:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 642:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 643:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 644:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 645:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 646:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 647:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
 648:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 649:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 650:Src/Eagle_TRT.c **** 
 651:Src/Eagle_TRT.c **** 	return 1;
 652:Src/Eagle_TRT.c **** }
 653:Src/Eagle_TRT.c **** 
 654:Src/Eagle_TRT.c **** int gps_read_it(UART_HandleTypeDef *huart, gps_struct *gps)
 655:Src/Eagle_TRT.c **** {
 656:Src/Eagle_TRT.c **** 
 657:Src/Eagle_TRT.c **** 	int ret = 0; //return--> 0=error,1=ok
 658:Src/Eagle_TRT.c **** 
 659:Src/Eagle_TRT.c **** 	/*
 660:Src/Eagle_TRT.c **** 			* Example of strings
 661:Src/Eagle_TRT.c **** 			* $GPGGA,064951.000,2307.1256,N,12016.4438,E,1,8,0.95,39.9,M,17.8,M,,*65
 662:Src/Eagle_TRT.c **** 			* $GPGSA,A,3,29,21,26,15,18,09,06,10,,,,,2.32,0.95,2.11*00
 663:Src/Eagle_TRT.c **** 			* $GPGSV,3,1,09,29,36,029,42,21,46,314,43,26,44,020,43,15,21,321,39*7D
 664:Src/Eagle_TRT.c **** 			  $GPGSV,3,2,09,18,26,314,40,09,57,170,44,06,20,229,37,10,26,084,37*77
 665:Src/Eagle_TRT.c **** 			  $GPGSV,3,3,09,07,,,26*73
 666:Src/Eagle_TRT.c **** 			* $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C
 667:Src/Eagle_TRT.c **** 			* $GPVTG,165.48,T,,M,0.03,N,0.06,K,A*37
 668:Src/Eagle_TRT.c **** 			* $PGTOP,11,3 *6F
 669:Src/Eagle_TRT.c **** 			*
 670:Src/Eagle_TRT.c **** 			*
 671:Src/Eagle_TRT.c **** 			*
 672:Src/Eagle_TRT.c **** 			* 	$GPBOD - Bearing, origin to destination
 673:Src/Eagle_TRT.c **** 				$GPBWC - Bearing and distance to waypoint, great circle
 674:Src/Eagle_TRT.c **** 				$GPGGA - Global Positioning System Fix Data
 675:Src/Eagle_TRT.c **** 				$GPGLL - Geographic position, latitude / longitude
 676:Src/Eagle_TRT.c **** 				$GPGSA - GPS DOP and active satellites
 677:Src/Eagle_TRT.c **** 				$GPGSV - GPS Satellites in view
 678:Src/Eagle_TRT.c **** 				$GPHDT - Heading, True
 679:Src/Eagle_TRT.c **** 				$GPR00 - List of waypoints in currently active route
 680:Src/Eagle_TRT.c **** 				$GPRMA - Recommended minimum specific Loran-C data
 681:Src/Eagle_TRT.c **** 				$GPRMB - Recommended minimum navigation info
 682:Src/Eagle_TRT.c **** 				$GPRMC - Recommended minimum specific GPS/Transit data
 683:Src/Eagle_TRT.c **** 				$GPRTE - Routes
 684:Src/Eagle_TRT.c **** 				$GPTRF - Transit Fix Data
 685:Src/Eagle_TRT.c **** 				$GPSTN - Multiple Data ID
 686:Src/Eagle_TRT.c **** 				$GPVBW - Dual Ground / Water Speed
 687:Src/Eagle_TRT.c **** 				$GPVTG - Track made good and ground speed
 688:Src/Eagle_TRT.c **** 				$GPWPL - Waypoint location
 689:Src/Eagle_TRT.c **** 				$GPXTE - Cross-track error, Measured
ARM GAS  /tmp/ccYuDwjm.s 			page 15


 690:Src/Eagle_TRT.c **** 				$GPZDA - Date & Time
 691:Src/Eagle_TRT.c **** 				http://aprs.gids.nl/nmea/
 692:Src/Eagle_TRT.c **** 			*/
 693:Src/Eagle_TRT.c **** 	if (huart == huart_GPS)
 694:Src/Eagle_TRT.c **** 	{
 695:Src/Eagle_TRT.c **** 		//check if it's the huart_gps interrupt
 696:Src/Eagle_TRT.c **** 		HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request interrupt for the next data
 697:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 698:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 699:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 700:Src/Eagle_TRT.c **** 			string_gps[cont_string] = data_string_gps; //save the data into the array
 701:Src/Eagle_TRT.c **** 			cont_string++;
 702:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 703:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 704:Src/Eagle_TRT.c **** 				cont_string--;
 705:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 706:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 707:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 708:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 709:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 710:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 711:Src/Eagle_TRT.c **** 						int cont_comma = 0, cont_latitude = 0, cont_longitude = 0, cont_altitude = 0, cont_time = 0;
 712:Src/Eagle_TRT.c **** 						for (int i = 5; i < 100; i++)
 713:Src/Eagle_TRT.c **** 						{
 714:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 715:Src/Eagle_TRT.c **** 								cont_comma++;
 716:Src/Eagle_TRT.c **** 							else
 717:Src/Eagle_TRT.c **** 							{
 718:Src/Eagle_TRT.c **** 								if (cont_comma == 1)
 719:Src/Eagle_TRT.c **** 								{ //save the time
 720:Src/Eagle_TRT.c **** 									gps->time[cont_time] = string_gps[i];
 721:Src/Eagle_TRT.c **** 									cont_time++;
 722:Src/Eagle_TRT.c **** 								}
 723:Src/Eagle_TRT.c **** 								else if (cont_comma == 2)
 724:Src/Eagle_TRT.c **** 								{ //save latitude
 725:Src/Eagle_TRT.c **** 									gps->latitude[cont_latitude] = string_gps[i];
 726:Src/Eagle_TRT.c **** 									cont_latitude++;
 727:Src/Eagle_TRT.c **** 								}
 728:Src/Eagle_TRT.c **** 								else if (cont_comma == 3)
 729:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 730:Src/Eagle_TRT.c **** 									gps->latitude_o[0] = string_gps[i];
 731:Src/Eagle_TRT.c **** 								}
 732:Src/Eagle_TRT.c **** 								else if (cont_comma == 4)
 733:Src/Eagle_TRT.c **** 								{ //save longitude
 734:Src/Eagle_TRT.c **** 									gps->longitude[cont_longitude] = string_gps[i];
 735:Src/Eagle_TRT.c **** 									cont_longitude++;
 736:Src/Eagle_TRT.c **** 								}
 737:Src/Eagle_TRT.c **** 								else if (cont_comma == 5)
 738:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 739:Src/Eagle_TRT.c **** 									gps->longitude_o[0] = string_gps[i];
 740:Src/Eagle_TRT.c **** 								}
 741:Src/Eagle_TRT.c **** 								else if (cont_comma == 6)
 742:Src/Eagle_TRT.c **** 								{
 743:Src/Eagle_TRT.c **** 									gps->fix_status = string_gps[i];
 744:Src/Eagle_TRT.c **** 								}
 745:Src/Eagle_TRT.c **** 								else if (cont_comma == 9)
 746:Src/Eagle_TRT.c **** 								{ //save altitude
ARM GAS  /tmp/ccYuDwjm.s 			page 16


 747:Src/Eagle_TRT.c **** 									gps->altitude[cont_altitude] = string_gps[i];
 748:Src/Eagle_TRT.c **** 									cont_altitude++;
 749:Src/Eagle_TRT.c **** 								}
 750:Src/Eagle_TRT.c **** 								else if (cont_comma == 10)
 751:Src/Eagle_TRT.c **** 								{
 752:Src/Eagle_TRT.c **** 									i = 100; //end the cicle
 753:Src/Eagle_TRT.c **** 								}
 754:Src/Eagle_TRT.c **** 							}
 755:Src/Eagle_TRT.c **** 						}
 756:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 757:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 758:Src/Eagle_TRT.c **** 						{
 759:Src/Eagle_TRT.c **** 							gps->latitude_i_h = 0;
 760:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 761:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
 762:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 763:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 764:Src/Eagle_TRT.c **** 						}
 765:Src/Eagle_TRT.c **** 						else
 766:Src/Eagle_TRT.c **** 						{
 767:Src/Eagle_TRT.c **** 							gps->latitude_i = (long int)(atof(gps->latitude) * 10000);
 768:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 769:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 770:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 771:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 772:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 773:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 774:Src/Eagle_TRT.c **** 						}
 775:Src/Eagle_TRT.c **** 
 776:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x08;
 777:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 778:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 779:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 780:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 781:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 782:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 783:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 784:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 785:Src/Eagle_TRT.c **** 						can.size = 8;
 786:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 787:Src/Eagle_TRT.c **** 					}
 788:Src/Eagle_TRT.c **** 					else
 789:Src/Eagle_TRT.c **** 					{
 790:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 791:Src/Eagle_TRT.c **** 					}
 792:Src/Eagle_TRT.c **** 				}
 793:Src/Eagle_TRT.c **** 				else if (string_gps[2] == 'V' && string_gps[3] == 'T' && string_gps[4] == 'G')
 794:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 795:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 796:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 797:Src/Eagle_TRT.c **** 						cont_comma = 0;
 798:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 799:Src/Eagle_TRT.c **** 						for (int i = 5; i < cont_string; i++)
 800:Src/Eagle_TRT.c **** 						{
 801:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 802:Src/Eagle_TRT.c **** 								cont_comma++;
 803:Src/Eagle_TRT.c **** 							else
ARM GAS  /tmp/ccYuDwjm.s 			page 17


 804:Src/Eagle_TRT.c **** 							{
 805:Src/Eagle_TRT.c **** 								if (cont_comma == 7)
 806:Src/Eagle_TRT.c **** 								{ //save the speed
 807:Src/Eagle_TRT.c **** 									gps->speed[cont_speed] = string_gps[i];
 808:Src/Eagle_TRT.c **** 									cont_speed++;
 809:Src/Eagle_TRT.c **** 								}
 810:Src/Eagle_TRT.c **** 								else if (cont_comma == 8)
 811:Src/Eagle_TRT.c **** 								{
 812:Src/Eagle_TRT.c **** 									i = cont_string;
 813:Src/Eagle_TRT.c **** 								}
 814:Src/Eagle_TRT.c **** 							}
 815:Src/Eagle_TRT.c **** 						}
 816:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 817:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 818:Src/Eagle_TRT.c **** 						{
 819:Src/Eagle_TRT.c **** 							gps->speed_i = 0;
 820:Src/Eagle_TRT.c **** 						}
 821:Src/Eagle_TRT.c **** 						else
 822:Src/Eagle_TRT.c **** 						{
 823:Src/Eagle_TRT.c **** 							gps->speed_i = (int)(atof(gps->speed) * 100);
 824:Src/Eagle_TRT.c **** 						}
 825:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x07;
 826:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 827:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 828:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 829:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 830:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 831:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 832:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 833:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 834:Src/Eagle_TRT.c **** 						can.size = 8;
 835:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 836:Src/Eagle_TRT.c **** 						ret = 1;
 837:Src/Eagle_TRT.c **** 					}
 838:Src/Eagle_TRT.c **** 					else
 839:Src/Eagle_TRT.c **** 					{
 840:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 841:Src/Eagle_TRT.c **** 					}
 842:Src/Eagle_TRT.c **** 				}
 843:Src/Eagle_TRT.c **** 			}
 844:Src/Eagle_TRT.c **** 		}
 845:Src/Eagle_TRT.c **** 		else
 846:Src/Eagle_TRT.c **** 		{
 847:Src/Eagle_TRT.c **** 			if (data_string_gps == '$')
 848:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 849:Src/Eagle_TRT.c **** 				start_string_gps = 1; //new string started
 850:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 851:Src/Eagle_TRT.c **** 			}
 852:Src/Eagle_TRT.c **** 		}
 853:Src/Eagle_TRT.c **** 	}
 854:Src/Eagle_TRT.c **** 	return ret;
 855:Src/Eagle_TRT.c **** }
 856:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
 857:Src/Eagle_TRT.c **** { //check the checksum
 117              		.loc 1 857 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccYuDwjm.s 			page 18


 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL8:
 122 0000 70B5     		push	{r4, r5, r6, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 4, -16
 126              		.cfi_offset 5, -12
 127              		.cfi_offset 6, -8
 128              		.cfi_offset 14, -4
 129 0002 82B0     		sub	sp, sp, #8
 130              	.LCFI2:
 131              		.cfi_def_cfa_offset 24
 132              	.LVL9:
 858:Src/Eagle_TRT.c **** 	//return 1;
 859:Src/Eagle_TRT.c **** 
 860:Src/Eagle_TRT.c **** 	int res = 0;
 861:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 862:Src/Eagle_TRT.c **** 	int i = 0;
 863:Src/Eagle_TRT.c **** 
 864:Src/Eagle_TRT.c **** 	for (i = 0; (i < size_string_checksum) && (string_checksum[i] != '*'); i++)
 133              		.loc 1 864 0
 134 0004 0023     		movs	r3, #0
 860:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 135              		.loc 1 860 0
 136 0006 1C46     		mov	r4, r3
 137              	.LVL10:
 138              	.L6:
 139              		.loc 1 864 0 discriminator 1
 140 0008 8B42     		cmp	r3, r1
 141 000a 02DA     		bge	.L7
 142              		.loc 1 864 0 is_stmt 0 discriminator 3
 143 000c C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 144 000e 2A2A     		cmp	r2, #42
 145 0010 1ED1     		bne	.L8
 146              	.L7:
 865:Src/Eagle_TRT.c **** 	{
 866:Src/Eagle_TRT.c **** 		res = res ^ string_checksum[i];
 867:Src/Eagle_TRT.c **** 	}
 868:Src/Eagle_TRT.c **** 	char check[2] = {string_checksum[i + 1], string_checksum[i + 2]};
 147              		.loc 1 868 0 is_stmt 1
 148 0012 1844     		add	r0, r0, r3
 149              	.LVL11:
 150 0014 4578     		ldrb	r5, [r0, #1]	@ zero_extendqisi2
 151 0016 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 869:Src/Eagle_TRT.c **** 	char res_char[3];
 870:Src/Eagle_TRT.c **** 	sprintf(res_char, "%x", res);
 152              		.loc 1 870 0
 153 0018 2246     		mov	r2, r4
 154 001a 1949     		ldr	r1, .L17
 155              	.LVL12:
 156 001c 01A8     		add	r0, sp, #4
 157 001e FFF7FEFF 		bl	sprintf
 158              	.LVL13:
 871:Src/Eagle_TRT.c **** 	if (res < 17)
 159              		.loc 1 871 0
 160 0022 102C     		cmp	r4, #16
 161 0024 06DC     		bgt	.L9
ARM GAS  /tmp/ccYuDwjm.s 			page 19


 872:Src/Eagle_TRT.c **** 	{
 873:Src/Eagle_TRT.c **** 		res_char[1] = res_char[0];
 162              		.loc 1 873 0
 163 0026 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 164 002a 8DF80530 		strb	r3, [sp, #5]
 874:Src/Eagle_TRT.c **** 		res_char[0] = '0';
 165              		.loc 1 874 0
 166 002e 3023     		movs	r3, #48
 167 0030 8DF80430 		strb	r3, [sp, #4]
 168              	.L9:
 860:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 169              		.loc 1 860 0 discriminator 1
 170 0034 0023     		movs	r3, #0
 171              	.L10:
 172              	.LVL14:
 173              	.LBB2:
 875:Src/Eagle_TRT.c **** 	}
 876:Src/Eagle_TRT.c **** 	for (int j = 0; j < 2; j++)
 174              		.loc 1 876 0 discriminator 1
 175 0036 012B     		cmp	r3, #1
 176 0038 0DDD     		ble	.L12
 177              	.LBE2:
 877:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 878:Src/Eagle_TRT.c **** 		if ((int)res_char[j] >= 'a' && (int)res_char[j] <= 'f')
 879:Src/Eagle_TRT.c **** 		{
 880:Src/Eagle_TRT.c **** 			res_char[j] = (char)((int)res_char[j] + offset_maiusc);
 881:Src/Eagle_TRT.c **** 		}
 882:Src/Eagle_TRT.c **** 	}
 883:Src/Eagle_TRT.c **** 	if (res_char[0] == check[0] && res_char[1] == check[1])
 178              		.loc 1 883 0
 179 003a 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 180              	.LVL15:
 181 003e 9D42     		cmp	r5, r3
 182 0040 19D1     		bne	.L14
 183              		.loc 1 883 0 is_stmt 0 discriminator 1
 184 0042 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 185 0046 9E42     		cmp	r6, r3
 186 0048 17D0     		beq	.L15
 884:Src/Eagle_TRT.c **** 	{
 885:Src/Eagle_TRT.c **** 		return 1; //checksum is correct
 886:Src/Eagle_TRT.c **** 	}
 887:Src/Eagle_TRT.c **** 	else
 888:Src/Eagle_TRT.c **** 	{
 889:Src/Eagle_TRT.c **** 		return 0; //checksum failed
 187              		.loc 1 889 0 is_stmt 1
 188 004a 0020     		movs	r0, #0
 189              	.L5:
 890:Src/Eagle_TRT.c **** 	}
 891:Src/Eagle_TRT.c **** }
 190              		.loc 1 891 0
 191 004c 02B0     		add	sp, sp, #8
 192              	.LCFI3:
 193              		.cfi_remember_state
 194              		.cfi_def_cfa_offset 16
 195              		@ sp needed
 196 004e 70BD     		pop	{r4, r5, r6, pc}
 197              	.LVL16:
ARM GAS  /tmp/ccYuDwjm.s 			page 20


 198              	.L8:
 199              	.LCFI4:
 200              		.cfi_restore_state
 866:Src/Eagle_TRT.c **** 	}
 201              		.loc 1 866 0 discriminator 4
 202 0050 5440     		eors	r4, r4, r2
 203              	.LVL17:
 864:Src/Eagle_TRT.c **** 	{
 204              		.loc 1 864 0 discriminator 4
 205 0052 0133     		adds	r3, r3, #1
 206              	.LVL18:
 207 0054 D8E7     		b	.L6
 208              	.LVL19:
 209              	.L12:
 210              	.LBB3:
 878:Src/Eagle_TRT.c **** 		{
 211              		.loc 1 878 0
 212 0056 02AA     		add	r2, sp, #8
 213 0058 1A44     		add	r2, r2, r3
 214 005a 12F8042C 		ldrb	r2, [r2, #-4]	@ zero_extendqisi2
 215 005e A2F16101 		sub	r1, r2, #97
 216 0062 C9B2     		uxtb	r1, r1
 217 0064 0529     		cmp	r1, #5
 218 0066 04D8     		bhi	.L11
 880:Src/Eagle_TRT.c **** 		}
 219              		.loc 1 880 0
 220 0068 203A     		subs	r2, r2, #32
 221 006a 02A9     		add	r1, sp, #8
 222 006c 1944     		add	r1, r1, r3
 223 006e 01F8042C 		strb	r2, [r1, #-4]
 224              	.L11:
 876:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 225              		.loc 1 876 0 discriminator 2
 226 0072 0133     		adds	r3, r3, #1
 227              	.LVL20:
 228 0074 DFE7     		b	.L10
 229              	.LVL21:
 230              	.L14:
 231              	.LBE3:
 889:Src/Eagle_TRT.c **** 	}
 232              		.loc 1 889 0
 233 0076 0020     		movs	r0, #0
 234 0078 E8E7     		b	.L5
 235              	.L15:
 885:Src/Eagle_TRT.c **** 	}
 236              		.loc 1 885 0
 237 007a 0120     		movs	r0, #1
 238 007c E6E7     		b	.L5
 239              	.L18:
 240 007e 00BF     		.align	2
 241              	.L17:
 242 0080 00000000 		.word	.LC0
 243              		.cfi_endproc
 244              	.LFE151:
 246              		.section	.text.send_config,"ax",%progbits
 247              		.align	1
 248              		.global	send_config
ARM GAS  /tmp/ccYuDwjm.s 			page 21


 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	send_config:
 255              	.LFB131:
 130:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 256              		.loc 1 130 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL22:
 261 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 262              	.LCFI5:
 263              		.cfi_def_cfa_offset 24
 264              		.cfi_offset 4, -24
 265              		.cfi_offset 5, -20
 266              		.cfi_offset 6, -16
 267              		.cfi_offset 7, -12
 268              		.cfi_offset 8, -8
 269              		.cfi_offset 14, -4
 270 0004 0546     		mov	r5, r0
 271 0006 0E46     		mov	r6, r1
 272 0008 9046     		mov	r8, r2
 273 000a 1F46     		mov	r7, r3
 131:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 274              		.loc 1 131 0
 275 000c 0022     		movs	r2, #0
 276              	.LVL23:
 277 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 278              	.LVL24:
 132:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 279              		.loc 1 132 0
 280 0012 124B     		ldr	r3, .L23
 281 0014 1A68     		ldr	r2, [r3]
 282 0016 0023     		movs	r3, #0
 283 0018 5362     		str	r3, [r2, #36]
 284              	.L20:
 133:Src/Eagle_TRT.c **** 	{
 285              		.loc 1 133 0 discriminator 1
 286 001a 536A     		ldr	r3, [r2, #36]
 287 001c 142B     		cmp	r3, #20
 288 001e FCD9     		bls	.L20
 136:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu.hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 289              		.loc 1 136 0
 290 0020 0F4C     		ldr	r4, .L23+4
 291 0022 0A23     		movs	r3, #10
 292 0024 0122     		movs	r2, #1
 293 0026 4146     		mov	r1, r8
 294 0028 D4F83002 		ldr	r0, [r4, #560]
 295 002c FFF7FEFF 		bl	HAL_SPI_Transmit
 296              	.LVL25:
 137:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 297              		.loc 1 137 0
 298 0030 0A23     		movs	r3, #10
 299 0032 0122     		movs	r2, #1
 300 0034 3946     		mov	r1, r7
ARM GAS  /tmp/ccYuDwjm.s 			page 22


 301 0036 D4F83002 		ldr	r0, [r4, #560]
 302 003a FFF7FEFF 		bl	HAL_SPI_Transmit
 303              	.LVL26:
 138:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 304              		.loc 1 138 0
 305 003e 074B     		ldr	r3, .L23
 306 0040 1A68     		ldr	r2, [r3]
 307 0042 0023     		movs	r3, #0
 308 0044 5362     		str	r3, [r2, #36]
 309              	.L21:
 139:Src/Eagle_TRT.c **** 	{
 310              		.loc 1 139 0 discriminator 1
 311 0046 536A     		ldr	r3, [r2, #36]
 312 0048 142B     		cmp	r3, #20
 313 004a FCD9     		bls	.L21
 142:Src/Eagle_TRT.c **** }
 314              		.loc 1 142 0
 315 004c 0122     		movs	r2, #1
 316 004e 3146     		mov	r1, r6
 317 0050 2846     		mov	r0, r5
 318 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 319              	.LVL27:
 320 0056 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 321              	.LVL28:
 322              	.L24:
 323 005a 00BF     		.align	2
 324              	.L23:
 325 005c 00000000 		.word	htim2
 326 0060 00000000 		.word	imu
 327              		.cfi_endproc
 328              	.LFE131:
 330              		.section	.text.LSMD9S0_accel_gyro_init,"ax",%progbits
 331              		.align	1
 332              		.global	LSMD9S0_accel_gyro_init
 333              		.syntax unified
 334              		.thumb
 335              		.thumb_func
 336              		.fpu fpv4-sp-d16
 338              	LSMD9S0_accel_gyro_init:
 339              	.LFB132:
 149:Src/Eagle_TRT.c **** 
 340              		.loc 1 149 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              	.LVL29:
 345 0000 38B5     		push	{r3, r4, r5, lr}
 346              	.LCFI6:
 347              		.cfi_def_cfa_offset 16
 348              		.cfi_offset 3, -16
 349              		.cfi_offset 4, -12
 350              		.cfi_offset 5, -8
 351              		.cfi_offset 14, -4
 352 0002 0446     		mov	r4, r0
 353 0004 0D46     		mov	r5, r1
 151:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 354              		.loc 1 151 0
ARM GAS  /tmp/ccYuDwjm.s 			page 23


 355 0006 0122     		movs	r2, #1
 356 0008 4FF48071 		mov	r1, #256
 357              	.LVL30:
 358 000c 5F48     		ldr	r0, .L43
 359              	.LVL31:
 360 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 361              	.LVL32:
 152:Src/Eagle_TRT.c **** 
 362              		.loc 1 152 0
 363 0012 0122     		movs	r2, #1
 364 0014 4FF40071 		mov	r1, #512
 365 0018 5D48     		ldr	r0, .L43+4
 366 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 367              	.LVL33:
 155:Src/Eagle_TRT.c **** 
 368              		.loc 1 155 0
 369 001e 5D4B     		ldr	r3, .L43+8
 370 0020 5D4A     		ldr	r2, .L43+12
 371 0022 B5F82412 		ldrh	r1, [r5, #548]
 372 0026 D5F82002 		ldr	r0, [r5, #544]
 373 002a FFF7FEFF 		bl	send_config
 374              	.LVL34:
 158:Src/Eagle_TRT.c **** 
 375              		.loc 1 158 0
 376 002e 5B4B     		ldr	r3, .L43+16
 377 0030 5B4A     		ldr	r2, .L43+20
 378 0032 B4F82412 		ldrh	r1, [r4, #548]
 379 0036 D4F82002 		ldr	r0, [r4, #544]
 380 003a FFF7FEFF 		bl	send_config
 381              	.LVL35:
 160:Src/Eagle_TRT.c **** 	send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8_t *)&C
 382              		.loc 1 160 0
 383 003e 594B     		ldr	r3, .L43+24
 384 0040 594A     		ldr	r2, .L43+28
 385 0042 B4F82412 		ldrh	r1, [r4, #548]
 386 0046 D4F82002 		ldr	r0, [r4, #544]
 387 004a FFF7FEFF 		bl	send_config
 388              	.LVL36:
 161:Src/Eagle_TRT.c **** 	send_config(accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8_t *)&C
 389              		.loc 1 161 0
 390 004e 574B     		ldr	r3, .L43+32
 391 0050 574A     		ldr	r2, .L43+36
 392 0052 B4F82412 		ldrh	r1, [r4, #548]
 393 0056 D4F82002 		ldr	r0, [r4, #544]
 394 005a FFF7FEFF 		bl	send_config
 395              	.LVL37:
 162:Src/Eagle_TRT.c **** 
 396              		.loc 1 162 0
 397 005e 554B     		ldr	r3, .L43+40
 398 0060 554A     		ldr	r2, .L43+44
 399 0062 B4F82412 		ldrh	r1, [r4, #548]
 400 0066 D4F82002 		ldr	r0, [r4, #544]
 401 006a FFF7FEFF 		bl	send_config
 402              	.LVL38:
 165:Src/Eagle_TRT.c **** 	{
 403              		.loc 1 165 0
 404 006e D5F81832 		ldr	r3, [r5, #536]
ARM GAS  /tmp/ccYuDwjm.s 			page 24


 405 0072 B3F5FA7F 		cmp	r3, #500
 406 0076 28D0     		beq	.L27
 407 0078 0EDD     		ble	.L42
 408 007a B3F57A7F 		cmp	r3, #1000
 409 007e 2DD0     		beq	.L30
 410 0080 B3F5FA6F 		cmp	r3, #2000
 411 0084 33D1     		bne	.L26
 177:Src/Eagle_TRT.c **** 		break;
 412              		.loc 1 177 0
 413 0086 4D4B     		ldr	r3, .L43+48
 414 0088 4D4A     		ldr	r2, .L43+52
 415 008a B5F82412 		ldrh	r1, [r5, #548]
 416 008e D5F82002 		ldr	r0, [r5, #544]
 417 0092 FFF7FEFF 		bl	send_config
 418              	.LVL39:
 178:Src/Eagle_TRT.c **** 	default:
 419              		.loc 1 178 0
 420 0096 09E0     		b	.L32
 421              	.L42:
 165:Src/Eagle_TRT.c **** 	{
 422              		.loc 1 165 0
 423 0098 F52B     		cmp	r3, #245
 424 009a 28D1     		bne	.L26
 168:Src/Eagle_TRT.c **** 		break;
 425              		.loc 1 168 0
 426 009c 494B     		ldr	r3, .L43+56
 427 009e 484A     		ldr	r2, .L43+52
 428 00a0 B5F82412 		ldrh	r1, [r5, #548]
 429 00a4 D5F82002 		ldr	r0, [r5, #544]
 430 00a8 FFF7FEFF 		bl	send_config
 431              	.LVL40:
 432              	.L32:
 186:Src/Eagle_TRT.c **** 	{
 433              		.loc 1 186 0
 434 00ac D4F81832 		ldr	r3, [r4, #536]
 435 00b0 023B     		subs	r3, r3, #2
 436 00b2 0E2B     		cmp	r3, #14
 437 00b4 5ED8     		bhi	.L33
 438 00b6 DFE803F0 		tbb	[pc, r3]
 439              	.L35:
 440 00ba 27       		.byte	(.L34-.L35)/2
 441 00bb 5D       		.byte	(.L33-.L35)/2
 442 00bc 39       		.byte	(.L36-.L35)/2
 443 00bd 5D       		.byte	(.L33-.L35)/2
 444 00be 42       		.byte	(.L37-.L35)/2
 445 00bf 5D       		.byte	(.L33-.L35)/2
 446 00c0 4B       		.byte	(.L38-.L35)/2
 447 00c1 5D       		.byte	(.L33-.L35)/2
 448 00c2 5D       		.byte	(.L33-.L35)/2
 449 00c3 5D       		.byte	(.L33-.L35)/2
 450 00c4 5D       		.byte	(.L33-.L35)/2
 451 00c5 5D       		.byte	(.L33-.L35)/2
 452 00c6 5D       		.byte	(.L33-.L35)/2
 453 00c7 5D       		.byte	(.L33-.L35)/2
 454 00c8 54       		.byte	(.L39-.L35)/2
 455 00c9 00       		.p2align 1
 456              	.L27:
ARM GAS  /tmp/ccYuDwjm.s 			page 25


 171:Src/Eagle_TRT.c **** 		break;
 457              		.loc 1 171 0
 458 00ca 3F4B     		ldr	r3, .L43+60
 459 00cc 3C4A     		ldr	r2, .L43+52
 460 00ce B5F82412 		ldrh	r1, [r5, #548]
 461 00d2 D5F82002 		ldr	r0, [r5, #544]
 462 00d6 FFF7FEFF 		bl	send_config
 463              	.LVL41:
 172:Src/Eagle_TRT.c **** 	case 1000:
 464              		.loc 1 172 0
 465 00da E7E7     		b	.L32
 466              	.L30:
 174:Src/Eagle_TRT.c **** 		break;
 467              		.loc 1 174 0
 468 00dc 3B4B     		ldr	r3, .L43+64
 469 00de 384A     		ldr	r2, .L43+52
 470 00e0 B5F82412 		ldrh	r1, [r5, #548]
 471 00e4 D5F82002 		ldr	r0, [r5, #544]
 472 00e8 FFF7FEFF 		bl	send_config
 473              	.LVL42:
 175:Src/Eagle_TRT.c **** 	case 2000:
 474              		.loc 1 175 0
 475 00ec DEE7     		b	.L32
 476              	.L26:
 180:Src/Eagle_TRT.c **** 		gyro->scale = 500;
 477              		.loc 1 180 0
 478 00ee 354B     		ldr	r3, .L43+56
 479 00f0 334A     		ldr	r2, .L43+52
 480 00f2 B5F82412 		ldrh	r1, [r5, #548]
 481 00f6 D5F82002 		ldr	r0, [r5, #544]
 482 00fa FFF7FEFF 		bl	send_config
 483              	.LVL43:
 181:Src/Eagle_TRT.c **** 		break;
 484              		.loc 1 181 0
 485 00fe 4FF4FA73 		mov	r3, #500
 486 0102 C5F81832 		str	r3, [r5, #536]
 182:Src/Eagle_TRT.c **** 	}
 487              		.loc 1 182 0
 488 0106 D1E7     		b	.L32
 489              	.L34:
 189:Src/Eagle_TRT.c **** 		break;
 490              		.loc 1 189 0
 491 0108 314B     		ldr	r3, .L43+68
 492 010a 324A     		ldr	r2, .L43+72
 493 010c B4F82412 		ldrh	r1, [r4, #548]
 494 0110 D4F82002 		ldr	r0, [r4, #544]
 495 0114 FFF7FEFF 		bl	send_config
 496              	.LVL44:
 497              	.L40:
 209:Src/Eagle_TRT.c **** 
 498              		.loc 1 209 0
 499 0118 0120     		movs	r0, #1
 500 011a FFF7FEFF 		bl	HAL_Delay
 501              	.LVL45:
 211:Src/Eagle_TRT.c **** }
 502              		.loc 1 211 0
 503 011e 0A23     		movs	r3, #10
ARM GAS  /tmp/ccYuDwjm.s 			page 26


 504 0120 1A22     		movs	r2, #26
 505 0122 2D49     		ldr	r1, .L43+76
 506 0124 2D48     		ldr	r0, .L43+80
 507 0126 FFF7FEFF 		bl	HAL_UART_Transmit
 508              	.LVL46:
 509 012a 38BD     		pop	{r3, r4, r5, pc}
 510              	.LVL47:
 511              	.L36:
 192:Src/Eagle_TRT.c **** 		break;
 512              		.loc 1 192 0
 513 012c 2C4B     		ldr	r3, .L43+84
 514 012e 294A     		ldr	r2, .L43+72
 515 0130 B4F82412 		ldrh	r1, [r4, #548]
 516 0134 D4F82002 		ldr	r0, [r4, #544]
 517 0138 FFF7FEFF 		bl	send_config
 518              	.LVL48:
 193:Src/Eagle_TRT.c **** 	case 6:
 519              		.loc 1 193 0
 520 013c ECE7     		b	.L40
 521              	.L37:
 195:Src/Eagle_TRT.c **** 		break;
 522              		.loc 1 195 0
 523 013e 294B     		ldr	r3, .L43+88
 524 0140 244A     		ldr	r2, .L43+72
 525 0142 B4F82412 		ldrh	r1, [r4, #548]
 526 0146 D4F82002 		ldr	r0, [r4, #544]
 527 014a FFF7FEFF 		bl	send_config
 528              	.LVL49:
 196:Src/Eagle_TRT.c **** 	case 8:
 529              		.loc 1 196 0
 530 014e E3E7     		b	.L40
 531              	.L38:
 198:Src/Eagle_TRT.c **** 		break;
 532              		.loc 1 198 0
 533 0150 254B     		ldr	r3, .L43+92
 534 0152 204A     		ldr	r2, .L43+72
 535 0154 B4F82412 		ldrh	r1, [r4, #548]
 536 0158 D4F82002 		ldr	r0, [r4, #544]
 537 015c FFF7FEFF 		bl	send_config
 538              	.LVL50:
 199:Src/Eagle_TRT.c **** 	case 16:
 539              		.loc 1 199 0
 540 0160 DAE7     		b	.L40
 541              	.L39:
 201:Src/Eagle_TRT.c **** 		break;
 542              		.loc 1 201 0
 543 0162 224B     		ldr	r3, .L43+96
 544 0164 1B4A     		ldr	r2, .L43+72
 545 0166 B4F82412 		ldrh	r1, [r4, #548]
 546 016a D4F82002 		ldr	r0, [r4, #544]
 547 016e FFF7FEFF 		bl	send_config
 548              	.LVL51:
 202:Src/Eagle_TRT.c **** 	default:
 549              		.loc 1 202 0
 550 0172 D1E7     		b	.L40
 551              	.L33:
 204:Src/Eagle_TRT.c **** 		accel->scale = 4;
ARM GAS  /tmp/ccYuDwjm.s 			page 27


 552              		.loc 1 204 0
 553 0174 1A4B     		ldr	r3, .L43+84
 554 0176 174A     		ldr	r2, .L43+72
 555 0178 B4F82412 		ldrh	r1, [r4, #548]
 556 017c D4F82002 		ldr	r0, [r4, #544]
 557 0180 FFF7FEFF 		bl	send_config
 558              	.LVL52:
 205:Src/Eagle_TRT.c **** 		break;
 559              		.loc 1 205 0
 560 0184 0423     		movs	r3, #4
 561 0186 C4F81832 		str	r3, [r4, #536]
 206:Src/Eagle_TRT.c **** 	}
 562              		.loc 1 206 0
 563 018a C5E7     		b	.L40
 564              	.L44:
 565              		.align	2
 566              	.L43:
 567 018c 00000240 		.word	1073872896
 568 0190 00080240 		.word	1073874944
 569 0194 00000000 		.word	.LANCHOR0
 570 0198 00000000 		.word	.LANCHOR1
 571 019c 00000000 		.word	.LANCHOR2
 572 01a0 00000000 		.word	.LANCHOR3
 573 01a4 00000000 		.word	.LANCHOR4
 574 01a8 00000000 		.word	.LANCHOR5
 575 01ac 00000000 		.word	.LANCHOR6
 576 01b0 00000000 		.word	.LANCHOR7
 577 01b4 00000000 		.word	.LANCHOR8
 578 01b8 00000000 		.word	.LANCHOR9
 579 01bc 00000000 		.word	.LANCHOR14
 580 01c0 00000000 		.word	.LANCHOR11
 581 01c4 00000000 		.word	.LANCHOR10
 582 01c8 00000000 		.word	.LANCHOR12
 583 01cc 00000000 		.word	.LANCHOR13
 584 01d0 00000000 		.word	.LANCHOR15
 585 01d4 00000000 		.word	.LANCHOR16
 586 01d8 00000000 		.word	.LC1
 587 01dc 00000000 		.word	huart2
 588 01e0 00000000 		.word	.LANCHOR17
 589 01e4 00000000 		.word	.LANCHOR18
 590 01e8 00000000 		.word	.LANCHOR19
 591 01ec 00000000 		.word	.LANCHOR20
 592              		.cfi_endproc
 593              	.LFE132:
 595              		.section	.text.LSMD9S0_read,"ax",%progbits
 596              		.align	1
 597              		.global	LSMD9S0_read
 598              		.syntax unified
 599              		.thumb
 600              		.thumb_func
 601              		.fpu fpv4-sp-d16
 603              	LSMD9S0_read:
 604              	.LFB133:
 215:Src/Eagle_TRT.c **** 
 605              		.loc 1 215 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccYuDwjm.s 			page 28


 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              	.LVL53:
 610 0000 10B5     		push	{r4, lr}
 611              	.LCFI7:
 612              		.cfi_def_cfa_offset 8
 613              		.cfi_offset 4, -8
 614              		.cfi_offset 14, -4
 615 0002 82B0     		sub	sp, sp, #8
 616              	.LCFI8:
 617              		.cfi_def_cfa_offset 16
 618 0004 0446     		mov	r4, r0
 220:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 619              		.loc 1 220 0
 620 0006 0022     		movs	r2, #0
 621 0008 B0F82412 		ldrh	r1, [r0, #548]
 622 000c D0F82002 		ldr	r0, [r0, #544]
 623              	.LVL54:
 624 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 625              	.LVL55:
 221:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 626              		.loc 1 221 0
 627 0014 2E4B     		ldr	r3, .L51
 628 0016 1A68     		ldr	r2, [r3]
 629 0018 0023     		movs	r3, #0
 630 001a 5362     		str	r3, [r2, #36]
 631              	.L46:
 222:Src/Eagle_TRT.c **** 	{
 632              		.loc 1 222 0 discriminator 1
 633 001c 536A     		ldr	r3, [r2, #36]
 634 001e 142B     		cmp	r3, #20
 635 0020 FCD9     		bls	.L46
 226:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 636              		.loc 1 226 0
 637 0022 0A23     		movs	r3, #10
 638 0024 0122     		movs	r2, #1
 639 0026 04F22E21 		addw	r1, r4, #558
 640 002a D4F83002 		ldr	r0, [r4, #560]
 641 002e FFF7FEFF 		bl	HAL_SPI_Transmit
 642              	.LVL56:
 227:Src/Eagle_TRT.c **** 
 643              		.loc 1 227 0
 644 0032 0A23     		movs	r3, #10
 645 0034 0122     		movs	r2, #1
 646 0036 0DF10701 		add	r1, sp, #7
 647 003a D4F83002 		ldr	r0, [r4, #560]
 648 003e FFF7FEFF 		bl	HAL_SPI_Receive
 649              	.LVL57:
 229:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 650              		.loc 1 229 0
 651 0042 234B     		ldr	r3, .L51
 652 0044 1A68     		ldr	r2, [r3]
 653 0046 0023     		movs	r3, #0
 654 0048 5362     		str	r3, [r2, #36]
 655              	.L47:
 230:Src/Eagle_TRT.c **** 	{
 656              		.loc 1 230 0 discriminator 1
 657 004a 536A     		ldr	r3, [r2, #36]
ARM GAS  /tmp/ccYuDwjm.s 			page 29


 658 004c 142B     		cmp	r3, #20
 659 004e FCD9     		bls	.L47
 233:Src/Eagle_TRT.c **** 
 660              		.loc 1 233 0
 661 0050 0122     		movs	r2, #1
 662 0052 B4F82412 		ldrh	r1, [r4, #548]
 663 0056 D4F82002 		ldr	r0, [r4, #544]
 664 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 665              	.LVL58:
 235:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 666              		.loc 1 235 0
 667 005e 1C4B     		ldr	r3, .L51
 668 0060 1A68     		ldr	r2, [r3]
 669 0062 0023     		movs	r3, #0
 670 0064 5362     		str	r3, [r2, #36]
 671              	.L48:
 236:Src/Eagle_TRT.c **** 	{
 672              		.loc 1 236 0 discriminator 1
 673 0066 536A     		ldr	r3, [r2, #36]
 674 0068 142B     		cmp	r3, #20
 675 006a FCD9     		bls	.L48
 239:Src/Eagle_TRT.c **** 
 676              		.loc 1 239 0
 677 006c 0022     		movs	r2, #0
 678 006e B4F82412 		ldrh	r1, [r4, #548]
 679 0072 D4F82002 		ldr	r0, [r4, #544]
 680 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 681              	.LVL59:
 241:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 682              		.loc 1 241 0
 683 007a 0A23     		movs	r3, #10
 684 007c 0122     		movs	r2, #1
 685 007e 04F22F21 		addw	r1, r4, #559
 686 0082 D4F83002 		ldr	r0, [r4, #560]
 687 0086 FFF7FEFF 		bl	HAL_SPI_Transmit
 688              	.LVL60:
 242:Src/Eagle_TRT.c **** 
 689              		.loc 1 242 0
 690 008a 0A23     		movs	r3, #10
 691 008c 0122     		movs	r2, #1
 692 008e 0DF10601 		add	r1, sp, #6
 693 0092 D4F83002 		ldr	r0, [r4, #560]
 694 0096 FFF7FEFF 		bl	HAL_SPI_Receive
 695              	.LVL61:
 244:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 696              		.loc 1 244 0
 697 009a 0D4B     		ldr	r3, .L51
 698 009c 1A68     		ldr	r2, [r3]
 699 009e 0023     		movs	r3, #0
 700 00a0 5362     		str	r3, [r2, #36]
 701              	.L49:
 245:Src/Eagle_TRT.c **** 	{
 702              		.loc 1 245 0 discriminator 1
 703 00a2 536A     		ldr	r3, [r2, #36]
 704 00a4 142B     		cmp	r3, #20
 705 00a6 FCD9     		bls	.L49
 249:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccYuDwjm.s 			page 30


 706              		.loc 1 249 0
 707 00a8 0122     		movs	r2, #1
 708 00aa B4F82412 		ldrh	r1, [r4, #548]
 709 00ae D4F82002 		ldr	r0, [r4, #544]
 710 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 711              	.LVL62:
 252:Src/Eagle_TRT.c **** 	float axis = value;
 712              		.loc 1 252 0
 713 00b6 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 714 00ba 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 715 00be 43EA0223 		orr	r3, r3, r2, lsl #8
 716 00c2 00EE103A 		vmov	s0, r3	@ int
 717              	.LVL63:
 256:Src/Eagle_TRT.c **** 
 718              		.loc 1 256 0
 719 00c6 B8EE400A 		vcvt.f32.u32	s0, s0
 720              	.LVL64:
 721 00ca 02B0     		add	sp, sp, #8
 722              	.LCFI9:
 723              		.cfi_def_cfa_offset 8
 724              		@ sp needed
 725 00cc 10BD     		pop	{r4, pc}
 726              	.LVL65:
 727              	.L52:
 728 00ce 00BF     		.align	2
 729              	.L51:
 730 00d0 00000000 		.word	htim2
 731              		.cfi_endproc
 732              	.LFE133:
 734              		.section	.text.LSMD9S0_check,"ax",%progbits
 735              		.align	1
 736              		.global	LSMD9S0_check
 737              		.syntax unified
 738              		.thumb
 739              		.thumb_func
 740              		.fpu fpv4-sp-d16
 742              	LSMD9S0_check:
 743              	.LFB134:
 259:Src/Eagle_TRT.c **** 
 744              		.loc 1 259 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              	.LVL66:
 749 0000 10B5     		push	{r4, lr}
 750              	.LCFI10:
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 4, -8
 753              		.cfi_offset 14, -4
 754 0002 0446     		mov	r4, r0
 755              	.LVL67:
 264:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 756              		.loc 1 264 0
 757 0004 0022     		movs	r2, #0
 758 0006 4FF40071 		mov	r1, #512
 759 000a 2C48     		ldr	r0, .L62
 760              	.LVL68:
ARM GAS  /tmp/ccYuDwjm.s 			page 31


 761 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 762              	.LVL69:
 265:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 763              		.loc 1 265 0
 764 0010 2B4B     		ldr	r3, .L62+4
 765 0012 1A68     		ldr	r2, [r3]
 766 0014 0023     		movs	r3, #0
 767 0016 5362     		str	r3, [r2, #36]
 768              	.L54:
 266:Src/Eagle_TRT.c **** 	{
 769              		.loc 1 266 0 discriminator 1
 770 0018 536A     		ldr	r3, [r2, #36]
 771 001a 142B     		cmp	r3, #20
 772 001c FCD9     		bls	.L54
 269:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_XM_VAL, 1, 10);
 773              		.loc 1 269 0
 774 001e 0A23     		movs	r3, #10
 775 0020 0122     		movs	r2, #1
 776 0022 2849     		ldr	r1, .L62+8
 777 0024 D4F83002 		ldr	r0, [r4, #560]
 778 0028 FFF7FEFF 		bl	HAL_SPI_Transmit
 779              	.LVL70:
 270:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 780              		.loc 1 270 0
 781 002c 0A23     		movs	r3, #10
 782 002e 0122     		movs	r2, #1
 783 0030 2549     		ldr	r1, .L62+12
 784 0032 D4F83002 		ldr	r0, [r4, #560]
 785 0036 FFF7FEFF 		bl	HAL_SPI_Receive
 786              	.LVL71:
 271:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 787              		.loc 1 271 0
 788 003a 214B     		ldr	r3, .L62+4
 789 003c 1A68     		ldr	r2, [r3]
 790 003e 0023     		movs	r3, #0
 791 0040 5362     		str	r3, [r2, #36]
 792              	.L55:
 272:Src/Eagle_TRT.c **** 	{
 793              		.loc 1 272 0 discriminator 1
 794 0042 536A     		ldr	r3, [r2, #36]
 795 0044 142B     		cmp	r3, #20
 796 0046 FCD9     		bls	.L55
 275:Src/Eagle_TRT.c **** 
 797              		.loc 1 275 0
 798 0048 0122     		movs	r2, #1
 799 004a 4FF40071 		mov	r1, #512
 800 004e 1B48     		ldr	r0, .L62
 801 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 802              	.LVL72:
 278:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 803              		.loc 1 278 0
 804 0054 0022     		movs	r2, #0
 805 0056 4FF48071 		mov	r1, #256
 806 005a 1C48     		ldr	r0, .L62+16
 807 005c FFF7FEFF 		bl	HAL_GPIO_WritePin
 808              	.LVL73:
 279:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
ARM GAS  /tmp/ccYuDwjm.s 			page 32


 809              		.loc 1 279 0
 810 0060 174B     		ldr	r3, .L62+4
 811 0062 1A68     		ldr	r2, [r3]
 812 0064 0023     		movs	r3, #0
 813 0066 5362     		str	r3, [r2, #36]
 814              	.L56:
 280:Src/Eagle_TRT.c **** 	{
 815              		.loc 1 280 0 discriminator 1
 816 0068 536A     		ldr	r3, [r2, #36]
 817 006a 142B     		cmp	r3, #20
 818 006c FCD9     		bls	.L56
 283:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 819              		.loc 1 283 0
 820 006e 0A23     		movs	r3, #10
 821 0070 0122     		movs	r2, #1
 822 0072 1749     		ldr	r1, .L62+20
 823 0074 D4F83002 		ldr	r0, [r4, #560]
 824 0078 FFF7FEFF 		bl	HAL_SPI_Transmit
 825              	.LVL74:
 285:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 826              		.loc 1 285 0
 827 007c 0A23     		movs	r3, #10
 828 007e 0122     		movs	r2, #1
 829 0080 1449     		ldr	r1, .L62+24
 830 0082 D4F83002 		ldr	r0, [r4, #560]
 831 0086 FFF7FEFF 		bl	HAL_SPI_Receive
 832              	.LVL75:
 286:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 833              		.loc 1 286 0
 834 008a 0D4B     		ldr	r3, .L62+4
 835 008c 1A68     		ldr	r2, [r3]
 836 008e 0023     		movs	r3, #0
 837 0090 5362     		str	r3, [r2, #36]
 838              	.L57:
 287:Src/Eagle_TRT.c **** 	{
 839              		.loc 1 287 0 discriminator 1
 840 0092 536A     		ldr	r3, [r2, #36]
 841 0094 142B     		cmp	r3, #20
 842 0096 FCD9     		bls	.L57
 290:Src/Eagle_TRT.c **** 
 843              		.loc 1 290 0
 844 0098 0122     		movs	r2, #1
 845 009a 4FF48071 		mov	r1, #256
 846 009e 0B48     		ldr	r0, .L62+16
 847 00a0 FFF7FEFF 		bl	HAL_GPIO_WritePin
 848              	.LVL76:
 295:Src/Eagle_TRT.c **** 	{
 849              		.loc 1 295 0
 850 00a4 0B4B     		ldr	r3, .L62+24
 851 00a6 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 852 00a8 074B     		ldr	r3, .L62+12
 853 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 854 00ac D42A     		cmp	r2, #212
 855 00ae 08BF     		it	eq
 856 00b0 492B     		cmpeq	r3, #73
 857 00b2 01D0     		beq	.L61
 301:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccYuDwjm.s 			page 33


 858              		.loc 1 301 0
 859 00b4 0020     		movs	r0, #0
 305:Src/Eagle_TRT.c **** 
 860              		.loc 1 305 0
 861 00b6 10BD     		pop	{r4, pc}
 862              	.LVL77:
 863              	.L61:
 297:Src/Eagle_TRT.c **** 	}
 864              		.loc 1 297 0
 865 00b8 0120     		movs	r0, #1
 866 00ba 10BD     		pop	{r4, pc}
 867              	.LVL78:
 868              	.L63:
 869              		.align	2
 870              	.L62:
 871 00bc 00080240 		.word	1073874944
 872 00c0 00000000 		.word	htim2
 873 00c4 00000000 		.word	.LANCHOR21
 874 00c8 00000000 		.word	WHO_AM_I_XM_VAL
 875 00cc 00000240 		.word	1073872896
 876 00d0 00000000 		.word	.LANCHOR22
 877 00d4 00000000 		.word	WHO_AM_I_G_VAL
 878              		.cfi_endproc
 879              	.LFE134:
 881              		.global	__aeabi_f2d
 882              		.section	.text.LSMD9S0_gyro_read,"ax",%progbits
 883              		.align	1
 884              		.global	LSMD9S0_gyro_read
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 888              		.fpu fpv4-sp-d16
 890              	LSMD9S0_gyro_read:
 891              	.LFB136:
 338:Src/Eagle_TRT.c **** 
 892              		.loc 1 338 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 0
 895              		@ frame_needed = 0, uses_anonymous_args = 0
 896              	.LVL79:
 897 0000 10B5     		push	{r4, lr}
 898              	.LCFI11:
 899              		.cfi_def_cfa_offset 8
 900              		.cfi_offset 4, -8
 901              		.cfi_offset 14, -4
 902 0002 0446     		mov	r4, r0
 340:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_8;
 903              		.loc 1 340 0
 904 0004 244B     		ldr	r3, .L69
 905 0006 C0F82032 		str	r3, [r0, #544]
 341:Src/Eagle_TRT.c **** 
 906              		.loc 1 341 0
 907 000a 4FF48073 		mov	r3, #256
 908 000e A0F82432 		strh	r3, [r0, #548]	@ movhi
 343:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_G_ADD;
 909              		.loc 1 343 0
 910 0012 224B     		ldr	r3, .L69+4
ARM GAS  /tmp/ccYuDwjm.s 			page 34


 911 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912 0016 80F82F32 		strb	r3, [r0, #559]
 344:Src/Eagle_TRT.c **** 	imu->x = LSMD9S0_read(imu);
 913              		.loc 1 344 0
 914 001a 214B     		ldr	r3, .L69+8
 915 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 916 001e 80F82E32 		strb	r3, [r0, #558]
 345:Src/Eagle_TRT.c **** 
 917              		.loc 1 345 0
 918 0022 FFF7FEFF 		bl	LSMD9S0_read
 919              	.LVL80:
 920 0026 10EE100A 		vmov	r0, s0
 921 002a FFF7FEFF 		bl	__aeabi_f2d
 922              	.LVL81:
 923 002e C4E90001 		strd	r0, [r4]
 347:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_G_ADD;
 924              		.loc 1 347 0
 925 0032 1C4B     		ldr	r3, .L69+12
 926 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 927 0036 84F82F32 		strb	r3, [r4, #559]
 348:Src/Eagle_TRT.c **** 	imu->y = LSMD9S0_read(imu);
 928              		.loc 1 348 0
 929 003a 1B4B     		ldr	r3, .L69+16
 930 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 931 003e 84F82E32 		strb	r3, [r4, #558]
 349:Src/Eagle_TRT.c **** 
 932              		.loc 1 349 0
 933 0042 2046     		mov	r0, r4
 934 0044 FFF7FEFF 		bl	LSMD9S0_read
 935              	.LVL82:
 936 0048 10EE100A 		vmov	r0, s0
 937 004c FFF7FEFF 		bl	__aeabi_f2d
 938              	.LVL83:
 939 0050 C4E90201 		strd	r0, [r4, #8]
 351:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_G_ADD;
 940              		.loc 1 351 0
 941 0054 154B     		ldr	r3, .L69+20
 942 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 943 0058 84F82F32 		strb	r3, [r4, #559]
 352:Src/Eagle_TRT.c **** 	imu->z = LSMD9S0_read(imu);
 944              		.loc 1 352 0
 945 005c 144B     		ldr	r3, .L69+24
 946 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 947 0060 84F82E32 		strb	r3, [r4, #558]
 353:Src/Eagle_TRT.c **** 
 948              		.loc 1 353 0
 949 0064 2046     		mov	r0, r4
 950 0066 FFF7FEFF 		bl	LSMD9S0_read
 951              	.LVL84:
 952 006a 10EE100A 		vmov	r0, s0
 953 006e FFF7FEFF 		bl	__aeabi_f2d
 954              	.LVL85:
 955 0072 C4E90401 		strd	r0, [r4, #16]
 356:Src/Eagle_TRT.c **** 	{
 956              		.loc 1 356 0
 957 0076 0F4B     		ldr	r3, .L69+28
 958 0078 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  /tmp/ccYuDwjm.s 			page 35


 959 007a 0F4B     		ldr	r3, .L69+32
 960 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 961 007e D42A     		cmp	r2, #212
 962 0080 08BF     		it	eq
 963 0082 492B     		cmpeq	r3, #73
 964 0084 03D0     		beq	.L68
 362:Src/Eagle_TRT.c **** 	}
 965              		.loc 1 362 0
 966 0086 0123     		movs	r3, #1
 967 0088 C4F81432 		str	r3, [r4, #532]
 968 008c 10BD     		pop	{r4, pc}
 969              	.LVL86:
 970              	.L68:
 358:Src/Eagle_TRT.c **** 	}
 971              		.loc 1 358 0
 972 008e 0023     		movs	r3, #0
 973 0090 C4F81432 		str	r3, [r4, #532]
 974 0094 10BD     		pop	{r4, pc}
 975              	.LVL87:
 976              	.L70:
 977 0096 00BF     		.align	2
 978              	.L69:
 979 0098 00000240 		.word	1073872896
 980 009c 00000000 		.word	.LANCHOR23
 981 00a0 00000000 		.word	.LANCHOR24
 982 00a4 00000000 		.word	.LANCHOR25
 983 00a8 00000000 		.word	.LANCHOR26
 984 00ac 00000000 		.word	.LANCHOR27
 985 00b0 00000000 		.word	.LANCHOR28
 986 00b4 00000000 		.word	WHO_AM_I_G_VAL
 987 00b8 00000000 		.word	WHO_AM_I_XM_VAL
 988              		.cfi_endproc
 989              	.LFE136:
 991              		.section	.text.LSMD9S0_accel_read,"ax",%progbits
 992              		.align	1
 993              		.global	LSMD9S0_accel_read
 994              		.syntax unified
 995              		.thumb
 996              		.thumb_func
 997              		.fpu fpv4-sp-d16
 999              	LSMD9S0_accel_read:
 1000              	.LFB138:
 411:Src/Eagle_TRT.c **** 
 1001              		.loc 1 411 0
 1002              		.cfi_startproc
 1003              		@ args = 0, pretend = 0, frame = 0
 1004              		@ frame_needed = 0, uses_anonymous_args = 0
 1005              	.LVL88:
 1006 0000 10B5     		push	{r4, lr}
 1007              	.LCFI12:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 4, -8
 1010              		.cfi_offset 14, -4
 1011 0002 0446     		mov	r4, r0
 413:Src/Eagle_TRT.c **** 	imu->GPIO_Pin_InUse = GPIO_PIN_9;
 1012              		.loc 1 413 0
 1013 0004 1C4B     		ldr	r3, .L73
ARM GAS  /tmp/ccYuDwjm.s 			page 36


 1014 0006 C0F82032 		str	r3, [r0, #544]
 414:Src/Eagle_TRT.c **** 
 1015              		.loc 1 414 0
 1016 000a 4FF40073 		mov	r3, #512
 1017 000e A0F82432 		strh	r3, [r0, #548]	@ movhi
 416:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_X_L_A_ADD;
 1018              		.loc 1 416 0
 1019 0012 1A4B     		ldr	r3, .L73+4
 1020 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 0016 80F82F32 		strb	r3, [r0, #559]
 417:Src/Eagle_TRT.c **** 	imu->x = LSMD9S0_read(imu);
 1022              		.loc 1 417 0
 1023 001a 194B     		ldr	r3, .L73+8
 1024 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1025 001e 80F82E32 		strb	r3, [r0, #558]
 418:Src/Eagle_TRT.c **** 
 1026              		.loc 1 418 0
 1027 0022 FFF7FEFF 		bl	LSMD9S0_read
 1028              	.LVL89:
 1029 0026 10EE100A 		vmov	r0, s0
 1030 002a FFF7FEFF 		bl	__aeabi_f2d
 1031              	.LVL90:
 1032 002e C4E90001 		strd	r0, [r4]
 420:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Y_L_A_ADD;
 1033              		.loc 1 420 0
 1034 0032 144B     		ldr	r3, .L73+12
 1035 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 0036 84F82F32 		strb	r3, [r4, #559]
 421:Src/Eagle_TRT.c **** 	imu->y = LSMD9S0_read(imu);
 1037              		.loc 1 421 0
 1038 003a 134B     		ldr	r3, .L73+16
 1039 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1040 003e 84F82E32 		strb	r3, [r4, #558]
 422:Src/Eagle_TRT.c **** 
 1041              		.loc 1 422 0
 1042 0042 2046     		mov	r0, r4
 1043 0044 FFF7FEFF 		bl	LSMD9S0_read
 1044              	.LVL91:
 1045 0048 10EE100A 		vmov	r0, s0
 1046 004c FFF7FEFF 		bl	__aeabi_f2d
 1047              	.LVL92:
 1048 0050 C4E90201 		strd	r0, [r4, #8]
 424:Src/Eagle_TRT.c **** 	imu->REG_L = OUT_Z_L_A_ADD;
 1049              		.loc 1 424 0
 1050 0054 0D4B     		ldr	r3, .L73+20
 1051 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1052 0058 84F82F32 		strb	r3, [r4, #559]
 425:Src/Eagle_TRT.c **** 	imu->z = LSMD9S0_read(imu);
 1053              		.loc 1 425 0
 1054 005c 0C4B     		ldr	r3, .L73+24
 1055 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1056 0060 84F82E32 		strb	r3, [r4, #558]
 426:Src/Eagle_TRT.c **** }
 1057              		.loc 1 426 0
 1058 0064 2046     		mov	r0, r4
 1059 0066 FFF7FEFF 		bl	LSMD9S0_read
 1060              	.LVL93:
ARM GAS  /tmp/ccYuDwjm.s 			page 37


 1061 006a 10EE100A 		vmov	r0, s0
 1062 006e FFF7FEFF 		bl	__aeabi_f2d
 1063              	.LVL94:
 1064 0072 C4E90401 		strd	r0, [r4, #16]
 1065 0076 10BD     		pop	{r4, pc}
 1066              	.LVL95:
 1067              	.L74:
 1068              		.align	2
 1069              	.L73:
 1070 0078 00080240 		.word	1073874944
 1071 007c 00000000 		.word	.LANCHOR29
 1072 0080 00000000 		.word	.LANCHOR30
 1073 0084 00000000 		.word	.LANCHOR31
 1074 0088 00000000 		.word	.LANCHOR32
 1075 008c 00000000 		.word	.LANCHOR33
 1076 0090 00000000 		.word	.LANCHOR34
 1077              		.cfi_endproc
 1078              	.LFE138:
 1080              		.section	.text.CAN_Send,"ax",%progbits
 1081              		.align	1
 1082              		.global	CAN_Send
 1083              		.syntax unified
 1084              		.thumb
 1085              		.thumb_func
 1086              		.fpu fpv4-sp-d16
 1088              	CAN_Send:
 1089              	.LFB139:
 440:Src/Eagle_TRT.c **** 
 1090              		.loc 1 440 0
 1091              		.cfi_startproc
 1092              		@ args = 0, pretend = 0, frame = 32
 1093              		@ frame_needed = 0, uses_anonymous_args = 0
 1094              	.LVL96:
 1095 0000 10B5     		push	{r4, lr}
 1096              	.LCFI13:
 1097              		.cfi_def_cfa_offset 8
 1098              		.cfi_offset 4, -8
 1099              		.cfi_offset 14, -4
 1100 0002 88B0     		sub	sp, sp, #32
 1101              	.LCFI14:
 1102              		.cfi_def_cfa_offset 40
 1103 0004 0446     		mov	r4, r0
 1104              	.LVL97:
 446:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 1105              		.loc 1 446 0
 1106 0006 0368     		ldr	r3, [r0]
 1107 0008 0193     		str	r3, [sp, #4]
 447:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 1108              		.loc 1 447 0
 1109 000a 0023     		movs	r3, #0
 1110 000c 0393     		str	r3, [sp, #12]
 448:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 1111              		.loc 1 448 0
 1112 000e 0493     		str	r3, [sp, #16]
 449:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 1113              		.loc 1 449 0
 1114 0010 4268     		ldr	r2, [r0, #4]
ARM GAS  /tmp/ccYuDwjm.s 			page 38


 1115 0012 0592     		str	r2, [sp, #20]
 450:Src/Eagle_TRT.c **** 
 1116              		.loc 1 450 0
 1117 0014 8DF81830 		strb	r3, [sp, #24]
 452:Src/Eagle_TRT.c **** 	{
 1118              		.loc 1 452 0
 1119 0018 8069     		ldr	r0, [r0, #24]
 1120              	.LVL98:
 1121 001a FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1122              	.LVL99:
 1123 001e 10B9     		cbnz	r0, .L80
 443:Src/Eagle_TRT.c **** 
 1124              		.loc 1 443 0
 1125 0020 0020     		movs	r0, #0
 1126              	.LVL100:
 1127              	.L76:
 459:Src/Eagle_TRT.c **** 
 1128              		.loc 1 459 0
 1129 0022 08B0     		add	sp, sp, #32
 1130              	.LCFI15:
 1131              		.cfi_remember_state
 1132              		.cfi_def_cfa_offset 8
 1133              		@ sp needed
 1134 0024 10BD     		pop	{r4, pc}
 1135              	.LVL101:
 1136              	.L80:
 1137              	.LCFI16:
 1138              		.cfi_restore_state
 452:Src/Eagle_TRT.c **** 	{
 1139              		.loc 1 452 0 discriminator 1
 1140 0026 0121     		movs	r1, #1
 1141 0028 A069     		ldr	r0, [r4, #24]
 1142 002a FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 1143              	.LVL102:
 1144 002e 08B1     		cbz	r0, .L81
 443:Src/Eagle_TRT.c **** 
 1145              		.loc 1 443 0
 1146 0030 0020     		movs	r0, #0
 1147 0032 F6E7     		b	.L76
 1148              	.L81:
 454:Src/Eagle_TRT.c **** 		flag = 1;
 1149              		.loc 1 454 0
 1150 0034 07AB     		add	r3, sp, #28
 1151 0036 04F10802 		add	r2, r4, #8
 1152 003a 01A9     		add	r1, sp, #4
 1153 003c A069     		ldr	r0, [r4, #24]
 1154 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1155              	.LVL103:
 455:Src/Eagle_TRT.c **** 	}
 1156              		.loc 1 455 0
 1157 0042 0120     		movs	r0, #1
 1158 0044 EDE7     		b	.L76
 1159              		.cfi_endproc
 1160              	.LFE139:
 1162              		.section	.text.CAN_Receive,"ax",%progbits
 1163              		.align	1
 1164              		.global	CAN_Receive
ARM GAS  /tmp/ccYuDwjm.s 			page 39


 1165              		.syntax unified
 1166              		.thumb
 1167              		.thumb_func
 1168              		.fpu fpv4-sp-d16
 1170              	CAN_Receive:
 1171              	.LFB140:
 467:Src/Eagle_TRT.c **** 
 1172              		.loc 1 467 0
 1173              		.cfi_startproc
 1174              		@ args = 0, pretend = 0, frame = 32
 1175              		@ frame_needed = 0, uses_anonymous_args = 0
 1176              	.LVL104:
 1177 0000 10B5     		push	{r4, lr}
 1178              	.LCFI17:
 1179              		.cfi_def_cfa_offset 8
 1180              		.cfi_offset 4, -8
 1181              		.cfi_offset 14, -4
 1182 0002 88B0     		sub	sp, sp, #32
 1183              	.LCFI18:
 1184              		.cfi_def_cfa_offset 40
 1185 0004 0446     		mov	r4, r0
 471:Src/Eagle_TRT.c **** 	{
 1186              		.loc 1 471 0
 1187 0006 0021     		movs	r1, #0
 1188 0008 8069     		ldr	r0, [r0, #24]
 1189              	.LVL105:
 1190 000a FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 1191              	.LVL106:
 1192 000e 10B9     		cbnz	r0, .L85
 1193              	.L83:
 1194              	.LVL107:
 479:Src/Eagle_TRT.c **** #endif
 1195              		.loc 1 479 0
 1196 0010 0198     		ldr	r0, [sp, #4]
 1197 0012 08B0     		add	sp, sp, #32
 1198              	.LCFI19:
 1199              		.cfi_remember_state
 1200              		.cfi_def_cfa_offset 8
 1201              		@ sp needed
 1202 0014 10BD     		pop	{r4, pc}
 1203              	.LVL108:
 1204              	.L85:
 1205              	.LCFI20:
 1206              		.cfi_restore_state
 473:Src/Eagle_TRT.c **** 	}
 1207              		.loc 1 473 0
 1208 0016 04F11003 		add	r3, r4, #16
 1209 001a 01AA     		add	r2, sp, #4
 1210 001c 0021     		movs	r1, #0
 1211 001e A069     		ldr	r0, [r4, #24]
 1212 0020 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1213              	.LVL109:
 1214 0024 F4E7     		b	.L83
 1215              		.cfi_endproc
 1216              	.LFE140:
 1218              		.section	.text.init,"ax",%progbits
 1219              		.align	1
ARM GAS  /tmp/ccYuDwjm.s 			page 40


 1220              		.global	init
 1221              		.syntax unified
 1222              		.thumb
 1223              		.thumb_func
 1224              		.fpu fpv4-sp-d16
 1226              	init:
 1227              	.LFB142:
 494:Src/Eagle_TRT.c **** 
 1228              		.loc 1 494 0
 1229              		.cfi_startproc
 1230              		@ args = 0, pretend = 0, frame = 0
 1231              		@ frame_needed = 0, uses_anonymous_args = 0
 1232              		@ link register save eliminated.
 1233              	.LVL110:
 496:Src/Eagle_TRT.c **** 	q->dim = 40;
 1234              		.loc 1 496 0
 1235 0000 0023     		movs	r3, #0
 1236 0002 0360     		str	r3, [r0]
 1237 0004 4360     		str	r3, [r0, #4]
 497:Src/Eagle_TRT.c **** }
 1238              		.loc 1 497 0
 1239 0006 2823     		movs	r3, #40
 1240 0008 8360     		str	r3, [r0, #8]
 1241 000a 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE142:
 1245              		.section	.text.push,"ax",%progbits
 1246              		.align	1
 1247              		.global	push
 1248              		.syntax unified
 1249              		.thumb
 1250              		.thumb_func
 1251              		.fpu fpv4-sp-d16
 1253              	push:
 1254              	.LFB145:
 513:Src/Eagle_TRT.c **** 	int res;
 1255              		.loc 1 513 0
 1256              		.cfi_startproc
 1257              		@ args = 0, pretend = 0, frame = 0
 1258              		@ frame_needed = 0, uses_anonymous_args = 0
 1259              	.LVL111:
 1260 0000 70B5     		push	{r4, r5, r6, lr}
 1261              	.LCFI21:
 1262              		.cfi_def_cfa_offset 16
 1263              		.cfi_offset 4, -16
 1264              		.cfi_offset 5, -12
 1265              		.cfi_offset 6, -8
 1266              		.cfi_offset 14, -4
 1267 0002 0646     		mov	r6, r0
 1268 0004 0C46     		mov	r4, r1
 515:Src/Eagle_TRT.c **** 	{
 1269              		.loc 1 515 0
 1270 0006 0846     		mov	r0, r1
 1271              	.LVL112:
 1272 0008 FFF7FEFF 		bl	fullp
 1273              	.LVL113:
 1274 000c 08B1     		cbz	r0, .L92
ARM GAS  /tmp/ccYuDwjm.s 			page 41


 517:Src/Eagle_TRT.c **** 	}
 1275              		.loc 1 517 0
 1276 000e 0020     		movs	r0, #0
 1277              	.LVL114:
 537:Src/Eagle_TRT.c **** 
 1278              		.loc 1 537 0
 1279 0010 70BD     		pop	{r4, r5, r6, pc}
 1280              	.LVL115:
 1281              	.L92:
 1282              	.LBB4:
 521:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 1283              		.loc 1 521 0
 1284 0012 3046     		mov	r0, r6
 1285 0014 FFF7FEFF 		bl	strlen
 1286              	.LVL116:
 522:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 1287              		.loc 1 522 0
 1288 0018 6568     		ldr	r5, [r4, #4]
 1289 001a FFF7FEFF 		bl	malloc
 1290              	.LVL117:
 1291 001e 0235     		adds	r5, r5, #2
 1292 0020 04EB8505 		add	r5, r4, r5, lsl #2
 1293 0024 6860     		str	r0, [r5, #4]
 523:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 1294              		.loc 1 523 0
 1295 0026 3146     		mov	r1, r6
 1296 0028 FFF7FEFF 		bl	strcpy
 1297              	.LVL118:
 525:Src/Eagle_TRT.c **** 		{
 1298              		.loc 1 525 0
 1299 002c 6368     		ldr	r3, [r4, #4]
 1300 002e 272B     		cmp	r3, #39
 1301 0030 03D0     		beq	.L93
 531:Src/Eagle_TRT.c **** 		}
 1302              		.loc 1 531 0
 1303 0032 0133     		adds	r3, r3, #1
 1304 0034 6360     		str	r3, [r4, #4]
 533:Src/Eagle_TRT.c **** 	}
 1305              		.loc 1 533 0
 1306 0036 0120     		movs	r0, #1
 1307 0038 70BD     		pop	{r4, r5, r6, pc}
 1308              	.LVL119:
 1309              	.L93:
 527:Src/Eagle_TRT.c **** 		}
 1310              		.loc 1 527 0
 1311 003a 0023     		movs	r3, #0
 1312 003c 6360     		str	r3, [r4, #4]
 533:Src/Eagle_TRT.c **** 	}
 1313              		.loc 1 533 0
 1314 003e 0120     		movs	r0, #1
 1315 0040 70BD     		pop	{r4, r5, r6, pc}
 1316              	.LBE4:
 1317              		.cfi_endproc
 1318              	.LFE145:
 1320              		.section	.text.pop,"ax",%progbits
 1321              		.align	1
 1322              		.global	pop
ARM GAS  /tmp/ccYuDwjm.s 			page 42


 1323              		.syntax unified
 1324              		.thumb
 1325              		.thumb_func
 1326              		.fpu fpv4-sp-d16
 1328              	pop:
 1329              	.LFB146:
 540:Src/Eagle_TRT.c **** 	int res;
 1330              		.loc 1 540 0
 1331              		.cfi_startproc
 1332              		@ args = 0, pretend = 0, frame = 0
 1333              		@ frame_needed = 0, uses_anonymous_args = 0
 1334              	.LVL120:
 1335 0000 38B5     		push	{r3, r4, r5, lr}
 1336              	.LCFI22:
 1337              		.cfi_def_cfa_offset 16
 1338              		.cfi_offset 3, -16
 1339              		.cfi_offset 4, -12
 1340              		.cfi_offset 5, -8
 1341              		.cfi_offset 14, -4
 1342 0002 0546     		mov	r5, r0
 1343 0004 0C46     		mov	r4, r1
 542:Src/Eagle_TRT.c **** 	{
 1344              		.loc 1 542 0
 1345 0006 0846     		mov	r0, r1
 1346              	.LVL121:
 1347 0008 FFF7FEFF 		bl	emptyp
 1348              	.LVL122:
 1349 000c 08B1     		cbz	r0, .L99
 544:Src/Eagle_TRT.c **** 	}
 1350              		.loc 1 544 0
 1351 000e 0020     		movs	r0, #0
 1352              	.LVL123:
 563:Src/Eagle_TRT.c **** /// ---- end queue ----///
 1353              		.loc 1 563 0
 1354 0010 38BD     		pop	{r3, r4, r5, pc}
 1355              	.LVL124:
 1356              	.L99:
 548:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 1357              		.loc 1 548 0
 1358 0012 2368     		ldr	r3, [r4]
 1359 0014 0233     		adds	r3, r3, #2
 1360 0016 04EB8303 		add	r3, r4, r3, lsl #2
 1361 001a 5968     		ldr	r1, [r3, #4]
 1362 001c 2846     		mov	r0, r5
 1363 001e FFF7FEFF 		bl	strcpy
 1364              	.LVL125:
 549:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 1365              		.loc 1 549 0
 1366 0022 2368     		ldr	r3, [r4]
 1367 0024 0233     		adds	r3, r3, #2
 1368 0026 04EB8303 		add	r3, r4, r3, lsl #2
 1369 002a 5868     		ldr	r0, [r3, #4]
 1370 002c FFF7FEFF 		bl	free
 1371              	.LVL126:
 551:Src/Eagle_TRT.c **** 		{
 1372              		.loc 1 551 0
 1373 0030 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccYuDwjm.s 			page 43


 1374 0032 272B     		cmp	r3, #39
 1375 0034 03D0     		beq	.L100
 557:Src/Eagle_TRT.c **** 		}
 1376              		.loc 1 557 0
 1377 0036 0133     		adds	r3, r3, #1
 1378 0038 2360     		str	r3, [r4]
 559:Src/Eagle_TRT.c **** 	}
 1379              		.loc 1 559 0
 1380 003a 0120     		movs	r0, #1
 1381 003c 38BD     		pop	{r3, r4, r5, pc}
 1382              	.LVL127:
 1383              	.L100:
 553:Src/Eagle_TRT.c **** 		}
 1384              		.loc 1 553 0
 1385 003e 0023     		movs	r3, #0
 1386 0040 2360     		str	r3, [r4]
 559:Src/Eagle_TRT.c **** 	}
 1387              		.loc 1 559 0
 1388 0042 0120     		movs	r0, #1
 1389 0044 38BD     		pop	{r3, r4, r5, pc}
 1390              		.cfi_endproc
 1391              	.LFE146:
 1393              		.section	.text.print,"ax",%progbits
 1394              		.align	1
 1395              		.global	print
 1396              		.syntax unified
 1397              		.thumb
 1398              		.thumb_func
 1399              		.fpu fpv4-sp-d16
 1401              	print:
 1402              	.LFB147:
 568:Src/Eagle_TRT.c **** 
 1403              		.loc 1 568 0
 1404              		.cfi_startproc
 1405              		@ args = 0, pretend = 0, frame = 0
 1406              		@ frame_needed = 0, uses_anonymous_args = 0
 1407              	.LVL128:
 1408 0000 38B5     		push	{r3, r4, r5, lr}
 1409              	.LCFI23:
 1410              		.cfi_def_cfa_offset 16
 1411              		.cfi_offset 3, -16
 1412              		.cfi_offset 4, -12
 1413              		.cfi_offset 5, -8
 1414              		.cfi_offset 14, -4
 1415 0002 0546     		mov	r5, r0
 1416 0004 0C46     		mov	r4, r1
 1417              	.LVL129:
 572:Src/Eagle_TRT.c **** 	{
 1418              		.loc 1 572 0
 1419 0006 0846     		mov	r0, r1
 1420              	.LVL130:
 1421 0008 FFF7FEFF 		bl	strlen
 1422              	.LVL131:
 1423 000c 82B2     		uxth	r2, r0
 1424 000e 2146     		mov	r1, r4
 1425 0010 2846     		mov	r0, r5
 1426 0012 FFF7FEFF 		bl	HAL_UART_Transmit_IT
ARM GAS  /tmp/ccYuDwjm.s 			page 44


 1427              	.LVL132:
 1428 0016 10B9     		cbnz	r0, .L106
 574:Src/Eagle_TRT.c **** 	}
 1429              		.loc 1 574 0
 1430 0018 0123     		movs	r3, #1
 1431              	.LVL133:
 1432              	.L101:
 589:Src/Eagle_TRT.c **** 
 1433              		.loc 1 589 0
 1434 001a 1846     		mov	r0, r3
 1435 001c 38BD     		pop	{r3, r4, r5, pc}
 1436              	.LVL134:
 1437              	.L106:
 578:Src/Eagle_TRT.c **** 		{
 1438              		.loc 1 578 0
 1439 001e 0449     		ldr	r1, .L107
 1440 0020 2046     		mov	r0, r4
 1441 0022 FFF7FEFF 		bl	push
 1442              	.LVL135:
 1443 0026 0346     		mov	r3, r0
 1444 0028 0028     		cmp	r0, #0
 1445 002a F6D0     		beq	.L101
 584:Src/Eagle_TRT.c **** 		}
 1446              		.loc 1 584 0
 1447 002c 0123     		movs	r3, #1
 1448              	.LVL136:
 588:Src/Eagle_TRT.c **** }
 1449              		.loc 1 588 0
 1450 002e F4E7     		b	.L101
 1451              	.L108:
 1452              		.align	2
 1453              	.L107:
 1454 0030 00000000 		.word	.LANCHOR35
 1455              		.cfi_endproc
 1456              	.LFE147:
 1458              		.section	.text.print_it,"ax",%progbits
 1459              		.align	1
 1460              		.global	print_it
 1461              		.syntax unified
 1462              		.thumb
 1463              		.thumb_func
 1464              		.fpu fpv4-sp-d16
 1466              	print_it:
 1467              	.LFB148:
 592:Src/Eagle_TRT.c **** 
 1468              		.loc 1 592 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 56
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              	.LVL137:
 1473 0000 10B5     		push	{r4, lr}
 1474              	.LCFI24:
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 4, -8
 1477              		.cfi_offset 14, -4
 1478 0002 8EB0     		sub	sp, sp, #56
 1479              	.LCFI25:
ARM GAS  /tmp/ccYuDwjm.s 			page 45


 1480              		.cfi_def_cfa_offset 64
 1481 0004 0446     		mov	r4, r0
 596:Src/Eagle_TRT.c **** 	{
 1482              		.loc 1 596 0
 1483 0006 0849     		ldr	r1, .L113
 1484 0008 01A8     		add	r0, sp, #4
 1485              	.LVL138:
 1486 000a FFF7FEFF 		bl	pop
 1487              	.LVL139:
 1488 000e 0128     		cmp	r0, #1
 1489 0010 01D0     		beq	.L112
 1490              	.L109:
 600:Src/Eagle_TRT.c **** 
 1491              		.loc 1 600 0
 1492 0012 0EB0     		add	sp, sp, #56
 1493              	.LCFI26:
 1494              		.cfi_remember_state
 1495              		.cfi_def_cfa_offset 8
 1496              		@ sp needed
 1497 0014 10BD     		pop	{r4, pc}
 1498              	.LVL140:
 1499              	.L112:
 1500              	.LCFI27:
 1501              		.cfi_restore_state
 598:Src/Eagle_TRT.c **** 	}
 1502              		.loc 1 598 0
 1503 0016 01A8     		add	r0, sp, #4
 1504 0018 FFF7FEFF 		bl	strlen
 1505              	.LVL141:
 1506 001c 82B2     		uxth	r2, r0
 1507 001e 01A9     		add	r1, sp, #4
 1508 0020 2046     		mov	r0, r4
 1509 0022 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 1510              	.LVL142:
 600:Src/Eagle_TRT.c **** 
 1511              		.loc 1 600 0
 1512 0026 F4E7     		b	.L109
 1513              	.L114:
 1514              		.align	2
 1515              	.L113:
 1516 0028 00000000 		.word	.LANCHOR35
 1517              		.cfi_endproc
 1518              	.LFE148:
 1520              		.section	.text.gps_init,"ax",%progbits
 1521              		.align	1
 1522              		.global	gps_init
 1523              		.syntax unified
 1524              		.thumb
 1525              		.thumb_func
 1526              		.fpu fpv4-sp-d16
 1528              	gps_init:
 1529              	.LFB149:
 622:Src/Eagle_TRT.c **** 
 1530              		.loc 1 622 0
 1531              		.cfi_startproc
 1532              		@ args = 0, pretend = 0, frame = 0
 1533              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccYuDwjm.s 			page 46


 1534              	.LVL143:
 1535 0000 70B5     		push	{r4, r5, r6, lr}
 1536              	.LCFI28:
 1537              		.cfi_def_cfa_offset 16
 1538              		.cfi_offset 4, -16
 1539              		.cfi_offset 5, -12
 1540              		.cfi_offset 6, -8
 1541              		.cfi_offset 14, -4
 1542 0002 0C46     		mov	r4, r1
 625:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 1543              		.loc 1 625 0
 1544 0004 3D4D     		ldr	r5, .L117
 1545 0006 2860     		str	r0, [r5]
 626:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1546              		.loc 1 626 0
 1547 0008 4FF41652 		mov	r2, #9600
 1548 000c 4260     		str	r2, [r0, #4]
 627:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1549              		.loc 1 627 0
 1550 000e FFF7FEFF 		bl	HAL_UART_Init
 1551              	.LVL144:
 628:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1552              		.loc 1 628 0
 1553 0012 3B4E     		ldr	r6, .L117+4
 1554 0014 C823     		movs	r3, #200
 1555 0016 1422     		movs	r2, #20
 1556 0018 3146     		mov	r1, r6
 1557 001a 2868     		ldr	r0, [r5]
 1558 001c FFF7FEFF 		bl	HAL_UART_Transmit
 1559              	.LVL145:
 629:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 1560              		.loc 1 629 0
 1561 0020 4FF4FA70 		mov	r0, #500
 1562 0024 FFF7FEFF 		bl	HAL_Delay
 1563              	.LVL146:
 630:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1564              		.loc 1 630 0
 1565 0028 2868     		ldr	r0, [r5]
 1566 002a 4FF46143 		mov	r3, #57600
 1567 002e 4360     		str	r3, [r0, #4]
 631:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1568              		.loc 1 631 0
 1569 0030 FFF7FEFF 		bl	HAL_UART_Init
 1570              	.LVL147:
 632:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1571              		.loc 1 632 0
 1572 0034 C823     		movs	r3, #200
 1573 0036 1422     		movs	r2, #20
 1574 0038 3146     		mov	r1, r6
 1575 003a 2868     		ldr	r0, [r5]
 1576 003c FFF7FEFF 		bl	HAL_UART_Transmit
 1577              	.LVL148:
 633:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 1578              		.loc 1 633 0
 1579 0040 4FF4FA70 		mov	r0, #500
 1580 0044 FFF7FEFF 		bl	HAL_Delay
 1581              	.LVL149:
ARM GAS  /tmp/ccYuDwjm.s 			page 47


 634:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1582              		.loc 1 634 0
 1583 0048 2868     		ldr	r0, [r5]
 1584 004a 4FF4E133 		mov	r3, #115200
 1585 004e 4360     		str	r3, [r0, #4]
 635:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1586              		.loc 1 635 0
 1587 0050 FFF7FEFF 		bl	HAL_UART_Init
 1588              	.LVL150:
 636:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1589              		.loc 1 636 0
 1590 0054 C823     		movs	r3, #200
 1591 0056 1422     		movs	r2, #20
 1592 0058 3146     		mov	r1, r6
 1593 005a 2868     		ldr	r0, [r5]
 1594 005c FFF7FEFF 		bl	HAL_UART_Transmit
 1595              	.LVL151:
 637:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 1596              		.loc 1 637 0
 1597 0060 4FF4FA70 		mov	r0, #500
 1598 0064 FFF7FEFF 		bl	HAL_Delay
 1599              	.LVL152:
 638:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1600              		.loc 1 638 0
 1601 0068 C823     		movs	r3, #200
 1602 006a 1122     		movs	r2, #17
 1603 006c 2549     		ldr	r1, .L117+8
 1604 006e 2868     		ldr	r0, [r5]
 1605 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 1606              	.LVL153:
 639:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 1607              		.loc 1 639 0
 1608 0074 4FF4FA70 		mov	r0, #500
 1609 0078 FFF7FEFF 		bl	HAL_Delay
 1610              	.LVL154:
 640:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1611              		.loc 1 640 0
 1612 007c C823     		movs	r3, #200
 1613 007e 3322     		movs	r2, #51
 1614 0080 2149     		ldr	r1, .L117+12
 1615 0082 2868     		ldr	r0, [r5]
 1616 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 1617              	.LVL155:
 641:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 1618              		.loc 1 641 0
 1619 0088 4FF4FA70 		mov	r0, #500
 1620 008c FFF7FEFF 		bl	HAL_Delay
 1621              	.LVL156:
 642:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 1622              		.loc 1 642 0
 1623 0090 1E4B     		ldr	r3, .L117+16
 1624 0092 1868     		ldr	r0, [r3]
 1625 0094 2060     		str	r0, [r4]	@ unaligned
 1626 0096 9A88     		ldrh	r2, [r3, #4]	@ unaligned
 1627 0098 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1628 009a A280     		strh	r2, [r4, #4]	@ unaligned
 1629 009c A371     		strb	r3, [r4, #6]
ARM GAS  /tmp/ccYuDwjm.s 			page 48


 643:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 1630              		.loc 1 643 0
 1631 009e 1C4B     		ldr	r3, .L117+20
 1632 00a0 03CB     		ldmia	r3!, {r0, r1}
 1633 00a2 E060     		str	r0, [r4, #12]	@ unaligned
 1634 00a4 2161     		str	r1, [r4, #16]	@ unaligned
 1635 00a6 1B88     		ldrh	r3, [r3]	@ unaligned
 1636 00a8 A382     		strh	r3, [r4, #20]	@ unaligned
 644:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 1637              		.loc 1 644 0
 1638 00aa 1A4B     		ldr	r3, .L117+24
 1639 00ac 1B88     		ldrh	r3, [r3]	@ unaligned
 1640 00ae A383     		strh	r3, [r4, #28]	@ unaligned
 645:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 1641              		.loc 1 645 0
 1642 00b0 194B     		ldr	r3, .L117+28
 1643 00b2 03CB     		ldmia	r3!, {r0, r1}
 1644 00b4 E062     		str	r0, [r4, #44]	@ unaligned
 1645 00b6 2163     		str	r1, [r4, #48]	@ unaligned
 1646 00b8 1988     		ldrh	r1, [r3]	@ unaligned
 1647 00ba 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1648 00bc A186     		strh	r1, [r4, #52]	@ unaligned
 1649 00be 84F83630 		strb	r3, [r4, #54]
 646:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
 1650              		.loc 1 646 0
 1651 00c2 164B     		ldr	r3, .L117+32
 1652 00c4 1B88     		ldrh	r3, [r3]	@ unaligned
 1653 00c6 A387     		strh	r3, [r4, #60]	@ unaligned
 647:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 1654              		.loc 1 647 0
 1655 00c8 154B     		ldr	r3, .L117+36
 1656 00ca 1868     		ldr	r0, [r3]
 1657 00cc E064     		str	r0, [r4, #76]	@ unaligned
 1658 00ce 9988     		ldrh	r1, [r3, #4]	@ unaligned
 1659 00d0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1660 00d2 A4F85010 		strh	r1, [r4, #80]	@ unaligned
 1661 00d6 84F85230 		strb	r3, [r4, #82]
 648:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 1662              		.loc 1 648 0
 1663 00da 124B     		ldr	r3, .L117+40
 1664 00dc 1868     		ldr	r0, [r3]
 1665 00de A065     		str	r0, [r4, #88]	@ unaligned
 1666 00e0 9988     		ldrh	r1, [r3, #4]	@ unaligned
 1667 00e2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1668 00e4 A4F85C10 		strh	r1, [r4, #92]	@ unaligned
 1669 00e8 84F85E30 		strb	r3, [r4, #94]
 649:Src/Eagle_TRT.c **** 
 1670              		.loc 1 649 0
 1671 00ec 0122     		movs	r2, #1
 1672 00ee 0E49     		ldr	r1, .L117+44
 1673 00f0 2868     		ldr	r0, [r5]
 1674 00f2 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1675              	.LVL157:
 652:Src/Eagle_TRT.c **** 
 1676              		.loc 1 652 0
 1677 00f6 0120     		movs	r0, #1
 1678 00f8 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccYuDwjm.s 			page 49


 1679              	.LVL158:
 1680              	.L118:
 1681 00fa 00BF     		.align	2
 1682              	.L117:
 1683 00fc 00000000 		.word	huart_GPS
 1684 0100 00000000 		.word	.LC2
 1685 0104 18000000 		.word	.LC3
 1686 0108 2C000000 		.word	.LC4
 1687 010c 60000000 		.word	.LC5
 1688 0110 68000000 		.word	.LC6
 1689 0114 74000000 		.word	.LC7
 1690 0118 78000000 		.word	.LC8
 1691 011c 84000000 		.word	.LC9
 1692 0120 88000000 		.word	.LC10
 1693 0124 90000000 		.word	.LC11
 1694 0128 00000000 		.word	buffer_gps
 1695              		.cfi_endproc
 1696              	.LFE149:
 1698              		.global	__aeabi_dmul
 1699              		.global	__aeabi_d2iz
 1700              		.section	.text.gps_read_it,"ax",%progbits
 1701              		.align	1
 1702              		.global	gps_read_it
 1703              		.syntax unified
 1704              		.thumb
 1705              		.thumb_func
 1706              		.fpu fpv4-sp-d16
 1708              	gps_read_it:
 1709              	.LFB150:
 655:Src/Eagle_TRT.c **** 
 1710              		.loc 1 655 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 0
 1713              		@ frame_needed = 0, uses_anonymous_args = 0
 1714              	.LVL159:
 1715 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1716              	.LCFI29:
 1717              		.cfi_def_cfa_offset 24
 1718              		.cfi_offset 3, -24
 1719              		.cfi_offset 4, -20
 1720              		.cfi_offset 5, -16
 1721              		.cfi_offset 6, -12
 1722              		.cfi_offset 7, -8
 1723              		.cfi_offset 14, -4
 1724              	.LVL160:
 693:Src/Eagle_TRT.c **** 	{
 1725              		.loc 1 693 0
 1726 0002 A34B     		ldr	r3, .L173+16
 1727 0004 1B68     		ldr	r3, [r3]
 1728 0006 8342     		cmp	r3, r0
 1729 0008 02D0     		beq	.L155
 657:Src/Eagle_TRT.c **** 
 1730              		.loc 1 657 0
 1731 000a 0024     		movs	r4, #0
 1732              	.LVL161:
 1733              	.L119:
 855:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
ARM GAS  /tmp/ccYuDwjm.s 			page 50


 1734              		.loc 1 855 0
 1735 000c 2046     		mov	r0, r4
 1736 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1737              	.LVL162:
 1738              	.L155:
 1739 0010 0D46     		mov	r5, r1
 696:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 1740              		.loc 1 696 0
 1741 0012 A04C     		ldr	r4, .L173+20
 1742 0014 0122     		movs	r2, #1
 1743 0016 2146     		mov	r1, r4
 1744              	.LVL163:
 1745 0018 1846     		mov	r0, r3
 1746              	.LVL164:
 1747 001a FFF7FEFF 		bl	HAL_UART_Receive_IT
 1748              	.LVL165:
 697:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 1749              		.loc 1 697 0
 1750 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1751 0020 9D4A     		ldr	r2, .L173+24
 1752 0022 1370     		strb	r3, [r2]
 698:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 1753              		.loc 1 698 0
 1754 0024 9D4A     		ldr	r2, .L173+28
 1755 0026 1268     		ldr	r2, [r2]
 1756 0028 012A     		cmp	r2, #1
 1757 002a 04D0     		beq	.L156
 1758              	.L121:
 847:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 1759              		.loc 1 847 0
 1760 002c 242B     		cmp	r3, #36
 1761 002e 00F07781 		beq	.L157
 657:Src/Eagle_TRT.c **** 
 1762              		.loc 1 657 0
 1763 0032 0024     		movs	r4, #0
 854:Src/Eagle_TRT.c **** }
 1764              		.loc 1 854 0
 1765 0034 EAE7     		b	.L119
 1766              	.L156:
 698:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 1767              		.loc 1 698 0 discriminator 1
 1768 0036 242B     		cmp	r3, #36
 1769 0038 F8D0     		beq	.L121
 700:Src/Eagle_TRT.c **** 			cont_string++;
 1770              		.loc 1 700 0
 1771 003a 994A     		ldr	r2, .L173+32
 1772 003c 1168     		ldr	r1, [r2]
 1773 003e 9948     		ldr	r0, .L173+36
 1774 0040 4354     		strb	r3, [r0, r1]
 701:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 1775              		.loc 1 701 0
 1776 0042 481C     		adds	r0, r1, #1
 1777 0044 1060     		str	r0, [r2]
 702:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 1778              		.loc 1 702 0
 1779 0046 0D2B     		cmp	r3, #13
 1780 0048 03D0     		beq	.L122
ARM GAS  /tmp/ccYuDwjm.s 			page 51


 702:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 1781              		.loc 1 702 0 is_stmt 0 discriminator 1
 1782 004a 0A2B     		cmp	r3, #10
 1783 004c 01D0     		beq	.L122
 657:Src/Eagle_TRT.c **** 
 1784              		.loc 1 657 0 is_stmt 1
 1785 004e 0024     		movs	r4, #0
 1786 0050 DCE7     		b	.L119
 1787              	.L122:
 704:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 1788              		.loc 1 704 0
 1789 0052 934B     		ldr	r3, .L173+32
 1790 0054 1960     		str	r1, [r3]
 705:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 1791              		.loc 1 705 0
 1792 0056 934B     		ldr	r3, .L173+36
 1793 0058 0022     		movs	r2, #0
 1794 005a 5A54     		strb	r2, [r3, r1]
 706:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 1795              		.loc 1 706 0
 1796 005c 8F48     		ldr	r0, .L173+28
 1797 005e 0260     		str	r2, [r0]
 707:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 1798              		.loc 1 707 0
 1799 0060 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1800 0062 472B     		cmp	r3, #71
 1801 0064 04D0     		beq	.L158
 1802              	.L123:
 793:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 1803              		.loc 1 793 0
 1804 0066 562B     		cmp	r3, #86
 1805 0068 00F0C680 		beq	.L159
 657:Src/Eagle_TRT.c **** 
 1806              		.loc 1 657 0
 1807 006c 0024     		movs	r4, #0
 1808 006e CDE7     		b	.L119
 1809              	.L158:
 707:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 1810              		.loc 1 707 0 discriminator 1
 1811 0070 8C4A     		ldr	r2, .L173+36
 1812 0072 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 1813 0074 472A     		cmp	r2, #71
 1814 0076 F6D1     		bne	.L123
 707:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 1815              		.loc 1 707 0 is_stmt 0 discriminator 2
 1816 0078 8A4A     		ldr	r2, .L173+36
 1817 007a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 1818 007c 412A     		cmp	r2, #65
 1819 007e F2D1     		bne	.L123
 709:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 1820              		.loc 1 709 0 is_stmt 1
 1821 0080 8848     		ldr	r0, .L173+36
 1822 0082 FFF7FEFF 		bl	checksum
 1823              	.LVL166:
 1824 0086 0128     		cmp	r0, #1
 1825 0088 3BD0     		beq	.L146
 790:Src/Eagle_TRT.c **** 					}
ARM GAS  /tmp/ccYuDwjm.s 			page 52


 1826              		.loc 1 790 0
 1827 008a 0024     		movs	r4, #0
 1828 008c BEE7     		b	.L119
 1829              	.LVL167:
 1830              	.L161:
 1831              	.LBB5:
 1832              	.LBB6:
 715:Src/Eagle_TRT.c **** 							else
 1833              		.loc 1 715 0
 1834 008e 0133     		adds	r3, r3, #1
 1835              	.LVL168:
 1836              	.L126:
 712:Src/Eagle_TRT.c **** 						{
 1837              		.loc 1 712 0 discriminator 2
 1838 0090 0130     		adds	r0, r0, #1
 1839              	.LVL169:
 1840              	.L124:
 712:Src/Eagle_TRT.c **** 						{
 1841              		.loc 1 712 0 is_stmt 0 discriminator 1
 1842 0092 6328     		cmp	r0, #99
 1843 0094 3CDC     		bgt	.L160
 714:Src/Eagle_TRT.c **** 								cont_comma++;
 1844              		.loc 1 714 0 is_stmt 1
 1845 0096 834A     		ldr	r2, .L173+36
 1846 0098 125C     		ldrb	r2, [r2, r0]	@ zero_extendqisi2
 1847 009a 2C2A     		cmp	r2, #44
 1848 009c F7D0     		beq	.L161
 718:Src/Eagle_TRT.c **** 								{ //save the time
 1849              		.loc 1 718 0
 1850 009e 012B     		cmp	r3, #1
 1851 00a0 07D0     		beq	.L162
 723:Src/Eagle_TRT.c **** 								{ //save latitude
 1852              		.loc 1 723 0
 1853 00a2 022B     		cmp	r3, #2
 1854 00a4 0BD1     		bne	.L128
 725:Src/Eagle_TRT.c **** 									cont_latitude++;
 1855              		.loc 1 725 0
 1856 00a6 05EB040E 		add	lr, r5, r4
 1857 00aa 8EF80C20 		strb	r2, [lr, #12]
 726:Src/Eagle_TRT.c **** 								}
 1858              		.loc 1 726 0
 1859 00ae 0134     		adds	r4, r4, #1
 1860              	.LVL170:
 1861 00b0 EEE7     		b	.L126
 1862              	.L162:
 720:Src/Eagle_TRT.c **** 									cont_time++;
 1863              		.loc 1 720 0
 1864 00b2 05EB010E 		add	lr, r5, r1
 1865 00b6 8EF85820 		strb	r2, [lr, #88]
 721:Src/Eagle_TRT.c **** 								}
 1866              		.loc 1 721 0
 1867 00ba 0131     		adds	r1, r1, #1
 1868              	.LVL171:
 1869 00bc E8E7     		b	.L126
 1870              	.L128:
 728:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 1871              		.loc 1 728 0
ARM GAS  /tmp/ccYuDwjm.s 			page 53


 1872 00be 032B     		cmp	r3, #3
 1873 00c0 01D1     		bne	.L129
 730:Src/Eagle_TRT.c **** 								}
 1874              		.loc 1 730 0
 1875 00c2 2A77     		strb	r2, [r5, #28]
 1876 00c4 E4E7     		b	.L126
 1877              	.L129:
 732:Src/Eagle_TRT.c **** 								{ //save longitude
 1878              		.loc 1 732 0
 1879 00c6 042B     		cmp	r3, #4
 1880 00c8 0BD0     		beq	.L163
 737:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 1881              		.loc 1 737 0
 1882 00ca 052B     		cmp	r3, #5
 1883 00cc 0FD0     		beq	.L164
 741:Src/Eagle_TRT.c **** 								{
 1884              		.loc 1 741 0
 1885 00ce 062B     		cmp	r3, #6
 1886 00d0 10D0     		beq	.L165
 745:Src/Eagle_TRT.c **** 								{ //save altitude
 1887              		.loc 1 745 0
 1888 00d2 092B     		cmp	r3, #9
 1889 00d4 11D1     		bne	.L133
 747:Src/Eagle_TRT.c **** 									cont_altitude++;
 1890              		.loc 1 747 0
 1891 00d6 05EB070E 		add	lr, r5, r7
 1892 00da 8EF84C20 		strb	r2, [lr, #76]
 748:Src/Eagle_TRT.c **** 								}
 1893              		.loc 1 748 0
 1894 00de 0137     		adds	r7, r7, #1
 1895              	.LVL172:
 1896 00e0 D6E7     		b	.L126
 1897              	.L163:
 734:Src/Eagle_TRT.c **** 									cont_longitude++;
 1898              		.loc 1 734 0
 1899 00e2 05EB060E 		add	lr, r5, r6
 1900 00e6 8EF82C20 		strb	r2, [lr, #44]
 735:Src/Eagle_TRT.c **** 								}
 1901              		.loc 1 735 0
 1902 00ea 0136     		adds	r6, r6, #1
 1903              	.LVL173:
 1904 00ec D0E7     		b	.L126
 1905              	.L164:
 739:Src/Eagle_TRT.c **** 								}
 1906              		.loc 1 739 0
 1907 00ee 85F83C20 		strb	r2, [r5, #60]
 1908 00f2 CDE7     		b	.L126
 1909              	.L165:
 743:Src/Eagle_TRT.c **** 								}
 1910              		.loc 1 743 0
 1911 00f4 85F86320 		strb	r2, [r5, #99]
 1912 00f8 CAE7     		b	.L126
 1913              	.L133:
 750:Src/Eagle_TRT.c **** 								{
 1914              		.loc 1 750 0
 1915 00fa 0A2B     		cmp	r3, #10
 1916 00fc C8D1     		bne	.L126
ARM GAS  /tmp/ccYuDwjm.s 			page 54


 752:Src/Eagle_TRT.c **** 								}
 1917              		.loc 1 752 0
 1918 00fe 6420     		movs	r0, #100
 1919              	.LVL174:
 1920 0100 C6E7     		b	.L126
 1921              	.LVL175:
 1922              	.L146:
 1923              	.LBE6:
 1924              	.LBE5:
 1925 0102 0520     		movs	r0, #5
 1926 0104 0021     		movs	r1, #0
 1927 0106 0F46     		mov	r7, r1
 1928 0108 0E46     		mov	r6, r1
 1929 010a 0C46     		mov	r4, r1
 1930 010c 0B46     		mov	r3, r1
 1931 010e C0E7     		b	.L124
 1932              	.LVL176:
 1933              	.L160:
 1934              	.LBB7:
 757:Src/Eagle_TRT.c **** 						{
 1935              		.loc 1 757 0
 1936 0110 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 1937              	.LVL177:
 1938 0114 302B     		cmp	r3, #48
 1939 0116 32D1     		bne	.L135
 759:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 1940              		.loc 1 759 0
 1941 0118 0023     		movs	r3, #0
 1942 011a 6B62     		str	r3, [r5, #36]
 760:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
 1943              		.loc 1 760 0
 1944 011c AB62     		str	r3, [r5, #40]
 761:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 1945              		.loc 1 761 0
 1946 011e 6B64     		str	r3, [r5, #68]
 762:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 1947              		.loc 1 762 0
 1948 0120 AB64     		str	r3, [r5, #72]
 763:Src/Eagle_TRT.c **** 						}
 1949              		.loc 1 763 0
 1950 0122 6B65     		str	r3, [r5, #84]
 1951              	.LVL178:
 1952              	.L136:
 776:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 1953              		.loc 1 776 0
 1954 0124 6048     		ldr	r0, .L173+40
 1955 0126 0824     		movs	r4, #8
 1956              	.LVL179:
 1957 0128 0472     		strb	r4, [r0, #8]
 777:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 1958              		.loc 1 777 0
 1959 012a 6B6C     		ldr	r3, [r5, #68]
 1960 012c 4FF48072 		mov	r2, #256
 1961 0130 93FBF2F1 		sdiv	r1, r3, r2
 1962 0134 4172     		strb	r1, [r0, #9]
 778:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 1963              		.loc 1 778 0
ARM GAS  /tmp/ccYuDwjm.s 			page 55


 1964 0136 5942     		rsbs	r1, r3, #0
 1965 0138 DBB2     		uxtb	r3, r3
 1966 013a C9B2     		uxtb	r1, r1
 1967 013c 58BF     		it	pl
 1968 013e 4B42     		rsbpl	r3, r1, #0
 1969 0140 8372     		strb	r3, [r0, #10]
 779:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 1970              		.loc 1 779 0
 1971 0142 AB6C     		ldr	r3, [r5, #72]
 1972 0144 93FBF2F1 		sdiv	r1, r3, r2
 1973 0148 C172     		strb	r1, [r0, #11]
 780:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 1974              		.loc 1 780 0
 1975 014a 5942     		rsbs	r1, r3, #0
 1976 014c DBB2     		uxtb	r3, r3
 1977 014e C9B2     		uxtb	r1, r1
 1978 0150 58BF     		it	pl
 1979 0152 4B42     		rsbpl	r3, r1, #0
 1980 0154 0373     		strb	r3, [r0, #12]
 781:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 1981              		.loc 1 781 0
 1982 0156 05F13C03 		add	r3, r5, #60
 1983 015a 4373     		strb	r3, [r0, #13]
 782:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 1984              		.loc 1 782 0
 1985 015c 6B6D     		ldr	r3, [r5, #84]
 1986 015e 93FBF2F2 		sdiv	r2, r3, r2
 1987 0162 8273     		strb	r2, [r0, #14]
 783:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 1988              		.loc 1 783 0
 1989 0164 5A42     		rsbs	r2, r3, #0
 1990 0166 DBB2     		uxtb	r3, r3
 1991 0168 D2B2     		uxtb	r2, r2
 1992 016a 58BF     		it	pl
 1993 016c 5342     		rsbpl	r3, r2, #0
 1994 016e C373     		strb	r3, [r0, #15]
 784:Src/Eagle_TRT.c **** 						can.size = 8;
 1995              		.loc 1 784 0
 1996 0170 D023     		movs	r3, #208
 1997 0172 0360     		str	r3, [r0]
 785:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 1998              		.loc 1 785 0
 1999 0174 4460     		str	r4, [r0, #4]
 786:Src/Eagle_TRT.c **** 					}
 2000              		.loc 1 786 0
 2001 0176 FFF7FEFF 		bl	CAN_Send
 2002              	.LVL180:
 2003              	.LBE7:
 657:Src/Eagle_TRT.c **** 
 2004              		.loc 1 657 0
 2005 017a 0024     		movs	r4, #0
 2006 017c 46E7     		b	.L119
 2007              	.LVL181:
 2008              	.L135:
 2009              	.LBB8:
 767:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 2010              		.loc 1 767 0
ARM GAS  /tmp/ccYuDwjm.s 			page 56


 2011 017e 05F10C00 		add	r0, r5, #12
 2012              	.LVL182:
 2013 0182 FFF7FEFF 		bl	atof
 2014              	.LVL183:
 2015 0186 3EA3     		adr	r3, .L173
 2016 0188 D3E90023 		ldrd	r2, [r3]
 2017 018c 51EC100B 		vmov	r0, r1, d0
 2018 0190 FFF7FEFF 		bl	__aeabi_dmul
 2019              	.LVL184:
 2020 0194 FFF7FEFF 		bl	__aeabi_d2iz
 2021              	.LVL185:
 2022 0198 2862     		str	r0, [r5, #32]
 768:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 2023              		.loc 1 768 0
 2024 019a 05F12C00 		add	r0, r5, #44
 2025 019e FFF7FEFF 		bl	atof
 2026              	.LVL186:
 2027 01a2 39A3     		adr	r3, .L173+8
 2028 01a4 D3E90023 		ldrd	r2, [r3]
 2029 01a8 51EC100B 		vmov	r0, r1, d0
 2030 01ac FFF7FEFF 		bl	__aeabi_dmul
 2031              	.LVL187:
 2032 01b0 FFF7FEFF 		bl	__aeabi_d2iz
 2033              	.LVL188:
 2034 01b4 2864     		str	r0, [r5, #64]
 769:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 2035              		.loc 1 769 0
 2036 01b6 05F14C00 		add	r0, r5, #76
 2037 01ba FFF7FEFF 		bl	atof
 2038              	.LVL189:
 2039 01be 0022     		movs	r2, #0
 2040 01c0 3A4B     		ldr	r3, .L173+44
 2041 01c2 51EC100B 		vmov	r0, r1, d0
 2042 01c6 FFF7FEFF 		bl	__aeabi_dmul
 2043              	.LVL190:
 2044 01ca FFF7FEFF 		bl	__aeabi_d2iz
 2045              	.LVL191:
 2046 01ce 6865     		str	r0, [r5, #84]
 770:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 2047              		.loc 1 770 0
 2048 01d0 2A6A     		ldr	r2, [r5, #32]
 2049 01d2 42F21073 		movw	r3, #10000
 2050 01d6 92FBF3F3 		sdiv	r3, r2, r3
 2051 01da 6B62     		str	r3, [r5, #36]
 771:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 2052              		.loc 1 771 0
 2053 01dc 3449     		ldr	r1, .L173+48
 2054 01de 01FB0323 		mla	r3, r1, r3, r2
 2055 01e2 AB62     		str	r3, [r5, #40]
 772:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 2056              		.loc 1 772 0
 2057 01e4 2A6C     		ldr	r2, [r5, #64]
 2058 01e6 334B     		ldr	r3, .L173+52
 2059 01e8 92FBF3F3 		sdiv	r3, r2, r3
 2060 01ec 6B64     		str	r3, [r5, #68]
 773:Src/Eagle_TRT.c **** 						}
 2061              		.loc 1 773 0
ARM GAS  /tmp/ccYuDwjm.s 			page 57


 2062 01ee 3249     		ldr	r1, .L173+56
 2063 01f0 01FB0323 		mla	r3, r1, r3, r2
 2064 01f4 AB64     		str	r3, [r5, #72]
 2065 01f6 95E7     		b	.L136
 2066              	.LVL192:
 2067              	.L159:
 2068              	.LBE8:
 793:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2069              		.loc 1 793 0 discriminator 1
 2070 01f8 2A4B     		ldr	r3, .L173+36
 2071 01fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2072 01fc 542B     		cmp	r3, #84
 2073 01fe 01D0     		beq	.L166
 657:Src/Eagle_TRT.c **** 
 2074              		.loc 1 657 0
 2075 0200 0024     		movs	r4, #0
 2076 0202 03E7     		b	.L119
 2077              	.L166:
 793:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2078              		.loc 1 793 0 discriminator 2
 2079 0204 274B     		ldr	r3, .L173+36
 2080 0206 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2081 0208 472B     		cmp	r3, #71
 2082 020a 01D0     		beq	.L167
 657:Src/Eagle_TRT.c **** 
 2083              		.loc 1 657 0
 2084 020c 0024     		movs	r4, #0
 2085 020e FDE6     		b	.L119
 2086              	.L167:
 795:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 2087              		.loc 1 795 0
 2088 0210 2448     		ldr	r0, .L173+36
 2089 0212 FFF7FEFF 		bl	checksum
 2090              	.LVL193:
 2091 0216 0446     		mov	r4, r0
 2092 0218 0128     		cmp	r0, #1
 2093 021a 01D0     		beq	.L168
 840:Src/Eagle_TRT.c **** 					}
 2094              		.loc 1 840 0
 2095 021c 0024     		movs	r4, #0
 2096 021e F5E6     		b	.L119
 2097              	.L168:
 2098              	.LBB9:
 797:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 2099              		.loc 1 797 0
 2100 0220 0023     		movs	r3, #0
 2101 0222 264A     		ldr	r2, .L173+60
 2102 0224 1360     		str	r3, [r2]
 2103              	.LVL194:
 2104              	.LBB10:
 799:Src/Eagle_TRT.c **** 						{
 2105              		.loc 1 799 0
 2106 0226 0522     		movs	r2, #5
 2107 0228 04E0     		b	.L137
 2108              	.LVL195:
 2109              	.L170:
 802:Src/Eagle_TRT.c **** 							else
ARM GAS  /tmp/ccYuDwjm.s 			page 58


 2110              		.loc 1 802 0
 2111 022a 2448     		ldr	r0, .L173+60
 2112 022c 0168     		ldr	r1, [r0]
 2113 022e 0131     		adds	r1, r1, #1
 2114 0230 0160     		str	r1, [r0]
 2115              	.LVL196:
 2116              	.L139:
 799:Src/Eagle_TRT.c **** 						{
 2117              		.loc 1 799 0 discriminator 2
 2118 0232 0132     		adds	r2, r2, #1
 2119              	.LVL197:
 2120              	.L137:
 799:Src/Eagle_TRT.c **** 						{
 2121              		.loc 1 799 0 is_stmt 0 discriminator 1
 2122 0234 1A49     		ldr	r1, .L173+32
 2123 0236 0968     		ldr	r1, [r1]
 2124 0238 8A42     		cmp	r2, r1
 2125 023a 0EDA     		bge	.L169
 801:Src/Eagle_TRT.c **** 								cont_comma++;
 2126              		.loc 1 801 0 is_stmt 1
 2127 023c 1948     		ldr	r0, .L173+36
 2128 023e 865C     		ldrb	r6, [r0, r2]	@ zero_extendqisi2
 2129 0240 2C2E     		cmp	r6, #44
 2130 0242 F2D0     		beq	.L170
 805:Src/Eagle_TRT.c **** 								{ //save the speed
 2131              		.loc 1 805 0
 2132 0244 1D48     		ldr	r0, .L173+60
 2133 0246 0068     		ldr	r0, [r0]
 2134 0248 0728     		cmp	r0, #7
 2135 024a 03D0     		beq	.L171
 810:Src/Eagle_TRT.c **** 								{
 2136              		.loc 1 810 0
 2137 024c 0828     		cmp	r0, #8
 2138 024e F0D1     		bne	.L139
 812:Src/Eagle_TRT.c **** 								}
 2139              		.loc 1 812 0
 2140 0250 0A46     		mov	r2, r1
 2141              	.LVL198:
 2142 0252 EEE7     		b	.L139
 2143              	.LVL199:
 2144              	.L171:
 807:Src/Eagle_TRT.c **** 									cont_speed++;
 2145              		.loc 1 807 0
 2146 0254 EE54     		strb	r6, [r5, r3]
 808:Src/Eagle_TRT.c **** 								}
 2147              		.loc 1 808 0
 2148 0256 0133     		adds	r3, r3, #1
 2149              	.LVL200:
 2150 0258 EBE7     		b	.L139
 2151              	.L169:
 2152              	.LBE10:
 817:Src/Eagle_TRT.c **** 						{
 2153              		.loc 1 817 0
 2154 025a 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 2155              	.LVL201:
 2156 025e 302B     		cmp	r3, #48
 2157 0260 2ED0     		beq	.L172
ARM GAS  /tmp/ccYuDwjm.s 			page 59


 823:Src/Eagle_TRT.c **** 						}
 2158              		.loc 1 823 0
 2159 0262 2846     		mov	r0, r5
 2160 0264 FFF7FEFF 		bl	atof
 2161              	.LVL202:
 2162 0268 0022     		movs	r2, #0
 2163 026a 104B     		ldr	r3, .L173+44
 2164 026c 51EC100B 		vmov	r0, r1, d0
 2165 0270 FFF7FEFF 		bl	__aeabi_dmul
 2166              	.LVL203:
 2167 0274 FFF7FEFF 		bl	__aeabi_d2iz
 2168              	.LVL204:
 2169 0278 A860     		str	r0, [r5, #8]
 2170 027a 23E0     		b	.L143
 2171              	.L174:
 2172 027c AFF30080 		.align	3
 2173              	.L173:
 2174 0280 00000000 		.word	0
 2175 0284 0088C340 		.word	1086556160
 2176 0288 00000000 		.word	0
 2177 028c 006AF840 		.word	1090021888
 2178 0290 00000000 		.word	huart_GPS
 2179 0294 00000000 		.word	buffer_gps
 2180 0298 00000000 		.word	data_string_gps
 2181 029c 00000000 		.word	.LANCHOR36
 2182 02a0 00000000 		.word	cont_string
 2183 02a4 00000000 		.word	string_gps
 2184 02a8 00000000 		.word	can
 2185 02ac 00005940 		.word	1079574528
 2186 02b0 F0D8FFFF 		.word	-10000
 2187 02b4 A0860100 		.word	100000
 2188 02b8 6079FEFF 		.word	-100000
 2189 02bc 00000000 		.word	cont_comma
 2190              	.LVL205:
 2191              	.L172:
 819:Src/Eagle_TRT.c **** 						}
 2192              		.loc 1 819 0
 2193 02c0 0023     		movs	r3, #0
 2194 02c2 AB60     		str	r3, [r5, #8]
 2195              	.LVL206:
 2196              	.L143:
 825:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 2197              		.loc 1 825 0
 2198 02c4 1A48     		ldr	r0, .L175
 2199 02c6 0723     		movs	r3, #7
 2200 02c8 0372     		strb	r3, [r0, #8]
 826:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 2201              		.loc 1 826 0
 2202 02ca 6B6A     		ldr	r3, [r5, #36]
 2203 02cc 4FF48072 		mov	r2, #256
 2204 02d0 93FBF2F1 		sdiv	r1, r3, r2
 2205 02d4 4172     		strb	r1, [r0, #9]
 827:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 2206              		.loc 1 827 0
 2207 02d6 5942     		rsbs	r1, r3, #0
 2208 02d8 DBB2     		uxtb	r3, r3
 2209 02da C9B2     		uxtb	r1, r1
ARM GAS  /tmp/ccYuDwjm.s 			page 60


 2210 02dc 58BF     		it	pl
 2211 02de 4B42     		rsbpl	r3, r1, #0
 2212 02e0 8372     		strb	r3, [r0, #10]
 828:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 2213              		.loc 1 828 0
 2214 02e2 AB6A     		ldr	r3, [r5, #40]
 2215 02e4 93FBF2F1 		sdiv	r1, r3, r2
 2216 02e8 C172     		strb	r1, [r0, #11]
 829:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 2217              		.loc 1 829 0
 2218 02ea 5942     		rsbs	r1, r3, #0
 2219 02ec DBB2     		uxtb	r3, r3
 2220 02ee C9B2     		uxtb	r1, r1
 2221 02f0 58BF     		it	pl
 2222 02f2 4B42     		rsbpl	r3, r1, #0
 2223 02f4 0373     		strb	r3, [r0, #12]
 830:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 2224              		.loc 1 830 0
 2225 02f6 05F11C03 		add	r3, r5, #28
 2226 02fa 4373     		strb	r3, [r0, #13]
 831:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 2227              		.loc 1 831 0
 2228 02fc AB68     		ldr	r3, [r5, #8]
 2229 02fe 93FBF2F3 		sdiv	r3, r3, r2
 2230 0302 8373     		strb	r3, [r0, #14]
 832:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 2231              		.loc 1 832 0
 2232 0304 AB68     		ldr	r3, [r5, #8]
 2233 0306 5A42     		rsbs	r2, r3, #0
 2234 0308 DBB2     		uxtb	r3, r3
 2235 030a D2B2     		uxtb	r2, r2
 2236 030c 58BF     		it	pl
 2237 030e 5342     		rsbpl	r3, r2, #0
 2238 0310 C373     		strb	r3, [r0, #15]
 833:Src/Eagle_TRT.c **** 						can.size = 8;
 2239              		.loc 1 833 0
 2240 0312 D023     		movs	r3, #208
 2241 0314 0360     		str	r3, [r0]
 834:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 2242              		.loc 1 834 0
 2243 0316 0823     		movs	r3, #8
 2244 0318 4360     		str	r3, [r0, #4]
 835:Src/Eagle_TRT.c **** 						ret = 1;
 2245              		.loc 1 835 0
 2246 031a FFF7FEFF 		bl	CAN_Send
 2247              	.LVL207:
 2248              	.LBE9:
 2249 031e 75E6     		b	.L119
 2250              	.LVL208:
 2251              	.L157:
 849:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 2252              		.loc 1 849 0
 2253 0320 0122     		movs	r2, #1
 2254 0322 044B     		ldr	r3, .L175+4
 2255 0324 1A60     		str	r2, [r3]
 850:Src/Eagle_TRT.c **** 			}
 2256              		.loc 1 850 0
ARM GAS  /tmp/ccYuDwjm.s 			page 61


 2257 0326 0024     		movs	r4, #0
 2258 0328 034B     		ldr	r3, .L175+8
 2259 032a 1C60     		str	r4, [r3]
 2260 032c 6EE6     		b	.L119
 2261              	.L176:
 2262 032e 00BF     		.align	2
 2263              	.L175:
 2264 0330 00000000 		.word	can
 2265 0334 00000000 		.word	.LANCHOR36
 2266 0338 00000000 		.word	cont_string
 2267              		.cfi_endproc
 2268              	.LFE150:
 2270              		.section	.text.read_SSI,"ax",%progbits
 2271              		.align	1
 2272              		.global	read_SSI
 2273              		.syntax unified
 2274              		.thumb
 2275              		.thumb_func
 2276              		.fpu fpv4-sp-d16
 2278              	read_SSI:
 2279              	.LFB152:
 892:Src/Eagle_TRT.c **** 
 893:Src/Eagle_TRT.c **** #endif
 894:Src/Eagle_TRT.c **** 
 895:Src/Eagle_TRT.c **** #ifdef HAL_TIM_MODULE_ENABLED
 896:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_tim.h"
 897:Src/Eagle_TRT.c **** 
 898:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
 899:Src/Eagle_TRT.c **** extern char txt;
 900:Src/Eagle_TRT.c **** 
 901:Src/Eagle_TRT.c **** // Function to request data from encoder via SSI communication
 902:Src/Eagle_TRT.c **** // This function is called from the interrupt callback of the timer that you are using for the enco
 903:Src/Eagle_TRT.c **** // The tim used for this function must be initialized at most at 2 microsecond per tick
 904:Src/Eagle_TRT.c **** // Lower the number of microseconds per tick better it is
 905:Src/Eagle_TRT.c **** // TimerInstance = struct of the tim used for the encoder
 906:Src/Eagle_TRT.c **** enc_stc enc;
 907:Src/Eagle_TRT.c **** int read_SSI(enc_stc *enc, int *data)
 908:Src/Eagle_TRT.c **** {
 2280              		.loc 1 908 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 0
 2283              		@ frame_needed = 1, uses_anonymous_args = 0
 2284              	.LVL209:
 2285 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2286              	.LCFI30:
 2287              		.cfi_def_cfa_offset 24
 2288              		.cfi_offset 3, -24
 2289              		.cfi_offset 4, -20
 2290              		.cfi_offset 5, -16
 2291              		.cfi_offset 6, -12
 2292              		.cfi_offset 7, -8
 2293              		.cfi_offset 14, -4
 2294 0002 00AF     		add	r7, sp, #0
 2295              	.LCFI31:
 2296              		.cfi_def_cfa_register 7
 2297 0004 0446     		mov	r4, r0
 909:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccYuDwjm.s 			page 62


 910:Src/Eagle_TRT.c **** 	int bin_data[enc->data_size];
 2298              		.loc 1 910 0
 2299 0006 0368     		ldr	r3, [r0]
 2300              	.LVL210:
 2301 0008 9B00     		lsls	r3, r3, #2
 2302              	.LVL211:
 2303 000a 0A33     		adds	r3, r3, #10
 2304 000c 23F00703 		bic	r3, r3, #7
 2305 0010 ADEB030D 		sub	sp, sp, r3
 2306 0014 6E46     		mov	r6, sp
 2307              	.LVL212:
 911:Src/Eagle_TRT.c **** 
 912:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 2308              		.loc 1 912 0
 2309 0016 0022     		movs	r2, #0
 2310 0018 B0F8F413 		ldrh	r1, [r0, #1012]
 2311              	.LVL213:
 2312 001c D0F8EC03 		ldr	r0, [r0, #1004]
 2313              	.LVL214:
 2314 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2315              	.LVL215:
 913:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2316              		.loc 1 913 0
 2317 0024 D4F8E433 		ldr	r3, [r4, #996]
 2318 0028 1B68     		ldr	r3, [r3]
 2319 002a 0022     		movs	r2, #0
 2320 002c 5A62     		str	r2, [r3, #36]
 2321              	.L178:
 914:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2322              		.loc 1 914 0 discriminator 1
 2323 002e D4F8E433 		ldr	r3, [r4, #996]
 2324 0032 1B68     		ldr	r3, [r3]
 2325 0034 5A6A     		ldr	r2, [r3, #36]
 2326 0036 E368     		ldr	r3, [r4, #12]
 2327 0038 9A42     		cmp	r2, r3
 2328 003a F8D9     		bls	.L178
 2329 003c 0025     		movs	r5, #0
 2330 003e 40E0     		b	.L179
 2331              	.LVL216:
 2332              	.L183:
 2333              	.LBB11:
 915:Src/Eagle_TRT.c **** 	{
 916:Src/Eagle_TRT.c **** 	}
 917:Src/Eagle_TRT.c **** 
 918:Src/Eagle_TRT.c **** 	// Starting the clock to retrieve 14 bits from the sensor
 919:Src/Eagle_TRT.c **** 	for (int i = 0; i < enc->data_size; i++)
 920:Src/Eagle_TRT.c **** 	{
 921:Src/Eagle_TRT.c **** 
 922:Src/Eagle_TRT.c **** 		// CLOCK HIGH
 923:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
 2334              		.loc 1 923 0
 2335 0040 0122     		movs	r2, #1
 2336 0042 B4F8F413 		ldrh	r1, [r4, #1012]
 2337 0046 D4F8EC03 		ldr	r0, [r4, #1004]
 2338 004a FFF7FEFF 		bl	HAL_GPIO_WritePin
 2339              	.LVL217:
 924:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
ARM GAS  /tmp/ccYuDwjm.s 			page 63


 2340              		.loc 1 924 0
 2341 004e D4F8E433 		ldr	r3, [r4, #996]
 2342 0052 1B68     		ldr	r3, [r3]
 2343 0054 0022     		movs	r2, #0
 2344 0056 5A62     		str	r2, [r3, #36]
 2345              	.L180:
 925:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 2346              		.loc 1 925 0 discriminator 1
 2347 0058 D4F8E433 		ldr	r3, [r4, #996]
 2348 005c 1B68     		ldr	r3, [r3]
 2349 005e 5A6A     		ldr	r2, [r3, #36]
 2350 0060 E368     		ldr	r3, [r4, #12]
 2351 0062 03EBD373 		add	r3, r3, r3, lsr #31
 2352 0066 B2EB630F 		cmp	r2, r3, asr #1
 2353 006a F5D9     		bls	.L180
 926:Src/Eagle_TRT.c **** 		{
 927:Src/Eagle_TRT.c **** 		}
 928:Src/Eagle_TRT.c **** 
 929:Src/Eagle_TRT.c **** 		//Reading the Pin at the half of the clock period
 930:Src/Eagle_TRT.c **** 		// Set the bit as the pin state (0 or 1)
 931:Src/Eagle_TRT.c **** 		bin_data[i] = HAL_GPIO_ReadPin(enc->DataPinName, enc->DataPinNumber);
 2354              		.loc 1 931 0
 2355 006c B4F8F613 		ldrh	r1, [r4, #1014]
 2356 0070 D4F8F003 		ldr	r0, [r4, #1008]
 2357 0074 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2358              	.LVL218:
 2359 0078 46F82500 		str	r0, [r6, r5, lsl #2]
 932:Src/Eagle_TRT.c **** 
 933:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2360              		.loc 1 933 0
 2361 007c D4F8E433 		ldr	r3, [r4, #996]
 2362 0080 1B68     		ldr	r3, [r3]
 2363 0082 0022     		movs	r2, #0
 2364 0084 5A62     		str	r2, [r3, #36]
 2365              	.L181:
 934:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 2366              		.loc 1 934 0 discriminator 1
 2367 0086 D4F8E433 		ldr	r3, [r4, #996]
 2368 008a 1B68     		ldr	r3, [r3]
 2369 008c 5A6A     		ldr	r2, [r3, #36]
 2370 008e E368     		ldr	r3, [r4, #12]
 2371 0090 03EBD373 		add	r3, r3, r3, lsr #31
 2372 0094 B2EB630F 		cmp	r2, r3, asr #1
 2373 0098 F5D9     		bls	.L181
 935:Src/Eagle_TRT.c **** 		{
 936:Src/Eagle_TRT.c **** 		}
 937:Src/Eagle_TRT.c **** 
 938:Src/Eagle_TRT.c **** 		// CLOCK LOW
 939:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 2374              		.loc 1 939 0
 2375 009a 0022     		movs	r2, #0
 2376 009c B4F8F413 		ldrh	r1, [r4, #1012]
 2377 00a0 D4F8EC03 		ldr	r0, [r4, #1004]
 2378 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2379              	.LVL219:
 940:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2380              		.loc 1 940 0
ARM GAS  /tmp/ccYuDwjm.s 			page 64


 2381 00a8 D4F8E433 		ldr	r3, [r4, #996]
 2382 00ac 1B68     		ldr	r3, [r3]
 2383 00ae 0022     		movs	r2, #0
 2384 00b0 5A62     		str	r2, [r3, #36]
 2385              	.L182:
 941:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2386              		.loc 1 941 0 discriminator 1
 2387 00b2 D4F8E433 		ldr	r3, [r4, #996]
 2388 00b6 1B68     		ldr	r3, [r3]
 2389 00b8 5A6A     		ldr	r2, [r3, #36]
 2390 00ba E368     		ldr	r3, [r4, #12]
 2391 00bc 9A42     		cmp	r2, r3
 2392 00be F8D9     		bls	.L182
 919:Src/Eagle_TRT.c **** 	{
 2393              		.loc 1 919 0 discriminator 2
 2394 00c0 0135     		adds	r5, r5, #1
 2395              	.LVL220:
 2396              	.L179:
 919:Src/Eagle_TRT.c **** 	{
 2397              		.loc 1 919 0 is_stmt 0 discriminator 1
 2398 00c2 2368     		ldr	r3, [r4]
 2399 00c4 9D42     		cmp	r5, r3
 2400 00c6 BBDB     		blt	.L183
 2401              	.LBE11:
 942:Src/Eagle_TRT.c **** 		{
 943:Src/Eagle_TRT.c **** 		}
 944:Src/Eagle_TRT.c **** 	}
 945:Src/Eagle_TRT.c **** 
 946:Src/Eagle_TRT.c **** 	// Requesting an other bit for the aventual error sent from the sensor
 947:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
 2402              		.loc 1 947 0 is_stmt 1
 2403 00c8 0122     		movs	r2, #1
 2404 00ca B4F8F413 		ldrh	r1, [r4, #1012]
 2405 00ce D4F8EC03 		ldr	r0, [r4, #1004]
 2406 00d2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2407              	.LVL221:
 948:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2408              		.loc 1 948 0
 2409 00d6 D4F8E433 		ldr	r3, [r4, #996]
 2410 00da 1B68     		ldr	r3, [r3]
 2411 00dc 0022     		movs	r2, #0
 2412 00de 5A62     		str	r2, [r3, #36]
 2413              	.L184:
 949:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2414              		.loc 1 949 0 discriminator 1
 2415 00e0 D4F8E433 		ldr	r3, [r4, #996]
 2416 00e4 1B68     		ldr	r3, [r3]
 2417 00e6 5A6A     		ldr	r2, [r3, #36]
 2418 00e8 E368     		ldr	r3, [r4, #12]
 2419 00ea 9A42     		cmp	r2, r3
 2420 00ec F8D9     		bls	.L184
 950:Src/Eagle_TRT.c **** 	{
 951:Src/Eagle_TRT.c **** 	}
 952:Src/Eagle_TRT.c **** 
 953:Src/Eagle_TRT.c **** 	int error_flag = HAL_GPIO_ReadPin(enc->DataPinName, enc->DataPinNumber);
 2421              		.loc 1 953 0
 2422 00ee B4F8F613 		ldrh	r1, [r4, #1014]
ARM GAS  /tmp/ccYuDwjm.s 			page 65


 2423 00f2 D4F8F003 		ldr	r0, [r4, #1008]
 2424 00f6 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 2425              	.LVL222:
 954:Src/Eagle_TRT.c **** 
 955:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 2426              		.loc 1 955 0
 2427 00fa D4F8E433 		ldr	r3, [r4, #996]
 2428 00fe 1B68     		ldr	r3, [r3]
 2429 0100 0022     		movs	r2, #0
 2430 0102 5A62     		str	r2, [r3, #36]
 2431              	.L185:
 956:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 2432              		.loc 1 956 0 discriminator 1
 2433 0104 D4F8E433 		ldr	r3, [r4, #996]
 2434 0108 1B68     		ldr	r3, [r3]
 2435 010a 5A6A     		ldr	r2, [r3, #36]
 2436 010c E368     		ldr	r3, [r4, #12]
 2437 010e 9A42     		cmp	r2, r3
 2438 0110 F8D9     		bls	.L185
 957:Src/Eagle_TRT.c **** 	{
 958:Src/Eagle_TRT.c **** 	}
 959:Src/Eagle_TRT.c **** 
 960:Src/Eagle_TRT.c **** 	// Converting bits into number and converting it into angle in degrees (0 ~ 359)
 961:Src/Eagle_TRT.c **** 	data = bin_dec(bin_data, enc->data_size - 1);
 962:Src/Eagle_TRT.c **** 
 963:Src/Eagle_TRT.c **** 	return error_flag;
 964:Src/Eagle_TRT.c **** }
 2439              		.loc 1 964 0
 2440 0112 BD46     		mov	sp, r7
 2441              	.LCFI32:
 2442              		.cfi_def_cfa_register 13
 2443              		@ sp needed
 2444 0114 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2445              		.cfi_endproc
 2446              	.LFE152:
 2448              		.section	.text.ReinitTIM7,"ax",%progbits
 2449              		.align	1
 2450              		.global	ReinitTIM7
 2451              		.syntax unified
 2452              		.thumb
 2453              		.thumb_func
 2454              		.fpu fpv4-sp-d16
 2456              	ReinitTIM7:
 2457              	.LFB156:
 965:Src/Eagle_TRT.c **** 
 966:Src/Eagle_TRT.c **** // Interrupt function of tim 2
 967:Src/Eagle_TRT.c **** // Call this function in the timer callback function of the stm
 968:Src/Eagle_TRT.c **** // htim = timer TimerInstance of the timer that you are using for the clock of the encoder
 969:Src/Eagle_TRT.c **** // Interrupt_flag = initilize a int variable in the main file
 970:Src/Eagle_TRT.c **** // Angles_array = array to store the last angles
 971:Src/Eagle_TRT.c **** // Speed = pointer to the speed value
 972:Src/Eagle_TRT.c **** void encoder_tim_interrupt(enc_stc *enc)
 973:Src/Eagle_TRT.c **** {
 974:Src/Eagle_TRT.c **** 
 975:Src/Eagle_TRT.c **** 	if (enc->interrupt_flag == 0)
 976:Src/Eagle_TRT.c **** 	{
 977:Src/Eagle_TRT.c **** 		// Requesting first angle
ARM GAS  /tmp/ccYuDwjm.s 			page 66


 978:Src/Eagle_TRT.c **** 		enc->angle0_prec = enc->angle0;
 979:Src/Eagle_TRT.c **** 		enc->error_flag = read_SSI(enc, &enc->converted_data);
 980:Src/Eagle_TRT.c **** 		enc->angle0 = enc->converted_data / 45.5055;
 981:Src/Eagle_TRT.c **** 	}
 982:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 1)
 983:Src/Eagle_TRT.c **** 	{
 984:Src/Eagle_TRT.c **** 		// Requesting second angle
 985:Src/Eagle_TRT.c **** 		enc->angle1_prec = enc->angle1;
 986:Src/Eagle_TRT.c **** 		enc->error_flag = read_SSI(enc, &enc->converted_data);
 987:Src/Eagle_TRT.c **** 		enc->angle1 = enc->converted_data / 45.5055;
 988:Src/Eagle_TRT.c **** 	}
 989:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 2)
 990:Src/Eagle_TRT.c **** 	{
 991:Src/Eagle_TRT.c **** 		// Calculate speed from the two angles
 992:Src/Eagle_TRT.c **** 		get_speed_encoder(enc);
 993:Src/Eagle_TRT.c **** 
 994:Src/Eagle_TRT.c **** 		// Get the speed sign to be sent in CAN
 995:Src/Eagle_TRT.c **** 		if (enc->average_speed < 0)
 996:Src/Eagle_TRT.c **** 		{
 997:Src/Eagle_TRT.c **** 			enc->average_speed *= -1;
 998:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
 999:Src/Eagle_TRT.c **** 		}
1000:Src/Eagle_TRT.c **** 		else
1001:Src/Eagle_TRT.c **** 		{
1002:Src/Eagle_TRT.c **** 			enc->speed_sign = 0;
1003:Src/Eagle_TRT.c **** 		}
1004:Src/Eagle_TRT.c **** 	}
1005:Src/Eagle_TRT.c **** 
1006:Src/Eagle_TRT.c **** 	// Cycle between steps
1007:Src/Eagle_TRT.c **** 	enc->interrupt_flag = enc->interrupt_flag >= 2 ? 0 : enc->interrupt_flag + 1;
1008:Src/Eagle_TRT.c **** }
1009:Src/Eagle_TRT.c **** 
1010:Src/Eagle_TRT.c **** // Funtion to calculate the speed
1011:Src/Eagle_TRT.c **** // Angle0 = last angle calculated
1012:Src/Eagle_TRT.c **** // Angle1 = previous angle calculated
1013:Src/Eagle_TRT.c **** // Refresh = delta-time from the two calculations, express it in microseconds
1014:Src/Eagle_TRT.c **** // Wheel_diameter = diameter of the wheel expressed meters
1015:Src/Eagle_TRT.c **** void get_speed_encoder(enc_stc *enc)
1016:Src/Eagle_TRT.c **** {
1017:Src/Eagle_TRT.c **** 
1018:Src/Eagle_TRT.c **** 	long double speed = 0;
1019:Src/Eagle_TRT.c **** 	double dt = 0;
1020:Src/Eagle_TRT.c **** 
1021:Src/Eagle_TRT.c **** 	if (enc->dx_wheel == 1)
1022:Src/Eagle_TRT.c **** 	{
1023:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle1 - enc->angle0;
1024:Src/Eagle_TRT.c **** 	}
1025:Src/Eagle_TRT.c **** 	else
1026:Src/Eagle_TRT.c **** 	{
1027:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle0 - enc->angle1;
1028:Src/Eagle_TRT.c **** 	}
1029:Src/Eagle_TRT.c **** 
1030:Src/Eagle_TRT.c **** 	// Calculate correct delta angle if near to 0-360
1031:Src/Eagle_TRT.c **** 	if ((enc->angle0 < enc->max_delta_angle && enc->angle1 > 360 - enc->max_delta_angle) ||
1032:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
1033:Src/Eagle_TRT.c **** 	{
1034:Src/Eagle_TRT.c **** 		if (enc->delta_angle < 0)
ARM GAS  /tmp/ccYuDwjm.s 			page 67


1035:Src/Eagle_TRT.c **** 		{
1036:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 + enc->delta_angle;
1037:Src/Eagle_TRT.c **** 		}
1038:Src/Eagle_TRT.c **** 		else
1039:Src/Eagle_TRT.c **** 		{
1040:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 - enc->delta_angle;
1041:Src/Eagle_TRT.c **** 		}
1042:Src/Eagle_TRT.c **** 	}
1043:Src/Eagle_TRT.c **** 
1044:Src/Eagle_TRT.c **** 	// Calculating rad/s, then m/s, then Km/h
1045:Src/Eagle_TRT.c **** 	speed = (enc->delta_angle / 360) * 3.1415 * (enc->wheel_diameter);
1046:Src/Eagle_TRT.c **** 	speed *= enc->frequency;
1047:Src/Eagle_TRT.c **** 	speed *= 3.6;
1048:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
1049:Src/Eagle_TRT.c **** 
1050:Src/Eagle_TRT.c **** 	int off = enc->max_delta_angle;
1051:Src/Eagle_TRT.c **** 
1052:Src/Eagle_TRT.c **** 	// Start detecting eventual new wheel roation
1053:Src/Eagle_TRT.c **** 	// If the speed is too low, don't count rotations
1054:Src/Eagle_TRT.c **** 	if (enc->average_speed < -0.5 || enc->average_speed > 0.5)
1055:Src/Eagle_TRT.c **** 	{
1056:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec <= 361 && enc->angle0_prec > 360 - off) && (enc->angle0 >= -1 && enc->angle
1057:Src/Eagle_TRT.c **** 		{
1058:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1059:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
1060:Src/Eagle_TRT.c **** 		}
1061:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec >= -1 && enc->angle0_prec < off) && (enc->angle0 <= 361 && enc->angle0 > 36
1062:Src/Eagle_TRT.c **** 		{
1063:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1064:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
1065:Src/Eagle_TRT.c **** 		}
1066:Src/Eagle_TRT.c **** 	}
1067:Src/Eagle_TRT.c **** 
1068:Src/Eagle_TRT.c **** 	// Remove noise mediating previous values with actual
1069:Src/Eagle_TRT.c **** 	shift_array(enc->speed_array, 50, speed);
1070:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 50);
1071:Src/Eagle_TRT.c **** 
1072:Src/Eagle_TRT.c **** 	// Calculating the angle sample frequency
1073:Src/Eagle_TRT.c **** 	enc_calculate_optimal_frequency(enc);
1074:Src/Eagle_TRT.c **** }
1075:Src/Eagle_TRT.c **** 
1076:Src/Eagle_TRT.c **** // Calculate anche sample frequency
1077:Src/Eagle_TRT.c **** // The delta angle changes depending on the current speed
1078:Src/Eagle_TRT.c **** // Constrain the delta angle between a defined range (max_delta_angle)
1079:Src/Eagle_TRT.c **** void enc_calculate_optimal_frequency(enc_stc *enc)
1080:Src/Eagle_TRT.c **** {
1081:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
1082:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.25 || abs_delta_angle < enc->max_delta_angle * 0.5)
1083:Src/Eagle_TRT.c **** 	{
1084:Src/Eagle_TRT.c **** 		double angular_speed = enc->average_speed / (enc->wheel_diameter / 2);
1085:Src/Eagle_TRT.c **** 		double frequency = angular_speed / enc->max_delta_angle;
1086:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
1087:Src/Eagle_TRT.c **** 
1088:Src/Eagle_TRT.c **** 		// Returns 0 if reinitialization is done correctly
1089:Src/Eagle_TRT.c **** 		if (ReinitTIM7(frequency, enc) == 0)
1090:Src/Eagle_TRT.c **** 		{
1091:Src/Eagle_TRT.c **** 			// Set encoder actual frequency
ARM GAS  /tmp/ccYuDwjm.s 			page 68


1092:Src/Eagle_TRT.c **** 			enc->frequency = enc->frequency_timer_Hz / (enc->frequency_timer->Init.Prescaler * enc->frequenc
1093:Src/Eagle_TRT.c **** 		}
1094:Src/Eagle_TRT.c **** 	}
1095:Src/Eagle_TRT.c **** }
1096:Src/Eagle_TRT.c **** 
1097:Src/Eagle_TRT.c **** // Reinitializing timer to generate interrupts to the given frequency
1098:Src/Eagle_TRT.c **** int ReinitTIM7(float frequency, enc_stc *enc)
1099:Src/Eagle_TRT.c **** {
 2458              		.loc 1 1099 0
 2459              		.cfi_startproc
 2460              		@ args = 0, pretend = 0, frame = 8
 2461              		@ frame_needed = 0, uses_anonymous_args = 0
 2462              	.LVL223:
 2463 0000 30B5     		push	{r4, r5, lr}
 2464              	.LCFI33:
 2465              		.cfi_def_cfa_offset 12
 2466              		.cfi_offset 4, -12
 2467              		.cfi_offset 5, -8
 2468              		.cfi_offset 14, -4
 2469 0002 83B0     		sub	sp, sp, #12
 2470              	.LCFI34:
 2471              		.cfi_def_cfa_offset 24
 2472 0004 0446     		mov	r4, r0
 2473              	.LVL224:
1100:Src/Eagle_TRT.c **** 
1101:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 0 */
1102:Src/Eagle_TRT.c **** 	int error_flag = 0;
1103:Src/Eagle_TRT.c **** 
1104:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 0 */
1105:Src/Eagle_TRT.c **** 
1106:Src/Eagle_TRT.c **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
 2474              		.loc 1 1106 0
 2475 0006 0025     		movs	r5, #0
 2476 0008 0095     		str	r5, [sp]
 2477 000a 0195     		str	r5, [sp, #4]
1107:Src/Eagle_TRT.c **** 
1108:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 1 */
1109:Src/Eagle_TRT.c **** 
1110:Src/Eagle_TRT.c **** 	enc->frequency_timer_prescaler = sqrt(enc->frequency_timer_Hz * frequency);
 2478              		.loc 1 1110 0
 2479 000c D0ED207A 		vldr.32	s15, [r0, #128]	@ int
 2480 0010 F8EEE77A 		vcvt.f32.s32	s15, s15
 2481 0014 67EE807A 		vmul.f32	s15, s15, s0
 2482 0018 17EE900A 		vmov	r0, s15
 2483              	.LVL225:
 2484 001c FFF7FEFF 		bl	__aeabi_f2d
 2485              	.LVL226:
 2486 0020 41EC100B 		vmov	d0, r0, r1
 2487 0024 FFF7FEFF 		bl	sqrt
 2488              	.LVL227:
 2489 0028 51EC100B 		vmov	r0, r1, d0
 2490 002c FFF7FEFF 		bl	__aeabi_d2iz
 2491              	.LVL228:
 2492 0030 C4F88400 		str	r0, [r4, #132]
1111:Src/Eagle_TRT.c **** 	enc->frequency_timer_period = enc->frequency_timer_prescaler;
 2493              		.loc 1 1111 0
 2494 0034 C4F88800 		str	r0, [r4, #136]
ARM GAS  /tmp/ccYuDwjm.s 			page 69


1112:Src/Eagle_TRT.c **** 
1113:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 1 */
1114:Src/Eagle_TRT.c **** 	enc->frequency_timer->Instance = TIM7;
 2495              		.loc 1 1114 0
 2496 0038 D4F8E833 		ldr	r3, [r4, #1000]
 2497 003c 124A     		ldr	r2, .L193
 2498 003e 1A60     		str	r2, [r3]
1115:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Prescaler = enc->frequency_timer_prescaler;
 2499              		.loc 1 1115 0
 2500 0040 D4F8E833 		ldr	r3, [r4, #1000]
 2501 0044 D4F88420 		ldr	r2, [r4, #132]
 2502 0048 5A60     		str	r2, [r3, #4]
1116:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 2503              		.loc 1 1116 0
 2504 004a D4F8E833 		ldr	r3, [r4, #1000]
 2505 004e 9D60     		str	r5, [r3, #8]
1117:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Period = enc->frequency_timer_period;
 2506              		.loc 1 1117 0
 2507 0050 D4F8E833 		ldr	r3, [r4, #1000]
 2508 0054 D4F88820 		ldr	r2, [r4, #136]
 2509 0058 DA60     		str	r2, [r3, #12]
1118:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2510              		.loc 1 1118 0
 2511 005a D4F8E833 		ldr	r3, [r4, #1000]
 2512 005e 9D61     		str	r5, [r3, #24]
1119:Src/Eagle_TRT.c **** 
1120:Src/Eagle_TRT.c **** 	if (HAL_TIM_Base_Init(enc->frequency_timer) != HAL_OK)
 2513              		.loc 1 1120 0
 2514 0060 D4F8E803 		ldr	r0, [r4, #1000]
 2515 0064 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2516              	.LVL229:
 2517 0068 00B1     		cbz	r0, .L188
1121:Src/Eagle_TRT.c **** 	{
1122:Src/Eagle_TRT.c **** 		error_flag = 1;
 2518              		.loc 1 1122 0
 2519 006a 0125     		movs	r5, #1
 2520              	.L188:
 2521              	.LVL230:
1123:Src/Eagle_TRT.c **** 	}
1124:Src/Eagle_TRT.c **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 2522              		.loc 1 1124 0
 2523 006c 0023     		movs	r3, #0
 2524 006e 0093     		str	r3, [sp]
1125:Src/Eagle_TRT.c **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2525              		.loc 1 1125 0
 2526 0070 0193     		str	r3, [sp, #4]
1126:Src/Eagle_TRT.c **** 	if (HAL_TIMEx_MasterConfigSynchronization(enc->frequency_timer, &sMasterConfig) != HAL_OK)
 2527              		.loc 1 1126 0
 2528 0072 6946     		mov	r1, sp
 2529 0074 D4F8E803 		ldr	r0, [r4, #1000]
 2530 0078 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2531              	.LVL231:
 2532 007c 00B1     		cbz	r0, .L187
1127:Src/Eagle_TRT.c **** 	{
1128:Src/Eagle_TRT.c **** 		error_flag = 2;
 2533              		.loc 1 1128 0
 2534 007e 0225     		movs	r5, #2
ARM GAS  /tmp/ccYuDwjm.s 			page 70


 2535              	.LVL232:
 2536              	.L187:
1129:Src/Eagle_TRT.c **** 	}
1130:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 2 */
1131:Src/Eagle_TRT.c **** 	return error_flag;
1132:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 2 */
1133:Src/Eagle_TRT.c **** }
 2537              		.loc 1 1133 0
 2538 0080 2846     		mov	r0, r5
 2539 0082 03B0     		add	sp, sp, #12
 2540              	.LCFI35:
 2541              		.cfi_def_cfa_offset 12
 2542              		@ sp needed
 2543 0084 30BD     		pop	{r4, r5, pc}
 2544              	.LVL233:
 2545              	.L194:
 2546 0086 00BF     		.align	2
 2547              	.L193:
 2548 0088 00140040 		.word	1073746944
 2549              		.cfi_endproc
 2550              	.LFE156:
 2552              		.global	__aeabi_dcmpge
 2553              		.global	__aeabi_dcmpgt
 2554              		.global	__aeabi_dcmplt
 2555              		.global	__aeabi_ddiv
 2556              		.global	__aeabi_d2f
 2557              		.section	.text.enc_calculate_optimal_frequency,"ax",%progbits
 2558              		.align	1
 2559              		.global	enc_calculate_optimal_frequency
 2560              		.syntax unified
 2561              		.thumb
 2562              		.thumb_func
 2563              		.fpu fpv4-sp-d16
 2565              	enc_calculate_optimal_frequency:
 2566              	.LFB155:
1080:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
 2567              		.loc 1 1080 0
 2568              		.cfi_startproc
 2569              		@ args = 0, pretend = 0, frame = 0
 2570              		@ frame_needed = 0, uses_anonymous_args = 0
 2571              	.LVL234:
 2572 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
 2573              	.LCFI36:
 2574              		.cfi_def_cfa_offset 24
 2575              		.cfi_offset 4, -24
 2576              		.cfi_offset 6, -20
 2577              		.cfi_offset 7, -16
 2578              		.cfi_offset 8, -12
 2579              		.cfi_offset 9, -8
 2580              		.cfi_offset 14, -4
 2581 0004 0446     		mov	r4, r0
1081:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.25 || abs_delta_angle < enc->max_delta_angle * 0.5)
 2582              		.loc 1 1081 0
 2583 0006 D0E92C67 		ldrd	r6, [r0, #176]
 2584 000a 0022     		movs	r2, #0
 2585 000c 0023     		movs	r3, #0
 2586 000e 3046     		mov	r0, r6
ARM GAS  /tmp/ccYuDwjm.s 			page 71


 2587              	.LVL235:
 2588 0010 3946     		mov	r1, r7
 2589 0012 FFF7FEFF 		bl	__aeabi_dcmpge
 2590              	.LVL236:
 2591 0016 0028     		cmp	r0, #0
 2592 0018 57D0     		beq	.L204
 2593              	.L196:
 2594              	.LVL237:
1082:Src/Eagle_TRT.c **** 	{
 2595              		.loc 1 1082 0 discriminator 4
 2596 001a A06F     		ldr	r0, [r4, #120]	@ float
 2597 001c FFF7FEFF 		bl	__aeabi_f2d
 2598              	.LVL238:
 2599 0020 8046     		mov	r8, r0
 2600 0022 8946     		mov	r9, r1
 2601 0024 0022     		movs	r2, #0
 2602 0026 2B4B     		ldr	r3, .L205
 2603 0028 FFF7FEFF 		bl	__aeabi_dmul
 2604              	.LVL239:
 2605 002c 0246     		mov	r2, r0
 2606 002e 0B46     		mov	r3, r1
 2607 0030 3046     		mov	r0, r6
 2608 0032 3946     		mov	r1, r7
 2609 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 2610              	.LVL240:
 2611 0038 60B9     		cbnz	r0, .L197
1082:Src/Eagle_TRT.c **** 	{
 2612              		.loc 1 1082 0 is_stmt 0 discriminator 1
 2613 003a 0022     		movs	r2, #0
 2614 003c 264B     		ldr	r3, .L205+4
 2615 003e 4046     		mov	r0, r8
 2616 0040 4946     		mov	r1, r9
 2617 0042 FFF7FEFF 		bl	__aeabi_dmul
 2618              	.LVL241:
 2619 0046 0246     		mov	r2, r0
 2620 0048 0B46     		mov	r3, r1
 2621 004a 3046     		mov	r0, r6
 2622 004c 3946     		mov	r1, r7
 2623 004e FFF7FEFF 		bl	__aeabi_dcmplt
 2624              	.LVL242:
 2625 0052 C0B3     		cbz	r0, .L195
 2626              	.L197:
 2627              	.LBB12:
1084:Src/Eagle_TRT.c **** 		double frequency = angular_speed / enc->max_delta_angle;
 2628              		.loc 1 1084 0 is_stmt 1
 2629 0054 D4E9F667 		ldrd	r6, [r4, #984]
 2630              	.LVL243:
 2631 0058 94ED1D7A 		vldr.32	s14, [r4, #116]
 2632 005c F6EE007A 		vmov.f32	s15, #5.0e-1
 2633 0060 67EE277A 		vmul.f32	s15, s14, s15
 2634 0064 17EE900A 		vmov	r0, s15
 2635 0068 FFF7FEFF 		bl	__aeabi_f2d
 2636              	.LVL244:
 2637 006c 0246     		mov	r2, r0
 2638 006e 0B46     		mov	r3, r1
 2639 0070 3046     		mov	r0, r6
 2640 0072 3946     		mov	r1, r7
ARM GAS  /tmp/ccYuDwjm.s 			page 72


 2641 0074 FFF7FEFF 		bl	__aeabi_ddiv
 2642              	.LVL245:
1085:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
 2643              		.loc 1 1085 0
 2644 0078 4246     		mov	r2, r8
 2645 007a 4B46     		mov	r3, r9
 2646 007c FFF7FEFF 		bl	__aeabi_ddiv
 2647              	.LVL246:
 2648 0080 0646     		mov	r6, r0
 2649 0082 0F46     		mov	r7, r1
 2650              	.LVL247:
1086:Src/Eagle_TRT.c **** 
 2651              		.loc 1 1086 0
 2652 0084 0022     		movs	r2, #0
 2653 0086 154B     		ldr	r3, .L205+8
 2654 0088 FFF7FEFF 		bl	__aeabi_dcmplt
 2655              	.LVL248:
 2656 008c 08B1     		cbz	r0, .L200
 2657 008e 0026     		movs	r6, #0
 2658              	.LVL249:
 2659 0090 124F     		ldr	r7, .L205+8
 2660              	.L200:
 2661              	.LVL250:
1089:Src/Eagle_TRT.c **** 		{
 2662              		.loc 1 1089 0 discriminator 4
 2663 0092 3046     		mov	r0, r6
 2664 0094 3946     		mov	r1, r7
 2665 0096 FFF7FEFF 		bl	__aeabi_d2f
 2666              	.LVL251:
 2667 009a 00EE100A 		vmov	s0, r0
 2668 009e 2046     		mov	r0, r4
 2669 00a0 FFF7FEFF 		bl	ReinitTIM7
 2670              	.LVL252:
 2671 00a4 78B9     		cbnz	r0, .L195
1092:Src/Eagle_TRT.c **** 		}
 2672              		.loc 1 1092 0
 2673 00a6 D4F88030 		ldr	r3, [r4, #128]
 2674 00aa D4F8E813 		ldr	r1, [r4, #1000]
 2675 00ae 4868     		ldr	r0, [r1, #4]
 2676 00b0 CA68     		ldr	r2, [r1, #12]
 2677 00b2 02FB00F2 		mul	r2, r2, r0
 2678 00b6 B3FBF2F3 		udiv	r3, r3, r2
 2679 00ba 07EE903A 		vmov	s15, r3	@ int
 2680 00be F8EE677A 		vcvt.f32.u32	s15, s15
 2681 00c2 C4ED1F7A 		vstr.32	s15, [r4, #124]
 2682              	.LVL253:
 2683              	.L195:
 2684 00c6 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 2685              	.LVL254:
 2686              	.L204:
 2687              	.LBE12:
1081:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.25 || abs_delta_angle < enc->max_delta_angle * 0.5)
 2688              		.loc 1 1081 0 discriminator 2
 2689 00ca 07F10043 		add	r3, r7, #-2147483648
 2690 00ce 1F46     		mov	r7, r3
 2691 00d0 A3E7     		b	.L196
 2692              	.L206:
ARM GAS  /tmp/ccYuDwjm.s 			page 73


 2693 00d2 00BF     		.align	2
 2694              	.L205:
 2695 00d4 0000F43F 		.word	1072955392
 2696 00d8 0000E03F 		.word	1071644672
 2697 00dc 00004940 		.word	1078525952
 2698              		.cfi_endproc
 2699              	.LFE155:
 2701              		.section	.text.calc_pot_value,"ax",%progbits
 2702              		.align	1
 2703              		.global	calc_pot_value
 2704              		.syntax unified
 2705              		.thumb
 2706              		.thumb_func
 2707              		.fpu fpv4-sp-d16
 2709              	calc_pot_value:
 2710              	.LFB157:
1134:Src/Eagle_TRT.c **** 
1135:Src/Eagle_TRT.c **** pot_stc pot_1;
1136:Src/Eagle_TRT.c **** pot_stc pot_2;
1137:Src/Eagle_TRT.c **** pot_stc pot_3;
1138:Src/Eagle_TRT.c **** void calc_pot_value(pot_stc *pot)
1139:Src/Eagle_TRT.c **** {
 2711              		.loc 1 1139 0
 2712              		.cfi_startproc
 2713              		@ args = 0, pretend = 0, frame = 0
 2714              		@ frame_needed = 0, uses_anonymous_args = 0
 2715              		@ link register save eliminated.
 2716              	.LVL255:
 2717 0000 10B4     		push	{r4}
 2718              	.LCFI37:
 2719              		.cfi_def_cfa_offset 4
 2720              		.cfi_offset 4, -4
1140:Src/Eagle_TRT.c **** 
1141:Src/Eagle_TRT.c **** 	pot->val_100 = round(100 - (abs(pot->val - pot->min) * 100 / (pot->range))); //val0_100 -->STEER -
 2721              		.loc 1 1141 0
 2722 0002 0269     		ldr	r2, [r0, #16]
 2723 0004 8468     		ldr	r4, [r0, #8]
 2724 0006 131B     		subs	r3, r2, r4
 2725 0008 83EAE371 		eor	r1, r3, r3, asr #31
 2726 000c A1EBE371 		sub	r1, r1, r3, asr #31
 2727 0010 6FF06303 		mvn	r3, #99
 2728 0014 03FB01F3 		mul	r3, r3, r1
 2729 0018 C168     		ldr	r1, [r0, #12]
 2730 001a 93FBF1F3 		sdiv	r3, r3, r1
 2731 001e 6433     		adds	r3, r3, #100
 2732 0020 0360     		str	r3, [r0]
1142:Src/Eagle_TRT.c **** 	if (pot->val <= pot->min)
 2733              		.loc 1 1142 0
 2734 0022 A242     		cmp	r2, r4
 2735 0024 01DC     		bgt	.L208
1143:Src/Eagle_TRT.c **** 	{
1144:Src/Eagle_TRT.c **** 		pot->val_100 = 100;
 2736              		.loc 1 1144 0
 2737 0026 6423     		movs	r3, #100
 2738 0028 0360     		str	r3, [r0]
 2739              	.L208:
1145:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccYuDwjm.s 			page 74


1146:Src/Eagle_TRT.c **** 	if (pot->val >= pot->max)
 2740              		.loc 1 1146 0
 2741 002a 4368     		ldr	r3, [r0, #4]
 2742 002c 9A42     		cmp	r2, r3
 2743 002e 01DB     		blt	.L207
1147:Src/Eagle_TRT.c **** 	{
1148:Src/Eagle_TRT.c **** 		pot->val_100 = 0;
 2744              		.loc 1 1148 0
 2745 0030 0023     		movs	r3, #0
 2746 0032 0360     		str	r3, [r0]
 2747              	.L207:
1149:Src/Eagle_TRT.c **** 	}
1150:Src/Eagle_TRT.c **** }
 2748              		.loc 1 1150 0
 2749 0034 5DF8044B 		ldr	r4, [sp], #4
 2750              	.LCFI38:
 2751              		.cfi_restore 4
 2752              		.cfi_def_cfa_offset 0
 2753 0038 7047     		bx	lr
 2754              		.cfi_endproc
 2755              	.LFE157:
 2757              		.section	.text.implausibility_check,"ax",%progbits
 2758              		.align	1
 2759              		.global	implausibility_check
 2760              		.syntax unified
 2761              		.thumb
 2762              		.thumb_func
 2763              		.fpu fpv4-sp-d16
 2765              	implausibility_check:
 2766              	.LFB158:
1151:Src/Eagle_TRT.c **** 
1152:Src/Eagle_TRT.c **** //Function to check if the two ADC values are approximately the same
1153:Src/Eagle_TRT.c **** //if the values are different for more tha 10 points percentage for more than 100 milliseconds retu
1154:Src/Eagle_TRT.c **** //TimerInstance = pointer to the timer needed to check the SCS error
1155:Src/Eagle_TRT.c **** //val0_100 = pointer to the first potentiometer
1156:Src/Eagle_TRT.c **** //val1_100 = pointer to the second potentiometer
1157:Src/Eagle_TRT.c **** int implausibility_check(pot_stc *pot_1, pot_stc *pot_2)
1158:Src/Eagle_TRT.c **** {
 2767              		.loc 1 1158 0
 2768              		.cfi_startproc
 2769              		@ args = 0, pretend = 0, frame = 0
 2770              		@ frame_needed = 0, uses_anonymous_args = 0
 2771              		@ link register save eliminated.
 2772              	.LVL256:
1159:Src/Eagle_TRT.c **** 
1160:Src/Eagle_TRT.c **** 	int SCS1 = 0;
1161:Src/Eagle_TRT.c **** 
1162:Src/Eagle_TRT.c **** 	if (pot_1->val_100 >= 100)
 2773              		.loc 1 1162 0
 2774 0000 0368     		ldr	r3, [r0]
 2775 0002 632B     		cmp	r3, #99
 2776 0004 01DD     		ble	.L212
1163:Src/Eagle_TRT.c **** 	{
1164:Src/Eagle_TRT.c **** 		pot_1->val_100 = 100;
 2777              		.loc 1 1164 0
 2778 0006 6423     		movs	r3, #100
 2779 0008 0360     		str	r3, [r0]
ARM GAS  /tmp/ccYuDwjm.s 			page 75


 2780              	.L212:
1165:Src/Eagle_TRT.c **** 	}
1166:Src/Eagle_TRT.c **** 	if (pot_1->val_100 <= 5)
 2781              		.loc 1 1166 0
 2782 000a 0368     		ldr	r3, [r0]
 2783 000c 052B     		cmp	r3, #5
 2784 000e 01DC     		bgt	.L213
1167:Src/Eagle_TRT.c **** 	{
1168:Src/Eagle_TRT.c **** 		pot_1->val_100 = 0;
 2785              		.loc 1 1168 0
 2786 0010 0023     		movs	r3, #0
 2787 0012 0360     		str	r3, [r0]
 2788              	.L213:
1169:Src/Eagle_TRT.c **** 	}
1170:Src/Eagle_TRT.c **** 	if (pot_2->val_100 >= 100)
 2789              		.loc 1 1170 0
 2790 0014 0B68     		ldr	r3, [r1]
 2791 0016 632B     		cmp	r3, #99
 2792 0018 01DD     		ble	.L214
1171:Src/Eagle_TRT.c **** 	{
1172:Src/Eagle_TRT.c **** 		pot_2->val_100 = 100;
 2793              		.loc 1 1172 0
 2794 001a 6423     		movs	r3, #100
 2795 001c 0B60     		str	r3, [r1]
 2796              	.L214:
1173:Src/Eagle_TRT.c **** 	}
1174:Src/Eagle_TRT.c **** 	if (pot_2->val_100 <= 5)
 2797              		.loc 1 1174 0
 2798 001e 0B68     		ldr	r3, [r1]
 2799 0020 052B     		cmp	r3, #5
 2800 0022 01DC     		bgt	.L215
1175:Src/Eagle_TRT.c **** 	{
1176:Src/Eagle_TRT.c **** 		pot_2->val_100 = 0;
 2801              		.loc 1 1176 0
 2802 0024 0023     		movs	r3, #0
 2803 0026 0B60     		str	r3, [r1]
 2804              	.L215:
1177:Src/Eagle_TRT.c **** 	}
1178:Src/Eagle_TRT.c **** 	if (abs(pot_1->val_100 - pot_2->val_100) >= 10)
 2805              		.loc 1 1178 0
 2806 0028 0368     		ldr	r3, [r0]
 2807 002a 0A68     		ldr	r2, [r1]
 2808 002c 9B1A     		subs	r3, r3, r2
 2809 002e 002B     		cmp	r3, #0
 2810 0030 B8BF     		it	lt
 2811 0032 5B42     		rsblt	r3, r3, #0
 2812 0034 092B     		cmp	r3, #9
 2813 0036 06DD     		ble	.L216
1179:Src/Eagle_TRT.c **** 	{
1180:Src/Eagle_TRT.c **** 		if (__HAL_TIM_GET_COUNTER(pot_1->TimerInstance) > 100)
 2814              		.loc 1 1180 0
 2815 0038 4369     		ldr	r3, [r0, #20]
 2816 003a 1B68     		ldr	r3, [r3]
 2817 003c 5B6A     		ldr	r3, [r3, #36]
 2818 003e 642B     		cmp	r3, #100
 2819 0040 06D8     		bhi	.L218
1160:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccYuDwjm.s 			page 76


 2820              		.loc 1 1160 0
 2821 0042 0020     		movs	r0, #0
 2822              	.LVL257:
 2823 0044 7047     		bx	lr
 2824              	.LVL258:
 2825              	.L216:
1181:Src/Eagle_TRT.c **** 		{
1182:Src/Eagle_TRT.c **** 			SCS1 = 1;
1183:Src/Eagle_TRT.c **** 		}
1184:Src/Eagle_TRT.c **** 	}
1185:Src/Eagle_TRT.c **** 	else
1186:Src/Eagle_TRT.c **** 	{
1187:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(pot_1->TimerInstance, 0);
 2826              		.loc 1 1187 0
 2827 0046 4369     		ldr	r3, [r0, #20]
 2828 0048 1B68     		ldr	r3, [r3]
 2829 004a 0020     		movs	r0, #0
 2830              	.LVL259:
 2831 004c 5862     		str	r0, [r3, #36]
 2832 004e 7047     		bx	lr
 2833              	.LVL260:
 2834              	.L218:
1182:Src/Eagle_TRT.c **** 		}
 2835              		.loc 1 1182 0
 2836 0050 0120     		movs	r0, #1
 2837              	.LVL261:
1188:Src/Eagle_TRT.c **** 		SCS1 = 0;
1189:Src/Eagle_TRT.c **** 	}
1190:Src/Eagle_TRT.c **** 
1191:Src/Eagle_TRT.c **** 	return SCS1;
1192:Src/Eagle_TRT.c **** }
 2838              		.loc 1 1192 0
 2839 0052 7047     		bx	lr
 2840              		.cfi_endproc
 2841              	.LFE158:
 2843              		.section	.text.set_max,"ax",%progbits
 2844              		.align	1
 2845              		.global	set_max
 2846              		.syntax unified
 2847              		.thumb
 2848              		.thumb_func
 2849              		.fpu fpv4-sp-d16
 2851              	set_max:
 2852              	.LFB159:
1193:Src/Eagle_TRT.c **** 
1194:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is released
1195:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1196:Src/Eagle_TRT.c **** //max1 = pointer to the maximum value of the APPS1
1197:Src/Eagle_TRT.c **** //max2 = pointer to the maximum value of the APPS2
1198:Src/Eagle_TRT.c **** void set_max(pot_stc *pot_1)
1199:Src/Eagle_TRT.c **** {
 2853              		.loc 1 1199 0
 2854              		.cfi_startproc
 2855              		@ args = 0, pretend = 0, frame = 0
 2856              		@ frame_needed = 0, uses_anonymous_args = 0
 2857              		@ link register save eliminated.
 2858              	.LVL262:
ARM GAS  /tmp/ccYuDwjm.s 			page 77


1200:Src/Eagle_TRT.c **** 	pot_1->max = pot_1->val;
 2859              		.loc 1 1200 0
 2860 0000 0369     		ldr	r3, [r0, #16]
 2861 0002 4360     		str	r3, [r0, #4]
 2862 0004 7047     		bx	lr
 2863              		.cfi_endproc
 2864              	.LFE159:
 2866              		.section	.text.set_min,"ax",%progbits
 2867              		.align	1
 2868              		.global	set_min
 2869              		.syntax unified
 2870              		.thumb
 2871              		.thumb_func
 2872              		.fpu fpv4-sp-d16
 2874              	set_min:
 2875              	.LFB160:
1201:Src/Eagle_TRT.c **** }
1202:Src/Eagle_TRT.c **** 
1203:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is pressed
1204:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1205:Src/Eagle_TRT.c **** //min1 = pointer to the minimum value of the APPS1
1206:Src/Eagle_TRT.c **** //min2 = pointer to the minimum value of the APPS2
1207:Src/Eagle_TRT.c **** void set_min(pot_stc *pot_1)
1208:Src/Eagle_TRT.c **** {
 2876              		.loc 1 1208 0
 2877              		.cfi_startproc
 2878              		@ args = 0, pretend = 0, frame = 0
 2879              		@ frame_needed = 0, uses_anonymous_args = 0
 2880              		@ link register save eliminated.
 2881              	.LVL263:
1209:Src/Eagle_TRT.c **** 	pot_1->min = pot_1->val;
 2882              		.loc 1 1209 0
 2883 0000 0369     		ldr	r3, [r0, #16]
 2884 0002 8360     		str	r3, [r0, #8]
 2885 0004 7047     		bx	lr
 2886              		.cfi_endproc
 2887              	.LFE160:
 2889              		.global	__aeabi_i2d
 2890              		.section	.text.Power,"ax",%progbits
 2891              		.align	1
 2892              		.global	Power
 2893              		.syntax unified
 2894              		.thumb
 2895              		.thumb_func
 2896              		.fpu fpv4-sp-d16
 2898              	Power:
 2899              	.LFB162:
1210:Src/Eagle_TRT.c **** }
1211:Src/Eagle_TRT.c **** 
1212:Src/Eagle_TRT.c **** #endif
1213:Src/Eagle_TRT.c **** 
1214:Src/Eagle_TRT.c **** //function to calculate the decimal value from MSB binary array
1215:Src/Eagle_TRT.c **** //bin = pointer to binary array
1216:Src/Eagle_TRT.c **** //max = size of the array
1217:Src/Eagle_TRT.c **** int bin_dec(int *bin, int size)
1218:Src/Eagle_TRT.c **** {
1219:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccYuDwjm.s 			page 78


1220:Src/Eagle_TRT.c **** 	int dec = 0;
1221:Src/Eagle_TRT.c **** 
1222:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1223:Src/Eagle_TRT.c **** 	{
1224:Src/Eagle_TRT.c **** 		if (bin[i] == 1)
1225:Src/Eagle_TRT.c **** 		{
1226:Src/Eagle_TRT.c **** 			dec += Power(2, size - i - 1);
1227:Src/Eagle_TRT.c **** 		}
1228:Src/Eagle_TRT.c **** 	}
1229:Src/Eagle_TRT.c **** 
1230:Src/Eagle_TRT.c **** 	return dec;
1231:Src/Eagle_TRT.c **** }
1232:Src/Eagle_TRT.c **** 
1233:Src/Eagle_TRT.c **** //function to calculate the power of a given number
1234:Src/Eagle_TRT.c **** double Power(int base, int expn)
1235:Src/Eagle_TRT.c **** {
 2900              		.loc 1 1235 0
 2901              		.cfi_startproc
 2902              		@ args = 0, pretend = 0, frame = 0
 2903              		@ frame_needed = 0, uses_anonymous_args = 0
 2904              	.LVL264:
 2905 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2906              	.LCFI39:
 2907              		.cfi_def_cfa_offset 24
 2908              		.cfi_offset 4, -24
 2909              		.cfi_offset 5, -20
 2910              		.cfi_offset 6, -16
 2911              		.cfi_offset 7, -12
 2912              		.cfi_offset 8, -8
 2913              		.cfi_offset 14, -4
 2914              	.LVL265:
1236:Src/Eagle_TRT.c **** 
1237:Src/Eagle_TRT.c **** 	double result = 1;
1238:Src/Eagle_TRT.c **** 
1239:Src/Eagle_TRT.c **** 	if (expn != 0)
 2915              		.loc 1 1239 0
 2916 0004 29B1     		cbz	r1, .L227
 2917 0006 0D46     		mov	r5, r1
 2918 0008 8046     		mov	r8, r0
 2919 000a 0024     		movs	r4, #0
 2920 000c 0026     		movs	r6, #0
 2921 000e 0B4F     		ldr	r7, .L228
 2922 0010 0EE0     		b	.L222
 2923              	.L227:
1237:Src/Eagle_TRT.c **** 
 2924              		.loc 1 1237 0
 2925 0012 0026     		movs	r6, #0
 2926 0014 094F     		ldr	r7, .L228
 2927 0016 0DE0     		b	.L221
 2928              	.LVL266:
 2929              	.L224:
 2930              	.LBB13:
1240:Src/Eagle_TRT.c **** 	{
1241:Src/Eagle_TRT.c **** 		for (int j = 0; j < expn; j++)
1242:Src/Eagle_TRT.c **** 		{
1243:Src/Eagle_TRT.c **** 			result = result * base;
 2931              		.loc 1 1243 0 discriminator 3
ARM GAS  /tmp/ccYuDwjm.s 			page 79


 2932 0018 4046     		mov	r0, r8
 2933 001a FFF7FEFF 		bl	__aeabi_i2d
 2934              	.LVL267:
 2935 001e 0246     		mov	r2, r0
 2936 0020 0B46     		mov	r3, r1
 2937 0022 3046     		mov	r0, r6
 2938 0024 3946     		mov	r1, r7
 2939 0026 FFF7FEFF 		bl	__aeabi_dmul
 2940              	.LVL268:
 2941 002a 0646     		mov	r6, r0
 2942              	.LVL269:
 2943 002c 0F46     		mov	r7, r1
 2944              	.LVL270:
1241:Src/Eagle_TRT.c **** 		{
 2945              		.loc 1 1241 0 discriminator 3
 2946 002e 0134     		adds	r4, r4, #1
 2947              	.LVL271:
 2948              	.L222:
1241:Src/Eagle_TRT.c **** 		{
 2949              		.loc 1 1241 0 is_stmt 0 discriminator 1
 2950 0030 AC42     		cmp	r4, r5
 2951 0032 F1DB     		blt	.L224
 2952              	.LVL272:
 2953              	.L221:
 2954              	.LBE13:
1244:Src/Eagle_TRT.c **** 		}
1245:Src/Eagle_TRT.c **** 	}
1246:Src/Eagle_TRT.c **** 
1247:Src/Eagle_TRT.c **** 	return result;
1248:Src/Eagle_TRT.c **** }
 2955              		.loc 1 1248 0 is_stmt 1
 2956 0034 47EC106B 		vmov	d0, r6, r7
 2957 0038 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2958              	.L229:
 2959              		.align	2
 2960              	.L228:
 2961 003c 0000F03F 		.word	1072693248
 2962              		.cfi_endproc
 2963              	.LFE162:
 2965              		.global	__aeabi_dadd
 2966              		.section	.text.bin_dec,"ax",%progbits
 2967              		.align	1
 2968              		.global	bin_dec
 2969              		.syntax unified
 2970              		.thumb
 2971              		.thumb_func
 2972              		.fpu fpv4-sp-d16
 2974              	bin_dec:
 2975              	.LFB161:
1218:Src/Eagle_TRT.c **** 
 2976              		.loc 1 1218 0
 2977              		.cfi_startproc
 2978              		@ args = 0, pretend = 0, frame = 0
 2979              		@ frame_needed = 0, uses_anonymous_args = 0
 2980              	.LVL273:
 2981 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2982              	.LCFI40:
ARM GAS  /tmp/ccYuDwjm.s 			page 80


 2983              		.cfi_def_cfa_offset 32
 2984              		.cfi_offset 3, -32
 2985              		.cfi_offset 4, -28
 2986              		.cfi_offset 5, -24
 2987              		.cfi_offset 6, -20
 2988              		.cfi_offset 7, -16
 2989              		.cfi_offset 8, -12
 2990              		.cfi_offset 9, -8
 2991              		.cfi_offset 14, -4
 2992 0004 0646     		mov	r6, r0
 2993 0006 0D46     		mov	r5, r1
 2994              	.LVL274:
 2995              	.LBB14:
1222:Src/Eagle_TRT.c **** 	{
 2996              		.loc 1 1222 0
 2997 0008 0024     		movs	r4, #0
 2998              	.LBE14:
1220:Src/Eagle_TRT.c **** 
 2999              		.loc 1 1220 0
 3000 000a 2746     		mov	r7, r4
 3001              	.LBB15:
1222:Src/Eagle_TRT.c **** 	{
 3002              		.loc 1 1222 0
 3003 000c 00E0     		b	.L231
 3004              	.LVL275:
 3005              	.L232:
1222:Src/Eagle_TRT.c **** 	{
 3006              		.loc 1 1222 0 is_stmt 0 discriminator 2
 3007 000e 0134     		adds	r4, r4, #1
 3008              	.LVL276:
 3009              	.L231:
1222:Src/Eagle_TRT.c **** 	{
 3010              		.loc 1 1222 0 discriminator 1
 3011 0010 AC42     		cmp	r4, r5
 3012 0012 15DA     		bge	.L235
1224:Src/Eagle_TRT.c **** 		{
 3013              		.loc 1 1224 0 is_stmt 1
 3014 0014 56F82430 		ldr	r3, [r6, r4, lsl #2]
 3015 0018 012B     		cmp	r3, #1
 3016 001a F8D1     		bne	.L232
1226:Src/Eagle_TRT.c **** 		}
 3017              		.loc 1 1226 0
 3018 001c 291B     		subs	r1, r5, r4
 3019 001e 0139     		subs	r1, r1, #1
 3020 0020 0220     		movs	r0, #2
 3021 0022 FFF7FEFF 		bl	Power
 3022              	.LVL277:
 3023 0026 59EC108B 		vmov	r8, r9, d0
 3024 002a 3846     		mov	r0, r7
 3025 002c FFF7FEFF 		bl	__aeabi_i2d
 3026              	.LVL278:
 3027 0030 4246     		mov	r2, r8
 3028 0032 4B46     		mov	r3, r9
 3029 0034 FFF7FEFF 		bl	__aeabi_dadd
 3030              	.LVL279:
 3031 0038 FFF7FEFF 		bl	__aeabi_d2iz
 3032              	.LVL280:
ARM GAS  /tmp/ccYuDwjm.s 			page 81


 3033 003c 0746     		mov	r7, r0
 3034              	.LVL281:
 3035 003e E6E7     		b	.L232
 3036              	.LVL282:
 3037              	.L235:
 3038              	.LBE15:
1231:Src/Eagle_TRT.c **** 
 3039              		.loc 1 1231 0
 3040 0040 3846     		mov	r0, r7
 3041 0042 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3042              		.cfi_endproc
 3043              	.LFE161:
 3045              		.section	.text.shift_array,"ax",%progbits
 3046              		.align	1
 3047              		.global	shift_array
 3048              		.syntax unified
 3049              		.thumb
 3050              		.thumb_func
 3051              		.fpu fpv4-sp-d16
 3053              	shift_array:
 3054              	.LFB163:
1249:Src/Eagle_TRT.c **** 
1250:Src/Eagle_TRT.c **** //shift all the data of a numeric array and add another one value
1251:Src/Eagle_TRT.c **** //array = array to be shifted
1252:Src/Eagle_TRT.c **** //size = size of the array
1253:Src/Eagle_TRT.c **** //data = value to be added in the last position of the array
1254:Src/Eagle_TRT.c **** void shift_array(long double *array, int size, long double data)
1255:Src/Eagle_TRT.c **** {
 3055              		.loc 1 1255 0
 3056              		.cfi_startproc
 3057              		@ args = 0, pretend = 0, frame = 0
 3058              		@ frame_needed = 0, uses_anonymous_args = 0
 3059              		@ link register save eliminated.
 3060              	.LVL283:
 3061              	.LBB16:
1256:Src/Eagle_TRT.c **** 
1257:Src/Eagle_TRT.c **** 	for (int i = 1; i < size; i++)
 3062              		.loc 1 1257 0
 3063 0000 0122     		movs	r2, #1
 3064              	.LVL284:
 3065 0002 8A42     		cmp	r2, r1
 3066 0004 17DA     		bge	.L243
 3067              	.LBE16:
1255:Src/Eagle_TRT.c **** 
 3068              		.loc 1 1255 0
 3069 0006 30B4     		push	{r4, r5}
 3070              	.LCFI41:
 3071              		.cfi_def_cfa_offset 8
 3072              		.cfi_offset 4, -8
 3073              		.cfi_offset 5, -4
 3074              	.L238:
 3075              	.LBB17:
1258:Src/Eagle_TRT.c **** 	{
1259:Src/Eagle_TRT.c **** 		array[i - 1] = array[i];
 3076              		.loc 1 1259 0 discriminator 3
 3077 0008 02F10053 		add	r3, r2, #536870912
 3078 000c 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccYuDwjm.s 			page 82


 3079 000e 00EBC303 		add	r3, r0, r3, lsl #3
 3080 0012 00EBC204 		add	r4, r0, r2, lsl #3
 3081 0016 D4E90045 		ldrd	r4, [r4]
 3082 001a C3E90045 		strd	r4, [r3]
1257:Src/Eagle_TRT.c **** 	{
 3083              		.loc 1 1257 0 discriminator 3
 3084 001e 0132     		adds	r2, r2, #1
 3085              	.LVL285:
 3086 0020 8A42     		cmp	r2, r1
 3087 0022 F1DB     		blt	.L238
 3088              	.LBE17:
1260:Src/Eagle_TRT.c **** 	}
1261:Src/Eagle_TRT.c **** 	array[size - 1] = data;
 3089              		.loc 1 1261 0
 3090 0024 01F10051 		add	r1, r1, #536870912
 3091              	.LVL286:
 3092 0028 0139     		subs	r1, r1, #1
 3093              	.LVL287:
 3094 002a 00EBC100 		add	r0, r0, r1, lsl #3
 3095              	.LVL288:
 3096 002e 80ED000B 		vstr.64	d0, [r0]
1262:Src/Eagle_TRT.c **** }
 3097              		.loc 1 1262 0
 3098 0032 30BC     		pop	{r4, r5}
 3099              	.LCFI42:
 3100              		.cfi_restore 5
 3101              		.cfi_restore 4
 3102              		.cfi_def_cfa_offset 0
 3103 0034 7047     		bx	lr
 3104              	.LVL289:
 3105              	.L243:
1261:Src/Eagle_TRT.c **** }
 3106              		.loc 1 1261 0
 3107 0036 01F10051 		add	r1, r1, #536870912
 3108              	.LVL290:
 3109 003a 0139     		subs	r1, r1, #1
 3110              	.LVL291:
 3111 003c 00EBC100 		add	r0, r0, r1, lsl #3
 3112              	.LVL292:
 3113 0040 80ED000B 		vstr.64	d0, [r0]
 3114 0044 7047     		bx	lr
 3115              		.cfi_endproc
 3116              	.LFE163:
 3118              		.section	.text.speed_filter,"ax",%progbits
 3119              		.align	1
 3120              		.global	speed_filter
 3121              		.syntax unified
 3122              		.thumb
 3123              		.thumb_func
 3124              		.fpu fpv4-sp-d16
 3126              	speed_filter:
 3127              	.LFB164:
1263:Src/Eagle_TRT.c **** 
1264:Src/Eagle_TRT.c **** double speed_filter(double *data, int size)
1265:Src/Eagle_TRT.c **** {
 3128              		.loc 1 1265 0
 3129              		.cfi_startproc
ARM GAS  /tmp/ccYuDwjm.s 			page 83


 3130              		@ args = 0, pretend = 0, frame = 16
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 3132              	.LVL293:
 3133 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3134              	.LCFI43:
 3135              		.cfi_def_cfa_offset 36
 3136              		.cfi_offset 4, -36
 3137              		.cfi_offset 5, -32
 3138              		.cfi_offset 6, -28
 3139              		.cfi_offset 7, -24
 3140              		.cfi_offset 8, -20
 3141              		.cfi_offset 9, -16
 3142              		.cfi_offset 10, -12
 3143              		.cfi_offset 11, -8
 3144              		.cfi_offset 14, -4
 3145 0004 85B0     		sub	sp, sp, #20
 3146              	.LCFI44:
 3147              		.cfi_def_cfa_offset 56
 3148 0006 8246     		mov	r10, r0
 3149 0008 0D46     		mov	r5, r1
 3150              	.LVL294:
 3151              	.LBB18:
1266:Src/Eagle_TRT.c **** 	double min = 100000000000000;
1267:Src/Eagle_TRT.c **** 	double max = -min;
1268:Src/Eagle_TRT.c **** 	double sum = 0;
1269:Src/Eagle_TRT.c **** 	double average = 0;
1270:Src/Eagle_TRT.c **** 	int index_1;
1271:Src/Eagle_TRT.c **** 	int index_2;
1272:Src/Eagle_TRT.c **** 	int average_members = 0;
1273:Src/Eagle_TRT.c **** 
1274:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
 3152              		.loc 1 1274 0
 3153 000a 0024     		movs	r4, #0
 3154              	.LBE18:
1267:Src/Eagle_TRT.c **** 	double sum = 0;
 3155              		.loc 1 1267 0
 3156 000c 0FF2A009 		adr	r9, .L258+8
 3157 0010 D9E90089 		ldrd	r8, [r9]
1266:Src/Eagle_TRT.c **** 	double min = 100000000000000;
 3158              		.loc 1 1266 0
 3159 0014 9FED247B 		vldr.64	d7, .L258
 3160 0018 8DED007B 		vstr.64	d7, [sp]
 3161              	.LBB19:
 3162              		.loc 1 1274 0
 3163 001c 00E0     		b	.L245
 3164              	.LVL295:
 3165              	.L247:
 3166              		.loc 1 1274 0 is_stmt 0 discriminator 2
 3167 001e 0134     		adds	r4, r4, #1
 3168              	.LVL296:
 3169              	.L245:
 3170              		.loc 1 1274 0 discriminator 1
 3171 0020 AC42     		cmp	r4, r5
 3172 0022 19DA     		bge	.L256
1275:Src/Eagle_TRT.c **** 	{
1276:Src/Eagle_TRT.c **** 		if (data[i] < min)
 3173              		.loc 1 1276 0 is_stmt 1
ARM GAS  /tmp/ccYuDwjm.s 			page 84


 3174 0024 0AEBC403 		add	r3, r10, r4, lsl #3
 3175 0028 D3E90067 		ldrd	r6, [r3]
 3176 002c 3246     		mov	r2, r6
 3177 002e 3B46     		mov	r3, r7
 3178 0030 DDE90001 		ldrd	r0, [sp]
 3179 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 3180              	.LVL297:
 3181 0038 10B1     		cbz	r0, .L246
1277:Src/Eagle_TRT.c **** 		{
1278:Src/Eagle_TRT.c **** 			min = data[i];
1279:Src/Eagle_TRT.c **** 			index_1 = i;
 3182              		.loc 1 1279 0
 3183 003a A346     		mov	fp, r4
 3184              	.LVL298:
1278:Src/Eagle_TRT.c **** 			index_1 = i;
 3185              		.loc 1 1278 0
 3186 003c CDE90067 		strd	r6, [sp]
 3187              	.LVL299:
 3188              	.L246:
1280:Src/Eagle_TRT.c **** 		}
1281:Src/Eagle_TRT.c **** 
1282:Src/Eagle_TRT.c **** 		if (data[i] > max)
 3189              		.loc 1 1282 0
 3190 0040 3246     		mov	r2, r6
 3191 0042 3B46     		mov	r3, r7
 3192 0044 4046     		mov	r0, r8
 3193 0046 4946     		mov	r1, r9
 3194 0048 FFF7FEFF 		bl	__aeabi_dcmplt
 3195              	.LVL300:
 3196 004c 0028     		cmp	r0, #0
 3197 004e E6D0     		beq	.L247
1283:Src/Eagle_TRT.c **** 		{
1284:Src/Eagle_TRT.c **** 			max = data[i];
1285:Src/Eagle_TRT.c **** 			index_2 = i;
 3198              		.loc 1 1285 0
 3199 0050 0394     		str	r4, [sp, #12]
 3200              	.LVL301:
1284:Src/Eagle_TRT.c **** 			index_2 = i;
 3201              		.loc 1 1284 0
 3202 0052 B046     		mov	r8, r6
 3203              	.LVL302:
 3204 0054 B946     		mov	r9, r7
 3205 0056 E2E7     		b	.L247
 3206              	.LVL303:
 3207              	.L256:
 3208 0058 0024     		movs	r4, #0
 3209              	.LVL304:
 3210 005a A046     		mov	r8, r4
 3211              	.LVL305:
 3212 005c 0026     		movs	r6, #0
 3213 005e 0027     		movs	r7, #0
 3214 0060 0CE0     		b	.L249
 3215              	.LVL306:
 3216              	.L250:
 3217              	.LBE19:
 3218              	.LBB20:
1286:Src/Eagle_TRT.c **** 		}
ARM GAS  /tmp/ccYuDwjm.s 			page 85


1287:Src/Eagle_TRT.c **** 	}
1288:Src/Eagle_TRT.c **** 
1289:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1290:Src/Eagle_TRT.c **** 	{
1291:Src/Eagle_TRT.c **** 		if (i != index_1 || i != index_2)
1292:Src/Eagle_TRT.c **** 		{
1293:Src/Eagle_TRT.c **** 			sum += data[i];
 3219              		.loc 1 1293 0
 3220 0062 0AEBC403 		add	r3, r10, r4, lsl #3
 3221 0066 D3E90023 		ldrd	r2, [r3]
 3222 006a 3046     		mov	r0, r6
 3223 006c 3946     		mov	r1, r7
 3224 006e FFF7FEFF 		bl	__aeabi_dadd
 3225              	.LVL307:
 3226 0072 0646     		mov	r6, r0
 3227              	.LVL308:
 3228 0074 0F46     		mov	r7, r1
 3229              	.LVL309:
1294:Src/Eagle_TRT.c **** 			average_members++;
 3230              		.loc 1 1294 0
 3231 0076 08F10108 		add	r8, r8, #1
 3232              	.LVL310:
 3233              	.L251:
1289:Src/Eagle_TRT.c **** 	{
 3234              		.loc 1 1289 0 discriminator 2
 3235 007a 0134     		adds	r4, r4, #1
 3236              	.LVL311:
 3237              	.L249:
1289:Src/Eagle_TRT.c **** 	{
 3238              		.loc 1 1289 0 is_stmt 0 discriminator 1
 3239 007c AC42     		cmp	r4, r5
 3240 007e 05DA     		bge	.L257
1291:Src/Eagle_TRT.c **** 		{
 3241              		.loc 1 1291 0 is_stmt 1
 3242 0080 A345     		cmp	fp, r4
 3243 0082 EED1     		bne	.L250
1291:Src/Eagle_TRT.c **** 		{
 3244              		.loc 1 1291 0 is_stmt 0 discriminator 1
 3245 0084 039B     		ldr	r3, [sp, #12]
 3246 0086 A342     		cmp	r3, r4
 3247 0088 EBD1     		bne	.L250
 3248 008a F6E7     		b	.L251
 3249              	.L257:
 3250              	.LBE20:
1295:Src/Eagle_TRT.c **** 		}
1296:Src/Eagle_TRT.c **** 	}
1297:Src/Eagle_TRT.c **** 	average = sum / average_members;
 3251              		.loc 1 1297 0 is_stmt 1
 3252 008c 4046     		mov	r0, r8
 3253 008e FFF7FEFF 		bl	__aeabi_i2d
 3254              	.LVL312:
 3255 0092 0246     		mov	r2, r0
 3256 0094 0B46     		mov	r3, r1
 3257 0096 3046     		mov	r0, r6
 3258 0098 3946     		mov	r1, r7
 3259 009a FFF7FEFF 		bl	__aeabi_ddiv
 3260              	.LVL313:
ARM GAS  /tmp/ccYuDwjm.s 			page 86


1298:Src/Eagle_TRT.c **** 
1299:Src/Eagle_TRT.c **** 	return average;
1300:Src/Eagle_TRT.c **** }
 3261              		.loc 1 1300 0
 3262 009e 41EC100B 		vmov	d0, r0, r1
 3263 00a2 05B0     		add	sp, sp, #20
 3264              	.LCFI45:
 3265              		.cfi_def_cfa_offset 36
 3266              	.LVL314:
 3267              		@ sp needed
 3268 00a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3269              	.LVL315:
 3270              	.L259:
 3271              		.align	3
 3272              	.L258:
 3273 00a8 0000901E 		.word	512753664
 3274 00ac C4BCD642 		.word	1121369284
 3275 00b0 0000901E 		.word	512753664
 3276 00b4 C4BCD6C2 		.word	-1026114364
 3277              		.cfi_endproc
 3278              	.LFE164:
 3280              		.section	.text.dynamic_average,"ax",%progbits
 3281              		.align	1
 3282              		.global	dynamic_average
 3283              		.syntax unified
 3284              		.thumb
 3285              		.thumb_func
 3286              		.fpu fpv4-sp-d16
 3288              	dynamic_average:
 3289              	.LFB165:
1301:Src/Eagle_TRT.c **** 
1302:Src/Eagle_TRT.c **** //function that calculate the average of all the numbers in one array
1303:Src/Eagle_TRT.c **** double dynamic_average(long double *array, int size)
1304:Src/Eagle_TRT.c **** {
 3290              		.loc 1 1304 0
 3291              		.cfi_startproc
 3292              		@ args = 0, pretend = 0, frame = 0
 3293              		@ frame_needed = 0, uses_anonymous_args = 0
 3294              	.LVL316:
 3295 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3296              	.LCFI46:
 3297              		.cfi_def_cfa_offset 24
 3298              		.cfi_offset 4, -24
 3299              		.cfi_offset 5, -20
 3300              		.cfi_offset 6, -16
 3301              		.cfi_offset 7, -12
 3302              		.cfi_offset 8, -8
 3303              		.cfi_offset 14, -4
 3304 0004 8046     		mov	r8, r0
 3305 0006 0D46     		mov	r5, r1
 3306              	.LVL317:
 3307              	.LBB21:
1305:Src/Eagle_TRT.c **** 
1306:Src/Eagle_TRT.c **** 	double sum = 0;
1307:Src/Eagle_TRT.c **** 	double average = 0;
1308:Src/Eagle_TRT.c **** 
1309:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
ARM GAS  /tmp/ccYuDwjm.s 			page 87


 3308              		.loc 1 1309 0
 3309 0008 0024     		movs	r4, #0
 3310              	.LBE21:
1306:Src/Eagle_TRT.c **** 	double average = 0;
 3311              		.loc 1 1306 0
 3312 000a 0026     		movs	r6, #0
 3313 000c 0027     		movs	r7, #0
 3314              	.LBB22:
 3315              		.loc 1 1309 0
 3316 000e 0AE0     		b	.L261
 3317              	.LVL318:
 3318              	.L262:
1310:Src/Eagle_TRT.c **** 	{
1311:Src/Eagle_TRT.c **** 		sum += array[i];
 3319              		.loc 1 1311 0 discriminator 3
 3320 0010 08EBC403 		add	r3, r8, r4, lsl #3
 3321 0014 D3E90023 		ldrd	r2, [r3]
 3322 0018 3046     		mov	r0, r6
 3323 001a 3946     		mov	r1, r7
 3324 001c FFF7FEFF 		bl	__aeabi_dadd
 3325              	.LVL319:
 3326 0020 0646     		mov	r6, r0
 3327              	.LVL320:
 3328 0022 0F46     		mov	r7, r1
 3329              	.LVL321:
1309:Src/Eagle_TRT.c **** 	{
 3330              		.loc 1 1309 0 discriminator 3
 3331 0024 0134     		adds	r4, r4, #1
 3332              	.LVL322:
 3333              	.L261:
1309:Src/Eagle_TRT.c **** 	{
 3334              		.loc 1 1309 0 is_stmt 0 discriminator 1
 3335 0026 AC42     		cmp	r4, r5
 3336 0028 F2DB     		blt	.L262
 3337              	.LBE22:
1312:Src/Eagle_TRT.c **** 	}
1313:Src/Eagle_TRT.c **** 	average = sum / size;
 3338              		.loc 1 1313 0 is_stmt 1
 3339 002a 2846     		mov	r0, r5
 3340 002c FFF7FEFF 		bl	__aeabi_i2d
 3341              	.LVL323:
 3342 0030 0246     		mov	r2, r0
 3343 0032 0B46     		mov	r3, r1
 3344 0034 3046     		mov	r0, r6
 3345 0036 3946     		mov	r1, r7
 3346 0038 FFF7FEFF 		bl	__aeabi_ddiv
 3347              	.LVL324:
1314:Src/Eagle_TRT.c **** 
1315:Src/Eagle_TRT.c **** 	return average;
1316:Src/Eagle_TRT.c **** }
 3348              		.loc 1 1316 0
 3349 003c 41EC100B 		vmov	d0, r0, r1
 3350 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3351              		.cfi_endproc
 3352              	.LFE165:
 3354              		.global	__aeabi_dsub
 3355              		.section	.text.imu_elaborate_data,"ax",%progbits
ARM GAS  /tmp/ccYuDwjm.s 			page 88


 3356              		.align	1
 3357              		.global	imu_elaborate_data
 3358              		.syntax unified
 3359              		.thumb
 3360              		.thumb_func
 3361              		.fpu fpv4-sp-d16
 3363              	imu_elaborate_data:
 3364              	.LFB137:
 371:Src/Eagle_TRT.c **** 	if (imu->x > 32768)
 3365              		.loc 1 371 0
 3366              		.cfi_startproc
 3367              		@ args = 0, pretend = 0, frame = 0
 3368              		@ frame_needed = 0, uses_anonymous_args = 0
 3369              	.LVL325:
 3370 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3371              	.LCFI47:
 3372              		.cfi_def_cfa_offset 40
 3373              		.cfi_offset 3, -40
 3374              		.cfi_offset 4, -36
 3375              		.cfi_offset 5, -32
 3376              		.cfi_offset 6, -28
 3377              		.cfi_offset 7, -24
 3378              		.cfi_offset 8, -20
 3379              		.cfi_offset 9, -16
 3380              		.cfi_offset 10, -12
 3381              		.cfi_offset 11, -8
 3382              		.cfi_offset 14, -4
 3383 0004 0446     		mov	r4, r0
 372:Src/Eagle_TRT.c **** 	{
 3384              		.loc 1 372 0
 3385 0006 D0E90067 		ldrd	r6, [r0]
 3386 000a 0022     		movs	r2, #0
 3387 000c 504B     		ldr	r3, .L277
 3388 000e 3046     		mov	r0, r6
 3389              	.LVL326:
 3390 0010 3946     		mov	r1, r7
 3391 0012 FFF7FEFF 		bl	__aeabi_dcmpgt
 3392              	.LVL327:
 3393 0016 38B1     		cbz	r0, .L265
 374:Src/Eagle_TRT.c **** 	}
 3394              		.loc 1 374 0
 3395 0018 0022     		movs	r2, #0
 3396 001a 4E4B     		ldr	r3, .L277+4
 3397 001c 3046     		mov	r0, r6
 3398 001e 3946     		mov	r1, r7
 3399 0020 FFF7FEFF 		bl	__aeabi_dsub
 3400              	.LVL328:
 3401 0024 C4E90001 		strd	r0, [r4]
 3402              	.L265:
 376:Src/Eagle_TRT.c **** 	{
 3403              		.loc 1 376 0
 3404 0028 D4E90267 		ldrd	r6, [r4, #8]
 3405 002c 0022     		movs	r2, #0
 3406 002e 484B     		ldr	r3, .L277
 3407 0030 3046     		mov	r0, r6
 3408 0032 3946     		mov	r1, r7
 3409 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
ARM GAS  /tmp/ccYuDwjm.s 			page 89


 3410              	.LVL329:
 3411 0038 38B1     		cbz	r0, .L267
 378:Src/Eagle_TRT.c **** 	}
 3412              		.loc 1 378 0
 3413 003a 0022     		movs	r2, #0
 3414 003c 454B     		ldr	r3, .L277+4
 3415 003e 3046     		mov	r0, r6
 3416 0040 3946     		mov	r1, r7
 3417 0042 FFF7FEFF 		bl	__aeabi_dsub
 3418              	.LVL330:
 3419 0046 C4E90201 		strd	r0, [r4, #8]
 3420              	.L267:
 380:Src/Eagle_TRT.c **** 	{
 3421              		.loc 1 380 0
 3422 004a D4E90467 		ldrd	r6, [r4, #16]
 3423 004e 0022     		movs	r2, #0
 3424 0050 3F4B     		ldr	r3, .L277
 3425 0052 3046     		mov	r0, r6
 3426 0054 3946     		mov	r1, r7
 3427 0056 FFF7FEFF 		bl	__aeabi_dcmpgt
 3428              	.LVL331:
 3429 005a 38B1     		cbz	r0, .L269
 382:Src/Eagle_TRT.c **** 	}
 3430              		.loc 1 382 0
 3431 005c 0022     		movs	r2, #0
 3432 005e 3D4B     		ldr	r3, .L277+4
 3433 0060 3046     		mov	r0, r6
 3434 0062 3946     		mov	r1, r7
 3435 0064 FFF7FEFF 		bl	__aeabi_dsub
 3436              	.LVL332:
 3437 0068 C4E90401 		strd	r0, [r4, #16]
 3438              	.L269:
 385:Src/Eagle_TRT.c **** 	imu->y = imu->y * (imu->scale / 32768);
 3439              		.loc 1 385 0
 3440 006c D4E90089 		ldrd	r8, [r4]
 3441 0070 D4F81802 		ldr	r0, [r4, #536]
 3442 0074 0028     		cmp	r0, #0
 3443 0076 66DB     		blt	.L276
 3444              	.L271:
 3445 0078 C013     		asrs	r0, r0, #15
 3446 007a FFF7FEFF 		bl	__aeabi_i2d
 3447              	.LVL333:
 3448 007e 0646     		mov	r6, r0
 3449 0080 0F46     		mov	r7, r1
 3450 0082 0246     		mov	r2, r0
 3451 0084 0B46     		mov	r3, r1
 3452 0086 4046     		mov	r0, r8
 3453 0088 4946     		mov	r1, r9
 3454 008a FFF7FEFF 		bl	__aeabi_dmul
 3455              	.LVL334:
 3456 008e 8046     		mov	r8, r0
 3457 0090 8946     		mov	r9, r1
 3458 0092 C4E90089 		strd	r8, [r4]
 386:Src/Eagle_TRT.c **** 	imu->z = imu->z * (imu->scale / 32768);
 3459              		.loc 1 386 0
 3460 0096 D4E90223 		ldrd	r2, [r4, #8]
 3461 009a 3046     		mov	r0, r6
ARM GAS  /tmp/ccYuDwjm.s 			page 90


 3462 009c 3946     		mov	r1, r7
 3463 009e FFF7FEFF 		bl	__aeabi_dmul
 3464              	.LVL335:
 3465 00a2 C4E90201 		strd	r0, [r4, #8]
 387:Src/Eagle_TRT.c **** 
 3466              		.loc 1 387 0
 3467 00a6 D4E90423 		ldrd	r2, [r4, #16]
 3468 00aa 3046     		mov	r0, r6
 3469 00ac 3946     		mov	r1, r7
 3470 00ae FFF7FEFF 		bl	__aeabi_dmul
 3471              	.LVL336:
 3472 00b2 C4E90401 		strd	r0, [r4, #16]
 389:Src/Eagle_TRT.c **** 	shift_array(imu->y_array, 10, imu->y);
 3473              		.loc 1 389 0
 3474 00b6 04F13007 		add	r7, r4, #48
 3475 00ba 49EC108B 		vmov	d0, r8, r9
 3476 00be 0A21     		movs	r1, #10
 3477 00c0 3846     		mov	r0, r7
 3478 00c2 FFF7FEFF 		bl	shift_array
 3479              	.LVL337:
 390:Src/Eagle_TRT.c **** 	shift_array(imu->z_array, 10, imu->z);
 3480              		.loc 1 390 0
 3481 00c6 04F1D006 		add	r6, r4, #208
 3482 00ca 94ED020B 		vldr.64	d0, [r4, #8]
 3483 00ce 0A21     		movs	r1, #10
 3484 00d0 3046     		mov	r0, r6
 3485 00d2 FFF7FEFF 		bl	shift_array
 3486              	.LVL338:
 391:Src/Eagle_TRT.c **** 
 3487              		.loc 1 391 0
 3488 00d6 04F5B875 		add	r5, r4, #368
 3489 00da 94ED040B 		vldr.64	d0, [r4, #16]
 3490 00de 0A21     		movs	r1, #10
 3491 00e0 2846     		mov	r0, r5
 3492 00e2 FFF7FEFF 		bl	shift_array
 3493              	.LVL339:
 393:Src/Eagle_TRT.c **** 	imu->y = dynamic_average(imu->y_array, 10);
 3494              		.loc 1 393 0
 3495 00e6 0A21     		movs	r1, #10
 3496 00e8 3846     		mov	r0, r7
 3497 00ea FFF7FEFF 		bl	dynamic_average
 3498              	.LVL340:
 3499 00ee 59EC108B 		vmov	r8, r9, d0
 3500 00f2 84ED000B 		vstr.64	d0, [r4]
 394:Src/Eagle_TRT.c **** 	imu->z = dynamic_average(imu->z_array, 10);
 3501              		.loc 1 394 0
 3502 00f6 0A21     		movs	r1, #10
 3503 00f8 3046     		mov	r0, r6
 3504 00fa FFF7FEFF 		bl	dynamic_average
 3505              	.LVL341:
 3506 00fe 57EC106B 		vmov	r6, r7, d0
 3507 0102 84ED020B 		vstr.64	d0, [r4, #8]
 395:Src/Eagle_TRT.c **** 
 3508              		.loc 1 395 0
 3509 0106 0A21     		movs	r1, #10
 3510 0108 2846     		mov	r0, r5
 3511 010a FFF7FEFF 		bl	dynamic_average
ARM GAS  /tmp/ccYuDwjm.s 			page 91


 3512              	.LVL342:
 3513 010e 5BEC10AB 		vmov	r10, fp, d0
 397:Src/Eagle_TRT.c **** 	imu->y -= imu->y_offset;
 3514              		.loc 1 397 0
 3515 0112 D4E90623 		ldrd	r2, [r4, #24]
 3516 0116 4046     		mov	r0, r8
 3517 0118 4946     		mov	r1, r9
 3518 011a FFF7FEFF 		bl	__aeabi_dsub
 3519              	.LVL343:
 3520 011e C4E90001 		strd	r0, [r4]
 398:Src/Eagle_TRT.c **** 	imu->z -= imu->z_offset;
 3521              		.loc 1 398 0
 3522 0122 D4E90823 		ldrd	r2, [r4, #32]
 3523 0126 3046     		mov	r0, r6
 3524 0128 3946     		mov	r1, r7
 3525 012a FFF7FEFF 		bl	__aeabi_dsub
 3526              	.LVL344:
 3527 012e C4E90201 		strd	r0, [r4, #8]
 399:Src/Eagle_TRT.c **** }
 3528              		.loc 1 399 0
 3529 0132 D4E90A23 		ldrd	r2, [r4, #40]
 3530 0136 5046     		mov	r0, r10
 3531 0138 5946     		mov	r1, fp
 3532 013a FFF7FEFF 		bl	__aeabi_dsub
 3533              	.LVL345:
 3534 013e C4E90401 		strd	r0, [r4, #16]
 3535 0142 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3536              	.LVL346:
 3537              	.L276:
 385:Src/Eagle_TRT.c **** 	imu->y = imu->y * (imu->scale / 32768);
 3538              		.loc 1 385 0
 3539 0146 00F5FF40 		add	r0, r0, #32640
 3540 014a 7F30     		adds	r0, r0, #127
 3541 014c 94E7     		b	.L271
 3542              	.L278:
 3543 014e 00BF     		.align	2
 3544              	.L277:
 3545 0150 0000E040 		.word	1088421888
 3546 0154 0000F040 		.word	1089470464
 3547              		.cfi_endproc
 3548              	.LFE137:
 3550              		.section	.text.LSM9DS0_calibration,"ax",%progbits
 3551              		.align	1
 3552              		.global	LSM9DS0_calibration
 3553              		.syntax unified
 3554              		.thumb
 3555              		.thumb_func
 3556              		.fpu fpv4-sp-d16
 3558              	LSM9DS0_calibration:
 3559              	.LFB135:
 309:Src/Eagle_TRT.c **** 	double x = 0, y = 0, z = 0;
 3560              		.loc 1 309 0
 3561              		.cfi_startproc
 3562              		@ args = 0, pretend = 0, frame = 0
 3563              		@ frame_needed = 0, uses_anonymous_args = 0
 3564              	.LVL347:
 3565 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
ARM GAS  /tmp/ccYuDwjm.s 			page 92


 3566              	.LCFI48:
 3567              		.cfi_def_cfa_offset 40
 3568              		.cfi_offset 3, -40
 3569              		.cfi_offset 4, -36
 3570              		.cfi_offset 5, -32
 3571              		.cfi_offset 6, -28
 3572              		.cfi_offset 7, -24
 3573              		.cfi_offset 8, -20
 3574              		.cfi_offset 9, -16
 3575              		.cfi_offset 10, -12
 3576              		.cfi_offset 11, -8
 3577              		.cfi_offset 14, -4
 3578 0004 8246     		mov	r10, r0
 3579              	.LVL348:
 3580              	.LBB23:
 312:Src/Eagle_TRT.c **** 	{
 3581              		.loc 1 312 0
 3582 0006 4FF0000B 		mov	fp, #0
 3583              	.LBE23:
 310:Src/Eagle_TRT.c **** 	int iterations = 200;
 3584              		.loc 1 310 0
 3585 000a 0024     		movs	r4, #0
 3586 000c 0025     		movs	r5, #0
 3587 000e 2646     		mov	r6, r4
 3588 0010 2F46     		mov	r7, r5
 3589 0012 A046     		mov	r8, r4
 3590 0014 A946     		mov	r9, r5
 3591              	.LBB24:
 312:Src/Eagle_TRT.c **** 	{
 3592              		.loc 1 312 0
 3593 0016 22E0     		b	.L280
 3594              	.LVL349:
 3595              	.L281:
 314:Src/Eagle_TRT.c **** 		imu_elaborate_data(imu);
 3596              		.loc 1 314 0 discriminator 3
 3597 0018 5046     		mov	r0, r10
 3598 001a FFF7FEFF 		bl	LSMD9S0_accel_read
 3599              	.LVL350:
 315:Src/Eagle_TRT.c **** 		x += imu->x;
 3600              		.loc 1 315 0 discriminator 3
 3601 001e 5046     		mov	r0, r10
 3602 0020 FFF7FEFF 		bl	imu_elaborate_data
 3603              	.LVL351:
 316:Src/Eagle_TRT.c **** 		y += imu->y;
 3604              		.loc 1 316 0 discriminator 3
 3605 0024 DAE90023 		ldrd	r2, [r10]
 3606 0028 4046     		mov	r0, r8
 3607 002a 4946     		mov	r1, r9
 3608 002c FFF7FEFF 		bl	__aeabi_dadd
 3609              	.LVL352:
 3610 0030 8046     		mov	r8, r0
 3611              	.LVL353:
 3612 0032 8946     		mov	r9, r1
 3613              	.LVL354:
 317:Src/Eagle_TRT.c **** 		z += imu->z;
 3614              		.loc 1 317 0 discriminator 3
 3615 0034 DAE90223 		ldrd	r2, [r10, #8]
ARM GAS  /tmp/ccYuDwjm.s 			page 93


 3616 0038 3046     		mov	r0, r6
 3617 003a 3946     		mov	r1, r7
 3618 003c FFF7FEFF 		bl	__aeabi_dadd
 3619              	.LVL355:
 3620 0040 0646     		mov	r6, r0
 3621              	.LVL356:
 3622 0042 0F46     		mov	r7, r1
 3623              	.LVL357:
 318:Src/Eagle_TRT.c **** 		HAL_Delay(1);
 3624              		.loc 1 318 0 discriminator 3
 3625 0044 DAE90423 		ldrd	r2, [r10, #16]
 3626 0048 2046     		mov	r0, r4
 3627 004a 2946     		mov	r1, r5
 3628 004c FFF7FEFF 		bl	__aeabi_dadd
 3629              	.LVL358:
 3630 0050 0446     		mov	r4, r0
 3631              	.LVL359:
 3632 0052 0D46     		mov	r5, r1
 3633              	.LVL360:
 319:Src/Eagle_TRT.c **** 	}
 3634              		.loc 1 319 0 discriminator 3
 3635 0054 0120     		movs	r0, #1
 3636 0056 FFF7FEFF 		bl	HAL_Delay
 3637              	.LVL361:
 312:Src/Eagle_TRT.c **** 	{
 3638              		.loc 1 312 0 discriminator 3
 3639 005a 0BF1010B 		add	fp, fp, #1
 3640              	.LVL362:
 3641              	.L280:
 312:Src/Eagle_TRT.c **** 	{
 3642              		.loc 1 312 0 is_stmt 0 discriminator 1
 3643 005e BBF1C70F 		cmp	fp, #199
 3644 0062 D9DD     		ble	.L281
 3645              	.LBE24:
 322:Src/Eagle_TRT.c **** 	imu->y_offset = y / iterations;
 3646              		.loc 1 322 0 is_stmt 1
 3647 0064 0022     		movs	r2, #0
 3648 0066 0E4B     		ldr	r3, .L283
 3649 0068 4046     		mov	r0, r8
 3650 006a 4946     		mov	r1, r9
 3651 006c FFF7FEFF 		bl	__aeabi_ddiv
 3652              	.LVL363:
 3653 0070 CAE90601 		strd	r0, [r10, #24]
 323:Src/Eagle_TRT.c **** 	imu->z_offset = z / iterations;
 3654              		.loc 1 323 0
 3655 0074 0022     		movs	r2, #0
 3656 0076 0A4B     		ldr	r3, .L283
 3657 0078 3046     		mov	r0, r6
 3658 007a 3946     		mov	r1, r7
 3659 007c FFF7FEFF 		bl	__aeabi_ddiv
 3660              	.LVL364:
 3661 0080 CAE90801 		strd	r0, [r10, #32]
 324:Src/Eagle_TRT.c **** 
 3662              		.loc 1 324 0
 3663 0084 0022     		movs	r2, #0
 3664 0086 064B     		ldr	r3, .L283
 3665 0088 2046     		mov	r0, r4
ARM GAS  /tmp/ccYuDwjm.s 			page 94


 3666 008a 2946     		mov	r1, r5
 3667 008c FFF7FEFF 		bl	__aeabi_ddiv
 3668              	.LVL365:
 3669 0090 CAE90A01 		strd	r0, [r10, #40]
 326:Src/Eagle_TRT.c **** }
 3670              		.loc 1 326 0
 3671 0094 0123     		movs	r3, #1
 3672 0096 CAF81032 		str	r3, [r10, #528]
 3673 009a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3674              	.LVL366:
 3675              	.L284:
 3676 009e 00BF     		.align	2
 3677              	.L283:
 3678 00a0 00006940 		.word	1080623104
 3679              		.cfi_endproc
 3680              	.LFE135:
 3682              		.global	__aeabi_dcmple
 3683              		.section	.text.get_speed_encoder,"ax",%progbits
 3684              		.align	1
 3685              		.global	get_speed_encoder
 3686              		.syntax unified
 3687              		.thumb
 3688              		.thumb_func
 3689              		.fpu fpv4-sp-d16
 3691              	get_speed_encoder:
 3692              	.LFB154:
1016:Src/Eagle_TRT.c **** 
 3693              		.loc 1 1016 0
 3694              		.cfi_startproc
 3695              		@ args = 0, pretend = 0, frame = 0
 3696              		@ frame_needed = 0, uses_anonymous_args = 0
 3697              	.LVL367:
 3698 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3699              	.LCFI49:
 3700              		.cfi_def_cfa_offset 40
 3701              		.cfi_offset 3, -40
 3702              		.cfi_offset 4, -36
 3703              		.cfi_offset 5, -32
 3704              		.cfi_offset 6, -28
 3705              		.cfi_offset 7, -24
 3706              		.cfi_offset 8, -20
 3707              		.cfi_offset 9, -16
 3708              		.cfi_offset 10, -12
 3709              		.cfi_offset 11, -8
 3710              		.cfi_offset 14, -4
 3711 0004 2DED068B 		vpush.64	{d8, d9, d10}
 3712              	.LCFI50:
 3713              		.cfi_def_cfa_offset 64
 3714              		.cfi_offset 80, -64
 3715              		.cfi_offset 81, -60
 3716              		.cfi_offset 82, -56
 3717              		.cfi_offset 83, -52
 3718              		.cfi_offset 84, -48
 3719              		.cfi_offset 85, -44
 3720 0008 0446     		mov	r4, r0
 3721              	.LVL368:
1021:Src/Eagle_TRT.c **** 	{
ARM GAS  /tmp/ccYuDwjm.s 			page 95


 3722              		.loc 1 1021 0
 3723 000a 436E     		ldr	r3, [r0, #100]
 3724 000c 012B     		cmp	r3, #1
 3725 000e 00F03581 		beq	.L321
1027:Src/Eagle_TRT.c **** 	}
 3726              		.loc 1 1027 0
 3727 0012 D0E92623 		ldrd	r2, [r0, #152]
 3728 0016 D0E92401 		ldrd	r0, [r0, #144]
 3729              	.LVL369:
 3730 001a FFF7FEFF 		bl	__aeabi_dsub
 3731              	.LVL370:
 3732 001e C4E92C01 		strd	r0, [r4, #176]
 3733              	.L287:
1031:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
 3734              		.loc 1 1031 0
 3735 0022 94ED24AB 		vldr.64	d10, [r4, #144]
 3736 0026 94ED1E8A 		vldr.32	s16, [r4, #120]
 3737 002a 18EE100A 		vmov	r0, s16
 3738 002e FFF7FEFF 		bl	__aeabi_f2d
 3739              	.LVL371:
 3740 0032 0646     		mov	r6, r0
 3741 0034 0F46     		mov	r7, r1
 3742 0036 0246     		mov	r2, r0
 3743 0038 0B46     		mov	r3, r1
 3744 003a 51EC1A0B 		vmov	r0, r1, d10
 3745 003e FFF7FEFF 		bl	__aeabi_dcmplt
 3746              	.LVL372:
 3747 0042 80B1     		cbz	r0, .L288
1031:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
 3748              		.loc 1 1031 0 is_stmt 0 discriminator 1
 3749 0044 D4E92689 		ldrd	r8, [r4, #152]
 3750 0048 DFED9D7A 		vldr.32	s15, .L323+32
 3751 004c 77EEC87A 		vsub.f32	s15, s15, s16
 3752 0050 17EE900A 		vmov	r0, s15
 3753 0054 FFF7FEFF 		bl	__aeabi_f2d
 3754              	.LVL373:
 3755 0058 0246     		mov	r2, r0
 3756 005a 0B46     		mov	r3, r1
 3757 005c 4046     		mov	r0, r8
 3758 005e 4946     		mov	r1, r9
 3759 0060 FFF7FEFF 		bl	__aeabi_dcmpgt
 3760              	.LVL374:
 3761 0064 A8B9     		cbnz	r0, .L290
 3762              	.L288:
1031:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle && enc->angle0 > 360 - enc->max_delta_angle))
 3763              		.loc 1 1031 0 discriminator 3
 3764 0066 D4E92623 		ldrd	r2, [r4, #152]
 3765 006a 3046     		mov	r0, r6
 3766 006c 3946     		mov	r1, r7
 3767 006e FFF7FEFF 		bl	__aeabi_dcmpgt
 3768              	.LVL375:
 3769 0072 08B3     		cbz	r0, .L291
1032:Src/Eagle_TRT.c **** 	{
 3770              		.loc 1 1032 0 is_stmt 1
 3771 0074 DFED927A 		vldr.32	s15, .L323+32
 3772 0078 77EEC87A 		vsub.f32	s15, s15, s16
 3773 007c 17EE900A 		vmov	r0, s15
ARM GAS  /tmp/ccYuDwjm.s 			page 96


 3774 0080 FFF7FEFF 		bl	__aeabi_f2d
 3775              	.LVL376:
 3776 0084 0246     		mov	r2, r0
 3777 0086 0B46     		mov	r3, r1
 3778 0088 51EC1A0B 		vmov	r0, r1, d10
 3779 008c FFF7FEFF 		bl	__aeabi_dcmpgt
 3780              	.LVL377:
 3781 0090 90B1     		cbz	r0, .L291
 3782              	.L290:
1034:Src/Eagle_TRT.c **** 		{
 3783              		.loc 1 1034 0
 3784 0092 D4E92C67 		ldrd	r6, [r4, #176]
 3785 0096 0022     		movs	r2, #0
 3786 0098 0023     		movs	r3, #0
 3787 009a 3046     		mov	r0, r6
 3788 009c 3946     		mov	r1, r7
 3789 009e FFF7FEFF 		bl	__aeabi_dcmplt
 3790              	.LVL378:
 3791 00a2 0028     		cmp	r0, #0
 3792 00a4 40F0F380 		bne	.L322
1040:Src/Eagle_TRT.c **** 		}
 3793              		.loc 1 1040 0
 3794 00a8 3246     		mov	r2, r6
 3795 00aa 3B46     		mov	r3, r7
 3796 00ac 0020     		movs	r0, #0
 3797 00ae 8549     		ldr	r1, .L323+36
 3798 00b0 FFF7FEFF 		bl	__aeabi_dsub
 3799              	.LVL379:
 3800 00b4 C4E92C01 		strd	r0, [r4, #176]
 3801              	.L291:
1045:Src/Eagle_TRT.c **** 	speed *= enc->frequency;
 3802              		.loc 1 1045 0
 3803 00b8 0022     		movs	r2, #0
 3804 00ba 824B     		ldr	r3, .L323+36
 3805 00bc D4E92C01 		ldrd	r0, [r4, #176]
 3806 00c0 FFF7FEFF 		bl	__aeabi_ddiv
 3807              	.LVL380:
 3808 00c4 76A3     		adr	r3, .L323
 3809 00c6 D3E90023 		ldrd	r2, [r3]
 3810 00ca FFF7FEFF 		bl	__aeabi_dmul
 3811              	.LVL381:
 3812 00ce 8046     		mov	r8, r0
 3813 00d0 8946     		mov	r9, r1
 3814 00d2 606F     		ldr	r0, [r4, #116]	@ float
 3815 00d4 FFF7FEFF 		bl	__aeabi_f2d
 3816              	.LVL382:
 3817 00d8 0646     		mov	r6, r0
 3818 00da 0F46     		mov	r7, r1
 3819 00dc 0246     		mov	r2, r0
 3820 00de 0B46     		mov	r3, r1
 3821 00e0 4046     		mov	r0, r8
 3822 00e2 4946     		mov	r1, r9
 3823 00e4 FFF7FEFF 		bl	__aeabi_dmul
 3824              	.LVL383:
 3825 00e8 8046     		mov	r8, r0
 3826 00ea 8946     		mov	r9, r1
 3827              	.LVL384:
ARM GAS  /tmp/ccYuDwjm.s 			page 97


1046:Src/Eagle_TRT.c **** 	speed *= 3.6;
 3828              		.loc 1 1046 0
 3829 00ec E06F     		ldr	r0, [r4, #124]	@ float
 3830 00ee FFF7FEFF 		bl	__aeabi_f2d
 3831              	.LVL385:
 3832 00f2 0246     		mov	r2, r0
 3833 00f4 0B46     		mov	r3, r1
 3834 00f6 4046     		mov	r0, r8
 3835 00f8 4946     		mov	r1, r9
 3836 00fa FFF7FEFF 		bl	__aeabi_dmul
 3837              	.LVL386:
1047:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
 3838              		.loc 1 1047 0
 3839 00fe 6AA3     		adr	r3, .L323+8
 3840 0100 D3E90023 		ldrd	r2, [r3]
 3841 0104 FFF7FEFF 		bl	__aeabi_dmul
 3842              	.LVL387:
1048:Src/Eagle_TRT.c **** 
 3843              		.loc 1 1048 0
 3844 0108 0022     		movs	r2, #0
 3845 010a 6F4B     		ldr	r3, .L323+40
 3846 010c FFF7FEFF 		bl	__aeabi_dmul
 3847              	.LVL388:
 3848 0110 41EC100B 		vmov	d0, r0, r1
 3849 0114 FFF7FEFF 		bl	round
 3850              	.LVL389:
 3851 0118 0022     		movs	r2, #0
 3852 011a 6B4B     		ldr	r3, .L323+40
 3853 011c 51EC100B 		vmov	r0, r1, d0
 3854 0120 FFF7FEFF 		bl	__aeabi_ddiv
 3855              	.LVL390:
 3856 0124 41EC190B 		vmov	d9, r0, r1
 3857              	.LVL391:
1050:Src/Eagle_TRT.c **** 
 3858              		.loc 1 1050 0
 3859 0128 FDEEC87A 		vcvt.s32.f32	s15, s16
 3860 012c 17EE905A 		vmov	r5, s15	@ int
 3861              	.LVL392:
1054:Src/Eagle_TRT.c **** 	{
 3862              		.loc 1 1054 0
 3863 0130 D4E9F689 		ldrd	r8, [r4, #984]
 3864 0134 0022     		movs	r2, #0
 3865 0136 654B     		ldr	r3, .L323+44
 3866 0138 4046     		mov	r0, r8
 3867              	.LVL393:
 3868 013a 4946     		mov	r1, r9
 3869 013c FFF7FEFF 		bl	__aeabi_dcmplt
 3870              	.LVL394:
 3871 0140 38B9     		cbnz	r0, .L296
1054:Src/Eagle_TRT.c **** 	{
 3872              		.loc 1 1054 0 is_stmt 0 discriminator 1
 3873 0142 0022     		movs	r2, #0
 3874 0144 624B     		ldr	r3, .L323+48
 3875 0146 4046     		mov	r0, r8
 3876 0148 4946     		mov	r1, r9
 3877 014a FFF7FEFF 		bl	__aeabi_dcmpgt
 3878              	.LVL395:
ARM GAS  /tmp/ccYuDwjm.s 			page 98


 3879 014e 0028     		cmp	r0, #0
 3880 0150 7DD0     		beq	.L297
 3881              	.L296:
1056:Src/Eagle_TRT.c **** 		{
 3882              		.loc 1 1056 0 is_stmt 1
 3883 0152 D4E928AB 		ldrd	r10, [r4, #160]
 3884 0156 56A3     		adr	r3, .L323+16
 3885 0158 D3E90023 		ldrd	r2, [r3]
 3886 015c 5046     		mov	r0, r10
 3887 015e 5946     		mov	r1, fp
 3888 0160 FFF7FEFF 		bl	__aeabi_dcmple
 3889              	.LVL396:
 3890 0164 A8B3     		cbz	r0, .L299
1056:Src/Eagle_TRT.c **** 		{
 3891              		.loc 1 1056 0 is_stmt 0 discriminator 1
 3892 0166 C5F5B470 		rsb	r0, r5, #360
 3893 016a FFF7FEFF 		bl	__aeabi_i2d
 3894              	.LVL397:
 3895 016e 0246     		mov	r2, r0
 3896 0170 0B46     		mov	r3, r1
 3897 0172 5046     		mov	r0, r10
 3898 0174 5946     		mov	r1, fp
 3899 0176 FFF7FEFF 		bl	__aeabi_dcmpgt
 3900              	.LVL398:
 3901 017a 50B3     		cbz	r0, .L299
1056:Src/Eagle_TRT.c **** 		{
 3902              		.loc 1 1056 0 discriminator 2
 3903 017c 0022     		movs	r2, #0
 3904 017e 554B     		ldr	r3, .L323+52
 3905 0180 51EC1A0B 		vmov	r0, r1, d10
 3906 0184 FFF7FEFF 		bl	__aeabi_dcmpge
 3907              	.LVL399:
 3908 0188 18B3     		cbz	r0, .L299
1056:Src/Eagle_TRT.c **** 		{
 3909              		.loc 1 1056 0 discriminator 3
 3910 018a 2846     		mov	r0, r5
 3911 018c FFF7FEFF 		bl	__aeabi_i2d
 3912              	.LVL400:
 3913 0190 0246     		mov	r2, r0
 3914 0192 0B46     		mov	r3, r1
 3915 0194 51EC1A0B 		vmov	r0, r1, d10
 3916 0198 FFF7FEFF 		bl	__aeabi_dcmplt
 3917              	.LVL401:
 3918 019c C8B1     		cbz	r0, .L299
1058:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
 3919              		.loc 1 1058 0 is_stmt 1
 3920 019e A36E     		ldr	r3, [r4, #104]
 3921 01a0 0133     		adds	r3, r3, #1
 3922 01a2 A366     		str	r3, [r4, #104]
1059:Src/Eagle_TRT.c **** 		}
 3923              		.loc 1 1059 0
 3924 01a4 44A3     		adr	r3, .L323+24
 3925 01a6 D3E90023 		ldrd	r2, [r3]
 3926 01aa 3046     		mov	r0, r6
 3927 01ac 3946     		mov	r1, r7
 3928 01ae FFF7FEFF 		bl	__aeabi_dmul
 3929              	.LVL402:
ARM GAS  /tmp/ccYuDwjm.s 			page 99


 3930 01b2 0022     		movs	r2, #0
 3931 01b4 444B     		ldr	r3, .L323+40
 3932 01b6 FFF7FEFF 		bl	__aeabi_ddiv
 3933              	.LVL403:
 3934 01ba 8046     		mov	r8, r0
 3935 01bc 8946     		mov	r9, r1
 3936 01be E06E     		ldr	r0, [r4, #108]	@ float
 3937 01c0 FFF7FEFF 		bl	__aeabi_f2d
 3938              	.LVL404:
 3939 01c4 4246     		mov	r2, r8
 3940 01c6 4B46     		mov	r3, r9
 3941 01c8 FFF7FEFF 		bl	__aeabi_dadd
 3942              	.LVL405:
 3943 01cc FFF7FEFF 		bl	__aeabi_d2f
 3944              	.LVL406:
 3945 01d0 E066     		str	r0, [r4, #108]	@ float
 3946              	.L299:
1061:Src/Eagle_TRT.c **** 		{
 3947              		.loc 1 1061 0
 3948 01d2 0022     		movs	r2, #0
 3949 01d4 3F4B     		ldr	r3, .L323+52
 3950 01d6 5046     		mov	r0, r10
 3951 01d8 5946     		mov	r1, fp
 3952 01da FFF7FEFF 		bl	__aeabi_dcmpge
 3953              	.LVL407:
 3954 01de B0B3     		cbz	r0, .L297
1061:Src/Eagle_TRT.c **** 		{
 3955              		.loc 1 1061 0 is_stmt 0 discriminator 1
 3956 01e0 2846     		mov	r0, r5
 3957 01e2 FFF7FEFF 		bl	__aeabi_i2d
 3958              	.LVL408:
 3959 01e6 0246     		mov	r2, r0
 3960 01e8 0B46     		mov	r3, r1
 3961 01ea 5046     		mov	r0, r10
 3962 01ec 5946     		mov	r1, fp
 3963 01ee FFF7FEFF 		bl	__aeabi_dcmplt
 3964              	.LVL409:
 3965 01f2 60B3     		cbz	r0, .L297
1061:Src/Eagle_TRT.c **** 		{
 3966              		.loc 1 1061 0 discriminator 2
 3967 01f4 2EA3     		adr	r3, .L323+16
 3968 01f6 D3E90023 		ldrd	r2, [r3]
 3969 01fa 51EC1A0B 		vmov	r0, r1, d10
 3970 01fe FFF7FEFF 		bl	__aeabi_dcmple
 3971              	.LVL410:
 3972 0202 20B3     		cbz	r0, .L297
1061:Src/Eagle_TRT.c **** 		{
 3973              		.loc 1 1061 0 discriminator 3
 3974 0204 C5F5B470 		rsb	r0, r5, #360
 3975 0208 FFF7FEFF 		bl	__aeabi_i2d
 3976              	.LVL411:
 3977 020c 0246     		mov	r2, r0
 3978 020e 0B46     		mov	r3, r1
 3979 0210 51EC1A0B 		vmov	r0, r1, d10
 3980 0214 FFF7FEFF 		bl	__aeabi_dcmpgt
 3981              	.LVL412:
 3982 0218 C8B1     		cbz	r0, .L297
ARM GAS  /tmp/ccYuDwjm.s 			page 100


1063:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter) / 1000;
 3983              		.loc 1 1063 0 is_stmt 1
 3984 021a A36E     		ldr	r3, [r4, #104]
 3985 021c 0133     		adds	r3, r3, #1
 3986 021e A366     		str	r3, [r4, #104]
1064:Src/Eagle_TRT.c **** 		}
 3987              		.loc 1 1064 0
 3988 0220 25A3     		adr	r3, .L323+24
 3989 0222 D3E90023 		ldrd	r2, [r3]
 3990 0226 3046     		mov	r0, r6
 3991 0228 3946     		mov	r1, r7
 3992 022a FFF7FEFF 		bl	__aeabi_dmul
 3993              	.LVL413:
 3994 022e 0022     		movs	r2, #0
 3995 0230 254B     		ldr	r3, .L323+40
 3996 0232 FFF7FEFF 		bl	__aeabi_ddiv
 3997              	.LVL414:
 3998 0236 0646     		mov	r6, r0
 3999 0238 0F46     		mov	r7, r1
 4000 023a E06E     		ldr	r0, [r4, #108]	@ float
 4001 023c FFF7FEFF 		bl	__aeabi_f2d
 4002              	.LVL415:
 4003 0240 3246     		mov	r2, r6
 4004 0242 3B46     		mov	r3, r7
 4005 0244 FFF7FEFF 		bl	__aeabi_dadd
 4006              	.LVL416:
 4007 0248 FFF7FEFF 		bl	__aeabi_d2f
 4008              	.LVL417:
 4009 024c E066     		str	r0, [r4, #108]	@ float
 4010              	.L297:
1069:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 50);
 4011              		.loc 1 1069 0
 4012 024e 04F1B805 		add	r5, r4, #184
 4013              	.LVL418:
 4014 0252 B0EE490A 		vmov.f32	s0, s18
 4015 0256 F0EE690A 		vmov.f32	s1, s19
 4016 025a 3221     		movs	r1, #50
 4017 025c 2846     		mov	r0, r5
 4018 025e FFF7FEFF 		bl	shift_array
 4019              	.LVL419:
1070:Src/Eagle_TRT.c **** 
 4020              		.loc 1 1070 0
 4021 0262 3221     		movs	r1, #50
 4022 0264 2846     		mov	r0, r5
 4023 0266 FFF7FEFF 		bl	dynamic_average
 4024              	.LVL420:
 4025 026a 84EDF60B 		vstr.64	d0, [r4, #984]
1073:Src/Eagle_TRT.c **** }
 4026              		.loc 1 1073 0
 4027 026e 2046     		mov	r0, r4
 4028 0270 FFF7FEFF 		bl	enc_calculate_optimal_frequency
 4029              	.LVL421:
1074:Src/Eagle_TRT.c **** 
 4030              		.loc 1 1074 0
 4031 0274 BDEC068B 		vldm	sp!, {d8-d10}
 4032              	.LCFI51:
 4033              		.cfi_remember_state
ARM GAS  /tmp/ccYuDwjm.s 			page 101


 4034              		.cfi_restore 84
 4035              		.cfi_restore 85
 4036              		.cfi_restore 82
 4037              		.cfi_restore 83
 4038              		.cfi_restore 80
 4039              		.cfi_restore 81
 4040              		.cfi_def_cfa_offset 40
 4041              	.LVL422:
 4042 0278 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4043              	.LVL423:
 4044              	.L321:
 4045              	.LCFI52:
 4046              		.cfi_restore_state
1023:Src/Eagle_TRT.c **** 	}
 4047              		.loc 1 1023 0
 4048 027c D0E92423 		ldrd	r2, [r0, #144]
 4049 0280 D0E92601 		ldrd	r0, [r0, #152]
 4050              	.LVL424:
 4051 0284 FFF7FEFF 		bl	__aeabi_dsub
 4052              	.LVL425:
 4053 0288 C4E92C01 		strd	r0, [r4, #176]
 4054 028c C9E6     		b	.L287
 4055              	.L322:
1036:Src/Eagle_TRT.c **** 		}
 4056              		.loc 1 1036 0
 4057 028e 0022     		movs	r2, #0
 4058 0290 0C4B     		ldr	r3, .L323+36
 4059 0292 3046     		mov	r0, r6
 4060 0294 3946     		mov	r1, r7
 4061 0296 FFF7FEFF 		bl	__aeabi_dadd
 4062              	.LVL426:
 4063 029a C4E92C01 		strd	r0, [r4, #176]
 4064 029e 0BE7     		b	.L291
 4065              	.L324:
 4066              		.align	3
 4067              	.L323:
 4068 02a0 6F1283C0 		.word	3229815407
 4069 02a4 CA210940 		.word	1074340298
 4070 02a8 CDCCCCCC 		.word	3435973837
 4071 02ac CCCC0C40 		.word	1074580684
 4072 02b0 00000000 		.word	0
 4073 02b4 00907640 		.word	1081511936
 4074 02b8 1F85EB51 		.word	1374389535
 4075 02bc B81E0940 		.word	1074339512
 4076 02c0 0000B443 		.word	1135869952
 4077 02c4 00807640 		.word	1081507840
 4078 02c8 00408F40 		.word	1083129856
 4079 02cc 0000E0BF 		.word	-1075838976
 4080 02d0 0000E03F 		.word	1071644672
 4081 02d4 0000F0BF 		.word	-1074790400
 4082              		.cfi_endproc
 4083              	.LFE154:
 4085              		.section	.text.encoder_tim_interrupt,"ax",%progbits
 4086              		.align	1
 4087              		.global	encoder_tim_interrupt
 4088              		.syntax unified
 4089              		.thumb
ARM GAS  /tmp/ccYuDwjm.s 			page 102


 4090              		.thumb_func
 4091              		.fpu fpv4-sp-d16
 4093              	encoder_tim_interrupt:
 4094              	.LFB153:
 973:Src/Eagle_TRT.c **** 
 4095              		.loc 1 973 0
 4096              		.cfi_startproc
 4097              		@ args = 0, pretend = 0, frame = 0
 4098              		@ frame_needed = 0, uses_anonymous_args = 0
 4099              	.LVL427:
 4100 0000 D0B5     		push	{r4, r6, r7, lr}
 4101              	.LCFI53:
 4102              		.cfi_def_cfa_offset 16
 4103              		.cfi_offset 4, -16
 4104              		.cfi_offset 6, -12
 4105              		.cfi_offset 7, -8
 4106              		.cfi_offset 14, -4
 4107 0002 0446     		mov	r4, r0
 975:Src/Eagle_TRT.c **** 	{
 4108              		.loc 1 975 0
 4109 0004 8368     		ldr	r3, [r0, #8]
 4110 0006 4BB1     		cbz	r3, .L336
 982:Src/Eagle_TRT.c **** 	{
 4111              		.loc 1 982 0
 4112 0008 012B     		cmp	r3, #1
 4113 000a 1CD0     		beq	.L337
 989:Src/Eagle_TRT.c **** 	{
 4114              		.loc 1 989 0
 4115 000c 022B     		cmp	r3, #2
 4116 000e 2FD0     		beq	.L338
 4117              	.LVL428:
 4118              	.L327:
1007:Src/Eagle_TRT.c **** }
 4119              		.loc 1 1007 0
 4120 0010 A368     		ldr	r3, [r4, #8]
 4121 0012 012B     		cmp	r3, #1
 4122 0014 43DD     		ble	.L339
 4123 0016 0023     		movs	r3, #0
 4124              	.L331:
1007:Src/Eagle_TRT.c **** }
 4125              		.loc 1 1007 0 is_stmt 0 discriminator 4
 4126 0018 A360     		str	r3, [r4, #8]
 4127 001a D0BD     		pop	{r4, r6, r7, pc}
 4128              	.LVL429:
 4129              	.L336:
 978:Src/Eagle_TRT.c **** 		enc->error_flag = read_SSI(enc, &enc->converted_data);
 4130              		.loc 1 978 0 is_stmt 1
 4131 001c D0E92423 		ldrd	r2, [r0, #144]
 4132 0020 C0E92823 		strd	r2, [r0, #160]
 979:Src/Eagle_TRT.c **** 		enc->angle0 = enc->converted_data / 45.5055;
 4133              		.loc 1 979 0
 4134 0024 00F57871 		add	r1, r0, #992
 4135 0028 FFF7FEFF 		bl	read_SSI
 4136              	.LVL430:
 4137 002c 6060     		str	r0, [r4, #4]
 980:Src/Eagle_TRT.c **** 	}
 4138              		.loc 1 980 0
ARM GAS  /tmp/ccYuDwjm.s 			page 103


 4139 002e D4F8E003 		ldr	r0, [r4, #992]
 4140 0032 FFF7FEFF 		bl	__aeabi_i2d
 4141              	.LVL431:
 4142 0036 1CA3     		adr	r3, .L341
 4143 0038 D3E90023 		ldrd	r2, [r3]
 4144 003c FFF7FEFF 		bl	__aeabi_ddiv
 4145              	.LVL432:
 4146 0040 C4E92401 		strd	r0, [r4, #144]
 4147 0044 E4E7     		b	.L327
 4148              	.LVL433:
 4149              	.L337:
 985:Src/Eagle_TRT.c **** 		enc->error_flag = read_SSI(enc, &enc->converted_data);
 4150              		.loc 1 985 0
 4151 0046 D0E92623 		ldrd	r2, [r0, #152]
 4152 004a C0E92A23 		strd	r2, [r0, #168]
 986:Src/Eagle_TRT.c **** 		enc->angle1 = enc->converted_data / 45.5055;
 4153              		.loc 1 986 0
 4154 004e 00F57871 		add	r1, r0, #992
 4155 0052 FFF7FEFF 		bl	read_SSI
 4156              	.LVL434:
 4157 0056 6060     		str	r0, [r4, #4]
 987:Src/Eagle_TRT.c **** 	}
 4158              		.loc 1 987 0
 4159 0058 D4F8E003 		ldr	r0, [r4, #992]
 4160 005c FFF7FEFF 		bl	__aeabi_i2d
 4161              	.LVL435:
 4162 0060 11A3     		adr	r3, .L341
 4163 0062 D3E90023 		ldrd	r2, [r3]
 4164 0066 FFF7FEFF 		bl	__aeabi_ddiv
 4165              	.LVL436:
 4166 006a C4E92601 		strd	r0, [r4, #152]
 4167 006e CFE7     		b	.L327
 4168              	.LVL437:
 4169              	.L338:
 992:Src/Eagle_TRT.c **** 
 4170              		.loc 1 992 0
 4171 0070 FFF7FEFF 		bl	get_speed_encoder
 4172              	.LVL438:
 995:Src/Eagle_TRT.c **** 		{
 4173              		.loc 1 995 0
 4174 0074 D4E9F667 		ldrd	r6, [r4, #984]
 4175 0078 0022     		movs	r2, #0
 4176 007a 0023     		movs	r3, #0
 4177 007c 3046     		mov	r0, r6
 4178 007e 3946     		mov	r1, r7
 4179 0080 FFF7FEFF 		bl	__aeabi_dcmplt
 4180              	.LVL439:
 4181 0084 10B9     		cbnz	r0, .L340
1002:Src/Eagle_TRT.c **** 		}
 4182              		.loc 1 1002 0
 4183 0086 0023     		movs	r3, #0
 4184 0088 2367     		str	r3, [r4, #112]
 4185 008a C1E7     		b	.L327
 4186              	.L340:
 997:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
 4187              		.loc 1 997 0
 4188 008c C4F8D863 		str	r6, [r4, #984]
ARM GAS  /tmp/ccYuDwjm.s 			page 104


 4189 0090 07F10043 		add	r3, r7, #-2147483648
 4190 0094 C4F8DC33 		str	r3, [r4, #988]
 998:Src/Eagle_TRT.c **** 		}
 4191              		.loc 1 998 0
 4192 0098 0123     		movs	r3, #1
 4193 009a 2367     		str	r3, [r4, #112]
 4194 009c B8E7     		b	.L327
 4195              	.L339:
1007:Src/Eagle_TRT.c **** }
 4196              		.loc 1 1007 0 discriminator 1
 4197 009e 0133     		adds	r3, r3, #1
 4198 00a0 BAE7     		b	.L331
 4199              	.L342:
 4200 00a2 00BFAFF3 		.align	3
 4200      0080
 4201              	.L341:
 4202 00a8 62105839 		.word	962072674
 4203 00ac B4C04640 		.word	1078378676
 4204              		.cfi_endproc
 4205              	.LFE153:
 4207              		.comm	pot_3,24,4
 4208              		.comm	pot_2,24,4
 4209              		.comm	pot_1,24,4
 4210              		.comm	enc,1016,8
 4211              		.comm	buffer_gps,2,4
 4212              		.comm	data_string_gps,1,1
 4213              		.comm	cont_comma,4,4
 4214              		.comm	cont_string,4,4
 4215              		.comm	string_gps,100,4
 4216              		.global	start_string_gps
 4217              		.comm	huart_GPS,4,4
 4218              		.global	print_q
 4219              		.comm	can,28,4
 4220              		.comm	gyro,568,8
 4221              		.comm	accel,568,8
 4222              		.comm	imu,568,8
 4223              		.global	OUT_Z_H_A_ADD
 4224              		.global	OUT_Z_L_A_ADD
 4225              		.global	OUT_Y_H_A_ADD
 4226              		.global	OUT_Y_L_A_ADD
 4227              		.global	OUT_X_H_A_ADD
 4228              		.global	OUT_X_L_A_ADD
 4229              		.global	OUT_Z_H_G_ADD
 4230              		.global	OUT_Z_L_G_ADD
 4231              		.global	OUT_Y_H_G_ADD
 4232              		.global	OUT_Y_L_G_ADD
 4233              		.global	OUT_X_H_G_ADD
 4234              		.global	OUT_X_L_G_ADD
 4235              		.global	SCL_M_12
 4236              		.global	SCL_M_8
 4237              		.global	SCL_M_4
 4238              		.global	SCL_M_2
 4239              		.global	CTRL_REG6_XM
 4240              		.global	SCL_A_16
 4241              		.global	SCL_A_8
 4242              		.global	SCL_A_6
 4243              		.global	SCL_A_4
ARM GAS  /tmp/ccYuDwjm.s 			page 105


 4244              		.global	SCL_A_2
 4245              		.global	CTRL_REG2_XM
 4246              		.global	SCL_G_2000
 4247              		.global	SCL_G_1000
 4248              		.global	SCL_G_500
 4249              		.global	SCL_G_245
 4250              		.global	CTRL_REG4_G
 4251              		.global	CTRL_REG7_XM_VAL
 4252              		.global	CTRL_REG7_XM_ADD
 4253              		.global	CTRL_REG6_XM_VAL
 4254              		.global	CTRL_REG6_XM_ADD
 4255              		.global	CTRL_REG5_XM_VAL
 4256              		.global	CTRL_REG5_XM_ADD
 4257              		.global	CTRL_REG2_XM_VAL
 4258              		.global	CTRL_REG2_XM_ADD
 4259              		.global	CTRL_REG1_XM_VAL
 4260              		.global	CTRL_REG1_XM_ADD
 4261              		.global	CTRL_REG4_G_VAL
 4262              		.global	CTRL_REG4_G_ADD
 4263              		.global	CTRL_REG1_G_VAL
 4264              		.global	CTRL_REG1_G_ADD
 4265              		.comm	WHO_AM_I_XM_VAL,1,1
 4266              		.global	WHO_AM_I_XM
 4267              		.comm	WHO_AM_I_G_VAL,1,1
 4268              		.global	WHO_AM_I_G
 4269              		.global	ZERO
 4270              		.section	.bss.CTRL_REG7_XM_VAL,"aw",%nobits
 4271              		.set	.LANCHOR8,. + 0
 4274              	CTRL_REG7_XM_VAL:
 4275 0000 00       		.space	1
 4276              		.section	.bss.SCL_A_2,"aw",%nobits
 4277              		.set	.LANCHOR15,. + 0
 4280              	SCL_A_2:
 4281 0000 00       		.space	1
 4282              		.section	.bss.SCL_G_245,"aw",%nobits
 4283              		.set	.LANCHOR10,. + 0
 4286              	SCL_G_245:
 4287 0000 00       		.space	1
 4288              		.section	.bss.SCL_M_2,"aw",%nobits
 4291              	SCL_M_2:
 4292 0000 00       		.space	1
 4293              		.section	.bss.ZERO,"aw",%nobits
 4296              	ZERO:
 4297 0000 00       		.space	1
 4298              		.section	.bss.print_q,"aw",%nobits
 4299              		.align	2
 4300              		.set	.LANCHOR35,. + 0
 4303              	print_q:
 4304 0000 00000000 		.space	224
 4304      00000000 
 4304      00000000 
 4304      00000000 
 4304      00000000 
 4305              		.section	.bss.start_string_gps,"aw",%nobits
 4306              		.align	2
 4307              		.set	.LANCHOR36,. + 0
 4310              	start_string_gps:
ARM GAS  /tmp/ccYuDwjm.s 			page 106


 4311 0000 00000000 		.space	4
 4312              		.section	.data.CTRL_REG1_G_ADD,"aw",%progbits
 4313              		.set	.LANCHOR1,. + 0
 4316              	CTRL_REG1_G_ADD:
 4317 0000 20       		.byte	32
 4318              		.section	.data.CTRL_REG1_G_VAL,"aw",%progbits
 4319              		.set	.LANCHOR0,. + 0
 4322              	CTRL_REG1_G_VAL:
 4323 0000 0F       		.byte	15
 4324              		.section	.data.CTRL_REG1_XM_ADD,"aw",%progbits
 4325              		.set	.LANCHOR3,. + 0
 4328              	CTRL_REG1_XM_ADD:
 4329 0000 20       		.byte	32
 4330              		.section	.data.CTRL_REG1_XM_VAL,"aw",%progbits
 4331              		.set	.LANCHOR2,. + 0
 4334              	CTRL_REG1_XM_VAL:
 4335 0000 A7       		.byte	-89
 4336              		.section	.data.CTRL_REG2_XM,"aw",%progbits
 4337              		.set	.LANCHOR16,. + 0
 4340              	CTRL_REG2_XM:
 4341 0000 21       		.byte	33
 4342              		.section	.data.CTRL_REG2_XM_ADD,"aw",%progbits
 4345              	CTRL_REG2_XM_ADD:
 4346 0000 21       		.byte	33
 4347              		.section	.data.CTRL_REG2_XM_VAL,"aw",%progbits
 4350              	CTRL_REG2_XM_VAL:
 4351 0000 08       		.byte	8
 4352              		.section	.data.CTRL_REG4_G,"aw",%progbits
 4353              		.set	.LANCHOR11,. + 0
 4356              	CTRL_REG4_G:
 4357 0000 23       		.byte	35
 4358              		.section	.data.CTRL_REG4_G_ADD,"aw",%progbits
 4361              	CTRL_REG4_G_ADD:
 4362 0000 23       		.byte	35
 4363              		.section	.data.CTRL_REG4_G_VAL,"aw",%progbits
 4366              	CTRL_REG4_G_VAL:
 4367 0000 10       		.byte	16
 4368              		.section	.data.CTRL_REG5_XM_ADD,"aw",%progbits
 4369              		.set	.LANCHOR5,. + 0
 4372              	CTRL_REG5_XM_ADD:
 4373 0000 24       		.byte	36
 4374              		.section	.data.CTRL_REG5_XM_VAL,"aw",%progbits
 4375              		.set	.LANCHOR4,. + 0
 4378              	CTRL_REG5_XM_VAL:
 4379 0000 70       		.byte	112
 4380              		.section	.data.CTRL_REG6_XM,"aw",%progbits
 4383              	CTRL_REG6_XM:
 4384 0000 25       		.byte	37
 4385              		.section	.data.CTRL_REG6_XM_ADD,"aw",%progbits
 4386              		.set	.LANCHOR7,. + 0
 4389              	CTRL_REG6_XM_ADD:
 4390 0000 25       		.byte	37
 4391              		.section	.data.CTRL_REG6_XM_VAL,"aw",%progbits
 4392              		.set	.LANCHOR6,. + 0
 4395              	CTRL_REG6_XM_VAL:
 4396 0000 20       		.byte	32
 4397              		.section	.data.CTRL_REG7_XM_ADD,"aw",%progbits
ARM GAS  /tmp/ccYuDwjm.s 			page 107


 4398              		.set	.LANCHOR9,. + 0
 4401              	CTRL_REG7_XM_ADD:
 4402 0000 26       		.byte	38
 4403              		.section	.data.OUT_X_H_A_ADD,"aw",%progbits
 4404              		.set	.LANCHOR29,. + 0
 4407              	OUT_X_H_A_ADD:
 4408 0000 A9       		.byte	-87
 4409              		.section	.data.OUT_X_H_G_ADD,"aw",%progbits
 4410              		.set	.LANCHOR23,. + 0
 4413              	OUT_X_H_G_ADD:
 4414 0000 A9       		.byte	-87
 4415              		.section	.data.OUT_X_L_A_ADD,"aw",%progbits
 4416              		.set	.LANCHOR30,. + 0
 4419              	OUT_X_L_A_ADD:
 4420 0000 A8       		.byte	-88
 4421              		.section	.data.OUT_X_L_G_ADD,"aw",%progbits
 4422              		.set	.LANCHOR24,. + 0
 4425              	OUT_X_L_G_ADD:
 4426 0000 A8       		.byte	-88
 4427              		.section	.data.OUT_Y_H_A_ADD,"aw",%progbits
 4428              		.set	.LANCHOR31,. + 0
 4431              	OUT_Y_H_A_ADD:
 4432 0000 AB       		.byte	-85
 4433              		.section	.data.OUT_Y_H_G_ADD,"aw",%progbits
 4434              		.set	.LANCHOR25,. + 0
 4437              	OUT_Y_H_G_ADD:
 4438 0000 AB       		.byte	-85
 4439              		.section	.data.OUT_Y_L_A_ADD,"aw",%progbits
 4440              		.set	.LANCHOR32,. + 0
 4443              	OUT_Y_L_A_ADD:
 4444 0000 AA       		.byte	-86
 4445              		.section	.data.OUT_Y_L_G_ADD,"aw",%progbits
 4446              		.set	.LANCHOR26,. + 0
 4449              	OUT_Y_L_G_ADD:
 4450 0000 AA       		.byte	-86
 4451              		.section	.data.OUT_Z_H_A_ADD,"aw",%progbits
 4452              		.set	.LANCHOR33,. + 0
 4455              	OUT_Z_H_A_ADD:
 4456 0000 AD       		.byte	-83
 4457              		.section	.data.OUT_Z_H_G_ADD,"aw",%progbits
 4458              		.set	.LANCHOR27,. + 0
 4461              	OUT_Z_H_G_ADD:
 4462 0000 AD       		.byte	-83
 4463              		.section	.data.OUT_Z_L_A_ADD,"aw",%progbits
 4464              		.set	.LANCHOR34,. + 0
 4467              	OUT_Z_L_A_ADD:
 4468 0000 AC       		.byte	-84
 4469              		.section	.data.OUT_Z_L_G_ADD,"aw",%progbits
 4470              		.set	.LANCHOR28,. + 0
 4473              	OUT_Z_L_G_ADD:
 4474 0000 AC       		.byte	-84
 4475              		.section	.data.SCL_A_16,"aw",%progbits
 4476              		.set	.LANCHOR20,. + 0
 4479              	SCL_A_16:
 4480 0000 20       		.byte	32
 4481              		.section	.data.SCL_A_4,"aw",%progbits
 4482              		.set	.LANCHOR17,. + 0
ARM GAS  /tmp/ccYuDwjm.s 			page 108


 4485              	SCL_A_4:
 4486 0000 08       		.byte	8
 4487              		.section	.data.SCL_A_6,"aw",%progbits
 4488              		.set	.LANCHOR18,. + 0
 4491              	SCL_A_6:
 4492 0000 10       		.byte	16
 4493              		.section	.data.SCL_A_8,"aw",%progbits
 4494              		.set	.LANCHOR19,. + 0
 4497              	SCL_A_8:
 4498 0000 18       		.byte	24
 4499              		.section	.data.SCL_G_1000,"aw",%progbits
 4500              		.set	.LANCHOR13,. + 0
 4503              	SCL_G_1000:
 4504 0000 20       		.byte	32
 4505              		.section	.data.SCL_G_2000,"aw",%progbits
 4506              		.set	.LANCHOR14,. + 0
 4509              	SCL_G_2000:
 4510 0000 30       		.byte	48
 4511              		.section	.data.SCL_G_500,"aw",%progbits
 4512              		.set	.LANCHOR12,. + 0
 4515              	SCL_G_500:
 4516 0000 10       		.byte	16
 4517              		.section	.data.SCL_M_12,"aw",%progbits
 4520              	SCL_M_12:
 4521 0000 60       		.byte	96
 4522              		.section	.data.SCL_M_4,"aw",%progbits
 4525              	SCL_M_4:
 4526 0000 20       		.byte	32
 4527              		.section	.data.SCL_M_8,"aw",%progbits
 4530              	SCL_M_8:
 4531 0000 40       		.byte	64
 4532              		.section	.data.WHO_AM_I_G,"aw",%progbits
 4533              		.set	.LANCHOR22,. + 0
 4536              	WHO_AM_I_G:
 4537 0000 8F       		.byte	-113
 4538              		.section	.data.WHO_AM_I_XM,"aw",%progbits
 4539              		.set	.LANCHOR21,. + 0
 4542              	WHO_AM_I_XM:
 4543 0000 8F       		.byte	-113
 4544              		.section	.rodata.LSMD9S0_accel_gyro_init.str1.4,"aMS",%progbits,1
 4545              		.align	2
 4546              	.LC1:
 4547 0000 3C494D55 		.ascii	"<IMU> Initialization -> Done\015\012\000"
 4547      3E20496E 
 4547      69746961 
 4547      6C697A61 
 4547      74696F6E 
 4548              		.section	.rodata.checksum.str1.4,"aMS",%progbits,1
 4549              		.align	2
 4550              	.LC0:
 4551 0000 257800   		.ascii	"%x\000"
 4552              		.section	.rodata.gps_init.str1.4,"aMS",%progbits,1
 4553              		.align	2
 4554              	.LC2:
 4555 0000 24504D54 		.ascii	"$PMTK251,115200*1F\015\012\000"
 4555      4B323531 
 4555      2C313135 
ARM GAS  /tmp/ccYuDwjm.s 			page 109


 4555      3230302A 
 4555      31460D0A 
 4556 0015 000000   		.space	3
 4557              	.LC3:
 4558 0018 24504D54 		.ascii	"$PMTK220,100*2F\015\012\000"
 4558      4B323230 
 4558      2C313030 
 4558      2A32460D 
 4558      0A00
 4559 002a 0000     		.space	2
 4560              	.LC4:
 4561 002c 24504D54 		.ascii	"$PMTK314,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\015"
 4561      4B333134 
 4561      2C302C30 
 4561      2C312C31 
 4561      2C302C30 
 4562 005e 0A00     		.ascii	"\012\000"
 4563              	.LC5:
 4564 0060 3030302E 		.ascii	"000.00\000"
 4564      303000
 4565 0067 00       		.space	1
 4566              	.LC6:
 4567 0068 30303030 		.ascii	"0000.0000\000"
 4567      2E303030 
 4567      3000
 4568 0072 0000     		.space	2
 4569              	.LC7:
 4570 0074 4E00     		.ascii	"N\000"
 4571 0076 0000     		.space	2
 4572              	.LC8:
 4573 0078 30303030 		.ascii	"00000.0000\000"
 4573      302E3030 
 4573      303000
 4574 0083 00       		.space	1
 4575              	.LC9:
 4576 0084 5700     		.ascii	"W\000"
 4577 0086 0000     		.space	2
 4578              	.LC10:
 4579 0088 30303030 		.ascii	"0000.0\000"
 4579      2E3000
 4580 008f 00       		.space	1
 4581              	.LC11:
 4582 0090 30303030 		.ascii	"000000\000"
 4582      303000
 4583              		.text
 4584              	.Letext0:
 4585              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4586              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4587              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4588              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4589              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 4590              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 4591              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4592              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4593              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4594              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 4595              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
ARM GAS  /tmp/ccYuDwjm.s 			page 110


 4596              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 4597              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4598              		.file 15 "/usr/include/newlib/sys/lock.h"
 4599              		.file 16 "/usr/include/newlib/sys/_types.h"
 4600              		.file 17 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4601              		.file 18 "/usr/include/newlib/sys/reent.h"
 4602              		.file 19 "/usr/include/newlib/stdlib.h"
 4603              		.file 20 "/usr/include/newlib/math.h"
 4604              		.file 21 "Inc/Eagle_TRT.h"
 4605              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 4606              		.file 23 "/usr/include/newlib/stdio.h"
 4607              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4608              		.file 25 "/usr/include/newlib/string.h"
 4609              		.file 26 "/usr/include/newlib/malloc.h"
ARM GAS  /tmp/ccYuDwjm.s 			page 111


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Eagle_TRT.c
     /tmp/ccYuDwjm.s:18     .text.next:0000000000000000 $t
     /tmp/ccYuDwjm.s:24     .text.next:0000000000000000 next
     /tmp/ccYuDwjm.s:45     .text.emptyp:0000000000000000 $t
     /tmp/ccYuDwjm.s:51     .text.emptyp:0000000000000000 emptyp
     /tmp/ccYuDwjm.s:73     .text.fullp:0000000000000000 $t
     /tmp/ccYuDwjm.s:79     .text.fullp:0000000000000000 fullp
     /tmp/ccYuDwjm.s:109    .text.checksum:0000000000000000 $t
     /tmp/ccYuDwjm.s:115    .text.checksum:0000000000000000 checksum
     /tmp/ccYuDwjm.s:242    .text.checksum:0000000000000080 $d
     /tmp/ccYuDwjm.s:247    .text.send_config:0000000000000000 $t
     /tmp/ccYuDwjm.s:254    .text.send_config:0000000000000000 send_config
     /tmp/ccYuDwjm.s:325    .text.send_config:000000000000005c $d
                            *COM*:0000000000000238 imu
     /tmp/ccYuDwjm.s:331    .text.LSMD9S0_accel_gyro_init:0000000000000000 $t
     /tmp/ccYuDwjm.s:338    .text.LSMD9S0_accel_gyro_init:0000000000000000 LSMD9S0_accel_gyro_init
     /tmp/ccYuDwjm.s:440    .text.LSMD9S0_accel_gyro_init:00000000000000ba $d
     /tmp/ccYuDwjm.s:567    .text.LSMD9S0_accel_gyro_init:000000000000018c $d
     /tmp/ccYuDwjm.s:596    .text.LSMD9S0_read:0000000000000000 $t
     /tmp/ccYuDwjm.s:603    .text.LSMD9S0_read:0000000000000000 LSMD9S0_read
     /tmp/ccYuDwjm.s:730    .text.LSMD9S0_read:00000000000000d0 $d
     /tmp/ccYuDwjm.s:735    .text.LSMD9S0_check:0000000000000000 $t
     /tmp/ccYuDwjm.s:742    .text.LSMD9S0_check:0000000000000000 LSMD9S0_check
     /tmp/ccYuDwjm.s:871    .text.LSMD9S0_check:00000000000000bc $d
                            *COM*:0000000000000001 WHO_AM_I_XM_VAL
                            *COM*:0000000000000001 WHO_AM_I_G_VAL
     /tmp/ccYuDwjm.s:883    .text.LSMD9S0_gyro_read:0000000000000000 $t
     /tmp/ccYuDwjm.s:890    .text.LSMD9S0_gyro_read:0000000000000000 LSMD9S0_gyro_read
     /tmp/ccYuDwjm.s:979    .text.LSMD9S0_gyro_read:0000000000000098 $d
     /tmp/ccYuDwjm.s:992    .text.LSMD9S0_accel_read:0000000000000000 $t
     /tmp/ccYuDwjm.s:999    .text.LSMD9S0_accel_read:0000000000000000 LSMD9S0_accel_read
     /tmp/ccYuDwjm.s:1070   .text.LSMD9S0_accel_read:0000000000000078 $d
     /tmp/ccYuDwjm.s:1081   .text.CAN_Send:0000000000000000 $t
     /tmp/ccYuDwjm.s:1088   .text.CAN_Send:0000000000000000 CAN_Send
     /tmp/ccYuDwjm.s:1163   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccYuDwjm.s:1170   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccYuDwjm.s:1219   .text.init:0000000000000000 $t
     /tmp/ccYuDwjm.s:1226   .text.init:0000000000000000 init
     /tmp/ccYuDwjm.s:1246   .text.push:0000000000000000 $t
     /tmp/ccYuDwjm.s:1253   .text.push:0000000000000000 push
     /tmp/ccYuDwjm.s:1321   .text.pop:0000000000000000 $t
     /tmp/ccYuDwjm.s:1328   .text.pop:0000000000000000 pop
     /tmp/ccYuDwjm.s:1394   .text.print:0000000000000000 $t
     /tmp/ccYuDwjm.s:1401   .text.print:0000000000000000 print
     /tmp/ccYuDwjm.s:1454   .text.print:0000000000000030 $d
     /tmp/ccYuDwjm.s:1459   .text.print_it:0000000000000000 $t
     /tmp/ccYuDwjm.s:1466   .text.print_it:0000000000000000 print_it
     /tmp/ccYuDwjm.s:1516   .text.print_it:0000000000000028 $d
     /tmp/ccYuDwjm.s:1521   .text.gps_init:0000000000000000 $t
     /tmp/ccYuDwjm.s:1528   .text.gps_init:0000000000000000 gps_init
     /tmp/ccYuDwjm.s:1683   .text.gps_init:00000000000000fc $d
                            *COM*:0000000000000004 huart_GPS
                            *COM*:0000000000000002 buffer_gps
     /tmp/ccYuDwjm.s:1701   .text.gps_read_it:0000000000000000 $t
     /tmp/ccYuDwjm.s:1708   .text.gps_read_it:0000000000000000 gps_read_it
     /tmp/ccYuDwjm.s:2174   .text.gps_read_it:0000000000000280 $d
ARM GAS  /tmp/ccYuDwjm.s 			page 112


                            *COM*:0000000000000001 data_string_gps
                            *COM*:0000000000000004 cont_string
                            *COM*:0000000000000064 string_gps
                            *COM*:000000000000001c can
                            *COM*:0000000000000004 cont_comma
     /tmp/ccYuDwjm.s:2193   .text.gps_read_it:00000000000002c0 $t
     /tmp/ccYuDwjm.s:2264   .text.gps_read_it:0000000000000330 $d
     /tmp/ccYuDwjm.s:2271   .text.read_SSI:0000000000000000 $t
     /tmp/ccYuDwjm.s:2278   .text.read_SSI:0000000000000000 read_SSI
     /tmp/ccYuDwjm.s:2449   .text.ReinitTIM7:0000000000000000 $t
     /tmp/ccYuDwjm.s:2456   .text.ReinitTIM7:0000000000000000 ReinitTIM7
     /tmp/ccYuDwjm.s:2548   .text.ReinitTIM7:0000000000000088 $d
     /tmp/ccYuDwjm.s:2558   .text.enc_calculate_optimal_frequency:0000000000000000 $t
     /tmp/ccYuDwjm.s:2565   .text.enc_calculate_optimal_frequency:0000000000000000 enc_calculate_optimal_frequency
     /tmp/ccYuDwjm.s:2695   .text.enc_calculate_optimal_frequency:00000000000000d4 $d
     /tmp/ccYuDwjm.s:2702   .text.calc_pot_value:0000000000000000 $t
     /tmp/ccYuDwjm.s:2709   .text.calc_pot_value:0000000000000000 calc_pot_value
     /tmp/ccYuDwjm.s:2758   .text.implausibility_check:0000000000000000 $t
     /tmp/ccYuDwjm.s:2765   .text.implausibility_check:0000000000000000 implausibility_check
     /tmp/ccYuDwjm.s:2844   .text.set_max:0000000000000000 $t
     /tmp/ccYuDwjm.s:2851   .text.set_max:0000000000000000 set_max
     /tmp/ccYuDwjm.s:2867   .text.set_min:0000000000000000 $t
     /tmp/ccYuDwjm.s:2874   .text.set_min:0000000000000000 set_min
     /tmp/ccYuDwjm.s:2891   .text.Power:0000000000000000 $t
     /tmp/ccYuDwjm.s:2898   .text.Power:0000000000000000 Power
     /tmp/ccYuDwjm.s:2961   .text.Power:000000000000003c $d
     /tmp/ccYuDwjm.s:2967   .text.bin_dec:0000000000000000 $t
     /tmp/ccYuDwjm.s:2974   .text.bin_dec:0000000000000000 bin_dec
     /tmp/ccYuDwjm.s:3046   .text.shift_array:0000000000000000 $t
     /tmp/ccYuDwjm.s:3053   .text.shift_array:0000000000000000 shift_array
     /tmp/ccYuDwjm.s:3119   .text.speed_filter:0000000000000000 $t
     /tmp/ccYuDwjm.s:3126   .text.speed_filter:0000000000000000 speed_filter
     /tmp/ccYuDwjm.s:3273   .text.speed_filter:00000000000000a8 $d
     /tmp/ccYuDwjm.s:3281   .text.dynamic_average:0000000000000000 $t
     /tmp/ccYuDwjm.s:3288   .text.dynamic_average:0000000000000000 dynamic_average
     /tmp/ccYuDwjm.s:3356   .text.imu_elaborate_data:0000000000000000 $t
     /tmp/ccYuDwjm.s:3363   .text.imu_elaborate_data:0000000000000000 imu_elaborate_data
     /tmp/ccYuDwjm.s:3545   .text.imu_elaborate_data:0000000000000150 $d
     /tmp/ccYuDwjm.s:3551   .text.LSM9DS0_calibration:0000000000000000 $t
     /tmp/ccYuDwjm.s:3558   .text.LSM9DS0_calibration:0000000000000000 LSM9DS0_calibration
     /tmp/ccYuDwjm.s:3678   .text.LSM9DS0_calibration:00000000000000a0 $d
     /tmp/ccYuDwjm.s:3684   .text.get_speed_encoder:0000000000000000 $t
     /tmp/ccYuDwjm.s:3691   .text.get_speed_encoder:0000000000000000 get_speed_encoder
     /tmp/ccYuDwjm.s:4068   .text.get_speed_encoder:00000000000002a0 $d
     /tmp/ccYuDwjm.s:4086   .text.encoder_tim_interrupt:0000000000000000 $t
     /tmp/ccYuDwjm.s:4093   .text.encoder_tim_interrupt:0000000000000000 encoder_tim_interrupt
     /tmp/ccYuDwjm.s:4202   .text.encoder_tim_interrupt:00000000000000a8 $d
                            *COM*:0000000000000018 pot_3
                            *COM*:0000000000000018 pot_2
                            *COM*:0000000000000018 pot_1
                            *COM*:00000000000003f8 enc
     /tmp/ccYuDwjm.s:4310   .bss.start_string_gps:0000000000000000 start_string_gps
     /tmp/ccYuDwjm.s:4303   .bss.print_q:0000000000000000 print_q
                            *COM*:0000000000000238 gyro
                            *COM*:0000000000000238 accel
     /tmp/ccYuDwjm.s:4455   .data.OUT_Z_H_A_ADD:0000000000000000 OUT_Z_H_A_ADD
     /tmp/ccYuDwjm.s:4467   .data.OUT_Z_L_A_ADD:0000000000000000 OUT_Z_L_A_ADD
ARM GAS  /tmp/ccYuDwjm.s 			page 113


     /tmp/ccYuDwjm.s:4431   .data.OUT_Y_H_A_ADD:0000000000000000 OUT_Y_H_A_ADD
     /tmp/ccYuDwjm.s:4443   .data.OUT_Y_L_A_ADD:0000000000000000 OUT_Y_L_A_ADD
     /tmp/ccYuDwjm.s:4407   .data.OUT_X_H_A_ADD:0000000000000000 OUT_X_H_A_ADD
     /tmp/ccYuDwjm.s:4419   .data.OUT_X_L_A_ADD:0000000000000000 OUT_X_L_A_ADD
     /tmp/ccYuDwjm.s:4461   .data.OUT_Z_H_G_ADD:0000000000000000 OUT_Z_H_G_ADD
     /tmp/ccYuDwjm.s:4473   .data.OUT_Z_L_G_ADD:0000000000000000 OUT_Z_L_G_ADD
     /tmp/ccYuDwjm.s:4437   .data.OUT_Y_H_G_ADD:0000000000000000 OUT_Y_H_G_ADD
     /tmp/ccYuDwjm.s:4449   .data.OUT_Y_L_G_ADD:0000000000000000 OUT_Y_L_G_ADD
     /tmp/ccYuDwjm.s:4413   .data.OUT_X_H_G_ADD:0000000000000000 OUT_X_H_G_ADD
     /tmp/ccYuDwjm.s:4425   .data.OUT_X_L_G_ADD:0000000000000000 OUT_X_L_G_ADD
     /tmp/ccYuDwjm.s:4520   .data.SCL_M_12:0000000000000000 SCL_M_12
     /tmp/ccYuDwjm.s:4530   .data.SCL_M_8:0000000000000000 SCL_M_8
     /tmp/ccYuDwjm.s:4525   .data.SCL_M_4:0000000000000000 SCL_M_4
     /tmp/ccYuDwjm.s:4291   .bss.SCL_M_2:0000000000000000 SCL_M_2
     /tmp/ccYuDwjm.s:4383   .data.CTRL_REG6_XM:0000000000000000 CTRL_REG6_XM
     /tmp/ccYuDwjm.s:4479   .data.SCL_A_16:0000000000000000 SCL_A_16
     /tmp/ccYuDwjm.s:4497   .data.SCL_A_8:0000000000000000 SCL_A_8
     /tmp/ccYuDwjm.s:4491   .data.SCL_A_6:0000000000000000 SCL_A_6
     /tmp/ccYuDwjm.s:4485   .data.SCL_A_4:0000000000000000 SCL_A_4
     /tmp/ccYuDwjm.s:4280   .bss.SCL_A_2:0000000000000000 SCL_A_2
     /tmp/ccYuDwjm.s:4340   .data.CTRL_REG2_XM:0000000000000000 CTRL_REG2_XM
     /tmp/ccYuDwjm.s:4509   .data.SCL_G_2000:0000000000000000 SCL_G_2000
     /tmp/ccYuDwjm.s:4503   .data.SCL_G_1000:0000000000000000 SCL_G_1000
     /tmp/ccYuDwjm.s:4515   .data.SCL_G_500:0000000000000000 SCL_G_500
     /tmp/ccYuDwjm.s:4286   .bss.SCL_G_245:0000000000000000 SCL_G_245
     /tmp/ccYuDwjm.s:4356   .data.CTRL_REG4_G:0000000000000000 CTRL_REG4_G
     /tmp/ccYuDwjm.s:4274   .bss.CTRL_REG7_XM_VAL:0000000000000000 CTRL_REG7_XM_VAL
     /tmp/ccYuDwjm.s:4401   .data.CTRL_REG7_XM_ADD:0000000000000000 CTRL_REG7_XM_ADD
     /tmp/ccYuDwjm.s:4395   .data.CTRL_REG6_XM_VAL:0000000000000000 CTRL_REG6_XM_VAL
     /tmp/ccYuDwjm.s:4389   .data.CTRL_REG6_XM_ADD:0000000000000000 CTRL_REG6_XM_ADD
     /tmp/ccYuDwjm.s:4378   .data.CTRL_REG5_XM_VAL:0000000000000000 CTRL_REG5_XM_VAL
     /tmp/ccYuDwjm.s:4372   .data.CTRL_REG5_XM_ADD:0000000000000000 CTRL_REG5_XM_ADD
     /tmp/ccYuDwjm.s:4350   .data.CTRL_REG2_XM_VAL:0000000000000000 CTRL_REG2_XM_VAL
     /tmp/ccYuDwjm.s:4345   .data.CTRL_REG2_XM_ADD:0000000000000000 CTRL_REG2_XM_ADD
     /tmp/ccYuDwjm.s:4334   .data.CTRL_REG1_XM_VAL:0000000000000000 CTRL_REG1_XM_VAL
     /tmp/ccYuDwjm.s:4328   .data.CTRL_REG1_XM_ADD:0000000000000000 CTRL_REG1_XM_ADD
     /tmp/ccYuDwjm.s:4366   .data.CTRL_REG4_G_VAL:0000000000000000 CTRL_REG4_G_VAL
     /tmp/ccYuDwjm.s:4361   .data.CTRL_REG4_G_ADD:0000000000000000 CTRL_REG4_G_ADD
     /tmp/ccYuDwjm.s:4322   .data.CTRL_REG1_G_VAL:0000000000000000 CTRL_REG1_G_VAL
     /tmp/ccYuDwjm.s:4316   .data.CTRL_REG1_G_ADD:0000000000000000 CTRL_REG1_G_ADD
     /tmp/ccYuDwjm.s:4542   .data.WHO_AM_I_XM:0000000000000000 WHO_AM_I_XM
     /tmp/ccYuDwjm.s:4536   .data.WHO_AM_I_G:0000000000000000 WHO_AM_I_G
     /tmp/ccYuDwjm.s:4296   .bss.ZERO:0000000000000000 ZERO
     /tmp/ccYuDwjm.s:4275   .bss.CTRL_REG7_XM_VAL:0000000000000000 $d
     /tmp/ccYuDwjm.s:4281   .bss.SCL_A_2:0000000000000000 $d
     /tmp/ccYuDwjm.s:4287   .bss.SCL_G_245:0000000000000000 $d
     /tmp/ccYuDwjm.s:4292   .bss.SCL_M_2:0000000000000000 $d
     /tmp/ccYuDwjm.s:4297   .bss.ZERO:0000000000000000 $d
     /tmp/ccYuDwjm.s:4299   .bss.print_q:0000000000000000 $d
     /tmp/ccYuDwjm.s:4306   .bss.start_string_gps:0000000000000000 $d
     /tmp/ccYuDwjm.s:4545   .rodata.LSMD9S0_accel_gyro_init.str1.4:0000000000000000 $d
     /tmp/ccYuDwjm.s:4549   .rodata.checksum.str1.4:0000000000000000 $d
     /tmp/ccYuDwjm.s:4553   .rodata.gps_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccYuDwjm.s:455    .text.LSMD9S0_accel_gyro_init:00000000000000c9 $d
     /tmp/ccYuDwjm.s:455    .text.LSMD9S0_accel_gyro_init:00000000000000ca $t

ARM GAS  /tmp/ccYuDwjm.s 			page 114


UNDEFINED SYMBOLS
sprintf
HAL_GPIO_WritePin
HAL_SPI_Transmit
htim2
HAL_Delay
HAL_UART_Transmit
huart2
HAL_SPI_Receive
__aeabi_f2d
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
strlen
malloc
strcpy
free
HAL_UART_Transmit_IT
HAL_UART_Init
HAL_UART_Receive_IT
__aeabi_dmul
__aeabi_d2iz
atof
HAL_GPIO_ReadPin
sqrt
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_dcmpge
__aeabi_dcmpgt
__aeabi_dcmplt
__aeabi_ddiv
__aeabi_d2f
__aeabi_i2d
__aeabi_dadd
__aeabi_dsub
__aeabi_dcmple
round
