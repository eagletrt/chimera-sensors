ARM GAS  /tmp/ccuwAQC3.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"Eagle_TRT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.next,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	next:
  25              	.LFB141:
  26              		.file 1 "Src/Eagle_TRT.c"
   1:Src/Eagle_TRT.c **** #include "Eagle_TRT.h"
   2:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_conf.h"
   3:Src/Eagle_TRT.c **** 
   4:Src/Eagle_TRT.c **** /*
   5:Src/Eagle_TRT.c ****  *Driver for all the stm in the Eagle_TRT veichle
   6:Src/Eagle_TRT.c ****  *incude this driver in the main file
   7:Src/Eagle_TRT.c ****  *you can't use all the functions unless you set up the CubeMx project correctly
   8:Src/Eagle_TRT.c **** */
   9:Src/Eagle_TRT.c **** 
  10:Src/Eagle_TRT.c **** //----------------ENCODER----------------//
  11:Src/Eagle_TRT.c **** /*
  12:Src/Eagle_TRT.c ****  *To use encoder functions you have to initialize two timers, one for the clock and one to generate
  13:Src/Eagle_TRT.c ****  *To get the rotational speed of the encoder, you can setup the interrupt timer and call 'encoder_t
  14:Src/Eagle_TRT.c ****  *you have to declare a variable and pass it as argument to the encoder_tim_interrupt() function.
  15:Src/Eagle_TRT.c ****  *The porpouse of that variable is to switch from the three phases needed to calculate the rotation
  16:Src/Eagle_TRT.c ****  *The first and the second phases are to request two angles from the encoder, then third is to calc
  17:Src/Eagle_TRT.c ****  *For the configuration of the first timer go to the description of the read_encoder() function.
  18:Src/Eagle_TRT.c ****  *For the configuration of the second timer you have to configure it to generate an interrupt.
  19:Src/Eagle_TRT.c ****  *That interrupt must be long enough to calculate a speed but not too long because you have to get 
  20:Src/Eagle_TRT.c ****  *
  21:Src/Eagle_TRT.c ****  *working settings:
  22:Src/Eagle_TRT.c ****  *interrupt timer -> prescaler 36, counter period 1000
  23:Src/Eagle_TRT.c ****  *timer2 -> prescaler = 18, counter period = 65500
  24:Src/Eagle_TRT.c ****  *pin PC8 = data in
  25:Src/Eagle_TRT.c ****  *pin PC9 = clock pin
  26:Src/Eagle_TRT.c ****  *angles_array[15]
  27:Src/Eagle_TRT.c **** */
  28:Src/Eagle_TRT.c **** 
  29:Src/Eagle_TRT.c **** //----------------GPS----------------//
  30:Src/Eagle_TRT.c **** /*
  31:Src/Eagle_TRT.c ****  *To use GPS functions you have to setup the UART port to communicate with it.
  32:Src/Eagle_TRT.c ****  *Possibly set the port as interrupt because the received data are cleaner.
ARM GAS  /tmp/ccuwAQC3.s 			page 2


  33:Src/Eagle_TRT.c ****  *Call GPS_INIT() to setup the GPS
  34:Src/Eagle_TRT.c ****  *Every loop read the input data.
  35:Src/Eagle_TRT.c ****  *Then the function Get_Sentence() looks for a sequence of letters like "GPRMC"
  36:Src/Eagle_TRT.c ****  *Look at NMEA protocol, there you can find all the strings that a GPS can send,
  37:Src/Eagle_TRT.c ****  *every one of them defines the types of data that the GPS sends.
  38:Src/Eagle_TRT.c ****  *If Get_Sentence() found one string, returns the number of the position of that string in the char
  39:Src/Eagle_TRT.c ****  *Go to Get_Sentence() description to find an example of Matrix
  40:Src/Eagle_TRT.c ****  *Once you have the number of the string you can call Get_Requested_Data() to get the data that you
  41:Src/Eagle_TRT.c ****  *If you need to know if the GPS is connected to at least 3 satellites call Is_Valid() function
  42:Src/Eagle_TRT.c ****  *
  43:Src/Eagle_TRT.c ****  *checksum calculator http://www.hhhh.org/wiml/proj/nmeaxor.html
  44:Src/Eagle_TRT.c **** */
  45:Src/Eagle_TRT.c **** 
  46:Src/Eagle_TRT.c **** //----------------IMU----------------//
  47:Src/Eagle_TRT.c **** /*
  48:Src/Eagle_TRT.c ****  *Setup SPI port to communicate with the sensor
  49:Src/Eagle_TRT.c ****  *Call gyro_init() and magn_accel_init() to setup the sensor
  50:Src/Eagle_TRT.c ****  *If you want to calibrate the sensor call gyro_calib() and accel_calib().
  51:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling gyro_read()
  52:Src/Eagle_TRT.c ****  *You can read the x, y, z data from the Gyroscope by calling accel_read()
  53:Src/Eagle_TRT.c **** */
  54:Src/Eagle_TRT.c **** 
  55:Src/Eagle_TRT.c **** #ifdef HAL_SPI_MODULE_ENABLED
  56:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_spi.h"
  57:Src/Eagle_TRT.c **** 
  58:Src/Eagle_TRT.c **** extern TIM_HandleTypeDef htim2;
  59:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
  60:Src/Eagle_TRT.c **** 
  61:Src/Eagle_TRT.c **** ///IMU VARIABLES///
  62:Src/Eagle_TRT.c **** uint8_t ZERO = 0x00;
  63:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G = 0x8F;
  64:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_G_VAL;
  65:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM = 0x8F;
  66:Src/Eagle_TRT.c **** uint8_t WHO_AM_I_XM_VAL;
  67:Src/Eagle_TRT.c **** 
  68:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_ADD = 0x20;
  69:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_G_VAL = 0x0F;
  70:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_ADD = 0x23;
  71:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G_VAL = 0x10;
  72:Src/Eagle_TRT.c **** 
  73:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_ADD = 0x20;
  74:Src/Eagle_TRT.c **** uint8_t CTRL_REG1_XM_VAL = 0xA7;
  75:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_ADD = 0x21;
  76:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM_VAL = 0x08;
  77:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_ADD = 0x24;
  78:Src/Eagle_TRT.c **** uint8_t CTRL_REG5_XM_VAL = 0x70;
  79:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_ADD = 0x25;
  80:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM_VAL = 0x20;
  81:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_ADD = 0x26;
  82:Src/Eagle_TRT.c **** uint8_t CTRL_REG7_XM_VAL = 0x00;
  83:Src/Eagle_TRT.c **** 
  84:Src/Eagle_TRT.c **** // GYROSCOPE SCALE SETTING
  85:Src/Eagle_TRT.c **** uint8_t CTRL_REG4_G = 0x23;
  86:Src/Eagle_TRT.c **** 
  87:Src/Eagle_TRT.c **** uint8_t SCL_G_245 = 0x00;
  88:Src/Eagle_TRT.c **** uint8_t SCL_G_500 = 0x10;
  89:Src/Eagle_TRT.c **** uint8_t SCL_G_1000 = 0x20;
ARM GAS  /tmp/ccuwAQC3.s 			page 3


  90:Src/Eagle_TRT.c **** uint8_t SCL_G_2000 = 0x30;
  91:Src/Eagle_TRT.c **** 
  92:Src/Eagle_TRT.c **** // ACCELERORMETER SCALE SETTING
  93:Src/Eagle_TRT.c **** uint8_t CTRL_REG2_XM = 0x21;
  94:Src/Eagle_TRT.c **** 
  95:Src/Eagle_TRT.c **** uint8_t SCL_A_2 = 0x00;
  96:Src/Eagle_TRT.c **** uint8_t SCL_A_4 = 0x08;
  97:Src/Eagle_TRT.c **** uint8_t SCL_A_6 = 0x10;
  98:Src/Eagle_TRT.c **** uint8_t SCL_A_8 = 0x18;
  99:Src/Eagle_TRT.c **** uint8_t SCL_A_16 = 0x20;
 100:Src/Eagle_TRT.c **** 
 101:Src/Eagle_TRT.c **** // MAGNETORMETER SCALE SETTING
 102:Src/Eagle_TRT.c **** uint8_t CTRL_REG6_XM = 0x25;
 103:Src/Eagle_TRT.c **** 
 104:Src/Eagle_TRT.c **** uint8_t SCL_M_2 = 0x00;
 105:Src/Eagle_TRT.c **** uint8_t SCL_M_4 = 0x20;
 106:Src/Eagle_TRT.c **** uint8_t SCL_M_8 = 0x40;
 107:Src/Eagle_TRT.c **** uint8_t SCL_M_12 = 0x60;
 108:Src/Eagle_TRT.c **** 
 109:Src/Eagle_TRT.c **** // OUTPUT REG
 110:Src/Eagle_TRT.c **** uint8_t OUT_X_L_G_ADD = 0xA8;
 111:Src/Eagle_TRT.c **** uint8_t OUT_X_H_G_ADD = 0xA9;
 112:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_G_ADD = 0xAA;
 113:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_G_ADD = 0xAB;
 114:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_G_ADD = 0xAC;
 115:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_G_ADD = 0xAD;
 116:Src/Eagle_TRT.c **** 
 117:Src/Eagle_TRT.c **** uint8_t OUT_X_L_A_ADD = 0xA8;
 118:Src/Eagle_TRT.c **** uint8_t OUT_X_H_A_ADD = 0xA9;
 119:Src/Eagle_TRT.c **** uint8_t OUT_Y_L_A_ADD = 0xAA;
 120:Src/Eagle_TRT.c **** uint8_t OUT_Y_H_A_ADD = 0xAB;
 121:Src/Eagle_TRT.c **** uint8_t OUT_Z_L_A_ADD = 0xAC;
 122:Src/Eagle_TRT.c **** uint8_t OUT_Z_H_A_ADD = 0xAD;
 123:Src/Eagle_TRT.c **** 
 124:Src/Eagle_TRT.c **** imu_stc accel;
 125:Src/Eagle_TRT.c **** imu_stc gyro;
 126:Src/Eagle_TRT.c **** can_stc can;
 127:Src/Eagle_TRT.c **** 
 128:Src/Eagle_TRT.c **** void send_config(imu_stc *imu, GPIO_TypeDef *pinx, uint16_t pinn, uint8_t *addr, uint8_t *val)
 129:Src/Eagle_TRT.c **** {
 130:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 131:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 132:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 133:Src/Eagle_TRT.c **** 	{
 134:Src/Eagle_TRT.c **** 	}										 //delay (must be >5ns)
 135:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, addr, 1, 10); ///Writing the address
 136:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 137:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 138:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 139:Src/Eagle_TRT.c **** 	{
 140:Src/Eagle_TRT.c **** 	}											 //delay (must be >5ns)
 141:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_SET); ///CS_InUse to 1
 142:Src/Eagle_TRT.c **** }
 143:Src/Eagle_TRT.c **** 
 144:Src/Eagle_TRT.c **** //accelerometer, gyroscope and magnetometer initialization
 145:Src/Eagle_TRT.c **** //call this function before requesting data from the sensor
 146:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
ARM GAS  /tmp/ccuwAQC3.s 			page 4


 147:Src/Eagle_TRT.c **** void LSMD9S0_accel_gyro_init(imu_stc *accel, imu_stc *gyro)
 148:Src/Eagle_TRT.c **** {
 149:Src/Eagle_TRT.c **** 
 150:Src/Eagle_TRT.c **** 	// Wake Up Gyro, enabling x, y, z axis
 151:Src/Eagle_TRT.c **** 	send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_G_ADD, (uint8_t *
 152:Src/Eagle_TRT.c **** 
 153:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 154:Src/Eagle_TRT.c **** 
 155:Src/Eagle_TRT.c **** 	// Wake Up Accel, enabling x, y, z axis
 156:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG1_XM_ADD, (uint8
 157:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 158:Src/Eagle_TRT.c **** 
 159:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG5_XM_ADD, (uint8
 160:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 161:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8
 162:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 163:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8
 164:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 165:Src/Eagle_TRT.c **** 
 166:Src/Eagle_TRT.c **** 	// Set Gyro scale range
 167:Src/Eagle_TRT.c **** 	switch (gyro->scale)
 168:Src/Eagle_TRT.c **** 	{
 169:Src/Eagle_TRT.c **** 	case 245:
 170:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 171:Src/Eagle_TRT.c **** 		break;
 172:Src/Eagle_TRT.c **** 	case 500:
 173:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 174:Src/Eagle_TRT.c **** 		break;
 175:Src/Eagle_TRT.c **** 	case 1000:
 176:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 177:Src/Eagle_TRT.c **** 		break;
 178:Src/Eagle_TRT.c **** 	case 2000:
 179:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 180:Src/Eagle_TRT.c **** 		break;
 181:Src/Eagle_TRT.c **** 	default:
 182:Src/Eagle_TRT.c **** 		send_config(gyro, gyro->GPIOx_InUse, gyro->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG4_G, (uint8_t *)&S
 183:Src/Eagle_TRT.c **** 		gyro->scale = 500;
 184:Src/Eagle_TRT.c **** 		break;
 185:Src/Eagle_TRT.c **** 	}
 186:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 187:Src/Eagle_TRT.c **** 
 188:Src/Eagle_TRT.c **** 	// Set Accel scale range
 189:Src/Eagle_TRT.c **** 	switch (accel->scale)
 190:Src/Eagle_TRT.c **** 	{
 191:Src/Eagle_TRT.c **** 	case 2:
 192:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 193:Src/Eagle_TRT.c **** 		break;
 194:Src/Eagle_TRT.c **** 	case 4:
 195:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 196:Src/Eagle_TRT.c **** 		break;
 197:Src/Eagle_TRT.c **** 	case 6:
 198:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 199:Src/Eagle_TRT.c **** 		break;
 200:Src/Eagle_TRT.c **** 	case 8:
 201:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 202:Src/Eagle_TRT.c **** 		break;
 203:Src/Eagle_TRT.c **** 	case 16:
ARM GAS  /tmp/ccuwAQC3.s 			page 5


 204:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 205:Src/Eagle_TRT.c **** 		break;
 206:Src/Eagle_TRT.c **** 	default:
 207:Src/Eagle_TRT.c **** 		send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG2_XM, (uint8_t 
 208:Src/Eagle_TRT.c **** 		accel->scale = 4;
 209:Src/Eagle_TRT.c **** 		break;
 210:Src/Eagle_TRT.c **** 	}
 211:Src/Eagle_TRT.c **** 
 212:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 213:Src/Eagle_TRT.c **** 
 214:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(&huart2, (uint8_t *)"<IMU> Initialization -> Done\r\n", strlen("<IMU> Initializa
 215:Src/Eagle_TRT.c **** }
 216:Src/Eagle_TRT.c **** 
 217:Src/Eagle_TRT.c **** float LSMD9S0_read(imu_stc *imu)
 218:Src/Eagle_TRT.c **** {
 219:Src/Eagle_TRT.c **** 
 220:Src/Eagle_TRT.c **** 	uint8_t OUT_L_VAL;
 221:Src/Eagle_TRT.c **** 	uint8_t OUT_H_VAL;
 222:Src/Eagle_TRT.c **** 
 223:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 224:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 225:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 226:Src/Eagle_TRT.c **** 	{
 227:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 228:Src/Eagle_TRT.c **** 
 229:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_L), 1, 10);		  ///Writing LOW address
 230:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 231:Src/Eagle_TRT.c **** 
 232:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 233:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 234:Src/Eagle_TRT.c **** 	{
 235:Src/Eagle_TRT.c **** 	}																		//delay (must be >5ns)
 236:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 237:Src/Eagle_TRT.c **** 
 238:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 239:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 80)
 240:Src/Eagle_TRT.c **** 	{
 241:Src/Eagle_TRT.c **** 	}																		  //delay (must be >5ns)
 242:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); ///CS_InUse to 0
 243:Src/Eagle_TRT.c **** 
 244:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, &(imu->REG_H), 1, 10);		  ///Writing HIGH address
 245:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 246:Src/Eagle_TRT.c **** 
 247:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 248:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 249:Src/Eagle_TRT.c **** 	{
 250:Src/Eagle_TRT.c **** 	} //delay (must be >5ns)
 251:Src/Eagle_TRT.c **** 
 252:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); ///CS_InUse to 1
 253:Src/Eagle_TRT.c **** 
 254:Src/Eagle_TRT.c **** 	///CALCULATING ROTATION
 255:Src/Eagle_TRT.c **** 	uint32_t value = (OUT_H_VAL << 8) | OUT_L_VAL; ///Calculating axis value shifting and using a logi
 256:Src/Eagle_TRT.c **** 	float axis = value;
 257:Src/Eagle_TRT.c **** 
 258:Src/Eagle_TRT.c **** 	return axis;
 259:Src/Eagle_TRT.c **** }
 260:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 6


 261:Src/Eagle_TRT.c **** int LSMD9S0_check(imu_stc *imu)
 262:Src/Eagle_TRT.c **** {
 263:Src/Eagle_TRT.c **** 
 264:Src/Eagle_TRT.c **** 	int check = 0;
 265:Src/Eagle_TRT.c **** 
 266:Src/Eagle_TRT.c **** 	///AXEL/MAGN ARE WORKING
 267:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); ///CS_XM to 0
 268:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 269:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 270:Src/Eagle_TRT.c **** 	{
 271:Src/Eagle_TRT.c **** 	}															 //delay (must be >5ns)
 272:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_XM, 1, 10); ///Writing on register ----> (uint8_t
 273:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_XM_VAL, 1, 10);
 274:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 275:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 276:Src/Eagle_TRT.c **** 	{
 277:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 278:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 279:Src/Eagle_TRT.c **** 
 280:Src/Eagle_TRT.c **** 	///GYRO IS WORKING
 281:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); ///CS_G to 0
 282:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 283:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 284:Src/Eagle_TRT.c **** 	{
 285:Src/Eagle_TRT.c **** 	}															//delay (must be >5ns)
 286:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, (uint8_t *)&WHO_AM_I_G, 1, 10); ///Writing on register ----> (uint8_t*
 287:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 288:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_G_VAL, 1, 10);
 289:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 290:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 291:Src/Eagle_TRT.c **** 	{
 292:Src/Eagle_TRT.c **** 	}													//delay (must be >5ns)
 293:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 294:Src/Eagle_TRT.c **** 
 295:Src/Eagle_TRT.c **** 	char txt[100];
 296:Src/Eagle_TRT.c **** 
 297:Src/Eagle_TRT.c **** 	sprintf(txt, "Gyro, Accel check: %d\t%d\r\n", WHO_AM_I_G_VAL, WHO_AM_I_XM_VAL);
 298:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 299:Src/Eagle_TRT.c **** 
 300:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 301:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 302:Src/Eagle_TRT.c **** 	{
 303:Src/Eagle_TRT.c **** 		check = 1;
 304:Src/Eagle_TRT.c **** 	}
 305:Src/Eagle_TRT.c **** 	else
 306:Src/Eagle_TRT.c **** 	{
 307:Src/Eagle_TRT.c **** 		check = 0;
 308:Src/Eagle_TRT.c **** 	}
 309:Src/Eagle_TRT.c **** 
 310:Src/Eagle_TRT.c **** 	return check;
 311:Src/Eagle_TRT.c **** }
 312:Src/Eagle_TRT.c **** 
 313:Src/Eagle_TRT.c **** // Request inital axis values, average them, set as initial offsets
 314:Src/Eagle_TRT.c **** void LSM9DS0_calibration(imu_stc *imu)
 315:Src/Eagle_TRT.c **** {
 316:Src/Eagle_TRT.c **** 	double x = 0, y = 0, z = 0;
 317:Src/Eagle_TRT.c **** 	int iterations = 200;
ARM GAS  /tmp/ccuwAQC3.s 			page 7


 318:Src/Eagle_TRT.c **** 	for (int i = 0; i < iterations; i++)
 319:Src/Eagle_TRT.c **** 	{
 320:Src/Eagle_TRT.c **** 		LSMD9S0_accel_read(imu);
 321:Src/Eagle_TRT.c **** 		//imu_elaborate_data(imu);
 322:Src/Eagle_TRT.c **** 		x += imu->x;
 323:Src/Eagle_TRT.c **** 		y += imu->y;
 324:Src/Eagle_TRT.c **** 		z += imu->z;
 325:Src/Eagle_TRT.c **** 		HAL_Delay(1);
 326:Src/Eagle_TRT.c **** 	}
 327:Src/Eagle_TRT.c **** 
 328:Src/Eagle_TRT.c **** 	imu->x_offset = x / iterations;
 329:Src/Eagle_TRT.c **** 	imu->y_offset = y / iterations;
 330:Src/Eagle_TRT.c **** 	imu->z_offset = z / iterations;
 331:Src/Eagle_TRT.c **** 
 332:Src/Eagle_TRT.c **** 	imu->calibration_done = 1;
 333:Src/Eagle_TRT.c **** }
 334:Src/Eagle_TRT.c **** 
 335:Src/Eagle_TRT.c **** //Reading G_axis values
 336:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 337:Src/Eagle_TRT.c **** //x = pointer gyroscope x variable
 338:Src/Eagle_TRT.c **** //y = pointer gyroscope y variable
 339:Src/Eagle_TRT.c **** //z = pointer gyroscope z variable
 340:Src/Eagle_TRT.c **** //x_offset = offset x value
 341:Src/Eagle_TRT.c **** //y_offset = offset y value
 342:Src/Eagle_TRT.c **** //z_offset = offset z value
 343:Src/Eagle_TRT.c **** void LSMD9S0_gyro_read(imu_stc *gyro)
 344:Src/Eagle_TRT.c **** {
 345:Src/Eagle_TRT.c **** 
 346:Src/Eagle_TRT.c **** 	gyro->REG_H = OUT_X_H_G_ADD;
 347:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_X_L_G_ADD;
 348:Src/Eagle_TRT.c **** 	gyro->x = LSMD9S0_read(gyro);
 349:Src/Eagle_TRT.c **** 
 350:Src/Eagle_TRT.c **** 	gyro->REG_H = OUT_Y_H_G_ADD;
 351:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Y_L_G_ADD;
 352:Src/Eagle_TRT.c **** 	gyro->y = LSMD9S0_read(gyro);
 353:Src/Eagle_TRT.c **** 
 354:Src/Eagle_TRT.c **** 	gyro->REG_H = OUT_Z_H_G_ADD;
 355:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Z_L_G_ADD;
 356:Src/Eagle_TRT.c **** 	gyro->z = LSMD9S0_read(gyro);
 357:Src/Eagle_TRT.c **** 
 358:Src/Eagle_TRT.c **** 	if (gyro->x > 32768)
 359:Src/Eagle_TRT.c **** 	{
 360:Src/Eagle_TRT.c **** 		gyro->x -= 65536;
 361:Src/Eagle_TRT.c **** 	}
 362:Src/Eagle_TRT.c **** 	if (gyro->y > 32768)
 363:Src/Eagle_TRT.c **** 	{
 364:Src/Eagle_TRT.c **** 		gyro->y -= 65536;
 365:Src/Eagle_TRT.c **** 	}
 366:Src/Eagle_TRT.c **** 	if (gyro->z > 32768)
 367:Src/Eagle_TRT.c **** 	{
 368:Src/Eagle_TRT.c **** 		gyro->z -= 65536;
 369:Src/Eagle_TRT.c **** 	}
 370:Src/Eagle_TRT.c **** 
 371:Src/Eagle_TRT.c **** 	gyro->x = gyro->x * ((float)gyro->scale / 32768);
 372:Src/Eagle_TRT.c **** 	gyro->y = gyro->y * ((float)gyro->scale / 32768);
 373:Src/Eagle_TRT.c **** 	gyro->z = gyro->z * ((float)gyro->scale / 32768);
 374:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 8


 375:Src/Eagle_TRT.c **** 	gyro->x -= gyro->x_offset;
 376:Src/Eagle_TRT.c **** 	gyro->y -= gyro->y_offset;
 377:Src/Eagle_TRT.c **** 	gyro->z -= gyro->z_offset;
 378:Src/Eagle_TRT.c **** 
 379:Src/Eagle_TRT.c **** 	///AXEL/GYRO STATUS
 380:Src/Eagle_TRT.c **** 	if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73))
 381:Src/Eagle_TRT.c **** 	{
 382:Src/Eagle_TRT.c **** 		gyro->error_flag = 0;
 383:Src/Eagle_TRT.c **** 	}
 384:Src/Eagle_TRT.c **** 	else
 385:Src/Eagle_TRT.c **** 	{
 386:Src/Eagle_TRT.c **** 		gyro->error_flag = 1;
 387:Src/Eagle_TRT.c **** 	}
 388:Src/Eagle_TRT.c **** }
 389:Src/Eagle_TRT.c **** 
 390:Src/Eagle_TRT.c **** // Elaborating data
 391:Src/Eagle_TRT.c **** // Use the setted scale to calculate data in the correct ranges
 392:Src/Eagle_TRT.c **** // Aveage an array to remove noise
 393:Src/Eagle_TRT.c **** // Remove inital offset
 394:Src/Eagle_TRT.c **** void imu_elaborate_data(imu_stc *imu)
 395:Src/Eagle_TRT.c **** {
 396:Src/Eagle_TRT.c **** 	if (imu->x > 32768)
 397:Src/Eagle_TRT.c **** 	{
 398:Src/Eagle_TRT.c **** 		imu->x -= 65536;
 399:Src/Eagle_TRT.c **** 	}
 400:Src/Eagle_TRT.c **** 	if (imu->y > 32768)
 401:Src/Eagle_TRT.c **** 	{
 402:Src/Eagle_TRT.c **** 		imu->y -= 65536;
 403:Src/Eagle_TRT.c **** 	}
 404:Src/Eagle_TRT.c **** 	if (imu->z > 32768)
 405:Src/Eagle_TRT.c **** 	{
 406:Src/Eagle_TRT.c **** 		imu->z -= 65536;
 407:Src/Eagle_TRT.c **** 	}
 408:Src/Eagle_TRT.c **** 
 409:Src/Eagle_TRT.c **** 	imu->x = imu->x * ((float)imu->scale / 32768);
 410:Src/Eagle_TRT.c **** 	imu->y = imu->y * ((float)imu->scale / 32768);
 411:Src/Eagle_TRT.c **** 	imu->z = imu->z * ((float)imu->scale / 32768);
 412:Src/Eagle_TRT.c **** 
 413:Src/Eagle_TRT.c **** 	shift_array(imu->x_array, 10, imu->x);
 414:Src/Eagle_TRT.c **** 	shift_array(imu->y_array, 10, imu->y);
 415:Src/Eagle_TRT.c **** 	shift_array(imu->z_array, 10, imu->z);
 416:Src/Eagle_TRT.c **** 
 417:Src/Eagle_TRT.c **** 	imu->x = dynamic_average(imu->x_array, 10);
 418:Src/Eagle_TRT.c **** 	imu->y = dynamic_average(imu->y_array, 10);
 419:Src/Eagle_TRT.c **** 	imu->z = dynamic_average(imu->z_array, 10);
 420:Src/Eagle_TRT.c **** 
 421:Src/Eagle_TRT.c **** 	imu->x -= imu->x_offset;
 422:Src/Eagle_TRT.c **** 	imu->y -= imu->y_offset;
 423:Src/Eagle_TRT.c **** 	imu->z -= imu->z_offset;
 424:Src/Eagle_TRT.c **** }
 425:Src/Eagle_TRT.c **** 
 426:Src/Eagle_TRT.c **** ///Reading A_axis values
 427:Src/Eagle_TRT.c **** //hspi = pointer to the spi port defined
 428:Src/Eagle_TRT.c **** //x = pointer gyroscope x variable
 429:Src/Eagle_TRT.c **** //y = pointer gyroscope y variable
 430:Src/Eagle_TRT.c **** //z = pointer gyroscope z variable
 431:Src/Eagle_TRT.c **** //x_offset = offset x value
ARM GAS  /tmp/ccuwAQC3.s 			page 9


 432:Src/Eagle_TRT.c **** //y_offset = offset y value
 433:Src/Eagle_TRT.c **** //z_offset = offset z value
 434:Src/Eagle_TRT.c **** void LSMD9S0_accel_read(imu_stc *accel)
 435:Src/Eagle_TRT.c **** {
 436:Src/Eagle_TRT.c **** 
 437:Src/Eagle_TRT.c **** 	accel->REG_H = OUT_X_H_A_ADD;
 438:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_X_L_A_ADD;
 439:Src/Eagle_TRT.c **** 	accel->x = LSMD9S0_read(accel);
 440:Src/Eagle_TRT.c **** 
 441:Src/Eagle_TRT.c **** 	accel->REG_H = OUT_Y_H_A_ADD;
 442:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Y_L_A_ADD;
 443:Src/Eagle_TRT.c **** 	accel->y = LSMD9S0_read(accel);
 444:Src/Eagle_TRT.c **** 
 445:Src/Eagle_TRT.c **** 	accel->REG_H = OUT_Z_H_A_ADD;
 446:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Z_L_A_ADD;
 447:Src/Eagle_TRT.c **** 	accel->z = LSMD9S0_read(accel);
 448:Src/Eagle_TRT.c **** 
 449:Src/Eagle_TRT.c **** 	if (accel->x > 32768)
 450:Src/Eagle_TRT.c **** 	{
 451:Src/Eagle_TRT.c **** 		accel->x -= 65536;
 452:Src/Eagle_TRT.c **** 	}
 453:Src/Eagle_TRT.c **** 	if (accel->y > 32768)
 454:Src/Eagle_TRT.c **** 	{
 455:Src/Eagle_TRT.c **** 		accel->y -= 65536;
 456:Src/Eagle_TRT.c **** 	}
 457:Src/Eagle_TRT.c **** 	if (accel->z > 32768)
 458:Src/Eagle_TRT.c **** 	{
 459:Src/Eagle_TRT.c **** 		accel->z -= 65536;
 460:Src/Eagle_TRT.c **** 	}
 461:Src/Eagle_TRT.c **** 
 462:Src/Eagle_TRT.c **** 	accel->x = accel->x * ((float)accel->scale / 32768);
 463:Src/Eagle_TRT.c **** 	accel->y = accel->y * ((float)accel->scale / 32768);
 464:Src/Eagle_TRT.c **** 	accel->z = accel->z * ((float)accel->scale / 32768);
 465:Src/Eagle_TRT.c **** 
 466:Src/Eagle_TRT.c **** 	accel->x -= accel->x_offset;
 467:Src/Eagle_TRT.c **** 	accel->y -= accel->y_offset;
 468:Src/Eagle_TRT.c **** 	accel->z -= accel->z_offset;
 469:Src/Eagle_TRT.c **** }
 470:Src/Eagle_TRT.c **** 
 471:Src/Eagle_TRT.c **** #endif
 472:Src/Eagle_TRT.c **** 
 473:Src/Eagle_TRT.c **** #ifdef HAL_CAN_MODULE_ENABLED
 474:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_can.h"
 475:Src/Eagle_TRT.c **** //function that sends an array via CAN
 476:Src/Eagle_TRT.c **** //hcan = pointer to can port
 477:Src/Eagle_TRT.c **** //id = id of the message to be sent
 478:Src/Eagle_TRT.c **** //dataTx = pointer to array that contains the data to be sent
 479:Src/Eagle_TRT.c **** //size = size of the array
 480:Src/Eagle_TRT.c **** can_stc can;
 481:Src/Eagle_TRT.c **** int CAN_Send(can_stc *can)
 482:Src/Eagle_TRT.c **** {
 483:Src/Eagle_TRT.c **** 
 484:Src/Eagle_TRT.c **** 	uint32_t mailbox;
 485:Src/Eagle_TRT.c **** 	uint8_t flag = 0;
 486:Src/Eagle_TRT.c **** 
 487:Src/Eagle_TRT.c **** 	CAN_TxHeaderTypeDef TxHeader;
 488:Src/Eagle_TRT.c **** 	TxHeader.StdId = can->id;
ARM GAS  /tmp/ccuwAQC3.s 			page 10


 489:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 490:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 491:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 492:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 493:Src/Eagle_TRT.c **** 
 494:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetTxMailboxesFreeLevel(can->hcan) != 0 && HAL_CAN_IsTxMessagePending(can->hcan, CAN_T
 495:Src/Eagle_TRT.c **** 	{
 496:Src/Eagle_TRT.c **** 		HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx, &mailbox);
 497:Src/Eagle_TRT.c **** 		flag = 1;
 498:Src/Eagle_TRT.c **** 	}
 499:Src/Eagle_TRT.c **** 
 500:Src/Eagle_TRT.c **** 	return flag;
 501:Src/Eagle_TRT.c **** }
 502:Src/Eagle_TRT.c **** 
 503:Src/Eagle_TRT.c **** //receive a buffer from the CAN communication
 504:Src/Eagle_TRT.c **** //you can call this function in the callback of the CAN interrupt
 505:Src/Eagle_TRT.c **** //hcan = pointer to can port
 506:Src/Eagle_TRT.c **** //DataRx = pointer to the buffer you are receiveng
 507:Src/Eagle_TRT.c **** //size = size of the buffer you are using
 508:Src/Eagle_TRT.c **** int CAN_Receive(can_stc *can)
 509:Src/Eagle_TRT.c **** {
 510:Src/Eagle_TRT.c **** 
 511:Src/Eagle_TRT.c **** 	CAN_RxHeaderTypeDef RxHeader;
 512:Src/Eagle_TRT.c **** 
 513:Src/Eagle_TRT.c **** 	if (HAL_CAN_GetRxFifoFillLevel(can->hcan, CAN_RX_FIFO0) != 0)
 514:Src/Eagle_TRT.c **** 	{
 515:Src/Eagle_TRT.c **** 		HAL_CAN_GetRxMessage(can->hcan, CAN_RX_FIFO0, &RxHeader, can->dataRx);
 516:Src/Eagle_TRT.c **** 	}
 517:Src/Eagle_TRT.c **** 
 518:Src/Eagle_TRT.c **** 	int id = RxHeader.StdId;
 519:Src/Eagle_TRT.c **** 
 520:Src/Eagle_TRT.c **** 	return id;
 521:Src/Eagle_TRT.c **** }
 522:Src/Eagle_TRT.c **** #endif
 523:Src/Eagle_TRT.c **** 
 524:Src/Eagle_TRT.c **** #ifdef HAL_UART_MODULE_ENABLED
 525:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_uart.h"
 526:Src/Eagle_TRT.c **** #include "malloc.h"
 527:Src/Eagle_TRT.c **** ///---- queue ---- ///
 528:Src/Eagle_TRT.c **** static int next(int ret, int dim)
 529:Src/Eagle_TRT.c **** {
  27              		.loc 1 529 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 530:Src/Eagle_TRT.c **** 
 531:Src/Eagle_TRT.c **** 	return (ret + 1) % dim;
  33              		.loc 1 531 0
  34 0000 0130     		adds	r0, r0, #1
  35              	.LVL1:
  36 0002 90FBF1F3 		sdiv	r3, r0, r1
 532:Src/Eagle_TRT.c **** }
  37              		.loc 1 532 0
  38 0006 01FB1300 		mls	r0, r1, r3, r0
  39              	.LVL2:
ARM GAS  /tmp/ccuwAQC3.s 			page 11


  40 000a 7047     		bx	lr
  41              		.cfi_endproc
  42              	.LFE141:
  44              		.section	.text.emptyp,"ax",%progbits
  45              		.align	1
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	emptyp:
  52              	.LFB143:
 533:Src/Eagle_TRT.c **** 
 534:Src/Eagle_TRT.c **** // Implementazione dinamica
 535:Src/Eagle_TRT.c **** void init(queue *q)
 536:Src/Eagle_TRT.c **** {
 537:Src/Eagle_TRT.c **** 
 538:Src/Eagle_TRT.c **** 	q->tail = q->head = 0;
 539:Src/Eagle_TRT.c **** 	q->dim = 40;
 540:Src/Eagle_TRT.c **** }
 541:Src/Eagle_TRT.c **** 
 542:Src/Eagle_TRT.c **** static int emptyp(const queue *q)
 543:Src/Eagle_TRT.c **** {
  53              		.loc 1 543 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  58              	.LVL3:
 544:Src/Eagle_TRT.c **** 
 545:Src/Eagle_TRT.c **** 	return (q->tail == q->head);
  59              		.loc 1 545 0
  60 0000 4268     		ldr	r2, [r0, #4]
  61 0002 0068     		ldr	r0, [r0]
  62              	.LVL4:
 546:Src/Eagle_TRT.c **** }
  63              		.loc 1 546 0
  64 0004 8242     		cmp	r2, r0
  65 0006 14BF     		ite	ne
  66 0008 0020     		movne	r0, #0
  67 000a 0120     		moveq	r0, #1
  68 000c 7047     		bx	lr
  69              		.cfi_endproc
  70              	.LFE143:
  72              		.section	.text.fullp,"ax",%progbits
  73              		.align	1
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	fullp:
  80              	.LFB144:
 547:Src/Eagle_TRT.c **** 
 548:Src/Eagle_TRT.c **** static int fullp(const queue *q)
 549:Src/Eagle_TRT.c **** {
  81              		.loc 1 549 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccuwAQC3.s 			page 12


  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85              	.LVL5:
  86 0000 10B5     		push	{r4, lr}
  87              	.LCFI0:
  88              		.cfi_def_cfa_offset 8
  89              		.cfi_offset 4, -8
  90              		.cfi_offset 14, -4
  91 0002 0446     		mov	r4, r0
 550:Src/Eagle_TRT.c **** 
 551:Src/Eagle_TRT.c **** 	return (next(q->tail, q->dim) == q->head);
  92              		.loc 1 551 0
  93 0004 8168     		ldr	r1, [r0, #8]
  94 0006 4068     		ldr	r0, [r0, #4]
  95              	.LVL6:
  96 0008 FFF7FEFF 		bl	next
  97              	.LVL7:
  98 000c 2368     		ldr	r3, [r4]
 552:Src/Eagle_TRT.c **** }
  99              		.loc 1 552 0
 100 000e 9842     		cmp	r0, r3
 101 0010 14BF     		ite	ne
 102 0012 0020     		movne	r0, #0
 103 0014 0120     		moveq	r0, #1
 104 0016 10BD     		pop	{r4, pc}
 105              		.cfi_endproc
 106              	.LFE144:
 108              		.section	.text.checksum,"ax",%progbits
 109              		.align	1
 110              		.syntax unified
 111              		.thumb
 112              		.thumb_func
 113              		.fpu fpv4-sp-d16
 115              	checksum:
 116              	.LFB151:
 553:Src/Eagle_TRT.c **** 
 554:Src/Eagle_TRT.c **** int push(char *str, queue *q)
 555:Src/Eagle_TRT.c **** {
 556:Src/Eagle_TRT.c **** 	int res;
 557:Src/Eagle_TRT.c **** 	if (fullp(q))
 558:Src/Eagle_TRT.c **** 	{
 559:Src/Eagle_TRT.c **** 		res = FAIL;
 560:Src/Eagle_TRT.c **** 	}
 561:Src/Eagle_TRT.c **** 	else
 562:Src/Eagle_TRT.c **** 	{
 563:Src/Eagle_TRT.c **** 		int length = strlen(str);
 564:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 565:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 566:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 567:Src/Eagle_TRT.c **** 		if (q->tail == 39)
 568:Src/Eagle_TRT.c **** 		{
 569:Src/Eagle_TRT.c **** 			q->tail = 0;
 570:Src/Eagle_TRT.c **** 		}
 571:Src/Eagle_TRT.c **** 		else
 572:Src/Eagle_TRT.c **** 		{
 573:Src/Eagle_TRT.c **** 			q->tail++;
 574:Src/Eagle_TRT.c **** 		}
 575:Src/Eagle_TRT.c **** 		res = OK;
ARM GAS  /tmp/ccuwAQC3.s 			page 13


 576:Src/Eagle_TRT.c **** 	}
 577:Src/Eagle_TRT.c **** 
 578:Src/Eagle_TRT.c **** 	return res;
 579:Src/Eagle_TRT.c **** }
 580:Src/Eagle_TRT.c **** 
 581:Src/Eagle_TRT.c **** int pop(char *str, queue *q)
 582:Src/Eagle_TRT.c **** {
 583:Src/Eagle_TRT.c **** 	int res;
 584:Src/Eagle_TRT.c **** 	if (emptyp(q))
 585:Src/Eagle_TRT.c **** 	{
 586:Src/Eagle_TRT.c **** 		res = FAIL;
 587:Src/Eagle_TRT.c **** 	}
 588:Src/Eagle_TRT.c **** 	else
 589:Src/Eagle_TRT.c **** 	{
 590:Src/Eagle_TRT.c **** 		strcpy(str, q->elem[q->head]);
 591:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 592:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 593:Src/Eagle_TRT.c **** 		if (q->head == 39)
 594:Src/Eagle_TRT.c **** 		{
 595:Src/Eagle_TRT.c **** 			q->head = 0;
 596:Src/Eagle_TRT.c **** 		}
 597:Src/Eagle_TRT.c **** 		else
 598:Src/Eagle_TRT.c **** 		{
 599:Src/Eagle_TRT.c **** 			q->head++;
 600:Src/Eagle_TRT.c **** 		}
 601:Src/Eagle_TRT.c **** 		res = OK;
 602:Src/Eagle_TRT.c **** 	}
 603:Src/Eagle_TRT.c **** 
 604:Src/Eagle_TRT.c **** 	return res;
 605:Src/Eagle_TRT.c **** }
 606:Src/Eagle_TRT.c **** /// ---- end queue ----///
 607:Src/Eagle_TRT.c **** queue print_q = {.head = 0, .tail = 0, .dim = 0};
 608:Src/Eagle_TRT.c **** 
 609:Src/Eagle_TRT.c **** int print(UART_HandleTypeDef *huart, char *text_print_function)
 610:Src/Eagle_TRT.c **** {
 611:Src/Eagle_TRT.c **** 
 612:Src/Eagle_TRT.c **** 	int ret = 0;
 613:Src/Eagle_TRT.c **** 
 614:Src/Eagle_TRT.c **** 	if (HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function)) == HA
 615:Src/Eagle_TRT.c **** 	{
 616:Src/Eagle_TRT.c **** 		ret = 1;
 617:Src/Eagle_TRT.c **** 	}
 618:Src/Eagle_TRT.c **** 	else
 619:Src/Eagle_TRT.c **** 	{
 620:Src/Eagle_TRT.c **** 		if (push(text_print_function, &print_q) == FAIL)
 621:Src/Eagle_TRT.c **** 		{
 622:Src/Eagle_TRT.c **** 			ret = 0;
 623:Src/Eagle_TRT.c **** 		}
 624:Src/Eagle_TRT.c **** 		else
 625:Src/Eagle_TRT.c **** 		{
 626:Src/Eagle_TRT.c **** 			ret = 1;
 627:Src/Eagle_TRT.c **** 		}
 628:Src/Eagle_TRT.c **** 	}
 629:Src/Eagle_TRT.c **** 
 630:Src/Eagle_TRT.c **** 	return ret;
 631:Src/Eagle_TRT.c **** }
 632:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 14


 633:Src/Eagle_TRT.c **** void print_it(UART_HandleTypeDef *huart)
 634:Src/Eagle_TRT.c **** { //put in the uart interrupt
 635:Src/Eagle_TRT.c **** 
 636:Src/Eagle_TRT.c **** 	char text_print_function[50];
 637:Src/Eagle_TRT.c **** 
 638:Src/Eagle_TRT.c **** 	if (pop(text_print_function, &print_q) == OK)
 639:Src/Eagle_TRT.c **** 	{
 640:Src/Eagle_TRT.c **** 		HAL_UART_Transmit_IT(huart, (uint8_t *)text_print_function, strlen(text_print_function));
 641:Src/Eagle_TRT.c **** 	}
 642:Src/Eagle_TRT.c **** }
 643:Src/Eagle_TRT.c **** 
 644:Src/Eagle_TRT.c **** UART_HandleTypeDef *huart_GPS;
 645:Src/Eagle_TRT.c **** int start_string_gps = 0;
 646:Src/Eagle_TRT.c **** char string_gps[100];
 647:Src/Eagle_TRT.c **** int cont_string, cont_comma;
 648:Src/Eagle_TRT.c **** char data_string_gps;
 649:Src/Eagle_TRT.c **** char buffer_gps[2];
 650:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum);
 651:Src/Eagle_TRT.c **** 
 652:Src/Eagle_TRT.c **** /* GPS library
 653:Src/Eagle_TRT.c **** 	gps_init() ->initialize the GPS. Put it in the main initialization. Example:
 654:Src/Eagle_TRT.c **** 	gps_struct gps_main; //define the name of gps_structure istance
 655:Src/Eagle_TRT.c **** 	if(gps_init(&huart3,&gps_main)==0){
 656:Src/Eagle_TRT.c **** 		/--error--/
 657:Src/Eagle_TRT.c **** 	}
 658:Src/Eagle_TRT.c **** 	gps_read_it() -> put it in interrupt. Example:
 659:Src/Eagle_TRT.c **** 	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 660:Src/Eagle_TRT.c **** 		gps_read_it(huart,&gps_main);
 661:Src/Eagle_TRT.c **** 	}*/
 662:Src/Eagle_TRT.c **** 
 663:Src/Eagle_TRT.c **** int gps_init(UART_HandleTypeDef *huart, gps_struct *gps)
 664:Src/Eagle_TRT.c **** { //initialization of GPS
 665:Src/Eagle_TRT.c **** 
 666:Src/Eagle_TRT.c **** 	//if return--> 0=error,1=ok
 667:Src/Eagle_TRT.c **** 	huart_GPS = huart;
 668:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 669:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 670:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 671:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 672:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 673:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 674:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 675:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 676:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 677:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 678:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 679:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 680:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 681:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 682:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 683:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 684:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 685:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 686:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 687:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 688:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 689:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
ARM GAS  /tmp/ccuwAQC3.s 			page 15


 690:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 691:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 692:Src/Eagle_TRT.c **** 
 693:Src/Eagle_TRT.c **** 	return 1;
 694:Src/Eagle_TRT.c **** }
 695:Src/Eagle_TRT.c **** 
 696:Src/Eagle_TRT.c **** int gps_read_it(UART_HandleTypeDef *huart, gps_struct *gps)
 697:Src/Eagle_TRT.c **** {
 698:Src/Eagle_TRT.c **** 
 699:Src/Eagle_TRT.c **** 	int ret = 0; //return--> 0=error,1=ok
 700:Src/Eagle_TRT.c **** 
 701:Src/Eagle_TRT.c **** 	/*
 702:Src/Eagle_TRT.c **** 			* Example of strings
 703:Src/Eagle_TRT.c **** 			* $GPGGA,064951.000,2307.1256,N,12016.4438,E,1,8,0.95,39.9,M,17.8,M,,*65
 704:Src/Eagle_TRT.c **** 			* $GPGSA,A,3,29,21,26,15,18,09,06,10,,,,,2.32,0.95,2.11*00
 705:Src/Eagle_TRT.c **** 			* $GPGSV,3,1,09,29,36,029,42,21,46,314,43,26,44,020,43,15,21,321,39*7D
 706:Src/Eagle_TRT.c **** 			  $GPGSV,3,2,09,18,26,314,40,09,57,170,44,06,20,229,37,10,26,084,37*77
 707:Src/Eagle_TRT.c **** 			  $GPGSV,3,3,09,07,,,26*73
 708:Src/Eagle_TRT.c **** 			* $GPRMC,064951.000,A,2307.1256,N,12016.4438,E,0.03,165.48,260406,3.05,W,A*2C
 709:Src/Eagle_TRT.c **** 			* $GPVTG,165.48,T,,M,0.03,N,0.06,K,A*37
 710:Src/Eagle_TRT.c **** 			* $PGTOP,11,3 *6F
 711:Src/Eagle_TRT.c **** 			*
 712:Src/Eagle_TRT.c **** 			*
 713:Src/Eagle_TRT.c **** 			*
 714:Src/Eagle_TRT.c **** 			* 	$GPBOD - Bearing, origin to destination
 715:Src/Eagle_TRT.c **** 				$GPBWC - Bearing and distance to waypoint, great circle
 716:Src/Eagle_TRT.c **** 				$GPGGA - Global Positioning System Fix Data
 717:Src/Eagle_TRT.c **** 				$GPGLL - Geographic position, latitude / longitude
 718:Src/Eagle_TRT.c **** 				$GPGSA - GPS DOP and active satellites
 719:Src/Eagle_TRT.c **** 				$GPGSV - GPS Satellites in view
 720:Src/Eagle_TRT.c **** 				$GPHDT - Heading, True
 721:Src/Eagle_TRT.c **** 				$GPR00 - List of waypoints in currently active route
 722:Src/Eagle_TRT.c **** 				$GPRMA - Recommended minimum specific Loran-C data
 723:Src/Eagle_TRT.c **** 				$GPRMB - Recommended minimum navigation info
 724:Src/Eagle_TRT.c **** 				$GPRMC - Recommended minimum specific GPS/Transit data
 725:Src/Eagle_TRT.c **** 				$GPRTE - Routes
 726:Src/Eagle_TRT.c **** 				$GPTRF - Transit Fix Data
 727:Src/Eagle_TRT.c **** 				$GPSTN - Multiple Data ID
 728:Src/Eagle_TRT.c **** 				$GPVBW - Dual Ground / Water Speed
 729:Src/Eagle_TRT.c **** 				$GPVTG - Track made good and ground speed
 730:Src/Eagle_TRT.c **** 				$GPWPL - Waypoint location
 731:Src/Eagle_TRT.c **** 				$GPXTE - Cross-track error, Measured
 732:Src/Eagle_TRT.c **** 				$GPZDA - Date & Time
 733:Src/Eagle_TRT.c **** 				http://aprs.gids.nl/nmea/
 734:Src/Eagle_TRT.c **** 			*/
 735:Src/Eagle_TRT.c **** 	if (huart == huart_GPS)
 736:Src/Eagle_TRT.c **** 	{
 737:Src/Eagle_TRT.c **** 		//check if it's the huart_gps interrupt
 738:Src/Eagle_TRT.c **** 		HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request interrupt for the next data
 739:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 740:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 741:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 742:Src/Eagle_TRT.c **** 			string_gps[cont_string] = data_string_gps; //save the data into the array
 743:Src/Eagle_TRT.c **** 			cont_string++;
 744:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 745:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 746:Src/Eagle_TRT.c **** 				cont_string--;
ARM GAS  /tmp/ccuwAQC3.s 			page 16


 747:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 748:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 749:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 750:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 751:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 752:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 753:Src/Eagle_TRT.c **** 						int cont_comma = 0, cont_latitude = 0, cont_longitude = 0, cont_altitude = 0, cont_time = 0;
 754:Src/Eagle_TRT.c **** 						for (int i = 5; i < 100; i++)
 755:Src/Eagle_TRT.c **** 						{
 756:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 757:Src/Eagle_TRT.c **** 								cont_comma++;
 758:Src/Eagle_TRT.c **** 							else
 759:Src/Eagle_TRT.c **** 							{
 760:Src/Eagle_TRT.c **** 								if (cont_comma == 1)
 761:Src/Eagle_TRT.c **** 								{ //save the time
 762:Src/Eagle_TRT.c **** 									gps->time[cont_time] = string_gps[i];
 763:Src/Eagle_TRT.c **** 									cont_time++;
 764:Src/Eagle_TRT.c **** 								}
 765:Src/Eagle_TRT.c **** 								else if (cont_comma == 2)
 766:Src/Eagle_TRT.c **** 								{ //save latitude
 767:Src/Eagle_TRT.c **** 									gps->latitude[cont_latitude] = string_gps[i];
 768:Src/Eagle_TRT.c **** 									cont_latitude++;
 769:Src/Eagle_TRT.c **** 								}
 770:Src/Eagle_TRT.c **** 								else if (cont_comma == 3)
 771:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 772:Src/Eagle_TRT.c **** 									gps->latitude_o[0] = string_gps[i];
 773:Src/Eagle_TRT.c **** 								}
 774:Src/Eagle_TRT.c **** 								else if (cont_comma == 4)
 775:Src/Eagle_TRT.c **** 								{ //save longitude
 776:Src/Eagle_TRT.c **** 									gps->longitude[cont_longitude] = string_gps[i];
 777:Src/Eagle_TRT.c **** 									cont_longitude++;
 778:Src/Eagle_TRT.c **** 								}
 779:Src/Eagle_TRT.c **** 								else if (cont_comma == 5)
 780:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 781:Src/Eagle_TRT.c **** 									gps->longitude_o[0] = string_gps[i];
 782:Src/Eagle_TRT.c **** 								}
 783:Src/Eagle_TRT.c **** 								else if (cont_comma == 6)
 784:Src/Eagle_TRT.c **** 								{
 785:Src/Eagle_TRT.c **** 									gps->fix_status = string_gps[i];
 786:Src/Eagle_TRT.c **** 								}
 787:Src/Eagle_TRT.c **** 								else if (cont_comma == 9)
 788:Src/Eagle_TRT.c **** 								{ //save altitude
 789:Src/Eagle_TRT.c **** 									gps->altitude[cont_altitude] = string_gps[i];
 790:Src/Eagle_TRT.c **** 									cont_altitude++;
 791:Src/Eagle_TRT.c **** 								}
 792:Src/Eagle_TRT.c **** 								else if (cont_comma == 10)
 793:Src/Eagle_TRT.c **** 								{
 794:Src/Eagle_TRT.c **** 									i = 100; //end the cicle
 795:Src/Eagle_TRT.c **** 								}
 796:Src/Eagle_TRT.c **** 							}
 797:Src/Eagle_TRT.c **** 						}
 798:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 799:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 800:Src/Eagle_TRT.c **** 						{
 801:Src/Eagle_TRT.c **** 							gps->latitude_i_h = 0;
 802:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 803:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
ARM GAS  /tmp/ccuwAQC3.s 			page 17


 804:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 805:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 806:Src/Eagle_TRT.c **** 						}
 807:Src/Eagle_TRT.c **** 						else
 808:Src/Eagle_TRT.c **** 						{
 809:Src/Eagle_TRT.c **** 							gps->latitude_i = (long int)(atof(gps->latitude) * 10000);
 810:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 811:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 812:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 813:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 814:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 815:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 816:Src/Eagle_TRT.c **** 						}
 817:Src/Eagle_TRT.c **** 
 818:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x08;
 819:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 820:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 821:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 822:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 823:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 824:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 825:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 826:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 827:Src/Eagle_TRT.c **** 						can.size = 8;
 828:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 829:Src/Eagle_TRT.c **** 					}
 830:Src/Eagle_TRT.c **** 					else
 831:Src/Eagle_TRT.c **** 					{
 832:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 833:Src/Eagle_TRT.c **** 					}
 834:Src/Eagle_TRT.c **** 				}
 835:Src/Eagle_TRT.c **** 				else if (string_gps[2] == 'V' && string_gps[3] == 'T' && string_gps[4] == 'G')
 836:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 837:Src/Eagle_TRT.c **** 					if (checksum(string_gps, cont_string) == 1)
 838:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 839:Src/Eagle_TRT.c **** 						cont_comma = 0;
 840:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 841:Src/Eagle_TRT.c **** 						for (int i = 5; i < cont_string; i++)
 842:Src/Eagle_TRT.c **** 						{
 843:Src/Eagle_TRT.c **** 							if (string_gps[i] == ',')
 844:Src/Eagle_TRT.c **** 								cont_comma++;
 845:Src/Eagle_TRT.c **** 							else
 846:Src/Eagle_TRT.c **** 							{
 847:Src/Eagle_TRT.c **** 								if (cont_comma == 7)
 848:Src/Eagle_TRT.c **** 								{ //save the speed
 849:Src/Eagle_TRT.c **** 									gps->speed[cont_speed] = string_gps[i];
 850:Src/Eagle_TRT.c **** 									cont_speed++;
 851:Src/Eagle_TRT.c **** 								}
 852:Src/Eagle_TRT.c **** 								else if (cont_comma == 8)
 853:Src/Eagle_TRT.c **** 								{
 854:Src/Eagle_TRT.c **** 									i = cont_string;
 855:Src/Eagle_TRT.c **** 								}
 856:Src/Eagle_TRT.c **** 							}
 857:Src/Eagle_TRT.c **** 						}
 858:Src/Eagle_TRT.c **** 						//-- operation to split data and send them --//
 859:Src/Eagle_TRT.c **** 						if (gps->fix_status == '0')
 860:Src/Eagle_TRT.c **** 						{
ARM GAS  /tmp/ccuwAQC3.s 			page 18


 861:Src/Eagle_TRT.c **** 							gps->speed_i = 0;
 862:Src/Eagle_TRT.c **** 						}
 863:Src/Eagle_TRT.c **** 						else
 864:Src/Eagle_TRT.c **** 						{
 865:Src/Eagle_TRT.c **** 							gps->speed_i = (int)(atof(gps->speed) * 100);
 866:Src/Eagle_TRT.c **** 						}
 867:Src/Eagle_TRT.c **** 						can.dataTx[0] = 0x07;
 868:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 869:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 870:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 871:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 872:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 873:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 874:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 875:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 876:Src/Eagle_TRT.c **** 						can.size = 8;
 877:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 878:Src/Eagle_TRT.c **** 						ret = 1;
 879:Src/Eagle_TRT.c **** 					}
 880:Src/Eagle_TRT.c **** 					else
 881:Src/Eagle_TRT.c **** 					{
 882:Src/Eagle_TRT.c **** 						ret = 0; //checksum failed
 883:Src/Eagle_TRT.c **** 					}
 884:Src/Eagle_TRT.c **** 				}
 885:Src/Eagle_TRT.c **** 			}
 886:Src/Eagle_TRT.c **** 		}
 887:Src/Eagle_TRT.c **** 		else
 888:Src/Eagle_TRT.c **** 		{
 889:Src/Eagle_TRT.c **** 			if (data_string_gps == '$')
 890:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 891:Src/Eagle_TRT.c **** 				start_string_gps = 1; //new string started
 892:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 893:Src/Eagle_TRT.c **** 			}
 894:Src/Eagle_TRT.c **** 		}
 895:Src/Eagle_TRT.c **** 	}
 896:Src/Eagle_TRT.c **** 	return ret;
 897:Src/Eagle_TRT.c **** }
 898:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
 899:Src/Eagle_TRT.c **** { //check the checksum
 117              		.loc 1 899 0
 118              		.cfi_startproc
 119              		@ args = 0, pretend = 0, frame = 8
 120              		@ frame_needed = 0, uses_anonymous_args = 0
 121              	.LVL8:
 122 0000 70B5     		push	{r4, r5, r6, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 16
 125              		.cfi_offset 4, -16
 126              		.cfi_offset 5, -12
 127              		.cfi_offset 6, -8
 128              		.cfi_offset 14, -4
 129 0002 82B0     		sub	sp, sp, #8
 130              	.LCFI2:
 131              		.cfi_def_cfa_offset 24
 132              	.LVL9:
 900:Src/Eagle_TRT.c **** 	//return 1;
 901:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 19


 902:Src/Eagle_TRT.c **** 	int res = 0;
 903:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 904:Src/Eagle_TRT.c **** 	int i = 0;
 905:Src/Eagle_TRT.c **** 
 906:Src/Eagle_TRT.c **** 	for (i = 0; (i < size_string_checksum) && (string_checksum[i] != '*'); i++)
 133              		.loc 1 906 0
 134 0004 0023     		movs	r3, #0
 902:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 135              		.loc 1 902 0
 136 0006 1C46     		mov	r4, r3
 137              	.LVL10:
 138              	.L6:
 139              		.loc 1 906 0 discriminator 1
 140 0008 8B42     		cmp	r3, r1
 141 000a 02DA     		bge	.L7
 142              		.loc 1 906 0 is_stmt 0 discriminator 3
 143 000c C25C     		ldrb	r2, [r0, r3]	@ zero_extendqisi2
 144 000e 2A2A     		cmp	r2, #42
 145 0010 1ED1     		bne	.L8
 146              	.L7:
 907:Src/Eagle_TRT.c **** 	{
 908:Src/Eagle_TRT.c **** 		res = res ^ string_checksum[i];
 909:Src/Eagle_TRT.c **** 	}
 910:Src/Eagle_TRT.c **** 	char check[2] = {string_checksum[i + 1], string_checksum[i + 2]};
 147              		.loc 1 910 0 is_stmt 1
 148 0012 1844     		add	r0, r0, r3
 149              	.LVL11:
 150 0014 4578     		ldrb	r5, [r0, #1]	@ zero_extendqisi2
 151 0016 8678     		ldrb	r6, [r0, #2]	@ zero_extendqisi2
 911:Src/Eagle_TRT.c **** 	char res_char[3];
 912:Src/Eagle_TRT.c **** 	sprintf(res_char, "%x", res);
 152              		.loc 1 912 0
 153 0018 2246     		mov	r2, r4
 154 001a 1949     		ldr	r1, .L17
 155              	.LVL12:
 156 001c 01A8     		add	r0, sp, #4
 157 001e FFF7FEFF 		bl	sprintf
 158              	.LVL13:
 913:Src/Eagle_TRT.c **** 	if (res < 17)
 159              		.loc 1 913 0
 160 0022 102C     		cmp	r4, #16
 161 0024 06DC     		bgt	.L9
 914:Src/Eagle_TRT.c **** 	{
 915:Src/Eagle_TRT.c **** 		res_char[1] = res_char[0];
 162              		.loc 1 915 0
 163 0026 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 164 002a 8DF80530 		strb	r3, [sp, #5]
 916:Src/Eagle_TRT.c **** 		res_char[0] = '0';
 165              		.loc 1 916 0
 166 002e 3023     		movs	r3, #48
 167 0030 8DF80430 		strb	r3, [sp, #4]
 168              	.L9:
 902:Src/Eagle_TRT.c **** 	int offset_maiusc = (int)('A') - (int)('a');
 169              		.loc 1 902 0 discriminator 1
 170 0034 0023     		movs	r3, #0
 171              	.L10:
 172              	.LVL14:
ARM GAS  /tmp/ccuwAQC3.s 			page 20


 173              	.LBB2:
 917:Src/Eagle_TRT.c **** 	}
 918:Src/Eagle_TRT.c **** 	for (int j = 0; j < 2; j++)
 174              		.loc 1 918 0 discriminator 1
 175 0036 012B     		cmp	r3, #1
 176 0038 0DDD     		ble	.L12
 177              	.LBE2:
 919:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 920:Src/Eagle_TRT.c **** 		if ((int)res_char[j] >= 'a' && (int)res_char[j] <= 'f')
 921:Src/Eagle_TRT.c **** 		{
 922:Src/Eagle_TRT.c **** 			res_char[j] = (char)((int)res_char[j] + offset_maiusc);
 923:Src/Eagle_TRT.c **** 		}
 924:Src/Eagle_TRT.c **** 	}
 925:Src/Eagle_TRT.c **** 	if (res_char[0] == check[0] && res_char[1] == check[1])
 178              		.loc 1 925 0
 179 003a 9DF80430 		ldrb	r3, [sp, #4]	@ zero_extendqisi2
 180              	.LVL15:
 181 003e 9D42     		cmp	r5, r3
 182 0040 19D1     		bne	.L14
 183              		.loc 1 925 0 is_stmt 0 discriminator 1
 184 0042 9DF80530 		ldrb	r3, [sp, #5]	@ zero_extendqisi2
 185 0046 9E42     		cmp	r6, r3
 186 0048 17D0     		beq	.L15
 926:Src/Eagle_TRT.c **** 	{
 927:Src/Eagle_TRT.c **** 		return 1; //checksum is correct
 928:Src/Eagle_TRT.c **** 	}
 929:Src/Eagle_TRT.c **** 	else
 930:Src/Eagle_TRT.c **** 	{
 931:Src/Eagle_TRT.c **** 		return 0; //checksum failed
 187              		.loc 1 931 0 is_stmt 1
 188 004a 0020     		movs	r0, #0
 189              	.L5:
 932:Src/Eagle_TRT.c **** 	}
 933:Src/Eagle_TRT.c **** }
 190              		.loc 1 933 0
 191 004c 02B0     		add	sp, sp, #8
 192              	.LCFI3:
 193              		.cfi_remember_state
 194              		.cfi_def_cfa_offset 16
 195              		@ sp needed
 196 004e 70BD     		pop	{r4, r5, r6, pc}
 197              	.LVL16:
 198              	.L8:
 199              	.LCFI4:
 200              		.cfi_restore_state
 908:Src/Eagle_TRT.c **** 	}
 201              		.loc 1 908 0 discriminator 4
 202 0050 5440     		eors	r4, r4, r2
 203              	.LVL17:
 906:Src/Eagle_TRT.c **** 	{
 204              		.loc 1 906 0 discriminator 4
 205 0052 0133     		adds	r3, r3, #1
 206              	.LVL18:
 207 0054 D8E7     		b	.L6
 208              	.LVL19:
 209              	.L12:
 210              	.LBB3:
ARM GAS  /tmp/ccuwAQC3.s 			page 21


 920:Src/Eagle_TRT.c **** 		{
 211              		.loc 1 920 0
 212 0056 02AA     		add	r2, sp, #8
 213 0058 1A44     		add	r2, r2, r3
 214 005a 12F8042C 		ldrb	r2, [r2, #-4]	@ zero_extendqisi2
 215 005e A2F16101 		sub	r1, r2, #97
 216 0062 C9B2     		uxtb	r1, r1
 217 0064 0529     		cmp	r1, #5
 218 0066 04D8     		bhi	.L11
 922:Src/Eagle_TRT.c **** 		}
 219              		.loc 1 922 0
 220 0068 203A     		subs	r2, r2, #32
 221 006a 02A9     		add	r1, sp, #8
 222 006c 1944     		add	r1, r1, r3
 223 006e 01F8042C 		strb	r2, [r1, #-4]
 224              	.L11:
 918:Src/Eagle_TRT.c **** 	{ //convert to upper case letter
 225              		.loc 1 918 0 discriminator 2
 226 0072 0133     		adds	r3, r3, #1
 227              	.LVL20:
 228 0074 DFE7     		b	.L10
 229              	.LVL21:
 230              	.L14:
 231              	.LBE3:
 931:Src/Eagle_TRT.c **** 	}
 232              		.loc 1 931 0
 233 0076 0020     		movs	r0, #0
 234 0078 E8E7     		b	.L5
 235              	.L15:
 927:Src/Eagle_TRT.c **** 	}
 236              		.loc 1 927 0
 237 007a 0120     		movs	r0, #1
 238 007c E6E7     		b	.L5
 239              	.L18:
 240 007e 00BF     		.align	2
 241              	.L17:
 242 0080 00000000 		.word	.LC0
 243              		.cfi_endproc
 244              	.LFE151:
 246              		.section	.text.send_config,"ax",%progbits
 247              		.align	1
 248              		.global	send_config
 249              		.syntax unified
 250              		.thumb
 251              		.thumb_func
 252              		.fpu fpv4-sp-d16
 254              	send_config:
 255              	.LFB131:
 129:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); ///CS_InUse to 0
 256              		.loc 1 129 0
 257              		.cfi_startproc
 258              		@ args = 4, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL22:
 261 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 262              	.LCFI5:
 263              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccuwAQC3.s 			page 22


 264              		.cfi_offset 3, -24
 265              		.cfi_offset 4, -20
 266              		.cfi_offset 5, -16
 267              		.cfi_offset 6, -12
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 0646     		mov	r6, r0
 271 0004 0C46     		mov	r4, r1
 272 0006 1546     		mov	r5, r2
 273 0008 1F46     		mov	r7, r3
 130:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;					   //set counter to 0
 274              		.loc 1 130 0
 275 000a 0022     		movs	r2, #0
 276              	.LVL23:
 277 000c 2946     		mov	r1, r5
 278              	.LVL24:
 279 000e 2046     		mov	r0, r4
 280              	.LVL25:
 281 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 282              	.LVL26:
 131:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 283              		.loc 1 131 0
 284 0014 104B     		ldr	r3, .L23
 285 0016 1A68     		ldr	r2, [r3]
 286 0018 0023     		movs	r3, #0
 287 001a 5362     		str	r3, [r2, #36]
 288              	.L20:
 132:Src/Eagle_TRT.c **** 	{
 289              		.loc 1 132 0 discriminator 1
 290 001c 536A     		ldr	r3, [r2, #36]
 291 001e 142B     		cmp	r3, #20
 292 0020 FCD9     		bls	.L20
 135:Src/Eagle_TRT.c **** 	HAL_SPI_Transmit(imu->hspi, val, 1, 10);  ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 293              		.loc 1 135 0
 294 0022 0A23     		movs	r3, #10
 295 0024 0122     		movs	r2, #1
 296 0026 3946     		mov	r1, r7
 297 0028 D6F83002 		ldr	r0, [r6, #560]
 298 002c FFF7FEFF 		bl	HAL_SPI_Transmit
 299              	.LVL27:
 136:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;				 //set counter to 0
 300              		.loc 1 136 0
 301 0030 0A23     		movs	r3, #10
 302 0032 0122     		movs	r2, #1
 303 0034 0699     		ldr	r1, [sp, #24]
 304 0036 D6F83002 		ldr	r0, [r6, #560]
 305 003a FFF7FEFF 		bl	HAL_SPI_Transmit
 306              	.LVL28:
 137:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 307              		.loc 1 137 0
 308 003e 064B     		ldr	r3, .L23
 309 0040 1A68     		ldr	r2, [r3]
 310 0042 0023     		movs	r3, #0
 311 0044 5362     		str	r3, [r2, #36]
 312              	.L21:
 138:Src/Eagle_TRT.c **** 	{
 313              		.loc 1 138 0 discriminator 1
ARM GAS  /tmp/ccuwAQC3.s 			page 23


 314 0046 536A     		ldr	r3, [r2, #36]
 315 0048 142B     		cmp	r3, #20
 316 004a FCD9     		bls	.L21
 141:Src/Eagle_TRT.c **** }
 317              		.loc 1 141 0
 318 004c 0122     		movs	r2, #1
 319 004e 2946     		mov	r1, r5
 320 0050 2046     		mov	r0, r4
 321 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 322              	.LVL29:
 323 0056 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 324              	.LVL30:
 325              	.L24:
 326              		.align	2
 327              	.L23:
 328 0058 00000000 		.word	htim2
 329              		.cfi_endproc
 330              	.LFE131:
 332              		.section	.text.LSMD9S0_accel_gyro_init,"ax",%progbits
 333              		.align	1
 334              		.global	LSMD9S0_accel_gyro_init
 335              		.syntax unified
 336              		.thumb
 337              		.thumb_func
 338              		.fpu fpv4-sp-d16
 340              	LSMD9S0_accel_gyro_init:
 341              	.LFB132:
 148:Src/Eagle_TRT.c **** 
 342              		.loc 1 148 0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              	.LVL31:
 347 0000 30B5     		push	{r4, r5, lr}
 348              	.LCFI6:
 349              		.cfi_def_cfa_offset 12
 350              		.cfi_offset 4, -12
 351              		.cfi_offset 5, -8
 352              		.cfi_offset 14, -4
 353 0002 83B0     		sub	sp, sp, #12
 354              	.LCFI7:
 355              		.cfi_def_cfa_offset 24
 356 0004 0446     		mov	r4, r0
 357 0006 0D46     		mov	r5, r1
 151:Src/Eagle_TRT.c **** 
 358              		.loc 1 151 0
 359 0008 B1F82422 		ldrh	r2, [r1, #548]
 360 000c 734B     		ldr	r3, .L43
 361 000e 0093     		str	r3, [sp]
 362 0010 734B     		ldr	r3, .L43+4
 363 0012 D1F82012 		ldr	r1, [r1, #544]
 364              	.LVL32:
 365 0016 2846     		mov	r0, r5
 366              	.LVL33:
 367 0018 FFF7FEFF 		bl	send_config
 368              	.LVL34:
 153:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 24


 369              		.loc 1 153 0
 370 001c 0120     		movs	r0, #1
 371 001e FFF7FEFF 		bl	HAL_Delay
 372              	.LVL35:
 156:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 373              		.loc 1 156 0
 374 0022 B4F82422 		ldrh	r2, [r4, #548]
 375 0026 6F4B     		ldr	r3, .L43+8
 376 0028 0093     		str	r3, [sp]
 377 002a 6F4B     		ldr	r3, .L43+12
 378 002c D4F82012 		ldr	r1, [r4, #544]
 379 0030 2046     		mov	r0, r4
 380 0032 FFF7FEFF 		bl	send_config
 381              	.LVL36:
 157:Src/Eagle_TRT.c **** 
 382              		.loc 1 157 0
 383 0036 0120     		movs	r0, #1
 384 0038 FFF7FEFF 		bl	HAL_Delay
 385              	.LVL37:
 159:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 386              		.loc 1 159 0
 387 003c B4F82422 		ldrh	r2, [r4, #548]
 388 0040 6A4B     		ldr	r3, .L43+16
 389 0042 0093     		str	r3, [sp]
 390 0044 6A4B     		ldr	r3, .L43+20
 391 0046 D4F82012 		ldr	r1, [r4, #544]
 392 004a 2046     		mov	r0, r4
 393 004c FFF7FEFF 		bl	send_config
 394              	.LVL38:
 160:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG6_XM_ADD, (uint8
 395              		.loc 1 160 0
 396 0050 0120     		movs	r0, #1
 397 0052 FFF7FEFF 		bl	HAL_Delay
 398              	.LVL39:
 161:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 399              		.loc 1 161 0
 400 0056 B4F82422 		ldrh	r2, [r4, #548]
 401 005a 664B     		ldr	r3, .L43+24
 402 005c 0093     		str	r3, [sp]
 403 005e 664B     		ldr	r3, .L43+28
 404 0060 D4F82012 		ldr	r1, [r4, #544]
 405 0064 2046     		mov	r0, r4
 406 0066 FFF7FEFF 		bl	send_config
 407              	.LVL40:
 162:Src/Eagle_TRT.c **** 	send_config(accel, accel->GPIOx_InUse, accel->GPIO_Pin_InUse, (uint8_t *)&CTRL_REG7_XM_ADD, (uint8
 408              		.loc 1 162 0
 409 006a 0120     		movs	r0, #1
 410 006c FFF7FEFF 		bl	HAL_Delay
 411              	.LVL41:
 163:Src/Eagle_TRT.c **** 	HAL_Delay(1);
 412              		.loc 1 163 0
 413 0070 B4F82422 		ldrh	r2, [r4, #548]
 414 0074 614B     		ldr	r3, .L43+32
 415 0076 0093     		str	r3, [sp]
 416 0078 614B     		ldr	r3, .L43+36
 417 007a D4F82012 		ldr	r1, [r4, #544]
 418 007e 2046     		mov	r0, r4
ARM GAS  /tmp/ccuwAQC3.s 			page 25


 419 0080 FFF7FEFF 		bl	send_config
 420              	.LVL42:
 164:Src/Eagle_TRT.c **** 
 421              		.loc 1 164 0
 422 0084 0120     		movs	r0, #1
 423 0086 FFF7FEFF 		bl	HAL_Delay
 424              	.LVL43:
 167:Src/Eagle_TRT.c **** 	{
 425              		.loc 1 167 0
 426 008a D5F81832 		ldr	r3, [r5, #536]
 427 008e B3F5FA7F 		cmp	r3, #500
 428 0092 2FD0     		beq	.L27
 429 0094 10DD     		ble	.L42
 430 0096 B3F57A7F 		cmp	r3, #1000
 431 009a 36D0     		beq	.L30
 432 009c B3F5FA6F 		cmp	r3, #2000
 433 00a0 3ED1     		bne	.L26
 179:Src/Eagle_TRT.c **** 		break;
 434              		.loc 1 179 0
 435 00a2 B5F82422 		ldrh	r2, [r5, #548]
 436 00a6 574B     		ldr	r3, .L43+40
 437 00a8 0093     		str	r3, [sp]
 438 00aa 574B     		ldr	r3, .L43+44
 439 00ac D5F82012 		ldr	r1, [r5, #544]
 440 00b0 2846     		mov	r0, r5
 441 00b2 FFF7FEFF 		bl	send_config
 442              	.LVL44:
 180:Src/Eagle_TRT.c **** 	default:
 443              		.loc 1 180 0
 444 00b6 0BE0     		b	.L32
 445              	.L42:
 167:Src/Eagle_TRT.c **** 	{
 446              		.loc 1 167 0
 447 00b8 F52B     		cmp	r3, #245
 448 00ba 31D1     		bne	.L26
 170:Src/Eagle_TRT.c **** 		break;
 449              		.loc 1 170 0
 450 00bc B5F82422 		ldrh	r2, [r5, #548]
 451 00c0 524B     		ldr	r3, .L43+48
 452 00c2 0093     		str	r3, [sp]
 453 00c4 504B     		ldr	r3, .L43+44
 454 00c6 D5F82012 		ldr	r1, [r5, #544]
 455 00ca 2846     		mov	r0, r5
 456 00cc FFF7FEFF 		bl	send_config
 457              	.LVL45:
 458              	.L32:
 186:Src/Eagle_TRT.c **** 
 459              		.loc 1 186 0
 460 00d0 0120     		movs	r0, #1
 461 00d2 FFF7FEFF 		bl	HAL_Delay
 462              	.LVL46:
 189:Src/Eagle_TRT.c **** 	{
 463              		.loc 1 189 0
 464 00d6 D4F81832 		ldr	r3, [r4, #536]
 465 00da 023B     		subs	r3, r3, #2
 466 00dc 0E2B     		cmp	r3, #14
 467 00de 6FD8     		bhi	.L33
ARM GAS  /tmp/ccuwAQC3.s 			page 26


 468 00e0 DFE803F0 		tbb	[pc, r3]
 469              	.L35:
 470 00e4 2D       		.byte	(.L34-.L35)/2
 471 00e5 6E       		.byte	(.L33-.L35)/2
 472 00e6 42       		.byte	(.L36-.L35)/2
 473 00e7 6E       		.byte	(.L33-.L35)/2
 474 00e8 4D       		.byte	(.L37-.L35)/2
 475 00e9 6E       		.byte	(.L33-.L35)/2
 476 00ea 58       		.byte	(.L38-.L35)/2
 477 00eb 6E       		.byte	(.L33-.L35)/2
 478 00ec 6E       		.byte	(.L33-.L35)/2
 479 00ed 6E       		.byte	(.L33-.L35)/2
 480 00ee 6E       		.byte	(.L33-.L35)/2
 481 00ef 6E       		.byte	(.L33-.L35)/2
 482 00f0 6E       		.byte	(.L33-.L35)/2
 483 00f1 6E       		.byte	(.L33-.L35)/2
 484 00f2 63       		.byte	(.L39-.L35)/2
 485 00f3 00       		.p2align 1
 486              	.L27:
 173:Src/Eagle_TRT.c **** 		break;
 487              		.loc 1 173 0
 488 00f4 B5F82422 		ldrh	r2, [r5, #548]
 489 00f8 454B     		ldr	r3, .L43+52
 490 00fa 0093     		str	r3, [sp]
 491 00fc 424B     		ldr	r3, .L43+44
 492 00fe D5F82012 		ldr	r1, [r5, #544]
 493 0102 2846     		mov	r0, r5
 494 0104 FFF7FEFF 		bl	send_config
 495              	.LVL47:
 174:Src/Eagle_TRT.c **** 	case 1000:
 496              		.loc 1 174 0
 497 0108 E2E7     		b	.L32
 498              	.L30:
 176:Src/Eagle_TRT.c **** 		break;
 499              		.loc 1 176 0
 500 010a B5F82422 		ldrh	r2, [r5, #548]
 501 010e 414B     		ldr	r3, .L43+56
 502 0110 0093     		str	r3, [sp]
 503 0112 3D4B     		ldr	r3, .L43+44
 504 0114 D5F82012 		ldr	r1, [r5, #544]
 505 0118 2846     		mov	r0, r5
 506 011a FFF7FEFF 		bl	send_config
 507              	.LVL48:
 177:Src/Eagle_TRT.c **** 	case 2000:
 508              		.loc 1 177 0
 509 011e D7E7     		b	.L32
 510              	.L26:
 182:Src/Eagle_TRT.c **** 		gyro->scale = 500;
 511              		.loc 1 182 0
 512 0120 B5F82422 		ldrh	r2, [r5, #548]
 513 0124 394B     		ldr	r3, .L43+48
 514 0126 0093     		str	r3, [sp]
 515 0128 374B     		ldr	r3, .L43+44
 516 012a D5F82012 		ldr	r1, [r5, #544]
 517 012e 2846     		mov	r0, r5
 518 0130 FFF7FEFF 		bl	send_config
 519              	.LVL49:
ARM GAS  /tmp/ccuwAQC3.s 			page 27


 183:Src/Eagle_TRT.c **** 		break;
 520              		.loc 1 183 0
 521 0134 4FF4FA73 		mov	r3, #500
 522 0138 C5F81832 		str	r3, [r5, #536]
 184:Src/Eagle_TRT.c **** 	}
 523              		.loc 1 184 0
 524 013c C8E7     		b	.L32
 525              	.L34:
 192:Src/Eagle_TRT.c **** 		break;
 526              		.loc 1 192 0
 527 013e B4F82422 		ldrh	r2, [r4, #548]
 528 0142 354B     		ldr	r3, .L43+60
 529 0144 0093     		str	r3, [sp]
 530 0146 354B     		ldr	r3, .L43+64
 531 0148 D4F82012 		ldr	r1, [r4, #544]
 532 014c 2046     		mov	r0, r4
 533 014e FFF7FEFF 		bl	send_config
 534              	.LVL50:
 535              	.L40:
 212:Src/Eagle_TRT.c **** 
 536              		.loc 1 212 0
 537 0152 0120     		movs	r0, #1
 538 0154 FFF7FEFF 		bl	HAL_Delay
 539              	.LVL51:
 214:Src/Eagle_TRT.c **** }
 540              		.loc 1 214 0
 541 0158 0A23     		movs	r3, #10
 542 015a 1E22     		movs	r2, #30
 543 015c 3049     		ldr	r1, .L43+68
 544 015e 3148     		ldr	r0, .L43+72
 545 0160 FFF7FEFF 		bl	HAL_UART_Transmit
 546              	.LVL52:
 215:Src/Eagle_TRT.c **** 
 547              		.loc 1 215 0
 548 0164 03B0     		add	sp, sp, #12
 549              	.LCFI8:
 550              		.cfi_remember_state
 551              		.cfi_def_cfa_offset 12
 552              		@ sp needed
 553 0166 30BD     		pop	{r4, r5, pc}
 554              	.LVL53:
 555              	.L36:
 556              	.LCFI9:
 557              		.cfi_restore_state
 195:Src/Eagle_TRT.c **** 		break;
 558              		.loc 1 195 0
 559 0168 B4F82422 		ldrh	r2, [r4, #548]
 560 016c 2E4B     		ldr	r3, .L43+76
 561 016e 0093     		str	r3, [sp]
 562 0170 2A4B     		ldr	r3, .L43+64
 563 0172 D4F82012 		ldr	r1, [r4, #544]
 564 0176 2046     		mov	r0, r4
 565 0178 FFF7FEFF 		bl	send_config
 566              	.LVL54:
 196:Src/Eagle_TRT.c **** 	case 6:
 567              		.loc 1 196 0
 568 017c E9E7     		b	.L40
ARM GAS  /tmp/ccuwAQC3.s 			page 28


 569              	.L37:
 198:Src/Eagle_TRT.c **** 		break;
 570              		.loc 1 198 0
 571 017e B4F82422 		ldrh	r2, [r4, #548]
 572 0182 2A4B     		ldr	r3, .L43+80
 573 0184 0093     		str	r3, [sp]
 574 0186 254B     		ldr	r3, .L43+64
 575 0188 D4F82012 		ldr	r1, [r4, #544]
 576 018c 2046     		mov	r0, r4
 577 018e FFF7FEFF 		bl	send_config
 578              	.LVL55:
 199:Src/Eagle_TRT.c **** 	case 8:
 579              		.loc 1 199 0
 580 0192 DEE7     		b	.L40
 581              	.L38:
 201:Src/Eagle_TRT.c **** 		break;
 582              		.loc 1 201 0
 583 0194 B4F82422 		ldrh	r2, [r4, #548]
 584 0198 254B     		ldr	r3, .L43+84
 585 019a 0093     		str	r3, [sp]
 586 019c 1F4B     		ldr	r3, .L43+64
 587 019e D4F82012 		ldr	r1, [r4, #544]
 588 01a2 2046     		mov	r0, r4
 589 01a4 FFF7FEFF 		bl	send_config
 590              	.LVL56:
 202:Src/Eagle_TRT.c **** 	case 16:
 591              		.loc 1 202 0
 592 01a8 D3E7     		b	.L40
 593              	.L39:
 204:Src/Eagle_TRT.c **** 		break;
 594              		.loc 1 204 0
 595 01aa B4F82422 		ldrh	r2, [r4, #548]
 596 01ae 214B     		ldr	r3, .L43+88
 597 01b0 0093     		str	r3, [sp]
 598 01b2 1A4B     		ldr	r3, .L43+64
 599 01b4 D4F82012 		ldr	r1, [r4, #544]
 600 01b8 2046     		mov	r0, r4
 601 01ba FFF7FEFF 		bl	send_config
 602              	.LVL57:
 205:Src/Eagle_TRT.c **** 	default:
 603              		.loc 1 205 0
 604 01be C8E7     		b	.L40
 605              	.L33:
 207:Src/Eagle_TRT.c **** 		accel->scale = 4;
 606              		.loc 1 207 0
 607 01c0 B4F82422 		ldrh	r2, [r4, #548]
 608 01c4 184B     		ldr	r3, .L43+76
 609 01c6 0093     		str	r3, [sp]
 610 01c8 144B     		ldr	r3, .L43+64
 611 01ca D4F82012 		ldr	r1, [r4, #544]
 612 01ce 2046     		mov	r0, r4
 613 01d0 FFF7FEFF 		bl	send_config
 614              	.LVL58:
 208:Src/Eagle_TRT.c **** 		break;
 615              		.loc 1 208 0
 616 01d4 0423     		movs	r3, #4
 617 01d6 C4F81832 		str	r3, [r4, #536]
ARM GAS  /tmp/ccuwAQC3.s 			page 29


 209:Src/Eagle_TRT.c **** 	}
 618              		.loc 1 209 0
 619 01da BAE7     		b	.L40
 620              	.L44:
 621              		.align	2
 622              	.L43:
 623 01dc 00000000 		.word	.LANCHOR1
 624 01e0 00000000 		.word	.LANCHOR0
 625 01e4 00000000 		.word	.LANCHOR3
 626 01e8 00000000 		.word	.LANCHOR2
 627 01ec 00000000 		.word	.LANCHOR5
 628 01f0 00000000 		.word	.LANCHOR4
 629 01f4 00000000 		.word	.LANCHOR7
 630 01f8 00000000 		.word	.LANCHOR6
 631 01fc 00000000 		.word	.LANCHOR9
 632 0200 00000000 		.word	.LANCHOR8
 633 0204 00000000 		.word	.LANCHOR14
 634 0208 00000000 		.word	.LANCHOR10
 635 020c 00000000 		.word	.LANCHOR11
 636 0210 00000000 		.word	.LANCHOR12
 637 0214 00000000 		.word	.LANCHOR13
 638 0218 00000000 		.word	.LANCHOR16
 639 021c 00000000 		.word	.LANCHOR15
 640 0220 00000000 		.word	.LC1
 641 0224 00000000 		.word	huart2
 642 0228 00000000 		.word	.LANCHOR17
 643 022c 00000000 		.word	.LANCHOR18
 644 0230 00000000 		.word	.LANCHOR19
 645 0234 00000000 		.word	.LANCHOR20
 646              		.cfi_endproc
 647              	.LFE132:
 649              		.section	.text.LSMD9S0_read,"ax",%progbits
 650              		.align	1
 651              		.global	LSMD9S0_read
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu fpv4-sp-d16
 657              	LSMD9S0_read:
 658              	.LFB133:
 218:Src/Eagle_TRT.c **** 
 659              		.loc 1 218 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 8
 662              		@ frame_needed = 0, uses_anonymous_args = 0
 663              	.LVL59:
 664 0000 10B5     		push	{r4, lr}
 665              	.LCFI10:
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 4, -8
 668              		.cfi_offset 14, -4
 669 0002 82B0     		sub	sp, sp, #8
 670              	.LCFI11:
 671              		.cfi_def_cfa_offset 16
 672 0004 0446     		mov	r4, r0
 223:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;												  //set counter to 0
 673              		.loc 1 223 0
ARM GAS  /tmp/ccuwAQC3.s 			page 30


 674 0006 0022     		movs	r2, #0
 675 0008 B0F82412 		ldrh	r1, [r0, #548]
 676 000c D0F82002 		ldr	r0, [r0, #544]
 677              	.LVL60:
 678 0010 FFF7FEFF 		bl	HAL_GPIO_WritePin
 679              	.LVL61:
 224:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 680              		.loc 1 224 0
 681 0014 2E4B     		ldr	r3, .L51
 682 0016 1A68     		ldr	r2, [r3]
 683 0018 0023     		movs	r3, #0
 684 001a 5362     		str	r3, [r2, #36]
 685              	.L46:
 225:Src/Eagle_TRT.c **** 	{
 686              		.loc 1 225 0 discriminator 1
 687 001c 536A     		ldr	r3, [r2, #36]
 688 001e 142B     		cmp	r3, #20
 689 0020 FCD9     		bls	.L46
 229:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_L_VAL, 1, 10); ///Saving LOW data
 690              		.loc 1 229 0
 691 0022 0A23     		movs	r3, #10
 692 0024 0122     		movs	r2, #1
 693 0026 04F22E21 		addw	r1, r4, #558
 694 002a D4F83002 		ldr	r0, [r4, #560]
 695 002e FFF7FEFF 		bl	HAL_SPI_Transmit
 696              	.LVL62:
 230:Src/Eagle_TRT.c **** 
 697              		.loc 1 230 0
 698 0032 0A23     		movs	r3, #10
 699 0034 0122     		movs	r2, #1
 700 0036 0DF10701 		add	r1, sp, #7
 701 003a D4F83002 		ldr	r0, [r4, #560]
 702 003e FFF7FEFF 		bl	HAL_SPI_Receive
 703              	.LVL63:
 232:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 704              		.loc 1 232 0
 705 0042 234B     		ldr	r3, .L51
 706 0044 1A68     		ldr	r2, [r3]
 707 0046 0023     		movs	r3, #0
 708 0048 5362     		str	r3, [r2, #36]
 709              	.L47:
 233:Src/Eagle_TRT.c **** 	{
 710              		.loc 1 233 0 discriminator 1
 711 004a 536A     		ldr	r3, [r2, #36]
 712 004c 142B     		cmp	r3, #20
 713 004e FCD9     		bls	.L47
 236:Src/Eagle_TRT.c **** 
 714              		.loc 1 236 0
 715 0050 0122     		movs	r2, #1
 716 0052 B4F82412 		ldrh	r1, [r4, #548]
 717 0056 D4F82002 		ldr	r0, [r4, #544]
 718 005a FFF7FEFF 		bl	HAL_GPIO_WritePin
 719              	.LVL64:
 238:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 80)
 720              		.loc 1 238 0
 721 005e 1C4B     		ldr	r3, .L51
 722 0060 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccuwAQC3.s 			page 31


 723 0062 0023     		movs	r3, #0
 724 0064 5362     		str	r3, [r2, #36]
 725              	.L48:
 239:Src/Eagle_TRT.c **** 	{
 726              		.loc 1 239 0 discriminator 1
 727 0066 536A     		ldr	r3, [r2, #36]
 728 0068 502B     		cmp	r3, #80
 729 006a FCD9     		bls	.L48
 242:Src/Eagle_TRT.c **** 
 730              		.loc 1 242 0
 731 006c 0022     		movs	r2, #0
 732 006e B4F82412 		ldrh	r1, [r4, #548]
 733 0072 D4F82002 		ldr	r0, [r4, #544]
 734 0076 FFF7FEFF 		bl	HAL_GPIO_WritePin
 735              	.LVL65:
 244:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&OUT_H_VAL, 1, 10); ///Saving HIGH data
 736              		.loc 1 244 0
 737 007a 0A23     		movs	r3, #10
 738 007c 0122     		movs	r2, #1
 739 007e 04F22F21 		addw	r1, r4, #559
 740 0082 D4F83002 		ldr	r0, [r4, #560]
 741 0086 FFF7FEFF 		bl	HAL_SPI_Transmit
 742              	.LVL66:
 245:Src/Eagle_TRT.c **** 
 743              		.loc 1 245 0
 744 008a 0A23     		movs	r3, #10
 745 008c 0122     		movs	r2, #1
 746 008e 0DF10601 		add	r1, sp, #6
 747 0092 D4F83002 		ldr	r0, [r4, #560]
 748 0096 FFF7FEFF 		bl	HAL_SPI_Receive
 749              	.LVL67:
 247:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 750              		.loc 1 247 0
 751 009a 0D4B     		ldr	r3, .L51
 752 009c 1A68     		ldr	r2, [r3]
 753 009e 0023     		movs	r3, #0
 754 00a0 5362     		str	r3, [r2, #36]
 755              	.L49:
 248:Src/Eagle_TRT.c **** 	{
 756              		.loc 1 248 0 discriminator 1
 757 00a2 536A     		ldr	r3, [r2, #36]
 758 00a4 142B     		cmp	r3, #20
 759 00a6 FCD9     		bls	.L49
 252:Src/Eagle_TRT.c **** 
 760              		.loc 1 252 0
 761 00a8 0122     		movs	r2, #1
 762 00aa B4F82412 		ldrh	r1, [r4, #548]
 763 00ae D4F82002 		ldr	r0, [r4, #544]
 764 00b2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 765              	.LVL68:
 255:Src/Eagle_TRT.c **** 	float axis = value;
 766              		.loc 1 255 0
 767 00b6 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 768 00ba 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 769 00be 43EA0223 		orr	r3, r3, r2, lsl #8
 770 00c2 00EE103A 		vmov	s0, r3	@ int
 771              	.LVL69:
ARM GAS  /tmp/ccuwAQC3.s 			page 32


 259:Src/Eagle_TRT.c **** 
 772              		.loc 1 259 0
 773 00c6 B8EE400A 		vcvt.f32.u32	s0, s0
 774              	.LVL70:
 775 00ca 02B0     		add	sp, sp, #8
 776              	.LCFI12:
 777              		.cfi_def_cfa_offset 8
 778              		@ sp needed
 779 00cc 10BD     		pop	{r4, pc}
 780              	.LVL71:
 781              	.L52:
 782 00ce 00BF     		.align	2
 783              	.L51:
 784 00d0 00000000 		.word	htim2
 785              		.cfi_endproc
 786              	.LFE133:
 788              		.section	.text.LSMD9S0_check,"ax",%progbits
 789              		.align	1
 790              		.global	LSMD9S0_check
 791              		.syntax unified
 792              		.thumb
 793              		.thumb_func
 794              		.fpu fpv4-sp-d16
 796              	LSMD9S0_check:
 797              	.LFB134:
 262:Src/Eagle_TRT.c **** 
 798              		.loc 1 262 0
 799              		.cfi_startproc
 800              		@ args = 0, pretend = 0, frame = 104
 801              		@ frame_needed = 0, uses_anonymous_args = 0
 802              	.LVL72:
 803 0000 30B5     		push	{r4, r5, lr}
 804              	.LCFI13:
 805              		.cfi_def_cfa_offset 12
 806              		.cfi_offset 4, -12
 807              		.cfi_offset 5, -8
 808              		.cfi_offset 14, -4
 809 0002 9BB0     		sub	sp, sp, #108
 810              	.LCFI14:
 811              		.cfi_def_cfa_offset 120
 812 0004 0446     		mov	r4, r0
 813              	.LVL73:
 267:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 814              		.loc 1 267 0
 815 0006 0022     		movs	r2, #0
 816 0008 4FF40071 		mov	r1, #512
 817 000c 3448     		ldr	r0, .L62
 818              	.LVL74:
 819 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 820              	.LVL75:
 268:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 821              		.loc 1 268 0
 822 0012 344B     		ldr	r3, .L62+4
 823 0014 1A68     		ldr	r2, [r3]
 824 0016 0023     		movs	r3, #0
 825 0018 5362     		str	r3, [r2, #36]
 826              	.L54:
ARM GAS  /tmp/ccuwAQC3.s 			page 33


 269:Src/Eagle_TRT.c **** 	{
 827              		.loc 1 269 0 discriminator 1
 828 001a 536A     		ldr	r3, [r2, #36]
 829 001c 142B     		cmp	r3, #20
 830 001e FCD9     		bls	.L54
 272:Src/Eagle_TRT.c **** 	HAL_SPI_Receive(imu->hspi, (uint8_t *)&WHO_AM_I_XM_VAL, 1, 10);
 831              		.loc 1 272 0
 832 0020 0A23     		movs	r3, #10
 833 0022 0122     		movs	r2, #1
 834 0024 3049     		ldr	r1, .L62+8
 835 0026 D4F83002 		ldr	r0, [r4, #560]
 836 002a FFF7FEFF 		bl	HAL_SPI_Transmit
 837              	.LVL76:
 273:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 838              		.loc 1 273 0
 839 002e 0A23     		movs	r3, #10
 840 0030 0122     		movs	r2, #1
 841 0032 2E49     		ldr	r1, .L62+12
 842 0034 D4F83002 		ldr	r0, [r4, #560]
 843 0038 FFF7FEFF 		bl	HAL_SPI_Receive
 844              	.LVL77:
 274:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 845              		.loc 1 274 0
 846 003c 294B     		ldr	r3, .L62+4
 847 003e 1A68     		ldr	r2, [r3]
 848 0040 0023     		movs	r3, #0
 849 0042 5362     		str	r3, [r2, #36]
 850              	.L55:
 275:Src/Eagle_TRT.c **** 	{
 851              		.loc 1 275 0 discriminator 1
 852 0044 536A     		ldr	r3, [r2, #36]
 853 0046 142B     		cmp	r3, #20
 854 0048 FCD9     		bls	.L55
 278:Src/Eagle_TRT.c **** 
 855              		.loc 1 278 0
 856 004a 0122     		movs	r2, #1
 857 004c 4FF40071 		mov	r1, #512
 858 0050 2348     		ldr	r0, .L62
 859 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 860              	.LVL78:
 281:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0;							  //set counter to 0
 861              		.loc 1 281 0
 862 0056 0022     		movs	r2, #0
 863 0058 4FF48071 		mov	r1, #256
 864 005c 2448     		ldr	r0, .L62+16
 865 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 866              	.LVL79:
 282:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 867              		.loc 1 282 0
 868 0062 204B     		ldr	r3, .L62+4
 869 0064 1A68     		ldr	r2, [r3]
 870 0066 0023     		movs	r3, #0
 871 0068 5362     		str	r3, [r2, #36]
 872              	.L56:
 283:Src/Eagle_TRT.c **** 	{
 873              		.loc 1 283 0 discriminator 1
 874 006a 536A     		ldr	r3, [r2, #36]
ARM GAS  /tmp/ccuwAQC3.s 			page 34


 875 006c 142B     		cmp	r3, #20
 876 006e FCD9     		bls	.L56
 286:Src/Eagle_TRT.c **** 	//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Readin
 877              		.loc 1 286 0
 878 0070 0A23     		movs	r3, #10
 879 0072 0122     		movs	r2, #1
 880 0074 1F49     		ldr	r1, .L62+20
 881 0076 D4F83002 		ldr	r0, [r4, #560]
 882 007a FFF7FEFF 		bl	HAL_SPI_Transmit
 883              	.LVL80:
 288:Src/Eagle_TRT.c **** 	htim2.Instance->CNT = 0; //set counter to 0
 884              		.loc 1 288 0
 885 007e 0A23     		movs	r3, #10
 886 0080 0122     		movs	r2, #1
 887 0082 1D49     		ldr	r1, .L62+24
 888 0084 D4F83002 		ldr	r0, [r4, #560]
 889 0088 FFF7FEFF 		bl	HAL_SPI_Receive
 890              	.LVL81:
 289:Src/Eagle_TRT.c **** 	while (htim2.Instance->CNT <= 20)
 891              		.loc 1 289 0
 892 008c 154B     		ldr	r3, .L62+4
 893 008e 1A68     		ldr	r2, [r3]
 894 0090 0023     		movs	r3, #0
 895 0092 5362     		str	r3, [r2, #36]
 896              	.L57:
 290:Src/Eagle_TRT.c **** 	{
 897              		.loc 1 290 0 discriminator 1
 898 0094 536A     		ldr	r3, [r2, #36]
 899 0096 142B     		cmp	r3, #20
 900 0098 FCD9     		bls	.L57
 293:Src/Eagle_TRT.c **** 
 901              		.loc 1 293 0
 902 009a 0122     		movs	r2, #1
 903 009c 4FF48071 		mov	r1, #256
 904 00a0 1348     		ldr	r0, .L62+16
 905 00a2 FFF7FEFF 		bl	HAL_GPIO_WritePin
 906              	.LVL82:
 297:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 907              		.loc 1 297 0
 908 00a6 114C     		ldr	r4, .L62+12
 909              	.LVL83:
 910 00a8 134D     		ldr	r5, .L62+24
 911 00aa 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 912 00ac 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 913 00ae 1349     		ldr	r1, .L62+28
 914 00b0 01A8     		add	r0, sp, #4
 915 00b2 FFF7FEFF 		bl	sprintf
 916              	.LVL84:
 298:Src/Eagle_TRT.c **** 
 917              		.loc 1 298 0
 918 00b6 01A8     		add	r0, sp, #4
 919 00b8 FFF7FEFF 		bl	strlen
 920              	.LVL85:
 921 00bc 0A23     		movs	r3, #10
 922 00be 82B2     		uxth	r2, r0
 923 00c0 01A9     		add	r1, sp, #4
 924 00c2 0F48     		ldr	r0, .L62+32
ARM GAS  /tmp/ccuwAQC3.s 			page 35


 925 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 926              	.LVL86:
 301:Src/Eagle_TRT.c **** 	{
 927              		.loc 1 301 0
 928 00c8 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
 929 00ca 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 930 00cc D42A     		cmp	r2, #212
 931 00ce 08BF     		it	eq
 932 00d0 492B     		cmpeq	r3, #73
 933 00d2 02D0     		beq	.L61
 307:Src/Eagle_TRT.c **** 	}
 934              		.loc 1 307 0
 935 00d4 0020     		movs	r0, #0
 936              	.L53:
 311:Src/Eagle_TRT.c **** 
 937              		.loc 1 311 0
 938 00d6 1BB0     		add	sp, sp, #108
 939              	.LCFI15:
 940              		.cfi_remember_state
 941              		.cfi_def_cfa_offset 12
 942              		@ sp needed
 943 00d8 30BD     		pop	{r4, r5, pc}
 944              	.L61:
 945              	.LCFI16:
 946              		.cfi_restore_state
 303:Src/Eagle_TRT.c **** 	}
 947              		.loc 1 303 0
 948 00da 0120     		movs	r0, #1
 949 00dc FBE7     		b	.L53
 950              	.L63:
 951 00de 00BF     		.align	2
 952              	.L62:
 953 00e0 00080240 		.word	1073874944
 954 00e4 00000000 		.word	htim2
 955 00e8 00000000 		.word	.LANCHOR21
 956 00ec 00000000 		.word	WHO_AM_I_XM_VAL
 957 00f0 00000240 		.word	1073872896
 958 00f4 00000000 		.word	.LANCHOR22
 959 00f8 00000000 		.word	WHO_AM_I_G_VAL
 960 00fc 00000000 		.word	.LC2
 961 0100 00000000 		.word	huart2
 962              		.cfi_endproc
 963              	.LFE134:
 965              		.global	__aeabi_f2d
 966              		.global	__aeabi_dcmpgt
 967              		.global	__aeabi_dsub
 968              		.global	__aeabi_dmul
 969              		.section	.text.LSMD9S0_gyro_read,"ax",%progbits
 970              		.align	1
 971              		.global	LSMD9S0_gyro_read
 972              		.syntax unified
 973              		.thumb
 974              		.thumb_func
 975              		.fpu fpv4-sp-d16
 977              	LSMD9S0_gyro_read:
 978              	.LFB136:
 344:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 36


 979              		.loc 1 344 0
 980              		.cfi_startproc
 981              		@ args = 0, pretend = 0, frame = 0
 982              		@ frame_needed = 0, uses_anonymous_args = 0
 983              	.LVL87:
 984 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 985              	.LCFI17:
 986              		.cfi_def_cfa_offset 32
 987              		.cfi_offset 4, -32
 988              		.cfi_offset 5, -28
 989              		.cfi_offset 6, -24
 990              		.cfi_offset 7, -20
 991              		.cfi_offset 8, -16
 992              		.cfi_offset 9, -12
 993              		.cfi_offset 10, -8
 994              		.cfi_offset 14, -4
 995 0004 8246     		mov	r10, r0
 346:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_X_L_G_ADD;
 996              		.loc 1 346 0
 997 0006 5B4B     		ldr	r3, .L78
 998 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 999 000a 80F82F32 		strb	r3, [r0, #559]
 347:Src/Eagle_TRT.c **** 	gyro->x = LSMD9S0_read(gyro);
 1000              		.loc 1 347 0
 1001 000e 5A4B     		ldr	r3, .L78+4
 1002 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 0012 80F82E32 		strb	r3, [r0, #558]
 348:Src/Eagle_TRT.c **** 
 1004              		.loc 1 348 0
 1005 0016 FFF7FEFF 		bl	LSMD9S0_read
 1006              	.LVL88:
 1007 001a 10EE100A 		vmov	r0, s0
 1008 001e FFF7FEFF 		bl	__aeabi_f2d
 1009              	.LVL89:
 1010 0022 CAE90001 		strd	r0, [r10]
 350:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Y_L_G_ADD;
 1011              		.loc 1 350 0
 1012 0026 554B     		ldr	r3, .L78+8
 1013 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 002a 8AF82F32 		strb	r3, [r10, #559]
 351:Src/Eagle_TRT.c **** 	gyro->y = LSMD9S0_read(gyro);
 1015              		.loc 1 351 0
 1016 002e 544B     		ldr	r3, .L78+12
 1017 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1018 0032 8AF82E32 		strb	r3, [r10, #558]
 352:Src/Eagle_TRT.c **** 
 1019              		.loc 1 352 0
 1020 0036 5046     		mov	r0, r10
 1021 0038 FFF7FEFF 		bl	LSMD9S0_read
 1022              	.LVL90:
 1023 003c 10EE100A 		vmov	r0, s0
 1024 0040 FFF7FEFF 		bl	__aeabi_f2d
 1025              	.LVL91:
 1026 0044 CAE90201 		strd	r0, [r10, #8]
 354:Src/Eagle_TRT.c **** 	gyro->REG_L = OUT_Z_L_G_ADD;
 1027              		.loc 1 354 0
 1028 0048 4E4B     		ldr	r3, .L78+16
ARM GAS  /tmp/ccuwAQC3.s 			page 37


 1029 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1030 004c 8AF82F32 		strb	r3, [r10, #559]
 355:Src/Eagle_TRT.c **** 	gyro->z = LSMD9S0_read(gyro);
 1031              		.loc 1 355 0
 1032 0050 4D4B     		ldr	r3, .L78+20
 1033 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1034 0054 8AF82E32 		strb	r3, [r10, #558]
 356:Src/Eagle_TRT.c **** 
 1035              		.loc 1 356 0
 1036 0058 5046     		mov	r0, r10
 1037 005a FFF7FEFF 		bl	LSMD9S0_read
 1038              	.LVL92:
 1039 005e 10EE100A 		vmov	r0, s0
 1040 0062 FFF7FEFF 		bl	__aeabi_f2d
 1041              	.LVL93:
 1042 0066 0446     		mov	r4, r0
 1043 0068 0D46     		mov	r5, r1
 1044 006a CAE90445 		strd	r4, [r10, #16]
 358:Src/Eagle_TRT.c **** 	{
 1045              		.loc 1 358 0
 1046 006e DAE90067 		ldrd	r6, [r10]
 1047 0072 0022     		movs	r2, #0
 1048 0074 454B     		ldr	r3, .L78+24
 1049 0076 3046     		mov	r0, r6
 1050 0078 3946     		mov	r1, r7
 1051 007a FFF7FEFF 		bl	__aeabi_dcmpgt
 1052              	.LVL94:
 1053 007e 38B1     		cbz	r0, .L65
 360:Src/Eagle_TRT.c **** 	}
 1054              		.loc 1 360 0
 1055 0080 0022     		movs	r2, #0
 1056 0082 434B     		ldr	r3, .L78+28
 1057 0084 3046     		mov	r0, r6
 1058 0086 3946     		mov	r1, r7
 1059 0088 FFF7FEFF 		bl	__aeabi_dsub
 1060              	.LVL95:
 1061 008c CAE90001 		strd	r0, [r10]
 1062              	.L65:
 362:Src/Eagle_TRT.c **** 	{
 1063              		.loc 1 362 0
 1064 0090 DAE90267 		ldrd	r6, [r10, #8]
 1065 0094 0022     		movs	r2, #0
 1066 0096 3D4B     		ldr	r3, .L78+24
 1067 0098 3046     		mov	r0, r6
 1068 009a 3946     		mov	r1, r7
 1069 009c FFF7FEFF 		bl	__aeabi_dcmpgt
 1070              	.LVL96:
 1071 00a0 38B1     		cbz	r0, .L67
 364:Src/Eagle_TRT.c **** 	}
 1072              		.loc 1 364 0
 1073 00a2 0022     		movs	r2, #0
 1074 00a4 3A4B     		ldr	r3, .L78+28
 1075 00a6 3046     		mov	r0, r6
 1076 00a8 3946     		mov	r1, r7
 1077 00aa FFF7FEFF 		bl	__aeabi_dsub
 1078              	.LVL97:
 1079 00ae CAE90201 		strd	r0, [r10, #8]
ARM GAS  /tmp/ccuwAQC3.s 			page 38


 1080              	.L67:
 366:Src/Eagle_TRT.c **** 	{
 1081              		.loc 1 366 0
 1082 00b2 0022     		movs	r2, #0
 1083 00b4 354B     		ldr	r3, .L78+24
 1084 00b6 2046     		mov	r0, r4
 1085 00b8 2946     		mov	r1, r5
 1086 00ba FFF7FEFF 		bl	__aeabi_dcmpgt
 1087              	.LVL98:
 1088 00be 38B1     		cbz	r0, .L69
 368:Src/Eagle_TRT.c **** 	}
 1089              		.loc 1 368 0
 1090 00c0 0022     		movs	r2, #0
 1091 00c2 334B     		ldr	r3, .L78+28
 1092 00c4 2046     		mov	r0, r4
 1093 00c6 2946     		mov	r1, r5
 1094 00c8 FFF7FEFF 		bl	__aeabi_dsub
 1095              	.LVL99:
 1096 00cc CAE90401 		strd	r0, [r10, #16]
 1097              	.L69:
 371:Src/Eagle_TRT.c **** 	gyro->y = gyro->y * ((float)gyro->scale / 32768);
 1098              		.loc 1 371 0
 1099 00d0 DAE90067 		ldrd	r6, [r10]
 1100 00d4 DAED867A 		vldr.32	s15, [r10, #536]	@ int
 1101 00d8 F8EEE77A 		vcvt.f32.s32	s15, s15
 1102 00dc 9FED2D7A 		vldr.32	s14, .L78+32
 1103 00e0 67EE877A 		vmul.f32	s15, s15, s14
 1104 00e4 17EE900A 		vmov	r0, s15
 1105 00e8 FFF7FEFF 		bl	__aeabi_f2d
 1106              	.LVL100:
 1107 00ec 0446     		mov	r4, r0
 1108 00ee 0D46     		mov	r5, r1
 1109 00f0 0246     		mov	r2, r0
 1110 00f2 0B46     		mov	r3, r1
 1111 00f4 3046     		mov	r0, r6
 1112 00f6 3946     		mov	r1, r7
 1113 00f8 FFF7FEFF 		bl	__aeabi_dmul
 1114              	.LVL101:
 1115 00fc 8046     		mov	r8, r0
 1116 00fe 8946     		mov	r9, r1
 372:Src/Eagle_TRT.c **** 	gyro->z = gyro->z * ((float)gyro->scale / 32768);
 1117              		.loc 1 372 0
 1118 0100 DAE90223 		ldrd	r2, [r10, #8]
 1119 0104 2046     		mov	r0, r4
 1120 0106 2946     		mov	r1, r5
 1121 0108 FFF7FEFF 		bl	__aeabi_dmul
 1122              	.LVL102:
 1123 010c 0646     		mov	r6, r0
 1124 010e 0F46     		mov	r7, r1
 373:Src/Eagle_TRT.c **** 
 1125              		.loc 1 373 0
 1126 0110 DAE90423 		ldrd	r2, [r10, #16]
 1127 0114 2046     		mov	r0, r4
 1128 0116 2946     		mov	r1, r5
 1129 0118 FFF7FEFF 		bl	__aeabi_dmul
 1130              	.LVL103:
 1131 011c 0446     		mov	r4, r0
ARM GAS  /tmp/ccuwAQC3.s 			page 39


 1132 011e 0D46     		mov	r5, r1
 375:Src/Eagle_TRT.c **** 	gyro->y -= gyro->y_offset;
 1133              		.loc 1 375 0
 1134 0120 DAE90623 		ldrd	r2, [r10, #24]
 1135 0124 4046     		mov	r0, r8
 1136 0126 4946     		mov	r1, r9
 1137 0128 FFF7FEFF 		bl	__aeabi_dsub
 1138              	.LVL104:
 1139 012c CAE90001 		strd	r0, [r10]
 376:Src/Eagle_TRT.c **** 	gyro->z -= gyro->z_offset;
 1140              		.loc 1 376 0
 1141 0130 DAE90823 		ldrd	r2, [r10, #32]
 1142 0134 3046     		mov	r0, r6
 1143 0136 3946     		mov	r1, r7
 1144 0138 FFF7FEFF 		bl	__aeabi_dsub
 1145              	.LVL105:
 1146 013c CAE90201 		strd	r0, [r10, #8]
 377:Src/Eagle_TRT.c **** 
 1147              		.loc 1 377 0
 1148 0140 DAE90A23 		ldrd	r2, [r10, #40]
 1149 0144 2046     		mov	r0, r4
 1150 0146 2946     		mov	r1, r5
 1151 0148 FFF7FEFF 		bl	__aeabi_dsub
 1152              	.LVL106:
 1153 014c CAE90401 		strd	r0, [r10, #16]
 380:Src/Eagle_TRT.c **** 	{
 1154              		.loc 1 380 0
 1155 0150 114B     		ldr	r3, .L78+36
 1156 0152 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1157 0154 114B     		ldr	r3, .L78+40
 1158 0156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1159 0158 D42A     		cmp	r2, #212
 1160 015a 08BF     		it	eq
 1161 015c 492B     		cmpeq	r3, #73
 1162 015e 04D0     		beq	.L77
 386:Src/Eagle_TRT.c **** 	}
 1163              		.loc 1 386 0
 1164 0160 0123     		movs	r3, #1
 1165 0162 CAF81432 		str	r3, [r10, #532]
 1166 0166 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1167              	.LVL107:
 1168              	.L77:
 382:Src/Eagle_TRT.c **** 	}
 1169              		.loc 1 382 0
 1170 016a 0023     		movs	r3, #0
 1171 016c CAF81432 		str	r3, [r10, #532]
 1172 0170 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1173              	.LVL108:
 1174              	.L79:
 1175              		.align	2
 1176              	.L78:
 1177 0174 00000000 		.word	.LANCHOR23
 1178 0178 00000000 		.word	.LANCHOR24
 1179 017c 00000000 		.word	.LANCHOR25
 1180 0180 00000000 		.word	.LANCHOR26
 1181 0184 00000000 		.word	.LANCHOR27
 1182 0188 00000000 		.word	.LANCHOR28
ARM GAS  /tmp/ccuwAQC3.s 			page 40


 1183 018c 0000E040 		.word	1088421888
 1184 0190 0000F040 		.word	1089470464
 1185 0194 00000038 		.word	939524096
 1186 0198 00000000 		.word	WHO_AM_I_G_VAL
 1187 019c 00000000 		.word	WHO_AM_I_XM_VAL
 1188              		.cfi_endproc
 1189              	.LFE136:
 1191              		.section	.text.LSMD9S0_accel_read,"ax",%progbits
 1192              		.align	1
 1193              		.global	LSMD9S0_accel_read
 1194              		.syntax unified
 1195              		.thumb
 1196              		.thumb_func
 1197              		.fpu fpv4-sp-d16
 1199              	LSMD9S0_accel_read:
 1200              	.LFB138:
 435:Src/Eagle_TRT.c **** 
 1201              		.loc 1 435 0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 0
 1204              		@ frame_needed = 0, uses_anonymous_args = 0
 1205              	.LVL109:
 1206 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1207              	.LCFI18:
 1208              		.cfi_def_cfa_offset 32
 1209              		.cfi_offset 4, -32
 1210              		.cfi_offset 5, -28
 1211              		.cfi_offset 6, -24
 1212              		.cfi_offset 7, -20
 1213              		.cfi_offset 8, -16
 1214              		.cfi_offset 9, -12
 1215              		.cfi_offset 10, -8
 1216              		.cfi_offset 14, -4
 1217 0004 8246     		mov	r10, r0
 437:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_X_L_A_ADD;
 1218              		.loc 1 437 0
 1219 0006 534B     		ldr	r3, .L91
 1220 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1221 000a 80F82F32 		strb	r3, [r0, #559]
 438:Src/Eagle_TRT.c **** 	accel->x = LSMD9S0_read(accel);
 1222              		.loc 1 438 0
 1223 000e 524B     		ldr	r3, .L91+4
 1224 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1225 0012 80F82E32 		strb	r3, [r0, #558]
 439:Src/Eagle_TRT.c **** 
 1226              		.loc 1 439 0
 1227 0016 FFF7FEFF 		bl	LSMD9S0_read
 1228              	.LVL110:
 1229 001a 10EE100A 		vmov	r0, s0
 1230 001e FFF7FEFF 		bl	__aeabi_f2d
 1231              	.LVL111:
 1232 0022 CAE90001 		strd	r0, [r10]
 441:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Y_L_A_ADD;
 1233              		.loc 1 441 0
 1234 0026 4D4B     		ldr	r3, .L91+8
 1235 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1236 002a 8AF82F32 		strb	r3, [r10, #559]
ARM GAS  /tmp/ccuwAQC3.s 			page 41


 442:Src/Eagle_TRT.c **** 	accel->y = LSMD9S0_read(accel);
 1237              		.loc 1 442 0
 1238 002e 4C4B     		ldr	r3, .L91+12
 1239 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1240 0032 8AF82E32 		strb	r3, [r10, #558]
 443:Src/Eagle_TRT.c **** 
 1241              		.loc 1 443 0
 1242 0036 5046     		mov	r0, r10
 1243 0038 FFF7FEFF 		bl	LSMD9S0_read
 1244              	.LVL112:
 1245 003c 10EE100A 		vmov	r0, s0
 1246 0040 FFF7FEFF 		bl	__aeabi_f2d
 1247              	.LVL113:
 1248 0044 CAE90201 		strd	r0, [r10, #8]
 445:Src/Eagle_TRT.c **** 	accel->REG_L = OUT_Z_L_A_ADD;
 1249              		.loc 1 445 0
 1250 0048 464B     		ldr	r3, .L91+16
 1251 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1252 004c 8AF82F32 		strb	r3, [r10, #559]
 446:Src/Eagle_TRT.c **** 	accel->z = LSMD9S0_read(accel);
 1253              		.loc 1 446 0
 1254 0050 454B     		ldr	r3, .L91+20
 1255 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1256 0054 8AF82E32 		strb	r3, [r10, #558]
 447:Src/Eagle_TRT.c **** 
 1257              		.loc 1 447 0
 1258 0058 5046     		mov	r0, r10
 1259 005a FFF7FEFF 		bl	LSMD9S0_read
 1260              	.LVL114:
 1261 005e 10EE100A 		vmov	r0, s0
 1262 0062 FFF7FEFF 		bl	__aeabi_f2d
 1263              	.LVL115:
 1264 0066 0446     		mov	r4, r0
 1265 0068 0D46     		mov	r5, r1
 1266 006a CAE90445 		strd	r4, [r10, #16]
 449:Src/Eagle_TRT.c **** 	{
 1267              		.loc 1 449 0
 1268 006e DAE90067 		ldrd	r6, [r10]
 1269 0072 0022     		movs	r2, #0
 1270 0074 3D4B     		ldr	r3, .L91+24
 1271 0076 3046     		mov	r0, r6
 1272 0078 3946     		mov	r1, r7
 1273 007a FFF7FEFF 		bl	__aeabi_dcmpgt
 1274              	.LVL116:
 1275 007e 38B1     		cbz	r0, .L81
 451:Src/Eagle_TRT.c **** 	}
 1276              		.loc 1 451 0
 1277 0080 0022     		movs	r2, #0
 1278 0082 3B4B     		ldr	r3, .L91+28
 1279 0084 3046     		mov	r0, r6
 1280 0086 3946     		mov	r1, r7
 1281 0088 FFF7FEFF 		bl	__aeabi_dsub
 1282              	.LVL117:
 1283 008c CAE90001 		strd	r0, [r10]
 1284              	.L81:
 453:Src/Eagle_TRT.c **** 	{
 1285              		.loc 1 453 0
ARM GAS  /tmp/ccuwAQC3.s 			page 42


 1286 0090 DAE90267 		ldrd	r6, [r10, #8]
 1287 0094 0022     		movs	r2, #0
 1288 0096 354B     		ldr	r3, .L91+24
 1289 0098 3046     		mov	r0, r6
 1290 009a 3946     		mov	r1, r7
 1291 009c FFF7FEFF 		bl	__aeabi_dcmpgt
 1292              	.LVL118:
 1293 00a0 38B1     		cbz	r0, .L83
 455:Src/Eagle_TRT.c **** 	}
 1294              		.loc 1 455 0
 1295 00a2 0022     		movs	r2, #0
 1296 00a4 324B     		ldr	r3, .L91+28
 1297 00a6 3046     		mov	r0, r6
 1298 00a8 3946     		mov	r1, r7
 1299 00aa FFF7FEFF 		bl	__aeabi_dsub
 1300              	.LVL119:
 1301 00ae CAE90201 		strd	r0, [r10, #8]
 1302              	.L83:
 457:Src/Eagle_TRT.c **** 	{
 1303              		.loc 1 457 0
 1304 00b2 0022     		movs	r2, #0
 1305 00b4 2D4B     		ldr	r3, .L91+24
 1306 00b6 2046     		mov	r0, r4
 1307 00b8 2946     		mov	r1, r5
 1308 00ba FFF7FEFF 		bl	__aeabi_dcmpgt
 1309              	.LVL120:
 1310 00be 38B1     		cbz	r0, .L85
 459:Src/Eagle_TRT.c **** 	}
 1311              		.loc 1 459 0
 1312 00c0 0022     		movs	r2, #0
 1313 00c2 2B4B     		ldr	r3, .L91+28
 1314 00c4 2046     		mov	r0, r4
 1315 00c6 2946     		mov	r1, r5
 1316 00c8 FFF7FEFF 		bl	__aeabi_dsub
 1317              	.LVL121:
 1318 00cc CAE90401 		strd	r0, [r10, #16]
 1319              	.L85:
 462:Src/Eagle_TRT.c **** 	accel->y = accel->y * ((float)accel->scale / 32768);
 1320              		.loc 1 462 0
 1321 00d0 DAE90067 		ldrd	r6, [r10]
 1322 00d4 DAED867A 		vldr.32	s15, [r10, #536]	@ int
 1323 00d8 F8EEE77A 		vcvt.f32.s32	s15, s15
 1324 00dc 9FED257A 		vldr.32	s14, .L91+32
 1325 00e0 67EE877A 		vmul.f32	s15, s15, s14
 1326 00e4 17EE900A 		vmov	r0, s15
 1327 00e8 FFF7FEFF 		bl	__aeabi_f2d
 1328              	.LVL122:
 1329 00ec 0446     		mov	r4, r0
 1330 00ee 0D46     		mov	r5, r1
 1331 00f0 0246     		mov	r2, r0
 1332 00f2 0B46     		mov	r3, r1
 1333 00f4 3046     		mov	r0, r6
 1334 00f6 3946     		mov	r1, r7
 1335 00f8 FFF7FEFF 		bl	__aeabi_dmul
 1336              	.LVL123:
 1337 00fc 8046     		mov	r8, r0
 1338 00fe 8946     		mov	r9, r1
ARM GAS  /tmp/ccuwAQC3.s 			page 43


 463:Src/Eagle_TRT.c **** 	accel->z = accel->z * ((float)accel->scale / 32768);
 1339              		.loc 1 463 0
 1340 0100 DAE90223 		ldrd	r2, [r10, #8]
 1341 0104 2046     		mov	r0, r4
 1342 0106 2946     		mov	r1, r5
 1343 0108 FFF7FEFF 		bl	__aeabi_dmul
 1344              	.LVL124:
 1345 010c 0646     		mov	r6, r0
 1346 010e 0F46     		mov	r7, r1
 464:Src/Eagle_TRT.c **** 
 1347              		.loc 1 464 0
 1348 0110 DAE90423 		ldrd	r2, [r10, #16]
 1349 0114 2046     		mov	r0, r4
 1350 0116 2946     		mov	r1, r5
 1351 0118 FFF7FEFF 		bl	__aeabi_dmul
 1352              	.LVL125:
 1353 011c 0446     		mov	r4, r0
 1354 011e 0D46     		mov	r5, r1
 466:Src/Eagle_TRT.c **** 	accel->y -= accel->y_offset;
 1355              		.loc 1 466 0
 1356 0120 DAE90623 		ldrd	r2, [r10, #24]
 1357 0124 4046     		mov	r0, r8
 1358 0126 4946     		mov	r1, r9
 1359 0128 FFF7FEFF 		bl	__aeabi_dsub
 1360              	.LVL126:
 1361 012c CAE90001 		strd	r0, [r10]
 467:Src/Eagle_TRT.c **** 	accel->z -= accel->z_offset;
 1362              		.loc 1 467 0
 1363 0130 DAE90823 		ldrd	r2, [r10, #32]
 1364 0134 3046     		mov	r0, r6
 1365 0136 3946     		mov	r1, r7
 1366 0138 FFF7FEFF 		bl	__aeabi_dsub
 1367              	.LVL127:
 1368 013c CAE90201 		strd	r0, [r10, #8]
 468:Src/Eagle_TRT.c **** }
 1369              		.loc 1 468 0
 1370 0140 DAE90A23 		ldrd	r2, [r10, #40]
 1371 0144 2046     		mov	r0, r4
 1372 0146 2946     		mov	r1, r5
 1373 0148 FFF7FEFF 		bl	__aeabi_dsub
 1374              	.LVL128:
 1375 014c CAE90401 		strd	r0, [r10, #16]
 1376 0150 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1377              	.LVL129:
 1378              	.L92:
 1379              		.align	2
 1380              	.L91:
 1381 0154 00000000 		.word	.LANCHOR29
 1382 0158 00000000 		.word	.LANCHOR30
 1383 015c 00000000 		.word	.LANCHOR31
 1384 0160 00000000 		.word	.LANCHOR32
 1385 0164 00000000 		.word	.LANCHOR33
 1386 0168 00000000 		.word	.LANCHOR34
 1387 016c 0000E040 		.word	1088421888
 1388 0170 0000F040 		.word	1089470464
 1389 0174 00000038 		.word	939524096
 1390              		.cfi_endproc
ARM GAS  /tmp/ccuwAQC3.s 			page 44


 1391              	.LFE138:
 1393              		.global	__aeabi_dadd
 1394              		.global	__aeabi_ddiv
 1395              		.section	.text.LSM9DS0_calibration,"ax",%progbits
 1396              		.align	1
 1397              		.global	LSM9DS0_calibration
 1398              		.syntax unified
 1399              		.thumb
 1400              		.thumb_func
 1401              		.fpu fpv4-sp-d16
 1403              	LSM9DS0_calibration:
 1404              	.LFB135:
 315:Src/Eagle_TRT.c **** 	double x = 0, y = 0, z = 0;
 1405              		.loc 1 315 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 0, uses_anonymous_args = 0
 1409              	.LVL130:
 1410 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1411              	.LCFI19:
 1412              		.cfi_def_cfa_offset 40
 1413              		.cfi_offset 3, -40
 1414              		.cfi_offset 4, -36
 1415              		.cfi_offset 5, -32
 1416              		.cfi_offset 6, -28
 1417              		.cfi_offset 7, -24
 1418              		.cfi_offset 8, -20
 1419              		.cfi_offset 9, -16
 1420              		.cfi_offset 10, -12
 1421              		.cfi_offset 11, -8
 1422              		.cfi_offset 14, -4
 1423 0004 8246     		mov	r10, r0
 1424              	.LVL131:
 1425              	.LBB4:
 318:Src/Eagle_TRT.c **** 	{
 1426              		.loc 1 318 0
 1427 0006 4FF0000B 		mov	fp, #0
 1428              	.LBE4:
 316:Src/Eagle_TRT.c **** 	int iterations = 200;
 1429              		.loc 1 316 0
 1430 000a 0024     		movs	r4, #0
 1431 000c 0025     		movs	r5, #0
 1432 000e 2646     		mov	r6, r4
 1433 0010 2F46     		mov	r7, r5
 1434 0012 A046     		mov	r8, r4
 1435 0014 A946     		mov	r9, r5
 1436              	.LBB5:
 318:Src/Eagle_TRT.c **** 	{
 1437              		.loc 1 318 0
 1438 0016 1FE0     		b	.L94
 1439              	.LVL132:
 1440              	.L95:
 320:Src/Eagle_TRT.c **** 		//imu_elaborate_data(imu);
 1441              		.loc 1 320 0 discriminator 3
 1442 0018 5046     		mov	r0, r10
 1443 001a FFF7FEFF 		bl	LSMD9S0_accel_read
 1444              	.LVL133:
ARM GAS  /tmp/ccuwAQC3.s 			page 45


 322:Src/Eagle_TRT.c **** 		y += imu->y;
 1445              		.loc 1 322 0 discriminator 3
 1446 001e DAE90023 		ldrd	r2, [r10]
 1447 0022 4046     		mov	r0, r8
 1448 0024 4946     		mov	r1, r9
 1449 0026 FFF7FEFF 		bl	__aeabi_dadd
 1450              	.LVL134:
 1451 002a 8046     		mov	r8, r0
 1452              	.LVL135:
 1453 002c 8946     		mov	r9, r1
 1454              	.LVL136:
 323:Src/Eagle_TRT.c **** 		z += imu->z;
 1455              		.loc 1 323 0 discriminator 3
 1456 002e DAE90223 		ldrd	r2, [r10, #8]
 1457 0032 3046     		mov	r0, r6
 1458 0034 3946     		mov	r1, r7
 1459 0036 FFF7FEFF 		bl	__aeabi_dadd
 1460              	.LVL137:
 1461 003a 0646     		mov	r6, r0
 1462              	.LVL138:
 1463 003c 0F46     		mov	r7, r1
 1464              	.LVL139:
 324:Src/Eagle_TRT.c **** 		HAL_Delay(1);
 1465              		.loc 1 324 0 discriminator 3
 1466 003e DAE90423 		ldrd	r2, [r10, #16]
 1467 0042 2046     		mov	r0, r4
 1468 0044 2946     		mov	r1, r5
 1469 0046 FFF7FEFF 		bl	__aeabi_dadd
 1470              	.LVL140:
 1471 004a 0446     		mov	r4, r0
 1472              	.LVL141:
 1473 004c 0D46     		mov	r5, r1
 1474              	.LVL142:
 325:Src/Eagle_TRT.c **** 	}
 1475              		.loc 1 325 0 discriminator 3
 1476 004e 0120     		movs	r0, #1
 1477 0050 FFF7FEFF 		bl	HAL_Delay
 1478              	.LVL143:
 318:Src/Eagle_TRT.c **** 	{
 1479              		.loc 1 318 0 discriminator 3
 1480 0054 0BF1010B 		add	fp, fp, #1
 1481              	.LVL144:
 1482              	.L94:
 318:Src/Eagle_TRT.c **** 	{
 1483              		.loc 1 318 0 is_stmt 0 discriminator 1
 1484 0058 BBF1C70F 		cmp	fp, #199
 1485 005c DCDD     		ble	.L95
 1486              	.LBE5:
 328:Src/Eagle_TRT.c **** 	imu->y_offset = y / iterations;
 1487              		.loc 1 328 0 is_stmt 1
 1488 005e 0022     		movs	r2, #0
 1489 0060 0D4B     		ldr	r3, .L97
 1490 0062 4046     		mov	r0, r8
 1491 0064 4946     		mov	r1, r9
 1492 0066 FFF7FEFF 		bl	__aeabi_ddiv
 1493              	.LVL145:
 1494 006a CAE90601 		strd	r0, [r10, #24]
ARM GAS  /tmp/ccuwAQC3.s 			page 46


 329:Src/Eagle_TRT.c **** 	imu->z_offset = z / iterations;
 1495              		.loc 1 329 0
 1496 006e 0022     		movs	r2, #0
 1497 0070 094B     		ldr	r3, .L97
 1498 0072 3046     		mov	r0, r6
 1499 0074 3946     		mov	r1, r7
 1500 0076 FFF7FEFF 		bl	__aeabi_ddiv
 1501              	.LVL146:
 1502 007a CAE90801 		strd	r0, [r10, #32]
 330:Src/Eagle_TRT.c **** 
 1503              		.loc 1 330 0
 1504 007e 0022     		movs	r2, #0
 1505 0080 054B     		ldr	r3, .L97
 1506 0082 2046     		mov	r0, r4
 1507 0084 2946     		mov	r1, r5
 1508 0086 FFF7FEFF 		bl	__aeabi_ddiv
 1509              	.LVL147:
 1510 008a CAE90A01 		strd	r0, [r10, #40]
 332:Src/Eagle_TRT.c **** }
 1511              		.loc 1 332 0
 1512 008e 0123     		movs	r3, #1
 1513 0090 CAF81032 		str	r3, [r10, #528]
 1514 0094 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1515              	.LVL148:
 1516              	.L98:
 1517              		.align	2
 1518              	.L97:
 1519 0098 00006940 		.word	1080623104
 1520              		.cfi_endproc
 1521              	.LFE135:
 1523              		.section	.text.CAN_Send,"ax",%progbits
 1524              		.align	1
 1525              		.global	CAN_Send
 1526              		.syntax unified
 1527              		.thumb
 1528              		.thumb_func
 1529              		.fpu fpv4-sp-d16
 1531              	CAN_Send:
 1532              	.LFB139:
 482:Src/Eagle_TRT.c **** 
 1533              		.loc 1 482 0
 1534              		.cfi_startproc
 1535              		@ args = 0, pretend = 0, frame = 32
 1536              		@ frame_needed = 0, uses_anonymous_args = 0
 1537              	.LVL149:
 1538 0000 10B5     		push	{r4, lr}
 1539              	.LCFI20:
 1540              		.cfi_def_cfa_offset 8
 1541              		.cfi_offset 4, -8
 1542              		.cfi_offset 14, -4
 1543 0002 88B0     		sub	sp, sp, #32
 1544              	.LCFI21:
 1545              		.cfi_def_cfa_offset 40
 1546 0004 0446     		mov	r4, r0
 1547              	.LVL150:
 488:Src/Eagle_TRT.c **** 	TxHeader.IDE = CAN_ID_STD;
 1548              		.loc 1 488 0
ARM GAS  /tmp/ccuwAQC3.s 			page 47


 1549 0006 0368     		ldr	r3, [r0]
 1550 0008 0193     		str	r3, [sp, #4]
 489:Src/Eagle_TRT.c **** 	TxHeader.RTR = CAN_RTR_DATA;
 1551              		.loc 1 489 0
 1552 000a 0023     		movs	r3, #0
 1553 000c 0393     		str	r3, [sp, #12]
 490:Src/Eagle_TRT.c **** 	TxHeader.DLC = can->size;
 1554              		.loc 1 490 0
 1555 000e 0493     		str	r3, [sp, #16]
 491:Src/Eagle_TRT.c **** 	TxHeader.TransmitGlobalTime = DISABLE;
 1556              		.loc 1 491 0
 1557 0010 4268     		ldr	r2, [r0, #4]
 1558 0012 0592     		str	r2, [sp, #20]
 492:Src/Eagle_TRT.c **** 
 1559              		.loc 1 492 0
 1560 0014 8DF81830 		strb	r3, [sp, #24]
 494:Src/Eagle_TRT.c **** 	{
 1561              		.loc 1 494 0
 1562 0018 8069     		ldr	r0, [r0, #24]
 1563              	.LVL151:
 1564 001a FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1565              	.LVL152:
 1566 001e 10B9     		cbnz	r0, .L104
 485:Src/Eagle_TRT.c **** 
 1567              		.loc 1 485 0
 1568 0020 0020     		movs	r0, #0
 1569              	.LVL153:
 1570              	.L100:
 501:Src/Eagle_TRT.c **** 
 1571              		.loc 1 501 0
 1572 0022 08B0     		add	sp, sp, #32
 1573              	.LCFI22:
 1574              		.cfi_remember_state
 1575              		.cfi_def_cfa_offset 8
 1576              		@ sp needed
 1577 0024 10BD     		pop	{r4, pc}
 1578              	.LVL154:
 1579              	.L104:
 1580              	.LCFI23:
 1581              		.cfi_restore_state
 494:Src/Eagle_TRT.c **** 	{
 1582              		.loc 1 494 0 discriminator 1
 1583 0026 0121     		movs	r1, #1
 1584 0028 A069     		ldr	r0, [r4, #24]
 1585 002a FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 1586              	.LVL155:
 1587 002e 08B1     		cbz	r0, .L105
 485:Src/Eagle_TRT.c **** 
 1588              		.loc 1 485 0
 1589 0030 0020     		movs	r0, #0
 1590 0032 F6E7     		b	.L100
 1591              	.L105:
 496:Src/Eagle_TRT.c **** 		flag = 1;
 1592              		.loc 1 496 0
 1593 0034 07AB     		add	r3, sp, #28
 1594 0036 04F10802 		add	r2, r4, #8
 1595 003a 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccuwAQC3.s 			page 48


 1596 003c A069     		ldr	r0, [r4, #24]
 1597 003e FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1598              	.LVL156:
 497:Src/Eagle_TRT.c **** 	}
 1599              		.loc 1 497 0
 1600 0042 0120     		movs	r0, #1
 1601 0044 EDE7     		b	.L100
 1602              		.cfi_endproc
 1603              	.LFE139:
 1605              		.section	.text.CAN_Receive,"ax",%progbits
 1606              		.align	1
 1607              		.global	CAN_Receive
 1608              		.syntax unified
 1609              		.thumb
 1610              		.thumb_func
 1611              		.fpu fpv4-sp-d16
 1613              	CAN_Receive:
 1614              	.LFB140:
 509:Src/Eagle_TRT.c **** 
 1615              		.loc 1 509 0
 1616              		.cfi_startproc
 1617              		@ args = 0, pretend = 0, frame = 32
 1618              		@ frame_needed = 0, uses_anonymous_args = 0
 1619              	.LVL157:
 1620 0000 10B5     		push	{r4, lr}
 1621              	.LCFI24:
 1622              		.cfi_def_cfa_offset 8
 1623              		.cfi_offset 4, -8
 1624              		.cfi_offset 14, -4
 1625 0002 88B0     		sub	sp, sp, #32
 1626              	.LCFI25:
 1627              		.cfi_def_cfa_offset 40
 1628 0004 0446     		mov	r4, r0
 513:Src/Eagle_TRT.c **** 	{
 1629              		.loc 1 513 0
 1630 0006 0021     		movs	r1, #0
 1631 0008 8069     		ldr	r0, [r0, #24]
 1632              	.LVL158:
 1633 000a FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 1634              	.LVL159:
 1635 000e 10B9     		cbnz	r0, .L109
 1636              	.L107:
 1637              	.LVL160:
 521:Src/Eagle_TRT.c **** #endif
 1638              		.loc 1 521 0
 1639 0010 0198     		ldr	r0, [sp, #4]
 1640 0012 08B0     		add	sp, sp, #32
 1641              	.LCFI26:
 1642              		.cfi_remember_state
 1643              		.cfi_def_cfa_offset 8
 1644              		@ sp needed
 1645 0014 10BD     		pop	{r4, pc}
 1646              	.LVL161:
 1647              	.L109:
 1648              	.LCFI27:
 1649              		.cfi_restore_state
 515:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccuwAQC3.s 			page 49


 1650              		.loc 1 515 0
 1651 0016 04F11003 		add	r3, r4, #16
 1652 001a 01AA     		add	r2, sp, #4
 1653 001c 0021     		movs	r1, #0
 1654 001e A069     		ldr	r0, [r4, #24]
 1655 0020 FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1656              	.LVL162:
 1657 0024 F4E7     		b	.L107
 1658              		.cfi_endproc
 1659              	.LFE140:
 1661              		.section	.text.init,"ax",%progbits
 1662              		.align	1
 1663              		.global	init
 1664              		.syntax unified
 1665              		.thumb
 1666              		.thumb_func
 1667              		.fpu fpv4-sp-d16
 1669              	init:
 1670              	.LFB142:
 536:Src/Eagle_TRT.c **** 
 1671              		.loc 1 536 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 0
 1674              		@ frame_needed = 0, uses_anonymous_args = 0
 1675              		@ link register save eliminated.
 1676              	.LVL163:
 538:Src/Eagle_TRT.c **** 	q->dim = 40;
 1677              		.loc 1 538 0
 1678 0000 0023     		movs	r3, #0
 1679 0002 0360     		str	r3, [r0]
 1680 0004 4360     		str	r3, [r0, #4]
 539:Src/Eagle_TRT.c **** }
 1681              		.loc 1 539 0
 1682 0006 2823     		movs	r3, #40
 1683 0008 8360     		str	r3, [r0, #8]
 1684 000a 7047     		bx	lr
 1685              		.cfi_endproc
 1686              	.LFE142:
 1688              		.section	.text.push,"ax",%progbits
 1689              		.align	1
 1690              		.global	push
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1694              		.fpu fpv4-sp-d16
 1696              	push:
 1697              	.LFB145:
 555:Src/Eagle_TRT.c **** 	int res;
 1698              		.loc 1 555 0
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 0
 1701              		@ frame_needed = 0, uses_anonymous_args = 0
 1702              	.LVL164:
 1703 0000 70B5     		push	{r4, r5, r6, lr}
 1704              	.LCFI28:
 1705              		.cfi_def_cfa_offset 16
 1706              		.cfi_offset 4, -16
ARM GAS  /tmp/ccuwAQC3.s 			page 50


 1707              		.cfi_offset 5, -12
 1708              		.cfi_offset 6, -8
 1709              		.cfi_offset 14, -4
 1710 0002 0646     		mov	r6, r0
 1711 0004 0C46     		mov	r4, r1
 557:Src/Eagle_TRT.c **** 	{
 1712              		.loc 1 557 0
 1713 0006 0846     		mov	r0, r1
 1714              	.LVL165:
 1715 0008 FFF7FEFF 		bl	fullp
 1716              	.LVL166:
 1717 000c 08B1     		cbz	r0, .L116
 559:Src/Eagle_TRT.c **** 	}
 1718              		.loc 1 559 0
 1719 000e 0020     		movs	r0, #0
 1720              	.LVL167:
 579:Src/Eagle_TRT.c **** 
 1721              		.loc 1 579 0
 1722 0010 70BD     		pop	{r4, r5, r6, pc}
 1723              	.LVL168:
 1724              	.L116:
 1725              	.LBB6:
 563:Src/Eagle_TRT.c **** 		q->elem[q->tail] = (char *)malloc(sizeof(char) * length);
 1726              		.loc 1 563 0
 1727 0012 3046     		mov	r0, r6
 1728 0014 FFF7FEFF 		bl	strlen
 1729              	.LVL169:
 564:Src/Eagle_TRT.c **** 		strcpy(q->elem[q->tail], str);
 1730              		.loc 1 564 0
 1731 0018 6568     		ldr	r5, [r4, #4]
 1732 001a FFF7FEFF 		bl	malloc
 1733              	.LVL170:
 1734 001e 0235     		adds	r5, r5, #2
 1735 0020 04EB8505 		add	r5, r4, r5, lsl #2
 1736 0024 6860     		str	r0, [r5, #4]
 565:Src/Eagle_TRT.c **** 		//q->tail = next(q->tail,q->dim);
 1737              		.loc 1 565 0
 1738 0026 3146     		mov	r1, r6
 1739 0028 FFF7FEFF 		bl	strcpy
 1740              	.LVL171:
 567:Src/Eagle_TRT.c **** 		{
 1741              		.loc 1 567 0
 1742 002c 6368     		ldr	r3, [r4, #4]
 1743 002e 272B     		cmp	r3, #39
 1744 0030 03D0     		beq	.L117
 573:Src/Eagle_TRT.c **** 		}
 1745              		.loc 1 573 0
 1746 0032 0133     		adds	r3, r3, #1
 1747 0034 6360     		str	r3, [r4, #4]
 575:Src/Eagle_TRT.c **** 	}
 1748              		.loc 1 575 0
 1749 0036 0120     		movs	r0, #1
 1750 0038 70BD     		pop	{r4, r5, r6, pc}
 1751              	.LVL172:
 1752              	.L117:
 569:Src/Eagle_TRT.c **** 		}
 1753              		.loc 1 569 0
ARM GAS  /tmp/ccuwAQC3.s 			page 51


 1754 003a 0023     		movs	r3, #0
 1755 003c 6360     		str	r3, [r4, #4]
 575:Src/Eagle_TRT.c **** 	}
 1756              		.loc 1 575 0
 1757 003e 0120     		movs	r0, #1
 1758 0040 70BD     		pop	{r4, r5, r6, pc}
 1759              	.LBE6:
 1760              		.cfi_endproc
 1761              	.LFE145:
 1763              		.section	.text.pop,"ax",%progbits
 1764              		.align	1
 1765              		.global	pop
 1766              		.syntax unified
 1767              		.thumb
 1768              		.thumb_func
 1769              		.fpu fpv4-sp-d16
 1771              	pop:
 1772              	.LFB146:
 582:Src/Eagle_TRT.c **** 	int res;
 1773              		.loc 1 582 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 0
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 1777              	.LVL173:
 1778 0000 38B5     		push	{r3, r4, r5, lr}
 1779              	.LCFI29:
 1780              		.cfi_def_cfa_offset 16
 1781              		.cfi_offset 3, -16
 1782              		.cfi_offset 4, -12
 1783              		.cfi_offset 5, -8
 1784              		.cfi_offset 14, -4
 1785 0002 0546     		mov	r5, r0
 1786 0004 0C46     		mov	r4, r1
 584:Src/Eagle_TRT.c **** 	{
 1787              		.loc 1 584 0
 1788 0006 0846     		mov	r0, r1
 1789              	.LVL174:
 1790 0008 FFF7FEFF 		bl	emptyp
 1791              	.LVL175:
 1792 000c 08B1     		cbz	r0, .L123
 586:Src/Eagle_TRT.c **** 	}
 1793              		.loc 1 586 0
 1794 000e 0020     		movs	r0, #0
 1795              	.LVL176:
 605:Src/Eagle_TRT.c **** /// ---- end queue ----///
 1796              		.loc 1 605 0
 1797 0010 38BD     		pop	{r3, r4, r5, pc}
 1798              	.LVL177:
 1799              	.L123:
 590:Src/Eagle_TRT.c **** 		free(q->elem[q->head]);
 1800              		.loc 1 590 0
 1801 0012 2368     		ldr	r3, [r4]
 1802 0014 0233     		adds	r3, r3, #2
 1803 0016 04EB8303 		add	r3, r4, r3, lsl #2
 1804 001a 5968     		ldr	r1, [r3, #4]
 1805 001c 2846     		mov	r0, r5
 1806 001e FFF7FEFF 		bl	strcpy
ARM GAS  /tmp/ccuwAQC3.s 			page 52


 1807              	.LVL178:
 591:Src/Eagle_TRT.c **** 		//q->head = next(q->head,q->dim);
 1808              		.loc 1 591 0
 1809 0022 2368     		ldr	r3, [r4]
 1810 0024 0233     		adds	r3, r3, #2
 1811 0026 04EB8303 		add	r3, r4, r3, lsl #2
 1812 002a 5868     		ldr	r0, [r3, #4]
 1813 002c FFF7FEFF 		bl	free
 1814              	.LVL179:
 593:Src/Eagle_TRT.c **** 		{
 1815              		.loc 1 593 0
 1816 0030 2368     		ldr	r3, [r4]
 1817 0032 272B     		cmp	r3, #39
 1818 0034 03D0     		beq	.L124
 599:Src/Eagle_TRT.c **** 		}
 1819              		.loc 1 599 0
 1820 0036 0133     		adds	r3, r3, #1
 1821 0038 2360     		str	r3, [r4]
 601:Src/Eagle_TRT.c **** 	}
 1822              		.loc 1 601 0
 1823 003a 0120     		movs	r0, #1
 1824 003c 38BD     		pop	{r3, r4, r5, pc}
 1825              	.LVL180:
 1826              	.L124:
 595:Src/Eagle_TRT.c **** 		}
 1827              		.loc 1 595 0
 1828 003e 0023     		movs	r3, #0
 1829 0040 2360     		str	r3, [r4]
 601:Src/Eagle_TRT.c **** 	}
 1830              		.loc 1 601 0
 1831 0042 0120     		movs	r0, #1
 1832 0044 38BD     		pop	{r3, r4, r5, pc}
 1833              		.cfi_endproc
 1834              	.LFE146:
 1836              		.section	.text.print,"ax",%progbits
 1837              		.align	1
 1838              		.global	print
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	print:
 1845              	.LFB147:
 610:Src/Eagle_TRT.c **** 
 1846              		.loc 1 610 0
 1847              		.cfi_startproc
 1848              		@ args = 0, pretend = 0, frame = 0
 1849              		@ frame_needed = 0, uses_anonymous_args = 0
 1850              	.LVL181:
 1851 0000 38B5     		push	{r3, r4, r5, lr}
 1852              	.LCFI30:
 1853              		.cfi_def_cfa_offset 16
 1854              		.cfi_offset 3, -16
 1855              		.cfi_offset 4, -12
 1856              		.cfi_offset 5, -8
 1857              		.cfi_offset 14, -4
 1858 0002 0546     		mov	r5, r0
ARM GAS  /tmp/ccuwAQC3.s 			page 53


 1859 0004 0C46     		mov	r4, r1
 1860              	.LVL182:
 614:Src/Eagle_TRT.c **** 	{
 1861              		.loc 1 614 0
 1862 0006 0846     		mov	r0, r1
 1863              	.LVL183:
 1864 0008 FFF7FEFF 		bl	strlen
 1865              	.LVL184:
 1866 000c 82B2     		uxth	r2, r0
 1867 000e 2146     		mov	r1, r4
 1868 0010 2846     		mov	r0, r5
 1869 0012 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 1870              	.LVL185:
 1871 0016 10B9     		cbnz	r0, .L130
 616:Src/Eagle_TRT.c **** 	}
 1872              		.loc 1 616 0
 1873 0018 0123     		movs	r3, #1
 1874              	.LVL186:
 1875              	.L125:
 631:Src/Eagle_TRT.c **** 
 1876              		.loc 1 631 0
 1877 001a 1846     		mov	r0, r3
 1878 001c 38BD     		pop	{r3, r4, r5, pc}
 1879              	.LVL187:
 1880              	.L130:
 620:Src/Eagle_TRT.c **** 		{
 1881              		.loc 1 620 0
 1882 001e 0449     		ldr	r1, .L131
 1883 0020 2046     		mov	r0, r4
 1884 0022 FFF7FEFF 		bl	push
 1885              	.LVL188:
 1886 0026 0346     		mov	r3, r0
 1887 0028 0028     		cmp	r0, #0
 1888 002a F6D0     		beq	.L125
 626:Src/Eagle_TRT.c **** 		}
 1889              		.loc 1 626 0
 1890 002c 0123     		movs	r3, #1
 1891              	.LVL189:
 630:Src/Eagle_TRT.c **** }
 1892              		.loc 1 630 0
 1893 002e F4E7     		b	.L125
 1894              	.L132:
 1895              		.align	2
 1896              	.L131:
 1897 0030 00000000 		.word	.LANCHOR35
 1898              		.cfi_endproc
 1899              	.LFE147:
 1901              		.section	.text.print_it,"ax",%progbits
 1902              		.align	1
 1903              		.global	print_it
 1904              		.syntax unified
 1905              		.thumb
 1906              		.thumb_func
 1907              		.fpu fpv4-sp-d16
 1909              	print_it:
 1910              	.LFB148:
 634:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 54


 1911              		.loc 1 634 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 56
 1914              		@ frame_needed = 0, uses_anonymous_args = 0
 1915              	.LVL190:
 1916 0000 10B5     		push	{r4, lr}
 1917              	.LCFI31:
 1918              		.cfi_def_cfa_offset 8
 1919              		.cfi_offset 4, -8
 1920              		.cfi_offset 14, -4
 1921 0002 8EB0     		sub	sp, sp, #56
 1922              	.LCFI32:
 1923              		.cfi_def_cfa_offset 64
 1924 0004 0446     		mov	r4, r0
 638:Src/Eagle_TRT.c **** 	{
 1925              		.loc 1 638 0
 1926 0006 0849     		ldr	r1, .L137
 1927 0008 01A8     		add	r0, sp, #4
 1928              	.LVL191:
 1929 000a FFF7FEFF 		bl	pop
 1930              	.LVL192:
 1931 000e 0128     		cmp	r0, #1
 1932 0010 01D0     		beq	.L136
 1933              	.L133:
 642:Src/Eagle_TRT.c **** 
 1934              		.loc 1 642 0
 1935 0012 0EB0     		add	sp, sp, #56
 1936              	.LCFI33:
 1937              		.cfi_remember_state
 1938              		.cfi_def_cfa_offset 8
 1939              		@ sp needed
 1940 0014 10BD     		pop	{r4, pc}
 1941              	.LVL193:
 1942              	.L136:
 1943              	.LCFI34:
 1944              		.cfi_restore_state
 640:Src/Eagle_TRT.c **** 	}
 1945              		.loc 1 640 0
 1946 0016 01A8     		add	r0, sp, #4
 1947 0018 FFF7FEFF 		bl	strlen
 1948              	.LVL194:
 1949 001c 82B2     		uxth	r2, r0
 1950 001e 01A9     		add	r1, sp, #4
 1951 0020 2046     		mov	r0, r4
 1952 0022 FFF7FEFF 		bl	HAL_UART_Transmit_IT
 1953              	.LVL195:
 642:Src/Eagle_TRT.c **** 
 1954              		.loc 1 642 0
 1955 0026 F4E7     		b	.L133
 1956              	.L138:
 1957              		.align	2
 1958              	.L137:
 1959 0028 00000000 		.word	.LANCHOR35
 1960              		.cfi_endproc
 1961              	.LFE148:
 1963              		.section	.text.gps_init,"ax",%progbits
 1964              		.align	1
ARM GAS  /tmp/ccuwAQC3.s 			page 55


 1965              		.global	gps_init
 1966              		.syntax unified
 1967              		.thumb
 1968              		.thumb_func
 1969              		.fpu fpv4-sp-d16
 1971              	gps_init:
 1972              	.LFB149:
 664:Src/Eagle_TRT.c **** 
 1973              		.loc 1 664 0
 1974              		.cfi_startproc
 1975              		@ args = 0, pretend = 0, frame = 0
 1976              		@ frame_needed = 0, uses_anonymous_args = 0
 1977              	.LVL196:
 1978 0000 70B5     		push	{r4, r5, r6, lr}
 1979              	.LCFI35:
 1980              		.cfi_def_cfa_offset 16
 1981              		.cfi_offset 4, -16
 1982              		.cfi_offset 5, -12
 1983              		.cfi_offset 6, -8
 1984              		.cfi_offset 14, -4
 1985 0002 0C46     		mov	r4, r1
 667:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 9600;
 1986              		.loc 1 667 0
 1987 0004 3D4D     		ldr	r5, .L141
 1988 0006 2860     		str	r0, [r5]
 668:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 1989              		.loc 1 668 0
 1990 0008 4FF41652 		mov	r2, #9600
 1991 000c 4260     		str	r2, [r0, #4]
 669:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 1992              		.loc 1 669 0
 1993 000e FFF7FEFF 		bl	HAL_UART_Init
 1994              	.LVL197:
 670:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 1995              		.loc 1 670 0
 1996 0012 3B4E     		ldr	r6, .L141+4
 1997 0014 C823     		movs	r3, #200
 1998 0016 1422     		movs	r2, #20
 1999 0018 3146     		mov	r1, r6
 2000 001a 2868     		ldr	r0, [r5]
 2001 001c FFF7FEFF 		bl	HAL_UART_Transmit
 2002              	.LVL198:
 671:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 57600;
 2003              		.loc 1 671 0
 2004 0020 4FF4FA70 		mov	r0, #500
 2005 0024 FFF7FEFF 		bl	HAL_Delay
 2006              	.LVL199:
 672:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 2007              		.loc 1 672 0
 2008 0028 2868     		ldr	r0, [r5]
 2009 002a 4FF46143 		mov	r3, #57600
 2010 002e 4360     		str	r3, [r0, #4]
 673:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 2011              		.loc 1 673 0
 2012 0030 FFF7FEFF 		bl	HAL_UART_Init
 2013              	.LVL200:
 674:Src/Eagle_TRT.c **** 	HAL_Delay(500);
ARM GAS  /tmp/ccuwAQC3.s 			page 56


 2014              		.loc 1 674 0
 2015 0034 C823     		movs	r3, #200
 2016 0036 1422     		movs	r2, #20
 2017 0038 3146     		mov	r1, r6
 2018 003a 2868     		ldr	r0, [r5]
 2019 003c FFF7FEFF 		bl	HAL_UART_Transmit
 2020              	.LVL201:
 675:Src/Eagle_TRT.c **** 	huart_GPS->Init.BaudRate = 115200;
 2021              		.loc 1 675 0
 2022 0040 4FF4FA70 		mov	r0, #500
 2023 0044 FFF7FEFF 		bl	HAL_Delay
 2024              	.LVL202:
 676:Src/Eagle_TRT.c **** 	HAL_UART_Init(huart_GPS);
 2025              		.loc 1 676 0
 2026 0048 2868     		ldr	r0, [r5]
 2027 004a 4FF4E133 		mov	r3, #115200
 2028 004e 4360     		str	r3, [r0, #4]
 677:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 2029              		.loc 1 677 0
 2030 0050 FFF7FEFF 		bl	HAL_UART_Init
 2031              	.LVL203:
 678:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 2032              		.loc 1 678 0
 2033 0054 C823     		movs	r3, #200
 2034 0056 1422     		movs	r2, #20
 2035 0058 3146     		mov	r1, r6
 2036 005a 2868     		ldr	r0, [r5]
 2037 005c FFF7FEFF 		bl	HAL_UART_Transmit
 2038              	.LVL204:
 679:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10H
 2039              		.loc 1 679 0
 2040 0060 4FF4FA70 		mov	r0, #500
 2041 0064 FFF7FEFF 		bl	HAL_Delay
 2042              	.LVL205:
 680:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 2043              		.loc 1 680 0
 2044 0068 C823     		movs	r3, #200
 2045 006a 1122     		movs	r2, #17
 2046 006c 2549     		ldr	r1, .L141+8
 2047 006e 2868     		ldr	r0, [r5]
 2048 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 2049              	.LVL206:
 681:Src/Eagle_TRT.c **** 	HAL_UART_Transmit(huart_GPS, (uint8_t *)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_G
 2050              		.loc 1 681 0
 2051 0074 4FF4FA70 		mov	r0, #500
 2052 0078 FFF7FEFF 		bl	HAL_Delay
 2053              	.LVL207:
 682:Src/Eagle_TRT.c **** 	HAL_Delay(500);
 2054              		.loc 1 682 0
 2055 007c C823     		movs	r3, #200
 2056 007e 3322     		movs	r2, #51
 2057 0080 2149     		ldr	r1, .L141+12
 2058 0082 2868     		ldr	r0, [r5]
 2059 0084 FFF7FEFF 		bl	HAL_UART_Transmit
 2060              	.LVL208:
 683:Src/Eagle_TRT.c **** 	strcpy(gps->speed, "000.00");
 2061              		.loc 1 683 0
ARM GAS  /tmp/ccuwAQC3.s 			page 57


 2062 0088 4FF4FA70 		mov	r0, #500
 2063 008c FFF7FEFF 		bl	HAL_Delay
 2064              	.LVL209:
 684:Src/Eagle_TRT.c **** 	strcpy(gps->latitude, "0000.0000");
 2065              		.loc 1 684 0
 2066 0090 1E4B     		ldr	r3, .L141+16
 2067 0092 1868     		ldr	r0, [r3]
 2068 0094 2060     		str	r0, [r4]	@ unaligned
 2069 0096 9A88     		ldrh	r2, [r3, #4]	@ unaligned
 2070 0098 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2071 009a A280     		strh	r2, [r4, #4]	@ unaligned
 2072 009c A371     		strb	r3, [r4, #6]
 685:Src/Eagle_TRT.c **** 	strcpy(gps->latitude_o, "N");
 2073              		.loc 1 685 0
 2074 009e 1C4B     		ldr	r3, .L141+20
 2075 00a0 03CB     		ldmia	r3!, {r0, r1}
 2076 00a2 E060     		str	r0, [r4, #12]	@ unaligned
 2077 00a4 2161     		str	r1, [r4, #16]	@ unaligned
 2078 00a6 1B88     		ldrh	r3, [r3]	@ unaligned
 2079 00a8 A382     		strh	r3, [r4, #20]	@ unaligned
 686:Src/Eagle_TRT.c **** 	strcpy(gps->longitude, "00000.0000");
 2080              		.loc 1 686 0
 2081 00aa 1A4B     		ldr	r3, .L141+24
 2082 00ac 1B88     		ldrh	r3, [r3]	@ unaligned
 2083 00ae A383     		strh	r3, [r4, #28]	@ unaligned
 687:Src/Eagle_TRT.c **** 	strcpy(gps->longitude_o, "W");
 2084              		.loc 1 687 0
 2085 00b0 194B     		ldr	r3, .L141+28
 2086 00b2 03CB     		ldmia	r3!, {r0, r1}
 2087 00b4 E062     		str	r0, [r4, #44]	@ unaligned
 2088 00b6 2163     		str	r1, [r4, #48]	@ unaligned
 2089 00b8 1988     		ldrh	r1, [r3]	@ unaligned
 2090 00ba 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2091 00bc A186     		strh	r1, [r4, #52]	@ unaligned
 2092 00be 84F83630 		strb	r3, [r4, #54]
 688:Src/Eagle_TRT.c **** 	strcpy(gps->altitude, "0000.0");
 2093              		.loc 1 688 0
 2094 00c2 164B     		ldr	r3, .L141+32
 2095 00c4 1B88     		ldrh	r3, [r3]	@ unaligned
 2096 00c6 A387     		strh	r3, [r4, #60]	@ unaligned
 689:Src/Eagle_TRT.c **** 	strcpy(gps->time, "000000");
 2097              		.loc 1 689 0
 2098 00c8 154B     		ldr	r3, .L141+36
 2099 00ca 1868     		ldr	r0, [r3]
 2100 00cc E064     		str	r0, [r4, #76]	@ unaligned
 2101 00ce 9988     		ldrh	r1, [r3, #4]	@ unaligned
 2102 00d0 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2103 00d2 A4F85010 		strh	r1, [r4, #80]	@ unaligned
 2104 00d6 84F85230 		strb	r3, [r4, #82]
 690:Src/Eagle_TRT.c **** 	HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 2105              		.loc 1 690 0
 2106 00da 124B     		ldr	r3, .L141+40
 2107 00dc 1868     		ldr	r0, [r3]
 2108 00de A065     		str	r0, [r4, #88]	@ unaligned
 2109 00e0 9988     		ldrh	r1, [r3, #4]	@ unaligned
 2110 00e2 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 2111 00e4 A4F85C10 		strh	r1, [r4, #92]	@ unaligned
ARM GAS  /tmp/ccuwAQC3.s 			page 58


 2112 00e8 84F85E30 		strb	r3, [r4, #94]
 691:Src/Eagle_TRT.c **** 
 2113              		.loc 1 691 0
 2114 00ec 0122     		movs	r2, #1
 2115 00ee 0E49     		ldr	r1, .L141+44
 2116 00f0 2868     		ldr	r0, [r5]
 2117 00f2 FFF7FEFF 		bl	HAL_UART_Receive_IT
 2118              	.LVL210:
 694:Src/Eagle_TRT.c **** 
 2119              		.loc 1 694 0
 2120 00f6 0120     		movs	r0, #1
 2121 00f8 70BD     		pop	{r4, r5, r6, pc}
 2122              	.LVL211:
 2123              	.L142:
 2124 00fa 00BF     		.align	2
 2125              	.L141:
 2126 00fc 00000000 		.word	huart_GPS
 2127 0100 00000000 		.word	.LC3
 2128 0104 18000000 		.word	.LC4
 2129 0108 2C000000 		.word	.LC5
 2130 010c 60000000 		.word	.LC6
 2131 0110 68000000 		.word	.LC7
 2132 0114 74000000 		.word	.LC8
 2133 0118 78000000 		.word	.LC9
 2134 011c 84000000 		.word	.LC10
 2135 0120 88000000 		.word	.LC11
 2136 0124 90000000 		.word	.LC12
 2137 0128 00000000 		.word	buffer_gps
 2138              		.cfi_endproc
 2139              	.LFE149:
 2141              		.global	__aeabi_d2iz
 2142              		.section	.text.gps_read_it,"ax",%progbits
 2143              		.align	1
 2144              		.global	gps_read_it
 2145              		.syntax unified
 2146              		.thumb
 2147              		.thumb_func
 2148              		.fpu fpv4-sp-d16
 2150              	gps_read_it:
 2151              	.LFB150:
 697:Src/Eagle_TRT.c **** 
 2152              		.loc 1 697 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 0
 2155              		@ frame_needed = 0, uses_anonymous_args = 0
 2156              	.LVL212:
 2157 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2158              	.LCFI36:
 2159              		.cfi_def_cfa_offset 24
 2160              		.cfi_offset 3, -24
 2161              		.cfi_offset 4, -20
 2162              		.cfi_offset 5, -16
 2163              		.cfi_offset 6, -12
 2164              		.cfi_offset 7, -8
 2165              		.cfi_offset 14, -4
 2166              	.LVL213:
 735:Src/Eagle_TRT.c **** 	{
ARM GAS  /tmp/ccuwAQC3.s 			page 59


 2167              		.loc 1 735 0
 2168 0002 A34B     		ldr	r3, .L197+16
 2169 0004 1B68     		ldr	r3, [r3]
 2170 0006 8342     		cmp	r3, r0
 2171 0008 02D0     		beq	.L179
 699:Src/Eagle_TRT.c **** 
 2172              		.loc 1 699 0
 2173 000a 0024     		movs	r4, #0
 2174              	.LVL214:
 2175              	.L143:
 897:Src/Eagle_TRT.c **** static int checksum(char *string_checksum, int size_string_checksum)
 2176              		.loc 1 897 0
 2177 000c 2046     		mov	r0, r4
 2178 000e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2179              	.LVL215:
 2180              	.L179:
 2181 0010 0D46     		mov	r5, r1
 738:Src/Eagle_TRT.c **** 		data_string_gps = buffer_gps[0];						  //convert a pointer into a char
 2182              		.loc 1 738 0
 2183 0012 A04C     		ldr	r4, .L197+20
 2184 0014 0122     		movs	r2, #1
 2185 0016 2146     		mov	r1, r4
 2186              	.LVL216:
 2187 0018 1846     		mov	r0, r3
 2188              	.LVL217:
 2189 001a FFF7FEFF 		bl	HAL_UART_Receive_IT
 2190              	.LVL218:
 739:Src/Eagle_TRT.c **** 		if ((start_string_gps == 1) && (data_string_gps != '$'))
 2191              		.loc 1 739 0
 2192 001e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 2193 0020 9D4A     		ldr	r2, .L197+24
 2194 0022 1370     		strb	r3, [r2]
 740:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 2195              		.loc 1 740 0
 2196 0024 9D4A     		ldr	r2, .L197+28
 2197 0026 1268     		ldr	r2, [r2]
 2198 0028 012A     		cmp	r2, #1
 2199 002a 04D0     		beq	.L180
 2200              	.L145:
 889:Src/Eagle_TRT.c **** 			{						  //check if data indicates the start of new string
 2201              		.loc 1 889 0
 2202 002c 242B     		cmp	r3, #36
 2203 002e 00F07781 		beq	.L181
 699:Src/Eagle_TRT.c **** 
 2204              		.loc 1 699 0
 2205 0032 0024     		movs	r4, #0
 896:Src/Eagle_TRT.c **** }
 2206              		.loc 1 896 0
 2207 0034 EAE7     		b	.L143
 2208              	.L180:
 740:Src/Eagle_TRT.c **** 		{											   //check that the new string has not started yet
 2209              		.loc 1 740 0 discriminator 1
 2210 0036 242B     		cmp	r3, #36
 2211 0038 F8D0     		beq	.L145
 742:Src/Eagle_TRT.c **** 			cont_string++;
 2212              		.loc 1 742 0
 2213 003a 994A     		ldr	r2, .L197+32
ARM GAS  /tmp/ccuwAQC3.s 			page 60


 2214 003c 1168     		ldr	r1, [r2]
 2215 003e 9948     		ldr	r0, .L197+36
 2216 0040 4354     		strb	r3, [r0, r1]
 743:Src/Eagle_TRT.c **** 			if (string_gps[cont_string - 1] == '\r' || string_gps[cont_string - 1] == '\n')
 2217              		.loc 1 743 0
 2218 0042 481C     		adds	r0, r1, #1
 2219 0044 1060     		str	r0, [r2]
 744:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 2220              		.loc 1 744 0
 2221 0046 0D2B     		cmp	r3, #13
 2222 0048 03D0     		beq	.L146
 744:Src/Eagle_TRT.c **** 			{ //indicates that the string is finishing
 2223              		.loc 1 744 0 is_stmt 0 discriminator 1
 2224 004a 0A2B     		cmp	r3, #10
 2225 004c 01D0     		beq	.L146
 699:Src/Eagle_TRT.c **** 
 2226              		.loc 1 699 0 is_stmt 1
 2227 004e 0024     		movs	r4, #0
 2228 0050 DCE7     		b	.L143
 2229              	.L146:
 746:Src/Eagle_TRT.c **** 				string_gps[cont_string] = '\0'; // '\0'=end of the string
 2230              		.loc 1 746 0
 2231 0052 934B     		ldr	r3, .L197+32
 2232 0054 1960     		str	r1, [r3]
 747:Src/Eagle_TRT.c **** 				start_string_gps = 0;			//end of string
 2233              		.loc 1 747 0
 2234 0056 934B     		ldr	r3, .L197+36
 2235 0058 0022     		movs	r2, #0
 2236 005a 5A54     		strb	r2, [r3, r1]
 748:Src/Eagle_TRT.c **** 				if (string_gps[2] == 'G' && string_gps[3] == 'G' && string_gps[4] == 'A')
 2237              		.loc 1 748 0
 2238 005c 8F48     		ldr	r0, .L197+28
 2239 005e 0260     		str	r2, [r0]
 749:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 2240              		.loc 1 749 0
 2241 0060 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 2242 0062 472B     		cmp	r3, #71
 2243 0064 04D0     		beq	.L182
 2244              	.L147:
 835:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2245              		.loc 1 835 0
 2246 0066 562B     		cmp	r3, #86
 2247 0068 00F0C680 		beq	.L183
 699:Src/Eagle_TRT.c **** 
 2248              		.loc 1 699 0
 2249 006c 0024     		movs	r4, #0
 2250 006e CDE7     		b	.L143
 2251              	.L182:
 749:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 2252              		.loc 1 749 0 discriminator 1
 2253 0070 8C4A     		ldr	r2, .L197+36
 2254 0072 D278     		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 2255 0074 472A     		cmp	r2, #71
 2256 0076 F6D1     		bne	.L147
 749:Src/Eagle_TRT.c **** 				{ // operation when the string is GPGGA //
 2257              		.loc 1 749 0 is_stmt 0 discriminator 2
 2258 0078 8A4A     		ldr	r2, .L197+36
ARM GAS  /tmp/ccuwAQC3.s 			page 61


 2259 007a 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 2260 007c 412A     		cmp	r2, #65
 2261 007e F2D1     		bne	.L147
 751:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 2262              		.loc 1 751 0 is_stmt 1
 2263 0080 8848     		ldr	r0, .L197+36
 2264 0082 FFF7FEFF 		bl	checksum
 2265              	.LVL219:
 2266 0086 0128     		cmp	r0, #1
 2267 0088 3BD0     		beq	.L170
 832:Src/Eagle_TRT.c **** 					}
 2268              		.loc 1 832 0
 2269 008a 0024     		movs	r4, #0
 2270 008c BEE7     		b	.L143
 2271              	.LVL220:
 2272              	.L185:
 2273              	.LBB7:
 2274              	.LBB8:
 757:Src/Eagle_TRT.c **** 							else
 2275              		.loc 1 757 0
 2276 008e 0133     		adds	r3, r3, #1
 2277              	.LVL221:
 2278              	.L150:
 754:Src/Eagle_TRT.c **** 						{
 2279              		.loc 1 754 0 discriminator 2
 2280 0090 0130     		adds	r0, r0, #1
 2281              	.LVL222:
 2282              	.L148:
 754:Src/Eagle_TRT.c **** 						{
 2283              		.loc 1 754 0 is_stmt 0 discriminator 1
 2284 0092 6328     		cmp	r0, #99
 2285 0094 3CDC     		bgt	.L184
 756:Src/Eagle_TRT.c **** 								cont_comma++;
 2286              		.loc 1 756 0 is_stmt 1
 2287 0096 834A     		ldr	r2, .L197+36
 2288 0098 125C     		ldrb	r2, [r2, r0]	@ zero_extendqisi2
 2289 009a 2C2A     		cmp	r2, #44
 2290 009c F7D0     		beq	.L185
 760:Src/Eagle_TRT.c **** 								{ //save the time
 2291              		.loc 1 760 0
 2292 009e 012B     		cmp	r3, #1
 2293 00a0 07D0     		beq	.L186
 765:Src/Eagle_TRT.c **** 								{ //save latitude
 2294              		.loc 1 765 0
 2295 00a2 022B     		cmp	r3, #2
 2296 00a4 0BD1     		bne	.L152
 767:Src/Eagle_TRT.c **** 									cont_latitude++;
 2297              		.loc 1 767 0
 2298 00a6 05EB040E 		add	lr, r5, r4
 2299 00aa 8EF80C20 		strb	r2, [lr, #12]
 768:Src/Eagle_TRT.c **** 								}
 2300              		.loc 1 768 0
 2301 00ae 0134     		adds	r4, r4, #1
 2302              	.LVL223:
 2303 00b0 EEE7     		b	.L150
 2304              	.L186:
 762:Src/Eagle_TRT.c **** 									cont_time++;
ARM GAS  /tmp/ccuwAQC3.s 			page 62


 2305              		.loc 1 762 0
 2306 00b2 05EB010E 		add	lr, r5, r1
 2307 00b6 8EF85820 		strb	r2, [lr, #88]
 763:Src/Eagle_TRT.c **** 								}
 2308              		.loc 1 763 0
 2309 00ba 0131     		adds	r1, r1, #1
 2310              	.LVL224:
 2311 00bc E8E7     		b	.L150
 2312              	.L152:
 770:Src/Eagle_TRT.c **** 								{ //save orientation of latitude
 2313              		.loc 1 770 0
 2314 00be 032B     		cmp	r3, #3
 2315 00c0 01D1     		bne	.L153
 772:Src/Eagle_TRT.c **** 								}
 2316              		.loc 1 772 0
 2317 00c2 2A77     		strb	r2, [r5, #28]
 2318 00c4 E4E7     		b	.L150
 2319              	.L153:
 774:Src/Eagle_TRT.c **** 								{ //save longitude
 2320              		.loc 1 774 0
 2321 00c6 042B     		cmp	r3, #4
 2322 00c8 0BD0     		beq	.L187
 779:Src/Eagle_TRT.c **** 								{ //save orientation of longitude
 2323              		.loc 1 779 0
 2324 00ca 052B     		cmp	r3, #5
 2325 00cc 0FD0     		beq	.L188
 783:Src/Eagle_TRT.c **** 								{
 2326              		.loc 1 783 0
 2327 00ce 062B     		cmp	r3, #6
 2328 00d0 10D0     		beq	.L189
 787:Src/Eagle_TRT.c **** 								{ //save altitude
 2329              		.loc 1 787 0
 2330 00d2 092B     		cmp	r3, #9
 2331 00d4 11D1     		bne	.L157
 789:Src/Eagle_TRT.c **** 									cont_altitude++;
 2332              		.loc 1 789 0
 2333 00d6 05EB070E 		add	lr, r5, r7
 2334 00da 8EF84C20 		strb	r2, [lr, #76]
 790:Src/Eagle_TRT.c **** 								}
 2335              		.loc 1 790 0
 2336 00de 0137     		adds	r7, r7, #1
 2337              	.LVL225:
 2338 00e0 D6E7     		b	.L150
 2339              	.L187:
 776:Src/Eagle_TRT.c **** 									cont_longitude++;
 2340              		.loc 1 776 0
 2341 00e2 05EB060E 		add	lr, r5, r6
 2342 00e6 8EF82C20 		strb	r2, [lr, #44]
 777:Src/Eagle_TRT.c **** 								}
 2343              		.loc 1 777 0
 2344 00ea 0136     		adds	r6, r6, #1
 2345              	.LVL226:
 2346 00ec D0E7     		b	.L150
 2347              	.L188:
 781:Src/Eagle_TRT.c **** 								}
 2348              		.loc 1 781 0
 2349 00ee 85F83C20 		strb	r2, [r5, #60]
ARM GAS  /tmp/ccuwAQC3.s 			page 63


 2350 00f2 CDE7     		b	.L150
 2351              	.L189:
 785:Src/Eagle_TRT.c **** 								}
 2352              		.loc 1 785 0
 2353 00f4 85F86320 		strb	r2, [r5, #99]
 2354 00f8 CAE7     		b	.L150
 2355              	.L157:
 792:Src/Eagle_TRT.c **** 								{
 2356              		.loc 1 792 0
 2357 00fa 0A2B     		cmp	r3, #10
 2358 00fc C8D1     		bne	.L150
 794:Src/Eagle_TRT.c **** 								}
 2359              		.loc 1 794 0
 2360 00fe 6420     		movs	r0, #100
 2361              	.LVL227:
 2362 0100 C6E7     		b	.L150
 2363              	.LVL228:
 2364              	.L170:
 2365              	.LBE8:
 2366              	.LBE7:
 2367 0102 0520     		movs	r0, #5
 2368 0104 0021     		movs	r1, #0
 2369 0106 0F46     		mov	r7, r1
 2370 0108 0E46     		mov	r6, r1
 2371 010a 0C46     		mov	r4, r1
 2372 010c 0B46     		mov	r3, r1
 2373 010e C0E7     		b	.L148
 2374              	.LVL229:
 2375              	.L184:
 2376              	.LBB9:
 799:Src/Eagle_TRT.c **** 						{
 2377              		.loc 1 799 0
 2378 0110 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 2379              	.LVL230:
 2380 0114 302B     		cmp	r3, #48
 2381 0116 32D1     		bne	.L159
 801:Src/Eagle_TRT.c **** 							gps->latitude_i_l = 0;
 2382              		.loc 1 801 0
 2383 0118 0023     		movs	r3, #0
 2384 011a 6B62     		str	r3, [r5, #36]
 802:Src/Eagle_TRT.c **** 							gps->longitude_i_h = 0;
 2385              		.loc 1 802 0
 2386 011c AB62     		str	r3, [r5, #40]
 803:Src/Eagle_TRT.c **** 							gps->longitude_i_l = 0;
 2387              		.loc 1 803 0
 2388 011e 6B64     		str	r3, [r5, #68]
 804:Src/Eagle_TRT.c **** 							gps->altitude_i = 0;
 2389              		.loc 1 804 0
 2390 0120 AB64     		str	r3, [r5, #72]
 805:Src/Eagle_TRT.c **** 						}
 2391              		.loc 1 805 0
 2392 0122 6B65     		str	r3, [r5, #84]
 2393              	.LVL231:
 2394              	.L160:
 818:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->longitude_i_h / 256;
 2395              		.loc 1 818 0
 2396 0124 6048     		ldr	r0, .L197+40
ARM GAS  /tmp/ccuwAQC3.s 			page 64


 2397 0126 0824     		movs	r4, #8
 2398              	.LVL232:
 2399 0128 0472     		strb	r4, [r0, #8]
 819:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->longitude_i_h % 256;
 2400              		.loc 1 819 0
 2401 012a 6B6C     		ldr	r3, [r5, #68]
 2402 012c 4FF48072 		mov	r2, #256
 2403 0130 93FBF2F1 		sdiv	r1, r3, r2
 2404 0134 4172     		strb	r1, [r0, #9]
 820:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->longitude_i_l / 256;
 2405              		.loc 1 820 0
 2406 0136 5942     		rsbs	r1, r3, #0
 2407 0138 DBB2     		uxtb	r3, r3
 2408 013a C9B2     		uxtb	r1, r1
 2409 013c 58BF     		it	pl
 2410 013e 4B42     		rsbpl	r3, r1, #0
 2411 0140 8372     		strb	r3, [r0, #10]
 821:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->longitude_i_l % 256;
 2412              		.loc 1 821 0
 2413 0142 AB6C     		ldr	r3, [r5, #72]
 2414 0144 93FBF2F1 		sdiv	r1, r3, r2
 2415 0148 C172     		strb	r1, [r0, #11]
 822:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->longitude_o;
 2416              		.loc 1 822 0
 2417 014a 5942     		rsbs	r1, r3, #0
 2418 014c DBB2     		uxtb	r3, r3
 2419 014e C9B2     		uxtb	r1, r1
 2420 0150 58BF     		it	pl
 2421 0152 4B42     		rsbpl	r3, r1, #0
 2422 0154 0373     		strb	r3, [r0, #12]
 823:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->altitude_i / 256;
 2423              		.loc 1 823 0
 2424 0156 05F13C03 		add	r3, r5, #60
 2425 015a 4373     		strb	r3, [r0, #13]
 824:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->altitude_i % 256;
 2426              		.loc 1 824 0
 2427 015c 6B6D     		ldr	r3, [r5, #84]
 2428 015e 93FBF2F2 		sdiv	r2, r3, r2
 2429 0162 8273     		strb	r2, [r0, #14]
 825:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 2430              		.loc 1 825 0
 2431 0164 5A42     		rsbs	r2, r3, #0
 2432 0166 DBB2     		uxtb	r3, r3
 2433 0168 D2B2     		uxtb	r2, r2
 2434 016a 58BF     		it	pl
 2435 016c 5342     		rsbpl	r3, r2, #0
 2436 016e C373     		strb	r3, [r0, #15]
 826:Src/Eagle_TRT.c **** 						can.size = 8;
 2437              		.loc 1 826 0
 2438 0170 D023     		movs	r3, #208
 2439 0172 0360     		str	r3, [r0]
 827:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 2440              		.loc 1 827 0
 2441 0174 4460     		str	r4, [r0, #4]
 828:Src/Eagle_TRT.c **** 					}
 2442              		.loc 1 828 0
 2443 0176 FFF7FEFF 		bl	CAN_Send
ARM GAS  /tmp/ccuwAQC3.s 			page 65


 2444              	.LVL233:
 2445              	.LBE9:
 699:Src/Eagle_TRT.c **** 
 2446              		.loc 1 699 0
 2447 017a 0024     		movs	r4, #0
 2448 017c 46E7     		b	.L143
 2449              	.LVL234:
 2450              	.L159:
 2451              	.LBB10:
 809:Src/Eagle_TRT.c **** 							gps->longitude_i = (long int)(atof(gps->longitude) * 100000);
 2452              		.loc 1 809 0
 2453 017e 05F10C00 		add	r0, r5, #12
 2454              	.LVL235:
 2455 0182 FFF7FEFF 		bl	atof
 2456              	.LVL236:
 2457 0186 3EA3     		adr	r3, .L197
 2458 0188 D3E90023 		ldrd	r2, [r3]
 2459 018c 51EC100B 		vmov	r0, r1, d0
 2460 0190 FFF7FEFF 		bl	__aeabi_dmul
 2461              	.LVL237:
 2462 0194 FFF7FEFF 		bl	__aeabi_d2iz
 2463              	.LVL238:
 2464 0198 2862     		str	r0, [r5, #32]
 810:Src/Eagle_TRT.c **** 							gps->altitude_i = (int)(atof(gps->altitude) * 100);
 2465              		.loc 1 810 0
 2466 019a 05F12C00 		add	r0, r5, #44
 2467 019e FFF7FEFF 		bl	atof
 2468              	.LVL239:
 2469 01a2 39A3     		adr	r3, .L197+8
 2470 01a4 D3E90023 		ldrd	r2, [r3]
 2471 01a8 51EC100B 		vmov	r0, r1, d0
 2472 01ac FFF7FEFF 		bl	__aeabi_dmul
 2473              	.LVL240:
 2474 01b0 FFF7FEFF 		bl	__aeabi_d2iz
 2475              	.LVL241:
 2476 01b4 2864     		str	r0, [r5, #64]
 811:Src/Eagle_TRT.c **** 							gps->latitude_i_h = (int)(gps->latitude_i / 10000);
 2477              		.loc 1 811 0
 2478 01b6 05F14C00 		add	r0, r5, #76
 2479 01ba FFF7FEFF 		bl	atof
 2480              	.LVL242:
 2481 01be 0022     		movs	r2, #0
 2482 01c0 3A4B     		ldr	r3, .L197+44
 2483 01c2 51EC100B 		vmov	r0, r1, d0
 2484 01c6 FFF7FEFF 		bl	__aeabi_dmul
 2485              	.LVL243:
 2486 01ca FFF7FEFF 		bl	__aeabi_d2iz
 2487              	.LVL244:
 2488 01ce 6865     		str	r0, [r5, #84]
 812:Src/Eagle_TRT.c **** 							gps->latitude_i_l = (int)(gps->latitude_i - gps->latitude_i_h * 10000);
 2489              		.loc 1 812 0
 2490 01d0 2A6A     		ldr	r2, [r5, #32]
 2491 01d2 42F21073 		movw	r3, #10000
 2492 01d6 92FBF3F3 		sdiv	r3, r2, r3
 2493 01da 6B62     		str	r3, [r5, #36]
 813:Src/Eagle_TRT.c **** 							gps->longitude_i_h = (int)(gps->longitude_i / 100000);
 2494              		.loc 1 813 0
ARM GAS  /tmp/ccuwAQC3.s 			page 66


 2495 01dc 3449     		ldr	r1, .L197+48
 2496 01de 01FB0323 		mla	r3, r1, r3, r2
 2497 01e2 AB62     		str	r3, [r5, #40]
 814:Src/Eagle_TRT.c **** 							gps->longitude_i_l = (int)(gps->longitude_i - gps->longitude_i_h * 100000);
 2498              		.loc 1 814 0
 2499 01e4 2A6C     		ldr	r2, [r5, #64]
 2500 01e6 334B     		ldr	r3, .L197+52
 2501 01e8 92FBF3F3 		sdiv	r3, r2, r3
 2502 01ec 6B64     		str	r3, [r5, #68]
 815:Src/Eagle_TRT.c **** 						}
 2503              		.loc 1 815 0
 2504 01ee 3249     		ldr	r1, .L197+56
 2505 01f0 01FB0323 		mla	r3, r1, r3, r2
 2506 01f4 AB64     		str	r3, [r5, #72]
 2507 01f6 95E7     		b	.L160
 2508              	.LVL245:
 2509              	.L183:
 2510              	.LBE10:
 835:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2511              		.loc 1 835 0 discriminator 1
 2512 01f8 2A4B     		ldr	r3, .L197+36
 2513 01fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 2514 01fc 542B     		cmp	r3, #84
 2515 01fe 01D0     		beq	.L190
 699:Src/Eagle_TRT.c **** 
 2516              		.loc 1 699 0
 2517 0200 0024     		movs	r4, #0
 2518 0202 03E7     		b	.L143
 2519              	.L190:
 835:Src/Eagle_TRT.c **** 				{ // operation when the string is GPVTG //
 2520              		.loc 1 835 0 discriminator 2
 2521 0204 274B     		ldr	r3, .L197+36
 2522 0206 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 2523 0208 472B     		cmp	r3, #71
 2524 020a 01D0     		beq	.L191
 699:Src/Eagle_TRT.c **** 
 2525              		.loc 1 699 0
 2526 020c 0024     		movs	r4, #0
 2527 020e FDE6     		b	.L143
 2528              	.L191:
 837:Src/Eagle_TRT.c **** 					{ //check the checksum (if==true -> enter)
 2529              		.loc 1 837 0
 2530 0210 2448     		ldr	r0, .L197+36
 2531 0212 FFF7FEFF 		bl	checksum
 2532              	.LVL246:
 2533 0216 0446     		mov	r4, r0
 2534 0218 0128     		cmp	r0, #1
 2535 021a 01D0     		beq	.L192
 882:Src/Eagle_TRT.c **** 					}
 2536              		.loc 1 882 0
 2537 021c 0024     		movs	r4, #0
 2538 021e F5E6     		b	.L143
 2539              	.L192:
 2540              	.LBB11:
 839:Src/Eagle_TRT.c **** 						int cont_speed = 0;
 2541              		.loc 1 839 0
 2542 0220 0023     		movs	r3, #0
ARM GAS  /tmp/ccuwAQC3.s 			page 67


 2543 0222 264A     		ldr	r2, .L197+60
 2544 0224 1360     		str	r3, [r2]
 2545              	.LVL247:
 2546              	.LBB12:
 841:Src/Eagle_TRT.c **** 						{
 2547              		.loc 1 841 0
 2548 0226 0522     		movs	r2, #5
 2549 0228 04E0     		b	.L161
 2550              	.LVL248:
 2551              	.L194:
 844:Src/Eagle_TRT.c **** 							else
 2552              		.loc 1 844 0
 2553 022a 2448     		ldr	r0, .L197+60
 2554 022c 0168     		ldr	r1, [r0]
 2555 022e 0131     		adds	r1, r1, #1
 2556 0230 0160     		str	r1, [r0]
 2557              	.LVL249:
 2558              	.L163:
 841:Src/Eagle_TRT.c **** 						{
 2559              		.loc 1 841 0 discriminator 2
 2560 0232 0132     		adds	r2, r2, #1
 2561              	.LVL250:
 2562              	.L161:
 841:Src/Eagle_TRT.c **** 						{
 2563              		.loc 1 841 0 is_stmt 0 discriminator 1
 2564 0234 1A49     		ldr	r1, .L197+32
 2565 0236 0968     		ldr	r1, [r1]
 2566 0238 8A42     		cmp	r2, r1
 2567 023a 0EDA     		bge	.L193
 843:Src/Eagle_TRT.c **** 								cont_comma++;
 2568              		.loc 1 843 0 is_stmt 1
 2569 023c 1948     		ldr	r0, .L197+36
 2570 023e 865C     		ldrb	r6, [r0, r2]	@ zero_extendqisi2
 2571 0240 2C2E     		cmp	r6, #44
 2572 0242 F2D0     		beq	.L194
 847:Src/Eagle_TRT.c **** 								{ //save the speed
 2573              		.loc 1 847 0
 2574 0244 1D48     		ldr	r0, .L197+60
 2575 0246 0068     		ldr	r0, [r0]
 2576 0248 0728     		cmp	r0, #7
 2577 024a 03D0     		beq	.L195
 852:Src/Eagle_TRT.c **** 								{
 2578              		.loc 1 852 0
 2579 024c 0828     		cmp	r0, #8
 2580 024e F0D1     		bne	.L163
 854:Src/Eagle_TRT.c **** 								}
 2581              		.loc 1 854 0
 2582 0250 0A46     		mov	r2, r1
 2583              	.LVL251:
 2584 0252 EEE7     		b	.L163
 2585              	.LVL252:
 2586              	.L195:
 849:Src/Eagle_TRT.c **** 									cont_speed++;
 2587              		.loc 1 849 0
 2588 0254 EE54     		strb	r6, [r5, r3]
 850:Src/Eagle_TRT.c **** 								}
 2589              		.loc 1 850 0
ARM GAS  /tmp/ccuwAQC3.s 			page 68


 2590 0256 0133     		adds	r3, r3, #1
 2591              	.LVL253:
 2592 0258 EBE7     		b	.L163
 2593              	.L193:
 2594              	.LBE12:
 859:Src/Eagle_TRT.c **** 						{
 2595              		.loc 1 859 0
 2596 025a 95F86330 		ldrb	r3, [r5, #99]	@ zero_extendqisi2
 2597              	.LVL254:
 2598 025e 302B     		cmp	r3, #48
 2599 0260 2ED0     		beq	.L196
 865:Src/Eagle_TRT.c **** 						}
 2600              		.loc 1 865 0
 2601 0262 2846     		mov	r0, r5
 2602 0264 FFF7FEFF 		bl	atof
 2603              	.LVL255:
 2604 0268 0022     		movs	r2, #0
 2605 026a 104B     		ldr	r3, .L197+44
 2606 026c 51EC100B 		vmov	r0, r1, d0
 2607 0270 FFF7FEFF 		bl	__aeabi_dmul
 2608              	.LVL256:
 2609 0274 FFF7FEFF 		bl	__aeabi_d2iz
 2610              	.LVL257:
 2611 0278 A860     		str	r0, [r5, #8]
 2612 027a 23E0     		b	.L167
 2613              	.L198:
 2614 027c AFF30080 		.align	3
 2615              	.L197:
 2616 0280 00000000 		.word	0
 2617 0284 0088C340 		.word	1086556160
 2618 0288 00000000 		.word	0
 2619 028c 006AF840 		.word	1090021888
 2620 0290 00000000 		.word	huart_GPS
 2621 0294 00000000 		.word	buffer_gps
 2622 0298 00000000 		.word	data_string_gps
 2623 029c 00000000 		.word	.LANCHOR36
 2624 02a0 00000000 		.word	cont_string
 2625 02a4 00000000 		.word	string_gps
 2626 02a8 00000000 		.word	can
 2627 02ac 00005940 		.word	1079574528
 2628 02b0 F0D8FFFF 		.word	-10000
 2629 02b4 A0860100 		.word	100000
 2630 02b8 6079FEFF 		.word	-100000
 2631 02bc 00000000 		.word	cont_comma
 2632              	.LVL258:
 2633              	.L196:
 861:Src/Eagle_TRT.c **** 						}
 2634              		.loc 1 861 0
 2635 02c0 0023     		movs	r3, #0
 2636 02c2 AB60     		str	r3, [r5, #8]
 2637              	.LVL259:
 2638              	.L167:
 867:Src/Eagle_TRT.c **** 						can.dataTx[1] = gps->latitude_i_h / 256;
 2639              		.loc 1 867 0
 2640 02c4 1A48     		ldr	r0, .L199
 2641 02c6 0723     		movs	r3, #7
 2642 02c8 0372     		strb	r3, [r0, #8]
ARM GAS  /tmp/ccuwAQC3.s 			page 69


 868:Src/Eagle_TRT.c **** 						can.dataTx[2] = gps->latitude_i_h % 256;
 2643              		.loc 1 868 0
 2644 02ca 6B6A     		ldr	r3, [r5, #36]
 2645 02cc 4FF48072 		mov	r2, #256
 2646 02d0 93FBF2F1 		sdiv	r1, r3, r2
 2647 02d4 4172     		strb	r1, [r0, #9]
 869:Src/Eagle_TRT.c **** 						can.dataTx[3] = gps->latitude_i_l / 256;
 2648              		.loc 1 869 0
 2649 02d6 5942     		rsbs	r1, r3, #0
 2650 02d8 DBB2     		uxtb	r3, r3
 2651 02da C9B2     		uxtb	r1, r1
 2652 02dc 58BF     		it	pl
 2653 02de 4B42     		rsbpl	r3, r1, #0
 2654 02e0 8372     		strb	r3, [r0, #10]
 870:Src/Eagle_TRT.c **** 						can.dataTx[4] = gps->latitude_i_l % 256;
 2655              		.loc 1 870 0
 2656 02e2 AB6A     		ldr	r3, [r5, #40]
 2657 02e4 93FBF2F1 		sdiv	r1, r3, r2
 2658 02e8 C172     		strb	r1, [r0, #11]
 871:Src/Eagle_TRT.c **** 						can.dataTx[5] = (int)gps->latitude_o;
 2659              		.loc 1 871 0
 2660 02ea 5942     		rsbs	r1, r3, #0
 2661 02ec DBB2     		uxtb	r3, r3
 2662 02ee C9B2     		uxtb	r1, r1
 2663 02f0 58BF     		it	pl
 2664 02f2 4B42     		rsbpl	r3, r1, #0
 2665 02f4 0373     		strb	r3, [r0, #12]
 872:Src/Eagle_TRT.c **** 						can.dataTx[6] = gps->speed_i / 256;
 2666              		.loc 1 872 0
 2667 02f6 05F11C03 		add	r3, r5, #28
 2668 02fa 4373     		strb	r3, [r0, #13]
 873:Src/Eagle_TRT.c **** 						can.dataTx[7] = gps->speed_i % 256;
 2669              		.loc 1 873 0
 2670 02fc AB68     		ldr	r3, [r5, #8]
 2671 02fe 93FBF2F3 		sdiv	r3, r3, r2
 2672 0302 8373     		strb	r3, [r0, #14]
 874:Src/Eagle_TRT.c **** 						can.id = 0xD0;
 2673              		.loc 1 874 0
 2674 0304 AB68     		ldr	r3, [r5, #8]
 2675 0306 5A42     		rsbs	r2, r3, #0
 2676 0308 DBB2     		uxtb	r3, r3
 2677 030a D2B2     		uxtb	r2, r2
 2678 030c 58BF     		it	pl
 2679 030e 5342     		rsbpl	r3, r2, #0
 2680 0310 C373     		strb	r3, [r0, #15]
 875:Src/Eagle_TRT.c **** 						can.size = 8;
 2681              		.loc 1 875 0
 2682 0312 D023     		movs	r3, #208
 2683 0314 0360     		str	r3, [r0]
 876:Src/Eagle_TRT.c **** 						CAN_Send(&can);
 2684              		.loc 1 876 0
 2685 0316 0823     		movs	r3, #8
 2686 0318 4360     		str	r3, [r0, #4]
 877:Src/Eagle_TRT.c **** 						ret = 1;
 2687              		.loc 1 877 0
 2688 031a FFF7FEFF 		bl	CAN_Send
 2689              	.LVL260:
ARM GAS  /tmp/ccuwAQC3.s 			page 70


 2690              	.LBE11:
 2691 031e 75E6     		b	.L143
 2692              	.LVL261:
 2693              	.L181:
 891:Src/Eagle_TRT.c **** 				cont_string = 0;	  //set the counter to 1
 2694              		.loc 1 891 0
 2695 0320 0122     		movs	r2, #1
 2696 0322 044B     		ldr	r3, .L199+4
 2697 0324 1A60     		str	r2, [r3]
 892:Src/Eagle_TRT.c **** 			}
 2698              		.loc 1 892 0
 2699 0326 0024     		movs	r4, #0
 2700 0328 034B     		ldr	r3, .L199+8
 2701 032a 1C60     		str	r4, [r3]
 2702 032c 6EE6     		b	.L143
 2703              	.L200:
 2704 032e 00BF     		.align	2
 2705              	.L199:
 2706 0330 00000000 		.word	can
 2707 0334 00000000 		.word	.LANCHOR36
 2708 0338 00000000 		.word	cont_string
 2709              		.cfi_endproc
 2710              	.LFE150:
 2712              		.section	.text.ReinitTIM7,"ax",%progbits
 2713              		.align	1
 2714              		.global	ReinitTIM7
 2715              		.syntax unified
 2716              		.thumb
 2717              		.thumb_func
 2718              		.fpu fpv4-sp-d16
 2720              	ReinitTIM7:
 2721              	.LFB156:
 934:Src/Eagle_TRT.c **** 
 935:Src/Eagle_TRT.c **** #endif
 936:Src/Eagle_TRT.c **** 
 937:Src/Eagle_TRT.c **** #ifdef HAL_TIM_MODULE_ENABLED
 938:Src/Eagle_TRT.c **** #include "stm32f4xx_hal_tim.h"
 939:Src/Eagle_TRT.c **** 
 940:Src/Eagle_TRT.c **** extern UART_HandleTypeDef huart2;
 941:Src/Eagle_TRT.c **** extern char txt;
 942:Src/Eagle_TRT.c **** 
 943:Src/Eagle_TRT.c **** // Function to request data from encoder via SSI communication
 944:Src/Eagle_TRT.c **** // This function is called from the interrupt callback of the timer that you are using for the enco
 945:Src/Eagle_TRT.c **** // The tim used for this function must be initialized at most at 2 microsecond per tick
 946:Src/Eagle_TRT.c **** // Lower the number of microseconds per tick better it is
 947:Src/Eagle_TRT.c **** // TimerInstance = struct of the tim used for the encoder
 948:Src/Eagle_TRT.c **** enc_stc enc;
 949:Src/Eagle_TRT.c **** int read_SSI(enc_stc *enc)
 950:Src/Eagle_TRT.c **** {
 951:Src/Eagle_TRT.c **** 
 952:Src/Eagle_TRT.c **** 	int bin_data[enc->data_size];
 953:Src/Eagle_TRT.c **** 
 954:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 955:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 956:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 957:Src/Eagle_TRT.c **** 	{
 958:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccuwAQC3.s 			page 71


 959:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
 960:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 961:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 962:Src/Eagle_TRT.c **** 	{
 963:Src/Eagle_TRT.c **** 	}
 964:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 965:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 966:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 967:Src/Eagle_TRT.c **** 	{
 968:Src/Eagle_TRT.c **** 	}
 969:Src/Eagle_TRT.c **** 
 970:Src/Eagle_TRT.c **** 	// Starting the clock to retrieve 14 bits from the sensor
 971:Src/Eagle_TRT.c **** 	for (int i = 0; i < enc->data_size; i++)
 972:Src/Eagle_TRT.c **** 	{
 973:Src/Eagle_TRT.c **** 
 974:Src/Eagle_TRT.c **** 		// CLOCK HIGH
 975:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
 976:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 977:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 978:Src/Eagle_TRT.c **** 		{
 979:Src/Eagle_TRT.c **** 		}
 980:Src/Eagle_TRT.c **** 
 981:Src/Eagle_TRT.c **** 		//Reading the Pin at the half of the clock period
 982:Src/Eagle_TRT.c **** 		// Set the bit as the pin state (0 or 1)
 983:Src/Eagle_TRT.c **** 		bin_data[i] = HAL_GPIO_ReadPin(enc->DataPinName, enc->DataPinNumber);
 984:Src/Eagle_TRT.c **** 		enc->Data[i] = bin_data[i];
 985:Src/Eagle_TRT.c **** 
 986:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 987:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 988:Src/Eagle_TRT.c **** 		{
 989:Src/Eagle_TRT.c **** 		}
 990:Src/Eagle_TRT.c **** 
 991:Src/Eagle_TRT.c **** 		// CLOCK LOW
 992:Src/Eagle_TRT.c **** 		HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_RESET);
 993:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 994:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 995:Src/Eagle_TRT.c **** 		{
 996:Src/Eagle_TRT.c **** 		}
 997:Src/Eagle_TRT.c **** 	}
 998:Src/Eagle_TRT.c **** 
 999:Src/Eagle_TRT.c **** 	// Requesting an other bit for the aventual error sent from the sensor
1000:Src/Eagle_TRT.c **** 	HAL_GPIO_WritePin(enc->ClockPinName, enc->ClockPinNumber, GPIO_PIN_SET);
1001:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
1002:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
1003:Src/Eagle_TRT.c **** 	{
1004:Src/Eagle_TRT.c **** 	}
1005:Src/Eagle_TRT.c **** 
1006:Src/Eagle_TRT.c **** 	int error_flag = HAL_GPIO_ReadPin(enc->DataPinName, enc->DataPinNumber);
1007:Src/Eagle_TRT.c **** 
1008:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
1009:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
1010:Src/Eagle_TRT.c **** 	{
1011:Src/Eagle_TRT.c **** 	}
1012:Src/Eagle_TRT.c **** 
1013:Src/Eagle_TRT.c **** 	// Converting bits into number and converting it into angle in degrees (0 ~ 359)
1014:Src/Eagle_TRT.c **** 	enc->converted_data = bin_dec(enc->Data, enc->data_size);
1015:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 72


1016:Src/Eagle_TRT.c **** 	return error_flag;
1017:Src/Eagle_TRT.c **** }
1018:Src/Eagle_TRT.c **** 
1019:Src/Eagle_TRT.c **** // Interrupt function of tim 2
1020:Src/Eagle_TRT.c **** // Call this function in the timer callback function of the stm
1021:Src/Eagle_TRT.c **** // htim = timer TimerInstance of the timer that you are using for the clock of the encoder
1022:Src/Eagle_TRT.c **** // Interrupt_flag = initilize a int variable in the main file
1023:Src/Eagle_TRT.c **** // Angles_array = array to store the last angles
1024:Src/Eagle_TRT.c **** // Speed = pointer to the speed value
1025:Src/Eagle_TRT.c **** void encoder_tim_interrupt(enc_stc *enc)
1026:Src/Eagle_TRT.c **** {
1027:Src/Eagle_TRT.c **** 
1028:Src/Eagle_TRT.c **** 	if (enc->interrupt_flag == 0)
1029:Src/Eagle_TRT.c **** 	{
1030:Src/Eagle_TRT.c **** 		// Requesting first angle
1031:Src/Eagle_TRT.c **** 		enc->angle0_prec = enc->angle0;
1032:Src/Eagle_TRT.c **** 		read_SSI(enc);
1033:Src/Eagle_TRT.c **** 		enc->angle0 = enc->converted_data / 45.5055;
1034:Src/Eagle_TRT.c **** 	}
1035:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 1)
1036:Src/Eagle_TRT.c **** 	{
1037:Src/Eagle_TRT.c **** 		// Requesting second angle
1038:Src/Eagle_TRT.c **** 		enc->angle1_prec = enc->angle1;
1039:Src/Eagle_TRT.c **** 		read_SSI(enc);
1040:Src/Eagle_TRT.c **** 		enc->angle1 = enc->converted_data / 45.5055;
1041:Src/Eagle_TRT.c **** 	}
1042:Src/Eagle_TRT.c **** 	else if (enc->interrupt_flag == 2)
1043:Src/Eagle_TRT.c **** 	{
1044:Src/Eagle_TRT.c **** 		// Calculate speed from the two angles
1045:Src/Eagle_TRT.c **** 		get_speed_encoder(enc);
1046:Src/Eagle_TRT.c **** 
1047:Src/Eagle_TRT.c **** 		// Get the speed sign to be sent in CAN
1048:Src/Eagle_TRT.c **** 		if (enc->average_speed < 0)
1049:Src/Eagle_TRT.c **** 		{
1050:Src/Eagle_TRT.c **** 			enc->average_speed *= -1;
1051:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
1052:Src/Eagle_TRT.c **** 		}
1053:Src/Eagle_TRT.c **** 		else
1054:Src/Eagle_TRT.c **** 		{
1055:Src/Eagle_TRT.c **** 			enc->speed_sign = 0;
1056:Src/Eagle_TRT.c **** 		}
1057:Src/Eagle_TRT.c **** 	}
1058:Src/Eagle_TRT.c **** 
1059:Src/Eagle_TRT.c **** 	// Cycle between steps
1060:Src/Eagle_TRT.c **** 	if (enc->interrupt_flag >=2){
1061:Src/Eagle_TRT.c **** 		enc->interrupt_flag = 0;
1062:Src/Eagle_TRT.c **** 	}
1063:Src/Eagle_TRT.c **** 	else{
1064:Src/Eagle_TRT.c **** 		enc->interrupt_flag ++;
1065:Src/Eagle_TRT.c **** 	}
1066:Src/Eagle_TRT.c **** 	//enc->interrupt_flag = enc->interrupt_flag >= 2 ? 0 : enc->interrupt_flag + 1;
1067:Src/Eagle_TRT.c **** }
1068:Src/Eagle_TRT.c **** 
1069:Src/Eagle_TRT.c **** // Funtion to calculate the speed
1070:Src/Eagle_TRT.c **** // Angle0 = last angle calculated
1071:Src/Eagle_TRT.c **** // Angle1 = previous angle calculated
1072:Src/Eagle_TRT.c **** // Refresh = delta-time from the two calculations, express it in microseconds
ARM GAS  /tmp/ccuwAQC3.s 			page 73


1073:Src/Eagle_TRT.c **** // Wheel_diameter = diameter of the wheel expressed meters
1074:Src/Eagle_TRT.c **** void get_speed_encoder(enc_stc *enc)
1075:Src/Eagle_TRT.c **** {
1076:Src/Eagle_TRT.c **** 
1077:Src/Eagle_TRT.c **** 	long double speed = 0;
1078:Src/Eagle_TRT.c **** 	double dt = 0;
1079:Src/Eagle_TRT.c **** 
1080:Src/Eagle_TRT.c **** 	if (enc->dx_wheel == 1)
1081:Src/Eagle_TRT.c **** 	{
1082:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle1 - enc->angle0;
1083:Src/Eagle_TRT.c **** 	}
1084:Src/Eagle_TRT.c **** 	else
1085:Src/Eagle_TRT.c **** 	{
1086:Src/Eagle_TRT.c **** 		enc->delta_angle = enc->angle0 - enc->angle1;
1087:Src/Eagle_TRT.c **** 	}
1088:Src/Eagle_TRT.c **** 
1089:Src/Eagle_TRT.c **** 	// Calculate correct delta angle if near to 0-360
1090:Src/Eagle_TRT.c **** 	if ((enc->angle0 < enc->max_delta_angle * 2 && enc->angle1 > 360 - enc->max_delta_angle * 2) ||
1091:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
1092:Src/Eagle_TRT.c **** 	{
1093:Src/Eagle_TRT.c **** 		if (enc->delta_angle < 0)
1094:Src/Eagle_TRT.c **** 		{
1095:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 + enc->delta_angle;
1096:Src/Eagle_TRT.c **** 		}
1097:Src/Eagle_TRT.c **** 		else
1098:Src/Eagle_TRT.c **** 		{
1099:Src/Eagle_TRT.c **** 			enc->delta_angle = 360 - enc->delta_angle;
1100:Src/Eagle_TRT.c **** 		}
1101:Src/Eagle_TRT.c **** 	}
1102:Src/Eagle_TRT.c **** 
1103:Src/Eagle_TRT.c **** 	// Calculating rad/s, then m/s, then Km/h
1104:Src/Eagle_TRT.c **** 	speed = (enc->delta_angle / 360) * 3.1415 * (enc->wheel_diameter);
1105:Src/Eagle_TRT.c **** 	speed *= enc->frequency;
1106:Src/Eagle_TRT.c **** 	speed *= 3.6;
1107:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
1108:Src/Eagle_TRT.c **** 
1109:Src/Eagle_TRT.c **** 	int off = 100;
1110:Src/Eagle_TRT.c **** 
1111:Src/Eagle_TRT.c **** 	// Start detecting eventual new wheel roation
1112:Src/Eagle_TRT.c **** 	// If the speed is too low, don't count rotations
1113:Src/Eagle_TRT.c **** 	if (enc->average_speed < -0.5 || enc->average_speed > 0.5)
1114:Src/Eagle_TRT.c **** 	{
1115:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec <= 361 && enc->angle0_prec > 360 - off) && (enc->angle0 >= -1 && enc->angle
1116:Src/Eagle_TRT.c **** 		{
1117:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1118:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
1119:Src/Eagle_TRT.c **** 		}
1120:Src/Eagle_TRT.c **** 		if ((enc->angle0_prec >= -1 && enc->angle0_prec < off) && (enc->angle0 <= 361 && enc->angle0 > 36
1121:Src/Eagle_TRT.c **** 		{
1122:Src/Eagle_TRT.c **** 			enc->wheel_rotation++;
1123:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
1124:Src/Eagle_TRT.c **** 		}
1125:Src/Eagle_TRT.c **** 	}
1126:Src/Eagle_TRT.c **** 
1127:Src/Eagle_TRT.c **** 	// Remove noise mediating previous values with actual
1128:Src/Eagle_TRT.c **** 	shift_array(enc->speed_array, 10, speed);
1129:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 10);
ARM GAS  /tmp/ccuwAQC3.s 			page 74


1130:Src/Eagle_TRT.c **** 
1131:Src/Eagle_TRT.c **** 	// Calculating the angle sample frequency
1132:Src/Eagle_TRT.c **** 	enc_calculate_optimal_frequency(enc);
1133:Src/Eagle_TRT.c **** }
1134:Src/Eagle_TRT.c **** 
1135:Src/Eagle_TRT.c **** // Calculate anche sample frequency
1136:Src/Eagle_TRT.c **** // The delta angle changes depending on the current speed
1137:Src/Eagle_TRT.c **** // Constrain the delta angle between a defined range (max_delta_angle)
1138:Src/Eagle_TRT.c **** void enc_calculate_optimal_frequency(enc_stc *enc)
1139:Src/Eagle_TRT.c **** {
1140:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
1141:Src/Eagle_TRT.c **** 
1142:Src/Eagle_TRT.c **** 	if (abs_delta_angle > enc->max_delta_angle * 1.2 || abs_delta_angle < enc->max_delta_angle * 0.5)
1143:Src/Eagle_TRT.c **** 	{
1144:Src/Eagle_TRT.c **** 		double angular_speed = enc->average_speed / ((enc->wheel_diameter / 2)*3.6);
1145:Src/Eagle_TRT.c **** 		double frequency = angular_speed / (enc->max_delta_angle * 3.14 / 180);
1146:Src/Eagle_TRT.c **** 
1147:Src/Eagle_TRT.c **** 		enc->flake_freq = frequency;
1148:Src/Eagle_TRT.c **** 
1149:Src/Eagle_TRT.c **** 		frequency = frequency < 0 ? frequency * (-1) : frequency;
1150:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
1151:Src/Eagle_TRT.c **** 
1152:Src/Eagle_TRT.c **** 		// Returns 0 if reinitialization is done correctly
1153:Src/Eagle_TRT.c **** 		if (ReinitTIM7(frequency, enc) == 0)
1154:Src/Eagle_TRT.c **** 		{
1155:Src/Eagle_TRT.c **** 			// Set encoder actual frequency
1156:Src/Eagle_TRT.c **** 			enc->frequency = enc->frequency_timer_Hz / (enc->frequency_timer->Init.Prescaler * enc->frequenc
1157:Src/Eagle_TRT.c **** 		}
1158:Src/Eagle_TRT.c **** 	}
1159:Src/Eagle_TRT.c **** }
1160:Src/Eagle_TRT.c **** 
1161:Src/Eagle_TRT.c **** // Reinitializing timer to generate interrupts to the given frequency
1162:Src/Eagle_TRT.c **** int ReinitTIM7(float frequency, enc_stc *enc)
1163:Src/Eagle_TRT.c **** {
 2722              		.loc 1 1163 0
 2723              		.cfi_startproc
 2724              		@ args = 0, pretend = 0, frame = 8
 2725              		@ frame_needed = 0, uses_anonymous_args = 0
 2726              	.LVL262:
 2727 0000 30B5     		push	{r4, r5, lr}
 2728              	.LCFI37:
 2729              		.cfi_def_cfa_offset 12
 2730              		.cfi_offset 4, -12
 2731              		.cfi_offset 5, -8
 2732              		.cfi_offset 14, -4
 2733 0002 83B0     		sub	sp, sp, #12
 2734              	.LCFI38:
 2735              		.cfi_def_cfa_offset 24
 2736 0004 0446     		mov	r4, r0
 2737              	.LVL263:
1164:Src/Eagle_TRT.c **** 
1165:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 0 */
1166:Src/Eagle_TRT.c **** 	int error_flag = 0;
1167:Src/Eagle_TRT.c **** 
1168:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 0 */
1169:Src/Eagle_TRT.c **** 
1170:Src/Eagle_TRT.c **** 	TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/ccuwAQC3.s 			page 75


 2738              		.loc 1 1170 0
 2739 0006 0025     		movs	r5, #0
 2740 0008 0095     		str	r5, [sp]
 2741 000a 0195     		str	r5, [sp, #4]
1171:Src/Eagle_TRT.c **** 
1172:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 1 */
1173:Src/Eagle_TRT.c **** 
1174:Src/Eagle_TRT.c **** 	enc->frequency_timer_prescaler = sqrt(enc->frequency_timer_Hz / frequency);
 2742              		.loc 1 1174 0
 2743 000c D0ED1A7A 		vldr.32	s15, [r0, #104]	@ int
 2744 0010 F8EEE77A 		vcvt.f32.s32	s15, s15
 2745 0014 87EE807A 		vdiv.f32	s14, s15, s0
 2746 0018 17EE100A 		vmov	r0, s14
 2747              	.LVL264:
 2748 001c FFF7FEFF 		bl	__aeabi_f2d
 2749              	.LVL265:
 2750 0020 41EC100B 		vmov	d0, r0, r1
 2751 0024 FFF7FEFF 		bl	sqrt
 2752              	.LVL266:
 2753 0028 51EC100B 		vmov	r0, r1, d0
 2754 002c FFF7FEFF 		bl	__aeabi_d2iz
 2755              	.LVL267:
 2756 0030 E066     		str	r0, [r4, #108]
1175:Src/Eagle_TRT.c **** 	enc->frequency_timer_period = enc->frequency_timer_prescaler;
 2757              		.loc 1 1175 0
 2758 0032 2067     		str	r0, [r4, #112]
1176:Src/Eagle_TRT.c **** 
1177:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 1 */
1178:Src/Eagle_TRT.c **** 	enc->frequency_timer->Instance = TIM7;
 2759              		.loc 1 1178 0
 2760 0034 D4F8D433 		ldr	r3, [r4, #980]
 2761 0038 114A     		ldr	r2, .L207
 2762 003a 1A60     		str	r2, [r3]
1179:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Prescaler = enc->frequency_timer_prescaler;
 2763              		.loc 1 1179 0
 2764 003c D4F8D433 		ldr	r3, [r4, #980]
 2765 0040 E26E     		ldr	r2, [r4, #108]
 2766 0042 5A60     		str	r2, [r3, #4]
1180:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.CounterMode = TIM_COUNTERMODE_UP;
 2767              		.loc 1 1180 0
 2768 0044 D4F8D433 		ldr	r3, [r4, #980]
 2769 0048 9D60     		str	r5, [r3, #8]
1181:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.Period = enc->frequency_timer_period;
 2770              		.loc 1 1181 0
 2771 004a D4F8D433 		ldr	r3, [r4, #980]
 2772 004e 226F     		ldr	r2, [r4, #112]
 2773 0050 DA60     		str	r2, [r3, #12]
1182:Src/Eagle_TRT.c **** 	enc->frequency_timer->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2774              		.loc 1 1182 0
 2775 0052 D4F8D433 		ldr	r3, [r4, #980]
 2776 0056 9D61     		str	r5, [r3, #24]
1183:Src/Eagle_TRT.c **** 
1184:Src/Eagle_TRT.c **** 	if (HAL_TIM_Base_Init(enc->frequency_timer) != HAL_OK)
 2777              		.loc 1 1184 0
 2778 0058 D4F8D403 		ldr	r0, [r4, #980]
 2779 005c FFF7FEFF 		bl	HAL_TIM_Base_Init
 2780              	.LVL268:
ARM GAS  /tmp/ccuwAQC3.s 			page 76


 2781 0060 00B1     		cbz	r0, .L202
1185:Src/Eagle_TRT.c **** 	{
1186:Src/Eagle_TRT.c **** 		error_flag = 1;
 2782              		.loc 1 1186 0
 2783 0062 0125     		movs	r5, #1
 2784              	.L202:
 2785              	.LVL269:
1187:Src/Eagle_TRT.c **** 	}
1188:Src/Eagle_TRT.c **** 	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 2786              		.loc 1 1188 0
 2787 0064 0023     		movs	r3, #0
 2788 0066 0093     		str	r3, [sp]
1189:Src/Eagle_TRT.c **** 	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2789              		.loc 1 1189 0
 2790 0068 0193     		str	r3, [sp, #4]
1190:Src/Eagle_TRT.c **** 	if (HAL_TIMEx_MasterConfigSynchronization(enc->frequency_timer, &sMasterConfig) != HAL_OK)
 2791              		.loc 1 1190 0
 2792 006a 6946     		mov	r1, sp
 2793 006c D4F8D403 		ldr	r0, [r4, #980]
 2794 0070 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2795              	.LVL270:
 2796 0074 00B1     		cbz	r0, .L201
1191:Src/Eagle_TRT.c **** 	{
1192:Src/Eagle_TRT.c **** 		error_flag = 2;
 2797              		.loc 1 1192 0
 2798 0076 0225     		movs	r5, #2
 2799              	.LVL271:
 2800              	.L201:
1193:Src/Eagle_TRT.c **** 	}
1194:Src/Eagle_TRT.c **** 	/* USER CODE BEGIN TIM7_Init 2 */
1195:Src/Eagle_TRT.c **** 	return error_flag;
1196:Src/Eagle_TRT.c **** 	/* USER CODE END TIM7_Init 2 */
1197:Src/Eagle_TRT.c **** }
 2801              		.loc 1 1197 0
 2802 0078 2846     		mov	r0, r5
 2803 007a 03B0     		add	sp, sp, #12
 2804              	.LCFI39:
 2805              		.cfi_def_cfa_offset 12
 2806              		@ sp needed
 2807 007c 30BD     		pop	{r4, r5, pc}
 2808              	.LVL272:
 2809              	.L208:
 2810 007e 00BF     		.align	2
 2811              	.L207:
 2812 0080 00140040 		.word	1073746944
 2813              		.cfi_endproc
 2814              	.LFE156:
 2816              		.global	__aeabi_dcmpge
 2817              		.global	__aeabi_dcmplt
 2818              		.global	__aeabi_d2f
 2819              		.section	.text.enc_calculate_optimal_frequency,"ax",%progbits
 2820              		.align	1
 2821              		.global	enc_calculate_optimal_frequency
 2822              		.syntax unified
 2823              		.thumb
 2824              		.thumb_func
 2825              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccuwAQC3.s 			page 77


 2827              	enc_calculate_optimal_frequency:
 2828              	.LFB155:
1139:Src/Eagle_TRT.c **** 	double abs_delta_angle = (enc->delta_angle >= 0) ? enc->delta_angle : enc->delta_angle * -1;
 2829              		.loc 1 1139 0
 2830              		.cfi_startproc
 2831              		@ args = 0, pretend = 0, frame = 0
 2832              		@ frame_needed = 0, uses_anonymous_args = 0
 2833              	.LVL273:
 2834 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
 2835              	.LCFI40:
 2836              		.cfi_def_cfa_offset 24
 2837              		.cfi_offset 4, -24
 2838              		.cfi_offset 6, -20
 2839              		.cfi_offset 7, -16
 2840              		.cfi_offset 8, -12
 2841              		.cfi_offset 9, -8
 2842              		.cfi_offset 14, -4
 2843 0004 0446     		mov	r4, r0
1140:Src/Eagle_TRT.c **** 
 2844              		.loc 1 1140 0
 2845 0006 D0E92667 		ldrd	r6, [r0, #152]
 2846 000a 0022     		movs	r2, #0
 2847 000c 0023     		movs	r3, #0
 2848 000e 3046     		mov	r0, r6
 2849              	.LVL274:
 2850 0010 3946     		mov	r1, r7
 2851 0012 FFF7FEFF 		bl	__aeabi_dcmpge
 2852              	.LVL275:
 2853 0016 0028     		cmp	r0, #0
 2854 0018 79D0     		beq	.L221
 2855              	.L210:
 2856              	.LVL276:
1142:Src/Eagle_TRT.c **** 	{
 2857              		.loc 1 1142 0 discriminator 4
 2858 001a 206E     		ldr	r0, [r4, #96]	@ float
 2859 001c FFF7FEFF 		bl	__aeabi_f2d
 2860              	.LVL277:
 2861 0020 8046     		mov	r8, r0
 2862 0022 8946     		mov	r9, r1
 2863 0024 4FF03332 		mov	r2, #858993459
 2864 0028 414B     		ldr	r3, .L223+16
 2865 002a FFF7FEFF 		bl	__aeabi_dmul
 2866              	.LVL278:
 2867 002e 0246     		mov	r2, r0
 2868 0030 0B46     		mov	r3, r1
 2869 0032 3046     		mov	r0, r6
 2870 0034 3946     		mov	r1, r7
 2871 0036 FFF7FEFF 		bl	__aeabi_dcmpgt
 2872              	.LVL279:
 2873 003a 68B9     		cbnz	r0, .L211
1142:Src/Eagle_TRT.c **** 	{
 2874              		.loc 1 1142 0 is_stmt 0 discriminator 1
 2875 003c 0022     		movs	r2, #0
 2876 003e 3D4B     		ldr	r3, .L223+20
 2877 0040 4046     		mov	r0, r8
 2878 0042 4946     		mov	r1, r9
 2879 0044 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccuwAQC3.s 			page 78


 2880              	.LVL280:
 2881 0048 0246     		mov	r2, r0
 2882 004a 0B46     		mov	r3, r1
 2883 004c 3046     		mov	r0, r6
 2884 004e 3946     		mov	r1, r7
 2885 0050 FFF7FEFF 		bl	__aeabi_dcmplt
 2886              	.LVL281:
 2887 0054 0028     		cmp	r0, #0
 2888 0056 58D0     		beq	.L209
 2889              	.L211:
 2890              	.LBB13:
1144:Src/Eagle_TRT.c **** 		double frequency = angular_speed / (enc->max_delta_angle * 3.14 / 180);
 2891              		.loc 1 1144 0 is_stmt 1
 2892 0058 D4E9F067 		ldrd	r6, [r4, #960]
 2893              	.LVL282:
 2894 005c 94ED177A 		vldr.32	s14, [r4, #92]
 2895 0060 F6EE007A 		vmov.f32	s15, #5.0e-1
 2896 0064 67EE277A 		vmul.f32	s15, s14, s15
 2897 0068 17EE900A 		vmov	r0, s15
 2898 006c FFF7FEFF 		bl	__aeabi_f2d
 2899              	.LVL283:
 2900 0070 2BA3     		adr	r3, .L223
 2901 0072 D3E90023 		ldrd	r2, [r3]
 2902 0076 FFF7FEFF 		bl	__aeabi_dmul
 2903              	.LVL284:
 2904 007a 0246     		mov	r2, r0
 2905 007c 0B46     		mov	r3, r1
 2906 007e 3046     		mov	r0, r6
 2907 0080 3946     		mov	r1, r7
 2908 0082 FFF7FEFF 		bl	__aeabi_ddiv
 2909              	.LVL285:
 2910 0086 0646     		mov	r6, r0
 2911 0088 0F46     		mov	r7, r1
 2912              	.LVL286:
1145:Src/Eagle_TRT.c **** 
 2913              		.loc 1 1145 0
 2914 008a 27A3     		adr	r3, .L223+8
 2915 008c D3E90023 		ldrd	r2, [r3]
 2916 0090 4046     		mov	r0, r8
 2917 0092 4946     		mov	r1, r9
 2918 0094 FFF7FEFF 		bl	__aeabi_dmul
 2919              	.LVL287:
 2920 0098 0022     		movs	r2, #0
 2921 009a 274B     		ldr	r3, .L223+24
 2922 009c FFF7FEFF 		bl	__aeabi_ddiv
 2923              	.LVL288:
 2924 00a0 0246     		mov	r2, r0
 2925 00a2 0B46     		mov	r3, r1
 2926 00a4 3046     		mov	r0, r6
 2927 00a6 3946     		mov	r1, r7
 2928 00a8 FFF7FEFF 		bl	__aeabi_ddiv
 2929              	.LVL289:
 2930 00ac 0646     		mov	r6, r0
 2931              	.LVL290:
 2932 00ae 0F46     		mov	r7, r1
 2933              	.LVL291:
1147:Src/Eagle_TRT.c **** 
ARM GAS  /tmp/ccuwAQC3.s 			page 79


 2934              		.loc 1 1147 0
 2935 00b0 FFF7FEFF 		bl	__aeabi_d2f
 2936              	.LVL292:
 2937 00b4 C4F8CC03 		str	r0, [r4, #972]	@ float
1149:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
 2938              		.loc 1 1149 0
 2939 00b8 0022     		movs	r2, #0
 2940 00ba 0023     		movs	r3, #0
 2941 00bc 3046     		mov	r0, r6
 2942 00be 3946     		mov	r1, r7
 2943 00c0 FFF7FEFF 		bl	__aeabi_dcmplt
 2944              	.LVL293:
 2945 00c4 38BB     		cbnz	r0, .L222
 2946              	.L214:
1150:Src/Eagle_TRT.c **** 
 2947              		.loc 1 1150 0 discriminator 4
 2948 00c6 0022     		movs	r2, #0
 2949 00c8 1C4B     		ldr	r3, .L223+28
 2950 00ca 3046     		mov	r0, r6
 2951 00cc 3946     		mov	r1, r7
 2952 00ce FFF7FEFF 		bl	__aeabi_dcmplt
 2953              	.LVL294:
 2954 00d2 08B1     		cbz	r0, .L216
1150:Src/Eagle_TRT.c **** 
 2955              		.loc 1 1150 0 is_stmt 0
 2956 00d4 0026     		movs	r6, #0
 2957              	.LVL295:
 2958 00d6 194F     		ldr	r7, .L223+28
 2959              	.L216:
 2960              	.LVL296:
1153:Src/Eagle_TRT.c **** 		{
 2961              		.loc 1 1153 0 is_stmt 1 discriminator 4
 2962 00d8 3046     		mov	r0, r6
 2963 00da 3946     		mov	r1, r7
 2964 00dc FFF7FEFF 		bl	__aeabi_d2f
 2965              	.LVL297:
 2966 00e0 00EE100A 		vmov	s0, r0
 2967 00e4 2046     		mov	r0, r4
 2968 00e6 FFF7FEFF 		bl	ReinitTIM7
 2969              	.LVL298:
 2970 00ea 70B9     		cbnz	r0, .L209
1156:Src/Eagle_TRT.c **** 		}
 2971              		.loc 1 1156 0
 2972 00ec A36E     		ldr	r3, [r4, #104]
 2973 00ee D4F8D413 		ldr	r1, [r4, #980]
 2974 00f2 4868     		ldr	r0, [r1, #4]
 2975 00f4 CA68     		ldr	r2, [r1, #12]
 2976 00f6 02FB00F2 		mul	r2, r2, r0
 2977 00fa B3FBF2F3 		udiv	r3, r3, r2
 2978 00fe 07EE903A 		vmov	s15, r3	@ int
 2979 0102 F8EE677A 		vcvt.f32.u32	s15, s15
 2980 0106 C4ED197A 		vstr.32	s15, [r4, #100]
 2981              	.LVL299:
 2982              	.L209:
 2983 010a BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 2984              	.LVL300:
 2985              	.L221:
ARM GAS  /tmp/ccuwAQC3.s 			page 80


 2986              	.LBE13:
1140:Src/Eagle_TRT.c **** 
 2987              		.loc 1 1140 0 discriminator 2
 2988 010e 07F10043 		add	r3, r7, #-2147483648
 2989 0112 1F46     		mov	r7, r3
 2990 0114 81E7     		b	.L210
 2991              	.LVL301:
 2992              	.L222:
 2993              	.LBB14:
1149:Src/Eagle_TRT.c **** 		frequency = frequency < 50 ? 50 : frequency;
 2994              		.loc 1 1149 0 discriminator 1
 2995 0116 07F10043 		add	r3, r7, #-2147483648
 2996 011a 1F46     		mov	r7, r3
 2997 011c D3E7     		b	.L214
 2998              	.L224:
 2999 011e 00BF     		.align	3
 3000              	.L223:
 3001 0120 CDCCCCCC 		.word	3435973837
 3002 0124 CCCC0C40 		.word	1074580684
 3003 0128 1F85EB51 		.word	1374389535
 3004 012c B81E0940 		.word	1074339512
 3005 0130 3333F33F 		.word	1072902963
 3006 0134 0000E03F 		.word	1071644672
 3007 0138 00806640 		.word	1080459264
 3008 013c 00004940 		.word	1078525952
 3009              	.LBE14:
 3010              		.cfi_endproc
 3011              	.LFE155:
 3013              		.section	.text.calc_pot_value,"ax",%progbits
 3014              		.align	1
 3015              		.global	calc_pot_value
 3016              		.syntax unified
 3017              		.thumb
 3018              		.thumb_func
 3019              		.fpu fpv4-sp-d16
 3021              	calc_pot_value:
 3022              	.LFB157:
1198:Src/Eagle_TRT.c **** 
1199:Src/Eagle_TRT.c **** pot_stc pot_1;
1200:Src/Eagle_TRT.c **** pot_stc pot_2;
1201:Src/Eagle_TRT.c **** pot_stc pot_3;
1202:Src/Eagle_TRT.c **** void calc_pot_value(pot_stc *pot)
1203:Src/Eagle_TRT.c **** {
 3023              		.loc 1 1203 0
 3024              		.cfi_startproc
 3025              		@ args = 0, pretend = 0, frame = 0
 3026              		@ frame_needed = 0, uses_anonymous_args = 0
 3027              		@ link register save eliminated.
 3028              	.LVL302:
 3029 0000 10B4     		push	{r4}
 3030              	.LCFI41:
 3031              		.cfi_def_cfa_offset 4
 3032              		.cfi_offset 4, -4
1204:Src/Eagle_TRT.c **** 
1205:Src/Eagle_TRT.c **** 	pot->val_100 = round(100 - (abs(pot->val - pot->min) * 100 / (pot->range))); //val0_100 -->STEER -
 3033              		.loc 1 1205 0
 3034 0002 0269     		ldr	r2, [r0, #16]
ARM GAS  /tmp/ccuwAQC3.s 			page 81


 3035 0004 8468     		ldr	r4, [r0, #8]
 3036 0006 131B     		subs	r3, r2, r4
 3037 0008 83EAE371 		eor	r1, r3, r3, asr #31
 3038 000c A1EBE371 		sub	r1, r1, r3, asr #31
 3039 0010 6FF06303 		mvn	r3, #99
 3040 0014 03FB01F3 		mul	r3, r3, r1
 3041 0018 C168     		ldr	r1, [r0, #12]
 3042 001a 93FBF1F3 		sdiv	r3, r3, r1
 3043 001e 6433     		adds	r3, r3, #100
 3044 0020 0360     		str	r3, [r0]
1206:Src/Eagle_TRT.c **** 	if (pot->val <= pot->min)
 3045              		.loc 1 1206 0
 3046 0022 A242     		cmp	r2, r4
 3047 0024 01DC     		bgt	.L226
1207:Src/Eagle_TRT.c **** 	{
1208:Src/Eagle_TRT.c **** 		pot->val_100 = 100;
 3048              		.loc 1 1208 0
 3049 0026 6423     		movs	r3, #100
 3050 0028 0360     		str	r3, [r0]
 3051              	.L226:
1209:Src/Eagle_TRT.c **** 	}
1210:Src/Eagle_TRT.c **** 	if (pot->val >= pot->max)
 3052              		.loc 1 1210 0
 3053 002a 4368     		ldr	r3, [r0, #4]
 3054 002c 9A42     		cmp	r2, r3
 3055 002e 01DB     		blt	.L225
1211:Src/Eagle_TRT.c **** 	{
1212:Src/Eagle_TRT.c **** 		pot->val_100 = 0;
 3056              		.loc 1 1212 0
 3057 0030 0023     		movs	r3, #0
 3058 0032 0360     		str	r3, [r0]
 3059              	.L225:
1213:Src/Eagle_TRT.c **** 	}
1214:Src/Eagle_TRT.c **** }
 3060              		.loc 1 1214 0
 3061 0034 5DF8044B 		ldr	r4, [sp], #4
 3062              	.LCFI42:
 3063              		.cfi_restore 4
 3064              		.cfi_def_cfa_offset 0
 3065 0038 7047     		bx	lr
 3066              		.cfi_endproc
 3067              	.LFE157:
 3069              		.section	.text.implausibility_check,"ax",%progbits
 3070              		.align	1
 3071              		.global	implausibility_check
 3072              		.syntax unified
 3073              		.thumb
 3074              		.thumb_func
 3075              		.fpu fpv4-sp-d16
 3077              	implausibility_check:
 3078              	.LFB158:
1215:Src/Eagle_TRT.c **** 
1216:Src/Eagle_TRT.c **** //Function to check if the two ADC values are approximately the same
1217:Src/Eagle_TRT.c **** //if the values are different for more tha 10 points percentage for more than 100 milliseconds retu
1218:Src/Eagle_TRT.c **** //TimerInstance = pointer to the timer needed to check the SCS error
1219:Src/Eagle_TRT.c **** //val0_100 = pointer to the first potentiometer
1220:Src/Eagle_TRT.c **** //val1_100 = pointer to the second potentiometer
ARM GAS  /tmp/ccuwAQC3.s 			page 82


1221:Src/Eagle_TRT.c **** int implausibility_check(pot_stc *pot_1, pot_stc *pot_2)
1222:Src/Eagle_TRT.c **** {
 3079              		.loc 1 1222 0
 3080              		.cfi_startproc
 3081              		@ args = 0, pretend = 0, frame = 0
 3082              		@ frame_needed = 0, uses_anonymous_args = 0
 3083              		@ link register save eliminated.
 3084              	.LVL303:
1223:Src/Eagle_TRT.c **** 
1224:Src/Eagle_TRT.c **** 	int SCS1 = 0;
1225:Src/Eagle_TRT.c **** 
1226:Src/Eagle_TRT.c **** 	if (pot_1->val_100 >= 100)
 3085              		.loc 1 1226 0
 3086 0000 0368     		ldr	r3, [r0]
 3087 0002 632B     		cmp	r3, #99
 3088 0004 01DD     		ble	.L230
1227:Src/Eagle_TRT.c **** 	{
1228:Src/Eagle_TRT.c **** 		pot_1->val_100 = 100;
 3089              		.loc 1 1228 0
 3090 0006 6423     		movs	r3, #100
 3091 0008 0360     		str	r3, [r0]
 3092              	.L230:
1229:Src/Eagle_TRT.c **** 	}
1230:Src/Eagle_TRT.c **** 	if (pot_1->val_100 <= 5)
 3093              		.loc 1 1230 0
 3094 000a 0368     		ldr	r3, [r0]
 3095 000c 052B     		cmp	r3, #5
 3096 000e 01DC     		bgt	.L231
1231:Src/Eagle_TRT.c **** 	{
1232:Src/Eagle_TRT.c **** 		pot_1->val_100 = 0;
 3097              		.loc 1 1232 0
 3098 0010 0023     		movs	r3, #0
 3099 0012 0360     		str	r3, [r0]
 3100              	.L231:
1233:Src/Eagle_TRT.c **** 	}
1234:Src/Eagle_TRT.c **** 	if (pot_2->val_100 >= 100)
 3101              		.loc 1 1234 0
 3102 0014 0B68     		ldr	r3, [r1]
 3103 0016 632B     		cmp	r3, #99
 3104 0018 01DD     		ble	.L232
1235:Src/Eagle_TRT.c **** 	{
1236:Src/Eagle_TRT.c **** 		pot_2->val_100 = 100;
 3105              		.loc 1 1236 0
 3106 001a 6423     		movs	r3, #100
 3107 001c 0B60     		str	r3, [r1]
 3108              	.L232:
1237:Src/Eagle_TRT.c **** 	}
1238:Src/Eagle_TRT.c **** 	if (pot_2->val_100 <= 5)
 3109              		.loc 1 1238 0
 3110 001e 0B68     		ldr	r3, [r1]
 3111 0020 052B     		cmp	r3, #5
 3112 0022 01DC     		bgt	.L233
1239:Src/Eagle_TRT.c **** 	{
1240:Src/Eagle_TRT.c **** 		pot_2->val_100 = 0;
 3113              		.loc 1 1240 0
 3114 0024 0023     		movs	r3, #0
 3115 0026 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccuwAQC3.s 			page 83


 3116              	.L233:
1241:Src/Eagle_TRT.c **** 	}
1242:Src/Eagle_TRT.c **** 	if (abs(pot_1->val_100 - pot_2->val_100) >= 10)
 3117              		.loc 1 1242 0
 3118 0028 0368     		ldr	r3, [r0]
 3119 002a 0A68     		ldr	r2, [r1]
 3120 002c 9B1A     		subs	r3, r3, r2
 3121 002e 002B     		cmp	r3, #0
 3122 0030 B8BF     		it	lt
 3123 0032 5B42     		rsblt	r3, r3, #0
 3124 0034 092B     		cmp	r3, #9
 3125 0036 06DD     		ble	.L234
1243:Src/Eagle_TRT.c **** 	{
1244:Src/Eagle_TRT.c **** 		if (__HAL_TIM_GET_COUNTER(pot_1->TimerInstance) > 100)
 3126              		.loc 1 1244 0
 3127 0038 4369     		ldr	r3, [r0, #20]
 3128 003a 1B68     		ldr	r3, [r3]
 3129 003c 5B6A     		ldr	r3, [r3, #36]
 3130 003e 642B     		cmp	r3, #100
 3131 0040 06D8     		bhi	.L236
1224:Src/Eagle_TRT.c **** 
 3132              		.loc 1 1224 0
 3133 0042 0020     		movs	r0, #0
 3134              	.LVL304:
 3135 0044 7047     		bx	lr
 3136              	.LVL305:
 3137              	.L234:
1245:Src/Eagle_TRT.c **** 		{
1246:Src/Eagle_TRT.c **** 			SCS1 = 1;
1247:Src/Eagle_TRT.c **** 		}
1248:Src/Eagle_TRT.c **** 	}
1249:Src/Eagle_TRT.c **** 	else
1250:Src/Eagle_TRT.c **** 	{
1251:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(pot_1->TimerInstance, 0);
 3138              		.loc 1 1251 0
 3139 0046 4369     		ldr	r3, [r0, #20]
 3140 0048 1B68     		ldr	r3, [r3]
 3141 004a 0020     		movs	r0, #0
 3142              	.LVL306:
 3143 004c 5862     		str	r0, [r3, #36]
 3144 004e 7047     		bx	lr
 3145              	.LVL307:
 3146              	.L236:
1246:Src/Eagle_TRT.c **** 		}
 3147              		.loc 1 1246 0
 3148 0050 0120     		movs	r0, #1
 3149              	.LVL308:
1252:Src/Eagle_TRT.c **** 		SCS1 = 0;
1253:Src/Eagle_TRT.c **** 	}
1254:Src/Eagle_TRT.c **** 
1255:Src/Eagle_TRT.c **** 	return SCS1;
1256:Src/Eagle_TRT.c **** }
 3150              		.loc 1 1256 0
 3151 0052 7047     		bx	lr
 3152              		.cfi_endproc
 3153              	.LFE158:
 3155              		.section	.text.set_max,"ax",%progbits
ARM GAS  /tmp/ccuwAQC3.s 			page 84


 3156              		.align	1
 3157              		.global	set_max
 3158              		.syntax unified
 3159              		.thumb
 3160              		.thumb_func
 3161              		.fpu fpv4-sp-d16
 3163              	set_max:
 3164              	.LFB159:
1257:Src/Eagle_TRT.c **** 
1258:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is released
1259:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1260:Src/Eagle_TRT.c **** //max1 = pointer to the maximum value of the APPS1
1261:Src/Eagle_TRT.c **** //max2 = pointer to the maximum value of the APPS2
1262:Src/Eagle_TRT.c **** void set_max(pot_stc *pot_1)
1263:Src/Eagle_TRT.c **** {
 3165              		.loc 1 1263 0
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 0
 3168              		@ frame_needed = 0, uses_anonymous_args = 0
 3169              		@ link register save eliminated.
 3170              	.LVL309:
1264:Src/Eagle_TRT.c **** 	pot_1->max = pot_1->val;
 3171              		.loc 1 1264 0
 3172 0000 0369     		ldr	r3, [r0, #16]
 3173 0002 4360     		str	r3, [r0, #4]
 3174 0004 7047     		bx	lr
 3175              		.cfi_endproc
 3176              	.LFE159:
 3178              		.section	.text.set_min,"ax",%progbits
 3179              		.align	1
 3180              		.global	set_min
 3181              		.syntax unified
 3182              		.thumb
 3183              		.thumb_func
 3184              		.fpu fpv4-sp-d16
 3186              	set_min:
 3187              	.LFB160:
1265:Src/Eagle_TRT.c **** }
1266:Src/Eagle_TRT.c **** 
1267:Src/Eagle_TRT.c **** //function to set the value of the potentiometer when the pedal is pressed
1268:Src/Eagle_TRT.c **** //val = array pointer to the potentiometer values
1269:Src/Eagle_TRT.c **** //min1 = pointer to the minimum value of the APPS1
1270:Src/Eagle_TRT.c **** //min2 = pointer to the minimum value of the APPS2
1271:Src/Eagle_TRT.c **** void set_min(pot_stc *pot_1)
1272:Src/Eagle_TRT.c **** {
 3188              		.loc 1 1272 0
 3189              		.cfi_startproc
 3190              		@ args = 0, pretend = 0, frame = 0
 3191              		@ frame_needed = 0, uses_anonymous_args = 0
 3192              		@ link register save eliminated.
 3193              	.LVL310:
1273:Src/Eagle_TRT.c **** 	pot_1->min = pot_1->val;
 3194              		.loc 1 1273 0
 3195 0000 0369     		ldr	r3, [r0, #16]
 3196 0002 8360     		str	r3, [r0, #8]
 3197 0004 7047     		bx	lr
 3198              		.cfi_endproc
ARM GAS  /tmp/ccuwAQC3.s 			page 85


 3199              	.LFE160:
 3201              		.global	__aeabi_i2d
 3202              		.section	.text.Power,"ax",%progbits
 3203              		.align	1
 3204              		.global	Power
 3205              		.syntax unified
 3206              		.thumb
 3207              		.thumb_func
 3208              		.fpu fpv4-sp-d16
 3210              	Power:
 3211              	.LFB162:
1274:Src/Eagle_TRT.c **** }
1275:Src/Eagle_TRT.c **** 
1276:Src/Eagle_TRT.c **** #endif
1277:Src/Eagle_TRT.c **** 
1278:Src/Eagle_TRT.c **** //function to calculate the decimal value from MSB binary array
1279:Src/Eagle_TRT.c **** //bin = pointer to binary array
1280:Src/Eagle_TRT.c **** //max = size of the array
1281:Src/Eagle_TRT.c **** int bin_dec(int *bin, int size)
1282:Src/Eagle_TRT.c **** {
1283:Src/Eagle_TRT.c **** 
1284:Src/Eagle_TRT.c **** 	int dec = 0;
1285:Src/Eagle_TRT.c **** 
1286:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1287:Src/Eagle_TRT.c **** 	{
1288:Src/Eagle_TRT.c **** 		if (bin[i] == 1)
1289:Src/Eagle_TRT.c **** 		{
1290:Src/Eagle_TRT.c **** 			dec += Power(2, size - i - 1);
1291:Src/Eagle_TRT.c **** 		}
1292:Src/Eagle_TRT.c **** 	}
1293:Src/Eagle_TRT.c **** 	return dec;
1294:Src/Eagle_TRT.c **** }
1295:Src/Eagle_TRT.c **** 
1296:Src/Eagle_TRT.c **** //function to calculate the power of a given number
1297:Src/Eagle_TRT.c **** double Power(int base, int expn)
1298:Src/Eagle_TRT.c **** {
 3212              		.loc 1 1298 0
 3213              		.cfi_startproc
 3214              		@ args = 0, pretend = 0, frame = 0
 3215              		@ frame_needed = 0, uses_anonymous_args = 0
 3216              	.LVL311:
 3217 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3218              	.LCFI43:
 3219              		.cfi_def_cfa_offset 24
 3220              		.cfi_offset 4, -24
 3221              		.cfi_offset 5, -20
 3222              		.cfi_offset 6, -16
 3223              		.cfi_offset 7, -12
 3224              		.cfi_offset 8, -8
 3225              		.cfi_offset 14, -4
 3226              	.LVL312:
1299:Src/Eagle_TRT.c **** 
1300:Src/Eagle_TRT.c **** 	double result = 1;
1301:Src/Eagle_TRT.c **** 
1302:Src/Eagle_TRT.c **** 	if (expn != 0)
 3227              		.loc 1 1302 0
 3228 0004 29B1     		cbz	r1, .L245
ARM GAS  /tmp/ccuwAQC3.s 			page 86


 3229 0006 0D46     		mov	r5, r1
 3230 0008 8046     		mov	r8, r0
 3231 000a 0024     		movs	r4, #0
 3232 000c 0026     		movs	r6, #0
 3233 000e 0B4F     		ldr	r7, .L246
 3234 0010 0EE0     		b	.L240
 3235              	.L245:
1300:Src/Eagle_TRT.c **** 
 3236              		.loc 1 1300 0
 3237 0012 0026     		movs	r6, #0
 3238 0014 094F     		ldr	r7, .L246
 3239 0016 0DE0     		b	.L239
 3240              	.LVL313:
 3241              	.L242:
 3242              	.LBB15:
1303:Src/Eagle_TRT.c **** 	{
1304:Src/Eagle_TRT.c **** 		for (int j = 0; j < expn; j++)
1305:Src/Eagle_TRT.c **** 		{
1306:Src/Eagle_TRT.c **** 			result = result * base;
 3243              		.loc 1 1306 0 discriminator 3
 3244 0018 4046     		mov	r0, r8
 3245 001a FFF7FEFF 		bl	__aeabi_i2d
 3246              	.LVL314:
 3247 001e 0246     		mov	r2, r0
 3248 0020 0B46     		mov	r3, r1
 3249 0022 3046     		mov	r0, r6
 3250 0024 3946     		mov	r1, r7
 3251 0026 FFF7FEFF 		bl	__aeabi_dmul
 3252              	.LVL315:
 3253 002a 0646     		mov	r6, r0
 3254              	.LVL316:
 3255 002c 0F46     		mov	r7, r1
 3256              	.LVL317:
1304:Src/Eagle_TRT.c **** 		{
 3257              		.loc 1 1304 0 discriminator 3
 3258 002e 0134     		adds	r4, r4, #1
 3259              	.LVL318:
 3260              	.L240:
1304:Src/Eagle_TRT.c **** 		{
 3261              		.loc 1 1304 0 is_stmt 0 discriminator 1
 3262 0030 AC42     		cmp	r4, r5
 3263 0032 F1DB     		blt	.L242
 3264              	.LVL319:
 3265              	.L239:
 3266              	.LBE15:
1307:Src/Eagle_TRT.c **** 		}
1308:Src/Eagle_TRT.c **** 	}
1309:Src/Eagle_TRT.c **** 
1310:Src/Eagle_TRT.c **** 	return result;
1311:Src/Eagle_TRT.c **** }
 3267              		.loc 1 1311 0 is_stmt 1
 3268 0034 47EC106B 		vmov	d0, r6, r7
 3269 0038 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3270              	.L247:
 3271              		.align	2
 3272              	.L246:
 3273 003c 0000F03F 		.word	1072693248
ARM GAS  /tmp/ccuwAQC3.s 			page 87


 3274              		.cfi_endproc
 3275              	.LFE162:
 3277              		.section	.text.bin_dec,"ax",%progbits
 3278              		.align	1
 3279              		.global	bin_dec
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
 3285              	bin_dec:
 3286              	.LFB161:
1282:Src/Eagle_TRT.c **** 
 3287              		.loc 1 1282 0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 3291              	.LVL320:
 3292 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3293              	.LCFI44:
 3294              		.cfi_def_cfa_offset 32
 3295              		.cfi_offset 3, -32
 3296              		.cfi_offset 4, -28
 3297              		.cfi_offset 5, -24
 3298              		.cfi_offset 6, -20
 3299              		.cfi_offset 7, -16
 3300              		.cfi_offset 8, -12
 3301              		.cfi_offset 9, -8
 3302              		.cfi_offset 14, -4
 3303 0004 0646     		mov	r6, r0
 3304 0006 0D46     		mov	r5, r1
 3305              	.LVL321:
 3306              	.LBB16:
1286:Src/Eagle_TRT.c **** 	{
 3307              		.loc 1 1286 0
 3308 0008 0024     		movs	r4, #0
 3309              	.LBE16:
1284:Src/Eagle_TRT.c **** 
 3310              		.loc 1 1284 0
 3311 000a 2746     		mov	r7, r4
 3312              	.LBB17:
1286:Src/Eagle_TRT.c **** 	{
 3313              		.loc 1 1286 0
 3314 000c 00E0     		b	.L249
 3315              	.LVL322:
 3316              	.L250:
1286:Src/Eagle_TRT.c **** 	{
 3317              		.loc 1 1286 0 is_stmt 0 discriminator 2
 3318 000e 0134     		adds	r4, r4, #1
 3319              	.LVL323:
 3320              	.L249:
1286:Src/Eagle_TRT.c **** 	{
 3321              		.loc 1 1286 0 discriminator 1
 3322 0010 AC42     		cmp	r4, r5
 3323 0012 15DA     		bge	.L253
1288:Src/Eagle_TRT.c **** 		{
 3324              		.loc 1 1288 0 is_stmt 1
 3325 0014 56F82430 		ldr	r3, [r6, r4, lsl #2]
ARM GAS  /tmp/ccuwAQC3.s 			page 88


 3326 0018 012B     		cmp	r3, #1
 3327 001a F8D1     		bne	.L250
1290:Src/Eagle_TRT.c **** 		}
 3328              		.loc 1 1290 0
 3329 001c 291B     		subs	r1, r5, r4
 3330 001e 0139     		subs	r1, r1, #1
 3331 0020 0220     		movs	r0, #2
 3332 0022 FFF7FEFF 		bl	Power
 3333              	.LVL324:
 3334 0026 59EC108B 		vmov	r8, r9, d0
 3335 002a 3846     		mov	r0, r7
 3336 002c FFF7FEFF 		bl	__aeabi_i2d
 3337              	.LVL325:
 3338 0030 4246     		mov	r2, r8
 3339 0032 4B46     		mov	r3, r9
 3340 0034 FFF7FEFF 		bl	__aeabi_dadd
 3341              	.LVL326:
 3342 0038 FFF7FEFF 		bl	__aeabi_d2iz
 3343              	.LVL327:
 3344 003c 0746     		mov	r7, r0
 3345              	.LVL328:
 3346 003e E6E7     		b	.L250
 3347              	.LVL329:
 3348              	.L253:
 3349              	.LBE17:
1294:Src/Eagle_TRT.c **** 
 3350              		.loc 1 1294 0
 3351 0040 3846     		mov	r0, r7
 3352 0042 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3353              		.cfi_endproc
 3354              	.LFE161:
 3356              		.section	.text.read_SSI,"ax",%progbits
 3357              		.align	1
 3358              		.global	read_SSI
 3359              		.syntax unified
 3360              		.thumb
 3361              		.thumb_func
 3362              		.fpu fpv4-sp-d16
 3364              	read_SSI:
 3365              	.LFB152:
 950:Src/Eagle_TRT.c **** 
 3366              		.loc 1 950 0
 3367              		.cfi_startproc
 3368              		@ args = 0, pretend = 0, frame = 0
 3369              		@ frame_needed = 1, uses_anonymous_args = 0
 3370              	.LVL330:
 3371 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3372              	.LCFI45:
 3373              		.cfi_def_cfa_offset 24
 3374              		.cfi_offset 3, -24
 3375              		.cfi_offset 4, -20
 3376              		.cfi_offset 5, -16
 3377              		.cfi_offset 6, -12
 3378              		.cfi_offset 7, -8
 3379              		.cfi_offset 14, -4
 3380 0002 00AF     		add	r7, sp, #0
 3381              	.LCFI46:
ARM GAS  /tmp/ccuwAQC3.s 			page 89


 3382              		.cfi_def_cfa_register 7
 3383 0004 0446     		mov	r4, r0
 952:Src/Eagle_TRT.c **** 
 3384              		.loc 1 952 0
 3385 0006 0368     		ldr	r3, [r0]
 3386              	.LVL331:
 3387 0008 9B00     		lsls	r3, r3, #2
 3388              	.LVL332:
 3389 000a 0A33     		adds	r3, r3, #10
 3390 000c 23F00703 		bic	r3, r3, #7
 3391 0010 ADEB030D 		sub	sp, sp, r3
 3392 0014 6E46     		mov	r6, sp
 3393              	.LVL333:
 954:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3394              		.loc 1 954 0
 3395 0016 0022     		movs	r2, #0
 3396 0018 B0F8E013 		ldrh	r1, [r0, #992]
 3397 001c D0F8D803 		ldr	r0, [r0, #984]
 3398              	.LVL334:
 3399 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3400              	.LVL335:
 955:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3401              		.loc 1 955 0
 3402 0024 D4F8D033 		ldr	r3, [r4, #976]
 3403 0028 1B68     		ldr	r3, [r3]
 3404 002a 0022     		movs	r2, #0
 3405 002c 5A62     		str	r2, [r3, #36]
 3406              	.L255:
 956:Src/Eagle_TRT.c **** 	{
 3407              		.loc 1 956 0 discriminator 1
 3408 002e D4F8D033 		ldr	r3, [r4, #976]
 3409 0032 1B68     		ldr	r3, [r3]
 3410 0034 5A6A     		ldr	r2, [r3, #36]
 3411 0036 E368     		ldr	r3, [r4, #12]
 3412 0038 9A42     		cmp	r2, r3
 3413 003a F8D9     		bls	.L255
 959:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3414              		.loc 1 959 0
 3415 003c 0122     		movs	r2, #1
 3416 003e B4F8E013 		ldrh	r1, [r4, #992]
 3417 0042 D4F8D803 		ldr	r0, [r4, #984]
 3418 0046 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3419              	.LVL336:
 960:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3420              		.loc 1 960 0
 3421 004a D4F8D033 		ldr	r3, [r4, #976]
 3422 004e 1B68     		ldr	r3, [r3]
 3423 0050 0022     		movs	r2, #0
 3424 0052 5A62     		str	r2, [r3, #36]
 3425              	.L256:
 961:Src/Eagle_TRT.c **** 	{
 3426              		.loc 1 961 0 discriminator 1
 3427 0054 D4F8D033 		ldr	r3, [r4, #976]
 3428 0058 1B68     		ldr	r3, [r3]
 3429 005a 5A6A     		ldr	r2, [r3, #36]
 3430 005c E368     		ldr	r3, [r4, #12]
 3431 005e 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccuwAQC3.s 			page 90


 3432 0060 F8D9     		bls	.L256
 964:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3433              		.loc 1 964 0
 3434 0062 0022     		movs	r2, #0
 3435 0064 B4F8E013 		ldrh	r1, [r4, #992]
 3436 0068 D4F8D803 		ldr	r0, [r4, #984]
 3437 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 3438              	.LVL337:
 965:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3439              		.loc 1 965 0
 3440 0070 D4F8D033 		ldr	r3, [r4, #976]
 3441 0074 1B68     		ldr	r3, [r3]
 3442 0076 0022     		movs	r2, #0
 3443 0078 5A62     		str	r2, [r3, #36]
 3444              	.L257:
 966:Src/Eagle_TRT.c **** 	{
 3445              		.loc 1 966 0 discriminator 1
 3446 007a D4F8D033 		ldr	r3, [r4, #976]
 3447 007e 1B68     		ldr	r3, [r3]
 3448 0080 5A6A     		ldr	r2, [r3, #36]
 3449 0082 E368     		ldr	r3, [r4, #12]
 3450 0084 9A42     		cmp	r2, r3
 3451 0086 F8D9     		bls	.L257
 3452 0088 0025     		movs	r5, #0
 3453 008a 43E0     		b	.L258
 3454              	.LVL338:
 3455              	.L262:
 3456              	.LBB18:
 975:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3457              		.loc 1 975 0
 3458 008c 0122     		movs	r2, #1
 3459 008e B4F8E013 		ldrh	r1, [r4, #992]
 3460 0092 D4F8D803 		ldr	r0, [r4, #984]
 3461 0096 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3462              	.LVL339:
 976:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 3463              		.loc 1 976 0
 3464 009a D4F8D033 		ldr	r3, [r4, #976]
 3465 009e 1B68     		ldr	r3, [r3]
 3466 00a0 0022     		movs	r2, #0
 3467 00a2 5A62     		str	r2, [r3, #36]
 3468              	.L259:
 977:Src/Eagle_TRT.c **** 		{
 3469              		.loc 1 977 0 discriminator 1
 3470 00a4 D4F8D033 		ldr	r3, [r4, #976]
 3471 00a8 1B68     		ldr	r3, [r3]
 3472 00aa 5A6A     		ldr	r2, [r3, #36]
 3473 00ac E368     		ldr	r3, [r4, #12]
 3474 00ae 03EBD373 		add	r3, r3, r3, lsr #31
 3475 00b2 B2EB630F 		cmp	r2, r3, asr #1
 3476 00b6 F5D9     		bls	.L259
 983:Src/Eagle_TRT.c **** 		enc->Data[i] = bin_data[i];
 3477              		.loc 1 983 0
 3478 00b8 B4F8E213 		ldrh	r1, [r4, #994]
 3479 00bc D4F8DC03 		ldr	r0, [r4, #988]
 3480 00c0 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3481              	.LVL340:
ARM GAS  /tmp/ccuwAQC3.s 			page 91


 3482 00c4 46F82500 		str	r0, [r6, r5, lsl #2]
 984:Src/Eagle_TRT.c **** 
 3483              		.loc 1 984 0
 3484 00c8 2B1D     		adds	r3, r5, #4
 3485 00ca 44F82300 		str	r0, [r4, r3, lsl #2]
 986:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period / 2)
 3486              		.loc 1 986 0
 3487 00ce D4F8D033 		ldr	r3, [r4, #976]
 3488 00d2 1B68     		ldr	r3, [r3]
 3489 00d4 0022     		movs	r2, #0
 3490 00d6 5A62     		str	r2, [r3, #36]
 3491              	.L260:
 987:Src/Eagle_TRT.c **** 		{
 3492              		.loc 1 987 0 discriminator 1
 3493 00d8 D4F8D033 		ldr	r3, [r4, #976]
 3494 00dc 1B68     		ldr	r3, [r3]
 3495 00de 5A6A     		ldr	r2, [r3, #36]
 3496 00e0 E368     		ldr	r3, [r4, #12]
 3497 00e2 03EBD373 		add	r3, r3, r3, lsr #31
 3498 00e6 B2EB630F 		cmp	r2, r3, asr #1
 3499 00ea F5D9     		bls	.L260
 992:Src/Eagle_TRT.c **** 		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3500              		.loc 1 992 0
 3501 00ec 0022     		movs	r2, #0
 3502 00ee B4F8E013 		ldrh	r1, [r4, #992]
 3503 00f2 D4F8D803 		ldr	r0, [r4, #984]
 3504 00f6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3505              	.LVL341:
 993:Src/Eagle_TRT.c **** 		while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period)
 3506              		.loc 1 993 0
 3507 00fa D4F8D033 		ldr	r3, [r4, #976]
 3508 00fe 1B68     		ldr	r3, [r3]
 3509 0100 0022     		movs	r2, #0
 3510 0102 5A62     		str	r2, [r3, #36]
 3511              	.L261:
 994:Src/Eagle_TRT.c **** 		{
 3512              		.loc 1 994 0 discriminator 1
 3513 0104 D4F8D033 		ldr	r3, [r4, #976]
 3514 0108 1B68     		ldr	r3, [r3]
 3515 010a 5A6A     		ldr	r2, [r3, #36]
 3516 010c E368     		ldr	r3, [r4, #12]
 3517 010e 9A42     		cmp	r2, r3
 3518 0110 F8D9     		bls	.L261
 971:Src/Eagle_TRT.c **** 	{
 3519              		.loc 1 971 0 discriminator 2
 3520 0112 0135     		adds	r5, r5, #1
 3521              	.LVL342:
 3522              	.L258:
 971:Src/Eagle_TRT.c **** 	{
 3523              		.loc 1 971 0 is_stmt 0 discriminator 1
 3524 0114 2368     		ldr	r3, [r4]
 3525 0116 9D42     		cmp	r5, r3
 3526 0118 B8DB     		blt	.L262
 3527              	.LBE18:
1000:Src/Eagle_TRT.c **** 	__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 3528              		.loc 1 1000 0 is_stmt 1
 3529 011a 0122     		movs	r2, #1
ARM GAS  /tmp/ccuwAQC3.s 			page 92


 3530 011c B4F8E013 		ldrh	r1, [r4, #992]
 3531 0120 D4F8D803 		ldr	r0, [r4, #984]
 3532 0124 FFF7FEFF 		bl	HAL_GPIO_WritePin
 3533              	.LVL343:
1001:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
 3534              		.loc 1 1001 0
 3535 0128 D4F8D033 		ldr	r3, [r4, #976]
 3536 012c 1B68     		ldr	r3, [r3]
 3537 012e 0022     		movs	r2, #0
 3538 0130 5A62     		str	r2, [r3, #36]
 3539              	.L263:
1002:Src/Eagle_TRT.c **** 	{
 3540              		.loc 1 1002 0 discriminator 1
 3541 0132 D4F8D033 		ldr	r3, [r4, #976]
 3542 0136 1B68     		ldr	r3, [r3]
 3543 0138 5B6A     		ldr	r3, [r3, #36]
 3544 013a E268     		ldr	r2, [r4, #12]
 3545 013c B3EB420F 		cmp	r3, r2, lsl #1
 3546 0140 F7D9     		bls	.L263
1006:Src/Eagle_TRT.c **** 
 3547              		.loc 1 1006 0
 3548 0142 B4F8E213 		ldrh	r1, [r4, #994]
 3549 0146 D4F8DC03 		ldr	r0, [r4, #988]
 3550 014a FFF7FEFF 		bl	HAL_GPIO_ReadPin
 3551              	.LVL344:
 3552 014e 0546     		mov	r5, r0
 3553              	.LVL345:
1008:Src/Eagle_TRT.c **** 	while (__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period * 2)
 3554              		.loc 1 1008 0
 3555 0150 D4F8D033 		ldr	r3, [r4, #976]
 3556 0154 1B68     		ldr	r3, [r3]
 3557 0156 0022     		movs	r2, #0
 3558 0158 5A62     		str	r2, [r3, #36]
 3559              	.L264:
1009:Src/Eagle_TRT.c **** 	{
 3560              		.loc 1 1009 0 discriminator 1
 3561 015a D4F8D033 		ldr	r3, [r4, #976]
 3562 015e 1B68     		ldr	r3, [r3]
 3563 0160 5B6A     		ldr	r3, [r3, #36]
 3564 0162 E268     		ldr	r2, [r4, #12]
 3565 0164 B3EB420F 		cmp	r3, r2, lsl #1
 3566 0168 F7D9     		bls	.L264
1014:Src/Eagle_TRT.c **** 
 3567              		.loc 1 1014 0
 3568 016a 2168     		ldr	r1, [r4]
 3569 016c 04F11000 		add	r0, r4, #16
 3570              	.LVL346:
 3571 0170 FFF7FEFF 		bl	bin_dec
 3572              	.LVL347:
 3573 0174 C4F8C803 		str	r0, [r4, #968]
1017:Src/Eagle_TRT.c **** 
 3574              		.loc 1 1017 0
 3575 0178 2846     		mov	r0, r5
 3576 017a BD46     		mov	sp, r7
 3577              	.LCFI47:
 3578              		.cfi_def_cfa_register 13
 3579              		@ sp needed
ARM GAS  /tmp/ccuwAQC3.s 			page 93


 3580 017c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3581              		.cfi_endproc
 3582              	.LFE152:
 3584              		.section	.text.shift_array,"ax",%progbits
 3585              		.align	1
 3586              		.global	shift_array
 3587              		.syntax unified
 3588              		.thumb
 3589              		.thumb_func
 3590              		.fpu fpv4-sp-d16
 3592              	shift_array:
 3593              	.LFB163:
1312:Src/Eagle_TRT.c **** 
1313:Src/Eagle_TRT.c **** //shift all the data of a numeric array and add another one value
1314:Src/Eagle_TRT.c **** //array = array to be shifted
1315:Src/Eagle_TRT.c **** //size = size of the array
1316:Src/Eagle_TRT.c **** //data = value to be added in the last position of the array
1317:Src/Eagle_TRT.c **** void shift_array(long double *array, int size, long double data)
1318:Src/Eagle_TRT.c **** {
 3594              		.loc 1 1318 0
 3595              		.cfi_startproc
 3596              		@ args = 0, pretend = 0, frame = 0
 3597              		@ frame_needed = 0, uses_anonymous_args = 0
 3598              		@ link register save eliminated.
 3599              	.LVL348:
 3600              	.LBB19:
1319:Src/Eagle_TRT.c **** 
1320:Src/Eagle_TRT.c **** 	for (int i = 1; i < size; i++)
 3601              		.loc 1 1320 0
 3602 0000 0122     		movs	r2, #1
 3603              	.LVL349:
 3604 0002 8A42     		cmp	r2, r1
 3605 0004 17DA     		bge	.L273
 3606              	.LBE19:
1318:Src/Eagle_TRT.c **** 
 3607              		.loc 1 1318 0
 3608 0006 30B4     		push	{r4, r5}
 3609              	.LCFI48:
 3610              		.cfi_def_cfa_offset 8
 3611              		.cfi_offset 4, -8
 3612              		.cfi_offset 5, -4
 3613              	.L268:
 3614              	.LBB20:
1321:Src/Eagle_TRT.c **** 	{
1322:Src/Eagle_TRT.c **** 		array[i - 1] = array[i];
 3615              		.loc 1 1322 0 discriminator 3
 3616 0008 02F10053 		add	r3, r2, #536870912
 3617 000c 013B     		subs	r3, r3, #1
 3618 000e 00EBC303 		add	r3, r0, r3, lsl #3
 3619 0012 00EBC204 		add	r4, r0, r2, lsl #3
 3620 0016 D4E90045 		ldrd	r4, [r4]
 3621 001a C3E90045 		strd	r4, [r3]
1320:Src/Eagle_TRT.c **** 	{
 3622              		.loc 1 1320 0 discriminator 3
 3623 001e 0132     		adds	r2, r2, #1
 3624              	.LVL350:
 3625 0020 8A42     		cmp	r2, r1
ARM GAS  /tmp/ccuwAQC3.s 			page 94


 3626 0022 F1DB     		blt	.L268
 3627              	.LBE20:
1323:Src/Eagle_TRT.c **** 	}
1324:Src/Eagle_TRT.c **** 	array[size - 1] = data;
 3628              		.loc 1 1324 0
 3629 0024 01F10051 		add	r1, r1, #536870912
 3630              	.LVL351:
 3631 0028 0139     		subs	r1, r1, #1
 3632              	.LVL352:
 3633 002a 00EBC100 		add	r0, r0, r1, lsl #3
 3634              	.LVL353:
 3635 002e 80ED000B 		vstr.64	d0, [r0]
1325:Src/Eagle_TRT.c **** }
 3636              		.loc 1 1325 0
 3637 0032 30BC     		pop	{r4, r5}
 3638              	.LCFI49:
 3639              		.cfi_restore 5
 3640              		.cfi_restore 4
 3641              		.cfi_def_cfa_offset 0
 3642 0034 7047     		bx	lr
 3643              	.LVL354:
 3644              	.L273:
1324:Src/Eagle_TRT.c **** }
 3645              		.loc 1 1324 0
 3646 0036 01F10051 		add	r1, r1, #536870912
 3647              	.LVL355:
 3648 003a 0139     		subs	r1, r1, #1
 3649              	.LVL356:
 3650 003c 00EBC100 		add	r0, r0, r1, lsl #3
 3651              	.LVL357:
 3652 0040 80ED000B 		vstr.64	d0, [r0]
 3653 0044 7047     		bx	lr
 3654              		.cfi_endproc
 3655              	.LFE163:
 3657              		.section	.text.speed_filter,"ax",%progbits
 3658              		.align	1
 3659              		.global	speed_filter
 3660              		.syntax unified
 3661              		.thumb
 3662              		.thumb_func
 3663              		.fpu fpv4-sp-d16
 3665              	speed_filter:
 3666              	.LFB164:
1326:Src/Eagle_TRT.c **** 
1327:Src/Eagle_TRT.c **** double speed_filter(double *data, int size)
1328:Src/Eagle_TRT.c **** {
 3667              		.loc 1 1328 0
 3668              		.cfi_startproc
 3669              		@ args = 0, pretend = 0, frame = 16
 3670              		@ frame_needed = 0, uses_anonymous_args = 0
 3671              	.LVL358:
 3672 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3673              	.LCFI50:
 3674              		.cfi_def_cfa_offset 36
 3675              		.cfi_offset 4, -36
 3676              		.cfi_offset 5, -32
 3677              		.cfi_offset 6, -28
ARM GAS  /tmp/ccuwAQC3.s 			page 95


 3678              		.cfi_offset 7, -24
 3679              		.cfi_offset 8, -20
 3680              		.cfi_offset 9, -16
 3681              		.cfi_offset 10, -12
 3682              		.cfi_offset 11, -8
 3683              		.cfi_offset 14, -4
 3684 0004 85B0     		sub	sp, sp, #20
 3685              	.LCFI51:
 3686              		.cfi_def_cfa_offset 56
 3687 0006 8246     		mov	r10, r0
 3688 0008 0D46     		mov	r5, r1
 3689              	.LVL359:
 3690              	.LBB21:
1329:Src/Eagle_TRT.c **** 	double min = 100000000000000;
1330:Src/Eagle_TRT.c **** 	double max = -min;
1331:Src/Eagle_TRT.c **** 	double sum = 0;
1332:Src/Eagle_TRT.c **** 	double average = 0;
1333:Src/Eagle_TRT.c **** 	int index_1;
1334:Src/Eagle_TRT.c **** 	int index_2;
1335:Src/Eagle_TRT.c **** 	int average_members = 0;
1336:Src/Eagle_TRT.c **** 
1337:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
 3691              		.loc 1 1337 0
 3692 000a 0024     		movs	r4, #0
 3693              	.LBE21:
1330:Src/Eagle_TRT.c **** 	double sum = 0;
 3694              		.loc 1 1330 0
 3695 000c 0FF2A009 		adr	r9, .L288+8
 3696 0010 D9E90089 		ldrd	r8, [r9]
1329:Src/Eagle_TRT.c **** 	double min = 100000000000000;
 3697              		.loc 1 1329 0
 3698 0014 9FED247B 		vldr.64	d7, .L288
 3699 0018 8DED007B 		vstr.64	d7, [sp]
 3700              	.LBB22:
 3701              		.loc 1 1337 0
 3702 001c 00E0     		b	.L275
 3703              	.LVL360:
 3704              	.L277:
 3705              		.loc 1 1337 0 is_stmt 0 discriminator 2
 3706 001e 0134     		adds	r4, r4, #1
 3707              	.LVL361:
 3708              	.L275:
 3709              		.loc 1 1337 0 discriminator 1
 3710 0020 AC42     		cmp	r4, r5
 3711 0022 19DA     		bge	.L286
1338:Src/Eagle_TRT.c **** 	{
1339:Src/Eagle_TRT.c **** 		if (data[i] < min)
 3712              		.loc 1 1339 0 is_stmt 1
 3713 0024 0AEBC403 		add	r3, r10, r4, lsl #3
 3714 0028 D3E90067 		ldrd	r6, [r3]
 3715 002c 3246     		mov	r2, r6
 3716 002e 3B46     		mov	r3, r7
 3717 0030 DDE90001 		ldrd	r0, [sp]
 3718 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 3719              	.LVL362:
 3720 0038 10B1     		cbz	r0, .L276
1340:Src/Eagle_TRT.c **** 		{
ARM GAS  /tmp/ccuwAQC3.s 			page 96


1341:Src/Eagle_TRT.c **** 			min = data[i];
1342:Src/Eagle_TRT.c **** 			index_1 = i;
 3721              		.loc 1 1342 0
 3722 003a A346     		mov	fp, r4
 3723              	.LVL363:
1341:Src/Eagle_TRT.c **** 			index_1 = i;
 3724              		.loc 1 1341 0
 3725 003c CDE90067 		strd	r6, [sp]
 3726              	.LVL364:
 3727              	.L276:
1343:Src/Eagle_TRT.c **** 		}
1344:Src/Eagle_TRT.c **** 
1345:Src/Eagle_TRT.c **** 		if (data[i] > max)
 3728              		.loc 1 1345 0
 3729 0040 3246     		mov	r2, r6
 3730 0042 3B46     		mov	r3, r7
 3731 0044 4046     		mov	r0, r8
 3732 0046 4946     		mov	r1, r9
 3733 0048 FFF7FEFF 		bl	__aeabi_dcmplt
 3734              	.LVL365:
 3735 004c 0028     		cmp	r0, #0
 3736 004e E6D0     		beq	.L277
1346:Src/Eagle_TRT.c **** 		{
1347:Src/Eagle_TRT.c **** 			max = data[i];
1348:Src/Eagle_TRT.c **** 			index_2 = i;
 3737              		.loc 1 1348 0
 3738 0050 0394     		str	r4, [sp, #12]
 3739              	.LVL366:
1347:Src/Eagle_TRT.c **** 			index_2 = i;
 3740              		.loc 1 1347 0
 3741 0052 B046     		mov	r8, r6
 3742              	.LVL367:
 3743 0054 B946     		mov	r9, r7
 3744 0056 E2E7     		b	.L277
 3745              	.LVL368:
 3746              	.L286:
 3747 0058 0024     		movs	r4, #0
 3748              	.LVL369:
 3749 005a A046     		mov	r8, r4
 3750              	.LVL370:
 3751 005c 0026     		movs	r6, #0
 3752 005e 0027     		movs	r7, #0
 3753 0060 0CE0     		b	.L279
 3754              	.LVL371:
 3755              	.L280:
 3756              	.LBE22:
 3757              	.LBB23:
1349:Src/Eagle_TRT.c **** 		}
1350:Src/Eagle_TRT.c **** 	}
1351:Src/Eagle_TRT.c **** 
1352:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
1353:Src/Eagle_TRT.c **** 	{
1354:Src/Eagle_TRT.c **** 		if (i != index_1 || i != index_2)
1355:Src/Eagle_TRT.c **** 		{
1356:Src/Eagle_TRT.c **** 			sum += data[i];
 3758              		.loc 1 1356 0
 3759 0062 0AEBC403 		add	r3, r10, r4, lsl #3
ARM GAS  /tmp/ccuwAQC3.s 			page 97


 3760 0066 D3E90023 		ldrd	r2, [r3]
 3761 006a 3046     		mov	r0, r6
 3762 006c 3946     		mov	r1, r7
 3763 006e FFF7FEFF 		bl	__aeabi_dadd
 3764              	.LVL372:
 3765 0072 0646     		mov	r6, r0
 3766              	.LVL373:
 3767 0074 0F46     		mov	r7, r1
 3768              	.LVL374:
1357:Src/Eagle_TRT.c **** 			average_members++;
 3769              		.loc 1 1357 0
 3770 0076 08F10108 		add	r8, r8, #1
 3771              	.LVL375:
 3772              	.L281:
1352:Src/Eagle_TRT.c **** 	{
 3773              		.loc 1 1352 0 discriminator 2
 3774 007a 0134     		adds	r4, r4, #1
 3775              	.LVL376:
 3776              	.L279:
1352:Src/Eagle_TRT.c **** 	{
 3777              		.loc 1 1352 0 is_stmt 0 discriminator 1
 3778 007c AC42     		cmp	r4, r5
 3779 007e 05DA     		bge	.L287
1354:Src/Eagle_TRT.c **** 		{
 3780              		.loc 1 1354 0 is_stmt 1
 3781 0080 A345     		cmp	fp, r4
 3782 0082 EED1     		bne	.L280
1354:Src/Eagle_TRT.c **** 		{
 3783              		.loc 1 1354 0 is_stmt 0 discriminator 1
 3784 0084 039B     		ldr	r3, [sp, #12]
 3785 0086 A342     		cmp	r3, r4
 3786 0088 EBD1     		bne	.L280
 3787 008a F6E7     		b	.L281
 3788              	.L287:
 3789              	.LBE23:
1358:Src/Eagle_TRT.c **** 		}
1359:Src/Eagle_TRT.c **** 	}
1360:Src/Eagle_TRT.c **** 	average = sum / average_members;
 3790              		.loc 1 1360 0 is_stmt 1
 3791 008c 4046     		mov	r0, r8
 3792 008e FFF7FEFF 		bl	__aeabi_i2d
 3793              	.LVL377:
 3794 0092 0246     		mov	r2, r0
 3795 0094 0B46     		mov	r3, r1
 3796 0096 3046     		mov	r0, r6
 3797 0098 3946     		mov	r1, r7
 3798 009a FFF7FEFF 		bl	__aeabi_ddiv
 3799              	.LVL378:
1361:Src/Eagle_TRT.c **** 
1362:Src/Eagle_TRT.c **** 	return average;
1363:Src/Eagle_TRT.c **** }
 3800              		.loc 1 1363 0
 3801 009e 41EC100B 		vmov	d0, r0, r1
 3802 00a2 05B0     		add	sp, sp, #20
 3803              	.LCFI52:
 3804              		.cfi_def_cfa_offset 36
 3805              	.LVL379:
ARM GAS  /tmp/ccuwAQC3.s 			page 98


 3806              		@ sp needed
 3807 00a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 3808              	.LVL380:
 3809              	.L289:
 3810              		.align	3
 3811              	.L288:
 3812 00a8 0000901E 		.word	512753664
 3813 00ac C4BCD642 		.word	1121369284
 3814 00b0 0000901E 		.word	512753664
 3815 00b4 C4BCD6C2 		.word	-1026114364
 3816              		.cfi_endproc
 3817              	.LFE164:
 3819              		.section	.text.dynamic_average,"ax",%progbits
 3820              		.align	1
 3821              		.global	dynamic_average
 3822              		.syntax unified
 3823              		.thumb
 3824              		.thumb_func
 3825              		.fpu fpv4-sp-d16
 3827              	dynamic_average:
 3828              	.LFB165:
1364:Src/Eagle_TRT.c **** 
1365:Src/Eagle_TRT.c **** //function that calculate the average of all the numbers in one array
1366:Src/Eagle_TRT.c **** double dynamic_average(long double *array, int size)
1367:Src/Eagle_TRT.c **** {
 3829              		.loc 1 1367 0
 3830              		.cfi_startproc
 3831              		@ args = 0, pretend = 0, frame = 0
 3832              		@ frame_needed = 0, uses_anonymous_args = 0
 3833              	.LVL381:
 3834 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3835              	.LCFI53:
 3836              		.cfi_def_cfa_offset 24
 3837              		.cfi_offset 4, -24
 3838              		.cfi_offset 5, -20
 3839              		.cfi_offset 6, -16
 3840              		.cfi_offset 7, -12
 3841              		.cfi_offset 8, -8
 3842              		.cfi_offset 14, -4
 3843 0004 8046     		mov	r8, r0
 3844 0006 0D46     		mov	r5, r1
 3845              	.LVL382:
 3846              	.LBB24:
1368:Src/Eagle_TRT.c **** 
1369:Src/Eagle_TRT.c **** 	double sum = 0;
1370:Src/Eagle_TRT.c **** 	double average = 0;
1371:Src/Eagle_TRT.c **** 
1372:Src/Eagle_TRT.c **** 	for (int i = 0; i < size; i++)
 3847              		.loc 1 1372 0
 3848 0008 0024     		movs	r4, #0
 3849              	.LBE24:
1369:Src/Eagle_TRT.c **** 	double average = 0;
 3850              		.loc 1 1369 0
 3851 000a 0026     		movs	r6, #0
 3852 000c 0027     		movs	r7, #0
 3853              	.LBB25:
 3854              		.loc 1 1372 0
ARM GAS  /tmp/ccuwAQC3.s 			page 99


 3855 000e 0AE0     		b	.L291
 3856              	.LVL383:
 3857              	.L292:
1373:Src/Eagle_TRT.c **** 	{
1374:Src/Eagle_TRT.c **** 		sum += array[i];
 3858              		.loc 1 1374 0 discriminator 3
 3859 0010 08EBC403 		add	r3, r8, r4, lsl #3
 3860 0014 D3E90023 		ldrd	r2, [r3]
 3861 0018 3046     		mov	r0, r6
 3862 001a 3946     		mov	r1, r7
 3863 001c FFF7FEFF 		bl	__aeabi_dadd
 3864              	.LVL384:
 3865 0020 0646     		mov	r6, r0
 3866              	.LVL385:
 3867 0022 0F46     		mov	r7, r1
 3868              	.LVL386:
1372:Src/Eagle_TRT.c **** 	{
 3869              		.loc 1 1372 0 discriminator 3
 3870 0024 0134     		adds	r4, r4, #1
 3871              	.LVL387:
 3872              	.L291:
1372:Src/Eagle_TRT.c **** 	{
 3873              		.loc 1 1372 0 is_stmt 0 discriminator 1
 3874 0026 AC42     		cmp	r4, r5
 3875 0028 F2DB     		blt	.L292
 3876              	.LBE25:
1375:Src/Eagle_TRT.c **** 	}
1376:Src/Eagle_TRT.c **** 	average = sum / size;
 3877              		.loc 1 1376 0 is_stmt 1
 3878 002a 2846     		mov	r0, r5
 3879 002c FFF7FEFF 		bl	__aeabi_i2d
 3880              	.LVL388:
 3881 0030 0246     		mov	r2, r0
 3882 0032 0B46     		mov	r3, r1
 3883 0034 3046     		mov	r0, r6
 3884 0036 3946     		mov	r1, r7
 3885 0038 FFF7FEFF 		bl	__aeabi_ddiv
 3886              	.LVL389:
1377:Src/Eagle_TRT.c **** 
1378:Src/Eagle_TRT.c **** 	return average;
1379:Src/Eagle_TRT.c **** }
 3887              		.loc 1 1379 0
 3888 003c 41EC100B 		vmov	d0, r0, r1
 3889 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3890              		.cfi_endproc
 3891              	.LFE165:
 3893              		.section	.text.imu_elaborate_data,"ax",%progbits
 3894              		.align	1
 3895              		.global	imu_elaborate_data
 3896              		.syntax unified
 3897              		.thumb
 3898              		.thumb_func
 3899              		.fpu fpv4-sp-d16
 3901              	imu_elaborate_data:
 3902              	.LFB137:
 395:Src/Eagle_TRT.c **** 	if (imu->x > 32768)
 3903              		.loc 1 395 0
ARM GAS  /tmp/ccuwAQC3.s 			page 100


 3904              		.cfi_startproc
 3905              		@ args = 0, pretend = 0, frame = 0
 3906              		@ frame_needed = 0, uses_anonymous_args = 0
 3907              	.LVL390:
 3908 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 3909              	.LCFI54:
 3910              		.cfi_def_cfa_offset 40
 3911              		.cfi_offset 3, -40
 3912              		.cfi_offset 4, -36
 3913              		.cfi_offset 5, -32
 3914              		.cfi_offset 6, -28
 3915              		.cfi_offset 7, -24
 3916              		.cfi_offset 8, -20
 3917              		.cfi_offset 9, -16
 3918              		.cfi_offset 10, -12
 3919              		.cfi_offset 11, -8
 3920              		.cfi_offset 14, -4
 3921 0004 0446     		mov	r4, r0
 396:Src/Eagle_TRT.c **** 	{
 3922              		.loc 1 396 0
 3923 0006 D0E90067 		ldrd	r6, [r0]
 3924 000a 0022     		movs	r2, #0
 3925 000c 504B     		ldr	r3, .L305
 3926 000e 3046     		mov	r0, r6
 3927              	.LVL391:
 3928 0010 3946     		mov	r1, r7
 3929 0012 FFF7FEFF 		bl	__aeabi_dcmpgt
 3930              	.LVL392:
 3931 0016 38B1     		cbz	r0, .L295
 398:Src/Eagle_TRT.c **** 	}
 3932              		.loc 1 398 0
 3933 0018 0022     		movs	r2, #0
 3934 001a 4E4B     		ldr	r3, .L305+4
 3935 001c 3046     		mov	r0, r6
 3936 001e 3946     		mov	r1, r7
 3937 0020 FFF7FEFF 		bl	__aeabi_dsub
 3938              	.LVL393:
 3939 0024 C4E90001 		strd	r0, [r4]
 3940              	.L295:
 400:Src/Eagle_TRT.c **** 	{
 3941              		.loc 1 400 0
 3942 0028 D4E90267 		ldrd	r6, [r4, #8]
 3943 002c 0022     		movs	r2, #0
 3944 002e 484B     		ldr	r3, .L305
 3945 0030 3046     		mov	r0, r6
 3946 0032 3946     		mov	r1, r7
 3947 0034 FFF7FEFF 		bl	__aeabi_dcmpgt
 3948              	.LVL394:
 3949 0038 38B1     		cbz	r0, .L297
 402:Src/Eagle_TRT.c **** 	}
 3950              		.loc 1 402 0
 3951 003a 0022     		movs	r2, #0
 3952 003c 454B     		ldr	r3, .L305+4
 3953 003e 3046     		mov	r0, r6
 3954 0040 3946     		mov	r1, r7
 3955 0042 FFF7FEFF 		bl	__aeabi_dsub
 3956              	.LVL395:
ARM GAS  /tmp/ccuwAQC3.s 			page 101


 3957 0046 C4E90201 		strd	r0, [r4, #8]
 3958              	.L297:
 404:Src/Eagle_TRT.c **** 	{
 3959              		.loc 1 404 0
 3960 004a D4E90467 		ldrd	r6, [r4, #16]
 3961 004e 0022     		movs	r2, #0
 3962 0050 3F4B     		ldr	r3, .L305
 3963 0052 3046     		mov	r0, r6
 3964 0054 3946     		mov	r1, r7
 3965 0056 FFF7FEFF 		bl	__aeabi_dcmpgt
 3966              	.LVL396:
 3967 005a 38B1     		cbz	r0, .L299
 406:Src/Eagle_TRT.c **** 	}
 3968              		.loc 1 406 0
 3969 005c 0022     		movs	r2, #0
 3970 005e 3D4B     		ldr	r3, .L305+4
 3971 0060 3046     		mov	r0, r6
 3972 0062 3946     		mov	r1, r7
 3973 0064 FFF7FEFF 		bl	__aeabi_dsub
 3974              	.LVL397:
 3975 0068 C4E90401 		strd	r0, [r4, #16]
 3976              	.L299:
 409:Src/Eagle_TRT.c **** 	imu->y = imu->y * ((float)imu->scale / 32768);
 3977              		.loc 1 409 0
 3978 006c D4E90089 		ldrd	r8, [r4]
 3979 0070 D4ED867A 		vldr.32	s15, [r4, #536]	@ int
 3980 0074 F8EEE77A 		vcvt.f32.s32	s15, s15
 3981 0078 9FED377A 		vldr.32	s14, .L305+8
 3982 007c 67EE877A 		vmul.f32	s15, s15, s14
 3983 0080 17EE900A 		vmov	r0, s15
 3984 0084 FFF7FEFF 		bl	__aeabi_f2d
 3985              	.LVL398:
 3986 0088 0646     		mov	r6, r0
 3987 008a 0F46     		mov	r7, r1
 3988 008c 0246     		mov	r2, r0
 3989 008e 0B46     		mov	r3, r1
 3990 0090 4046     		mov	r0, r8
 3991 0092 4946     		mov	r1, r9
 3992 0094 FFF7FEFF 		bl	__aeabi_dmul
 3993              	.LVL399:
 3994 0098 8046     		mov	r8, r0
 3995 009a 8946     		mov	r9, r1
 3996 009c C4E90089 		strd	r8, [r4]
 410:Src/Eagle_TRT.c **** 	imu->z = imu->z * ((float)imu->scale / 32768);
 3997              		.loc 1 410 0
 3998 00a0 D4E90223 		ldrd	r2, [r4, #8]
 3999 00a4 3046     		mov	r0, r6
 4000 00a6 3946     		mov	r1, r7
 4001 00a8 FFF7FEFF 		bl	__aeabi_dmul
 4002              	.LVL400:
 4003 00ac C4E90201 		strd	r0, [r4, #8]
 411:Src/Eagle_TRT.c **** 
 4004              		.loc 1 411 0
 4005 00b0 D4E90423 		ldrd	r2, [r4, #16]
 4006 00b4 3046     		mov	r0, r6
 4007 00b6 3946     		mov	r1, r7
 4008 00b8 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccuwAQC3.s 			page 102


 4009              	.LVL401:
 4010 00bc C4E90401 		strd	r0, [r4, #16]
 413:Src/Eagle_TRT.c **** 	shift_array(imu->y_array, 10, imu->y);
 4011              		.loc 1 413 0
 4012 00c0 04F13007 		add	r7, r4, #48
 4013 00c4 49EC108B 		vmov	d0, r8, r9
 4014 00c8 0A21     		movs	r1, #10
 4015 00ca 3846     		mov	r0, r7
 4016 00cc FFF7FEFF 		bl	shift_array
 4017              	.LVL402:
 414:Src/Eagle_TRT.c **** 	shift_array(imu->z_array, 10, imu->z);
 4018              		.loc 1 414 0
 4019 00d0 04F1D006 		add	r6, r4, #208
 4020 00d4 94ED020B 		vldr.64	d0, [r4, #8]
 4021 00d8 0A21     		movs	r1, #10
 4022 00da 3046     		mov	r0, r6
 4023 00dc FFF7FEFF 		bl	shift_array
 4024              	.LVL403:
 415:Src/Eagle_TRT.c **** 
 4025              		.loc 1 415 0
 4026 00e0 04F5B875 		add	r5, r4, #368
 4027 00e4 94ED040B 		vldr.64	d0, [r4, #16]
 4028 00e8 0A21     		movs	r1, #10
 4029 00ea 2846     		mov	r0, r5
 4030 00ec FFF7FEFF 		bl	shift_array
 4031              	.LVL404:
 417:Src/Eagle_TRT.c **** 	imu->y = dynamic_average(imu->y_array, 10);
 4032              		.loc 1 417 0
 4033 00f0 0A21     		movs	r1, #10
 4034 00f2 3846     		mov	r0, r7
 4035 00f4 FFF7FEFF 		bl	dynamic_average
 4036              	.LVL405:
 4037 00f8 59EC108B 		vmov	r8, r9, d0
 4038 00fc 84ED000B 		vstr.64	d0, [r4]
 418:Src/Eagle_TRT.c **** 	imu->z = dynamic_average(imu->z_array, 10);
 4039              		.loc 1 418 0
 4040 0100 0A21     		movs	r1, #10
 4041 0102 3046     		mov	r0, r6
 4042 0104 FFF7FEFF 		bl	dynamic_average
 4043              	.LVL406:
 4044 0108 57EC106B 		vmov	r6, r7, d0
 4045 010c 84ED020B 		vstr.64	d0, [r4, #8]
 419:Src/Eagle_TRT.c **** 
 4046              		.loc 1 419 0
 4047 0110 0A21     		movs	r1, #10
 4048 0112 2846     		mov	r0, r5
 4049 0114 FFF7FEFF 		bl	dynamic_average
 4050              	.LVL407:
 4051 0118 5BEC10AB 		vmov	r10, fp, d0
 421:Src/Eagle_TRT.c **** 	imu->y -= imu->y_offset;
 4052              		.loc 1 421 0
 4053 011c D4E90623 		ldrd	r2, [r4, #24]
 4054 0120 4046     		mov	r0, r8
 4055 0122 4946     		mov	r1, r9
 4056 0124 FFF7FEFF 		bl	__aeabi_dsub
 4057              	.LVL408:
 4058 0128 C4E90001 		strd	r0, [r4]
ARM GAS  /tmp/ccuwAQC3.s 			page 103


 422:Src/Eagle_TRT.c **** 	imu->z -= imu->z_offset;
 4059              		.loc 1 422 0
 4060 012c D4E90823 		ldrd	r2, [r4, #32]
 4061 0130 3046     		mov	r0, r6
 4062 0132 3946     		mov	r1, r7
 4063 0134 FFF7FEFF 		bl	__aeabi_dsub
 4064              	.LVL409:
 4065 0138 C4E90201 		strd	r0, [r4, #8]
 423:Src/Eagle_TRT.c **** }
 4066              		.loc 1 423 0
 4067 013c D4E90A23 		ldrd	r2, [r4, #40]
 4068 0140 5046     		mov	r0, r10
 4069 0142 5946     		mov	r1, fp
 4070 0144 FFF7FEFF 		bl	__aeabi_dsub
 4071              	.LVL410:
 4072 0148 C4E90401 		strd	r0, [r4, #16]
 4073 014c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4074              	.LVL411:
 4075              	.L306:
 4076              		.align	2
 4077              	.L305:
 4078 0150 0000E040 		.word	1088421888
 4079 0154 0000F040 		.word	1089470464
 4080 0158 00000038 		.word	939524096
 4081              		.cfi_endproc
 4082              	.LFE137:
 4084              		.global	__aeabi_dcmple
 4085              		.section	.text.get_speed_encoder,"ax",%progbits
 4086              		.align	1
 4087              		.global	get_speed_encoder
 4088              		.syntax unified
 4089              		.thumb
 4090              		.thumb_func
 4091              		.fpu fpv4-sp-d16
 4093              	get_speed_encoder:
 4094              	.LFB154:
1075:Src/Eagle_TRT.c **** 
 4095              		.loc 1 1075 0
 4096              		.cfi_startproc
 4097              		@ args = 0, pretend = 0, frame = 0
 4098              		@ frame_needed = 0, uses_anonymous_args = 0
 4099              	.LVL412:
 4100 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 4101              	.LCFI55:
 4102              		.cfi_def_cfa_offset 40
 4103              		.cfi_offset 3, -40
 4104              		.cfi_offset 4, -36
 4105              		.cfi_offset 5, -32
 4106              		.cfi_offset 6, -28
 4107              		.cfi_offset 7, -24
 4108              		.cfi_offset 8, -20
 4109              		.cfi_offset 9, -16
 4110              		.cfi_offset 10, -12
 4111              		.cfi_offset 11, -8
 4112              		.cfi_offset 14, -4
 4113 0004 2DED048B 		vpush.64	{d8, d9}
 4114              	.LCFI56:
ARM GAS  /tmp/ccuwAQC3.s 			page 104


 4115              		.cfi_def_cfa_offset 56
 4116              		.cfi_offset 80, -56
 4117              		.cfi_offset 81, -52
 4118              		.cfi_offset 82, -48
 4119              		.cfi_offset 83, -44
 4120 0008 0446     		mov	r4, r0
 4121              	.LVL413:
1080:Src/Eagle_TRT.c **** 	{
 4122              		.loc 1 1080 0
 4123 000a C36C     		ldr	r3, [r0, #76]
 4124 000c 012B     		cmp	r3, #1
 4125 000e 00F01D81 		beq	.L343
1086:Src/Eagle_TRT.c **** 	}
 4126              		.loc 1 1086 0
 4127 0012 D0E92023 		ldrd	r2, [r0, #128]
 4128 0016 D0E91E01 		ldrd	r0, [r0, #120]
 4129              	.LVL414:
 4130 001a FFF7FEFF 		bl	__aeabi_dsub
 4131              	.LVL415:
 4132 001e C4E92601 		strd	r0, [r4, #152]
 4133              	.L309:
1090:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
 4134              		.loc 1 1090 0
 4135 0022 94ED1E9B 		vldr.64	d9, [r4, #120]
 4136 0026 D4ED187A 		vldr.32	s15, [r4, #96]
 4137 002a 37EEA78A 		vadd.f32	s16, s15, s15
 4138 002e 18EE100A 		vmov	r0, s16
 4139 0032 FFF7FEFF 		bl	__aeabi_f2d
 4140              	.LVL416:
 4141 0036 0646     		mov	r6, r0
 4142 0038 0F46     		mov	r7, r1
 4143 003a 0246     		mov	r2, r0
 4144 003c 0B46     		mov	r3, r1
 4145 003e 51EC190B 		vmov	r0, r1, d9
 4146 0042 FFF7FEFF 		bl	__aeabi_dcmplt
 4147              	.LVL417:
 4148 0046 80B1     		cbz	r0, .L310
1090:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
 4149              		.loc 1 1090 0 is_stmt 0 discriminator 1
 4150 0048 D4E92089 		ldrd	r8, [r4, #128]
 4151 004c DFED907A 		vldr.32	s15, .L345+32
 4152 0050 77EEC87A 		vsub.f32	s15, s15, s16
 4153 0054 17EE900A 		vmov	r0, s15
 4154 0058 FFF7FEFF 		bl	__aeabi_f2d
 4155              	.LVL418:
 4156 005c 0246     		mov	r2, r0
 4157 005e 0B46     		mov	r3, r1
 4158 0060 4046     		mov	r0, r8
 4159 0062 4946     		mov	r1, r9
 4160 0064 FFF7FEFF 		bl	__aeabi_dcmpgt
 4161              	.LVL419:
 4162 0068 A8B9     		cbnz	r0, .L312
 4163              	.L310:
1090:Src/Eagle_TRT.c **** 		(enc->angle1 < enc->max_delta_angle * 2 && enc->angle0 > 360 - enc->max_delta_angle * 2))
 4164              		.loc 1 1090 0 discriminator 3
 4165 006a D4E92023 		ldrd	r2, [r4, #128]
 4166 006e 3046     		mov	r0, r6
ARM GAS  /tmp/ccuwAQC3.s 			page 105


 4167 0070 3946     		mov	r1, r7
 4168 0072 FFF7FEFF 		bl	__aeabi_dcmpgt
 4169              	.LVL420:
 4170 0076 08B3     		cbz	r0, .L313
1091:Src/Eagle_TRT.c **** 	{
 4171              		.loc 1 1091 0 is_stmt 1
 4172 0078 DFED857A 		vldr.32	s15, .L345+32
 4173 007c 77EEC87A 		vsub.f32	s15, s15, s16
 4174 0080 17EE900A 		vmov	r0, s15
 4175 0084 FFF7FEFF 		bl	__aeabi_f2d
 4176              	.LVL421:
 4177 0088 0246     		mov	r2, r0
 4178 008a 0B46     		mov	r3, r1
 4179 008c 51EC190B 		vmov	r0, r1, d9
 4180 0090 FFF7FEFF 		bl	__aeabi_dcmpgt
 4181              	.LVL422:
 4182 0094 90B1     		cbz	r0, .L313
 4183              	.L312:
1093:Src/Eagle_TRT.c **** 		{
 4184              		.loc 1 1093 0
 4185 0096 D4E92667 		ldrd	r6, [r4, #152]
 4186 009a 0022     		movs	r2, #0
 4187 009c 0023     		movs	r3, #0
 4188 009e 3046     		mov	r0, r6
 4189 00a0 3946     		mov	r1, r7
 4190 00a2 FFF7FEFF 		bl	__aeabi_dcmplt
 4191              	.LVL423:
 4192 00a6 0028     		cmp	r0, #0
 4193 00a8 40F0D980 		bne	.L344
1099:Src/Eagle_TRT.c **** 		}
 4194              		.loc 1 1099 0
 4195 00ac 3246     		mov	r2, r6
 4196 00ae 3B46     		mov	r3, r7
 4197 00b0 0020     		movs	r0, #0
 4198 00b2 7849     		ldr	r1, .L345+36
 4199 00b4 FFF7FEFF 		bl	__aeabi_dsub
 4200              	.LVL424:
 4201 00b8 C4E92601 		strd	r0, [r4, #152]
 4202              	.L313:
1104:Src/Eagle_TRT.c **** 	speed *= enc->frequency;
 4203              		.loc 1 1104 0
 4204 00bc 0022     		movs	r2, #0
 4205 00be 754B     		ldr	r3, .L345+36
 4206 00c0 D4E92601 		ldrd	r0, [r4, #152]
 4207 00c4 FFF7FEFF 		bl	__aeabi_ddiv
 4208              	.LVL425:
 4209 00c8 69A3     		adr	r3, .L345
 4210 00ca D3E90023 		ldrd	r2, [r3]
 4211 00ce FFF7FEFF 		bl	__aeabi_dmul
 4212              	.LVL426:
 4213 00d2 8046     		mov	r8, r0
 4214 00d4 8946     		mov	r9, r1
 4215 00d6 E06D     		ldr	r0, [r4, #92]	@ float
 4216 00d8 FFF7FEFF 		bl	__aeabi_f2d
 4217              	.LVL427:
 4218 00dc 0646     		mov	r6, r0
 4219 00de 0F46     		mov	r7, r1
ARM GAS  /tmp/ccuwAQC3.s 			page 106


 4220 00e0 0246     		mov	r2, r0
 4221 00e2 0B46     		mov	r3, r1
 4222 00e4 4046     		mov	r0, r8
 4223 00e6 4946     		mov	r1, r9
 4224 00e8 FFF7FEFF 		bl	__aeabi_dmul
 4225              	.LVL428:
 4226 00ec 8046     		mov	r8, r0
 4227 00ee 8946     		mov	r9, r1
 4228              	.LVL429:
1105:Src/Eagle_TRT.c **** 	speed *= 3.6;
 4229              		.loc 1 1105 0
 4230 00f0 606E     		ldr	r0, [r4, #100]	@ float
 4231 00f2 FFF7FEFF 		bl	__aeabi_f2d
 4232              	.LVL430:
 4233 00f6 0246     		mov	r2, r0
 4234 00f8 0B46     		mov	r3, r1
 4235 00fa 4046     		mov	r0, r8
 4236 00fc 4946     		mov	r1, r9
 4237 00fe FFF7FEFF 		bl	__aeabi_dmul
 4238              	.LVL431:
1106:Src/Eagle_TRT.c **** 	speed = round((speed * 1000)) / 1000;
 4239              		.loc 1 1106 0
 4240 0102 5DA3     		adr	r3, .L345+8
 4241 0104 D3E90023 		ldrd	r2, [r3]
 4242 0108 FFF7FEFF 		bl	__aeabi_dmul
 4243              	.LVL432:
1107:Src/Eagle_TRT.c **** 
 4244              		.loc 1 1107 0
 4245 010c 0022     		movs	r2, #0
 4246 010e 624B     		ldr	r3, .L345+40
 4247 0110 FFF7FEFF 		bl	__aeabi_dmul
 4248              	.LVL433:
 4249 0114 41EC100B 		vmov	d0, r0, r1
 4250 0118 FFF7FEFF 		bl	round
 4251              	.LVL434:
 4252 011c 0022     		movs	r2, #0
 4253 011e 5E4B     		ldr	r3, .L345+40
 4254 0120 51EC100B 		vmov	r0, r1, d0
 4255 0124 FFF7FEFF 		bl	__aeabi_ddiv
 4256              	.LVL435:
 4257 0128 41EC180B 		vmov	d8, r0, r1
 4258              	.LVL436:
1113:Src/Eagle_TRT.c **** 	{
 4259              		.loc 1 1113 0
 4260 012c D4E9F089 		ldrd	r8, [r4, #960]
 4261 0130 0022     		movs	r2, #0
 4262 0132 5A4B     		ldr	r3, .L345+44
 4263 0134 4046     		mov	r0, r8
 4264              	.LVL437:
 4265 0136 4946     		mov	r1, r9
 4266 0138 FFF7FEFF 		bl	__aeabi_dcmplt
 4267              	.LVL438:
 4268 013c 38B9     		cbnz	r0, .L318
1113:Src/Eagle_TRT.c **** 	{
 4269              		.loc 1 1113 0 is_stmt 0 discriminator 1
 4270 013e 0022     		movs	r2, #0
 4271 0140 574B     		ldr	r3, .L345+48
ARM GAS  /tmp/ccuwAQC3.s 			page 107


 4272 0142 4046     		mov	r0, r8
 4273 0144 4946     		mov	r1, r9
 4274 0146 FFF7FEFF 		bl	__aeabi_dcmpgt
 4275              	.LVL439:
 4276 014a 0028     		cmp	r0, #0
 4277 014c 67D0     		beq	.L319
 4278              	.L318:
1115:Src/Eagle_TRT.c **** 		{
 4279              		.loc 1 1115 0 is_stmt 1
 4280 014e D4E922AB 		ldrd	r10, [r4, #136]
 4281 0152 4BA3     		adr	r3, .L345+16
 4282 0154 D3E90023 		ldrd	r2, [r3]
 4283 0158 5046     		mov	r0, r10
 4284 015a 5946     		mov	r1, fp
 4285 015c FFF7FEFF 		bl	__aeabi_dcmple
 4286              	.LVL440:
 4287 0160 50B3     		cbz	r0, .L321
1115:Src/Eagle_TRT.c **** 		{
 4288              		.loc 1 1115 0 is_stmt 0 discriminator 1
 4289 0162 0022     		movs	r2, #0
 4290 0164 4F4B     		ldr	r3, .L345+52
 4291 0166 5046     		mov	r0, r10
 4292 0168 5946     		mov	r1, fp
 4293 016a FFF7FEFF 		bl	__aeabi_dcmpgt
 4294              	.LVL441:
 4295 016e 18B3     		cbz	r0, .L321
1115:Src/Eagle_TRT.c **** 		{
 4296              		.loc 1 1115 0 discriminator 2
 4297 0170 0022     		movs	r2, #0
 4298 0172 4D4B     		ldr	r3, .L345+56
 4299 0174 51EC190B 		vmov	r0, r1, d9
 4300 0178 FFF7FEFF 		bl	__aeabi_dcmpge
 4301              	.LVL442:
 4302 017c E0B1     		cbz	r0, .L321
1115:Src/Eagle_TRT.c **** 		{
 4303              		.loc 1 1115 0 discriminator 3
 4304 017e 0022     		movs	r2, #0
 4305 0180 4A4B     		ldr	r3, .L345+60
 4306 0182 51EC190B 		vmov	r0, r1, d9
 4307 0186 FFF7FEFF 		bl	__aeabi_dcmplt
 4308              	.LVL443:
 4309 018a A8B1     		cbz	r0, .L321
1117:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
 4310              		.loc 1 1117 0 is_stmt 1
 4311 018c 236D     		ldr	r3, [r4, #80]
 4312 018e 0133     		adds	r3, r3, #1
 4313 0190 2365     		str	r3, [r4, #80]
1118:Src/Eagle_TRT.c **** 		}
 4314              		.loc 1 1118 0
 4315 0192 3DA3     		adr	r3, .L345+24
 4316 0194 D3E90023 		ldrd	r2, [r3]
 4317 0198 3046     		mov	r0, r6
 4318 019a 3946     		mov	r1, r7
 4319 019c FFF7FEFF 		bl	__aeabi_dmul
 4320              	.LVL444:
 4321 01a0 8046     		mov	r8, r0
 4322 01a2 8946     		mov	r9, r1
ARM GAS  /tmp/ccuwAQC3.s 			page 108


 4323 01a4 606D     		ldr	r0, [r4, #84]	@ float
 4324 01a6 FFF7FEFF 		bl	__aeabi_f2d
 4325              	.LVL445:
 4326 01aa 4246     		mov	r2, r8
 4327 01ac 4B46     		mov	r3, r9
 4328 01ae FFF7FEFF 		bl	__aeabi_dadd
 4329              	.LVL446:
 4330 01b2 FFF7FEFF 		bl	__aeabi_d2f
 4331              	.LVL447:
 4332 01b6 6065     		str	r0, [r4, #84]	@ float
 4333              	.L321:
1120:Src/Eagle_TRT.c **** 		{
 4334              		.loc 1 1120 0
 4335 01b8 0022     		movs	r2, #0
 4336 01ba 3B4B     		ldr	r3, .L345+56
 4337 01bc 5046     		mov	r0, r10
 4338 01be 5946     		mov	r1, fp
 4339 01c0 FFF7FEFF 		bl	__aeabi_dcmpge
 4340              	.LVL448:
 4341 01c4 58B3     		cbz	r0, .L319
1120:Src/Eagle_TRT.c **** 		{
 4342              		.loc 1 1120 0 is_stmt 0 discriminator 1
 4343 01c6 0022     		movs	r2, #0
 4344 01c8 384B     		ldr	r3, .L345+60
 4345 01ca 5046     		mov	r0, r10
 4346 01cc 5946     		mov	r1, fp
 4347 01ce FFF7FEFF 		bl	__aeabi_dcmplt
 4348              	.LVL449:
 4349 01d2 20B3     		cbz	r0, .L319
1120:Src/Eagle_TRT.c **** 		{
 4350              		.loc 1 1120 0 discriminator 2
 4351 01d4 2AA3     		adr	r3, .L345+16
 4352 01d6 D3E90023 		ldrd	r2, [r3]
 4353 01da 51EC190B 		vmov	r0, r1, d9
 4354 01de FFF7FEFF 		bl	__aeabi_dcmple
 4355              	.LVL450:
 4356 01e2 E0B1     		cbz	r0, .L319
1120:Src/Eagle_TRT.c **** 		{
 4357              		.loc 1 1120 0 discriminator 3
 4358 01e4 0022     		movs	r2, #0
 4359 01e6 2F4B     		ldr	r3, .L345+52
 4360 01e8 51EC190B 		vmov	r0, r1, d9
 4361 01ec FFF7FEFF 		bl	__aeabi_dcmpgt
 4362              	.LVL451:
 4363 01f0 A8B1     		cbz	r0, .L319
1122:Src/Eagle_TRT.c **** 			enc->Km += (3.14 * enc->wheel_diameter);
 4364              		.loc 1 1122 0 is_stmt 1
 4365 01f2 236D     		ldr	r3, [r4, #80]
 4366 01f4 0133     		adds	r3, r3, #1
 4367 01f6 2365     		str	r3, [r4, #80]
1123:Src/Eagle_TRT.c **** 		}
 4368              		.loc 1 1123 0
 4369 01f8 23A3     		adr	r3, .L345+24
 4370 01fa D3E90023 		ldrd	r2, [r3]
 4371 01fe 3046     		mov	r0, r6
 4372 0200 3946     		mov	r1, r7
 4373 0202 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  /tmp/ccuwAQC3.s 			page 109


 4374              	.LVL452:
 4375 0206 0646     		mov	r6, r0
 4376 0208 0F46     		mov	r7, r1
 4377 020a 606D     		ldr	r0, [r4, #84]	@ float
 4378 020c FFF7FEFF 		bl	__aeabi_f2d
 4379              	.LVL453:
 4380 0210 3246     		mov	r2, r6
 4381 0212 3B46     		mov	r3, r7
 4382 0214 FFF7FEFF 		bl	__aeabi_dadd
 4383              	.LVL454:
 4384 0218 FFF7FEFF 		bl	__aeabi_d2f
 4385              	.LVL455:
 4386 021c 6065     		str	r0, [r4, #84]	@ float
 4387              	.L319:
1128:Src/Eagle_TRT.c **** 	enc->average_speed = dynamic_average(enc->speed_array, 10);
 4388              		.loc 1 1128 0
 4389 021e 04F1A005 		add	r5, r4, #160
 4390 0222 B0EE480A 		vmov.f32	s0, s16
 4391 0226 F0EE680A 		vmov.f32	s1, s17
 4392 022a 0A21     		movs	r1, #10
 4393 022c 2846     		mov	r0, r5
 4394 022e FFF7FEFF 		bl	shift_array
 4395              	.LVL456:
1129:Src/Eagle_TRT.c **** 
 4396              		.loc 1 1129 0
 4397 0232 0A21     		movs	r1, #10
 4398 0234 2846     		mov	r0, r5
 4399 0236 FFF7FEFF 		bl	dynamic_average
 4400              	.LVL457:
 4401 023a 84EDF00B 		vstr.64	d0, [r4, #960]
1132:Src/Eagle_TRT.c **** }
 4402              		.loc 1 1132 0
 4403 023e 2046     		mov	r0, r4
 4404 0240 FFF7FEFF 		bl	enc_calculate_optimal_frequency
 4405              	.LVL458:
1133:Src/Eagle_TRT.c **** 
 4406              		.loc 1 1133 0
 4407 0244 BDEC048B 		vldm	sp!, {d8-d9}
 4408              	.LCFI57:
 4409              		.cfi_remember_state
 4410              		.cfi_restore 82
 4411              		.cfi_restore 83
 4412              		.cfi_restore 80
 4413              		.cfi_restore 81
 4414              		.cfi_def_cfa_offset 40
 4415              	.LVL459:
 4416 0248 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 4417              	.LVL460:
 4418              	.L343:
 4419              	.LCFI58:
 4420              		.cfi_restore_state
1082:Src/Eagle_TRT.c **** 	}
 4421              		.loc 1 1082 0
 4422 024c D0E91E23 		ldrd	r2, [r0, #120]
 4423 0250 D0E92001 		ldrd	r0, [r0, #128]
 4424              	.LVL461:
 4425 0254 FFF7FEFF 		bl	__aeabi_dsub
ARM GAS  /tmp/ccuwAQC3.s 			page 110


 4426              	.LVL462:
 4427 0258 C4E92601 		strd	r0, [r4, #152]
 4428 025c E1E6     		b	.L309
 4429              	.L344:
1095:Src/Eagle_TRT.c **** 		}
 4430              		.loc 1 1095 0
 4431 025e 0022     		movs	r2, #0
 4432 0260 0C4B     		ldr	r3, .L345+36
 4433 0262 3046     		mov	r0, r6
 4434 0264 3946     		mov	r1, r7
 4435 0266 FFF7FEFF 		bl	__aeabi_dadd
 4436              	.LVL463:
 4437 026a C4E92601 		strd	r0, [r4, #152]
 4438 026e 25E7     		b	.L313
 4439              	.L346:
 4440              		.align	3
 4441              	.L345:
 4442 0270 6F1283C0 		.word	3229815407
 4443 0274 CA210940 		.word	1074340298
 4444 0278 CDCCCCCC 		.word	3435973837
 4445 027c CCCC0C40 		.word	1074580684
 4446 0280 00000000 		.word	0
 4447 0284 00907640 		.word	1081511936
 4448 0288 1F85EB51 		.word	1374389535
 4449 028c B81E0940 		.word	1074339512
 4450 0290 0000B443 		.word	1135869952
 4451 0294 00807640 		.word	1081507840
 4452 0298 00408F40 		.word	1083129856
 4453 029c 0000E0BF 		.word	-1075838976
 4454 02a0 0000E03F 		.word	1071644672
 4455 02a4 00407040 		.word	1081098240
 4456 02a8 0000F0BF 		.word	-1074790400
 4457 02ac 00005940 		.word	1079574528
 4458              		.cfi_endproc
 4459              	.LFE154:
 4461              		.section	.text.encoder_tim_interrupt,"ax",%progbits
 4462              		.align	1
 4463              		.global	encoder_tim_interrupt
 4464              		.syntax unified
 4465              		.thumb
 4466              		.thumb_func
 4467              		.fpu fpv4-sp-d16
 4469              	encoder_tim_interrupt:
 4470              	.LFB153:
1026:Src/Eagle_TRT.c **** 
 4471              		.loc 1 1026 0
 4472              		.cfi_startproc
 4473              		@ args = 0, pretend = 0, frame = 0
 4474              		@ frame_needed = 0, uses_anonymous_args = 0
 4475              	.LVL464:
 4476 0000 D0B5     		push	{r4, r6, r7, lr}
 4477              	.LCFI59:
 4478              		.cfi_def_cfa_offset 16
 4479              		.cfi_offset 4, -16
 4480              		.cfi_offset 6, -12
 4481              		.cfi_offset 7, -8
 4482              		.cfi_offset 14, -4
ARM GAS  /tmp/ccuwAQC3.s 			page 111


 4483 0002 0446     		mov	r4, r0
1028:Src/Eagle_TRT.c **** 	{
 4484              		.loc 1 1028 0
 4485 0004 8368     		ldr	r3, [r0, #8]
 4486 0006 4BB1     		cbz	r3, .L358
1035:Src/Eagle_TRT.c **** 	{
 4487              		.loc 1 1035 0
 4488 0008 012B     		cmp	r3, #1
 4489 000a 19D0     		beq	.L359
1042:Src/Eagle_TRT.c **** 	{
 4490              		.loc 1 1042 0
 4491 000c 022B     		cmp	r3, #2
 4492 000e 29D0     		beq	.L360
 4493              	.LVL465:
 4494              	.L349:
1060:Src/Eagle_TRT.c **** 		enc->interrupt_flag = 0;
 4495              		.loc 1 1060 0
 4496 0010 A368     		ldr	r3, [r4, #8]
 4497 0012 012B     		cmp	r3, #1
 4498 0014 3DDD     		ble	.L353
1061:Src/Eagle_TRT.c **** 	}
 4499              		.loc 1 1061 0
 4500 0016 0023     		movs	r3, #0
 4501 0018 A360     		str	r3, [r4, #8]
 4502 001a D0BD     		pop	{r4, r6, r7, pc}
 4503              	.LVL466:
 4504              	.L358:
1031:Src/Eagle_TRT.c **** 		read_SSI(enc);
 4505              		.loc 1 1031 0
 4506 001c D0E91E23 		ldrd	r2, [r0, #120]
 4507 0020 C0E92223 		strd	r2, [r0, #136]
1032:Src/Eagle_TRT.c **** 		enc->angle0 = enc->converted_data / 45.5055;
 4508              		.loc 1 1032 0
 4509 0024 FFF7FEFF 		bl	read_SSI
 4510              	.LVL467:
1033:Src/Eagle_TRT.c **** 	}
 4511              		.loc 1 1033 0
 4512 0028 D4F8C803 		ldr	r0, [r4, #968]
 4513 002c FFF7FEFF 		bl	__aeabi_i2d
 4514              	.LVL468:
 4515 0030 19A3     		adr	r3, .L362
 4516 0032 D3E90023 		ldrd	r2, [r3]
 4517 0036 FFF7FEFF 		bl	__aeabi_ddiv
 4518              	.LVL469:
 4519 003a C4E91E01 		strd	r0, [r4, #120]
 4520 003e E7E7     		b	.L349
 4521              	.LVL470:
 4522              	.L359:
1038:Src/Eagle_TRT.c **** 		read_SSI(enc);
 4523              		.loc 1 1038 0
 4524 0040 D0E92023 		ldrd	r2, [r0, #128]
 4525 0044 C0E92423 		strd	r2, [r0, #144]
1039:Src/Eagle_TRT.c **** 		enc->angle1 = enc->converted_data / 45.5055;
 4526              		.loc 1 1039 0
 4527 0048 FFF7FEFF 		bl	read_SSI
 4528              	.LVL471:
1040:Src/Eagle_TRT.c **** 	}
ARM GAS  /tmp/ccuwAQC3.s 			page 112


 4529              		.loc 1 1040 0
 4530 004c D4F8C803 		ldr	r0, [r4, #968]
 4531 0050 FFF7FEFF 		bl	__aeabi_i2d
 4532              	.LVL472:
 4533 0054 10A3     		adr	r3, .L362
 4534 0056 D3E90023 		ldrd	r2, [r3]
 4535 005a FFF7FEFF 		bl	__aeabi_ddiv
 4536              	.LVL473:
 4537 005e C4E92001 		strd	r0, [r4, #128]
 4538 0062 D5E7     		b	.L349
 4539              	.LVL474:
 4540              	.L360:
1045:Src/Eagle_TRT.c **** 
 4541              		.loc 1 1045 0
 4542 0064 FFF7FEFF 		bl	get_speed_encoder
 4543              	.LVL475:
1048:Src/Eagle_TRT.c **** 		{
 4544              		.loc 1 1048 0
 4545 0068 D4E9F067 		ldrd	r6, [r4, #960]
 4546 006c 0022     		movs	r2, #0
 4547 006e 0023     		movs	r3, #0
 4548 0070 3046     		mov	r0, r6
 4549 0072 3946     		mov	r1, r7
 4550 0074 FFF7FEFF 		bl	__aeabi_dcmplt
 4551              	.LVL476:
 4552 0078 10B9     		cbnz	r0, .L361
1055:Src/Eagle_TRT.c **** 		}
 4553              		.loc 1 1055 0
 4554 007a 0023     		movs	r3, #0
 4555 007c A365     		str	r3, [r4, #88]
 4556 007e C7E7     		b	.L349
 4557              	.L361:
1050:Src/Eagle_TRT.c **** 			enc->speed_sign = 1;
 4558              		.loc 1 1050 0
 4559 0080 C4F8C063 		str	r6, [r4, #960]
 4560 0084 07F10043 		add	r3, r7, #-2147483648
 4561 0088 C4F8C433 		str	r3, [r4, #964]
1051:Src/Eagle_TRT.c **** 		}
 4562              		.loc 1 1051 0
 4563 008c 0123     		movs	r3, #1
 4564 008e A365     		str	r3, [r4, #88]
 4565 0090 BEE7     		b	.L349
 4566              	.L353:
1064:Src/Eagle_TRT.c **** 	}
 4567              		.loc 1 1064 0
 4568 0092 0133     		adds	r3, r3, #1
 4569 0094 A360     		str	r3, [r4, #8]
 4570 0096 D0BD     		pop	{r4, r6, r7, pc}
 4571              	.LVL477:
 4572              	.L363:
 4573              		.align	3
 4574              	.L362:
 4575 0098 62105839 		.word	962072674
 4576 009c B4C04640 		.word	1078378676
 4577              		.cfi_endproc
 4578              	.LFE153:
 4580              		.comm	pot_3,24,4
ARM GAS  /tmp/ccuwAQC3.s 			page 113


 4581              		.comm	pot_2,24,4
 4582              		.comm	pot_1,24,4
 4583              		.comm	enc,1000,8
 4584              		.comm	buffer_gps,2,4
 4585              		.comm	data_string_gps,1,1
 4586              		.comm	cont_comma,4,4
 4587              		.comm	cont_string,4,4
 4588              		.comm	string_gps,100,4
 4589              		.global	start_string_gps
 4590              		.comm	huart_GPS,4,4
 4591              		.global	print_q
 4592              		.comm	can,28,4
 4593              		.comm	gyro,568,8
 4594              		.comm	accel,568,8
 4595              		.global	OUT_Z_H_A_ADD
 4596              		.global	OUT_Z_L_A_ADD
 4597              		.global	OUT_Y_H_A_ADD
 4598              		.global	OUT_Y_L_A_ADD
 4599              		.global	OUT_X_H_A_ADD
 4600              		.global	OUT_X_L_A_ADD
 4601              		.global	OUT_Z_H_G_ADD
 4602              		.global	OUT_Z_L_G_ADD
 4603              		.global	OUT_Y_H_G_ADD
 4604              		.global	OUT_Y_L_G_ADD
 4605              		.global	OUT_X_H_G_ADD
 4606              		.global	OUT_X_L_G_ADD
 4607              		.global	SCL_M_12
 4608              		.global	SCL_M_8
 4609              		.global	SCL_M_4
 4610              		.global	SCL_M_2
 4611              		.global	CTRL_REG6_XM
 4612              		.global	SCL_A_16
 4613              		.global	SCL_A_8
 4614              		.global	SCL_A_6
 4615              		.global	SCL_A_4
 4616              		.global	SCL_A_2
 4617              		.global	CTRL_REG2_XM
 4618              		.global	SCL_G_2000
 4619              		.global	SCL_G_1000
 4620              		.global	SCL_G_500
 4621              		.global	SCL_G_245
 4622              		.global	CTRL_REG4_G
 4623              		.global	CTRL_REG7_XM_VAL
 4624              		.global	CTRL_REG7_XM_ADD
 4625              		.global	CTRL_REG6_XM_VAL
 4626              		.global	CTRL_REG6_XM_ADD
 4627              		.global	CTRL_REG5_XM_VAL
 4628              		.global	CTRL_REG5_XM_ADD
 4629              		.global	CTRL_REG2_XM_VAL
 4630              		.global	CTRL_REG2_XM_ADD
 4631              		.global	CTRL_REG1_XM_VAL
 4632              		.global	CTRL_REG1_XM_ADD
 4633              		.global	CTRL_REG4_G_VAL
 4634              		.global	CTRL_REG4_G_ADD
 4635              		.global	CTRL_REG1_G_VAL
 4636              		.global	CTRL_REG1_G_ADD
 4637              		.comm	WHO_AM_I_XM_VAL,1,1
ARM GAS  /tmp/ccuwAQC3.s 			page 114


 4638              		.global	WHO_AM_I_XM
 4639              		.comm	WHO_AM_I_G_VAL,1,1
 4640              		.global	WHO_AM_I_G
 4641              		.global	ZERO
 4642              		.section	.bss.CTRL_REG7_XM_VAL,"aw",%nobits
 4643              		.set	.LANCHOR9,. + 0
 4646              	CTRL_REG7_XM_VAL:
 4647 0000 00       		.space	1
 4648              		.section	.bss.SCL_A_2,"aw",%nobits
 4649              		.set	.LANCHOR16,. + 0
 4652              	SCL_A_2:
 4653 0000 00       		.space	1
 4654              		.section	.bss.SCL_G_245,"aw",%nobits
 4655              		.set	.LANCHOR11,. + 0
 4658              	SCL_G_245:
 4659 0000 00       		.space	1
 4660              		.section	.bss.SCL_M_2,"aw",%nobits
 4663              	SCL_M_2:
 4664 0000 00       		.space	1
 4665              		.section	.bss.ZERO,"aw",%nobits
 4668              	ZERO:
 4669 0000 00       		.space	1
 4670              		.section	.bss.print_q,"aw",%nobits
 4671              		.align	2
 4672              		.set	.LANCHOR35,. + 0
 4675              	print_q:
 4676 0000 00000000 		.space	224
 4676      00000000 
 4676      00000000 
 4676      00000000 
 4676      00000000 
 4677              		.section	.bss.start_string_gps,"aw",%nobits
 4678              		.align	2
 4679              		.set	.LANCHOR36,. + 0
 4682              	start_string_gps:
 4683 0000 00000000 		.space	4
 4684              		.section	.data.CTRL_REG1_G_ADD,"aw",%progbits
 4685              		.set	.LANCHOR0,. + 0
 4688              	CTRL_REG1_G_ADD:
 4689 0000 20       		.byte	32
 4690              		.section	.data.CTRL_REG1_G_VAL,"aw",%progbits
 4691              		.set	.LANCHOR1,. + 0
 4694              	CTRL_REG1_G_VAL:
 4695 0000 0F       		.byte	15
 4696              		.section	.data.CTRL_REG1_XM_ADD,"aw",%progbits
 4697              		.set	.LANCHOR2,. + 0
 4700              	CTRL_REG1_XM_ADD:
 4701 0000 20       		.byte	32
 4702              		.section	.data.CTRL_REG1_XM_VAL,"aw",%progbits
 4703              		.set	.LANCHOR3,. + 0
 4706              	CTRL_REG1_XM_VAL:
 4707 0000 A7       		.byte	-89
 4708              		.section	.data.CTRL_REG2_XM,"aw",%progbits
 4709              		.set	.LANCHOR15,. + 0
 4712              	CTRL_REG2_XM:
 4713 0000 21       		.byte	33
 4714              		.section	.data.CTRL_REG2_XM_ADD,"aw",%progbits
ARM GAS  /tmp/ccuwAQC3.s 			page 115


 4717              	CTRL_REG2_XM_ADD:
 4718 0000 21       		.byte	33
 4719              		.section	.data.CTRL_REG2_XM_VAL,"aw",%progbits
 4722              	CTRL_REG2_XM_VAL:
 4723 0000 08       		.byte	8
 4724              		.section	.data.CTRL_REG4_G,"aw",%progbits
 4725              		.set	.LANCHOR10,. + 0
 4728              	CTRL_REG4_G:
 4729 0000 23       		.byte	35
 4730              		.section	.data.CTRL_REG4_G_ADD,"aw",%progbits
 4733              	CTRL_REG4_G_ADD:
 4734 0000 23       		.byte	35
 4735              		.section	.data.CTRL_REG4_G_VAL,"aw",%progbits
 4738              	CTRL_REG4_G_VAL:
 4739 0000 10       		.byte	16
 4740              		.section	.data.CTRL_REG5_XM_ADD,"aw",%progbits
 4741              		.set	.LANCHOR4,. + 0
 4744              	CTRL_REG5_XM_ADD:
 4745 0000 24       		.byte	36
 4746              		.section	.data.CTRL_REG5_XM_VAL,"aw",%progbits
 4747              		.set	.LANCHOR5,. + 0
 4750              	CTRL_REG5_XM_VAL:
 4751 0000 70       		.byte	112
 4752              		.section	.data.CTRL_REG6_XM,"aw",%progbits
 4755              	CTRL_REG6_XM:
 4756 0000 25       		.byte	37
 4757              		.section	.data.CTRL_REG6_XM_ADD,"aw",%progbits
 4758              		.set	.LANCHOR6,. + 0
 4761              	CTRL_REG6_XM_ADD:
 4762 0000 25       		.byte	37
 4763              		.section	.data.CTRL_REG6_XM_VAL,"aw",%progbits
 4764              		.set	.LANCHOR7,. + 0
 4767              	CTRL_REG6_XM_VAL:
 4768 0000 20       		.byte	32
 4769              		.section	.data.CTRL_REG7_XM_ADD,"aw",%progbits
 4770              		.set	.LANCHOR8,. + 0
 4773              	CTRL_REG7_XM_ADD:
 4774 0000 26       		.byte	38
 4775              		.section	.data.OUT_X_H_A_ADD,"aw",%progbits
 4776              		.set	.LANCHOR29,. + 0
 4779              	OUT_X_H_A_ADD:
 4780 0000 A9       		.byte	-87
 4781              		.section	.data.OUT_X_H_G_ADD,"aw",%progbits
 4782              		.set	.LANCHOR23,. + 0
 4785              	OUT_X_H_G_ADD:
 4786 0000 A9       		.byte	-87
 4787              		.section	.data.OUT_X_L_A_ADD,"aw",%progbits
 4788              		.set	.LANCHOR30,. + 0
 4791              	OUT_X_L_A_ADD:
 4792 0000 A8       		.byte	-88
 4793              		.section	.data.OUT_X_L_G_ADD,"aw",%progbits
 4794              		.set	.LANCHOR24,. + 0
 4797              	OUT_X_L_G_ADD:
 4798 0000 A8       		.byte	-88
 4799              		.section	.data.OUT_Y_H_A_ADD,"aw",%progbits
 4800              		.set	.LANCHOR31,. + 0
 4803              	OUT_Y_H_A_ADD:
ARM GAS  /tmp/ccuwAQC3.s 			page 116


 4804 0000 AB       		.byte	-85
 4805              		.section	.data.OUT_Y_H_G_ADD,"aw",%progbits
 4806              		.set	.LANCHOR25,. + 0
 4809              	OUT_Y_H_G_ADD:
 4810 0000 AB       		.byte	-85
 4811              		.section	.data.OUT_Y_L_A_ADD,"aw",%progbits
 4812              		.set	.LANCHOR32,. + 0
 4815              	OUT_Y_L_A_ADD:
 4816 0000 AA       		.byte	-86
 4817              		.section	.data.OUT_Y_L_G_ADD,"aw",%progbits
 4818              		.set	.LANCHOR26,. + 0
 4821              	OUT_Y_L_G_ADD:
 4822 0000 AA       		.byte	-86
 4823              		.section	.data.OUT_Z_H_A_ADD,"aw",%progbits
 4824              		.set	.LANCHOR33,. + 0
 4827              	OUT_Z_H_A_ADD:
 4828 0000 AD       		.byte	-83
 4829              		.section	.data.OUT_Z_H_G_ADD,"aw",%progbits
 4830              		.set	.LANCHOR27,. + 0
 4833              	OUT_Z_H_G_ADD:
 4834 0000 AD       		.byte	-83
 4835              		.section	.data.OUT_Z_L_A_ADD,"aw",%progbits
 4836              		.set	.LANCHOR34,. + 0
 4839              	OUT_Z_L_A_ADD:
 4840 0000 AC       		.byte	-84
 4841              		.section	.data.OUT_Z_L_G_ADD,"aw",%progbits
 4842              		.set	.LANCHOR28,. + 0
 4845              	OUT_Z_L_G_ADD:
 4846 0000 AC       		.byte	-84
 4847              		.section	.data.SCL_A_16,"aw",%progbits
 4848              		.set	.LANCHOR20,. + 0
 4851              	SCL_A_16:
 4852 0000 20       		.byte	32
 4853              		.section	.data.SCL_A_4,"aw",%progbits
 4854              		.set	.LANCHOR17,. + 0
 4857              	SCL_A_4:
 4858 0000 08       		.byte	8
 4859              		.section	.data.SCL_A_6,"aw",%progbits
 4860              		.set	.LANCHOR18,. + 0
 4863              	SCL_A_6:
 4864 0000 10       		.byte	16
 4865              		.section	.data.SCL_A_8,"aw",%progbits
 4866              		.set	.LANCHOR19,. + 0
 4869              	SCL_A_8:
 4870 0000 18       		.byte	24
 4871              		.section	.data.SCL_G_1000,"aw",%progbits
 4872              		.set	.LANCHOR13,. + 0
 4875              	SCL_G_1000:
 4876 0000 20       		.byte	32
 4877              		.section	.data.SCL_G_2000,"aw",%progbits
 4878              		.set	.LANCHOR14,. + 0
 4881              	SCL_G_2000:
 4882 0000 30       		.byte	48
 4883              		.section	.data.SCL_G_500,"aw",%progbits
 4884              		.set	.LANCHOR12,. + 0
 4887              	SCL_G_500:
 4888 0000 10       		.byte	16
ARM GAS  /tmp/ccuwAQC3.s 			page 117


 4889              		.section	.data.SCL_M_12,"aw",%progbits
 4892              	SCL_M_12:
 4893 0000 60       		.byte	96
 4894              		.section	.data.SCL_M_4,"aw",%progbits
 4897              	SCL_M_4:
 4898 0000 20       		.byte	32
 4899              		.section	.data.SCL_M_8,"aw",%progbits
 4902              	SCL_M_8:
 4903 0000 40       		.byte	64
 4904              		.section	.data.WHO_AM_I_G,"aw",%progbits
 4905              		.set	.LANCHOR22,. + 0
 4908              	WHO_AM_I_G:
 4909 0000 8F       		.byte	-113
 4910              		.section	.data.WHO_AM_I_XM,"aw",%progbits
 4911              		.set	.LANCHOR21,. + 0
 4914              	WHO_AM_I_XM:
 4915 0000 8F       		.byte	-113
 4916              		.section	.rodata.LSMD9S0_accel_gyro_init.str1.4,"aMS",%progbits,1
 4917              		.align	2
 4918              	.LC1:
 4919 0000 3C494D55 		.ascii	"<IMU> Initialization -> Done\015\012\000"
 4919      3E20496E 
 4919      69746961 
 4919      6C697A61 
 4919      74696F6E 
 4920              		.section	.rodata.LSMD9S0_check.str1.4,"aMS",%progbits,1
 4921              		.align	2
 4922              	.LC2:
 4923 0000 4779726F 		.ascii	"Gyro, Accel check: %d\011%d\015\012\000"
 4923      2C204163 
 4923      63656C20 
 4923      63686563 
 4923      6B3A2025 
 4924              		.section	.rodata.checksum.str1.4,"aMS",%progbits,1
 4925              		.align	2
 4926              	.LC0:
 4927 0000 257800   		.ascii	"%x\000"
 4928              		.section	.rodata.gps_init.str1.4,"aMS",%progbits,1
 4929              		.align	2
 4930              	.LC3:
 4931 0000 24504D54 		.ascii	"$PMTK251,115200*1F\015\012\000"
 4931      4B323531 
 4931      2C313135 
 4931      3230302A 
 4931      31460D0A 
 4932 0015 000000   		.space	3
 4933              	.LC4:
 4934 0018 24504D54 		.ascii	"$PMTK220,100*2F\015\012\000"
 4934      4B323230 
 4934      2C313030 
 4934      2A32460D 
 4934      0A00
 4935 002a 0000     		.space	2
 4936              	.LC5:
 4937 002c 24504D54 		.ascii	"$PMTK314,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*28\015"
 4937      4B333134 
 4937      2C302C30 
ARM GAS  /tmp/ccuwAQC3.s 			page 118


 4937      2C312C31 
 4937      2C302C30 
 4938 005e 0A00     		.ascii	"\012\000"
 4939              	.LC6:
 4940 0060 3030302E 		.ascii	"000.00\000"
 4940      303000
 4941 0067 00       		.space	1
 4942              	.LC7:
 4943 0068 30303030 		.ascii	"0000.0000\000"
 4943      2E303030 
 4943      3000
 4944 0072 0000     		.space	2
 4945              	.LC8:
 4946 0074 4E00     		.ascii	"N\000"
 4947 0076 0000     		.space	2
 4948              	.LC9:
 4949 0078 30303030 		.ascii	"00000.0000\000"
 4949      302E3030 
 4949      303000
 4950 0083 00       		.space	1
 4951              	.LC10:
 4952 0084 5700     		.ascii	"W\000"
 4953 0086 0000     		.space	2
 4954              	.LC11:
 4955 0088 30303030 		.ascii	"0000.0\000"
 4955      2E3000
 4956 008f 00       		.space	1
 4957              	.LC12:
 4958 0090 30303030 		.ascii	"000000\000"
 4958      303000
 4959              		.text
 4960              	.Letext0:
 4961              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4962              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4963              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4964              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4965              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 4966              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 4967              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4968              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4969              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4970              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 4971              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 4972              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 4973              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4974              		.file 15 "/usr/include/newlib/sys/lock.h"
 4975              		.file 16 "/usr/include/newlib/sys/_types.h"
 4976              		.file 17 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4977              		.file 18 "/usr/include/newlib/sys/reent.h"
 4978              		.file 19 "/usr/include/newlib/stdlib.h"
 4979              		.file 20 "/usr/include/newlib/math.h"
 4980              		.file 21 "Inc/Eagle_TRT.h"
 4981              		.file 22 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 4982              		.file 23 "/usr/include/newlib/stdio.h"
 4983              		.file 24 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4984              		.file 25 "/usr/include/newlib/string.h"
 4985              		.file 26 "/usr/include/newlib/malloc.h"
ARM GAS  /tmp/ccuwAQC3.s 			page 119


ARM GAS  /tmp/ccuwAQC3.s 			page 120


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Eagle_TRT.c
     /tmp/ccuwAQC3.s:18     .text.next:0000000000000000 $t
     /tmp/ccuwAQC3.s:24     .text.next:0000000000000000 next
     /tmp/ccuwAQC3.s:45     .text.emptyp:0000000000000000 $t
     /tmp/ccuwAQC3.s:51     .text.emptyp:0000000000000000 emptyp
     /tmp/ccuwAQC3.s:73     .text.fullp:0000000000000000 $t
     /tmp/ccuwAQC3.s:79     .text.fullp:0000000000000000 fullp
     /tmp/ccuwAQC3.s:109    .text.checksum:0000000000000000 $t
     /tmp/ccuwAQC3.s:115    .text.checksum:0000000000000000 checksum
     /tmp/ccuwAQC3.s:242    .text.checksum:0000000000000080 $d
     /tmp/ccuwAQC3.s:247    .text.send_config:0000000000000000 $t
     /tmp/ccuwAQC3.s:254    .text.send_config:0000000000000000 send_config
     /tmp/ccuwAQC3.s:328    .text.send_config:0000000000000058 $d
     /tmp/ccuwAQC3.s:333    .text.LSMD9S0_accel_gyro_init:0000000000000000 $t
     /tmp/ccuwAQC3.s:340    .text.LSMD9S0_accel_gyro_init:0000000000000000 LSMD9S0_accel_gyro_init
     /tmp/ccuwAQC3.s:470    .text.LSMD9S0_accel_gyro_init:00000000000000e4 $d
     /tmp/ccuwAQC3.s:623    .text.LSMD9S0_accel_gyro_init:00000000000001dc $d
     /tmp/ccuwAQC3.s:650    .text.LSMD9S0_read:0000000000000000 $t
     /tmp/ccuwAQC3.s:657    .text.LSMD9S0_read:0000000000000000 LSMD9S0_read
     /tmp/ccuwAQC3.s:784    .text.LSMD9S0_read:00000000000000d0 $d
     /tmp/ccuwAQC3.s:789    .text.LSMD9S0_check:0000000000000000 $t
     /tmp/ccuwAQC3.s:796    .text.LSMD9S0_check:0000000000000000 LSMD9S0_check
     /tmp/ccuwAQC3.s:953    .text.LSMD9S0_check:00000000000000e0 $d
                            *COM*:0000000000000001 WHO_AM_I_XM_VAL
                            *COM*:0000000000000001 WHO_AM_I_G_VAL
     /tmp/ccuwAQC3.s:970    .text.LSMD9S0_gyro_read:0000000000000000 $t
     /tmp/ccuwAQC3.s:977    .text.LSMD9S0_gyro_read:0000000000000000 LSMD9S0_gyro_read
     /tmp/ccuwAQC3.s:1177   .text.LSMD9S0_gyro_read:0000000000000174 $d
     /tmp/ccuwAQC3.s:1192   .text.LSMD9S0_accel_read:0000000000000000 $t
     /tmp/ccuwAQC3.s:1199   .text.LSMD9S0_accel_read:0000000000000000 LSMD9S0_accel_read
     /tmp/ccuwAQC3.s:1381   .text.LSMD9S0_accel_read:0000000000000154 $d
     /tmp/ccuwAQC3.s:1396   .text.LSM9DS0_calibration:0000000000000000 $t
     /tmp/ccuwAQC3.s:1403   .text.LSM9DS0_calibration:0000000000000000 LSM9DS0_calibration
     /tmp/ccuwAQC3.s:1519   .text.LSM9DS0_calibration:0000000000000098 $d
     /tmp/ccuwAQC3.s:1524   .text.CAN_Send:0000000000000000 $t
     /tmp/ccuwAQC3.s:1531   .text.CAN_Send:0000000000000000 CAN_Send
     /tmp/ccuwAQC3.s:1606   .text.CAN_Receive:0000000000000000 $t
     /tmp/ccuwAQC3.s:1613   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/ccuwAQC3.s:1662   .text.init:0000000000000000 $t
     /tmp/ccuwAQC3.s:1669   .text.init:0000000000000000 init
     /tmp/ccuwAQC3.s:1689   .text.push:0000000000000000 $t
     /tmp/ccuwAQC3.s:1696   .text.push:0000000000000000 push
     /tmp/ccuwAQC3.s:1764   .text.pop:0000000000000000 $t
     /tmp/ccuwAQC3.s:1771   .text.pop:0000000000000000 pop
     /tmp/ccuwAQC3.s:1837   .text.print:0000000000000000 $t
     /tmp/ccuwAQC3.s:1844   .text.print:0000000000000000 print
     /tmp/ccuwAQC3.s:1897   .text.print:0000000000000030 $d
     /tmp/ccuwAQC3.s:1902   .text.print_it:0000000000000000 $t
     /tmp/ccuwAQC3.s:1909   .text.print_it:0000000000000000 print_it
     /tmp/ccuwAQC3.s:1959   .text.print_it:0000000000000028 $d
     /tmp/ccuwAQC3.s:1964   .text.gps_init:0000000000000000 $t
     /tmp/ccuwAQC3.s:1971   .text.gps_init:0000000000000000 gps_init
     /tmp/ccuwAQC3.s:2126   .text.gps_init:00000000000000fc $d
                            *COM*:0000000000000004 huart_GPS
                            *COM*:0000000000000002 buffer_gps
     /tmp/ccuwAQC3.s:2143   .text.gps_read_it:0000000000000000 $t
ARM GAS  /tmp/ccuwAQC3.s 			page 121


     /tmp/ccuwAQC3.s:2150   .text.gps_read_it:0000000000000000 gps_read_it
     /tmp/ccuwAQC3.s:2616   .text.gps_read_it:0000000000000280 $d
                            *COM*:0000000000000001 data_string_gps
                            *COM*:0000000000000004 cont_string
                            *COM*:0000000000000064 string_gps
                            *COM*:000000000000001c can
                            *COM*:0000000000000004 cont_comma
     /tmp/ccuwAQC3.s:2635   .text.gps_read_it:00000000000002c0 $t
     /tmp/ccuwAQC3.s:2706   .text.gps_read_it:0000000000000330 $d
     /tmp/ccuwAQC3.s:2713   .text.ReinitTIM7:0000000000000000 $t
     /tmp/ccuwAQC3.s:2720   .text.ReinitTIM7:0000000000000000 ReinitTIM7
     /tmp/ccuwAQC3.s:2812   .text.ReinitTIM7:0000000000000080 $d
     /tmp/ccuwAQC3.s:2820   .text.enc_calculate_optimal_frequency:0000000000000000 $t
     /tmp/ccuwAQC3.s:2827   .text.enc_calculate_optimal_frequency:0000000000000000 enc_calculate_optimal_frequency
     /tmp/ccuwAQC3.s:3001   .text.enc_calculate_optimal_frequency:0000000000000120 $d
     /tmp/ccuwAQC3.s:3014   .text.calc_pot_value:0000000000000000 $t
     /tmp/ccuwAQC3.s:3021   .text.calc_pot_value:0000000000000000 calc_pot_value
     /tmp/ccuwAQC3.s:3070   .text.implausibility_check:0000000000000000 $t
     /tmp/ccuwAQC3.s:3077   .text.implausibility_check:0000000000000000 implausibility_check
     /tmp/ccuwAQC3.s:3156   .text.set_max:0000000000000000 $t
     /tmp/ccuwAQC3.s:3163   .text.set_max:0000000000000000 set_max
     /tmp/ccuwAQC3.s:3179   .text.set_min:0000000000000000 $t
     /tmp/ccuwAQC3.s:3186   .text.set_min:0000000000000000 set_min
     /tmp/ccuwAQC3.s:3203   .text.Power:0000000000000000 $t
     /tmp/ccuwAQC3.s:3210   .text.Power:0000000000000000 Power
     /tmp/ccuwAQC3.s:3273   .text.Power:000000000000003c $d
     /tmp/ccuwAQC3.s:3278   .text.bin_dec:0000000000000000 $t
     /tmp/ccuwAQC3.s:3285   .text.bin_dec:0000000000000000 bin_dec
     /tmp/ccuwAQC3.s:3357   .text.read_SSI:0000000000000000 $t
     /tmp/ccuwAQC3.s:3364   .text.read_SSI:0000000000000000 read_SSI
     /tmp/ccuwAQC3.s:3585   .text.shift_array:0000000000000000 $t
     /tmp/ccuwAQC3.s:3592   .text.shift_array:0000000000000000 shift_array
     /tmp/ccuwAQC3.s:3658   .text.speed_filter:0000000000000000 $t
     /tmp/ccuwAQC3.s:3665   .text.speed_filter:0000000000000000 speed_filter
     /tmp/ccuwAQC3.s:3812   .text.speed_filter:00000000000000a8 $d
     /tmp/ccuwAQC3.s:3820   .text.dynamic_average:0000000000000000 $t
     /tmp/ccuwAQC3.s:3827   .text.dynamic_average:0000000000000000 dynamic_average
     /tmp/ccuwAQC3.s:3894   .text.imu_elaborate_data:0000000000000000 $t
     /tmp/ccuwAQC3.s:3901   .text.imu_elaborate_data:0000000000000000 imu_elaborate_data
     /tmp/ccuwAQC3.s:4078   .text.imu_elaborate_data:0000000000000150 $d
     /tmp/ccuwAQC3.s:4086   .text.get_speed_encoder:0000000000000000 $t
     /tmp/ccuwAQC3.s:4093   .text.get_speed_encoder:0000000000000000 get_speed_encoder
     /tmp/ccuwAQC3.s:4442   .text.get_speed_encoder:0000000000000270 $d
     /tmp/ccuwAQC3.s:4462   .text.encoder_tim_interrupt:0000000000000000 $t
     /tmp/ccuwAQC3.s:4469   .text.encoder_tim_interrupt:0000000000000000 encoder_tim_interrupt
     /tmp/ccuwAQC3.s:4575   .text.encoder_tim_interrupt:0000000000000098 $d
                            *COM*:0000000000000018 pot_3
                            *COM*:0000000000000018 pot_2
                            *COM*:0000000000000018 pot_1
                            *COM*:00000000000003e8 enc
     /tmp/ccuwAQC3.s:4682   .bss.start_string_gps:0000000000000000 start_string_gps
     /tmp/ccuwAQC3.s:4675   .bss.print_q:0000000000000000 print_q
                            *COM*:0000000000000238 gyro
                            *COM*:0000000000000238 accel
     /tmp/ccuwAQC3.s:4827   .data.OUT_Z_H_A_ADD:0000000000000000 OUT_Z_H_A_ADD
     /tmp/ccuwAQC3.s:4839   .data.OUT_Z_L_A_ADD:0000000000000000 OUT_Z_L_A_ADD
     /tmp/ccuwAQC3.s:4803   .data.OUT_Y_H_A_ADD:0000000000000000 OUT_Y_H_A_ADD
ARM GAS  /tmp/ccuwAQC3.s 			page 122


     /tmp/ccuwAQC3.s:4815   .data.OUT_Y_L_A_ADD:0000000000000000 OUT_Y_L_A_ADD
     /tmp/ccuwAQC3.s:4779   .data.OUT_X_H_A_ADD:0000000000000000 OUT_X_H_A_ADD
     /tmp/ccuwAQC3.s:4791   .data.OUT_X_L_A_ADD:0000000000000000 OUT_X_L_A_ADD
     /tmp/ccuwAQC3.s:4833   .data.OUT_Z_H_G_ADD:0000000000000000 OUT_Z_H_G_ADD
     /tmp/ccuwAQC3.s:4845   .data.OUT_Z_L_G_ADD:0000000000000000 OUT_Z_L_G_ADD
     /tmp/ccuwAQC3.s:4809   .data.OUT_Y_H_G_ADD:0000000000000000 OUT_Y_H_G_ADD
     /tmp/ccuwAQC3.s:4821   .data.OUT_Y_L_G_ADD:0000000000000000 OUT_Y_L_G_ADD
     /tmp/ccuwAQC3.s:4785   .data.OUT_X_H_G_ADD:0000000000000000 OUT_X_H_G_ADD
     /tmp/ccuwAQC3.s:4797   .data.OUT_X_L_G_ADD:0000000000000000 OUT_X_L_G_ADD
     /tmp/ccuwAQC3.s:4892   .data.SCL_M_12:0000000000000000 SCL_M_12
     /tmp/ccuwAQC3.s:4902   .data.SCL_M_8:0000000000000000 SCL_M_8
     /tmp/ccuwAQC3.s:4897   .data.SCL_M_4:0000000000000000 SCL_M_4
     /tmp/ccuwAQC3.s:4663   .bss.SCL_M_2:0000000000000000 SCL_M_2
     /tmp/ccuwAQC3.s:4755   .data.CTRL_REG6_XM:0000000000000000 CTRL_REG6_XM
     /tmp/ccuwAQC3.s:4851   .data.SCL_A_16:0000000000000000 SCL_A_16
     /tmp/ccuwAQC3.s:4869   .data.SCL_A_8:0000000000000000 SCL_A_8
     /tmp/ccuwAQC3.s:4863   .data.SCL_A_6:0000000000000000 SCL_A_6
     /tmp/ccuwAQC3.s:4857   .data.SCL_A_4:0000000000000000 SCL_A_4
     /tmp/ccuwAQC3.s:4652   .bss.SCL_A_2:0000000000000000 SCL_A_2
     /tmp/ccuwAQC3.s:4712   .data.CTRL_REG2_XM:0000000000000000 CTRL_REG2_XM
     /tmp/ccuwAQC3.s:4881   .data.SCL_G_2000:0000000000000000 SCL_G_2000
     /tmp/ccuwAQC3.s:4875   .data.SCL_G_1000:0000000000000000 SCL_G_1000
     /tmp/ccuwAQC3.s:4887   .data.SCL_G_500:0000000000000000 SCL_G_500
     /tmp/ccuwAQC3.s:4658   .bss.SCL_G_245:0000000000000000 SCL_G_245
     /tmp/ccuwAQC3.s:4728   .data.CTRL_REG4_G:0000000000000000 CTRL_REG4_G
     /tmp/ccuwAQC3.s:4646   .bss.CTRL_REG7_XM_VAL:0000000000000000 CTRL_REG7_XM_VAL
     /tmp/ccuwAQC3.s:4773   .data.CTRL_REG7_XM_ADD:0000000000000000 CTRL_REG7_XM_ADD
     /tmp/ccuwAQC3.s:4767   .data.CTRL_REG6_XM_VAL:0000000000000000 CTRL_REG6_XM_VAL
     /tmp/ccuwAQC3.s:4761   .data.CTRL_REG6_XM_ADD:0000000000000000 CTRL_REG6_XM_ADD
     /tmp/ccuwAQC3.s:4750   .data.CTRL_REG5_XM_VAL:0000000000000000 CTRL_REG5_XM_VAL
     /tmp/ccuwAQC3.s:4744   .data.CTRL_REG5_XM_ADD:0000000000000000 CTRL_REG5_XM_ADD
     /tmp/ccuwAQC3.s:4722   .data.CTRL_REG2_XM_VAL:0000000000000000 CTRL_REG2_XM_VAL
     /tmp/ccuwAQC3.s:4717   .data.CTRL_REG2_XM_ADD:0000000000000000 CTRL_REG2_XM_ADD
     /tmp/ccuwAQC3.s:4706   .data.CTRL_REG1_XM_VAL:0000000000000000 CTRL_REG1_XM_VAL
     /tmp/ccuwAQC3.s:4700   .data.CTRL_REG1_XM_ADD:0000000000000000 CTRL_REG1_XM_ADD
     /tmp/ccuwAQC3.s:4738   .data.CTRL_REG4_G_VAL:0000000000000000 CTRL_REG4_G_VAL
     /tmp/ccuwAQC3.s:4733   .data.CTRL_REG4_G_ADD:0000000000000000 CTRL_REG4_G_ADD
     /tmp/ccuwAQC3.s:4694   .data.CTRL_REG1_G_VAL:0000000000000000 CTRL_REG1_G_VAL
     /tmp/ccuwAQC3.s:4688   .data.CTRL_REG1_G_ADD:0000000000000000 CTRL_REG1_G_ADD
     /tmp/ccuwAQC3.s:4914   .data.WHO_AM_I_XM:0000000000000000 WHO_AM_I_XM
     /tmp/ccuwAQC3.s:4908   .data.WHO_AM_I_G:0000000000000000 WHO_AM_I_G
     /tmp/ccuwAQC3.s:4668   .bss.ZERO:0000000000000000 ZERO
     /tmp/ccuwAQC3.s:4647   .bss.CTRL_REG7_XM_VAL:0000000000000000 $d
     /tmp/ccuwAQC3.s:4653   .bss.SCL_A_2:0000000000000000 $d
     /tmp/ccuwAQC3.s:4659   .bss.SCL_G_245:0000000000000000 $d
     /tmp/ccuwAQC3.s:4664   .bss.SCL_M_2:0000000000000000 $d
     /tmp/ccuwAQC3.s:4669   .bss.ZERO:0000000000000000 $d
     /tmp/ccuwAQC3.s:4671   .bss.print_q:0000000000000000 $d
     /tmp/ccuwAQC3.s:4678   .bss.start_string_gps:0000000000000000 $d
     /tmp/ccuwAQC3.s:4917   .rodata.LSMD9S0_accel_gyro_init.str1.4:0000000000000000 $d
     /tmp/ccuwAQC3.s:4921   .rodata.LSMD9S0_check.str1.4:0000000000000000 $d
     /tmp/ccuwAQC3.s:4925   .rodata.checksum.str1.4:0000000000000000 $d
     /tmp/ccuwAQC3.s:4929   .rodata.gps_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccuwAQC3.s:485    .text.LSMD9S0_accel_gyro_init:00000000000000f3 $d
     /tmp/ccuwAQC3.s:485    .text.LSMD9S0_accel_gyro_init:00000000000000f4 $t

ARM GAS  /tmp/ccuwAQC3.s 			page 123


UNDEFINED SYMBOLS
sprintf
HAL_GPIO_WritePin
HAL_SPI_Transmit
htim2
HAL_Delay
HAL_UART_Transmit
huart2
HAL_SPI_Receive
strlen
__aeabi_f2d
__aeabi_dcmpgt
__aeabi_dsub
__aeabi_dmul
__aeabi_dadd
__aeabi_ddiv
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
malloc
strcpy
free
HAL_UART_Transmit_IT
HAL_UART_Init
HAL_UART_Receive_IT
__aeabi_d2iz
atof
sqrt
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
__aeabi_dcmpge
__aeabi_dcmplt
__aeabi_d2f
__aeabi_i2d
HAL_GPIO_ReadPin
__aeabi_dcmple
round
