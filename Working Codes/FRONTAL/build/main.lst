ARM GAS  /tmp/ccRZrNT2.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB149:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "Eagle_TRT.h"
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** #include "stdio.h"
  29:Src/main.c    **** #include "stdlib.h"
  30:Src/main.c    **** #include <inttypes.h>
  31:Src/main.c    **** #include "stm32f4xx_hal_gpio.h"
  32:Src/main.c    **** #include "stm32f4xx_it.h"
ARM GAS  /tmp/ccRZrNT2.s 			page 2


  33:Src/main.c    **** #include <math.h>
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** ADC_HandleTypeDef hadc1;
  53:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_HandleTypeDef hcan1;
  56:Src/main.c    **** 
  57:Src/main.c    **** SPI_HandleTypeDef hspi1;
  58:Src/main.c    **** 
  59:Src/main.c    **** TIM_HandleTypeDef htim2;
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** TIM_HandleTypeDef htim4;
  62:Src/main.c    **** TIM_HandleTypeDef htim5;
  63:Src/main.c    **** TIM_HandleTypeDef htim6;
  64:Src/main.c    **** TIM_HandleTypeDef htim7;
  65:Src/main.c    **** TIM_HandleTypeDef htim10;
  66:Src/main.c    **** TIM_HandleTypeDef htim11;
  67:Src/main.c    **** 
  68:Src/main.c    **** UART_HandleTypeDef huart1;
  69:Src/main.c    **** UART_HandleTypeDef huart2;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  73:Src/main.c    **** extern can_stc can;
  74:Src/main.c    **** extern imu_stc accel;
  75:Src/main.c    **** extern imu_stc gyro;
  76:Src/main.c    **** extern enc_stc enc;
  77:Src/main.c    **** extern pot_stc pot_1;
  78:Src/main.c    **** extern pot_stc pot_2;
  79:Src/main.c    **** extern pot_stc pot_3;
  80:Src/main.c    **** 
  81:Src/main.c    **** CAN_FilterTypeDef sFilter;
  82:Src/main.c    **** uint32_t valMax0, valMin0, val0rang;
  83:Src/main.c    **** uint32_t ADC_buffer[4], val[3];
  84:Src/main.c    **** char txt[100];
  85:Src/main.c    **** int flag = 0;
  86:Src/main.c    **** int multiplier = 1;
  87:Src/main.c    **** int timer_factor = 2;
  88:Src/main.c    **** int command_flag = 0;
  89:Src/main.c    **** int calibration_flag = 0;
ARM GAS  /tmp/ccRZrNT2.s 			page 3


  90:Src/main.c    **** 
  91:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance2 = {.Instance = TIM2};
  92:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance3 = {.Instance = TIM3};
  93:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance4 = {.Instance = TIM4};
  94:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance5 = {.Instance = TIM5};
  95:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  96:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  97:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance10 = {.Instance = TIM10};
  98:Src/main.c    **** 
  99:Src/main.c    **** gps_struct gps_main;
 100:Src/main.c    **** /* USER CODE END PV */
 101:Src/main.c    **** 
 102:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 103:Src/main.c    **** void SystemClock_Config(void);
 104:Src/main.c    **** static void MX_GPIO_Init(void);
 105:Src/main.c    **** static void MX_DMA_Init(void);
 106:Src/main.c    **** static void MX_USART2_UART_Init(void);
 107:Src/main.c    **** static void MX_CAN1_Init(void);
 108:Src/main.c    **** static void MX_SPI1_Init(void);
 109:Src/main.c    **** static void MX_ADC1_Init(void);
 110:Src/main.c    **** static void MX_USART1_UART_Init(void);
 111:Src/main.c    **** static void MX_TIM2_Init(void);
 112:Src/main.c    **** static void MX_TIM3_Init(void);
 113:Src/main.c    **** static void MX_TIM4_Init(void);
 114:Src/main.c    **** static void MX_TIM5_Init(void);
 115:Src/main.c    **** static void MX_TIM6_Init(void);
 116:Src/main.c    **** static void MX_TIM7_Init(void);
 117:Src/main.c    **** static void MX_TIM10_Init(void);
 118:Src/main.c    **** static void MX_TIM11_Init(void);
 119:Src/main.c    **** static void MX_NVIC_Init(void);
 120:Src/main.c    **** /* USER CODE BEGIN PFP */
 121:Src/main.c    **** 
 122:Src/main.c    **** int send_CAN_data(uint32_t);
 123:Src/main.c    **** 
 124:Src/main.c    **** /* USER CODE END PFP */
 125:Src/main.c    **** 
 126:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 127:Src/main.c    **** /* USER CODE BEGIN 0 */
 128:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 129:Src/main.c    **** {
 130:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 131:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 132:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 133:Src/main.c    ****     /*int txt_1[100];
 134:Src/main.c    ****     sprintf(txt_1, "sterzo: %d %d %d\r\n", pot_1.val, pot_2.val, pot_3.val);
 135:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)txt_1, strlen(txt_1), 10);*/
 136:Src/main.c    **** }
 137:Src/main.c    **** 
 138:Src/main.c    **** int steer_enc_prescaler;
 139:Src/main.c    **** int encoder_counter;
 140:Src/main.c    **** int previous_millis;
 141:Src/main.c    **** 
 142:Src/main.c    **** /* USER CODE END 0 */
 143:Src/main.c    **** 
 144:Src/main.c    **** /**
 145:Src/main.c    ****   * @brief  The application entry point.
 146:Src/main.c    ****   * @retval int
ARM GAS  /tmp/ccRZrNT2.s 			page 4


 147:Src/main.c    ****   */
 148:Src/main.c    **** int main(void)
 149:Src/main.c    **** {
 150:Src/main.c    ****     /* USER CODE BEGIN 1 */
 151:Src/main.c    ****     /* USER CODE END 1 */
 152:Src/main.c    **** 
 153:Src/main.c    ****     /* MCU Configuration--------------------------------------------------------*/
 154:Src/main.c    **** 
 155:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 156:Src/main.c    ****     HAL_Init();
 157:Src/main.c    **** 
 158:Src/main.c    ****     /* USER CODE BEGIN Init */
 159:Src/main.c    **** 
 160:Src/main.c    ****     /* USER CODE END Init */
 161:Src/main.c    **** 
 162:Src/main.c    ****     /* Configure the system clock */
 163:Src/main.c    ****     SystemClock_Config();
 164:Src/main.c    **** 
 165:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 166:Src/main.c    **** 
 167:Src/main.c    ****     /* USER CODE END SysInit */
 168:Src/main.c    **** 
 169:Src/main.c    ****     /* Initialize all configured peripherals */
 170:Src/main.c    ****     MX_GPIO_Init();
 171:Src/main.c    ****     MX_DMA_Init();
 172:Src/main.c    ****     MX_USART2_UART_Init();
 173:Src/main.c    ****     MX_CAN1_Init();
 174:Src/main.c    ****     MX_SPI1_Init();
 175:Src/main.c    ****     MX_ADC1_Init();
 176:Src/main.c    ****     MX_USART1_UART_Init();
 177:Src/main.c    ****     MX_TIM2_Init();
 178:Src/main.c    ****     MX_TIM3_Init();
 179:Src/main.c    ****     MX_TIM4_Init();
 180:Src/main.c    ****     MX_TIM5_Init();
 181:Src/main.c    ****     MX_TIM6_Init();
 182:Src/main.c    ****     MX_TIM7_Init();
 183:Src/main.c    ****     MX_TIM10_Init();
 184:Src/main.c    ****     MX_TIM11_Init();
 185:Src/main.c    **** 
 186:Src/main.c    ****     /* Initialize interrupts */
 187:Src/main.c    ****     MX_NVIC_Init();
 188:Src/main.c    ****     /* USER CODE BEGIN 2 */
 189:Src/main.c    **** 
 190:Src/main.c    ****     sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 191:Src/main.c    ****     sFilter.FilterIdLow = 0;
 192:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 193:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 194:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 195:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 196:Src/main.c    ****     sFilter.FilterBank = 0;
 197:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 198:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 199:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 200:Src/main.c    **** 
 201:Src/main.c    ****     HAL_CAN_Start(&hcan1);
 202:Src/main.c    **** 
 203:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
ARM GAS  /tmp/ccRZrNT2.s 			page 5


 204:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 205:Src/main.c    ****     /* USER CODE END 2 */
 206:Src/main.c    **** 
 207:Src/main.c    ****     /* Infinite loop */
 208:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 209:Src/main.c    ****     can.hcan = &hcan1;
 210:Src/main.c    ****     // can initialization //
 211:Src/main.c    **** 
 212:Src/main.c    ****     // imu initialization //
 213:Src/main.c    ****     accel.GPIOx_InUse = GPIOC;
 214:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 215:Src/main.c    ****     accel.hspi = &hspi1;
 216:Src/main.c    **** 
 217:Src/main.c    ****     gyro.GPIOx_InUse = GPIOA;
 218:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 219:Src/main.c    ****     gyro.hspi = &hspi1;
 220:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 221:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 222:Src/main.c    **** 
 223:Src/main.c    ****     if (gps_init(&huart1, &gps_main) == 0)
 224:Src/main.c    ****     {
 225:Src/main.c    ****         //--error--//
 226:Src/main.c    ****     }
 227:Src/main.c    **** 
 228:Src/main.c    ****     steer_enc_prescaler = htim3.Init.Period;
 229:Src/main.c    ****     steer_enc_prescaler /= 3;
 230:Src/main.c    ****     steer_enc_prescaler /= 20;
 231:Src/main.c    ****     steer_enc_prescaler += 40;
 232:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 233:Src/main.c    **** 
 234:Src/main.c    ****     pot_2.max = 4060;
 235:Src/main.c    ****     pot_2.min = 2350;
 236:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 237:Src/main.c    **** 
 238:Src/main.c    ****     enc.ClockPinName = GPIOC;
 239:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 240:Src/main.c    ****     enc.DataPinName = GPIOC;
 241:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 242:Src/main.c    **** 
 243:Src/main.c    ****     enc.dx_wheel = 1;
 244:Src/main.c    ****     enc.interrupt_flag = 0;
 245:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 246:Src/main.c    ****     enc.average_speed = 0;
 247:Src/main.c    ****     enc.wheel_diameter = 0.395;
 248:Src/main.c    ****     enc.data_size = 14;
 249:Src/main.c    ****     enc.clock_period = 2;
 250:Src/main.c    ****     enc.wheel_rotation = 0;
 251:Src/main.c    ****     enc.Km = 0;
 252:Src/main.c    **** 
 253:Src/main.c    ****     enc.max_delta_angle = 5;
 254:Src/main.c    ****     enc.frequency = 0;
 255:Src/main.c    ****     enc.frequency_timer = &htim7;
 256:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 257:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 258:Src/main.c    **** 
 259:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 260:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
ARM GAS  /tmp/ccRZrNT2.s 			page 6


 261:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 262:Src/main.c    ****     //HAL_TIM_Base_Start(&htim5);
 263:Src/main.c    ****     //HAL_TIM_Base_Start(&htim6);
 264:Src/main.c    ****     HAL_TIM_Base_Start(&htim7);
 265:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 266:Src/main.c    **** 
 267:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 268:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 269:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 270:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim5);
 271:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim6);
 272:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim7);
 273:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 274:Src/main.c    **** 
 275:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance2, 0);
 276:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 277:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 278:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance5, 0);
 279:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance6, 0);
 280:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance7, 0);
 281:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 282:Src/main.c    **** 
 283:Src/main.c    ****     // INIT Encoder
 284:Src/main.c    ****     enc_calculate_optimal_frequency(&enc);
 285:Src/main.c    **** 
 286:Src/main.c    ****     accel.scale = 4;
 287:Src/main.c    ****     gyro.scale = 500;
 288:Src/main.c    **** 
 289:Src/main.c    ****     //HAL_Delay(1000);
 290:Src/main.c    ****     LSMD9S0_accel_gyro_init(&accel, &gyro);
 291:Src/main.c    ****     LSMD9S0_check(&accel);
 292:Src/main.c    **** 
 293:Src/main.c    ****     LSM9DS0_calibration(&accel);
 294:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 295:Src/main.c    **** 
 296:Src/main.c    ****     encoder_counter = 0;
 297:Src/main.c    **** 
 298:Src/main.c    ****     while (1)
 299:Src/main.c    ****     {
 300:Src/main.c    **** 
 301:Src/main.c    ****         /* USER CODE END WHILE */
 302:Src/main.c    **** 
 303:Src/main.c    ****         /* USER CODE BEGIN 3 */
 304:Src/main.c    **** 
 305:Src/main.c    ****         //sprintf(txt, "%d\t%d\t%d\r\n", (int)(accel.x*100), (int)(accel.y*100), (int)(accel.z * 10
 306:Src/main.c    ****         /*sprintf(txt, "%d\t%d\r\n", (int)(accel.x*100), (int)(gyro.x*100));
 307:Src/main.c    ****         HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);*/
 308:Src/main.c    **** 
 309:Src/main.c    ****         HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 310:Src/main.c    **** /*
 311:Src/main.c    ****         for(int i = 0; i < enc.data_size; i++){
 312:Src/main.c    ****             sprintf(txt, "%d ", enc.Data[i]);
 313:Src/main.c    ****             HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 314:Src/main.c    ****         }
 315:Src/main.c    ****         sprintf(txt, "\r\n");
 316:Src/main.c    ****         HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);*/
 317:Src/main.c    **** 
ARM GAS  /tmp/ccRZrNT2.s 			page 7


 318:Src/main.c    ****         // If CAN is free from important messages, send data
 319:Src/main.c    ****         if (command_flag == 0)
 320:Src/main.c    ****         {
 321:Src/main.c    ****             if (previous_millis != HAL_GetTick())
 322:Src/main.c    ****             {
 323:Src/main.c    ****                 send_CAN_data(HAL_GetTick());
 324:Src/main.c    ****                 previous_millis = HAL_GetTick();
 325:Src/main.c    ****             }
 326:Src/main.c    ****         }
 327:Src/main.c    ****         else
 328:Src/main.c    ****         {
 329:Src/main.c    ****             HAL_Delay(1);
 330:Src/main.c    ****             command_flag = 0;
 331:Src/main.c    ****         }
 332:Src/main.c    ****     }
 333:Src/main.c    ****     /* USER CODE END 3 */
 334:Src/main.c    **** }
 335:Src/main.c    **** 
 336:Src/main.c    **** /**
 337:Src/main.c    ****   * @brief System Clock Configuration
 338:Src/main.c    ****   * @retval None
 339:Src/main.c    ****   */
 340:Src/main.c    **** void SystemClock_Config(void)
 341:Src/main.c    **** {
 342:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 343:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 344:Src/main.c    **** 
 345:Src/main.c    ****     /** Configure the main internal regulator output voltage 
 346:Src/main.c    ****   */
 347:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 348:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 349:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 350:Src/main.c    ****   */
 351:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 352:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 353:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 354:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 355:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 356:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 357:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 358:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 359:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 360:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 361:Src/main.c    ****     {
 362:Src/main.c    ****         Error_Handler();
 363:Src/main.c    ****     }
 364:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 365:Src/main.c    ****   */
 366:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 367:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 368:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 369:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 370:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 371:Src/main.c    **** 
 372:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 373:Src/main.c    ****     {
 374:Src/main.c    ****         Error_Handler();
ARM GAS  /tmp/ccRZrNT2.s 			page 8


 375:Src/main.c    ****     }
 376:Src/main.c    **** }
 377:Src/main.c    **** 
 378:Src/main.c    **** /**
 379:Src/main.c    ****   * @brief NVIC Configuration.
 380:Src/main.c    ****   * @retval None
 381:Src/main.c    ****   */
 382:Src/main.c    **** static void MX_NVIC_Init(void)
 383:Src/main.c    **** {
 384:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 385:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 386:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 387:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 388:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 389:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 390:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 391:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 392:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 393:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 394:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 395:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 396:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 397:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 398:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 399:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 400:Src/main.c    ****     HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 401:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 402:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 403:Src/main.c    ****     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 404:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 405:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 406:Src/main.c    ****     HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 407:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 408:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 409:Src/main.c    ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 410:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 411:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 412:Src/main.c    ****     HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 413:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 414:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 415:Src/main.c    ****     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 416:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 417:Src/main.c    **** }
 418:Src/main.c    **** 
 419:Src/main.c    **** /**
 420:Src/main.c    ****   * @brief ADC1 Initialization Function
 421:Src/main.c    ****   * @param None
 422:Src/main.c    ****   * @retval None
 423:Src/main.c    ****   */
 424:Src/main.c    **** static void MX_ADC1_Init(void)
 425:Src/main.c    **** {
 426:Src/main.c    **** 
 427:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 0 */
 428:Src/main.c    **** 
 429:Src/main.c    ****     /* USER CODE END ADC1_Init 0 */
 430:Src/main.c    **** 
 431:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
ARM GAS  /tmp/ccRZrNT2.s 			page 9


 432:Src/main.c    **** 
 433:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 1 */
 434:Src/main.c    **** 
 435:Src/main.c    ****     /* USER CODE END ADC1_Init 1 */
 436:Src/main.c    ****     /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of c
 437:Src/main.c    ****   */
 438:Src/main.c    ****     hadc1.Instance = ADC1;
 439:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 440:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 441:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 442:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 443:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 444:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 445:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 446:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 447:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 448:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 449:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 450:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 451:Src/main.c    ****     {
 452:Src/main.c    ****         Error_Handler();
 453:Src/main.c    ****     }
 454:Src/main.c    ****     /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and 
 455:Src/main.c    ****   */
 456:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 457:Src/main.c    ****     sConfig.Rank = 1;
 458:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 459:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 460:Src/main.c    ****     {
 461:Src/main.c    ****         Error_Handler();
 462:Src/main.c    ****     }
 463:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 2 */
 464:Src/main.c    **** 
 465:Src/main.c    ****     /* USER CODE END ADC1_Init 2 */
 466:Src/main.c    **** }
 467:Src/main.c    **** 
 468:Src/main.c    **** /**
 469:Src/main.c    ****   * @brief CAN1 Initialization Function
 470:Src/main.c    ****   * @param None
 471:Src/main.c    ****   * @retval None
 472:Src/main.c    ****   */
 473:Src/main.c    **** static void MX_CAN1_Init(void)
 474:Src/main.c    **** {
 475:Src/main.c    **** 
 476:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 0 */
 477:Src/main.c    **** 
 478:Src/main.c    ****     /* USER CODE END CAN1_Init 0 */
 479:Src/main.c    **** 
 480:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 1 */
 481:Src/main.c    **** 
 482:Src/main.c    ****     /* USER CODE END CAN1_Init 1 */
 483:Src/main.c    ****     hcan1.Instance = CAN1;
 484:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 485:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 486:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 487:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 488:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
ARM GAS  /tmp/ccRZrNT2.s 			page 10


 489:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 490:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 491:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 492:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 493:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 494:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 495:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 496:Src/main.c    ****     {
 497:Src/main.c    ****         Error_Handler();
 498:Src/main.c    ****     }
 499:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 2 */
 500:Src/main.c    **** 
 501:Src/main.c    ****     /* USER CODE END CAN1_Init 2 */
 502:Src/main.c    **** }
 503:Src/main.c    **** 
 504:Src/main.c    **** /**
 505:Src/main.c    ****   * @brief SPI1 Initialization Function
 506:Src/main.c    ****   * @param None
 507:Src/main.c    ****   * @retval None
 508:Src/main.c    ****   */
 509:Src/main.c    **** static void MX_SPI1_Init(void)
 510:Src/main.c    **** {
 511:Src/main.c    **** 
 512:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 0 */
 513:Src/main.c    **** 
 514:Src/main.c    ****     /* USER CODE END SPI1_Init 0 */
 515:Src/main.c    **** 
 516:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 1 */
 517:Src/main.c    **** 
 518:Src/main.c    ****     /* USER CODE END SPI1_Init 1 */
 519:Src/main.c    ****     /* SPI1 parameter configuration*/
 520:Src/main.c    ****     hspi1.Instance = SPI1;
 521:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 522:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 523:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 524:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 525:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 526:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 527:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 528:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 529:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 530:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 531:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 532:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 533:Src/main.c    ****     {
 534:Src/main.c    ****         Error_Handler();
 535:Src/main.c    ****     }
 536:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 2 */
 537:Src/main.c    **** 
 538:Src/main.c    ****     /* USER CODE END SPI1_Init 2 */
 539:Src/main.c    **** }
 540:Src/main.c    **** 
 541:Src/main.c    **** /**
 542:Src/main.c    ****   * @brief TIM2 Initialization Function
 543:Src/main.c    ****   * @param None
 544:Src/main.c    ****   * @retval None
 545:Src/main.c    ****   */
ARM GAS  /tmp/ccRZrNT2.s 			page 11


 546:Src/main.c    **** static void MX_TIM2_Init(void)
 547:Src/main.c    **** {
 548:Src/main.c    **** 
 549:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 0 */
 550:Src/main.c    **** 
 551:Src/main.c    ****     /* USER CODE END TIM2_Init 0 */
 552:Src/main.c    **** 
 553:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 554:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 555:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 556:Src/main.c    **** 
 557:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 1 */
 558:Src/main.c    **** 
 559:Src/main.c    ****     /* USER CODE END TIM2_Init 1 */
 560:Src/main.c    ****     htim2.Instance = TIM2;
 561:Src/main.c    ****     htim2.Init.Prescaler = 36;
 562:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 563:Src/main.c    ****     htim2.Init.Period = 1000;
 564:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 565:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 566:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 567:Src/main.c    ****     {
 568:Src/main.c    ****         Error_Handler();
 569:Src/main.c    ****     }
 570:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 571:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 572:Src/main.c    ****     {
 573:Src/main.c    ****         Error_Handler();
 574:Src/main.c    ****     }
 575:Src/main.c    ****     sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 576:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 577:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 578:Src/main.c    ****     {
 579:Src/main.c    ****         Error_Handler();
 580:Src/main.c    ****     }
 581:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 582:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 583:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 584:Src/main.c    ****     {
 585:Src/main.c    ****         Error_Handler();
 586:Src/main.c    ****     }
 587:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 2 */
 588:Src/main.c    **** 
 589:Src/main.c    ****     /* USER CODE END TIM2_Init 2 */
 590:Src/main.c    **** }
 591:Src/main.c    **** 
 592:Src/main.c    **** /**
 593:Src/main.c    ****   * @brief TIM3 Initialization Function
 594:Src/main.c    ****   * @param None
 595:Src/main.c    ****   * @retval None
 596:Src/main.c    ****   */
 597:Src/main.c    **** static void MX_TIM3_Init(void)
 598:Src/main.c    **** {
 599:Src/main.c    **** 
 600:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 0 */
 601:Src/main.c    **** 
 602:Src/main.c    ****     /* USER CODE END TIM3_Init 0 */
ARM GAS  /tmp/ccRZrNT2.s 			page 12


 603:Src/main.c    **** 
 604:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 605:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 606:Src/main.c    **** 
 607:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 1 */
 608:Src/main.c    **** 
 609:Src/main.c    ****     /* USER CODE END TIM3_Init 1 */
 610:Src/main.c    ****     htim3.Instance = TIM3;
 611:Src/main.c    ****     htim3.Init.Prescaler = 18;
 612:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 613:Src/main.c    ****     htim3.Init.Period = 65500;
 614:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 615:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 616:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 617:Src/main.c    ****     {
 618:Src/main.c    ****         Error_Handler();
 619:Src/main.c    ****     }
 620:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 621:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 622:Src/main.c    ****     {
 623:Src/main.c    ****         Error_Handler();
 624:Src/main.c    ****     }
 625:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 626:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 627:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 628:Src/main.c    ****     {
 629:Src/main.c    ****         Error_Handler();
 630:Src/main.c    ****     }
 631:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 2 */
 632:Src/main.c    **** 
 633:Src/main.c    ****     /* USER CODE END TIM3_Init 2 */
 634:Src/main.c    **** }
 635:Src/main.c    **** 
 636:Src/main.c    **** /**
 637:Src/main.c    ****   * @brief TIM4 Initialization Function
 638:Src/main.c    ****   * @param None
 639:Src/main.c    ****   * @retval None
 640:Src/main.c    ****   */
 641:Src/main.c    **** static void MX_TIM4_Init(void)
 642:Src/main.c    **** {
 643:Src/main.c    **** 
 644:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 0 */
 645:Src/main.c    **** 
 646:Src/main.c    ****     /* USER CODE END TIM4_Init 0 */
 647:Src/main.c    **** 
 648:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 649:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 650:Src/main.c    **** 
 651:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 1 */
 652:Src/main.c    **** 
 653:Src/main.c    ****     /* USER CODE END TIM4_Init 1 */
 654:Src/main.c    ****     htim4.Instance = TIM4;
 655:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 656:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 657:Src/main.c    ****     htim4.Init.Period = 2000;
 658:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 659:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccRZrNT2.s 			page 13


 660:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 661:Src/main.c    ****     {
 662:Src/main.c    ****         Error_Handler();
 663:Src/main.c    ****     }
 664:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 665:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 666:Src/main.c    ****     {
 667:Src/main.c    ****         Error_Handler();
 668:Src/main.c    ****     }
 669:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 670:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 671:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 672:Src/main.c    ****     {
 673:Src/main.c    ****         Error_Handler();
 674:Src/main.c    ****     }
 675:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 2 */
 676:Src/main.c    **** 
 677:Src/main.c    ****     /* USER CODE END TIM4_Init 2 */
 678:Src/main.c    **** }
 679:Src/main.c    **** 
 680:Src/main.c    **** /**
 681:Src/main.c    ****   * @brief TIM5 Initialization Function
 682:Src/main.c    ****   * @param None
 683:Src/main.c    ****   * @retval None
 684:Src/main.c    ****   */
 685:Src/main.c    **** static void MX_TIM5_Init(void)
 686:Src/main.c    **** {
 687:Src/main.c    **** 
 688:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 0 */
 689:Src/main.c    **** 
 690:Src/main.c    ****     /* USER CODE END TIM5_Init 0 */
 691:Src/main.c    **** 
 692:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 693:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 694:Src/main.c    **** 
 695:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 1 */
 696:Src/main.c    **** 
 697:Src/main.c    ****     /* USER CODE END TIM5_Init 1 */
 698:Src/main.c    ****     htim5.Instance = TIM5;
 699:Src/main.c    ****     htim5.Init.Prescaler = 36;
 700:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 701:Src/main.c    ****     htim5.Init.Period = 2000;
 702:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 703:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 704:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 705:Src/main.c    ****     {
 706:Src/main.c    ****         Error_Handler();
 707:Src/main.c    ****     }
 708:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 709:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 710:Src/main.c    ****     {
 711:Src/main.c    ****         Error_Handler();
 712:Src/main.c    ****     }
 713:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 714:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 715:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 716:Src/main.c    ****     {
ARM GAS  /tmp/ccRZrNT2.s 			page 14


 717:Src/main.c    ****         Error_Handler();
 718:Src/main.c    ****     }
 719:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 2 */
 720:Src/main.c    **** 
 721:Src/main.c    ****     /* USER CODE END TIM5_Init 2 */
 722:Src/main.c    **** }
 723:Src/main.c    **** 
 724:Src/main.c    **** /**
 725:Src/main.c    ****   * @brief TIM6 Initialization Function
 726:Src/main.c    ****   * @param None
 727:Src/main.c    ****   * @retval None
 728:Src/main.c    ****   */
 729:Src/main.c    **** static void MX_TIM6_Init(void)
 730:Src/main.c    **** {
 731:Src/main.c    **** 
 732:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 0 */
 733:Src/main.c    **** 
 734:Src/main.c    ****     /* USER CODE END TIM6_Init 0 */
 735:Src/main.c    **** 
 736:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 737:Src/main.c    **** 
 738:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 1 */
 739:Src/main.c    **** 
 740:Src/main.c    ****     /* USER CODE END TIM6_Init 1 */
 741:Src/main.c    ****     htim6.Instance = TIM6;
 742:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 743:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 744:Src/main.c    ****     htim6.Init.Period = 2000;
 745:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 746:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 747:Src/main.c    ****     {
 748:Src/main.c    ****         Error_Handler();
 749:Src/main.c    ****     }
 750:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 751:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 752:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 753:Src/main.c    ****     {
 754:Src/main.c    ****         Error_Handler();
 755:Src/main.c    ****     }
 756:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 2 */
 757:Src/main.c    **** 
 758:Src/main.c    ****     /* USER CODE END TIM6_Init 2 */
 759:Src/main.c    **** }
 760:Src/main.c    **** 
 761:Src/main.c    **** /**
 762:Src/main.c    ****   * @brief TIM7 Initialization Function
 763:Src/main.c    ****   * @param None
 764:Src/main.c    ****   * @retval None
 765:Src/main.c    ****   */
 766:Src/main.c    **** static void MX_TIM7_Init(void)
 767:Src/main.c    **** {
 768:Src/main.c    **** 
 769:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 0 */
 770:Src/main.c    **** 
 771:Src/main.c    ****     /* USER CODE END TIM7_Init 0 */
 772:Src/main.c    **** 
 773:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/ccRZrNT2.s 			page 15


 774:Src/main.c    **** 
 775:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 1 */
 776:Src/main.c    **** 
 777:Src/main.c    ****     /* USER CODE END TIM7_Init 1 */
 778:Src/main.c    ****     htim7.Instance = TIM7;
 779:Src/main.c    ****     htim7.Init.Prescaler = 36;
 780:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 781:Src/main.c    ****     htim7.Init.Period = 6000;
 782:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 783:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 784:Src/main.c    ****     {
 785:Src/main.c    ****         Error_Handler();
 786:Src/main.c    ****     }
 787:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 788:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 789:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 790:Src/main.c    ****     {
 791:Src/main.c    ****         Error_Handler();
 792:Src/main.c    ****     }
 793:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 2 */
 794:Src/main.c    **** 
 795:Src/main.c    ****     /* USER CODE END TIM7_Init 2 */
 796:Src/main.c    **** }
 797:Src/main.c    **** 
 798:Src/main.c    **** /**
 799:Src/main.c    ****   * @brief TIM10 Initialization Function
 800:Src/main.c    ****   * @param None
 801:Src/main.c    ****   * @retval None
 802:Src/main.c    ****   */
 803:Src/main.c    **** static void MX_TIM10_Init(void)
 804:Src/main.c    **** {
 805:Src/main.c    **** 
 806:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 0 */
 807:Src/main.c    **** 
 808:Src/main.c    ****     /* USER CODE END TIM10_Init 0 */
 809:Src/main.c    **** 
 810:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 1 */
 811:Src/main.c    **** 
 812:Src/main.c    ****     /* USER CODE END TIM10_Init 1 */
 813:Src/main.c    ****     htim10.Instance = TIM10;
 814:Src/main.c    ****     htim10.Init.Prescaler = 72;
 815:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 816:Src/main.c    ****     htim10.Init.Period = 1000;
 817:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 818:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 819:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 820:Src/main.c    ****     {
 821:Src/main.c    ****         Error_Handler();
 822:Src/main.c    ****     }
 823:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 2 */
 824:Src/main.c    **** 
 825:Src/main.c    ****     /* USER CODE END TIM10_Init 2 */
 826:Src/main.c    **** }
 827:Src/main.c    **** 
 828:Src/main.c    **** /**
 829:Src/main.c    ****   * @brief TIM11 Initialization Function
 830:Src/main.c    ****   * @param None
ARM GAS  /tmp/ccRZrNT2.s 			page 16


 831:Src/main.c    ****   * @retval None
 832:Src/main.c    ****   */
 833:Src/main.c    **** static void MX_TIM11_Init(void)
 834:Src/main.c    **** {
 835:Src/main.c    **** 
 836:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 0 */
 837:Src/main.c    **** 
 838:Src/main.c    ****     /* USER CODE END TIM11_Init 0 */
 839:Src/main.c    **** 
 840:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 1 */
 841:Src/main.c    **** 
 842:Src/main.c    ****     /* USER CODE END TIM11_Init 1 */
 843:Src/main.c    ****     htim11.Instance = TIM11;
 844:Src/main.c    ****     htim11.Init.Prescaler = 0;
 845:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 846:Src/main.c    ****     htim11.Init.Period = 0;
 847:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 848:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 849:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 850:Src/main.c    ****     {
 851:Src/main.c    ****         Error_Handler();
 852:Src/main.c    ****     }
 853:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 2 */
 854:Src/main.c    **** 
 855:Src/main.c    ****     /* USER CODE END TIM11_Init 2 */
 856:Src/main.c    **** }
 857:Src/main.c    **** 
 858:Src/main.c    **** /**
 859:Src/main.c    ****   * @brief USART1 Initialization Function
 860:Src/main.c    ****   * @param None
 861:Src/main.c    ****   * @retval None
 862:Src/main.c    ****   */
 863:Src/main.c    **** static void MX_USART1_UART_Init(void)
 864:Src/main.c    **** {
 865:Src/main.c    **** 
 866:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 0 */
 867:Src/main.c    **** 
 868:Src/main.c    ****     /* USER CODE END USART1_Init 0 */
 869:Src/main.c    **** 
 870:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 1 */
 871:Src/main.c    **** 
 872:Src/main.c    ****     /* USER CODE END USART1_Init 1 */
 873:Src/main.c    ****     huart1.Instance = USART1;
 874:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 875:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 876:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 877:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 878:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 879:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 880:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 881:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 882:Src/main.c    ****     {
 883:Src/main.c    ****         Error_Handler();
 884:Src/main.c    ****     }
 885:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 2 */
 886:Src/main.c    **** 
 887:Src/main.c    ****     /* USER CODE END USART1_Init 2 */
ARM GAS  /tmp/ccRZrNT2.s 			page 17


 888:Src/main.c    **** }
 889:Src/main.c    **** 
 890:Src/main.c    **** /**
 891:Src/main.c    ****   * @brief USART2 Initialization Function
 892:Src/main.c    ****   * @param None
 893:Src/main.c    ****   * @retval None
 894:Src/main.c    ****   */
 895:Src/main.c    **** static void MX_USART2_UART_Init(void)
 896:Src/main.c    **** {
 897:Src/main.c    **** 
 898:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 0 */
 899:Src/main.c    **** 
 900:Src/main.c    ****     /* USER CODE END USART2_Init 0 */
 901:Src/main.c    **** 
 902:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 1 */
 903:Src/main.c    **** 
 904:Src/main.c    ****     /* USER CODE END USART2_Init 1 */
 905:Src/main.c    ****     huart2.Instance = USART2;
 906:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 907:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 908:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 909:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 910:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 911:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 912:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 913:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 914:Src/main.c    ****     {
 915:Src/main.c    ****         Error_Handler();
 916:Src/main.c    ****     }
 917:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 2 */
 918:Src/main.c    **** 
 919:Src/main.c    ****     /* USER CODE END USART2_Init 2 */
 920:Src/main.c    **** }
 921:Src/main.c    **** 
 922:Src/main.c    **** /** 
 923:Src/main.c    ****   * Enable DMA controller clock
 924:Src/main.c    ****   */
 925:Src/main.c    **** static void MX_DMA_Init(void)
 926:Src/main.c    **** {
 927:Src/main.c    **** 
 928:Src/main.c    ****     /* DMA controller clock enable */
 929:Src/main.c    ****     __HAL_RCC_DMA2_CLK_ENABLE();
 930:Src/main.c    **** 
 931:Src/main.c    ****     /* DMA interrupt init */
 932:Src/main.c    ****     /* DMA2_Stream0_IRQn interrupt configuration */
 933:Src/main.c    ****     HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 934:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 935:Src/main.c    **** }
 936:Src/main.c    **** 
 937:Src/main.c    **** /**
 938:Src/main.c    ****   * @brief GPIO Initialization Function
 939:Src/main.c    ****   * @param None
 940:Src/main.c    ****   * @retval None
 941:Src/main.c    ****   */
 942:Src/main.c    **** static void MX_GPIO_Init(void)
 943:Src/main.c    **** {
  27              		.loc 1 943 0
ARM GAS  /tmp/ccRZrNT2.s 			page 18


  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 944:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 944 0
  44 0006 0024     		movs	r4, #0
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 945:Src/main.c    **** 
 946:Src/main.c    ****     /* GPIO Ports Clock Enable */
 947:Src/main.c    ****     __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 947 0
  52 0012 0194     		str	r4, [sp, #4]
  53 0014 354B     		ldr	r3, .L3
  54 0016 1A6B     		ldr	r2, [r3, #48]
  55 0018 42F08002 		orr	r2, r2, #128
  56 001c 1A63     		str	r2, [r3, #48]
  57 001e 1A6B     		ldr	r2, [r3, #48]
  58 0020 02F08002 		and	r2, r2, #128
  59 0024 0192     		str	r2, [sp, #4]
  60 0026 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 948:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 948 0
  64 0028 0294     		str	r4, [sp, #8]
  65 002a 1A6B     		ldr	r2, [r3, #48]
  66 002c 42F00102 		orr	r2, r2, #1
  67 0030 1A63     		str	r2, [r3, #48]
  68 0032 1A6B     		ldr	r2, [r3, #48]
  69 0034 02F00102 		and	r2, r2, #1
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 949:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  74              		.loc 1 949 0
  75 003c 0394     		str	r4, [sp, #12]
  76 003e 1A6B     		ldr	r2, [r3, #48]
  77 0040 42F00202 		orr	r2, r2, #2
  78 0044 1A63     		str	r2, [r3, #48]
ARM GAS  /tmp/ccRZrNT2.s 			page 19


  79 0046 1A6B     		ldr	r2, [r3, #48]
  80 0048 02F00202 		and	r2, r2, #2
  81 004c 0392     		str	r2, [sp, #12]
  82 004e 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 950:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  85              		.loc 1 950 0
  86 0050 0494     		str	r4, [sp, #16]
  87 0052 1A6B     		ldr	r2, [r3, #48]
  88 0054 42F00402 		orr	r2, r2, #4
  89 0058 1A63     		str	r2, [r3, #48]
  90 005a 1B6B     		ldr	r3, [r3, #48]
  91 005c 03F00403 		and	r3, r3, #4
  92 0060 0493     		str	r3, [sp, #16]
  93 0062 049B     		ldr	r3, [sp, #16]
  94              	.LBE5:
 951:Src/main.c    **** 
 952:Src/main.c    ****     /*Configure GPIO pin Output Level */
 953:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  95              		.loc 1 953 0
  96 0064 224D     		ldr	r5, .L3+4
  97 0066 0122     		movs	r2, #1
  98 0068 4021     		movs	r1, #64
  99 006a 2846     		mov	r0, r5
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 954:Src/main.c    **** 
 955:Src/main.c    ****     /*Configure GPIO pin Output Level */
 956:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 102              		.loc 1 956 0
 103 0070 2246     		mov	r2, r4
 104 0072 4FF40071 		mov	r1, #512
 105 0076 2846     		mov	r0, r5
 106 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 957:Src/main.c    **** 
 958:Src/main.c    ****     /*Configure GPIO pin Output Level */
 959:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 108              		.loc 1 959 0
 109 007c DFF87880 		ldr	r8, .L3+12
 110 0080 2246     		mov	r2, r4
 111 0082 4FF48071 		mov	r1, #256
 112 0086 4046     		mov	r0, r8
 113 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL2:
 960:Src/main.c    **** 
 961:Src/main.c    ****     /*Configure GPIO pin : PC6 */
 962:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_6;
 115              		.loc 1 962 0
 116 008c 4023     		movs	r3, #64
 117 008e 0593     		str	r3, [sp, #20]
 963:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 963 0
 119 0090 0127     		movs	r7, #1
 120 0092 0697     		str	r7, [sp, #24]
 964:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
ARM GAS  /tmp/ccRZrNT2.s 			page 20


 121              		.loc 1 964 0
 122 0094 0794     		str	r4, [sp, #28]
 965:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 123              		.loc 1 965 0
 124 0096 0323     		movs	r3, #3
 125 0098 0893     		str	r3, [sp, #32]
 966:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 126              		.loc 1 966 0
 127 009a 05A9     		add	r1, sp, #20
 128 009c 2846     		mov	r0, r5
 129 009e FFF7FEFF 		bl	HAL_GPIO_Init
 130              	.LVL3:
 967:Src/main.c    **** 
 968:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 969:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 131              		.loc 1 969 0
 132 00a2 4FF48076 		mov	r6, #256
 133 00a6 0596     		str	r6, [sp, #20]
 970:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 970 0
 135 00a8 0694     		str	r4, [sp, #24]
 971:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 971 0
 137 00aa 0794     		str	r4, [sp, #28]
 972:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 138              		.loc 1 972 0
 139 00ac 05A9     		add	r1, sp, #20
 140 00ae 2846     		mov	r0, r5
 141 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL4:
 973:Src/main.c    **** 
 974:Src/main.c    ****     /*Configure GPIO pin : PC9 */
 975:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_9;
 143              		.loc 1 975 0
 144 00b4 4FF40073 		mov	r3, #512
 145 00b8 0593     		str	r3, [sp, #20]
 976:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 976 0
 147 00ba 0697     		str	r7, [sp, #24]
 977:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 977 0
 149 00bc 0794     		str	r4, [sp, #28]
 978:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 150              		.loc 1 978 0
 151 00be 0894     		str	r4, [sp, #32]
 979:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 152              		.loc 1 979 0
 153 00c0 05A9     		add	r1, sp, #20
 154 00c2 2846     		mov	r0, r5
 155 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL5:
 980:Src/main.c    **** 
 981:Src/main.c    ****     /*Configure GPIO pin : PA8 */
 982:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 157              		.loc 1 982 0
 158 00c8 0596     		str	r6, [sp, #20]
 983:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
ARM GAS  /tmp/ccRZrNT2.s 			page 21


 159              		.loc 1 983 0
 160 00ca 0697     		str	r7, [sp, #24]
 984:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 984 0
 162 00cc 0794     		str	r4, [sp, #28]
 985:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 163              		.loc 1 985 0
 164 00ce 0894     		str	r4, [sp, #32]
 986:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 986 0
 166 00d0 05A9     		add	r1, sp, #20
 167 00d2 4046     		mov	r0, r8
 168 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL6:
 987:Src/main.c    **** 
 988:Src/main.c    ****     /*Configure GPIO pin : PB8 */
 989:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 170              		.loc 1 989 0
 171 00d8 0596     		str	r6, [sp, #20]
 990:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 172              		.loc 1 990 0
 173 00da 0694     		str	r4, [sp, #24]
 991:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 174              		.loc 1 991 0
 175 00dc 0794     		str	r4, [sp, #28]
 992:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 176              		.loc 1 992 0
 177 00de 05A9     		add	r1, sp, #20
 178 00e0 0448     		ldr	r0, .L3+8
 179 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL7:
 993:Src/main.c    **** }
 181              		.loc 1 993 0
 182 00e6 0AB0     		add	sp, sp, #40
 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 24
 185              		@ sp needed
 186 00e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 187              	.L4:
 188              		.align	2
 189              	.L3:
 190 00ec 00380240 		.word	1073887232
 191 00f0 00080240 		.word	1073874944
 192 00f4 00040240 		.word	1073873920
 193 00f8 00000240 		.word	1073872896
 194              		.cfi_endproc
 195              	.LFE149:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	MX_DMA_Init:
 205              	.LFB148:
 926:Src/main.c    **** 
 206              		.loc 1 926 0
ARM GAS  /tmp/ccRZrNT2.s 			page 22


 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 16
 217              	.LBB6:
 929:Src/main.c    **** 
 218              		.loc 1 929 0
 219 0004 0021     		movs	r1, #0
 220 0006 0191     		str	r1, [sp, #4]
 221 0008 094B     		ldr	r3, .L7
 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F48002 		orr	r2, r2, #4194304
 224 0010 1A63     		str	r2, [r3, #48]
 225 0012 1B6B     		ldr	r3, [r3, #48]
 226 0014 03F48003 		and	r3, r3, #4194304
 227 0018 0193     		str	r3, [sp, #4]
 228 001a 019B     		ldr	r3, [sp, #4]
 229              	.LBE6:
 933:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 933 0
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL8:
 934:Src/main.c    **** }
 235              		.loc 1 934 0
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 238              	.LVL9:
 935:Src/main.c    **** 
 239              		.loc 1 935 0
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE148:
 252              		.section	.text.MX_NVIC_Init,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	MX_NVIC_Init:
 260              	.LFB134:
 383:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
ARM GAS  /tmp/ccRZrNT2.s 			page 23


 261              		.loc 1 383 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 385:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 270              		.loc 1 385 0
 271 0002 0022     		movs	r2, #0
 272 0004 1146     		mov	r1, r2
 273 0006 1320     		movs	r0, #19
 274 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 275              	.LVL10:
 386:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 276              		.loc 1 386 0
 277 000c 1320     		movs	r0, #19
 278 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 279              	.LVL11:
 388:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 280              		.loc 1 388 0
 281 0012 0022     		movs	r2, #0
 282 0014 1146     		mov	r1, r2
 283 0016 1420     		movs	r0, #20
 284 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 285              	.LVL12:
 389:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 286              		.loc 1 389 0
 287 001c 1420     		movs	r0, #20
 288 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 289              	.LVL13:
 391:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 290              		.loc 1 391 0
 291 0022 0022     		movs	r2, #0
 292 0024 1146     		mov	r1, r2
 293 0026 1520     		movs	r0, #21
 294 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL14:
 392:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 296              		.loc 1 392 0
 297 002c 1520     		movs	r0, #21
 298 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 299              	.LVL15:
 394:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 300              		.loc 1 394 0
 301 0032 0022     		movs	r2, #0
 302 0034 1146     		mov	r1, r2
 303 0036 1620     		movs	r0, #22
 304 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 305              	.LVL16:
 395:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 306              		.loc 1 395 0
 307 003c 1620     		movs	r0, #22
 308 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 309              	.LVL17:
ARM GAS  /tmp/ccRZrNT2.s 			page 24


 397:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 310              		.loc 1 397 0
 311 0042 0022     		movs	r2, #0
 312 0044 1146     		mov	r1, r2
 313 0046 1220     		movs	r0, #18
 314 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 315              	.LVL18:
 398:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 316              		.loc 1 398 0
 317 004c 1220     		movs	r0, #18
 318 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 319              	.LVL19:
 400:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 320              		.loc 1 400 0
 321 0052 0022     		movs	r2, #0
 322 0054 1146     		mov	r1, r2
 323 0056 3720     		movs	r0, #55
 324 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 325              	.LVL20:
 401:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 326              		.loc 1 401 0
 327 005c 3720     		movs	r0, #55
 328 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 329              	.LVL21:
 403:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 330              		.loc 1 403 0
 331 0062 0022     		movs	r2, #0
 332 0064 1146     		mov	r1, r2
 333 0066 3620     		movs	r0, #54
 334 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 335              	.LVL22:
 404:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 336              		.loc 1 404 0
 337 006c 3620     		movs	r0, #54
 338 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 339              	.LVL23:
 406:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 340              		.loc 1 406 0
 341 0072 0022     		movs	r2, #0
 342 0074 1146     		mov	r1, r2
 343 0076 3220     		movs	r0, #50
 344 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 345              	.LVL24:
 407:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 346              		.loc 1 407 0
 347 007c 3220     		movs	r0, #50
 348 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 349              	.LVL25:
 409:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 350              		.loc 1 409 0
 351 0082 0022     		movs	r2, #0
 352 0084 1146     		mov	r1, r2
 353 0086 1C20     		movs	r0, #28
 354 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 355              	.LVL26:
 410:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 356              		.loc 1 410 0
ARM GAS  /tmp/ccRZrNT2.s 			page 25


 357 008c 1C20     		movs	r0, #28
 358 008e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 359              	.LVL27:
 412:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 360              		.loc 1 412 0
 361 0092 0022     		movs	r2, #0
 362 0094 1146     		mov	r1, r2
 363 0096 1920     		movs	r0, #25
 364 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 365              	.LVL28:
 413:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 366              		.loc 1 413 0
 367 009c 1920     		movs	r0, #25
 368 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 369              	.LVL29:
 415:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 370              		.loc 1 415 0
 371 00a2 0022     		movs	r2, #0
 372 00a4 1146     		mov	r1, r2
 373 00a6 2520     		movs	r0, #37
 374 00a8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 375              	.LVL30:
 416:Src/main.c    **** }
 376              		.loc 1 416 0
 377 00ac 2520     		movs	r0, #37
 378 00ae FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 379              	.LVL31:
 380 00b2 08BD     		pop	{r3, pc}
 381              		.cfi_endproc
 382              	.LFE134:
 384              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_ADC_ConvCpltCallback
 387              		.syntax unified
 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	HAL_ADC_ConvCpltCallback:
 393              	.LFB131:
 129:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 394              		.loc 1 129 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL32:
 130:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 400              		.loc 1 130 0
 401 0000 054B     		ldr	r3, .L12
 402 0002 1968     		ldr	r1, [r3]
 403 0004 054A     		ldr	r2, .L12+4
 404 0006 1161     		str	r1, [r2, #16]
 131:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 405              		.loc 1 131 0
 406 0008 5968     		ldr	r1, [r3, #4]
 407 000a 054A     		ldr	r2, .L12+8
 408 000c 1161     		str	r1, [r2, #16]
ARM GAS  /tmp/ccRZrNT2.s 			page 26


 132:Src/main.c    ****     /*int txt_1[100];
 409              		.loc 1 132 0
 410 000e 9A68     		ldr	r2, [r3, #8]
 411 0010 044B     		ldr	r3, .L12+12
 412 0012 1A61     		str	r2, [r3, #16]
 413 0014 7047     		bx	lr
 414              	.L13:
 415 0016 00BF     		.align	2
 416              	.L12:
 417 0018 00000000 		.word	ADC_buffer
 418 001c 00000000 		.word	pot_1
 419 0020 00000000 		.word	pot_2
 420 0024 00000000 		.word	pot_3
 421              		.cfi_endproc
 422              	.LFE131:
 424              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 425              		.align	1
 426              		.global	HAL_UART_RxCpltCallback
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	HAL_UART_RxCpltCallback:
 433              	.LFB150:
 994:Src/main.c    **** 
 995:Src/main.c    **** /* USER CODE BEGIN 4 */
 996:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 997:Src/main.c    **** {
 434              		.loc 1 997 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL33:
 439 0000 08B5     		push	{r3, lr}
 440              	.LCFI7:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 3, -8
 443              		.cfi_offset 14, -4
 998:Src/main.c    ****     if (huart == &huart1)
 444              		.loc 1 998 0
 445 0002 044B     		ldr	r3, .L18
 446 0004 9842     		cmp	r0, r3
 447 0006 00D0     		beq	.L17
 448              	.LVL34:
 449              	.L14:
 450 0008 08BD     		pop	{r3, pc}
 451              	.LVL35:
 452              	.L17:
 999:Src/main.c    ****     {
1000:Src/main.c    ****         gps_read_it(huart, &gps_main);
 453              		.loc 1 1000 0
 454 000a 0349     		ldr	r1, .L18+4
 455 000c FFF7FEFF 		bl	gps_read_it
 456              	.LVL36:
1001:Src/main.c    ****     }
1002:Src/main.c    **** }
 457              		.loc 1 1002 0
ARM GAS  /tmp/ccRZrNT2.s 			page 27


 458 0010 FAE7     		b	.L14
 459              	.L19:
 460 0012 00BF     		.align	2
 461              	.L18:
 462 0014 00000000 		.word	huart1
 463 0018 00000000 		.word	gps_main
 464              		.cfi_endproc
 465              	.LFE150:
 467              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 468              		.align	1
 469              		.global	HAL_UART_TxCpltCallback
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	HAL_UART_TxCpltCallback:
 476              	.LFB151:
1003:Src/main.c    **** 
1004:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1005:Src/main.c    **** {
 477              		.loc 1 1005 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL37:
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
1006:Src/main.c    ****     if (huart == &huart2)
 487              		.loc 1 1006 0
 488 0002 044B     		ldr	r3, .L24
 489 0004 8342     		cmp	r3, r0
 490 0006 00D0     		beq	.L23
 491              	.LVL38:
 492              	.L20:
 493 0008 08BD     		pop	{r3, pc}
 494              	.LVL39:
 495              	.L23:
1007:Src/main.c    ****     {
1008:Src/main.c    ****         print_it(&huart2);
 496              		.loc 1 1008 0
 497 000a 1846     		mov	r0, r3
 498              	.LVL40:
 499 000c FFF7FEFF 		bl	print_it
 500              	.LVL41:
1009:Src/main.c    ****     }
1010:Src/main.c    **** }
 501              		.loc 1 1010 0
 502 0010 FAE7     		b	.L20
 503              	.L25:
 504 0012 00BF     		.align	2
 505              	.L24:
 506 0014 00000000 		.word	huart2
 507              		.cfi_endproc
 508              	.LFE151:
ARM GAS  /tmp/ccRZrNT2.s 			page 28


 510              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 511              		.align	1
 512              		.global	HAL_CAN_RxFifo0FullCallback
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	HAL_CAN_RxFifo0FullCallback:
 519              	.LFB152:
1011:Src/main.c    **** 
1012:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1013:Src/main.c    **** {
 520              		.loc 1 1013 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              	.LVL42:
 525 0000 38B5     		push	{r3, r4, r5, lr}
 526              	.LCFI9:
 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
1014:Src/main.c    ****     /// CALIBRATION CODE///
1015:Src/main.c    ****     int idsave = CAN_Receive(&can);
 532              		.loc 1 1015 0
 533 0002 4B48     		ldr	r0, .L46
 534              	.LVL43:
 535 0004 FFF7FEFF 		bl	CAN_Receive
 536              	.LVL44:
 537 0008 0446     		mov	r4, r0
 538              	.LVL45:
1016:Src/main.c    ****     //201/202
1017:Src/main.c    **** 
1018:Src/main.c    ****     if (idsave == 0x55 || idsave == 0x201)
 539              		.loc 1 1018 0
 540 000a 5528     		cmp	r0, #85
 541 000c 1ED0     		beq	.L27
 542              		.loc 1 1018 0 is_stmt 0 discriminator 1
 543 000e 40F20123 		movw	r3, #513
 544 0012 9842     		cmp	r0, r3
 545 0014 1AD0     		beq	.L27
 546              	.LVL46:
 547              	.L28:
1019:Src/main.c    ****     {
1020:Src/main.c    ****         if (can.dataRx[0] == 0x51 || can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0
1021:Src/main.c    ****         {
1022:Src/main.c    ****             command_flag = 1;
1023:Src/main.c    ****             idsave = 0;
1024:Src/main.c    ****         }
1025:Src/main.c    ****     }
1026:Src/main.c    ****     if (idsave == 0xA0 || idsave == 0xAA || idsave == 0x181)
 548              		.loc 1 1026 0 is_stmt 1
 549 0016 A02C     		cmp	r4, #160
 550 0018 05D0     		beq	.L30
 551              		.loc 1 1026 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccRZrNT2.s 			page 29


 552 001a AA2C     		cmp	r4, #170
 553 001c 03D0     		beq	.L30
 554              		.loc 1 1026 0 discriminator 2
 555 001e 40F28113 		movw	r3, #385
 556 0022 9C42     		cmp	r4, r3
 557 0024 0DD1     		bne	.L31
 558              	.L30:
1027:Src/main.c    ****     {
1028:Src/main.c    ****         if (can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0
 559              		.loc 1 1028 0 is_stmt 1
 560 0026 424B     		ldr	r3, .L46
 561 0028 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 562 002a D31E     		subs	r3, r2, #3
 563 002c DBB2     		uxtb	r3, r3
 564 002e 022B     		cmp	r3, #2
 565 0030 03D9     		bls	.L32
 566              		.loc 1 1028 0 is_stmt 0 discriminator 1
 567 0032 082A     		cmp	r2, #8
 568 0034 01D0     		beq	.L32
 569              		.loc 1 1028 0 discriminator 2
 570 0036 D82A     		cmp	r2, #216
 571 0038 03D1     		bne	.L31
 572              	.L32:
1029:Src/main.c    ****         {
1030:Src/main.c    ****             command_flag = 1;
 573              		.loc 1 1030 0 is_stmt 1
 574 003a 0122     		movs	r2, #1
 575 003c 3D4B     		ldr	r3, .L46+4
 576 003e 1A60     		str	r2, [r3]
 577              	.LVL47:
1031:Src/main.c    ****             idsave = 0;
 578              		.loc 1 1031 0
 579 0040 0024     		movs	r4, #0
 580              	.LVL48:
 581              	.L31:
1032:Src/main.c    ****         }
1033:Src/main.c    ****     }
1034:Src/main.c    **** 
1035:Src/main.c    ****     if (idsave == 0xBB)
 582              		.loc 1 1035 0
 583 0042 BB2C     		cmp	r4, #187
 584 0044 17D0     		beq	.L42
 585              	.L33:
1036:Src/main.c    ****     {
1037:Src/main.c    ****         //sprintf(val0, "APPS1: %d \r\n", idsave);  //use "%lu" for long, "%d" for int
1038:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), 10);
1039:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 0))
1040:Src/main.c    ****         {
1041:Src/main.c    ****             set_min(&pot_2);
1042:Src/main.c    ****             calibration_flag = 1;
1043:Src/main.c    **** 
1044:Src/main.c    ****             can.dataTx[0] = 2;
1045:Src/main.c    ****             can.dataTx[1] = 0;
1046:Src/main.c    ****             can.dataTx[2] = 0;
1047:Src/main.c    ****             can.dataTx[3] = 0;
1048:Src/main.c    ****             can.dataTx[4] = 0;
1049:Src/main.c    ****             can.dataTx[5] = 0;
ARM GAS  /tmp/ccRZrNT2.s 			page 30


1050:Src/main.c    ****             can.dataTx[6] = 0;
1051:Src/main.c    ****             can.dataTx[7] = 0;
1052:Src/main.c    ****             can.id = 0xBC;
1053:Src/main.c    ****             can.size = 8;
1054:Src/main.c    ****             for (int i = 0; i < 10; i++)
1055:Src/main.c    ****             {
1056:Src/main.c    ****                 CAN_Send(&can);
1057:Src/main.c    ****             }
1058:Src/main.c    ****         }
1059:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 1))
1060:Src/main.c    ****         {
1061:Src/main.c    ****             set_max(&pot_2);
1062:Src/main.c    ****             calibration_flag = 0;
1063:Src/main.c    **** 
1064:Src/main.c    ****             can.dataTx[0] = 2;
1065:Src/main.c    ****             can.dataTx[1] = 1;
1066:Src/main.c    ****             can.dataTx[2] = 0;
1067:Src/main.c    ****             can.dataTx[3] = 0;
1068:Src/main.c    ****             can.dataTx[4] = 0;
1069:Src/main.c    ****             can.dataTx[5] = 0;
1070:Src/main.c    ****             ;
1071:Src/main.c    ****             can.dataTx[6] = 0;
1072:Src/main.c    ****             can.dataTx[7] = 0;
1073:Src/main.c    ****             can.id = 0xBC;
1074:Src/main.c    ****             can.size = 8;
1075:Src/main.c    ****             for (int i = 0; i < 10; i++)
1076:Src/main.c    ****             {
1077:Src/main.c    ****                 CAN_Send(&can);
1078:Src/main.c    ****             }
1079:Src/main.c    ****         }
1080:Src/main.c    ****         //val0rang = abs(valMax0 - valMin0);
1081:Src/main.c    ****         pot_2.range = abs(pot_2.max - pot_2.min);
1082:Src/main.c    ****         int max_tmp = pot_2.max;
1083:Src/main.c    ****         int min_tmp = pot_2.min;
1084:Src/main.c    ****         if (max_tmp > min_tmp)
1085:Src/main.c    ****         {
1086:Src/main.c    ****             pot_2.max = max_tmp;
1087:Src/main.c    ****             pot_2.min = min_tmp;
1088:Src/main.c    ****         }
1089:Src/main.c    ****         if (max_tmp < min_tmp)
1090:Src/main.c    ****         {
1091:Src/main.c    ****             pot_2.max = min_tmp;
1092:Src/main.c    ****             pot_2.min = max_tmp;
1093:Src/main.c    ****         }
1094:Src/main.c    ****     }
1095:Src/main.c    **** 
1096:Src/main.c    ****     //TIMER Interrupt setup via CAN Message
1097:Src/main.c    ****     if (idsave == 195 && can.dataRx[0] == 1)
 586              		.loc 1 1097 0
 587 0046 C32C     		cmp	r4, #195
 588 0048 65D0     		beq	.L43
 589              	.L26:
 590 004a 38BD     		pop	{r3, r4, r5, pc}
 591              	.LVL49:
 592              	.L27:
1020:Src/main.c    ****         {
 593              		.loc 1 1020 0
ARM GAS  /tmp/ccRZrNT2.s 			page 31


 594 004c 384B     		ldr	r3, .L46
 595 004e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 596 0050 512B     		cmp	r3, #81
 597 0052 0BD0     		beq	.L29
1020:Src/main.c    ****         {
 598              		.loc 1 1020 0 is_stmt 0 discriminator 1
 599 0054 032B     		cmp	r3, #3
 600 0056 09D0     		beq	.L29
1020:Src/main.c    ****         {
 601              		.loc 1 1020 0 discriminator 2
 602 0058 042B     		cmp	r3, #4
 603 005a 07D0     		beq	.L29
1020:Src/main.c    ****         {
 604              		.loc 1 1020 0 discriminator 3
 605 005c 052B     		cmp	r3, #5
 606 005e 05D0     		beq	.L29
1020:Src/main.c    ****         {
 607              		.loc 1 1020 0 discriminator 4
 608 0060 082B     		cmp	r3, #8
 609 0062 03D0     		beq	.L29
1020:Src/main.c    ****         {
 610              		.loc 1 1020 0 discriminator 5
 611 0064 0A2B     		cmp	r3, #10
 612 0066 01D0     		beq	.L29
1020:Src/main.c    ****         {
 613              		.loc 1 1020 0 discriminator 6
 614 0068 0B2B     		cmp	r3, #11
 615 006a D4D1     		bne	.L28
 616              	.L29:
1022:Src/main.c    ****             idsave = 0;
 617              		.loc 1 1022 0 is_stmt 1
 618 006c 0122     		movs	r2, #1
 619 006e 314B     		ldr	r3, .L46+4
 620 0070 1A60     		str	r2, [r3]
 621              	.LVL50:
1023:Src/main.c    ****         }
 622              		.loc 1 1023 0
 623 0072 0024     		movs	r4, #0
 624 0074 CFE7     		b	.L28
 625              	.LVL51:
 626              	.L42:
 627              	.LBB7:
1039:Src/main.c    ****         {
 628              		.loc 1 1039 0
 629 0076 2E4B     		ldr	r3, .L46
 630 0078 1B8A     		ldrh	r3, [r3, #16]
 631 007a 022B     		cmp	r3, #2
 632 007c 11D0     		beq	.L44
 633              	.L34:
1059:Src/main.c    ****         {
 634              		.loc 1 1059 0
 635 007e 2C4B     		ldr	r3, .L46
 636 0080 1B8A     		ldrh	r3, [r3, #16]
 637 0082 B3F5817F 		cmp	r3, #258
 638 0086 29D0     		beq	.L45
 639              	.L37:
1081:Src/main.c    ****         int max_tmp = pot_2.max;
ARM GAS  /tmp/ccRZrNT2.s 			page 32


 640              		.loc 1 1081 0
 641 0088 2B4B     		ldr	r3, .L46+8
 642 008a 5968     		ldr	r1, [r3, #4]
 643 008c 9868     		ldr	r0, [r3, #8]
 644 008e 0A1A     		subs	r2, r1, r0
 645 0090 002A     		cmp	r2, #0
 646 0092 B8BF     		it	lt
 647 0094 5242     		rsblt	r2, r2, #0
 648 0096 DA60     		str	r2, [r3, #12]
 649              	.LVL52:
1089:Src/main.c    ****         {
 650              		.loc 1 1089 0
 651 0098 8142     		cmp	r1, r0
 652 009a D4DA     		bge	.L33
1091:Src/main.c    ****             pot_2.min = max_tmp;
 653              		.loc 1 1091 0
 654 009c 5860     		str	r0, [r3, #4]
1092:Src/main.c    ****         }
 655              		.loc 1 1092 0
 656 009e 9960     		str	r1, [r3, #8]
 657 00a0 D1E7     		b	.L33
 658              	.LVL53:
 659              	.L44:
1041:Src/main.c    ****             calibration_flag = 1;
 660              		.loc 1 1041 0
 661 00a2 2548     		ldr	r0, .L46+8
 662 00a4 FFF7FEFF 		bl	set_min
 663              	.LVL54:
1042:Src/main.c    **** 
 664              		.loc 1 1042 0
 665 00a8 0122     		movs	r2, #1
 666 00aa 244B     		ldr	r3, .L46+12
 667 00ac 1A60     		str	r2, [r3]
1044:Src/main.c    ****             can.dataTx[1] = 0;
 668              		.loc 1 1044 0
 669 00ae 204B     		ldr	r3, .L46
 670 00b0 0222     		movs	r2, #2
 671 00b2 1A72     		strb	r2, [r3, #8]
1045:Src/main.c    ****             can.dataTx[2] = 0;
 672              		.loc 1 1045 0
 673 00b4 0025     		movs	r5, #0
 674 00b6 5D72     		strb	r5, [r3, #9]
1046:Src/main.c    ****             can.dataTx[3] = 0;
 675              		.loc 1 1046 0
 676 00b8 9D72     		strb	r5, [r3, #10]
1047:Src/main.c    ****             can.dataTx[4] = 0;
 677              		.loc 1 1047 0
 678 00ba DD72     		strb	r5, [r3, #11]
1048:Src/main.c    ****             can.dataTx[5] = 0;
 679              		.loc 1 1048 0
 680 00bc 1D73     		strb	r5, [r3, #12]
1049:Src/main.c    ****             can.dataTx[6] = 0;
 681              		.loc 1 1049 0
 682 00be 5D73     		strb	r5, [r3, #13]
1050:Src/main.c    ****             can.dataTx[7] = 0;
 683              		.loc 1 1050 0
 684 00c0 9D73     		strb	r5, [r3, #14]
ARM GAS  /tmp/ccRZrNT2.s 			page 33


1051:Src/main.c    ****             can.id = 0xBC;
 685              		.loc 1 1051 0
 686 00c2 DD73     		strb	r5, [r3, #15]
1052:Src/main.c    ****             can.size = 8;
 687              		.loc 1 1052 0
 688 00c4 BC22     		movs	r2, #188
 689 00c6 1A60     		str	r2, [r3]
1053:Src/main.c    ****             for (int i = 0; i < 10; i++)
 690              		.loc 1 1053 0
 691 00c8 0822     		movs	r2, #8
 692 00ca 5A60     		str	r2, [r3, #4]
 693              	.LVL55:
 694              	.LBB8:
1054:Src/main.c    ****             {
 695              		.loc 1 1054 0
 696 00cc 03E0     		b	.L35
 697              	.LVL56:
 698              	.L36:
1056:Src/main.c    ****             }
 699              		.loc 1 1056 0 discriminator 3
 700 00ce 1848     		ldr	r0, .L46
 701 00d0 FFF7FEFF 		bl	CAN_Send
 702              	.LVL57:
1054:Src/main.c    ****             {
 703              		.loc 1 1054 0 discriminator 3
 704 00d4 0135     		adds	r5, r5, #1
 705              	.LVL58:
 706              	.L35:
1054:Src/main.c    ****             {
 707              		.loc 1 1054 0 is_stmt 0 discriminator 1
 708 00d6 092D     		cmp	r5, #9
 709 00d8 F9DD     		ble	.L36
 710 00da D0E7     		b	.L34
 711              	.LVL59:
 712              	.L45:
 713              	.LBE8:
1061:Src/main.c    ****             calibration_flag = 0;
 714              		.loc 1 1061 0 is_stmt 1
 715 00dc 1648     		ldr	r0, .L46+8
 716 00de FFF7FEFF 		bl	set_max
 717              	.LVL60:
1062:Src/main.c    **** 
 718              		.loc 1 1062 0
 719 00e2 0025     		movs	r5, #0
 720 00e4 154B     		ldr	r3, .L46+12
 721 00e6 1D60     		str	r5, [r3]
1064:Src/main.c    ****             can.dataTx[1] = 1;
 722              		.loc 1 1064 0
 723 00e8 114B     		ldr	r3, .L46
 724 00ea 0222     		movs	r2, #2
 725 00ec 1A72     		strb	r2, [r3, #8]
1065:Src/main.c    ****             can.dataTx[2] = 0;
 726              		.loc 1 1065 0
 727 00ee 0122     		movs	r2, #1
 728 00f0 5A72     		strb	r2, [r3, #9]
1066:Src/main.c    ****             can.dataTx[3] = 0;
 729              		.loc 1 1066 0
ARM GAS  /tmp/ccRZrNT2.s 			page 34


 730 00f2 9D72     		strb	r5, [r3, #10]
1067:Src/main.c    ****             can.dataTx[4] = 0;
 731              		.loc 1 1067 0
 732 00f4 DD72     		strb	r5, [r3, #11]
1068:Src/main.c    ****             can.dataTx[5] = 0;
 733              		.loc 1 1068 0
 734 00f6 1D73     		strb	r5, [r3, #12]
1069:Src/main.c    ****             ;
 735              		.loc 1 1069 0
 736 00f8 5D73     		strb	r5, [r3, #13]
1071:Src/main.c    ****             can.dataTx[7] = 0;
 737              		.loc 1 1071 0
 738 00fa 9D73     		strb	r5, [r3, #14]
1072:Src/main.c    ****             can.id = 0xBC;
 739              		.loc 1 1072 0
 740 00fc DD73     		strb	r5, [r3, #15]
1073:Src/main.c    ****             can.size = 8;
 741              		.loc 1 1073 0
 742 00fe BC22     		movs	r2, #188
 743 0100 1A60     		str	r2, [r3]
1074:Src/main.c    ****             for (int i = 0; i < 10; i++)
 744              		.loc 1 1074 0
 745 0102 0822     		movs	r2, #8
 746 0104 5A60     		str	r2, [r3, #4]
 747              	.LVL61:
 748              	.LBB9:
1075:Src/main.c    ****             {
 749              		.loc 1 1075 0
 750 0106 03E0     		b	.L38
 751              	.LVL62:
 752              	.L39:
1077:Src/main.c    ****             }
 753              		.loc 1 1077 0 discriminator 3
 754 0108 0948     		ldr	r0, .L46
 755 010a FFF7FEFF 		bl	CAN_Send
 756              	.LVL63:
1075:Src/main.c    ****             {
 757              		.loc 1 1075 0 discriminator 3
 758 010e 0135     		adds	r5, r5, #1
 759              	.LVL64:
 760              	.L38:
1075:Src/main.c    ****             {
 761              		.loc 1 1075 0 is_stmt 0 discriminator 1
 762 0110 092D     		cmp	r5, #9
 763 0112 F9DD     		ble	.L39
 764 0114 B8E7     		b	.L37
 765              	.LVL65:
 766              	.L43:
 767              	.LBE9:
 768              	.LBE7:
 769              		.loc 1 1097 0 is_stmt 1 discriminator 1
 770 0116 064B     		ldr	r3, .L46
 771 0118 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 772 011a 012B     		cmp	r3, #1
 773 011c 95D1     		bne	.L26
1098:Src/main.c    ****     {
1099:Src/main.c    ****         multiplier = can.dataRx[1] * 256 + can.dataRx[2];
ARM GAS  /tmp/ccRZrNT2.s 			page 35


 774              		.loc 1 1099 0
 775 011e 044A     		ldr	r2, .L46
 776 0120 517C     		ldrb	r1, [r2, #17]	@ zero_extendqisi2
 777 0122 937C     		ldrb	r3, [r2, #18]	@ zero_extendqisi2
 778 0124 03EB0123 		add	r3, r3, r1, lsl #8
 779 0128 054A     		ldr	r2, .L46+16
 780 012a 1360     		str	r3, [r2]
1100:Src/main.c    ****     }
1101:Src/main.c    **** }
 781              		.loc 1 1101 0
 782 012c 8DE7     		b	.L26
 783              	.L47:
 784 012e 00BF     		.align	2
 785              	.L46:
 786 0130 00000000 		.word	can
 787 0134 00000000 		.word	.LANCHOR0
 788 0138 00000000 		.word	pot_2
 789 013c 00000000 		.word	.LANCHOR1
 790 0140 00000000 		.word	.LANCHOR2
 791              		.cfi_endproc
 792              	.LFE152:
 794              		.global	__aeabi_d2iz
 795              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 796              		.align	1
 797              		.global	HAL_TIM_PeriodElapsedCallback
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 801              		.fpu fpv4-sp-d16
 803              	HAL_TIM_PeriodElapsedCallback:
 804              	.LFB153:
1102:Src/main.c    **** 
1103:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1104:Src/main.c    **** {
 805              		.loc 1 1104 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              	.LVL66:
 810 0000 10B5     		push	{r4, lr}
 811              	.LCFI10:
 812              		.cfi_def_cfa_offset 8
 813              		.cfi_offset 4, -8
 814              		.cfi_offset 14, -4
 815 0002 0446     		mov	r4, r0
1105:Src/main.c    **** 
1106:Src/main.c    ****     if (htim == &htim10)
 816              		.loc 1 1106 0
 817 0004 264B     		ldr	r3, .L61
 818 0006 9842     		cmp	r0, r3
 819 0008 03D0     		beq	.L56
 820              	.LVL67:
 821              	.L49:
1107:Src/main.c    ****     {
1108:Src/main.c    ****         //READING SENSORS
1109:Src/main.c    ****         if (flag == 1 * multiplier)
1110:Src/main.c    ****         {
ARM GAS  /tmp/ccRZrNT2.s 			page 36


1111:Src/main.c    ****             // ACCEL
1112:Src/main.c    ****             LSMD9S0_accel_read(&accel);
1113:Src/main.c    **** 
1114:Src/main.c    ****         }
1115:Src/main.c    ****         else if (flag == 2 * multiplier)
1116:Src/main.c    ****         {
1117:Src/main.c    ****             // STEER
1118:Src/main.c    ****             calc_pot_value(&pot_2);
1119:Src/main.c    ****         }
1120:Src/main.c    ****         else if (flag == 3 * multiplier)
1121:Src/main.c    ****         {
1122:Src/main.c    ****             // GYRO
1123:Src/main.c    ****             LSMD9S0_gyro_read(&gyro);
1124:Src/main.c    ****             //imu_elaborate_data(&gyro);
1125:Src/main.c    ****         }
1126:Src/main.c    **** 
1127:Src/main.c    ****         if (flag >= (3 * multiplier))
1128:Src/main.c    ****         {
1129:Src/main.c    ****             flag = 0;
1130:Src/main.c    ****         }
1131:Src/main.c    ****         else
1132:Src/main.c    ****         {
1133:Src/main.c    ****             flag++;
1134:Src/main.c    ****         }
1135:Src/main.c    ****     }
1136:Src/main.c    **** 
1137:Src/main.c    ****     if (htim == &htim7)
 822              		.loc 1 1137 0
 823 000a 264B     		ldr	r3, .L61+4
 824 000c 9C42     		cmp	r4, r3
 825 000e 29D0     		beq	.L57
 826              	.LVL68:
 827              	.L48:
 828 0010 10BD     		pop	{r4, pc}
 829              	.LVL69:
 830              	.L56:
1109:Src/main.c    ****         {
 831              		.loc 1 1109 0
 832 0012 254B     		ldr	r3, .L61+8
 833 0014 1A68     		ldr	r2, [r3]
 834 0016 254B     		ldr	r3, .L61+12
 835 0018 1B68     		ldr	r3, [r3]
 836 001a 9A42     		cmp	r2, r3
 837 001c 12D0     		beq	.L58
1115:Src/main.c    ****         {
 838              		.loc 1 1115 0
 839 001e B2EB430F 		cmp	r2, r3, lsl #1
 840 0022 13D0     		beq	.L59
1120:Src/main.c    ****         {
 841              		.loc 1 1120 0
 842 0024 03EB4303 		add	r3, r3, r3, lsl #1
 843 0028 9A42     		cmp	r2, r3
 844 002a 13D0     		beq	.L60
 845              	.LVL70:
 846              	.L51:
1127:Src/main.c    ****         {
 847              		.loc 1 1127 0
ARM GAS  /tmp/ccRZrNT2.s 			page 37


 848 002c 1F4B     		ldr	r3, .L61+12
 849 002e 1B68     		ldr	r3, [r3]
 850 0030 03EB4303 		add	r3, r3, r3, lsl #1
 851 0034 1C4A     		ldr	r2, .L61+8
 852 0036 1268     		ldr	r2, [r2]
 853 0038 9342     		cmp	r3, r2
 854 003a 0FDC     		bgt	.L53
1129:Src/main.c    ****         }
 855              		.loc 1 1129 0
 856 003c 0022     		movs	r2, #0
 857 003e 1A4B     		ldr	r3, .L61+8
 858 0040 1A60     		str	r2, [r3]
 859 0042 E2E7     		b	.L49
 860              	.LVL71:
 861              	.L58:
1112:Src/main.c    **** 
 862              		.loc 1 1112 0
 863 0044 1A48     		ldr	r0, .L61+16
 864              	.LVL72:
 865 0046 FFF7FEFF 		bl	LSMD9S0_accel_read
 866              	.LVL73:
 867 004a EFE7     		b	.L51
 868              	.LVL74:
 869              	.L59:
1118:Src/main.c    ****         }
 870              		.loc 1 1118 0
 871 004c 1948     		ldr	r0, .L61+20
 872              	.LVL75:
 873 004e FFF7FEFF 		bl	calc_pot_value
 874              	.LVL76:
 875 0052 EBE7     		b	.L51
 876              	.LVL77:
 877              	.L60:
1123:Src/main.c    ****             //imu_elaborate_data(&gyro);
 878              		.loc 1 1123 0
 879 0054 1848     		ldr	r0, .L61+24
 880              	.LVL78:
 881 0056 FFF7FEFF 		bl	LSMD9S0_gyro_read
 882              	.LVL79:
 883 005a E7E7     		b	.L51
 884              	.L53:
1133:Src/main.c    ****         }
 885              		.loc 1 1133 0
 886 005c 0132     		adds	r2, r2, #1
 887 005e 124B     		ldr	r3, .L61+8
 888 0060 1A60     		str	r2, [r3]
 889 0062 D2E7     		b	.L49
 890              	.L57:
1138:Src/main.c    ****     {
1139:Src/main.c    ****         encoder_tim_interrupt(&enc);
 891              		.loc 1 1139 0
 892 0064 154C     		ldr	r4, .L61+28
 893              	.LVL80:
 894 0066 2046     		mov	r0, r4
 895 0068 FFF7FEFF 		bl	encoder_tim_interrupt
 896              	.LVL81:
1140:Src/main.c    ****         if (enc.interrupt_flag == 0){
ARM GAS  /tmp/ccRZrNT2.s 			page 38


 897              		.loc 1 1140 0
 898 006c A368     		ldr	r3, [r4, #8]
 899 006e 002B     		cmp	r3, #0
 900 0070 CED1     		bne	.L48
1141:Src/main.c    ****             sprintf(txt, "%d\t%d\r\n", (int)(pot_2.val_100), (int)(enc.delta_angle));
 901              		.loc 1 1141 0
 902 0072 D4E92601 		ldrd	r0, [r4, #152]
 903 0076 FFF7FEFF 		bl	__aeabi_d2iz
 904              	.LVL82:
 905 007a 114C     		ldr	r4, .L61+32
 906 007c 0346     		mov	r3, r0
 907 007e 0D4A     		ldr	r2, .L61+20
 908 0080 1268     		ldr	r2, [r2]
 909 0082 1049     		ldr	r1, .L61+36
 910 0084 2046     		mov	r0, r4
 911 0086 FFF7FEFF 		bl	sprintf
 912              	.LVL83:
1142:Src/main.c    ****             HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 913              		.loc 1 1142 0
 914 008a 2046     		mov	r0, r4
 915 008c FFF7FEFF 		bl	strlen
 916              	.LVL84:
 917 0090 0A23     		movs	r3, #10
 918 0092 82B2     		uxth	r2, r0
 919 0094 2146     		mov	r1, r4
 920 0096 0C48     		ldr	r0, .L61+40
 921 0098 FFF7FEFF 		bl	HAL_UART_Transmit
 922              	.LVL85:
1143:Src/main.c    ****         }
1144:Src/main.c    ****     }
1145:Src/main.c    **** }
 923              		.loc 1 1145 0
 924 009c B8E7     		b	.L48
 925              	.L62:
 926 009e 00BF     		.align	2
 927              	.L61:
 928 00a0 00000000 		.word	htim10
 929 00a4 00000000 		.word	htim7
 930 00a8 00000000 		.word	.LANCHOR3
 931 00ac 00000000 		.word	.LANCHOR2
 932 00b0 00000000 		.word	accel
 933 00b4 00000000 		.word	pot_2
 934 00b8 00000000 		.word	gyro
 935 00bc 00000000 		.word	enc
 936 00c0 00000000 		.word	txt
 937 00c4 00000000 		.word	.LC0
 938 00c8 00000000 		.word	huart2
 939              		.cfi_endproc
 940              	.LFE153:
 942              		.global	__aeabi_d2uiz
 943              		.global	__aeabi_ddiv
 944              		.global	__aeabi_i2d
 945              		.global	__aeabi_dadd
 946              		.section	.text.send_CAN_data,"ax",%progbits
 947              		.align	1
 948              		.global	send_CAN_data
 949              		.syntax unified
ARM GAS  /tmp/ccRZrNT2.s 			page 39


 950              		.thumb
 951              		.thumb_func
 952              		.fpu fpv4-sp-d16
 954              	send_CAN_data:
 955              	.LFB154:
1146:Src/main.c    **** 
1147:Src/main.c    **** int send_CAN_data(uint32_t millis)
1148:Src/main.c    **** {
 956              		.loc 1 1148 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 8
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 960              	.LVL86:
 961 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 962              	.LCFI11:
 963              		.cfi_def_cfa_offset 36
 964              		.cfi_offset 4, -36
 965              		.cfi_offset 5, -32
 966              		.cfi_offset 6, -28
 967              		.cfi_offset 7, -24
 968              		.cfi_offset 8, -20
 969              		.cfi_offset 9, -16
 970              		.cfi_offset 10, -12
 971              		.cfi_offset 11, -8
 972              		.cfi_offset 14, -4
 973 0004 83B0     		sub	sp, sp, #12
 974              	.LCFI12:
 975              		.cfi_def_cfa_offset 48
 976 0006 0446     		mov	r4, r0
 977              	.LVL87:
1149:Src/main.c    **** 
1150:Src/main.c    ****     int sent_flag = 0;
1151:Src/main.c    **** 
1152:Src/main.c    ****     //-------------------SEND Encoder-------------------//
1153:Src/main.c    ****     if (millis % 100 == 0)
 978              		.loc 1 1153 0
 979 0008 914B     		ldr	r3, .L76
 980 000a A3FB0023 		umull	r2, r3, r3, r0
 981 000e 5B09     		lsrs	r3, r3, #5
 982 0010 6422     		movs	r2, #100
 983 0012 02FB1303 		mls	r3, r2, r3, r0
 984 0016 002B     		cmp	r3, #0
 985 0018 33D0     		beq	.L71
1150:Src/main.c    **** 
 986              		.loc 1 1150 0
 987 001a 0020     		movs	r0, #0
 988              	.LVL88:
 989              	.L64:
1154:Src/main.c    ****     {
1155:Src/main.c    ****         uint16_t speed_Send = enc.average_speed;
1156:Src/main.c    **** 
1157:Src/main.c    ****         can.dataTx[0] = 0x06;
1158:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
1159:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
1160:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
1161:Src/main.c    ****         can.dataTx[4] = 0;
1162:Src/main.c    ****         can.dataTx[5] = 0;
ARM GAS  /tmp/ccRZrNT2.s 			page 40


1163:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
1164:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
1165:Src/main.c    ****         can.id = 0xD0;
1166:Src/main.c    ****         can.size = 8;
1167:Src/main.c    ****         CAN_Send(&can);
1168:Src/main.c    **** 
1169:Src/main.c    ****         sent_flag = 1;
1170:Src/main.c    **** /*
1171:Src/main.c    ****         sprintf(txt, "%d\t%d\r\n", (int)(accel.z*100), (int)(gyro.x*100));
1172:Src/main.c    ****         HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);*/
1173:Src/main.c    ****     }
1174:Src/main.c    **** 
1175:Src/main.c    ****     millis += 5;
 990              		.loc 1 1175 0
 991 001c 621D     		adds	r2, r4, #5
 992              	.LVL89:
1176:Src/main.c    **** 
1177:Src/main.c    ****     //-------------SEND KM & WHEEL ROTAIONS-------------//
1178:Src/main.c    ****     if (millis % 500 == 0)
 993              		.loc 1 1178 0
 994 001e 8D4B     		ldr	r3, .L76+4
 995 0020 A3FB0213 		umull	r1, r3, r3, r2
 996 0024 5B09     		lsrs	r3, r3, #5
 997 0026 4FF4FA71 		mov	r1, #500
 998 002a 01FB1323 		mls	r3, r1, r3, r2
 999 002e 002B     		cmp	r3, #0
 1000 0030 44D0     		beq	.L72
 1001              	.LVL90:
 1002              	.L65:
1179:Src/main.c    ****     {
1180:Src/main.c    **** 
1181:Src/main.c    ****         uint16_t Km = (enc.Km);
1182:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
1183:Src/main.c    **** 
1184:Src/main.c    ****         can.dataTx[0] = 0x08;
1185:Src/main.c    ****         can.dataTx[1] = Km >> 8;
1186:Src/main.c    ****         can.dataTx[2] = Km;
1187:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
1188:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
1189:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
1190:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
1191:Src/main.c    ****         can.dataTx[7] = 0;
1192:Src/main.c    ****         can.id = 0xD0;
1193:Src/main.c    ****         can.size = 8;
1194:Src/main.c    ****         CAN_Send(&can);
1195:Src/main.c    **** 
1196:Src/main.c    ****         sent_flag = 2;
1197:Src/main.c    ****     }
1198:Src/main.c    **** 
1199:Src/main.c    ****     millis += 5;
 1003              		.loc 1 1199 0
 1004 0032 04F10A02 		add	r2, r4, #10
 1005              	.LVL91:
1200:Src/main.c    **** 
1201:Src/main.c    ****     //--------------------SEND Accel--------------------//
1202:Src/main.c    ****     if (millis % 100 == 0)
 1006              		.loc 1 1202 0
ARM GAS  /tmp/ccRZrNT2.s 			page 41


 1007 0036 864B     		ldr	r3, .L76
 1008 0038 A3FB0213 		umull	r1, r3, r3, r2
 1009 003c 5B09     		lsrs	r3, r3, #5
 1010 003e 6421     		movs	r1, #100
 1011 0040 01FB1323 		mls	r3, r1, r3, r2
 1012 0044 002B     		cmp	r3, #0
 1013 0046 64D0     		beq	.L73
 1014              	.LVL92:
 1015              	.L66:
1203:Src/main.c    ****     {
1204:Src/main.c    **** 
1205:Src/main.c    ****         //removing negative values
1206:Src/main.c    ****         uint16_t val_a_x = accel.x + accel.scale * 1000;
1207:Src/main.c    ****         uint16_t val_a_y = accel.y + accel.scale * 1000;
1208:Src/main.c    ****         uint16_t val_a_z = accel.z + accel.scale * 1000;
1209:Src/main.c    **** 
1210:Src/main.c    ****         can.dataTx[0] = 0x03;
1211:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
1212:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
1213:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
1214:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
1215:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
1216:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
1217:Src/main.c    ****         can.dataTx[7] = accel.scale;
1218:Src/main.c    ****         can.id = 0xC0;
1219:Src/main.c    ****         can.size = 8;
1220:Src/main.c    ****         CAN_Send(&can);
1221:Src/main.c    **** 
1222:Src/main.c    ****         sent_flag = 3;
1223:Src/main.c    ****     }
1224:Src/main.c    **** 
1225:Src/main.c    ****     millis += 5;
 1016              		.loc 1 1225 0
 1017 0048 04F10F02 		add	r2, r4, #15
 1018              	.LVL93:
1226:Src/main.c    **** 
1227:Src/main.c    ****     //---------------------SEND Gyro---------------------//
1228:Src/main.c    ****     if (millis % 100 == 0)
 1019              		.loc 1 1228 0
 1020 004c 804B     		ldr	r3, .L76
 1021 004e A3FB0213 		umull	r1, r3, r3, r2
 1022 0052 5B09     		lsrs	r3, r3, #5
 1023 0054 6421     		movs	r1, #100
 1024 0056 01FB1323 		mls	r3, r1, r3, r2
 1025 005a 002B     		cmp	r3, #0
 1026 005c 00F09D80 		beq	.L74
 1027              	.LVL94:
 1028              	.L67:
1229:Src/main.c    ****     {
1230:Src/main.c    ****         uint16_t val_g_x = gyro.x + gyro.scale * 1000;
1231:Src/main.c    ****         uint16_t val_g_y = gyro.y + gyro.scale * 1000;
1232:Src/main.c    ****         uint16_t val_g_z = gyro.z + gyro.scale * 1000;
1233:Src/main.c    **** 
1234:Src/main.c    ****         can.dataTx[0] = 0x04;
1235:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
1236:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
1237:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
ARM GAS  /tmp/ccRZrNT2.s 			page 42


1238:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
1239:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
1240:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
1241:Src/main.c    ****         can.dataTx[7] = (gyro.scale / 10);
1242:Src/main.c    ****         can.id = 0xC0;
1243:Src/main.c    ****         can.size = 8;
1244:Src/main.c    ****         CAN_Send(&can);
1245:Src/main.c    **** 
1246:Src/main.c    ****         sent_flag = 4;
1247:Src/main.c    ****     }
1248:Src/main.c    **** 
1249:Src/main.c    ****     millis += 5;
 1029              		.loc 1 1249 0
 1030 0060 1434     		adds	r4, r4, #20
 1031              	.LVL95:
1250:Src/main.c    **** 
1251:Src/main.c    ****     //--------------------SEND Steer--------------------//
1252:Src/main.c    ****     if (millis % 100 == 0)
 1032              		.loc 1 1252 0
 1033 0062 7B4B     		ldr	r3, .L76
 1034 0064 A3FB0423 		umull	r2, r3, r3, r4
 1035 0068 5B09     		lsrs	r3, r3, #5
 1036 006a 6422     		movs	r2, #100
 1037 006c 02FB1343 		mls	r3, r2, r3, r4
 1038 0070 23B9     		cbnz	r3, .L63
1253:Src/main.c    ****     {
1254:Src/main.c    ****         if (calibration_flag == 0)
 1039              		.loc 1 1254 0
 1040 0072 794B     		ldr	r3, .L76+8
 1041 0074 1B68     		ldr	r3, [r3]
 1042 0076 002B     		cmp	r3, #0
 1043 0078 00F0D580 		beq	.L75
 1044              	.LVL96:
 1045              	.L63:
1255:Src/main.c    ****         {
1256:Src/main.c    ****             can.dataTx[0] = 2;
1257:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
1258:Src/main.c    ****             can.dataTx[2] = 0;
1259:Src/main.c    ****             can.dataTx[3] = 0;
1260:Src/main.c    ****             can.dataTx[4] = 0;
1261:Src/main.c    ****             can.dataTx[5] = 0;
1262:Src/main.c    ****             can.dataTx[6] = 0;
1263:Src/main.c    ****             can.dataTx[7] = 0;
1264:Src/main.c    ****             can.id = 0xC0;
1265:Src/main.c    ****             can.size = 8;
1266:Src/main.c    ****             CAN_Send(&can);
1267:Src/main.c    **** 
1268:Src/main.c    ****             sent_flag = 5;
1269:Src/main.c    ****         }
1270:Src/main.c    ****     }
1271:Src/main.c    **** 
1272:Src/main.c    ****     return sent_flag;
1273:Src/main.c    **** }
 1046              		.loc 1 1273 0
 1047 007c 03B0     		add	sp, sp, #12
 1048              	.LCFI13:
 1049              		.cfi_remember_state
ARM GAS  /tmp/ccRZrNT2.s 			page 43


 1050              		.cfi_def_cfa_offset 36
 1051              		@ sp needed
 1052 007e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1053              	.LVL97:
 1054              	.L71:
 1055              	.LCFI14:
 1056              		.cfi_restore_state
 1057              	.LBB10:
1155:Src/main.c    **** 
 1058              		.loc 1 1155 0
 1059 0082 764D     		ldr	r5, .L76+12
 1060 0084 D5E9F001 		ldrd	r0, [r5, #960]
 1061              	.LVL98:
 1062 0088 FFF7FEFF 		bl	__aeabi_d2uiz
 1063              	.LVL99:
 1064 008c 83B2     		uxth	r3, r0
 1065              	.LVL100:
1157:Src/main.c    ****         can.dataTx[1] = speed_Send / 256;
 1066              		.loc 1 1157 0
 1067 008e 7448     		ldr	r0, .L76+16
 1068 0090 0622     		movs	r2, #6
 1069 0092 0272     		strb	r2, [r0, #8]
1158:Src/main.c    ****         can.dataTx[2] = speed_Send % 256;
 1070              		.loc 1 1158 0
 1071 0094 1A0A     		lsrs	r2, r3, #8
 1072 0096 4272     		strb	r2, [r0, #9]
1159:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
 1073              		.loc 1 1159 0
 1074 0098 8372     		strb	r3, [r0, #10]
1160:Src/main.c    ****         can.dataTx[4] = 0;
 1075              		.loc 1 1160 0
 1076 009a AB6D     		ldr	r3, [r5, #88]
 1077              	.LVL101:
 1078 009c C372     		strb	r3, [r0, #11]
1161:Src/main.c    ****         can.dataTx[5] = 0;
 1079              		.loc 1 1161 0
 1080 009e 0023     		movs	r3, #0
 1081 00a0 0373     		strb	r3, [r0, #12]
1162:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
 1082              		.loc 1 1162 0
 1083 00a2 4373     		strb	r3, [r0, #13]
1163:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
 1084              		.loc 1 1163 0
 1085 00a4 6B68     		ldr	r3, [r5, #4]
 1086 00a6 8373     		strb	r3, [r0, #14]
1164:Src/main.c    ****         can.id = 0xD0;
 1087              		.loc 1 1164 0
 1088 00a8 AB6C     		ldr	r3, [r5, #72]
 1089 00aa C373     		strb	r3, [r0, #15]
1165:Src/main.c    ****         can.size = 8;
 1090              		.loc 1 1165 0
 1091 00ac D023     		movs	r3, #208
 1092 00ae 0360     		str	r3, [r0]
1166:Src/main.c    ****         CAN_Send(&can);
 1093              		.loc 1 1166 0
 1094 00b0 0823     		movs	r3, #8
 1095 00b2 4360     		str	r3, [r0, #4]
ARM GAS  /tmp/ccRZrNT2.s 			page 44


1167:Src/main.c    **** 
 1096              		.loc 1 1167 0
 1097 00b4 FFF7FEFF 		bl	CAN_Send
 1098              	.LVL102:
1169:Src/main.c    **** /*
 1099              		.loc 1 1169 0
 1100 00b8 0120     		movs	r0, #1
 1101 00ba AFE7     		b	.L64
 1102              	.LVL103:
 1103              	.L72:
 1104              	.LBE10:
 1105              	.LBB11:
1181:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
 1106              		.loc 1 1181 0
 1107 00bc 674E     		ldr	r6, .L76+12
 1108 00be D6ED157A 		vldr.32	s15, [r6, #84]
 1109 00c2 FCEEE77A 		vcvt.u32.f32	s15, s15
 1110 00c6 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1111 00ca BDF80430 		ldrh	r3, [sp, #4]
 1112              	.LVL104:
1182:Src/main.c    **** 
 1113              		.loc 1 1182 0
 1114 00ce 326D     		ldr	r2, [r6, #80]
 1115              	.LVL105:
1184:Src/main.c    ****         can.dataTx[1] = Km >> 8;
 1116              		.loc 1 1184 0
 1117 00d0 634D     		ldr	r5, .L76+16
 1118 00d2 0827     		movs	r7, #8
 1119 00d4 2F72     		strb	r7, [r5, #8]
1185:Src/main.c    ****         can.dataTx[2] = Km;
 1120              		.loc 1 1185 0
 1121 00d6 23FA07F1 		lsr	r1, r3, r7
 1122 00da 6972     		strb	r1, [r5, #9]
1186:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
 1123              		.loc 1 1186 0
 1124 00dc AB72     		strb	r3, [r5, #10]
1187:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
 1125              		.loc 1 1187 0
 1126 00de 4FF00008 		mov	r8, #0
 1127 00e2 85F80B80 		strb	r8, [r5, #11]
1188:Src/main.c    ****         can.dataTx[5] = (enc.angle0 / 10);
 1128              		.loc 1 1188 0
 1129 00e6 2A73     		strb	r2, [r5, #12]
1189:Src/main.c    ****         can.dataTx[6] = enc.clock_period;
 1130              		.loc 1 1189 0
 1131 00e8 0022     		movs	r2, #0
 1132              	.LVL106:
 1133 00ea 5E4B     		ldr	r3, .L76+20
 1134              	.LVL107:
 1135 00ec D6E91E01 		ldrd	r0, [r6, #120]
 1136              	.LVL108:
 1137 00f0 FFF7FEFF 		bl	__aeabi_ddiv
 1138              	.LVL109:
 1139 00f4 FFF7FEFF 		bl	__aeabi_d2uiz
 1140              	.LVL110:
 1141 00f8 6873     		strb	r0, [r5, #13]
1190:Src/main.c    ****         can.dataTx[7] = 0;
ARM GAS  /tmp/ccRZrNT2.s 			page 45


 1142              		.loc 1 1190 0
 1143 00fa F368     		ldr	r3, [r6, #12]
 1144 00fc AB73     		strb	r3, [r5, #14]
1191:Src/main.c    ****         can.id = 0xD0;
 1145              		.loc 1 1191 0
 1146 00fe 85F80F80 		strb	r8, [r5, #15]
1192:Src/main.c    ****         can.size = 8;
 1147              		.loc 1 1192 0
 1148 0102 D023     		movs	r3, #208
 1149 0104 2B60     		str	r3, [r5]
1193:Src/main.c    ****         CAN_Send(&can);
 1150              		.loc 1 1193 0
 1151 0106 6F60     		str	r7, [r5, #4]
1194:Src/main.c    **** 
 1152              		.loc 1 1194 0
 1153 0108 2846     		mov	r0, r5
 1154 010a FFF7FEFF 		bl	CAN_Send
 1155              	.LVL111:
1196:Src/main.c    ****     }
 1156              		.loc 1 1196 0
 1157 010e 0220     		movs	r0, #2
 1158 0110 8FE7     		b	.L65
 1159              	.LVL112:
 1160              	.L73:
 1161              	.LBE11:
 1162              	.LBB12:
1206:Src/main.c    ****         uint16_t val_a_y = accel.y + accel.scale * 1000;
 1163              		.loc 1 1206 0
 1164 0112 554D     		ldr	r5, .L76+24
 1165 0114 D5E900AB 		ldrd	r10, [r5]
 1166 0118 D5F81882 		ldr	r8, [r5, #536]
 1167 011c 4FF47A70 		mov	r0, #1000
 1168              	.LVL113:
 1169 0120 00FB08F0 		mul	r0, r0, r8
 1170 0124 FFF7FEFF 		bl	__aeabi_i2d
 1171              	.LVL114:
 1172 0128 0646     		mov	r6, r0
 1173 012a 0F46     		mov	r7, r1
 1174 012c 0246     		mov	r2, r0
 1175 012e 0B46     		mov	r3, r1
 1176 0130 5046     		mov	r0, r10
 1177 0132 5946     		mov	r1, fp
 1178 0134 FFF7FEFF 		bl	__aeabi_dadd
 1179              	.LVL115:
 1180 0138 FFF7FEFF 		bl	__aeabi_d2uiz
 1181              	.LVL116:
 1182 013c 1FFA80FA 		uxth	r10, r0
 1183              	.LVL117:
1207:Src/main.c    ****         uint16_t val_a_z = accel.z + accel.scale * 1000;
 1184              		.loc 1 1207 0
 1185 0140 D5E90223 		ldrd	r2, [r5, #8]
 1186 0144 3046     		mov	r0, r6
 1187 0146 3946     		mov	r1, r7
 1188 0148 FFF7FEFF 		bl	__aeabi_dadd
 1189              	.LVL118:
 1190 014c FFF7FEFF 		bl	__aeabi_d2uiz
 1191              	.LVL119:
ARM GAS  /tmp/ccRZrNT2.s 			page 46


 1192 0150 1FFA80F9 		uxth	r9, r0
 1193              	.LVL120:
1208:Src/main.c    **** 
 1194              		.loc 1 1208 0
 1195 0154 D5E90423 		ldrd	r2, [r5, #16]
 1196 0158 3046     		mov	r0, r6
 1197 015a 3946     		mov	r1, r7
 1198 015c FFF7FEFF 		bl	__aeabi_dadd
 1199              	.LVL121:
 1200 0160 FFF7FEFF 		bl	__aeabi_d2uiz
 1201              	.LVL122:
 1202 0164 83B2     		uxth	r3, r0
 1203              	.LVL123:
1210:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
 1204              		.loc 1 1210 0
 1205 0166 3E48     		ldr	r0, .L76+16
 1206 0168 0325     		movs	r5, #3
 1207 016a 0572     		strb	r5, [r0, #8]
1211:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
 1208              		.loc 1 1211 0
 1209 016c 4FEA1A22 		lsr	r2, r10, #8
 1210 0170 4272     		strb	r2, [r0, #9]
1212:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
 1211              		.loc 1 1212 0
 1212 0172 80F80AA0 		strb	r10, [r0, #10]
1213:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
 1213              		.loc 1 1213 0
 1214 0176 4FEA1922 		lsr	r2, r9, #8
 1215 017a C272     		strb	r2, [r0, #11]
1214:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
 1216              		.loc 1 1214 0
 1217 017c 80F80C90 		strb	r9, [r0, #12]
1215:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
 1218              		.loc 1 1215 0
 1219 0180 1A0A     		lsrs	r2, r3, #8
 1220 0182 4273     		strb	r2, [r0, #13]
1216:Src/main.c    ****         can.dataTx[7] = accel.scale;
 1221              		.loc 1 1216 0
 1222 0184 8373     		strb	r3, [r0, #14]
1217:Src/main.c    ****         can.id = 0xC0;
 1223              		.loc 1 1217 0
 1224 0186 80F80F80 		strb	r8, [r0, #15]
1218:Src/main.c    ****         can.size = 8;
 1225              		.loc 1 1218 0
 1226 018a C023     		movs	r3, #192
 1227              	.LVL124:
 1228 018c 0360     		str	r3, [r0]
1219:Src/main.c    ****         CAN_Send(&can);
 1229              		.loc 1 1219 0
 1230 018e 0823     		movs	r3, #8
 1231 0190 4360     		str	r3, [r0, #4]
1220:Src/main.c    **** 
 1232              		.loc 1 1220 0
 1233 0192 FFF7FEFF 		bl	CAN_Send
 1234              	.LVL125:
1222:Src/main.c    ****     }
 1235              		.loc 1 1222 0
ARM GAS  /tmp/ccRZrNT2.s 			page 47


 1236 0196 2846     		mov	r0, r5
 1237 0198 56E7     		b	.L66
 1238              	.LVL126:
 1239              	.L74:
 1240              	.LBE12:
 1241              	.LBB13:
1230:Src/main.c    ****         uint16_t val_g_y = gyro.y + gyro.scale * 1000;
 1242              		.loc 1 1230 0
 1243 019a 344E     		ldr	r6, .L76+28
 1244 019c D6E900AB 		ldrd	r10, [r6]
 1245 01a0 D6F81852 		ldr	r5, [r6, #536]
 1246 01a4 4FF47A70 		mov	r0, #1000
 1247              	.LVL127:
 1248 01a8 00FB05F0 		mul	r0, r0, r5
 1249 01ac FFF7FEFF 		bl	__aeabi_i2d
 1250              	.LVL128:
 1251 01b0 8046     		mov	r8, r0
 1252 01b2 8946     		mov	r9, r1
 1253 01b4 0246     		mov	r2, r0
 1254 01b6 0B46     		mov	r3, r1
 1255 01b8 5046     		mov	r0, r10
 1256 01ba 5946     		mov	r1, fp
 1257 01bc FFF7FEFF 		bl	__aeabi_dadd
 1258              	.LVL129:
 1259 01c0 FFF7FEFF 		bl	__aeabi_d2uiz
 1260              	.LVL130:
 1261 01c4 1FFA80FA 		uxth	r10, r0
 1262              	.LVL131:
1231:Src/main.c    ****         uint16_t val_g_z = gyro.z + gyro.scale * 1000;
 1263              		.loc 1 1231 0
 1264 01c8 D6E90223 		ldrd	r2, [r6, #8]
 1265 01cc 4046     		mov	r0, r8
 1266 01ce 4946     		mov	r1, r9
 1267 01d0 FFF7FEFF 		bl	__aeabi_dadd
 1268              	.LVL132:
 1269 01d4 FFF7FEFF 		bl	__aeabi_d2uiz
 1270              	.LVL133:
 1271 01d8 87B2     		uxth	r7, r0
 1272              	.LVL134:
1232:Src/main.c    **** 
 1273              		.loc 1 1232 0
 1274 01da D6E90423 		ldrd	r2, [r6, #16]
 1275 01de 4046     		mov	r0, r8
 1276 01e0 4946     		mov	r1, r9
 1277 01e2 FFF7FEFF 		bl	__aeabi_dadd
 1278              	.LVL135:
 1279 01e6 FFF7FEFF 		bl	__aeabi_d2uiz
 1280              	.LVL136:
 1281 01ea 83B2     		uxth	r3, r0
 1282              	.LVL137:
1234:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
 1283              		.loc 1 1234 0
 1284 01ec 1C48     		ldr	r0, .L76+16
 1285 01ee 0426     		movs	r6, #4
 1286 01f0 0672     		strb	r6, [r0, #8]
1235:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
 1287              		.loc 1 1235 0
ARM GAS  /tmp/ccRZrNT2.s 			page 48


 1288 01f2 4FEA1A22 		lsr	r2, r10, #8
 1289 01f6 4272     		strb	r2, [r0, #9]
1236:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
 1290              		.loc 1 1236 0
 1291 01f8 80F80AA0 		strb	r10, [r0, #10]
1237:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
 1292              		.loc 1 1237 0
 1293 01fc 3A0A     		lsrs	r2, r7, #8
 1294 01fe C272     		strb	r2, [r0, #11]
1238:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
 1295              		.loc 1 1238 0
 1296 0200 0773     		strb	r7, [r0, #12]
1239:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
 1297              		.loc 1 1239 0
 1298 0202 1A0A     		lsrs	r2, r3, #8
 1299 0204 4273     		strb	r2, [r0, #13]
1240:Src/main.c    ****         can.dataTx[7] = (gyro.scale / 10);
 1300              		.loc 1 1240 0
 1301 0206 8373     		strb	r3, [r0, #14]
1241:Src/main.c    ****         can.id = 0xC0;
 1302              		.loc 1 1241 0
 1303 0208 194B     		ldr	r3, .L76+32
 1304              	.LVL138:
 1305 020a 83FB0523 		smull	r2, r3, r3, r5
 1306 020e ED17     		asrs	r5, r5, #31
 1307 0210 C5EBA305 		rsb	r5, r5, r3, asr #2
 1308 0214 C573     		strb	r5, [r0, #15]
1242:Src/main.c    ****         can.size = 8;
 1309              		.loc 1 1242 0
 1310 0216 C023     		movs	r3, #192
 1311 0218 0360     		str	r3, [r0]
1243:Src/main.c    ****         CAN_Send(&can);
 1312              		.loc 1 1243 0
 1313 021a 0823     		movs	r3, #8
 1314 021c 4360     		str	r3, [r0, #4]
1244:Src/main.c    **** 
 1315              		.loc 1 1244 0
 1316 021e FFF7FEFF 		bl	CAN_Send
 1317              	.LVL139:
1246:Src/main.c    ****     }
 1318              		.loc 1 1246 0
 1319 0222 3046     		mov	r0, r6
 1320 0224 1CE7     		b	.L67
 1321              	.LVL140:
 1322              	.L75:
 1323              	.LBE13:
1256:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
 1324              		.loc 1 1256 0
 1325 0226 0E48     		ldr	r0, .L76+16
 1326              	.LVL141:
 1327 0228 0223     		movs	r3, #2
 1328 022a 0372     		strb	r3, [r0, #8]
1257:Src/main.c    ****             can.dataTx[2] = 0;
 1329              		.loc 1 1257 0
 1330 022c 114B     		ldr	r3, .L76+36
 1331 022e 1B68     		ldr	r3, [r3]
 1332 0230 4372     		strb	r3, [r0, #9]
ARM GAS  /tmp/ccRZrNT2.s 			page 49


1258:Src/main.c    ****             can.dataTx[3] = 0;
 1333              		.loc 1 1258 0
 1334 0232 0023     		movs	r3, #0
 1335 0234 8372     		strb	r3, [r0, #10]
1259:Src/main.c    ****             can.dataTx[4] = 0;
 1336              		.loc 1 1259 0
 1337 0236 C372     		strb	r3, [r0, #11]
1260:Src/main.c    ****             can.dataTx[5] = 0;
 1338              		.loc 1 1260 0
 1339 0238 0373     		strb	r3, [r0, #12]
1261:Src/main.c    ****             can.dataTx[6] = 0;
 1340              		.loc 1 1261 0
 1341 023a 4373     		strb	r3, [r0, #13]
1262:Src/main.c    ****             can.dataTx[7] = 0;
 1342              		.loc 1 1262 0
 1343 023c 8373     		strb	r3, [r0, #14]
1263:Src/main.c    ****             can.id = 0xC0;
 1344              		.loc 1 1263 0
 1345 023e C373     		strb	r3, [r0, #15]
1264:Src/main.c    ****             can.size = 8;
 1346              		.loc 1 1264 0
 1347 0240 C023     		movs	r3, #192
 1348 0242 0360     		str	r3, [r0]
1265:Src/main.c    ****             CAN_Send(&can);
 1349              		.loc 1 1265 0
 1350 0244 0823     		movs	r3, #8
 1351 0246 4360     		str	r3, [r0, #4]
1266:Src/main.c    **** 
 1352              		.loc 1 1266 0
 1353 0248 FFF7FEFF 		bl	CAN_Send
 1354              	.LVL142:
1268:Src/main.c    ****         }
 1355              		.loc 1 1268 0
 1356 024c 0520     		movs	r0, #5
1272:Src/main.c    **** }
 1357              		.loc 1 1272 0
 1358 024e 15E7     		b	.L63
 1359              	.L77:
 1360              		.align	2
 1361              	.L76:
 1362 0250 1F85EB51 		.word	1374389535
 1363 0254 D34D6210 		.word	274877907
 1364 0258 00000000 		.word	.LANCHOR1
 1365 025c 00000000 		.word	enc
 1366 0260 00000000 		.word	can
 1367 0264 00002440 		.word	1076101120
 1368 0268 00000000 		.word	accel
 1369 026c 00000000 		.word	gyro
 1370 0270 67666666 		.word	1717986919
 1371 0274 00000000 		.word	pot_2
 1372              		.cfi_endproc
 1373              	.LFE154:
 1375              		.section	.text.Error_Handler,"ax",%progbits
 1376              		.align	1
 1377              		.global	Error_Handler
 1378              		.syntax unified
 1379              		.thumb
ARM GAS  /tmp/ccRZrNT2.s 			page 50


 1380              		.thumb_func
 1381              		.fpu fpv4-sp-d16
 1383              	Error_Handler:
 1384              	.LFB155:
1274:Src/main.c    **** 
1275:Src/main.c    **** /* USER CODE END 4 */
1276:Src/main.c    **** 
1277:Src/main.c    **** /**
1278:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1279:Src/main.c    ****   * @retval None
1280:Src/main.c    ****   */
1281:Src/main.c    **** void Error_Handler(void)
1282:Src/main.c    **** {
 1385              		.loc 1 1282 0
 1386              		.cfi_startproc
 1387              		@ Volatile: function does not return.
 1388              		@ args = 0, pretend = 0, frame = 0
 1389              		@ frame_needed = 0, uses_anonymous_args = 0
 1390 0000 08B5     		push	{r3, lr}
 1391              	.LCFI15:
 1392              		.cfi_def_cfa_offset 8
 1393              		.cfi_offset 3, -8
 1394              		.cfi_offset 14, -4
 1395              	.L79:
1283:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1284:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1285:Src/main.c    ****     while (1)
1286:Src/main.c    ****     {
1287:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 1396              		.loc 1 1287 0 discriminator 1
 1397 0002 074C     		ldr	r4, .L81
 1398 0004 0A23     		movs	r3, #10
 1399 0006 0F22     		movs	r2, #15
 1400 0008 0649     		ldr	r1, .L81+4
 1401 000a 2046     		mov	r0, r4
 1402 000c FFF7FEFF 		bl	HAL_UART_Transmit
 1403              	.LVL143:
1288:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t *)file, strlen(file), 10);
1289:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 1404              		.loc 1 1289 0 discriminator 1
 1405 0010 0A23     		movs	r3, #10
 1406 0012 0222     		movs	r2, #2
 1407 0014 0449     		ldr	r1, .L81+8
 1408 0016 2046     		mov	r0, r4
 1409 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 1410              	.LVL144:
 1411 001c F1E7     		b	.L79
 1412              	.L82:
 1413 001e 00BF     		.align	2
 1414              	.L81:
 1415 0020 00000000 		.word	huart2
 1416 0024 00000000 		.word	.LC1
 1417 0028 10000000 		.word	.LC2
 1418              		.cfi_endproc
 1419              	.LFE155:
 1421              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1422              		.align	1
ARM GAS  /tmp/ccRZrNT2.s 			page 51


 1423              		.syntax unified
 1424              		.thumb
 1425              		.thumb_func
 1426              		.fpu fpv4-sp-d16
 1428              	MX_USART2_UART_Init:
 1429              	.LFB147:
 896:Src/main.c    **** 
 1430              		.loc 1 896 0
 1431              		.cfi_startproc
 1432              		@ args = 0, pretend = 0, frame = 0
 1433              		@ frame_needed = 0, uses_anonymous_args = 0
 1434 0000 08B5     		push	{r3, lr}
 1435              	.LCFI16:
 1436              		.cfi_def_cfa_offset 8
 1437              		.cfi_offset 3, -8
 1438              		.cfi_offset 14, -4
 905:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 1439              		.loc 1 905 0
 1440 0002 0948     		ldr	r0, .L87
 1441 0004 094B     		ldr	r3, .L87+4
 1442 0006 0360     		str	r3, [r0]
 906:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1443              		.loc 1 906 0
 1444 0008 094B     		ldr	r3, .L87+8
 1445 000a 4360     		str	r3, [r0, #4]
 907:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 1446              		.loc 1 907 0
 1447 000c 0023     		movs	r3, #0
 1448 000e 8360     		str	r3, [r0, #8]
 908:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 1449              		.loc 1 908 0
 1450 0010 C360     		str	r3, [r0, #12]
 909:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 1451              		.loc 1 909 0
 1452 0012 0361     		str	r3, [r0, #16]
 910:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1453              		.loc 1 910 0
 1454 0014 0C22     		movs	r2, #12
 1455 0016 4261     		str	r2, [r0, #20]
 911:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1456              		.loc 1 911 0
 1457 0018 8361     		str	r3, [r0, #24]
 912:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 1458              		.loc 1 912 0
 1459 001a C361     		str	r3, [r0, #28]
 913:Src/main.c    ****     {
 1460              		.loc 1 913 0
 1461 001c FFF7FEFF 		bl	HAL_UART_Init
 1462              	.LVL145:
 1463 0020 00B9     		cbnz	r0, .L86
 1464 0022 08BD     		pop	{r3, pc}
 1465              	.L86:
 915:Src/main.c    ****     }
 1466              		.loc 1 915 0
 1467 0024 FFF7FEFF 		bl	Error_Handler
 1468              	.LVL146:
 1469              	.L88:
ARM GAS  /tmp/ccRZrNT2.s 			page 52


 1470              		.align	2
 1471              	.L87:
 1472 0028 00000000 		.word	huart2
 1473 002c 00440040 		.word	1073759232
 1474 0030 10552200 		.word	2250000
 1475              		.cfi_endproc
 1476              	.LFE147:
 1478              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1479              		.align	1
 1480              		.syntax unified
 1481              		.thumb
 1482              		.thumb_func
 1483              		.fpu fpv4-sp-d16
 1485              	MX_CAN1_Init:
 1486              	.LFB136:
 474:Src/main.c    **** 
 1487              		.loc 1 474 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 0
 1490              		@ frame_needed = 0, uses_anonymous_args = 0
 1491 0000 08B5     		push	{r3, lr}
 1492              	.LCFI17:
 1493              		.cfi_def_cfa_offset 8
 1494              		.cfi_offset 3, -8
 1495              		.cfi_offset 14, -4
 483:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 1496              		.loc 1 483 0
 1497 0002 0D48     		ldr	r0, .L93
 1498 0004 0D4B     		ldr	r3, .L93+4
 1499 0006 0360     		str	r3, [r0]
 484:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 1500              		.loc 1 484 0
 1501 0008 0223     		movs	r3, #2
 1502 000a 4360     		str	r3, [r0, #4]
 485:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1503              		.loc 1 485 0
 1504 000c 0023     		movs	r3, #0
 1505 000e 8360     		str	r3, [r0, #8]
 486:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 1506              		.loc 1 486 0
 1507 0010 C360     		str	r3, [r0, #12]
 487:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 1508              		.loc 1 487 0
 1509 0012 4FF43022 		mov	r2, #720896
 1510 0016 0261     		str	r2, [r0, #16]
 488:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 1511              		.loc 1 488 0
 1512 0018 4FF48002 		mov	r2, #4194304
 1513 001c 4261     		str	r2, [r0, #20]
 489:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 1514              		.loc 1 489 0
 1515 001e 0376     		strb	r3, [r0, #24]
 490:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 1516              		.loc 1 490 0
 1517 0020 4376     		strb	r3, [r0, #25]
 491:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 1518              		.loc 1 491 0
ARM GAS  /tmp/ccRZrNT2.s 			page 53


 1519 0022 0122     		movs	r2, #1
 1520 0024 8276     		strb	r2, [r0, #26]
 492:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 1521              		.loc 1 492 0
 1522 0026 C376     		strb	r3, [r0, #27]
 493:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 1523              		.loc 1 493 0
 1524 0028 0377     		strb	r3, [r0, #28]
 494:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1525              		.loc 1 494 0
 1526 002a 4377     		strb	r3, [r0, #29]
 495:Src/main.c    ****     {
 1527              		.loc 1 495 0
 1528 002c FFF7FEFF 		bl	HAL_CAN_Init
 1529              	.LVL147:
 1530 0030 00B9     		cbnz	r0, .L92
 1531 0032 08BD     		pop	{r3, pc}
 1532              	.L92:
 497:Src/main.c    ****     }
 1533              		.loc 1 497 0
 1534 0034 FFF7FEFF 		bl	Error_Handler
 1535              	.LVL148:
 1536              	.L94:
 1537              		.align	2
 1538              	.L93:
 1539 0038 00000000 		.word	hcan1
 1540 003c 00640040 		.word	1073767424
 1541              		.cfi_endproc
 1542              	.LFE136:
 1544              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1545              		.align	1
 1546              		.syntax unified
 1547              		.thumb
 1548              		.thumb_func
 1549              		.fpu fpv4-sp-d16
 1551              	MX_SPI1_Init:
 1552              	.LFB137:
 510:Src/main.c    **** 
 1553              		.loc 1 510 0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 0
 1556              		@ frame_needed = 0, uses_anonymous_args = 0
 1557 0000 08B5     		push	{r3, lr}
 1558              	.LCFI18:
 1559              		.cfi_def_cfa_offset 8
 1560              		.cfi_offset 3, -8
 1561              		.cfi_offset 14, -4
 520:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 1562              		.loc 1 520 0
 1563 0002 0D48     		ldr	r0, .L99
 1564 0004 0D4B     		ldr	r3, .L99+4
 1565 0006 0360     		str	r3, [r0]
 521:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1566              		.loc 1 521 0
 1567 0008 4FF48273 		mov	r3, #260
 1568 000c 4360     		str	r3, [r0, #4]
 522:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
ARM GAS  /tmp/ccRZrNT2.s 			page 54


 1569              		.loc 1 522 0
 1570 000e 0023     		movs	r3, #0
 1571 0010 8360     		str	r3, [r0, #8]
 523:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1572              		.loc 1 523 0
 1573 0012 C360     		str	r3, [r0, #12]
 524:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1574              		.loc 1 524 0
 1575 0014 0361     		str	r3, [r0, #16]
 525:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 1576              		.loc 1 525 0
 1577 0016 4361     		str	r3, [r0, #20]
 526:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1578              		.loc 1 526 0
 1579 0018 4FF40072 		mov	r2, #512
 1580 001c 8261     		str	r2, [r0, #24]
 527:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1581              		.loc 1 527 0
 1582 001e C361     		str	r3, [r0, #28]
 528:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1583              		.loc 1 528 0
 1584 0020 0362     		str	r3, [r0, #32]
 529:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1585              		.loc 1 529 0
 1586 0022 4362     		str	r3, [r0, #36]
 530:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 1587              		.loc 1 530 0
 1588 0024 8362     		str	r3, [r0, #40]
 531:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1589              		.loc 1 531 0
 1590 0026 0A23     		movs	r3, #10
 1591 0028 C362     		str	r3, [r0, #44]
 532:Src/main.c    ****     {
 1592              		.loc 1 532 0
 1593 002a FFF7FEFF 		bl	HAL_SPI_Init
 1594              	.LVL149:
 1595 002e 00B9     		cbnz	r0, .L98
 1596 0030 08BD     		pop	{r3, pc}
 1597              	.L98:
 534:Src/main.c    ****     }
 1598              		.loc 1 534 0
 1599 0032 FFF7FEFF 		bl	Error_Handler
 1600              	.LVL150:
 1601              	.L100:
 1602 0036 00BF     		.align	2
 1603              	.L99:
 1604 0038 00000000 		.word	hspi1
 1605 003c 00300140 		.word	1073819648
 1606              		.cfi_endproc
 1607              	.LFE137:
 1609              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1610              		.align	1
 1611              		.syntax unified
 1612              		.thumb
 1613              		.thumb_func
 1614              		.fpu fpv4-sp-d16
 1616              	MX_ADC1_Init:
ARM GAS  /tmp/ccRZrNT2.s 			page 55


 1617              	.LFB135:
 425:Src/main.c    **** 
 1618              		.loc 1 425 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 16
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 1622 0000 00B5     		push	{lr}
 1623              	.LCFI19:
 1624              		.cfi_def_cfa_offset 4
 1625              		.cfi_offset 14, -4
 1626 0002 85B0     		sub	sp, sp, #20
 1627              	.LCFI20:
 1628              		.cfi_def_cfa_offset 24
 431:Src/main.c    **** 
 1629              		.loc 1 431 0
 1630 0004 0023     		movs	r3, #0
 1631 0006 0093     		str	r3, [sp]
 1632 0008 0193     		str	r3, [sp, #4]
 1633 000a 0293     		str	r3, [sp, #8]
 1634 000c 0393     		str	r3, [sp, #12]
 438:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1635              		.loc 1 438 0
 1636 000e 1348     		ldr	r0, .L107
 1637 0010 134A     		ldr	r2, .L107+4
 1638 0012 0260     		str	r2, [r0]
 439:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1639              		.loc 1 439 0
 1640 0014 4360     		str	r3, [r0, #4]
 440:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 1641              		.loc 1 440 0
 1642 0016 8360     		str	r3, [r0, #8]
 441:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 1643              		.loc 1 441 0
 1644 0018 0122     		movs	r2, #1
 1645 001a 0261     		str	r2, [r0, #16]
 442:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 1646              		.loc 1 442 0
 1647 001c 0276     		strb	r2, [r0, #24]
 443:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1648              		.loc 1 443 0
 1649 001e 80F82030 		strb	r3, [r0, #32]
 444:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1650              		.loc 1 444 0
 1651 0022 C362     		str	r3, [r0, #44]
 445:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1652              		.loc 1 445 0
 1653 0024 0F49     		ldr	r1, .L107+8
 1654 0026 8162     		str	r1, [r0, #40]
 446:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 1655              		.loc 1 446 0
 1656 0028 C360     		str	r3, [r0, #12]
 447:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 1657              		.loc 1 447 0
 1658 002a C261     		str	r2, [r0, #28]
 448:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1659              		.loc 1 448 0
 1660 002c 80F83020 		strb	r2, [r0, #48]
ARM GAS  /tmp/ccRZrNT2.s 			page 56


 449:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1661              		.loc 1 449 0
 1662 0030 4261     		str	r2, [r0, #20]
 450:Src/main.c    ****     {
 1663              		.loc 1 450 0
 1664 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1665              	.LVL151:
 1666 0036 68B9     		cbnz	r0, .L105
 456:Src/main.c    ****     sConfig.Rank = 1;
 1667              		.loc 1 456 0
 1668 0038 0823     		movs	r3, #8
 1669 003a 0093     		str	r3, [sp]
 457:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1670              		.loc 1 457 0
 1671 003c 0123     		movs	r3, #1
 1672 003e 0193     		str	r3, [sp, #4]
 458:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1673              		.loc 1 458 0
 1674 0040 0023     		movs	r3, #0
 1675 0042 0293     		str	r3, [sp, #8]
 459:Src/main.c    ****     {
 1676              		.loc 1 459 0
 1677 0044 6946     		mov	r1, sp
 1678 0046 0548     		ldr	r0, .L107
 1679 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1680              	.LVL152:
 1681 004c 20B9     		cbnz	r0, .L106
 466:Src/main.c    **** 
 1682              		.loc 1 466 0
 1683 004e 05B0     		add	sp, sp, #20
 1684              	.LCFI21:
 1685              		.cfi_remember_state
 1686              		.cfi_def_cfa_offset 4
 1687              		@ sp needed
 1688 0050 5DF804FB 		ldr	pc, [sp], #4
 1689              	.L105:
 1690              	.LCFI22:
 1691              		.cfi_restore_state
 452:Src/main.c    ****     }
 1692              		.loc 1 452 0
 1693 0054 FFF7FEFF 		bl	Error_Handler
 1694              	.LVL153:
 1695              	.L106:
 461:Src/main.c    ****     }
 1696              		.loc 1 461 0
 1697 0058 FFF7FEFF 		bl	Error_Handler
 1698              	.LVL154:
 1699              	.L108:
 1700              		.align	2
 1701              	.L107:
 1702 005c 00000000 		.word	hadc1
 1703 0060 00200140 		.word	1073815552
 1704 0064 0100000F 		.word	251658241
 1705              		.cfi_endproc
 1706              	.LFE135:
 1708              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1709              		.align	1
ARM GAS  /tmp/ccRZrNT2.s 			page 57


 1710              		.syntax unified
 1711              		.thumb
 1712              		.thumb_func
 1713              		.fpu fpv4-sp-d16
 1715              	MX_USART1_UART_Init:
 1716              	.LFB146:
 864:Src/main.c    **** 
 1717              		.loc 1 864 0
 1718              		.cfi_startproc
 1719              		@ args = 0, pretend = 0, frame = 0
 1720              		@ frame_needed = 0, uses_anonymous_args = 0
 1721 0000 08B5     		push	{r3, lr}
 1722              	.LCFI23:
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 3, -8
 1725              		.cfi_offset 14, -4
 873:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 1726              		.loc 1 873 0
 1727 0002 0A48     		ldr	r0, .L113
 1728 0004 0A4B     		ldr	r3, .L113+4
 1729 0006 0360     		str	r3, [r0]
 874:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1730              		.loc 1 874 0
 1731 0008 4FF4E133 		mov	r3, #115200
 1732 000c 4360     		str	r3, [r0, #4]
 875:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 1733              		.loc 1 875 0
 1734 000e 0023     		movs	r3, #0
 1735 0010 8360     		str	r3, [r0, #8]
 876:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 1736              		.loc 1 876 0
 1737 0012 C360     		str	r3, [r0, #12]
 877:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 1738              		.loc 1 877 0
 1739 0014 0361     		str	r3, [r0, #16]
 878:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1740              		.loc 1 878 0
 1741 0016 0C22     		movs	r2, #12
 1742 0018 4261     		str	r2, [r0, #20]
 879:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1743              		.loc 1 879 0
 1744 001a 8361     		str	r3, [r0, #24]
 880:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 1745              		.loc 1 880 0
 1746 001c C361     		str	r3, [r0, #28]
 881:Src/main.c    ****     {
 1747              		.loc 1 881 0
 1748 001e FFF7FEFF 		bl	HAL_UART_Init
 1749              	.LVL155:
 1750 0022 00B9     		cbnz	r0, .L112
 1751 0024 08BD     		pop	{r3, pc}
 1752              	.L112:
 883:Src/main.c    ****     }
 1753              		.loc 1 883 0
 1754 0026 FFF7FEFF 		bl	Error_Handler
 1755              	.LVL156:
 1756              	.L114:
ARM GAS  /tmp/ccRZrNT2.s 			page 58


 1757 002a 00BF     		.align	2
 1758              	.L113:
 1759 002c 00000000 		.word	huart1
 1760 0030 00100140 		.word	1073811456
 1761              		.cfi_endproc
 1762              	.LFE146:
 1764              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1765              		.align	1
 1766              		.syntax unified
 1767              		.thumb
 1768              		.thumb_func
 1769              		.fpu fpv4-sp-d16
 1771              	MX_TIM2_Init:
 1772              	.LFB138:
 547:Src/main.c    **** 
 1773              		.loc 1 547 0
 1774              		.cfi_startproc
 1775              		@ args = 0, pretend = 0, frame = 48
 1776              		@ frame_needed = 0, uses_anonymous_args = 0
 1777 0000 00B5     		push	{lr}
 1778              	.LCFI24:
 1779              		.cfi_def_cfa_offset 4
 1780              		.cfi_offset 14, -4
 1781 0002 8DB0     		sub	sp, sp, #52
 1782              	.LCFI25:
 1783              		.cfi_def_cfa_offset 56
 553:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 1784              		.loc 1 553 0
 1785 0004 0023     		movs	r3, #0
 1786 0006 0893     		str	r3, [sp, #32]
 1787 0008 0993     		str	r3, [sp, #36]
 1788 000a 0A93     		str	r3, [sp, #40]
 1789 000c 0B93     		str	r3, [sp, #44]
 554:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1790              		.loc 1 554 0
 1791 000e 0393     		str	r3, [sp, #12]
 1792 0010 0493     		str	r3, [sp, #16]
 1793 0012 0593     		str	r3, [sp, #20]
 1794 0014 0693     		str	r3, [sp, #24]
 1795 0016 0793     		str	r3, [sp, #28]
 555:Src/main.c    **** 
 1796              		.loc 1 555 0
 1797 0018 0193     		str	r3, [sp, #4]
 1798 001a 0293     		str	r3, [sp, #8]
 560:Src/main.c    ****     htim2.Init.Prescaler = 36;
 1799              		.loc 1 560 0
 1800 001c 1948     		ldr	r0, .L125
 1801 001e 4FF08042 		mov	r2, #1073741824
 1802 0022 0260     		str	r2, [r0]
 561:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1803              		.loc 1 561 0
 1804 0024 2422     		movs	r2, #36
 1805 0026 4260     		str	r2, [r0, #4]
 562:Src/main.c    ****     htim2.Init.Period = 1000;
 1806              		.loc 1 562 0
 1807 0028 8360     		str	r3, [r0, #8]
 563:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  /tmp/ccRZrNT2.s 			page 59


 1808              		.loc 1 563 0
 1809 002a 4FF47A72 		mov	r2, #1000
 1810 002e C260     		str	r2, [r0, #12]
 564:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1811              		.loc 1 564 0
 1812 0030 0361     		str	r3, [r0, #16]
 565:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1813              		.loc 1 565 0
 1814 0032 8361     		str	r3, [r0, #24]
 566:Src/main.c    ****     {
 1815              		.loc 1 566 0
 1816 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1817              	.LVL157:
 1818 0038 D8B9     		cbnz	r0, .L121
 570:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1819              		.loc 1 570 0
 1820 003a 0CA9     		add	r1, sp, #48
 1821 003c 4FF48053 		mov	r3, #4096
 1822 0040 41F8103D 		str	r3, [r1, #-16]!
 571:Src/main.c    ****     {
 1823              		.loc 1 571 0
 1824 0044 0F48     		ldr	r0, .L125
 1825 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1826              	.LVL158:
 1827 004a A0B9     		cbnz	r0, .L122
 575:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 1828              		.loc 1 575 0
 1829 004c 0023     		movs	r3, #0
 1830 004e 0393     		str	r3, [sp, #12]
 576:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 1831              		.loc 1 576 0
 1832 0050 0493     		str	r3, [sp, #16]
 577:Src/main.c    ****     {
 1833              		.loc 1 577 0
 1834 0052 03A9     		add	r1, sp, #12
 1835 0054 0B48     		ldr	r0, .L125
 1836 0056 FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 1837              	.LVL159:
 1838 005a 70B9     		cbnz	r0, .L123
 581:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1839              		.loc 1 581 0
 1840 005c 0023     		movs	r3, #0
 1841 005e 0193     		str	r3, [sp, #4]
 582:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1842              		.loc 1 582 0
 1843 0060 0293     		str	r3, [sp, #8]
 583:Src/main.c    ****     {
 1844              		.loc 1 583 0
 1845 0062 01A9     		add	r1, sp, #4
 1846 0064 0748     		ldr	r0, .L125
 1847 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1848              	.LVL160:
 1849 006a 40B9     		cbnz	r0, .L124
 590:Src/main.c    **** 
 1850              		.loc 1 590 0
 1851 006c 0DB0     		add	sp, sp, #52
 1852              	.LCFI26:
ARM GAS  /tmp/ccRZrNT2.s 			page 60


 1853              		.cfi_remember_state
 1854              		.cfi_def_cfa_offset 4
 1855              		@ sp needed
 1856 006e 5DF804FB 		ldr	pc, [sp], #4
 1857              	.L121:
 1858              	.LCFI27:
 1859              		.cfi_restore_state
 568:Src/main.c    ****     }
 1860              		.loc 1 568 0
 1861 0072 FFF7FEFF 		bl	Error_Handler
 1862              	.LVL161:
 1863              	.L122:
 573:Src/main.c    ****     }
 1864              		.loc 1 573 0
 1865 0076 FFF7FEFF 		bl	Error_Handler
 1866              	.LVL162:
 1867              	.L123:
 579:Src/main.c    ****     }
 1868              		.loc 1 579 0
 1869 007a FFF7FEFF 		bl	Error_Handler
 1870              	.LVL163:
 1871              	.L124:
 585:Src/main.c    ****     }
 1872              		.loc 1 585 0
 1873 007e FFF7FEFF 		bl	Error_Handler
 1874              	.LVL164:
 1875              	.L126:
 1876 0082 00BF     		.align	2
 1877              	.L125:
 1878 0084 00000000 		.word	htim2
 1879              		.cfi_endproc
 1880              	.LFE138:
 1882              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1883              		.align	1
 1884              		.syntax unified
 1885              		.thumb
 1886              		.thumb_func
 1887              		.fpu fpv4-sp-d16
 1889              	MX_TIM3_Init:
 1890              	.LFB139:
 598:Src/main.c    **** 
 1891              		.loc 1 598 0
 1892              		.cfi_startproc
 1893              		@ args = 0, pretend = 0, frame = 24
 1894              		@ frame_needed = 0, uses_anonymous_args = 0
 1895 0000 00B5     		push	{lr}
 1896              	.LCFI28:
 1897              		.cfi_def_cfa_offset 4
 1898              		.cfi_offset 14, -4
 1899 0002 87B0     		sub	sp, sp, #28
 1900              	.LCFI29:
 1901              		.cfi_def_cfa_offset 32
 604:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1902              		.loc 1 604 0
 1903 0004 0023     		movs	r3, #0
 1904 0006 0293     		str	r3, [sp, #8]
 1905 0008 0393     		str	r3, [sp, #12]
ARM GAS  /tmp/ccRZrNT2.s 			page 61


 1906 000a 0493     		str	r3, [sp, #16]
 1907 000c 0593     		str	r3, [sp, #20]
 605:Src/main.c    **** 
 1908              		.loc 1 605 0
 1909 000e 0093     		str	r3, [sp]
 1910 0010 0193     		str	r3, [sp, #4]
 610:Src/main.c    ****     htim3.Init.Prescaler = 18;
 1911              		.loc 1 610 0
 1912 0012 1448     		ldr	r0, .L135
 1913 0014 144A     		ldr	r2, .L135+4
 1914 0016 0260     		str	r2, [r0]
 611:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1915              		.loc 1 611 0
 1916 0018 1222     		movs	r2, #18
 1917 001a 4260     		str	r2, [r0, #4]
 612:Src/main.c    ****     htim3.Init.Period = 65500;
 1918              		.loc 1 612 0
 1919 001c 8360     		str	r3, [r0, #8]
 613:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1920              		.loc 1 613 0
 1921 001e 4FF6DC72 		movw	r2, #65500
 1922 0022 C260     		str	r2, [r0, #12]
 614:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1923              		.loc 1 614 0
 1924 0024 0361     		str	r3, [r0, #16]
 615:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1925              		.loc 1 615 0
 1926 0026 8361     		str	r3, [r0, #24]
 616:Src/main.c    ****     {
 1927              		.loc 1 616 0
 1928 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1929              	.LVL165:
 1930 002c 98B9     		cbnz	r0, .L132
 620:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1931              		.loc 1 620 0
 1932 002e 06A9     		add	r1, sp, #24
 1933 0030 4FF48053 		mov	r3, #4096
 1934 0034 41F8103D 		str	r3, [r1, #-16]!
 621:Src/main.c    ****     {
 1935              		.loc 1 621 0
 1936 0038 0A48     		ldr	r0, .L135
 1937 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1938              	.LVL166:
 1939 003e 60B9     		cbnz	r0, .L133
 625:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1940              		.loc 1 625 0
 1941 0040 0023     		movs	r3, #0
 1942 0042 0093     		str	r3, [sp]
 626:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1943              		.loc 1 626 0
 1944 0044 0193     		str	r3, [sp, #4]
 627:Src/main.c    ****     {
 1945              		.loc 1 627 0
 1946 0046 6946     		mov	r1, sp
 1947 0048 0648     		ldr	r0, .L135
 1948 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1949              	.LVL167:
ARM GAS  /tmp/ccRZrNT2.s 			page 62


 1950 004e 30B9     		cbnz	r0, .L134
 634:Src/main.c    **** 
 1951              		.loc 1 634 0
 1952 0050 07B0     		add	sp, sp, #28
 1953              	.LCFI30:
 1954              		.cfi_remember_state
 1955              		.cfi_def_cfa_offset 4
 1956              		@ sp needed
 1957 0052 5DF804FB 		ldr	pc, [sp], #4
 1958              	.L132:
 1959              	.LCFI31:
 1960              		.cfi_restore_state
 618:Src/main.c    ****     }
 1961              		.loc 1 618 0
 1962 0056 FFF7FEFF 		bl	Error_Handler
 1963              	.LVL168:
 1964              	.L133:
 623:Src/main.c    ****     }
 1965              		.loc 1 623 0
 1966 005a FFF7FEFF 		bl	Error_Handler
 1967              	.LVL169:
 1968              	.L134:
 629:Src/main.c    ****     }
 1969              		.loc 1 629 0
 1970 005e FFF7FEFF 		bl	Error_Handler
 1971              	.LVL170:
 1972              	.L136:
 1973 0062 00BF     		.align	2
 1974              	.L135:
 1975 0064 00000000 		.word	htim3
 1976 0068 00040040 		.word	1073742848
 1977              		.cfi_endproc
 1978              	.LFE139:
 1980              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1981              		.align	1
 1982              		.syntax unified
 1983              		.thumb
 1984              		.thumb_func
 1985              		.fpu fpv4-sp-d16
 1987              	MX_TIM4_Init:
 1988              	.LFB140:
 642:Src/main.c    **** 
 1989              		.loc 1 642 0
 1990              		.cfi_startproc
 1991              		@ args = 0, pretend = 0, frame = 24
 1992              		@ frame_needed = 0, uses_anonymous_args = 0
 1993 0000 00B5     		push	{lr}
 1994              	.LCFI32:
 1995              		.cfi_def_cfa_offset 4
 1996              		.cfi_offset 14, -4
 1997 0002 87B0     		sub	sp, sp, #28
 1998              	.LCFI33:
 1999              		.cfi_def_cfa_offset 32
 648:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2000              		.loc 1 648 0
 2001 0004 0023     		movs	r3, #0
 2002 0006 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccRZrNT2.s 			page 63


 2003 0008 0393     		str	r3, [sp, #12]
 2004 000a 0493     		str	r3, [sp, #16]
 2005 000c 0593     		str	r3, [sp, #20]
 649:Src/main.c    **** 
 2006              		.loc 1 649 0
 2007 000e 0093     		str	r3, [sp]
 2008 0010 0193     		str	r3, [sp, #4]
 654:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 2009              		.loc 1 654 0
 2010 0012 1448     		ldr	r0, .L145
 2011 0014 144A     		ldr	r2, .L145+4
 2012 0016 0260     		str	r2, [r0]
 655:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 2013              		.loc 1 655 0
 2014 0018 4FF46162 		mov	r2, #3600
 2015 001c 4260     		str	r2, [r0, #4]
 656:Src/main.c    ****     htim4.Init.Period = 2000;
 2016              		.loc 1 656 0
 2017 001e 8360     		str	r3, [r0, #8]
 657:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2018              		.loc 1 657 0
 2019 0020 4FF4FA62 		mov	r2, #2000
 2020 0024 C260     		str	r2, [r0, #12]
 658:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2021              		.loc 1 658 0
 2022 0026 0361     		str	r3, [r0, #16]
 659:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 2023              		.loc 1 659 0
 2024 0028 8361     		str	r3, [r0, #24]
 660:Src/main.c    ****     {
 2025              		.loc 1 660 0
 2026 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2027              	.LVL171:
 2028 002e 98B9     		cbnz	r0, .L142
 664:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2029              		.loc 1 664 0
 2030 0030 06A9     		add	r1, sp, #24
 2031 0032 4FF48053 		mov	r3, #4096
 2032 0036 41F8103D 		str	r3, [r1, #-16]!
 665:Src/main.c    ****     {
 2033              		.loc 1 665 0
 2034 003a 0A48     		ldr	r0, .L145
 2035 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2036              	.LVL172:
 2037 0040 60B9     		cbnz	r0, .L143
 669:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2038              		.loc 1 669 0
 2039 0042 0023     		movs	r3, #0
 2040 0044 0093     		str	r3, [sp]
 670:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2041              		.loc 1 670 0
 2042 0046 0193     		str	r3, [sp, #4]
 671:Src/main.c    ****     {
 2043              		.loc 1 671 0
 2044 0048 6946     		mov	r1, sp
 2045 004a 0648     		ldr	r0, .L145
 2046 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccRZrNT2.s 			page 64


 2047              	.LVL173:
 2048 0050 30B9     		cbnz	r0, .L144
 678:Src/main.c    **** 
 2049              		.loc 1 678 0
 2050 0052 07B0     		add	sp, sp, #28
 2051              	.LCFI34:
 2052              		.cfi_remember_state
 2053              		.cfi_def_cfa_offset 4
 2054              		@ sp needed
 2055 0054 5DF804FB 		ldr	pc, [sp], #4
 2056              	.L142:
 2057              	.LCFI35:
 2058              		.cfi_restore_state
 662:Src/main.c    ****     }
 2059              		.loc 1 662 0
 2060 0058 FFF7FEFF 		bl	Error_Handler
 2061              	.LVL174:
 2062              	.L143:
 667:Src/main.c    ****     }
 2063              		.loc 1 667 0
 2064 005c FFF7FEFF 		bl	Error_Handler
 2065              	.LVL175:
 2066              	.L144:
 673:Src/main.c    ****     }
 2067              		.loc 1 673 0
 2068 0060 FFF7FEFF 		bl	Error_Handler
 2069              	.LVL176:
 2070              	.L146:
 2071              		.align	2
 2072              	.L145:
 2073 0064 00000000 		.word	htim4
 2074 0068 00080040 		.word	1073743872
 2075              		.cfi_endproc
 2076              	.LFE140:
 2078              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2079              		.align	1
 2080              		.syntax unified
 2081              		.thumb
 2082              		.thumb_func
 2083              		.fpu fpv4-sp-d16
 2085              	MX_TIM5_Init:
 2086              	.LFB141:
 686:Src/main.c    **** 
 2087              		.loc 1 686 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 24
 2090              		@ frame_needed = 0, uses_anonymous_args = 0
 2091 0000 00B5     		push	{lr}
 2092              	.LCFI36:
 2093              		.cfi_def_cfa_offset 4
 2094              		.cfi_offset 14, -4
 2095 0002 87B0     		sub	sp, sp, #28
 2096              	.LCFI37:
 2097              		.cfi_def_cfa_offset 32
 692:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2098              		.loc 1 692 0
 2099 0004 0023     		movs	r3, #0
ARM GAS  /tmp/ccRZrNT2.s 			page 65


 2100 0006 0293     		str	r3, [sp, #8]
 2101 0008 0393     		str	r3, [sp, #12]
 2102 000a 0493     		str	r3, [sp, #16]
 2103 000c 0593     		str	r3, [sp, #20]
 693:Src/main.c    **** 
 2104              		.loc 1 693 0
 2105 000e 0093     		str	r3, [sp]
 2106 0010 0193     		str	r3, [sp, #4]
 698:Src/main.c    ****     htim5.Init.Prescaler = 36;
 2107              		.loc 1 698 0
 2108 0012 1448     		ldr	r0, .L155
 2109 0014 144A     		ldr	r2, .L155+4
 2110 0016 0260     		str	r2, [r0]
 699:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2111              		.loc 1 699 0
 2112 0018 2422     		movs	r2, #36
 2113 001a 4260     		str	r2, [r0, #4]
 700:Src/main.c    ****     htim5.Init.Period = 2000;
 2114              		.loc 1 700 0
 2115 001c 8360     		str	r3, [r0, #8]
 701:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2116              		.loc 1 701 0
 2117 001e 4FF4FA62 		mov	r2, #2000
 2118 0022 C260     		str	r2, [r0, #12]
 702:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2119              		.loc 1 702 0
 2120 0024 0361     		str	r3, [r0, #16]
 703:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2121              		.loc 1 703 0
 2122 0026 8361     		str	r3, [r0, #24]
 704:Src/main.c    ****     {
 2123              		.loc 1 704 0
 2124 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2125              	.LVL177:
 2126 002c 98B9     		cbnz	r0, .L152
 708:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2127              		.loc 1 708 0
 2128 002e 06A9     		add	r1, sp, #24
 2129 0030 4FF48053 		mov	r3, #4096
 2130 0034 41F8103D 		str	r3, [r1, #-16]!
 709:Src/main.c    ****     {
 2131              		.loc 1 709 0
 2132 0038 0A48     		ldr	r0, .L155
 2133 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2134              	.LVL178:
 2135 003e 60B9     		cbnz	r0, .L153
 713:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2136              		.loc 1 713 0
 2137 0040 0023     		movs	r3, #0
 2138 0042 0093     		str	r3, [sp]
 714:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2139              		.loc 1 714 0
 2140 0044 0193     		str	r3, [sp, #4]
 715:Src/main.c    ****     {
 2141              		.loc 1 715 0
 2142 0046 6946     		mov	r1, sp
 2143 0048 0648     		ldr	r0, .L155
ARM GAS  /tmp/ccRZrNT2.s 			page 66


 2144 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2145              	.LVL179:
 2146 004e 30B9     		cbnz	r0, .L154
 722:Src/main.c    **** 
 2147              		.loc 1 722 0
 2148 0050 07B0     		add	sp, sp, #28
 2149              	.LCFI38:
 2150              		.cfi_remember_state
 2151              		.cfi_def_cfa_offset 4
 2152              		@ sp needed
 2153 0052 5DF804FB 		ldr	pc, [sp], #4
 2154              	.L152:
 2155              	.LCFI39:
 2156              		.cfi_restore_state
 706:Src/main.c    ****     }
 2157              		.loc 1 706 0
 2158 0056 FFF7FEFF 		bl	Error_Handler
 2159              	.LVL180:
 2160              	.L153:
 711:Src/main.c    ****     }
 2161              		.loc 1 711 0
 2162 005a FFF7FEFF 		bl	Error_Handler
 2163              	.LVL181:
 2164              	.L154:
 717:Src/main.c    ****     }
 2165              		.loc 1 717 0
 2166 005e FFF7FEFF 		bl	Error_Handler
 2167              	.LVL182:
 2168              	.L156:
 2169 0062 00BF     		.align	2
 2170              	.L155:
 2171 0064 00000000 		.word	htim5
 2172 0068 000C0040 		.word	1073744896
 2173              		.cfi_endproc
 2174              	.LFE141:
 2176              		.section	.text.MX_TIM6_Init,"ax",%progbits
 2177              		.align	1
 2178              		.syntax unified
 2179              		.thumb
 2180              		.thumb_func
 2181              		.fpu fpv4-sp-d16
 2183              	MX_TIM6_Init:
 2184              	.LFB142:
 730:Src/main.c    **** 
 2185              		.loc 1 730 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 8
 2188              		@ frame_needed = 0, uses_anonymous_args = 0
 2189 0000 00B5     		push	{lr}
 2190              	.LCFI40:
 2191              		.cfi_def_cfa_offset 4
 2192              		.cfi_offset 14, -4
 2193 0002 83B0     		sub	sp, sp, #12
 2194              	.LCFI41:
 2195              		.cfi_def_cfa_offset 16
 736:Src/main.c    **** 
 2196              		.loc 1 736 0
ARM GAS  /tmp/ccRZrNT2.s 			page 67


 2197 0004 0023     		movs	r3, #0
 2198 0006 0093     		str	r3, [sp]
 2199 0008 0193     		str	r3, [sp, #4]
 741:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 2200              		.loc 1 741 0
 2201 000a 0E48     		ldr	r0, .L163
 2202 000c 0E4A     		ldr	r2, .L163+4
 2203 000e 0260     		str	r2, [r0]
 742:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2204              		.loc 1 742 0
 2205 0010 4FF46162 		mov	r2, #3600
 2206 0014 4260     		str	r2, [r0, #4]
 743:Src/main.c    ****     htim6.Init.Period = 2000;
 2207              		.loc 1 743 0
 2208 0016 8360     		str	r3, [r0, #8]
 744:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2209              		.loc 1 744 0
 2210 0018 4FF4FA62 		mov	r2, #2000
 2211 001c C260     		str	r2, [r0, #12]
 745:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2212              		.loc 1 745 0
 2213 001e 8361     		str	r3, [r0, #24]
 746:Src/main.c    ****     {
 2214              		.loc 1 746 0
 2215 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2216              	.LVL183:
 2217 0024 50B9     		cbnz	r0, .L161
 750:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2218              		.loc 1 750 0
 2219 0026 0023     		movs	r3, #0
 2220 0028 0093     		str	r3, [sp]
 751:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2221              		.loc 1 751 0
 2222 002a 0193     		str	r3, [sp, #4]
 752:Src/main.c    ****     {
 2223              		.loc 1 752 0
 2224 002c 6946     		mov	r1, sp
 2225 002e 0548     		ldr	r0, .L163
 2226 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2227              	.LVL184:
 2228 0034 20B9     		cbnz	r0, .L162
 759:Src/main.c    **** 
 2229              		.loc 1 759 0
 2230 0036 03B0     		add	sp, sp, #12
 2231              	.LCFI42:
 2232              		.cfi_remember_state
 2233              		.cfi_def_cfa_offset 4
 2234              		@ sp needed
 2235 0038 5DF804FB 		ldr	pc, [sp], #4
 2236              	.L161:
 2237              	.LCFI43:
 2238              		.cfi_restore_state
 748:Src/main.c    ****     }
 2239              		.loc 1 748 0
 2240 003c FFF7FEFF 		bl	Error_Handler
 2241              	.LVL185:
 2242              	.L162:
ARM GAS  /tmp/ccRZrNT2.s 			page 68


 754:Src/main.c    ****     }
 2243              		.loc 1 754 0
 2244 0040 FFF7FEFF 		bl	Error_Handler
 2245              	.LVL186:
 2246              	.L164:
 2247              		.align	2
 2248              	.L163:
 2249 0044 00000000 		.word	htim6
 2250 0048 00100040 		.word	1073745920
 2251              		.cfi_endproc
 2252              	.LFE142:
 2254              		.section	.text.MX_TIM7_Init,"ax",%progbits
 2255              		.align	1
 2256              		.syntax unified
 2257              		.thumb
 2258              		.thumb_func
 2259              		.fpu fpv4-sp-d16
 2261              	MX_TIM7_Init:
 2262              	.LFB143:
 767:Src/main.c    **** 
 2263              		.loc 1 767 0
 2264              		.cfi_startproc
 2265              		@ args = 0, pretend = 0, frame = 8
 2266              		@ frame_needed = 0, uses_anonymous_args = 0
 2267 0000 00B5     		push	{lr}
 2268              	.LCFI44:
 2269              		.cfi_def_cfa_offset 4
 2270              		.cfi_offset 14, -4
 2271 0002 83B0     		sub	sp, sp, #12
 2272              	.LCFI45:
 2273              		.cfi_def_cfa_offset 16
 773:Src/main.c    **** 
 2274              		.loc 1 773 0
 2275 0004 0023     		movs	r3, #0
 2276 0006 0093     		str	r3, [sp]
 2277 0008 0193     		str	r3, [sp, #4]
 778:Src/main.c    ****     htim7.Init.Prescaler = 36;
 2278              		.loc 1 778 0
 2279 000a 0E48     		ldr	r0, .L171
 2280 000c 0E4A     		ldr	r2, .L171+4
 2281 000e 0260     		str	r2, [r0]
 779:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 2282              		.loc 1 779 0
 2283 0010 2422     		movs	r2, #36
 2284 0012 4260     		str	r2, [r0, #4]
 780:Src/main.c    ****     htim7.Init.Period = 6000;
 2285              		.loc 1 780 0
 2286 0014 8360     		str	r3, [r0, #8]
 781:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2287              		.loc 1 781 0
 2288 0016 41F27072 		movw	r2, #6000
 2289 001a C260     		str	r2, [r0, #12]
 782:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 2290              		.loc 1 782 0
 2291 001c 8361     		str	r3, [r0, #24]
 783:Src/main.c    ****     {
 2292              		.loc 1 783 0
ARM GAS  /tmp/ccRZrNT2.s 			page 69


 2293 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2294              	.LVL187:
 2295 0022 50B9     		cbnz	r0, .L169
 787:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2296              		.loc 1 787 0
 2297 0024 0023     		movs	r3, #0
 2298 0026 0093     		str	r3, [sp]
 788:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 2299              		.loc 1 788 0
 2300 0028 0193     		str	r3, [sp, #4]
 789:Src/main.c    ****     {
 2301              		.loc 1 789 0
 2302 002a 6946     		mov	r1, sp
 2303 002c 0548     		ldr	r0, .L171
 2304 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2305              	.LVL188:
 2306 0032 20B9     		cbnz	r0, .L170
 796:Src/main.c    **** 
 2307              		.loc 1 796 0
 2308 0034 03B0     		add	sp, sp, #12
 2309              	.LCFI46:
 2310              		.cfi_remember_state
 2311              		.cfi_def_cfa_offset 4
 2312              		@ sp needed
 2313 0036 5DF804FB 		ldr	pc, [sp], #4
 2314              	.L169:
 2315              	.LCFI47:
 2316              		.cfi_restore_state
 785:Src/main.c    ****     }
 2317              		.loc 1 785 0
 2318 003a FFF7FEFF 		bl	Error_Handler
 2319              	.LVL189:
 2320              	.L170:
 791:Src/main.c    ****     }
 2321              		.loc 1 791 0
 2322 003e FFF7FEFF 		bl	Error_Handler
 2323              	.LVL190:
 2324              	.L172:
 2325 0042 00BF     		.align	2
 2326              	.L171:
 2327 0044 00000000 		.word	htim7
 2328 0048 00140040 		.word	1073746944
 2329              		.cfi_endproc
 2330              	.LFE143:
 2332              		.section	.text.MX_TIM10_Init,"ax",%progbits
 2333              		.align	1
 2334              		.syntax unified
 2335              		.thumb
 2336              		.thumb_func
 2337              		.fpu fpv4-sp-d16
 2339              	MX_TIM10_Init:
 2340              	.LFB144:
 804:Src/main.c    **** 
 2341              		.loc 1 804 0
 2342              		.cfi_startproc
 2343              		@ args = 0, pretend = 0, frame = 0
 2344              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccRZrNT2.s 			page 70


 2345 0000 08B5     		push	{r3, lr}
 2346              	.LCFI48:
 2347              		.cfi_def_cfa_offset 8
 2348              		.cfi_offset 3, -8
 2349              		.cfi_offset 14, -4
 813:Src/main.c    ****     htim10.Init.Prescaler = 72;
 2350              		.loc 1 813 0
 2351 0002 0948     		ldr	r0, .L177
 2352 0004 094B     		ldr	r3, .L177+4
 2353 0006 0360     		str	r3, [r0]
 814:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 2354              		.loc 1 814 0
 2355 0008 4823     		movs	r3, #72
 2356 000a 4360     		str	r3, [r0, #4]
 815:Src/main.c    ****     htim10.Init.Period = 1000;
 2357              		.loc 1 815 0
 2358 000c 0023     		movs	r3, #0
 2359 000e 8360     		str	r3, [r0, #8]
 816:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2360              		.loc 1 816 0
 2361 0010 4FF47A72 		mov	r2, #1000
 2362 0014 C260     		str	r2, [r0, #12]
 817:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2363              		.loc 1 817 0
 2364 0016 0361     		str	r3, [r0, #16]
 818:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 2365              		.loc 1 818 0
 2366 0018 8361     		str	r3, [r0, #24]
 819:Src/main.c    ****     {
 2367              		.loc 1 819 0
 2368 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2369              	.LVL191:
 2370 001e 00B9     		cbnz	r0, .L176
 2371 0020 08BD     		pop	{r3, pc}
 2372              	.L176:
 821:Src/main.c    ****     }
 2373              		.loc 1 821 0
 2374 0022 FFF7FEFF 		bl	Error_Handler
 2375              	.LVL192:
 2376              	.L178:
 2377 0026 00BF     		.align	2
 2378              	.L177:
 2379 0028 00000000 		.word	htim10
 2380 002c 00440140 		.word	1073824768
 2381              		.cfi_endproc
 2382              	.LFE144:
 2384              		.section	.text.MX_TIM11_Init,"ax",%progbits
 2385              		.align	1
 2386              		.syntax unified
 2387              		.thumb
 2388              		.thumb_func
 2389              		.fpu fpv4-sp-d16
 2391              	MX_TIM11_Init:
 2392              	.LFB145:
 834:Src/main.c    **** 
 2393              		.loc 1 834 0
 2394              		.cfi_startproc
ARM GAS  /tmp/ccRZrNT2.s 			page 71


 2395              		@ args = 0, pretend = 0, frame = 0
 2396              		@ frame_needed = 0, uses_anonymous_args = 0
 2397 0000 08B5     		push	{r3, lr}
 2398              	.LCFI49:
 2399              		.cfi_def_cfa_offset 8
 2400              		.cfi_offset 3, -8
 2401              		.cfi_offset 14, -4
 843:Src/main.c    ****     htim11.Init.Prescaler = 0;
 2402              		.loc 1 843 0
 2403 0002 0748     		ldr	r0, .L183
 2404 0004 074B     		ldr	r3, .L183+4
 2405 0006 0360     		str	r3, [r0]
 844:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 2406              		.loc 1 844 0
 2407 0008 0023     		movs	r3, #0
 2408 000a 4360     		str	r3, [r0, #4]
 845:Src/main.c    ****     htim11.Init.Period = 0;
 2409              		.loc 1 845 0
 2410 000c 8360     		str	r3, [r0, #8]
 846:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2411              		.loc 1 846 0
 2412 000e C360     		str	r3, [r0, #12]
 847:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2413              		.loc 1 847 0
 2414 0010 0361     		str	r3, [r0, #16]
 848:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 2415              		.loc 1 848 0
 2416 0012 8361     		str	r3, [r0, #24]
 849:Src/main.c    ****     {
 2417              		.loc 1 849 0
 2418 0014 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2419              	.LVL193:
 2420 0018 00B9     		cbnz	r0, .L182
 2421 001a 08BD     		pop	{r3, pc}
 2422              	.L182:
 851:Src/main.c    ****     }
 2423              		.loc 1 851 0
 2424 001c FFF7FEFF 		bl	Error_Handler
 2425              	.LVL194:
 2426              	.L184:
 2427              		.align	2
 2428              	.L183:
 2429 0020 00000000 		.word	htim11
 2430 0024 00480140 		.word	1073825792
 2431              		.cfi_endproc
 2432              	.LFE145:
 2434              		.section	.text.SystemClock_Config,"ax",%progbits
 2435              		.align	1
 2436              		.global	SystemClock_Config
 2437              		.syntax unified
 2438              		.thumb
 2439              		.thumb_func
 2440              		.fpu fpv4-sp-d16
 2442              	SystemClock_Config:
 2443              	.LFB133:
 341:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2444              		.loc 1 341 0
ARM GAS  /tmp/ccRZrNT2.s 			page 72


 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 80
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 2448 0000 00B5     		push	{lr}
 2449              	.LCFI50:
 2450              		.cfi_def_cfa_offset 4
 2451              		.cfi_offset 14, -4
 2452 0002 95B0     		sub	sp, sp, #84
 2453              	.LCFI51:
 2454              		.cfi_def_cfa_offset 88
 342:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2455              		.loc 1 342 0
 2456 0004 3422     		movs	r2, #52
 2457 0006 0021     		movs	r1, #0
 2458 0008 07A8     		add	r0, sp, #28
 2459 000a FFF7FEFF 		bl	memset
 2460              	.LVL195:
 343:Src/main.c    **** 
 2461              		.loc 1 343 0
 2462 000e 0023     		movs	r3, #0
 2463 0010 0293     		str	r3, [sp, #8]
 2464 0012 0393     		str	r3, [sp, #12]
 2465 0014 0493     		str	r3, [sp, #16]
 2466 0016 0593     		str	r3, [sp, #20]
 2467 0018 0693     		str	r3, [sp, #24]
 2468              	.LBB14:
 347:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2469              		.loc 1 347 0
 2470 001a 0093     		str	r3, [sp]
 2471 001c 204A     		ldr	r2, .L191
 2472 001e 116C     		ldr	r1, [r2, #64]
 2473 0020 41F08051 		orr	r1, r1, #268435456
 2474 0024 1164     		str	r1, [r2, #64]
 2475 0026 126C     		ldr	r2, [r2, #64]
 2476 0028 02F08052 		and	r2, r2, #268435456
 2477 002c 0092     		str	r2, [sp]
 2478 002e 009A     		ldr	r2, [sp]
 2479              	.LBE14:
 2480              	.LBB15:
 348:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 2481              		.loc 1 348 0
 2482 0030 0193     		str	r3, [sp, #4]
 2483 0032 1C4B     		ldr	r3, .L191+4
 2484 0034 1A68     		ldr	r2, [r3]
 2485 0036 42F44042 		orr	r2, r2, #49152
 2486 003a 1A60     		str	r2, [r3]
 2487 003c 1B68     		ldr	r3, [r3]
 2488 003e 03F44043 		and	r3, r3, #49152
 2489 0042 0193     		str	r3, [sp, #4]
 2490 0044 019B     		ldr	r3, [sp, #4]
 2491              	.LBE15:
 351:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 2492              		.loc 1 351 0
 2493 0046 0123     		movs	r3, #1
 2494 0048 0793     		str	r3, [sp, #28]
 352:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2495              		.loc 1 352 0
ARM GAS  /tmp/ccRZrNT2.s 			page 73


 2496 004a 4FF4A023 		mov	r3, #327680
 2497 004e 0893     		str	r3, [sp, #32]
 353:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2498              		.loc 1 353 0
 2499 0050 0223     		movs	r3, #2
 2500 0052 0D93     		str	r3, [sp, #52]
 354:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2501              		.loc 1 354 0
 2502 0054 4FF48002 		mov	r2, #4194304
 2503 0058 0E92     		str	r2, [sp, #56]
 355:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 2504              		.loc 1 355 0
 2505 005a 0822     		movs	r2, #8
 2506 005c 0F92     		str	r2, [sp, #60]
 356:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2507              		.loc 1 356 0
 2508 005e 4FF49072 		mov	r2, #288
 2509 0062 1092     		str	r2, [sp, #64]
 357:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 2510              		.loc 1 357 0
 2511 0064 1193     		str	r3, [sp, #68]
 358:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 2512              		.loc 1 358 0
 2513 0066 1293     		str	r3, [sp, #72]
 359:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2514              		.loc 1 359 0
 2515 0068 1393     		str	r3, [sp, #76]
 360:Src/main.c    ****     {
 2516              		.loc 1 360 0
 2517 006a 07A8     		add	r0, sp, #28
 2518 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2519              	.LVL196:
 2520 0070 88B9     		cbnz	r0, .L189
 366:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 2521              		.loc 1 366 0
 2522 0072 0F23     		movs	r3, #15
 2523 0074 0293     		str	r3, [sp, #8]
 367:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2524              		.loc 1 367 0
 2525 0076 0223     		movs	r3, #2
 2526 0078 0393     		str	r3, [sp, #12]
 368:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 2527              		.loc 1 368 0
 2528 007a 0023     		movs	r3, #0
 2529 007c 0493     		str	r3, [sp, #16]
 369:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 2530              		.loc 1 369 0
 2531 007e 4FF4A053 		mov	r3, #5120
 2532 0082 0593     		str	r3, [sp, #20]
 370:Src/main.c    **** 
 2533              		.loc 1 370 0
 2534 0084 0693     		str	r3, [sp, #24]
 372:Src/main.c    ****     {
 2535              		.loc 1 372 0
 2536 0086 0421     		movs	r1, #4
 2537 0088 02A8     		add	r0, sp, #8
 2538 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
ARM GAS  /tmp/ccRZrNT2.s 			page 74


 2539              	.LVL197:
 2540 008e 20B9     		cbnz	r0, .L190
 376:Src/main.c    **** 
 2541              		.loc 1 376 0
 2542 0090 15B0     		add	sp, sp, #84
 2543              	.LCFI52:
 2544              		.cfi_remember_state
 2545              		.cfi_def_cfa_offset 4
 2546              		@ sp needed
 2547 0092 5DF804FB 		ldr	pc, [sp], #4
 2548              	.L189:
 2549              	.LCFI53:
 2550              		.cfi_restore_state
 362:Src/main.c    ****     }
 2551              		.loc 1 362 0
 2552 0096 FFF7FEFF 		bl	Error_Handler
 2553              	.LVL198:
 2554              	.L190:
 374:Src/main.c    ****     }
 2555              		.loc 1 374 0
 2556 009a FFF7FEFF 		bl	Error_Handler
 2557              	.LVL199:
 2558              	.L192:
 2559 009e 00BF     		.align	2
 2560              	.L191:
 2561 00a0 00380240 		.word	1073887232
 2562 00a4 00700040 		.word	1073770496
 2563              		.cfi_endproc
 2564              	.LFE133:
 2566              		.section	.text.main,"ax",%progbits
 2567              		.align	1
 2568              		.global	main
 2569              		.syntax unified
 2570              		.thumb
 2571              		.thumb_func
 2572              		.fpu fpv4-sp-d16
 2574              	main:
 2575              	.LFB132:
 149:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2576              		.loc 1 149 0
 2577              		.cfi_startproc
 2578              		@ Volatile: function does not return.
 2579              		@ args = 0, pretend = 0, frame = 0
 2580              		@ frame_needed = 0, uses_anonymous_args = 0
 2581 0000 2DE98848 		push	{r3, r7, fp, lr}
 2582              	.LCFI54:
 2583              		.cfi_def_cfa_offset 16
 2584              		.cfi_offset 3, -16
 2585              		.cfi_offset 7, -12
 2586              		.cfi_offset 11, -8
 2587              		.cfi_offset 14, -4
 156:Src/main.c    **** 
 2588              		.loc 1 156 0
 2589 0004 FFF7FEFF 		bl	HAL_Init
 2590              	.LVL200:
 163:Src/main.c    **** 
 2591              		.loc 1 163 0
ARM GAS  /tmp/ccRZrNT2.s 			page 75


 2592 0008 FFF7FEFF 		bl	SystemClock_Config
 2593              	.LVL201:
 170:Src/main.c    ****     MX_DMA_Init();
 2594              		.loc 1 170 0
 2595 000c FFF7FEFF 		bl	MX_GPIO_Init
 2596              	.LVL202:
 171:Src/main.c    ****     MX_USART2_UART_Init();
 2597              		.loc 1 171 0
 2598 0010 FFF7FEFF 		bl	MX_DMA_Init
 2599              	.LVL203:
 172:Src/main.c    ****     MX_CAN1_Init();
 2600              		.loc 1 172 0
 2601 0014 FFF7FEFF 		bl	MX_USART2_UART_Init
 2602              	.LVL204:
 173:Src/main.c    ****     MX_SPI1_Init();
 2603              		.loc 1 173 0
 2604 0018 FFF7FEFF 		bl	MX_CAN1_Init
 2605              	.LVL205:
 174:Src/main.c    ****     MX_ADC1_Init();
 2606              		.loc 1 174 0
 2607 001c FFF7FEFF 		bl	MX_SPI1_Init
 2608              	.LVL206:
 175:Src/main.c    ****     MX_USART1_UART_Init();
 2609              		.loc 1 175 0
 2610 0020 FFF7FEFF 		bl	MX_ADC1_Init
 2611              	.LVL207:
 176:Src/main.c    ****     MX_TIM2_Init();
 2612              		.loc 1 176 0
 2613 0024 FFF7FEFF 		bl	MX_USART1_UART_Init
 2614              	.LVL208:
 177:Src/main.c    ****     MX_TIM3_Init();
 2615              		.loc 1 177 0
 2616 0028 FFF7FEFF 		bl	MX_TIM2_Init
 2617              	.LVL209:
 178:Src/main.c    ****     MX_TIM4_Init();
 2618              		.loc 1 178 0
 2619 002c FFF7FEFF 		bl	MX_TIM3_Init
 2620              	.LVL210:
 179:Src/main.c    ****     MX_TIM5_Init();
 2621              		.loc 1 179 0
 2622 0030 FFF7FEFF 		bl	MX_TIM4_Init
 2623              	.LVL211:
 180:Src/main.c    ****     MX_TIM6_Init();
 2624              		.loc 1 180 0
 2625 0034 FFF7FEFF 		bl	MX_TIM5_Init
 2626              	.LVL212:
 181:Src/main.c    ****     MX_TIM7_Init();
 2627              		.loc 1 181 0
 2628 0038 FFF7FEFF 		bl	MX_TIM6_Init
 2629              	.LVL213:
 182:Src/main.c    ****     MX_TIM10_Init();
 2630              		.loc 1 182 0
 2631 003c FFF7FEFF 		bl	MX_TIM7_Init
 2632              	.LVL214:
 183:Src/main.c    ****     MX_TIM11_Init();
 2633              		.loc 1 183 0
 2634 0040 FFF7FEFF 		bl	MX_TIM10_Init
ARM GAS  /tmp/ccRZrNT2.s 			page 76


 2635              	.LVL215:
 184:Src/main.c    **** 
 2636              		.loc 1 184 0
 2637 0044 FFF7FEFF 		bl	MX_TIM11_Init
 2638              	.LVL216:
 187:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2639              		.loc 1 187 0
 2640 0048 FFF7FEFF 		bl	MX_NVIC_Init
 2641              	.LVL217:
 190:Src/main.c    ****     sFilter.FilterIdLow = 0;
 2642              		.loc 1 190 0
 2643 004c 7449     		ldr	r1, .L198
 2644 004e 0025     		movs	r5, #0
 2645 0050 8D61     		str	r5, [r1, #24]
 191:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 2646              		.loc 1 191 0
 2647 0052 4D60     		str	r5, [r1, #4]
 192:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 2648              		.loc 1 192 0
 2649 0054 0D60     		str	r5, [r1]
 193:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 2650              		.loc 1 193 0
 2651 0056 8D60     		str	r5, [r1, #8]
 194:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 2652              		.loc 1 194 0
 2653 0058 CD60     		str	r5, [r1, #12]
 195:Src/main.c    ****     sFilter.FilterBank = 0;
 2654              		.loc 1 195 0
 2655 005a 0D61     		str	r5, [r1, #16]
 196:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 2656              		.loc 1 196 0
 2657 005c 4D61     		str	r5, [r1, #20]
 197:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 2658              		.loc 1 197 0
 2659 005e CD61     		str	r5, [r1, #28]
 198:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 2660              		.loc 1 198 0
 2661 0060 4FF00109 		mov	r9, #1
 2662 0064 C1F82090 		str	r9, [r1, #32]
 199:Src/main.c    **** 
 2663              		.loc 1 199 0
 2664 0068 6E4C     		ldr	r4, .L198+4
 2665 006a 2046     		mov	r0, r4
 2666 006c FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 2667              	.LVL218:
 201:Src/main.c    **** 
 2668              		.loc 1 201 0
 2669 0070 2046     		mov	r0, r4
 2670 0072 FFF7FEFF 		bl	HAL_CAN_Start
 2671              	.LVL219:
 203:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 2672              		.loc 1 203 0
 2673 0076 1421     		movs	r1, #20
 2674 0078 2046     		mov	r0, r4
 2675 007a FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2676              	.LVL220:
 204:Src/main.c    ****     /* USER CODE END 2 */
ARM GAS  /tmp/ccRZrNT2.s 			page 77


 2677              		.loc 1 204 0
 2678 007e 1521     		movs	r1, #21
 2679 0080 2046     		mov	r0, r4
 2680 0082 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2681              	.LVL221:
 209:Src/main.c    ****     // can initialization //
 2682              		.loc 1 209 0
 2683 0086 684B     		ldr	r3, .L198+8
 2684 0088 9C61     		str	r4, [r3, #24]
 213:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 2685              		.loc 1 213 0
 2686 008a 684E     		ldr	r6, .L198+12
 2687 008c DFF8F881 		ldr	r8, .L198+104
 2688 0090 C6F82082 		str	r8, [r6, #544]
 214:Src/main.c    ****     accel.hspi = &hspi1;
 2689              		.loc 1 214 0
 2690 0094 4FF40074 		mov	r4, #512
 2691 0098 A6F82442 		strh	r4, [r6, #548]	@ movhi
 215:Src/main.c    **** 
 2692              		.loc 1 215 0
 2693 009c 644B     		ldr	r3, .L198+16
 2694 009e C6F83032 		str	r3, [r6, #560]
 217:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 2695              		.loc 1 217 0
 2696 00a2 644F     		ldr	r7, .L198+20
 2697 00a4 6448     		ldr	r0, .L198+24
 2698 00a6 C7F82002 		str	r0, [r7, #544]
 218:Src/main.c    ****     gyro.hspi = &hspi1;
 2699              		.loc 1 218 0
 2700 00aa 4FF4807B 		mov	fp, #256
 2701 00ae A7F824B2 		strh	fp, [r7, #548]	@ movhi
 219:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 2702              		.loc 1 219 0
 2703 00b2 C7F83032 		str	r3, [r7, #560]
 220:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 2704              		.loc 1 220 0
 2705 00b6 4A46     		mov	r2, r9
 2706 00b8 5946     		mov	r1, fp
 2707 00ba FFF7FEFF 		bl	HAL_GPIO_WritePin
 2708              	.LVL222:
 221:Src/main.c    **** 
 2709              		.loc 1 221 0
 2710 00be 4A46     		mov	r2, r9
 2711 00c0 2146     		mov	r1, r4
 2712 00c2 4046     		mov	r0, r8
 2713 00c4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2714              	.LVL223:
 223:Src/main.c    ****     {
 2715              		.loc 1 223 0
 2716 00c8 5C49     		ldr	r1, .L198+28
 2717 00ca 5D48     		ldr	r0, .L198+32
 2718 00cc FFF7FEFF 		bl	gps_init
 2719              	.LVL224:
 228:Src/main.c    ****     steer_enc_prescaler /= 3;
 2720              		.loc 1 228 0
 2721 00d0 DFF8B8A1 		ldr	r10, .L198+108
 2722 00d4 DAF80C20 		ldr	r2, [r10, #12]
ARM GAS  /tmp/ccRZrNT2.s 			page 78


 229:Src/main.c    ****     steer_enc_prescaler /= 20;
 2723              		.loc 1 229 0
 2724 00d8 5A4B     		ldr	r3, .L198+36
 2725 00da 83FB0213 		smull	r1, r3, r3, r2
 2726 00de A3EBE273 		sub	r3, r3, r2, asr #31
 230:Src/main.c    ****     steer_enc_prescaler += 40;
 2727              		.loc 1 230 0
 2728 00e2 594A     		ldr	r2, .L198+40
 2729 00e4 82FB0312 		smull	r1, r2, r2, r3
 2730 00e8 DB17     		asrs	r3, r3, #31
 2731 00ea C3EBE203 		rsb	r3, r3, r2, asr #3
 231:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 2732              		.loc 1 231 0
 2733 00ee 2833     		adds	r3, r3, #40
 2734 00f0 564A     		ldr	r2, .L198+44
 2735 00f2 1360     		str	r3, [r2]
 232:Src/main.c    **** 
 2736              		.loc 1 232 0
 2737 00f4 564C     		ldr	r4, .L198+48
 2738 00f6 A364     		str	r3, [r4, #72]
 234:Src/main.c    ****     pot_2.min = 2350;
 2739              		.loc 1 234 0
 2740 00f8 564B     		ldr	r3, .L198+52
 2741 00fa 40F6DC72 		movw	r2, #4060
 2742 00fe 5A60     		str	r2, [r3, #4]
 235:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 2743              		.loc 1 235 0
 2744 0100 40F62E12 		movw	r2, #2350
 2745 0104 9A60     		str	r2, [r3, #8]
 236:Src/main.c    **** 
 2746              		.loc 1 236 0
 2747 0106 40F2AE62 		movw	r2, #1710
 2748 010a DA60     		str	r2, [r3, #12]
 238:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 2749              		.loc 1 238 0
 2750 010c C4F8D883 		str	r8, [r4, #984]
 239:Src/main.c    ****     enc.DataPinName = GPIOC;
 2751              		.loc 1 239 0
 2752 0110 4021     		movs	r1, #64
 2753 0112 A4F8E013 		strh	r1, [r4, #992]	@ movhi
 240:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 2754              		.loc 1 240 0
 2755 0116 C4F8DC83 		str	r8, [r4, #988]
 241:Src/main.c    **** 
 2756              		.loc 1 241 0
 2757 011a A4F8E2B3 		strh	fp, [r4, #994]	@ movhi
 243:Src/main.c    ****     enc.interrupt_flag = 0;
 2758              		.loc 1 243 0
 2759 011e C4F84C90 		str	r9, [r4, #76]
 244:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 2760              		.loc 1 244 0
 2761 0122 A560     		str	r5, [r4, #8]
 245:Src/main.c    ****     enc.average_speed = 0;
 2762              		.loc 1 245 0
 2763 0124 DFF868B1 		ldr	fp, .L198+112
 2764 0128 C4F8D0B3 		str	fp, [r4, #976]
 246:Src/main.c    ****     enc.wheel_diameter = 0.395;
ARM GAS  /tmp/ccRZrNT2.s 			page 79


 2765              		.loc 1 246 0
 2766 012c 0022     		movs	r2, #0
 2767 012e 0023     		movs	r3, #0
 2768 0130 C4E9F023 		strd	r2, [r4, #960]
 247:Src/main.c    ****     enc.data_size = 14;
 2769              		.loc 1 247 0
 2770 0134 484B     		ldr	r3, .L198+56
 2771 0136 E365     		str	r3, [r4, #92]	@ float
 248:Src/main.c    ****     enc.clock_period = 2;
 2772              		.loc 1 248 0
 2773 0138 0E23     		movs	r3, #14
 2774 013a 2360     		str	r3, [r4]
 249:Src/main.c    ****     enc.wheel_rotation = 0;
 2775              		.loc 1 249 0
 2776 013c 0223     		movs	r3, #2
 2777 013e E360     		str	r3, [r4, #12]
 250:Src/main.c    ****     enc.Km = 0;
 2778              		.loc 1 250 0
 2779 0140 2565     		str	r5, [r4, #80]
 251:Src/main.c    **** 
 2780              		.loc 1 251 0
 2781 0142 0023     		movs	r3, #0
 2782 0144 6365     		str	r3, [r4, #84]	@ float
 253:Src/main.c    ****     enc.frequency = 0;
 2783              		.loc 1 253 0
 2784 0146 454A     		ldr	r2, .L198+60
 2785 0148 2266     		str	r2, [r4, #96]	@ float
 254:Src/main.c    ****     enc.frequency_timer = &htim7;
 2786              		.loc 1 254 0
 2787 014a 6366     		str	r3, [r4, #100]	@ float
 255:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 2788              		.loc 1 255 0
 2789 014c 444B     		ldr	r3, .L198+64
 2790 014e C4F8D433 		str	r3, [r4, #980]
 256:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 2791              		.loc 1 256 0
 2792 0152 444B     		ldr	r3, .L198+68
 2793 0154 A366     		str	r3, [r4, #104]
 257:Src/main.c    **** 
 2794              		.loc 1 257 0
 2795 0156 4A46     		mov	r2, r9
 2796 0158 4046     		mov	r0, r8
 2797 015a FFF7FEFF 		bl	HAL_GPIO_WritePin
 2798              	.LVL225:
 259:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 2799              		.loc 1 259 0
 2800 015e DFF83481 		ldr	r8, .L198+116
 2801 0162 4046     		mov	r0, r8
 2802 0164 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2803              	.LVL226:
 260:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 2804              		.loc 1 260 0
 2805 0168 5046     		mov	r0, r10
 2806 016a FFF7FEFF 		bl	HAL_TIM_Base_Start
 2807              	.LVL227:
 264:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 2808              		.loc 1 264 0
ARM GAS  /tmp/ccRZrNT2.s 			page 80


 2809 016e 3C48     		ldr	r0, .L198+64
 2810 0170 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2811              	.LVL228:
 265:Src/main.c    **** 
 2812              		.loc 1 265 0
 2813 0174 DFF82091 		ldr	r9, .L198+120
 2814 0178 4846     		mov	r0, r9
 2815 017a FFF7FEFF 		bl	HAL_TIM_Base_Start
 2816              	.LVL229:
 267:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 2817              		.loc 1 267 0
 2818 017e 4046     		mov	r0, r8
 2819 0180 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2820              	.LVL230:
 268:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 2821              		.loc 1 268 0
 2822 0184 5046     		mov	r0, r10
 2823 0186 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2824              	.LVL231:
 272:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 2825              		.loc 1 272 0
 2826 018a 3548     		ldr	r0, .L198+64
 2827 018c FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2828              	.LVL232:
 273:Src/main.c    **** 
 2829              		.loc 1 273 0
 2830 0190 4846     		mov	r0, r9
 2831 0192 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2832              	.LVL233:
 275:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 2833              		.loc 1 275 0
 2834 0196 344B     		ldr	r3, .L198+72
 2835 0198 1B68     		ldr	r3, [r3]
 2836 019a 5D62     		str	r5, [r3, #36]
 276:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 2837              		.loc 1 276 0
 2838 019c DBF80030 		ldr	r3, [fp]
 2839 01a0 5D62     		str	r5, [r3, #36]
 280:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 2840              		.loc 1 280 0
 2841 01a2 324B     		ldr	r3, .L198+76
 2842 01a4 1B68     		ldr	r3, [r3]
 2843 01a6 5D62     		str	r5, [r3, #36]
 281:Src/main.c    **** 
 2844              		.loc 1 281 0
 2845 01a8 314B     		ldr	r3, .L198+80
 2846 01aa 1B68     		ldr	r3, [r3]
 2847 01ac 5D62     		str	r5, [r3, #36]
 284:Src/main.c    **** 
 2848              		.loc 1 284 0
 2849 01ae 2046     		mov	r0, r4
 2850 01b0 FFF7FEFF 		bl	enc_calculate_optimal_frequency
 2851              	.LVL234:
 286:Src/main.c    ****     gyro.scale = 500;
 2852              		.loc 1 286 0
 2853 01b4 0423     		movs	r3, #4
 2854 01b6 C6F81832 		str	r3, [r6, #536]
ARM GAS  /tmp/ccRZrNT2.s 			page 81


 287:Src/main.c    **** 
 2855              		.loc 1 287 0
 2856 01ba 4FF4FA73 		mov	r3, #500
 2857 01be C7F81832 		str	r3, [r7, #536]
 290:Src/main.c    ****     LSMD9S0_check(&accel);
 2858              		.loc 1 290 0
 2859 01c2 3946     		mov	r1, r7
 2860 01c4 3046     		mov	r0, r6
 2861 01c6 FFF7FEFF 		bl	LSMD9S0_accel_gyro_init
 2862              	.LVL235:
 291:Src/main.c    **** 
 2863              		.loc 1 291 0
 2864 01ca 3046     		mov	r0, r6
 2865 01cc FFF7FEFF 		bl	LSMD9S0_check
 2866              	.LVL236:
 293:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 2867              		.loc 1 293 0
 2868 01d0 3046     		mov	r0, r6
 2869 01d2 FFF7FEFF 		bl	LSM9DS0_calibration
 2870              	.LVL237:
 294:Src/main.c    **** 
 2871              		.loc 1 294 0
 2872 01d6 3846     		mov	r0, r7
 2873 01d8 FFF7FEFF 		bl	LSM9DS0_calibration
 2874              	.LVL238:
 296:Src/main.c    **** 
 2875              		.loc 1 296 0
 2876 01dc 254B     		ldr	r3, .L198+84
 2877 01de 1D60     		str	r5, [r3]
 2878 01e0 05E0     		b	.L194
 2879              	.L195:
 329:Src/main.c    ****             command_flag = 0;
 2880              		.loc 1 329 0
 2881 01e2 0120     		movs	r0, #1
 2882 01e4 FFF7FEFF 		bl	HAL_Delay
 2883              	.LVL239:
 330:Src/main.c    ****         }
 2884              		.loc 1 330 0
 2885 01e8 0022     		movs	r2, #0
 2886 01ea 234B     		ldr	r3, .L198+88
 2887 01ec 1A60     		str	r2, [r3]
 2888              	.L194:
 309:Src/main.c    **** /*
 2889              		.loc 1 309 0
 2890 01ee 0322     		movs	r2, #3
 2891 01f0 2249     		ldr	r1, .L198+92
 2892 01f2 2348     		ldr	r0, .L198+96
 2893 01f4 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2894              	.LVL240:
 319:Src/main.c    ****         {
 2895              		.loc 1 319 0
 2896 01f8 1F4B     		ldr	r3, .L198+88
 2897 01fa 1B68     		ldr	r3, [r3]
 2898 01fc 002B     		cmp	r3, #0
 2899 01fe F0D1     		bne	.L195
 321:Src/main.c    ****             {
 2900              		.loc 1 321 0
ARM GAS  /tmp/ccRZrNT2.s 			page 82


 2901 0200 FFF7FEFF 		bl	HAL_GetTick
 2902              	.LVL241:
 2903 0204 1F4B     		ldr	r3, .L198+100
 2904 0206 1B68     		ldr	r3, [r3]
 2905 0208 9842     		cmp	r0, r3
 2906 020a F0D0     		beq	.L194
 323:Src/main.c    ****                 previous_millis = HAL_GetTick();
 2907              		.loc 1 323 0
 2908 020c FFF7FEFF 		bl	HAL_GetTick
 2909              	.LVL242:
 2910 0210 FFF7FEFF 		bl	send_CAN_data
 2911              	.LVL243:
 324:Src/main.c    ****             }
 2912              		.loc 1 324 0
 2913 0214 FFF7FEFF 		bl	HAL_GetTick
 2914              	.LVL244:
 2915 0218 1A4B     		ldr	r3, .L198+100
 2916 021a 1860     		str	r0, [r3]
 2917 021c E7E7     		b	.L194
 2918              	.L199:
 2919 021e 00BF     		.align	2
 2920              	.L198:
 2921 0220 00000000 		.word	sFilter
 2922 0224 00000000 		.word	hcan1
 2923 0228 00000000 		.word	can
 2924 022c 00000000 		.word	accel
 2925 0230 00000000 		.word	hspi1
 2926 0234 00000000 		.word	gyro
 2927 0238 00000240 		.word	1073872896
 2928 023c 00000000 		.word	gps_main
 2929 0240 00000000 		.word	huart1
 2930 0244 56555555 		.word	1431655766
 2931 0248 67666666 		.word	1717986919
 2932 024c 00000000 		.word	steer_enc_prescaler
 2933 0250 00000000 		.word	enc
 2934 0254 00000000 		.word	pot_2
 2935 0258 713DCA3E 		.word	1053441393
 2936 025c 0000A040 		.word	1084227584
 2937 0260 00000000 		.word	htim7
 2938 0264 00A24A04 		.word	72000000
 2939 0268 00000000 		.word	.LANCHOR5
 2940 026c 00000000 		.word	.LANCHOR6
 2941 0270 00000000 		.word	.LANCHOR7
 2942 0274 00000000 		.word	encoder_counter
 2943 0278 00000000 		.word	.LANCHOR0
 2944 027c 00000000 		.word	ADC_buffer
 2945 0280 00000000 		.word	hadc1
 2946 0284 00000000 		.word	previous_millis
 2947 0288 00080240 		.word	1073874944
 2948 028c 00000000 		.word	htim3
 2949 0290 00000000 		.word	.LANCHOR4
 2950 0294 00000000 		.word	htim2
 2951 0298 00000000 		.word	htim10
 2952              		.cfi_endproc
 2953              	.LFE132:
 2955              		.comm	previous_millis,4,4
 2956              		.comm	encoder_counter,4,4
ARM GAS  /tmp/ccRZrNT2.s 			page 83


 2957              		.comm	steer_enc_prescaler,4,4
 2958              		.comm	gps_main,100,4
 2959              		.global	a_TimerInstance10
 2960              		.global	a_TimerInstance7
 2961              		.global	a_TimerInstance6
 2962              		.global	a_TimerInstance5
 2963              		.global	a_TimerInstance4
 2964              		.global	a_TimerInstance3
 2965              		.global	a_TimerInstance2
 2966              		.global	calibration_flag
 2967              		.global	command_flag
 2968              		.global	timer_factor
 2969              		.global	multiplier
 2970              		.global	flag
 2971              		.comm	txt,100,4
 2972              		.comm	val,12,4
 2973              		.comm	ADC_buffer,16,4
 2974              		.comm	val0rang,4,4
 2975              		.comm	valMin0,4,4
 2976              		.comm	valMax0,4,4
 2977              		.comm	sFilter,40,4
 2978              		.comm	huart2,64,4
 2979              		.comm	huart1,64,4
 2980              		.comm	htim11,64,4
 2981              		.comm	htim10,64,4
 2982              		.comm	htim7,64,4
 2983              		.comm	htim6,64,4
 2984              		.comm	htim5,64,4
 2985              		.comm	htim4,64,4
 2986              		.comm	htim3,64,4
 2987              		.comm	htim2,64,4
 2988              		.comm	hspi1,88,4
 2989              		.comm	hcan1,40,4
 2990              		.comm	hdma_adc1,96,4
 2991              		.comm	hadc1,72,4
 2992              		.section	.bss.calibration_flag,"aw",%nobits
 2993              		.align	2
 2994              		.set	.LANCHOR1,. + 0
 2997              	calibration_flag:
 2998 0000 00000000 		.space	4
 2999              		.section	.bss.command_flag,"aw",%nobits
 3000              		.align	2
 3001              		.set	.LANCHOR0,. + 0
 3004              	command_flag:
 3005 0000 00000000 		.space	4
 3006              		.section	.bss.flag,"aw",%nobits
 3007              		.align	2
 3008              		.set	.LANCHOR3,. + 0
 3011              	flag:
 3012 0000 00000000 		.space	4
 3013              		.section	.data.a_TimerInstance10,"aw",%progbits
 3014              		.align	2
 3015              		.set	.LANCHOR7,. + 0
 3018              	a_TimerInstance10:
 3019 0000 00440140 		.word	1073824768
 3020 0004 00000000 		.space	60
 3020      00000000 
ARM GAS  /tmp/ccRZrNT2.s 			page 84


 3020      00000000 
 3020      00000000 
 3020      00000000 
 3021              		.section	.data.a_TimerInstance2,"aw",%progbits
 3022              		.align	2
 3023              		.set	.LANCHOR5,. + 0
 3026              	a_TimerInstance2:
 3027 0000 00000040 		.word	1073741824
 3028 0004 00000000 		.space	60
 3028      00000000 
 3028      00000000 
 3028      00000000 
 3028      00000000 
 3029              		.section	.data.a_TimerInstance3,"aw",%progbits
 3030              		.align	2
 3031              		.set	.LANCHOR4,. + 0
 3034              	a_TimerInstance3:
 3035 0000 00040040 		.word	1073742848
 3036 0004 00000000 		.space	60
 3036      00000000 
 3036      00000000 
 3036      00000000 
 3036      00000000 
 3037              		.section	.data.a_TimerInstance4,"aw",%progbits
 3038              		.align	2
 3041              	a_TimerInstance4:
 3042 0000 00080040 		.word	1073743872
 3043 0004 00000000 		.space	60
 3043      00000000 
 3043      00000000 
 3043      00000000 
 3043      00000000 
 3044              		.section	.data.a_TimerInstance5,"aw",%progbits
 3045              		.align	2
 3048              	a_TimerInstance5:
 3049 0000 000C0040 		.word	1073744896
 3050 0004 00000000 		.space	60
 3050      00000000 
 3050      00000000 
 3050      00000000 
 3050      00000000 
 3051              		.section	.data.a_TimerInstance6,"aw",%progbits
 3052              		.align	2
 3055              	a_TimerInstance6:
 3056 0000 00100040 		.word	1073745920
 3057 0004 00000000 		.space	60
 3057      00000000 
 3057      00000000 
 3057      00000000 
 3057      00000000 
 3058              		.section	.data.a_TimerInstance7,"aw",%progbits
 3059              		.align	2
 3060              		.set	.LANCHOR6,. + 0
 3063              	a_TimerInstance7:
 3064 0000 00140040 		.word	1073746944
 3065 0004 00000000 		.space	60
 3065      00000000 
ARM GAS  /tmp/ccRZrNT2.s 			page 85


 3065      00000000 
 3065      00000000 
 3065      00000000 
 3066              		.section	.data.multiplier,"aw",%progbits
 3067              		.align	2
 3068              		.set	.LANCHOR2,. + 0
 3071              	multiplier:
 3072 0000 01000000 		.word	1
 3073              		.section	.data.timer_factor,"aw",%progbits
 3074              		.align	2
 3077              	timer_factor:
 3078 0000 02000000 		.word	2
 3079              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 3080              		.align	2
 3081              	.LC1:
 3082 0000 4572726F 		.ascii	"Error on file: \000"
 3082      72206F6E 
 3082      2066696C 
 3082      653A2000 
 3083              	.LC2:
 3084 0010 0D0A00   		.ascii	"\015\012\000"
 3085              		.section	.rodata.HAL_TIM_PeriodElapsedCallback.str1.4,"aMS",%progbits,1
 3086              		.align	2
 3087              	.LC0:
 3088 0000 25640925 		.ascii	"%d\011%d\015\012\000"
 3088      640D0A00 
 3089              		.text
 3090              	.Letext0:
 3091              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3092              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3093              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3094              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3095              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3096              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 3097              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3098              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3099              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3100              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3101              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3102              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3103              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3104              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 3105              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3106              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3107              		.file 18 "/usr/include/newlib/sys/lock.h"
 3108              		.file 19 "/usr/include/newlib/sys/_types.h"
 3109              		.file 20 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3110              		.file 21 "/usr/include/newlib/sys/reent.h"
 3111              		.file 22 "/usr/include/newlib/stdlib.h"
 3112              		.file 23 "/usr/include/newlib/math.h"
 3113              		.file 24 "Inc/Eagle_TRT.h"
 3114              		.file 25 "/usr/include/newlib/stdio.h"
 3115              		.file 26 "/usr/include/newlib/string.h"
 3116              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 3117              		.file 28 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 3118              		.file 29 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccRZrNT2.s 			page 86


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccRZrNT2.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccRZrNT2.s:190    .text.MX_GPIO_Init:00000000000000ec $d
     /tmp/ccRZrNT2.s:198    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:204    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccRZrNT2.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccRZrNT2.s:253    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:259    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccRZrNT2.s:385    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccRZrNT2.s:392    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccRZrNT2.s:417    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000010 ADC_buffer
     /tmp/ccRZrNT2.s:425    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccRZrNT2.s:432    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccRZrNT2.s:462    .text.HAL_UART_RxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart1
                            *COM*:0000000000000064 gps_main
     /tmp/ccRZrNT2.s:468    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccRZrNT2.s:475    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccRZrNT2.s:506    .text.HAL_UART_TxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccRZrNT2.s:511    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccRZrNT2.s:518    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccRZrNT2.s:786    .text.HAL_CAN_RxFifo0FullCallback:0000000000000130 $d
     /tmp/ccRZrNT2.s:796    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccRZrNT2.s:803    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccRZrNT2.s:928    .text.HAL_TIM_PeriodElapsedCallback:00000000000000a0 $d
                            *COM*:0000000000000040 htim10
                            *COM*:0000000000000040 htim7
                            *COM*:0000000000000064 txt
     /tmp/ccRZrNT2.s:947    .text.send_CAN_data:0000000000000000 $t
     /tmp/ccRZrNT2.s:954    .text.send_CAN_data:0000000000000000 send_CAN_data
     /tmp/ccRZrNT2.s:1362   .text.send_CAN_data:0000000000000250 $d
     /tmp/ccRZrNT2.s:1376   .text.Error_Handler:0000000000000000 $t
     /tmp/ccRZrNT2.s:1383   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccRZrNT2.s:1415   .text.Error_Handler:0000000000000020 $d
     /tmp/ccRZrNT2.s:1422   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:1428   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccRZrNT2.s:1472   .text.MX_USART2_UART_Init:0000000000000028 $d
     /tmp/ccRZrNT2.s:1479   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:1485   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccRZrNT2.s:1539   .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccRZrNT2.s:1545   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:1551   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccRZrNT2.s:1604   .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccRZrNT2.s:1610   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:1616   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccRZrNT2.s:1702   .text.MX_ADC1_Init:000000000000005c $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccRZrNT2.s:1709   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:1715   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccRZrNT2.s:1759   .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccRZrNT2.s:1765   .text.MX_TIM2_Init:0000000000000000 $t
ARM GAS  /tmp/ccRZrNT2.s 			page 87


     /tmp/ccRZrNT2.s:1771   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
     /tmp/ccRZrNT2.s:1878   .text.MX_TIM2_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccRZrNT2.s:1883   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:1889   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccRZrNT2.s:1975   .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccRZrNT2.s:1981   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:1987   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccRZrNT2.s:2073   .text.MX_TIM4_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim4
     /tmp/ccRZrNT2.s:2079   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:2085   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccRZrNT2.s:2171   .text.MX_TIM5_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim5
     /tmp/ccRZrNT2.s:2177   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:2183   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/ccRZrNT2.s:2249   .text.MX_TIM6_Init:0000000000000044 $d
                            *COM*:0000000000000040 htim6
     /tmp/ccRZrNT2.s:2255   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:2261   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/ccRZrNT2.s:2327   .text.MX_TIM7_Init:0000000000000044 $d
     /tmp/ccRZrNT2.s:2333   .text.MX_TIM10_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:2339   .text.MX_TIM10_Init:0000000000000000 MX_TIM10_Init
     /tmp/ccRZrNT2.s:2379   .text.MX_TIM10_Init:0000000000000028 $d
     /tmp/ccRZrNT2.s:2385   .text.MX_TIM11_Init:0000000000000000 $t
     /tmp/ccRZrNT2.s:2391   .text.MX_TIM11_Init:0000000000000000 MX_TIM11_Init
     /tmp/ccRZrNT2.s:2429   .text.MX_TIM11_Init:0000000000000020 $d
                            *COM*:0000000000000040 htim11
     /tmp/ccRZrNT2.s:2435   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccRZrNT2.s:2442   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccRZrNT2.s:2561   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccRZrNT2.s:2567   .text.main:0000000000000000 $t
     /tmp/ccRZrNT2.s:2574   .text.main:0000000000000000 main
     /tmp/ccRZrNT2.s:2921   .text.main:0000000000000220 $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000004 steer_enc_prescaler
                            *COM*:0000000000000004 encoder_counter
                            *COM*:0000000000000004 previous_millis
     /tmp/ccRZrNT2.s:3018   .data.a_TimerInstance10:0000000000000000 a_TimerInstance10
     /tmp/ccRZrNT2.s:3063   .data.a_TimerInstance7:0000000000000000 a_TimerInstance7
     /tmp/ccRZrNT2.s:3055   .data.a_TimerInstance6:0000000000000000 a_TimerInstance6
     /tmp/ccRZrNT2.s:3048   .data.a_TimerInstance5:0000000000000000 a_TimerInstance5
     /tmp/ccRZrNT2.s:3041   .data.a_TimerInstance4:0000000000000000 a_TimerInstance4
     /tmp/ccRZrNT2.s:3034   .data.a_TimerInstance3:0000000000000000 a_TimerInstance3
     /tmp/ccRZrNT2.s:3026   .data.a_TimerInstance2:0000000000000000 a_TimerInstance2
     /tmp/ccRZrNT2.s:2997   .bss.calibration_flag:0000000000000000 calibration_flag
     /tmp/ccRZrNT2.s:3004   .bss.command_flag:0000000000000000 command_flag
     /tmp/ccRZrNT2.s:3077   .data.timer_factor:0000000000000000 timer_factor
     /tmp/ccRZrNT2.s:3071   .data.multiplier:0000000000000000 multiplier
     /tmp/ccRZrNT2.s:3011   .bss.flag:0000000000000000 flag
                            *COM*:000000000000000c val
                            *COM*:0000000000000004 val0rang
                            *COM*:0000000000000004 valMin0
                            *COM*:0000000000000004 valMax0
                            *COM*:0000000000000060 hdma_adc1
     /tmp/ccRZrNT2.s:2993   .bss.calibration_flag:0000000000000000 $d
ARM GAS  /tmp/ccRZrNT2.s 			page 88


     /tmp/ccRZrNT2.s:3000   .bss.command_flag:0000000000000000 $d
     /tmp/ccRZrNT2.s:3007   .bss.flag:0000000000000000 $d
     /tmp/ccRZrNT2.s:3014   .data.a_TimerInstance10:0000000000000000 $d
     /tmp/ccRZrNT2.s:3022   .data.a_TimerInstance2:0000000000000000 $d
     /tmp/ccRZrNT2.s:3030   .data.a_TimerInstance3:0000000000000000 $d
     /tmp/ccRZrNT2.s:3038   .data.a_TimerInstance4:0000000000000000 $d
     /tmp/ccRZrNT2.s:3045   .data.a_TimerInstance5:0000000000000000 $d
     /tmp/ccRZrNT2.s:3052   .data.a_TimerInstance6:0000000000000000 $d
     /tmp/ccRZrNT2.s:3059   .data.a_TimerInstance7:0000000000000000 $d
     /tmp/ccRZrNT2.s:3067   .data.multiplier:0000000000000000 $d
     /tmp/ccRZrNT2.s:3074   .data.timer_factor:0000000000000000 $d
     /tmp/ccRZrNT2.s:3080   .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/ccRZrNT2.s:3086   .rodata.HAL_TIM_PeriodElapsedCallback.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
pot_1
pot_2
pot_3
gps_read_it
print_it
CAN_Receive
set_min
CAN_Send
set_max
can
__aeabi_d2iz
LSMD9S0_accel_read
calc_pot_value
LSMD9S0_gyro_read
encoder_tim_interrupt
sprintf
strlen
HAL_UART_Transmit
accel
gyro
enc
__aeabi_d2uiz
__aeabi_ddiv
__aeabi_i2d
__aeabi_dadd
HAL_UART_Init
HAL_CAN_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccRZrNT2.s 			page 89


HAL_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
gps_init
HAL_TIM_Base_Start
HAL_TIM_Base_Start_IT
enc_calculate_optimal_frequency
LSMD9S0_accel_gyro_init
LSMD9S0_check
LSM9DS0_calibration
HAL_Delay
HAL_ADC_Start_DMA
HAL_GetTick
