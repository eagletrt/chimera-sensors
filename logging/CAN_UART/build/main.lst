ARM GAS  /tmp/cc8ekGpW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB141:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** 
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** 
  29:Src/main.c    **** /* USER CODE END Includes */
  30:Src/main.c    **** 
  31:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  32:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/cc8ekGpW.s 			page 2


  33:Src/main.c    **** 
  34:Src/main.c    **** /* USER CODE END PTD */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PD */
  38:Src/main.c    **** /* USER CODE END PD */
  39:Src/main.c    **** 
  40:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  41:Src/main.c    **** /* USER CODE BEGIN PM */
  42:Src/main.c    **** 
  43:Src/main.c    **** /* USER CODE END PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  46:Src/main.c    **** ADC_HandleTypeDef hadc1;
  47:Src/main.c    **** 
  48:Src/main.c    **** CAN_HandleTypeDef hcan1;
  49:Src/main.c    **** 
  50:Src/main.c    **** SD_HandleTypeDef hsd;
  51:Src/main.c    **** DMA_HandleTypeDef hdma_sdio_rx;
  52:Src/main.c    **** DMA_HandleTypeDef hdma_sdio_tx;
  53:Src/main.c    **** 
  54:Src/main.c    **** TIM_HandleTypeDef htim6;
  55:Src/main.c    **** TIM_HandleTypeDef htim7;
  56:Src/main.c    **** 
  57:Src/main.c    **** UART_HandleTypeDef huart2;
  58:Src/main.c    **** UART_HandleTypeDef huart3;
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE BEGIN PV */
  61:Src/main.c    **** CAN_FilterTypeDef sFilter;
  62:Src/main.c    **** CAN_RxHeaderTypeDef RxHeader;
  63:Src/main.c    **** 
  64:Src/main.c    **** int a = 0;
  65:Src/main.c    **** 
  66:Src/main.c    **** int cont_rx = 0;
  67:Src/main.c    **** char messagesToWrite[200][256];
  68:Src/main.c    **** int time = 0;
  69:Src/main.c    **** long int printable_time = 0;
  70:Src/main.c    **** int delta;
  71:Src/main.c    **** 
  72:Src/main.c    **** int mount_ok = 0;
  73:Src/main.c    **** int msg_counter = 0;
  74:Src/main.c    **** int msg_index = 0;
  75:Src/main.c    **** 
  76:Src/main.c    **** static TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  77:Src/main.c    **** static TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  78:Src/main.c    **** 
  79:Src/main.c    **** int interrupt_flag = 0;
  80:Src/main.c    **** 
  81:Src/main.c    **** uint8_t huart_rx[50];
  82:Src/main.c    **** char msg_can_to_send[50];
  83:Src/main.c    **** int cont_msg_can_to_send;
  84:Src/main.c    **** int flag_rx = 0;
  85:Src/main.c    **** int cont_huart_rx;
  86:Src/main.c    **** int cont_length_num;
  87:Src/main.c    **** 
  88:Src/main.c    **** /* USER CODE END PV */
  89:Src/main.c    **** 
ARM GAS  /tmp/cc8ekGpW.s 			page 3


  90:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  91:Src/main.c    **** void SystemClock_Config(void);
  92:Src/main.c    **** static void MX_GPIO_Init(void);
  93:Src/main.c    **** static void MX_DMA_Init(void);
  94:Src/main.c    **** static void MX_USART3_UART_Init(void);
  95:Src/main.c    **** static void MX_SDIO_SD_Init(void);
  96:Src/main.c    **** static void MX_USART2_UART_Init(void);
  97:Src/main.c    **** static void MX_CAN1_Init(void);
  98:Src/main.c    **** static void MX_TIM6_Init(void);
  99:Src/main.c    **** static void MX_TIM7_Init(void);
 100:Src/main.c    **** static void MX_ADC1_Init(void);
 101:Src/main.c    **** static void MX_NVIC_Init(void);
 102:Src/main.c    **** /* USER CODE BEGIN PFP */
 103:Src/main.c    **** 
 104:Src/main.c    **** /* USER CODE END PFP */
 105:Src/main.c    **** 
 106:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 107:Src/main.c    **** /* USER CODE BEGIN 0 */
 108:Src/main.c    **** 
 109:Src/main.c    **** /* USER CODE END 0 */
 110:Src/main.c    **** 
 111:Src/main.c    **** /**
 112:Src/main.c    ****   * @brief  The application entry point.
 113:Src/main.c    ****   * @retval int
 114:Src/main.c    ****   */
 115:Src/main.c    **** int main(void)
 116:Src/main.c    **** {
 117:Src/main.c    ****   /* USER CODE BEGIN 1 */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE END 1 */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 124:Src/main.c    ****   HAL_Init();
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE BEGIN Init */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE END Init */
 129:Src/main.c    **** 
 130:Src/main.c    ****   /* Configure the system clock */
 131:Src/main.c    ****   SystemClock_Config();
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE END SysInit */
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* Initialize all configured peripherals */
 138:Src/main.c    ****   MX_GPIO_Init();
 139:Src/main.c    ****   MX_DMA_Init();
 140:Src/main.c    ****   MX_USART3_UART_Init();
 141:Src/main.c    ****   MX_SDIO_SD_Init();
 142:Src/main.c    ****   MX_USART2_UART_Init();
 143:Src/main.c    ****   MX_CAN1_Init();
 144:Src/main.c    ****   MX_TIM6_Init();
 145:Src/main.c    ****   MX_TIM7_Init();
 146:Src/main.c    ****   MX_ADC1_Init();
ARM GAS  /tmp/cc8ekGpW.s 			page 4


 147:Src/main.c    **** 
 148:Src/main.c    ****   /* Initialize interrupts */
 149:Src/main.c    ****   MX_NVIC_Init();
 150:Src/main.c    ****   /* USER CODE BEGIN 2 */
 151:Src/main.c    ****   sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 152:Src/main.c    ****   sFilter.FilterIdLow = 0;
 153:Src/main.c    ****   sFilter.FilterIdHigh = 0;
 154:Src/main.c    ****   sFilter.FilterMaskIdHigh = 0;
 155:Src/main.c    ****   sFilter.FilterMaskIdLow = 0;
 156:Src/main.c    ****   sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 157:Src/main.c    ****   sFilter.FilterBank = 0;
 158:Src/main.c    ****   sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 159:Src/main.c    ****   sFilter.FilterActivation = ENABLE;
 160:Src/main.c    ****   HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 161:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *)"can init done_1\r\n", 17, 5);
 162:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start_1\r\n", 9, 5);
 163:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 164:Src/main.c    ****   HAL_Delay(500);
 165:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 166:Src/main.c    ****   HAL_Delay(500);
 167:Src/main.c    **** 
 168:Src/main.c    ****   HAL_CAN_Start(&hcan1);
 169:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 170:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 171:Src/main.c    **** 
 172:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *)"can init done\r\n", 15, 5);
 173:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start\r\n", 7, 5);
 174:Src/main.c    **** 
 175:Src/main.c    ****   HAL_TIM_Base_Start(&htim6);
 176:Src/main.c    ****   HAL_TIM_Base_Start(&htim7);
 177:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim6);
 178:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim7);
 179:Src/main.c    **** 
 180:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, huart_rx, 35);
 181:Src/main.c    **** 
 182:Src/main.c    ****   char txt[200];
 183:Src/main.c    **** 
 184:Src/main.c    ****   /* USER CODE END 2 */
 185:Src/main.c    **** 
 186:Src/main.c    ****   /* Infinite loop */
 187:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 188:Src/main.c    ****   while (1)
 189:Src/main.c    ****   {
 190:Src/main.c    ****     /* USER CODE END WHILE */
 191:Src/main.c    **** 
 192:Src/main.c    ****     /* USER CODE BEGIN 3 */
 193:Src/main.c    ****     a++;
 194:Src/main.c    ****     HAL_Delay(1);
 195:Src/main.c    ****     //print(&huart2,"ciao\r\n");
 196:Src/main.c    ****     //HAL_Delay(10);
 197:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)"ciao\r\n", 7, 5);
 198:Src/main.c    **** 
 199:Src/main.c    ****     //sprintf(txt, "192 5 10 10 10 10 10 10 10\r\n");
 200:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt), 5);
 201:Src/main.c    **** 
 202:Src/main.c    ****     if (flag_rx == 1)
 203:Src/main.c    ****     {
ARM GAS  /tmp/cc8ekGpW.s 			page 5


 204:Src/main.c    ****       flag_rx = 0;
 205:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_can_to_send, strlen(msg_can_to_send), 5);
 206:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 5);
 207:Src/main.c    **** 
 208:Src/main.c    ****       HAL_UART_Transmit(&huart3, (uint8_t *)msg_can_to_send, strlen(msg_can_to_send), 5);
 209:Src/main.c    ****       HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, 5);
 210:Src/main.c    **** 
 211:Src/main.c    ****       uint32_t mailbox;
 212:Src/main.c    ****       uint8_t messaggio_can[8];
 213:Src/main.c    ****       char can_id[] = {msg_can_to_send[0], msg_can_to_send[1], msg_can_to_send[2], '\0'};
 214:Src/main.c    ****       int zero = (int)('0');
 215:Src/main.c    ****       messaggio_can[0] = ((int)(msg_can_to_send[4]) - zero) * 100 + ((int)(msg_can_to_send[5]) - ze
 216:Src/main.c    ****       messaggio_can[1] = ((int)(msg_can_to_send[8]) - zero) * 100 + ((int)(msg_can_to_send[9]) - ze
 217:Src/main.c    ****       messaggio_can[2] = ((int)(msg_can_to_send[12]) - zero) * 100 + ((int)(msg_can_to_send[13]) - 
 218:Src/main.c    ****       messaggio_can[3] = ((int)(msg_can_to_send[16]) - zero) * 100 + ((int)(msg_can_to_send[17]) - 
 219:Src/main.c    ****       messaggio_can[4] = ((int)(msg_can_to_send[20]) - zero) * 100 + ((int)(msg_can_to_send[21]) - 
 220:Src/main.c    ****       messaggio_can[5] = ((int)(msg_can_to_send[24]) - zero) * 100 + ((int)(msg_can_to_send[25]) - 
 221:Src/main.c    ****       messaggio_can[6] = ((int)(msg_can_to_send[26]) - zero) * 100 + ((int)(msg_can_to_send[29]) - 
 222:Src/main.c    ****       messaggio_can[7] = ((int)(msg_can_to_send[30]) - zero) * 100 + ((int)(msg_can_to_send[31]) - 
 223:Src/main.c    **** 
 224:Src/main.c    ****       CAN_TxHeaderTypeDef TxHeader;
 225:Src/main.c    ****       TxHeader.StdId = atoi(can_id);
 226:Src/main.c    ****       TxHeader.IDE = CAN_ID_STD;
 227:Src/main.c    ****       TxHeader.RTR = CAN_RTR_DATA;
 228:Src/main.c    ****       TxHeader.DLC = 8;
 229:Src/main.c    ****       TxHeader.TransmitGlobalTime = DISABLE;
 230:Src/main.c    **** 
 231:Src/main.c    ****       if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0 && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX
 232:Src/main.c    ****       {
 233:Src/main.c    ****         HAL_CAN_AddTxMessage(&hcan1, &TxHeader, messaggio_can, &mailbox);
 234:Src/main.c    ****       }
 235:Src/main.c    ****       //HAL_UART_Receive_IT(&huart2,huart_rx, 36);
 236:Src/main.c    ****     }
 237:Src/main.c    ****   }
 238:Src/main.c    ****   /* USER CODE END 3 */
 239:Src/main.c    **** }
 240:Src/main.c    **** 
 241:Src/main.c    **** /**
 242:Src/main.c    ****   * @brief System Clock Configuration
 243:Src/main.c    ****   * @retval None
 244:Src/main.c    ****   */
 245:Src/main.c    **** void SystemClock_Config(void)
 246:Src/main.c    **** {
 247:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 248:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 249:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 250:Src/main.c    **** 
 251:Src/main.c    ****   /** Configure the main internal regulator output voltage 
 252:Src/main.c    ****   */
 253:Src/main.c    ****   __HAL_RCC_PWR_CLK_ENABLE();
 254:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 255:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 256:Src/main.c    ****   */
 257:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 258:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
ARM GAS  /tmp/cc8ekGpW.s 			page 6


 261:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 288;
 263:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 264:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 8;
 265:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 266:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 267:Src/main.c    ****   {
 268:Src/main.c    ****     Error_Handler();
 269:Src/main.c    ****   }
 270:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 271:Src/main.c    ****   */
 272:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | R
 273:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 274:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 275:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 276:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 277:Src/main.c    **** 
 278:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 279:Src/main.c    ****   {
 280:Src/main.c    ****     Error_Handler();
 281:Src/main.c    ****   }
 282:Src/main.c    ****   PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO | RCC_PERIPHCLK_CLK48;
 283:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 284:Src/main.c    ****   PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 285:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 286:Src/main.c    ****   {
 287:Src/main.c    ****     Error_Handler();
 288:Src/main.c    ****   }
 289:Src/main.c    **** }
 290:Src/main.c    **** 
 291:Src/main.c    **** /**
 292:Src/main.c    ****   * @brief NVIC Configuration.
 293:Src/main.c    ****   * @retval None
 294:Src/main.c    ****   */
 295:Src/main.c    **** static void MX_NVIC_Init(void)
 296:Src/main.c    **** {
 297:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 298:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 299:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 300:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 301:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 302:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 303:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 304:Src/main.c    ****   HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 305:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 306:Src/main.c    ****   /* TIM6_DAC_IRQn interrupt configuration */
 307:Src/main.c    ****   HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 308:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 309:Src/main.c    ****   /* TIM7_IRQn interrupt configuration */
 310:Src/main.c    ****   HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 311:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM7_IRQn);
 312:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
 313:Src/main.c    ****   HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 314:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 315:Src/main.c    **** }
 316:Src/main.c    **** 
 317:Src/main.c    **** /**
ARM GAS  /tmp/cc8ekGpW.s 			page 7


 318:Src/main.c    ****   * @brief ADC1 Initialization Function
 319:Src/main.c    ****   * @param None
 320:Src/main.c    ****   * @retval None
 321:Src/main.c    ****   */
 322:Src/main.c    **** static void MX_ADC1_Init(void)
 323:Src/main.c    **** {
 324:Src/main.c    **** 
 325:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 0 */
 326:Src/main.c    **** 
 327:Src/main.c    ****   /* USER CODE END ADC1_Init 0 */
 328:Src/main.c    **** 
 329:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig = {0};
 330:Src/main.c    **** 
 331:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 1 */
 332:Src/main.c    **** 
 333:Src/main.c    ****   /* USER CODE END ADC1_Init 1 */
 334:Src/main.c    ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 335:Src/main.c    ****   */
 336:Src/main.c    ****   hadc1.Instance = ADC1;
 337:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 338:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 339:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 340:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 341:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 342:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 343:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 344:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 345:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 346:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 347:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 348:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 349:Src/main.c    ****   {
 350:Src/main.c    ****     Error_Handler();
 351:Src/main.c    ****   }
 352:Src/main.c    ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 353:Src/main.c    ****   */
 354:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_0;
 355:Src/main.c    ****   sConfig.Rank = 1;
 356:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 357:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 358:Src/main.c    ****   {
 359:Src/main.c    ****     Error_Handler();
 360:Src/main.c    ****   }
 361:Src/main.c    ****   /* USER CODE BEGIN ADC1_Init 2 */
 362:Src/main.c    **** 
 363:Src/main.c    ****   /* USER CODE END ADC1_Init 2 */
 364:Src/main.c    **** }
 365:Src/main.c    **** 
 366:Src/main.c    **** /**
 367:Src/main.c    ****   * @brief CAN1 Initialization Function
 368:Src/main.c    ****   * @param None
 369:Src/main.c    ****   * @retval None
 370:Src/main.c    ****   */
 371:Src/main.c    **** static void MX_CAN1_Init(void)
 372:Src/main.c    **** {
 373:Src/main.c    **** 
 374:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 0 */
ARM GAS  /tmp/cc8ekGpW.s 			page 8


 375:Src/main.c    **** 
 376:Src/main.c    ****   /* USER CODE END CAN1_Init 0 */
 377:Src/main.c    **** 
 378:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 1 */
 379:Src/main.c    **** 
 380:Src/main.c    ****   /* USER CODE END CAN1_Init 1 */
 381:Src/main.c    ****   hcan1.Instance = CAN1;
 382:Src/main.c    ****   hcan1.Init.Prescaler = 2;
 383:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 384:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 385:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 386:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 387:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 388:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 389:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 390:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 391:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 392:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 393:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 394:Src/main.c    ****   {
 395:Src/main.c    ****     Error_Handler();
 396:Src/main.c    ****   }
 397:Src/main.c    ****   /* USER CODE BEGIN CAN1_Init 2 */
 398:Src/main.c    **** 
 399:Src/main.c    ****   /* USER CODE END CAN1_Init 2 */
 400:Src/main.c    **** }
 401:Src/main.c    **** 
 402:Src/main.c    **** /**
 403:Src/main.c    ****   * @brief SDIO Initialization Function
 404:Src/main.c    ****   * @param None
 405:Src/main.c    ****   * @retval None
 406:Src/main.c    ****   */
 407:Src/main.c    **** static void MX_SDIO_SD_Init(void)
 408:Src/main.c    **** {
 409:Src/main.c    **** 
 410:Src/main.c    ****   /* USER CODE BEGIN SDIO_Init 0 */
 411:Src/main.c    **** 
 412:Src/main.c    ****   /* USER CODE END SDIO_Init 0 */
 413:Src/main.c    **** 
 414:Src/main.c    ****   /* USER CODE BEGIN SDIO_Init 1 */
 415:Src/main.c    **** 
 416:Src/main.c    ****   /* USER CODE END SDIO_Init 1 */
 417:Src/main.c    ****   hsd.Instance = SDIO;
 418:Src/main.c    ****   hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 419:Src/main.c    ****   hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 420:Src/main.c    ****   hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 421:Src/main.c    ****   hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 422:Src/main.c    ****   hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 423:Src/main.c    ****   hsd.Init.ClockDiv = 0;
 424:Src/main.c    ****   if (HAL_SD_Init(&hsd) != HAL_OK)
 425:Src/main.c    ****   {
 426:Src/main.c    ****     Error_Handler();
 427:Src/main.c    ****   }
 428:Src/main.c    ****   /* USER CODE BEGIN SDIO_Init 2 */
 429:Src/main.c    **** 
 430:Src/main.c    ****   /* USER CODE END SDIO_Init 2 */
 431:Src/main.c    **** }
ARM GAS  /tmp/cc8ekGpW.s 			page 9


 432:Src/main.c    **** 
 433:Src/main.c    **** /**
 434:Src/main.c    ****   * @brief TIM6 Initialization Function
 435:Src/main.c    ****   * @param None
 436:Src/main.c    ****   * @retval None
 437:Src/main.c    ****   */
 438:Src/main.c    **** static void MX_TIM6_Init(void)
 439:Src/main.c    **** {
 440:Src/main.c    **** 
 441:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 0 */
 442:Src/main.c    **** 
 443:Src/main.c    ****   /* USER CODE END TIM6_Init 0 */
 444:Src/main.c    **** 
 445:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 446:Src/main.c    **** 
 447:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 1 */
 448:Src/main.c    **** 
 449:Src/main.c    ****   /* USER CODE END TIM6_Init 1 */
 450:Src/main.c    ****   htim6.Instance = TIM6;
 451:Src/main.c    ****   htim6.Init.Prescaler = 36;
 452:Src/main.c    ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 453:Src/main.c    ****   htim6.Init.Period = 1000;
 454:Src/main.c    ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 455:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 456:Src/main.c    ****   {
 457:Src/main.c    ****     Error_Handler();
 458:Src/main.c    ****   }
 459:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 460:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 461:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 462:Src/main.c    ****   {
 463:Src/main.c    ****     Error_Handler();
 464:Src/main.c    ****   }
 465:Src/main.c    ****   /* USER CODE BEGIN TIM6_Init 2 */
 466:Src/main.c    **** 
 467:Src/main.c    ****   /* USER CODE END TIM6_Init 2 */
 468:Src/main.c    **** }
 469:Src/main.c    **** 
 470:Src/main.c    **** /**
 471:Src/main.c    ****   * @brief TIM7 Initialization Function
 472:Src/main.c    ****   * @param None
 473:Src/main.c    ****   * @retval None
 474:Src/main.c    ****   */
 475:Src/main.c    **** static void MX_TIM7_Init(void)
 476:Src/main.c    **** {
 477:Src/main.c    **** 
 478:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 0 */
 479:Src/main.c    **** 
 480:Src/main.c    ****   /* USER CODE END TIM7_Init 0 */
 481:Src/main.c    **** 
 482:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 483:Src/main.c    **** 
 484:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 1 */
 485:Src/main.c    **** 
 486:Src/main.c    ****   /* USER CODE END TIM7_Init 1 */
 487:Src/main.c    ****   htim7.Instance = TIM7;
 488:Src/main.c    ****   htim7.Init.Prescaler = 3600;
ARM GAS  /tmp/cc8ekGpW.s 			page 10


 489:Src/main.c    ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 490:Src/main.c    ****   htim7.Init.Period = 1999;
 491:Src/main.c    ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 492:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 493:Src/main.c    ****   {
 494:Src/main.c    ****     Error_Handler();
 495:Src/main.c    ****   }
 496:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 497:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 498:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 499:Src/main.c    ****   {
 500:Src/main.c    ****     Error_Handler();
 501:Src/main.c    ****   }
 502:Src/main.c    ****   /* USER CODE BEGIN TIM7_Init 2 */
 503:Src/main.c    **** 
 504:Src/main.c    ****   /* USER CODE END TIM7_Init 2 */
 505:Src/main.c    **** }
 506:Src/main.c    **** 
 507:Src/main.c    **** /**
 508:Src/main.c    ****   * @brief USART2 Initialization Function
 509:Src/main.c    ****   * @param None
 510:Src/main.c    ****   * @retval None
 511:Src/main.c    ****   */
 512:Src/main.c    **** static void MX_USART2_UART_Init(void)
 513:Src/main.c    **** {
 514:Src/main.c    **** 
 515:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 0 */
 516:Src/main.c    **** 
 517:Src/main.c    ****   /* USER CODE END USART2_Init 0 */
 518:Src/main.c    **** 
 519:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 1 */
 520:Src/main.c    **** 
 521:Src/main.c    ****   /* USER CODE END USART2_Init 1 */
 522:Src/main.c    ****   huart2.Instance = USART2;
 523:Src/main.c    ****   huart2.Init.BaudRate = 2250000;
 524:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 525:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 526:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 527:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 528:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 529:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 530:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 531:Src/main.c    ****   {
 532:Src/main.c    ****     Error_Handler();
 533:Src/main.c    ****   }
 534:Src/main.c    ****   /* USER CODE BEGIN USART2_Init 2 */
 535:Src/main.c    **** 
 536:Src/main.c    ****   /* USER CODE END USART2_Init 2 */
 537:Src/main.c    **** }
 538:Src/main.c    **** 
 539:Src/main.c    **** /**
 540:Src/main.c    ****   * @brief USART3 Initialization Function
 541:Src/main.c    ****   * @param None
 542:Src/main.c    ****   * @retval None
 543:Src/main.c    ****   */
 544:Src/main.c    **** static void MX_USART3_UART_Init(void)
 545:Src/main.c    **** {
ARM GAS  /tmp/cc8ekGpW.s 			page 11


 546:Src/main.c    **** 
 547:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 0 */
 548:Src/main.c    **** 
 549:Src/main.c    ****   /* USER CODE END USART3_Init 0 */
 550:Src/main.c    **** 
 551:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 1 */
 552:Src/main.c    **** 
 553:Src/main.c    ****   /* USER CODE END USART3_Init 1 */
 554:Src/main.c    ****   huart3.Instance = USART3;
 555:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 556:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 557:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 558:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 559:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 560:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 561:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 562:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 563:Src/main.c    ****   {
 564:Src/main.c    ****     Error_Handler();
 565:Src/main.c    ****   }
 566:Src/main.c    ****   /* USER CODE BEGIN USART3_Init 2 */
 567:Src/main.c    **** 
 568:Src/main.c    ****   /* USER CODE END USART3_Init 2 */
 569:Src/main.c    **** }
 570:Src/main.c    **** 
 571:Src/main.c    **** /** 
 572:Src/main.c    ****   * Enable DMA controller clock
 573:Src/main.c    ****   */
 574:Src/main.c    **** static void MX_DMA_Init(void)
 575:Src/main.c    **** {
 576:Src/main.c    **** 
 577:Src/main.c    ****   /* DMA controller clock enable */
 578:Src/main.c    ****   __HAL_RCC_DMA2_CLK_ENABLE();
 579:Src/main.c    **** 
 580:Src/main.c    ****   /* DMA interrupt init */
 581:Src/main.c    ****   /* DMA2_Stream3_IRQn interrupt configuration */
 582:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 583:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 584:Src/main.c    ****   /* DMA2_Stream6_IRQn interrupt configuration */
 585:Src/main.c    ****   HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 586:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 587:Src/main.c    **** }
 588:Src/main.c    **** 
 589:Src/main.c    **** /**
 590:Src/main.c    ****   * @brief GPIO Initialization Function
 591:Src/main.c    ****   * @param None
 592:Src/main.c    ****   * @retval None
 593:Src/main.c    ****   */
 594:Src/main.c    **** static void MX_GPIO_Init(void)
 595:Src/main.c    **** {
  27              		.loc 1 595 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cc8ekGpW.s 			page 12


  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 8BB0     		sub	sp, sp, #44
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 64
 596:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  42              		.loc 1 596 0
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
  49              	.LBB2:
 597:Src/main.c    **** 
 598:Src/main.c    ****   /* GPIO Ports Clock Enable */
 599:Src/main.c    ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  50              		.loc 1 599 0
  51 0010 0094     		str	r4, [sp]
  52 0012 294B     		ldr	r3, .L3
  53 0014 1A6B     		ldr	r2, [r3, #48]
  54 0016 42F08002 		orr	r2, r2, #128
  55 001a 1A63     		str	r2, [r3, #48]
  56 001c 1A6B     		ldr	r2, [r3, #48]
  57 001e 02F08002 		and	r2, r2, #128
  58 0022 0092     		str	r2, [sp]
  59 0024 009A     		ldr	r2, [sp]
  60              	.LBE2:
  61              	.LBB3:
 600:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  62              		.loc 1 600 0
  63 0026 0194     		str	r4, [sp, #4]
  64 0028 1A6B     		ldr	r2, [r3, #48]
  65 002a 42F00102 		orr	r2, r2, #1
  66 002e 1A63     		str	r2, [r3, #48]
  67 0030 1A6B     		ldr	r2, [r3, #48]
  68 0032 02F00102 		and	r2, r2, #1
  69 0036 0192     		str	r2, [sp, #4]
  70 0038 019A     		ldr	r2, [sp, #4]
  71              	.LBE3:
  72              	.LBB4:
 601:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  73              		.loc 1 601 0
  74 003a 0294     		str	r4, [sp, #8]
  75 003c 1A6B     		ldr	r2, [r3, #48]
  76 003e 42F00402 		orr	r2, r2, #4
  77 0042 1A63     		str	r2, [r3, #48]
  78 0044 1A6B     		ldr	r2, [r3, #48]
  79 0046 02F00402 		and	r2, r2, #4
  80 004a 0292     		str	r2, [sp, #8]
  81 004c 029A     		ldr	r2, [sp, #8]
  82              	.LBE4:
  83              	.LBB5:
 602:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
ARM GAS  /tmp/cc8ekGpW.s 			page 13


  84              		.loc 1 602 0
  85 004e 0394     		str	r4, [sp, #12]
  86 0050 1A6B     		ldr	r2, [r3, #48]
  87 0052 42F00202 		orr	r2, r2, #2
  88 0056 1A63     		str	r2, [r3, #48]
  89 0058 1A6B     		ldr	r2, [r3, #48]
  90 005a 02F00202 		and	r2, r2, #2
  91 005e 0392     		str	r2, [sp, #12]
  92 0060 039A     		ldr	r2, [sp, #12]
  93              	.LBE5:
  94              	.LBB6:
 603:Src/main.c    ****   __HAL_RCC_GPIOD_CLK_ENABLE();
  95              		.loc 1 603 0
  96 0062 0494     		str	r4, [sp, #16]
  97 0064 1A6B     		ldr	r2, [r3, #48]
  98 0066 42F00802 		orr	r2, r2, #8
  99 006a 1A63     		str	r2, [r3, #48]
 100 006c 1B6B     		ldr	r3, [r3, #48]
 101 006e 03F00803 		and	r3, r3, #8
 102 0072 0493     		str	r3, [sp, #16]
 103 0074 049B     		ldr	r3, [sp, #16]
 104              	.LBE6:
 604:Src/main.c    **** 
 605:Src/main.c    ****   /*Configure GPIO pin Output Level */
 606:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 105              		.loc 1 606 0
 106 0076 114F     		ldr	r7, .L3+4
 107 0078 2246     		mov	r2, r4
 108 007a 2021     		movs	r1, #32
 109 007c 3846     		mov	r0, r7
 110 007e FFF7FEFF 		bl	HAL_GPIO_WritePin
 111              	.LVL0:
 607:Src/main.c    **** 
 608:Src/main.c    ****   /*Configure GPIO pin Output Level */
 609:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 112              		.loc 1 609 0
 113 0082 0F4E     		ldr	r6, .L3+8
 114 0084 2246     		mov	r2, r4
 115 0086 0121     		movs	r1, #1
 116 0088 3046     		mov	r0, r6
 117 008a FFF7FEFF 		bl	HAL_GPIO_WritePin
 118              	.LVL1:
 610:Src/main.c    **** 
 611:Src/main.c    ****   /*Configure GPIO pin : PA5 */
 612:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_5;
 119              		.loc 1 612 0
 120 008e 2023     		movs	r3, #32
 121 0090 0593     		str	r3, [sp, #20]
 613:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 122              		.loc 1 613 0
 123 0092 0125     		movs	r5, #1
 124 0094 0695     		str	r5, [sp, #24]
 614:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 125              		.loc 1 614 0
 126 0096 0795     		str	r5, [sp, #28]
 615:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 127              		.loc 1 615 0
ARM GAS  /tmp/cc8ekGpW.s 			page 14


 128 0098 0894     		str	r4, [sp, #32]
 616:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 129              		.loc 1 616 0
 130 009a 05A9     		add	r1, sp, #20
 131 009c 3846     		mov	r0, r7
 132 009e FFF7FEFF 		bl	HAL_GPIO_Init
 133              	.LVL2:
 617:Src/main.c    **** 
 618:Src/main.c    ****   /*Configure GPIO pin : PB0 */
 619:Src/main.c    ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 134              		.loc 1 619 0
 135 00a2 0595     		str	r5, [sp, #20]
 620:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 136              		.loc 1 620 0
 137 00a4 0695     		str	r5, [sp, #24]
 621:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_PULLUP;
 138              		.loc 1 621 0
 139 00a6 0795     		str	r5, [sp, #28]
 622:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 140              		.loc 1 622 0
 141 00a8 0894     		str	r4, [sp, #32]
 623:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 142              		.loc 1 623 0
 143 00aa 05A9     		add	r1, sp, #20
 144 00ac 3046     		mov	r0, r6
 145 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 146              	.LVL3:
 624:Src/main.c    **** }
 147              		.loc 1 624 0
 148 00b2 0BB0     		add	sp, sp, #44
 149              	.LCFI2:
 150              		.cfi_def_cfa_offset 20
 151              		@ sp needed
 152 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 153              	.L4:
 154 00b6 00BF     		.align	2
 155              	.L3:
 156 00b8 00380240 		.word	1073887232
 157 00bc 00000240 		.word	1073872896
 158 00c0 00040240 		.word	1073873920
 159              		.cfi_endproc
 160              	.LFE141:
 162              		.section	.text.MX_DMA_Init,"ax",%progbits
 163              		.align	1
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 167              		.fpu fpv4-sp-d16
 169              	MX_DMA_Init:
 170              	.LFB140:
 575:Src/main.c    **** 
 171              		.loc 1 575 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 8
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175 0000 10B5     		push	{r4, lr}
 176              	.LCFI3:
ARM GAS  /tmp/cc8ekGpW.s 			page 15


 177              		.cfi_def_cfa_offset 8
 178              		.cfi_offset 4, -8
 179              		.cfi_offset 14, -4
 180 0002 82B0     		sub	sp, sp, #8
 181              	.LCFI4:
 182              		.cfi_def_cfa_offset 16
 183              	.LBB7:
 578:Src/main.c    **** 
 184              		.loc 1 578 0
 185 0004 0024     		movs	r4, #0
 186 0006 0194     		str	r4, [sp, #4]
 187 0008 0D4B     		ldr	r3, .L7
 188 000a 1A6B     		ldr	r2, [r3, #48]
 189 000c 42F48002 		orr	r2, r2, #4194304
 190 0010 1A63     		str	r2, [r3, #48]
 191 0012 1B6B     		ldr	r3, [r3, #48]
 192 0014 03F48003 		and	r3, r3, #4194304
 193 0018 0193     		str	r3, [sp, #4]
 194 001a 019B     		ldr	r3, [sp, #4]
 195              	.LBE7:
 582:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 196              		.loc 1 582 0
 197 001c 2246     		mov	r2, r4
 198 001e 2146     		mov	r1, r4
 199 0020 3B20     		movs	r0, #59
 200 0022 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 201              	.LVL4:
 583:Src/main.c    ****   /* DMA2_Stream6_IRQn interrupt configuration */
 202              		.loc 1 583 0
 203 0026 3B20     		movs	r0, #59
 204 0028 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 205              	.LVL5:
 585:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 206              		.loc 1 585 0
 207 002c 2246     		mov	r2, r4
 208 002e 2146     		mov	r1, r4
 209 0030 4520     		movs	r0, #69
 210 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 211              	.LVL6:
 586:Src/main.c    **** }
 212              		.loc 1 586 0
 213 0036 4520     		movs	r0, #69
 214 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 215              	.LVL7:
 587:Src/main.c    **** 
 216              		.loc 1 587 0
 217 003c 02B0     		add	sp, sp, #8
 218              	.LCFI5:
 219              		.cfi_def_cfa_offset 8
 220              		@ sp needed
 221 003e 10BD     		pop	{r4, pc}
 222              	.L8:
 223              		.align	2
 224              	.L7:
 225 0040 00380240 		.word	1073887232
 226              		.cfi_endproc
 227              	.LFE140:
ARM GAS  /tmp/cc8ekGpW.s 			page 16


 229              		.section	.text.MX_NVIC_Init,"ax",%progbits
 230              		.align	1
 231              		.syntax unified
 232              		.thumb
 233              		.thumb_func
 234              		.fpu fpv4-sp-d16
 236              	MX_NVIC_Init:
 237              	.LFB132:
 296:Src/main.c    ****   /* CAN1_RX0_IRQn interrupt configuration */
 238              		.loc 1 296 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 0
 241              		@ frame_needed = 0, uses_anonymous_args = 0
 242 0000 08B5     		push	{r3, lr}
 243              	.LCFI6:
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 3, -8
 246              		.cfi_offset 14, -4
 298:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 247              		.loc 1 298 0
 248 0002 0022     		movs	r2, #0
 249 0004 1146     		mov	r1, r2
 250 0006 1420     		movs	r0, #20
 251 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 252              	.LVL8:
 299:Src/main.c    ****   /* CAN1_RX1_IRQn interrupt configuration */
 253              		.loc 1 299 0
 254 000c 1420     		movs	r0, #20
 255 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 256              	.LVL9:
 301:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 257              		.loc 1 301 0
 258 0012 0022     		movs	r2, #0
 259 0014 1146     		mov	r1, r2
 260 0016 1520     		movs	r0, #21
 261 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 262              	.LVL10:
 302:Src/main.c    ****   /* CAN1_SCE_IRQn interrupt configuration */
 263              		.loc 1 302 0
 264 001c 1520     		movs	r0, #21
 265 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 266              	.LVL11:
 304:Src/main.c    ****   HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 267              		.loc 1 304 0
 268 0022 0022     		movs	r2, #0
 269 0024 1146     		mov	r1, r2
 270 0026 1620     		movs	r0, #22
 271 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 272              	.LVL12:
 305:Src/main.c    ****   /* TIM6_DAC_IRQn interrupt configuration */
 273              		.loc 1 305 0
 274 002c 1620     		movs	r0, #22
 275 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 276              	.LVL13:
 307:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 277              		.loc 1 307 0
 278 0032 0022     		movs	r2, #0
ARM GAS  /tmp/cc8ekGpW.s 			page 17


 279 0034 1146     		mov	r1, r2
 280 0036 3620     		movs	r0, #54
 281 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 282              	.LVL14:
 308:Src/main.c    ****   /* TIM7_IRQn interrupt configuration */
 283              		.loc 1 308 0
 284 003c 3620     		movs	r0, #54
 285 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 286              	.LVL15:
 310:Src/main.c    ****   HAL_NVIC_EnableIRQ(TIM7_IRQn);
 287              		.loc 1 310 0
 288 0042 0022     		movs	r2, #0
 289 0044 1146     		mov	r1, r2
 290 0046 3720     		movs	r0, #55
 291 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 292              	.LVL16:
 311:Src/main.c    ****   /* USART2_IRQn interrupt configuration */
 293              		.loc 1 311 0
 294 004c 3720     		movs	r0, #55
 295 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 296              	.LVL17:
 313:Src/main.c    ****   HAL_NVIC_EnableIRQ(USART2_IRQn);
 297              		.loc 1 313 0
 298 0052 0022     		movs	r2, #0
 299 0054 1146     		mov	r1, r2
 300 0056 2620     		movs	r0, #38
 301 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 302              	.LVL18:
 314:Src/main.c    **** }
 303              		.loc 1 314 0
 304 005c 2620     		movs	r0, #38
 305 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 306              	.LVL19:
 307 0062 08BD     		pop	{r3, pc}
 308              		.cfi_endproc
 309              	.LFE132:
 311              		.section	.text.MX_USART3_UART_Init,"ax",%progbits
 312              		.align	1
 313              		.syntax unified
 314              		.thumb
 315              		.thumb_func
 316              		.fpu fpv4-sp-d16
 318              	MX_USART3_UART_Init:
 319              	.LFB139:
 545:Src/main.c    **** 
 320              		.loc 1 545 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324 0000 08B5     		push	{r3, lr}
 325              	.LCFI7:
 326              		.cfi_def_cfa_offset 8
 327              		.cfi_offset 3, -8
 328              		.cfi_offset 14, -4
 554:Src/main.c    ****   huart3.Init.BaudRate = 115200;
 329              		.loc 1 554 0
 330 0002 0848     		ldr	r0, .L13
ARM GAS  /tmp/cc8ekGpW.s 			page 18


 331 0004 084B     		ldr	r3, .L13+4
 332 0006 0360     		str	r3, [r0]
 555:Src/main.c    ****   huart3.Init.WordLength = UART_WORDLENGTH_8B;
 333              		.loc 1 555 0
 334 0008 4FF4E133 		mov	r3, #115200
 335 000c 4360     		str	r3, [r0, #4]
 556:Src/main.c    ****   huart3.Init.StopBits = UART_STOPBITS_1;
 336              		.loc 1 556 0
 337 000e 0023     		movs	r3, #0
 338 0010 8360     		str	r3, [r0, #8]
 557:Src/main.c    ****   huart3.Init.Parity = UART_PARITY_NONE;
 339              		.loc 1 557 0
 340 0012 C360     		str	r3, [r0, #12]
 558:Src/main.c    ****   huart3.Init.Mode = UART_MODE_TX_RX;
 341              		.loc 1 558 0
 342 0014 0361     		str	r3, [r0, #16]
 559:Src/main.c    ****   huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 343              		.loc 1 559 0
 344 0016 0C22     		movs	r2, #12
 345 0018 4261     		str	r2, [r0, #20]
 560:Src/main.c    ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 346              		.loc 1 560 0
 347 001a 8361     		str	r3, [r0, #24]
 561:Src/main.c    ****   if (HAL_UART_Init(&huart3) != HAL_OK)
 348              		.loc 1 561 0
 349 001c C361     		str	r3, [r0, #28]
 562:Src/main.c    ****   {
 350              		.loc 1 562 0
 351 001e FFF7FEFF 		bl	HAL_UART_Init
 352              	.LVL20:
 353 0022 08BD     		pop	{r3, pc}
 354              	.L14:
 355              		.align	2
 356              	.L13:
 357 0024 00000000 		.word	huart3
 358 0028 00480040 		.word	1073760256
 359              		.cfi_endproc
 360              	.LFE139:
 362              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 363              		.align	1
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu fpv4-sp-d16
 369              	MX_USART2_UART_Init:
 370              	.LFB138:
 513:Src/main.c    **** 
 371              		.loc 1 513 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375 0000 08B5     		push	{r3, lr}
 376              	.LCFI8:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 3, -8
 379              		.cfi_offset 14, -4
 522:Src/main.c    ****   huart2.Init.BaudRate = 2250000;
ARM GAS  /tmp/cc8ekGpW.s 			page 19


 380              		.loc 1 522 0
 381 0002 0848     		ldr	r0, .L17
 382 0004 084B     		ldr	r3, .L17+4
 383 0006 0360     		str	r3, [r0]
 523:Src/main.c    ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 384              		.loc 1 523 0
 385 0008 084B     		ldr	r3, .L17+8
 386 000a 4360     		str	r3, [r0, #4]
 524:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 387              		.loc 1 524 0
 388 000c 0023     		movs	r3, #0
 389 000e 8360     		str	r3, [r0, #8]
 525:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 390              		.loc 1 525 0
 391 0010 C360     		str	r3, [r0, #12]
 526:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 392              		.loc 1 526 0
 393 0012 0361     		str	r3, [r0, #16]
 527:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 394              		.loc 1 527 0
 395 0014 0C22     		movs	r2, #12
 396 0016 4261     		str	r2, [r0, #20]
 528:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 397              		.loc 1 528 0
 398 0018 8361     		str	r3, [r0, #24]
 529:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 399              		.loc 1 529 0
 400 001a C361     		str	r3, [r0, #28]
 530:Src/main.c    ****   {
 401              		.loc 1 530 0
 402 001c FFF7FEFF 		bl	HAL_UART_Init
 403              	.LVL21:
 404 0020 08BD     		pop	{r3, pc}
 405              	.L18:
 406 0022 00BF     		.align	2
 407              	.L17:
 408 0024 00000000 		.word	huart2
 409 0028 00440040 		.word	1073759232
 410 002c 10552200 		.word	2250000
 411              		.cfi_endproc
 412              	.LFE138:
 414              		.section	.text.MX_SDIO_SD_Init,"ax",%progbits
 415              		.align	1
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 419              		.fpu fpv4-sp-d16
 421              	MX_SDIO_SD_Init:
 422              	.LFB135:
 408:Src/main.c    **** 
 423              		.loc 1 408 0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 427 0000 08B5     		push	{r3, lr}
 428              	.LCFI9:
 429              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc8ekGpW.s 			page 20


 430              		.cfi_offset 3, -8
 431              		.cfi_offset 14, -4
 417:Src/main.c    ****   hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 432              		.loc 1 417 0
 433 0002 0648     		ldr	r0, .L21
 434 0004 064B     		ldr	r3, .L21+4
 435 0006 0360     		str	r3, [r0]
 418:Src/main.c    ****   hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 436              		.loc 1 418 0
 437 0008 0023     		movs	r3, #0
 438 000a 4360     		str	r3, [r0, #4]
 419:Src/main.c    ****   hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 439              		.loc 1 419 0
 440 000c 8360     		str	r3, [r0, #8]
 420:Src/main.c    ****   hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 441              		.loc 1 420 0
 442 000e C360     		str	r3, [r0, #12]
 421:Src/main.c    ****   hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 443              		.loc 1 421 0
 444 0010 0361     		str	r3, [r0, #16]
 422:Src/main.c    ****   hsd.Init.ClockDiv = 0;
 445              		.loc 1 422 0
 446 0012 4361     		str	r3, [r0, #20]
 423:Src/main.c    ****   if (HAL_SD_Init(&hsd) != HAL_OK)
 447              		.loc 1 423 0
 448 0014 8361     		str	r3, [r0, #24]
 424:Src/main.c    ****   {
 449              		.loc 1 424 0
 450 0016 FFF7FEFF 		bl	HAL_SD_Init
 451              	.LVL22:
 452 001a 08BD     		pop	{r3, pc}
 453              	.L22:
 454              		.align	2
 455              	.L21:
 456 001c 00000000 		.word	hsd
 457 0020 002C0140 		.word	1073818624
 458              		.cfi_endproc
 459              	.LFE135:
 461              		.section	.text.MX_CAN1_Init,"ax",%progbits
 462              		.align	1
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 466              		.fpu fpv4-sp-d16
 468              	MX_CAN1_Init:
 469              	.LFB134:
 372:Src/main.c    **** 
 470              		.loc 1 372 0
 471              		.cfi_startproc
 472              		@ args = 0, pretend = 0, frame = 0
 473              		@ frame_needed = 0, uses_anonymous_args = 0
 474 0000 08B5     		push	{r3, lr}
 475              	.LCFI10:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 381:Src/main.c    ****   hcan1.Init.Prescaler = 2;
ARM GAS  /tmp/cc8ekGpW.s 			page 21


 479              		.loc 1 381 0
 480 0002 0B48     		ldr	r0, .L25
 481 0004 0B4B     		ldr	r3, .L25+4
 482 0006 0360     		str	r3, [r0]
 382:Src/main.c    ****   hcan1.Init.Mode = CAN_MODE_NORMAL;
 483              		.loc 1 382 0
 484 0008 0223     		movs	r3, #2
 485 000a 4360     		str	r3, [r0, #4]
 383:Src/main.c    ****   hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 486              		.loc 1 383 0
 487 000c 0023     		movs	r3, #0
 488 000e 8360     		str	r3, [r0, #8]
 384:Src/main.c    ****   hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 489              		.loc 1 384 0
 490 0010 C360     		str	r3, [r0, #12]
 385:Src/main.c    ****   hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 491              		.loc 1 385 0
 492 0012 4FF43022 		mov	r2, #720896
 493 0016 0261     		str	r2, [r0, #16]
 386:Src/main.c    ****   hcan1.Init.TimeTriggeredMode = DISABLE;
 494              		.loc 1 386 0
 495 0018 4FF48002 		mov	r2, #4194304
 496 001c 4261     		str	r2, [r0, #20]
 387:Src/main.c    ****   hcan1.Init.AutoBusOff = DISABLE;
 497              		.loc 1 387 0
 498 001e 0376     		strb	r3, [r0, #24]
 388:Src/main.c    ****   hcan1.Init.AutoWakeUp = DISABLE;
 499              		.loc 1 388 0
 500 0020 4376     		strb	r3, [r0, #25]
 389:Src/main.c    ****   hcan1.Init.AutoRetransmission = DISABLE;
 501              		.loc 1 389 0
 502 0022 8376     		strb	r3, [r0, #26]
 390:Src/main.c    ****   hcan1.Init.ReceiveFifoLocked = DISABLE;
 503              		.loc 1 390 0
 504 0024 C376     		strb	r3, [r0, #27]
 391:Src/main.c    ****   hcan1.Init.TransmitFifoPriority = DISABLE;
 505              		.loc 1 391 0
 506 0026 0377     		strb	r3, [r0, #28]
 392:Src/main.c    ****   if (HAL_CAN_Init(&hcan1) != HAL_OK)
 507              		.loc 1 392 0
 508 0028 4377     		strb	r3, [r0, #29]
 393:Src/main.c    ****   {
 509              		.loc 1 393 0
 510 002a FFF7FEFF 		bl	HAL_CAN_Init
 511              	.LVL23:
 512 002e 08BD     		pop	{r3, pc}
 513              	.L26:
 514              		.align	2
 515              	.L25:
 516 0030 00000000 		.word	hcan1
 517 0034 00640040 		.word	1073767424
 518              		.cfi_endproc
 519              	.LFE134:
 521              		.section	.text.MX_TIM6_Init,"ax",%progbits
 522              		.align	1
 523              		.syntax unified
 524              		.thumb
ARM GAS  /tmp/cc8ekGpW.s 			page 22


 525              		.thumb_func
 526              		.fpu fpv4-sp-d16
 528              	MX_TIM6_Init:
 529              	.LFB136:
 439:Src/main.c    **** 
 530              		.loc 1 439 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 8
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534 0000 30B5     		push	{r4, r5, lr}
 535              	.LCFI11:
 536              		.cfi_def_cfa_offset 12
 537              		.cfi_offset 4, -12
 538              		.cfi_offset 5, -8
 539              		.cfi_offset 14, -4
 540 0002 83B0     		sub	sp, sp, #12
 541              	.LCFI12:
 542              		.cfi_def_cfa_offset 24
 445:Src/main.c    **** 
 543              		.loc 1 445 0
 544 0004 0025     		movs	r5, #0
 545 0006 0095     		str	r5, [sp]
 546 0008 0195     		str	r5, [sp, #4]
 450:Src/main.c    ****   htim6.Init.Prescaler = 36;
 547              		.loc 1 450 0
 548 000a 0A4C     		ldr	r4, .L29
 549 000c 0A4B     		ldr	r3, .L29+4
 550 000e 2360     		str	r3, [r4]
 451:Src/main.c    ****   htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 551              		.loc 1 451 0
 552 0010 2423     		movs	r3, #36
 553 0012 6360     		str	r3, [r4, #4]
 452:Src/main.c    ****   htim6.Init.Period = 1000;
 554              		.loc 1 452 0
 555 0014 A560     		str	r5, [r4, #8]
 453:Src/main.c    ****   htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 556              		.loc 1 453 0
 557 0016 4FF47A73 		mov	r3, #1000
 558 001a E360     		str	r3, [r4, #12]
 454:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 559              		.loc 1 454 0
 560 001c A561     		str	r5, [r4, #24]
 455:Src/main.c    ****   {
 561              		.loc 1 455 0
 562 001e 2046     		mov	r0, r4
 563 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 564              	.LVL24:
 459:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 565              		.loc 1 459 0
 566 0024 0095     		str	r5, [sp]
 460:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 567              		.loc 1 460 0
 568 0026 0195     		str	r5, [sp, #4]
 461:Src/main.c    ****   {
 569              		.loc 1 461 0
 570 0028 6946     		mov	r1, sp
 571 002a 2046     		mov	r0, r4
ARM GAS  /tmp/cc8ekGpW.s 			page 23


 572 002c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 573              	.LVL25:
 468:Src/main.c    **** 
 574              		.loc 1 468 0
 575 0030 03B0     		add	sp, sp, #12
 576              	.LCFI13:
 577              		.cfi_def_cfa_offset 12
 578              		@ sp needed
 579 0032 30BD     		pop	{r4, r5, pc}
 580              	.L30:
 581              		.align	2
 582              	.L29:
 583 0034 00000000 		.word	htim6
 584 0038 00100040 		.word	1073745920
 585              		.cfi_endproc
 586              	.LFE136:
 588              		.section	.text.MX_TIM7_Init,"ax",%progbits
 589              		.align	1
 590              		.syntax unified
 591              		.thumb
 592              		.thumb_func
 593              		.fpu fpv4-sp-d16
 595              	MX_TIM7_Init:
 596              	.LFB137:
 476:Src/main.c    **** 
 597              		.loc 1 476 0
 598              		.cfi_startproc
 599              		@ args = 0, pretend = 0, frame = 8
 600              		@ frame_needed = 0, uses_anonymous_args = 0
 601 0000 30B5     		push	{r4, r5, lr}
 602              	.LCFI14:
 603              		.cfi_def_cfa_offset 12
 604              		.cfi_offset 4, -12
 605              		.cfi_offset 5, -8
 606              		.cfi_offset 14, -4
 607 0002 83B0     		sub	sp, sp, #12
 608              	.LCFI15:
 609              		.cfi_def_cfa_offset 24
 482:Src/main.c    **** 
 610              		.loc 1 482 0
 611 0004 0025     		movs	r5, #0
 612 0006 0095     		str	r5, [sp]
 613 0008 0195     		str	r5, [sp, #4]
 487:Src/main.c    ****   htim7.Init.Prescaler = 3600;
 614              		.loc 1 487 0
 615 000a 0B4C     		ldr	r4, .L33
 616 000c 0B4B     		ldr	r3, .L33+4
 617 000e 2360     		str	r3, [r4]
 488:Src/main.c    ****   htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 618              		.loc 1 488 0
 619 0010 4FF46163 		mov	r3, #3600
 620 0014 6360     		str	r3, [r4, #4]
 489:Src/main.c    ****   htim7.Init.Period = 1999;
 621              		.loc 1 489 0
 622 0016 A560     		str	r5, [r4, #8]
 490:Src/main.c    ****   htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 623              		.loc 1 490 0
ARM GAS  /tmp/cc8ekGpW.s 			page 24


 624 0018 40F2CF73 		movw	r3, #1999
 625 001c E360     		str	r3, [r4, #12]
 491:Src/main.c    ****   if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 626              		.loc 1 491 0
 627 001e A561     		str	r5, [r4, #24]
 492:Src/main.c    ****   {
 628              		.loc 1 492 0
 629 0020 2046     		mov	r0, r4
 630 0022 FFF7FEFF 		bl	HAL_TIM_Base_Init
 631              	.LVL26:
 496:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 632              		.loc 1 496 0
 633 0026 0095     		str	r5, [sp]
 497:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 634              		.loc 1 497 0
 635 0028 0195     		str	r5, [sp, #4]
 498:Src/main.c    ****   {
 636              		.loc 1 498 0
 637 002a 6946     		mov	r1, sp
 638 002c 2046     		mov	r0, r4
 639 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 640              	.LVL27:
 505:Src/main.c    **** 
 641              		.loc 1 505 0
 642 0032 03B0     		add	sp, sp, #12
 643              	.LCFI16:
 644              		.cfi_def_cfa_offset 12
 645              		@ sp needed
 646 0034 30BD     		pop	{r4, r5, pc}
 647              	.L34:
 648 0036 00BF     		.align	2
 649              	.L33:
 650 0038 00000000 		.word	htim7
 651 003c 00140040 		.word	1073746944
 652              		.cfi_endproc
 653              	.LFE137:
 655              		.section	.text.MX_ADC1_Init,"ax",%progbits
 656              		.align	1
 657              		.syntax unified
 658              		.thumb
 659              		.thumb_func
 660              		.fpu fpv4-sp-d16
 662              	MX_ADC1_Init:
 663              	.LFB133:
 323:Src/main.c    **** 
 664              		.loc 1 323 0
 665              		.cfi_startproc
 666              		@ args = 0, pretend = 0, frame = 16
 667              		@ frame_needed = 0, uses_anonymous_args = 0
 668 0000 70B5     		push	{r4, r5, r6, lr}
 669              	.LCFI17:
 670              		.cfi_def_cfa_offset 16
 671              		.cfi_offset 4, -16
 672              		.cfi_offset 5, -12
 673              		.cfi_offset 6, -8
 674              		.cfi_offset 14, -4
 675 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/cc8ekGpW.s 			page 25


 676              	.LCFI18:
 677              		.cfi_def_cfa_offset 32
 329:Src/main.c    **** 
 678              		.loc 1 329 0
 679 0004 0025     		movs	r5, #0
 680 0006 0095     		str	r5, [sp]
 681 0008 0195     		str	r5, [sp, #4]
 682 000a 0295     		str	r5, [sp, #8]
 683 000c 0395     		str	r5, [sp, #12]
 336:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 684              		.loc 1 336 0
 685 000e 0F4C     		ldr	r4, .L37
 686 0010 0F4B     		ldr	r3, .L37+4
 687 0012 2360     		str	r3, [r4]
 337:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 688              		.loc 1 337 0
 689 0014 6560     		str	r5, [r4, #4]
 338:Src/main.c    ****   hadc1.Init.ScanConvMode = DISABLE;
 690              		.loc 1 338 0
 691 0016 A560     		str	r5, [r4, #8]
 339:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 692              		.loc 1 339 0
 693 0018 2561     		str	r5, [r4, #16]
 340:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 694              		.loc 1 340 0
 695 001a 2576     		strb	r5, [r4, #24]
 341:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 696              		.loc 1 341 0
 697 001c 84F82050 		strb	r5, [r4, #32]
 342:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 698              		.loc 1 342 0
 699 0020 E562     		str	r5, [r4, #44]
 343:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 700              		.loc 1 343 0
 701 0022 0C4B     		ldr	r3, .L37+8
 702 0024 A362     		str	r3, [r4, #40]
 344:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 703              		.loc 1 344 0
 704 0026 E560     		str	r5, [r4, #12]
 345:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 705              		.loc 1 345 0
 706 0028 0126     		movs	r6, #1
 707 002a E661     		str	r6, [r4, #28]
 346:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 708              		.loc 1 346 0
 709 002c 84F83050 		strb	r5, [r4, #48]
 347:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 710              		.loc 1 347 0
 711 0030 6661     		str	r6, [r4, #20]
 348:Src/main.c    ****   {
 712              		.loc 1 348 0
 713 0032 2046     		mov	r0, r4
 714 0034 FFF7FEFF 		bl	HAL_ADC_Init
 715              	.LVL28:
 354:Src/main.c    ****   sConfig.Rank = 1;
 716              		.loc 1 354 0
 717 0038 0095     		str	r5, [sp]
ARM GAS  /tmp/cc8ekGpW.s 			page 26


 355:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 718              		.loc 1 355 0
 719 003a 0196     		str	r6, [sp, #4]
 356:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 720              		.loc 1 356 0
 721 003c 0295     		str	r5, [sp, #8]
 357:Src/main.c    ****   {
 722              		.loc 1 357 0
 723 003e 6946     		mov	r1, sp
 724 0040 2046     		mov	r0, r4
 725 0042 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 726              	.LVL29:
 364:Src/main.c    **** 
 727              		.loc 1 364 0
 728 0046 04B0     		add	sp, sp, #16
 729              	.LCFI19:
 730              		.cfi_def_cfa_offset 16
 731              		@ sp needed
 732 0048 70BD     		pop	{r4, r5, r6, pc}
 733              	.L38:
 734 004a 00BF     		.align	2
 735              	.L37:
 736 004c 00000000 		.word	hadc1
 737 0050 00200140 		.word	1073815552
 738 0054 0100000F 		.word	251658241
 739              		.cfi_endproc
 740              	.LFE133:
 742              		.section	.text.SystemClock_Config,"ax",%progbits
 743              		.align	1
 744              		.global	SystemClock_Config
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu fpv4-sp-d16
 750              	SystemClock_Config:
 751              	.LFB131:
 246:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 752              		.loc 1 246 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 176
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756 0000 30B5     		push	{r4, r5, lr}
 757              	.LCFI20:
 758              		.cfi_def_cfa_offset 12
 759              		.cfi_offset 4, -12
 760              		.cfi_offset 5, -8
 761              		.cfi_offset 14, -4
 762 0002 ADB0     		sub	sp, sp, #180
 763              	.LCFI21:
 764              		.cfi_def_cfa_offset 192
 247:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 765              		.loc 1 247 0
 766 0004 3422     		movs	r2, #52
 767 0006 0021     		movs	r1, #0
 768 0008 1FA8     		add	r0, sp, #124
 769 000a FFF7FEFF 		bl	memset
 770              	.LVL30:
ARM GAS  /tmp/cc8ekGpW.s 			page 27


 248:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 771              		.loc 1 248 0
 772 000e 0024     		movs	r4, #0
 773 0010 1A94     		str	r4, [sp, #104]
 774 0012 1B94     		str	r4, [sp, #108]
 775 0014 1C94     		str	r4, [sp, #112]
 776 0016 1D94     		str	r4, [sp, #116]
 777 0018 1E94     		str	r4, [sp, #120]
 249:Src/main.c    **** 
 778              		.loc 1 249 0
 779 001a 5C22     		movs	r2, #92
 780 001c 2146     		mov	r1, r4
 781 001e 03A8     		add	r0, sp, #12
 782 0020 FFF7FEFF 		bl	memset
 783              	.LVL31:
 784              	.LBB8:
 253:Src/main.c    ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 785              		.loc 1 253 0
 786 0024 0194     		str	r4, [sp, #4]
 787 0026 214B     		ldr	r3, .L41
 788 0028 1A6C     		ldr	r2, [r3, #64]
 789 002a 42F08052 		orr	r2, r2, #268435456
 790 002e 1A64     		str	r2, [r3, #64]
 791 0030 1B6C     		ldr	r3, [r3, #64]
 792 0032 03F08053 		and	r3, r3, #268435456
 793 0036 0193     		str	r3, [sp, #4]
 794 0038 019B     		ldr	r3, [sp, #4]
 795              	.LBE8:
 796              	.LBB9:
 254:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 797              		.loc 1 254 0
 798 003a 0294     		str	r4, [sp, #8]
 799 003c 1C4B     		ldr	r3, .L41+4
 800 003e 1A68     		ldr	r2, [r3]
 801 0040 42F44042 		orr	r2, r2, #49152
 802 0044 1A60     		str	r2, [r3]
 803 0046 1B68     		ldr	r3, [r3]
 804 0048 03F44043 		and	r3, r3, #49152
 805 004c 0293     		str	r3, [sp, #8]
 806 004e 029B     		ldr	r3, [sp, #8]
 807              	.LBE9:
 257:Src/main.c    ****   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 808              		.loc 1 257 0
 809 0050 0123     		movs	r3, #1
 810 0052 1F93     		str	r3, [sp, #124]
 258:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 811              		.loc 1 258 0
 812 0054 4FF4A023 		mov	r3, #327680
 813 0058 2093     		str	r3, [sp, #128]
 259:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 814              		.loc 1 259 0
 815 005a 0225     		movs	r5, #2
 816 005c 2595     		str	r5, [sp, #148]
 260:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLM = 8;
 817              		.loc 1 260 0
 818 005e 4FF48003 		mov	r3, #4194304
 819 0062 2693     		str	r3, [sp, #152]
ARM GAS  /tmp/cc8ekGpW.s 			page 28


 261:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLN = 288;
 820              		.loc 1 261 0
 821 0064 0823     		movs	r3, #8
 822 0066 2793     		str	r3, [sp, #156]
 262:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 823              		.loc 1 262 0
 824 0068 4FF49072 		mov	r2, #288
 825 006c 2892     		str	r2, [sp, #160]
 263:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLQ = 8;
 826              		.loc 1 263 0
 827 006e 2995     		str	r5, [sp, #164]
 264:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLR = 2;
 828              		.loc 1 264 0
 829 0070 2A93     		str	r3, [sp, #168]
 265:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 830              		.loc 1 265 0
 831 0072 2B95     		str	r5, [sp, #172]
 266:Src/main.c    ****   {
 832              		.loc 1 266 0
 833 0074 1FA8     		add	r0, sp, #124
 834 0076 FFF7FEFF 		bl	HAL_RCC_OscConfig
 835              	.LVL32:
 272:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 836              		.loc 1 272 0
 837 007a 0F23     		movs	r3, #15
 838 007c 1A93     		str	r3, [sp, #104]
 273:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 839              		.loc 1 273 0
 840 007e 1B95     		str	r5, [sp, #108]
 274:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 841              		.loc 1 274 0
 842 0080 1C94     		str	r4, [sp, #112]
 275:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 843              		.loc 1 275 0
 844 0082 4FF4A053 		mov	r3, #5120
 845 0086 1D93     		str	r3, [sp, #116]
 276:Src/main.c    **** 
 846              		.loc 1 276 0
 847 0088 4FF48053 		mov	r3, #4096
 848 008c 1E93     		str	r3, [sp, #120]
 278:Src/main.c    ****   {
 849              		.loc 1 278 0
 850 008e 0421     		movs	r1, #4
 851 0090 1AA8     		add	r0, sp, #104
 852 0092 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 853              	.LVL33:
 282:Src/main.c    ****   PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 854              		.loc 1 282 0
 855 0096 4FF44073 		mov	r3, #768
 856 009a 0393     		str	r3, [sp, #12]
 283:Src/main.c    ****   PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 857              		.loc 1 283 0
 858 009c 1894     		str	r4, [sp, #96]
 284:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 859              		.loc 1 284 0
 860 009e 1494     		str	r4, [sp, #80]
 285:Src/main.c    ****   {
ARM GAS  /tmp/cc8ekGpW.s 			page 29


 861              		.loc 1 285 0
 862 00a0 03A8     		add	r0, sp, #12
 863 00a2 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 864              	.LVL34:
 289:Src/main.c    **** 
 865              		.loc 1 289 0
 866 00a6 2DB0     		add	sp, sp, #180
 867              	.LCFI22:
 868              		.cfi_def_cfa_offset 12
 869              		@ sp needed
 870 00a8 30BD     		pop	{r4, r5, pc}
 871              	.L42:
 872 00aa 00BF     		.align	2
 873              	.L41:
 874 00ac 00380240 		.word	1073887232
 875 00b0 00700040 		.word	1073770496
 876              		.cfi_endproc
 877              	.LFE131:
 879              		.section	.text.main,"ax",%progbits
 880              		.align	1
 881              		.global	main
 882              		.syntax unified
 883              		.thumb
 884              		.thumb_func
 885              		.fpu fpv4-sp-d16
 887              	main:
 888              	.LFB130:
 116:Src/main.c    ****   /* USER CODE BEGIN 1 */
 889              		.loc 1 116 0
 890              		.cfi_startproc
 891              		@ args = 0, pretend = 0, frame = 40
 892              		@ frame_needed = 0, uses_anonymous_args = 0
 893 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 894              	.LCFI23:
 895              		.cfi_def_cfa_offset 24
 896              		.cfi_offset 4, -24
 897              		.cfi_offset 5, -20
 898              		.cfi_offset 6, -16
 899              		.cfi_offset 7, -12
 900              		.cfi_offset 8, -8
 901              		.cfi_offset 14, -4
 902 0004 8AB0     		sub	sp, sp, #40
 903              	.LCFI24:
 904              		.cfi_def_cfa_offset 64
 124:Src/main.c    **** 
 905              		.loc 1 124 0
 906 0006 FFF7FEFF 		bl	HAL_Init
 907              	.LVL35:
 131:Src/main.c    **** 
 908              		.loc 1 131 0
 909 000a FFF7FEFF 		bl	SystemClock_Config
 910              	.LVL36:
 138:Src/main.c    ****   MX_DMA_Init();
 911              		.loc 1 138 0
 912 000e FFF7FEFF 		bl	MX_GPIO_Init
 913              	.LVL37:
 139:Src/main.c    ****   MX_USART3_UART_Init();
ARM GAS  /tmp/cc8ekGpW.s 			page 30


 914              		.loc 1 139 0
 915 0012 FFF7FEFF 		bl	MX_DMA_Init
 916              	.LVL38:
 140:Src/main.c    ****   MX_SDIO_SD_Init();
 917              		.loc 1 140 0
 918 0016 FFF7FEFF 		bl	MX_USART3_UART_Init
 919              	.LVL39:
 141:Src/main.c    ****   MX_USART2_UART_Init();
 920              		.loc 1 141 0
 921 001a FFF7FEFF 		bl	MX_SDIO_SD_Init
 922              	.LVL40:
 142:Src/main.c    ****   MX_CAN1_Init();
 923              		.loc 1 142 0
 924 001e FFF7FEFF 		bl	MX_USART2_UART_Init
 925              	.LVL41:
 143:Src/main.c    ****   MX_TIM6_Init();
 926              		.loc 1 143 0
 927 0022 FFF7FEFF 		bl	MX_CAN1_Init
 928              	.LVL42:
 144:Src/main.c    ****   MX_TIM7_Init();
 929              		.loc 1 144 0
 930 0026 FFF7FEFF 		bl	MX_TIM6_Init
 931              	.LVL43:
 145:Src/main.c    ****   MX_ADC1_Init();
 932              		.loc 1 145 0
 933 002a FFF7FEFF 		bl	MX_TIM7_Init
 934              	.LVL44:
 146:Src/main.c    **** 
 935              		.loc 1 146 0
 936 002e FFF7FEFF 		bl	MX_ADC1_Init
 937              	.LVL45:
 149:Src/main.c    ****   /* USER CODE BEGIN 2 */
 938              		.loc 1 149 0
 939 0032 FFF7FEFF 		bl	MX_NVIC_Init
 940              	.LVL46:
 151:Src/main.c    ****   sFilter.FilterIdLow = 0;
 941              		.loc 1 151 0
 942 0036 A849     		ldr	r1, .L48
 943 0038 0023     		movs	r3, #0
 944 003a 8B61     		str	r3, [r1, #24]
 152:Src/main.c    ****   sFilter.FilterIdHigh = 0;
 945              		.loc 1 152 0
 946 003c 4B60     		str	r3, [r1, #4]
 153:Src/main.c    ****   sFilter.FilterMaskIdHigh = 0;
 947              		.loc 1 153 0
 948 003e 0B60     		str	r3, [r1]
 154:Src/main.c    ****   sFilter.FilterMaskIdLow = 0;
 949              		.loc 1 154 0
 950 0040 8B60     		str	r3, [r1, #8]
 155:Src/main.c    ****   sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 951              		.loc 1 155 0
 952 0042 CB60     		str	r3, [r1, #12]
 156:Src/main.c    ****   sFilter.FilterBank = 0;
 953              		.loc 1 156 0
 954 0044 0B61     		str	r3, [r1, #16]
 157:Src/main.c    ****   sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 955              		.loc 1 157 0
ARM GAS  /tmp/cc8ekGpW.s 			page 31


 956 0046 4B61     		str	r3, [r1, #20]
 158:Src/main.c    ****   sFilter.FilterActivation = ENABLE;
 957              		.loc 1 158 0
 958 0048 CB61     		str	r3, [r1, #28]
 159:Src/main.c    ****   HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 959              		.loc 1 159 0
 960 004a 0126     		movs	r6, #1
 961 004c 0E62     		str	r6, [r1, #32]
 160:Src/main.c    ****   HAL_UART_Transmit(&huart2, (uint8_t *)"can init done_1\r\n", 17, 5);
 962              		.loc 1 160 0
 963 004e A34C     		ldr	r4, .L48+4
 964 0050 2046     		mov	r0, r4
 965 0052 FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 966              	.LVL47:
 161:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start_1\r\n", 9, 5);
 967              		.loc 1 161 0
 968 0056 A24D     		ldr	r5, .L48+8
 969 0058 0523     		movs	r3, #5
 970 005a 1122     		movs	r2, #17
 971 005c A149     		ldr	r1, .L48+12
 972 005e 2846     		mov	r0, r5
 973 0060 FFF7FEFF 		bl	HAL_UART_Transmit
 974              	.LVL48:
 162:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 975              		.loc 1 162 0
 976 0064 A04F     		ldr	r7, .L48+16
 977 0066 0523     		movs	r3, #5
 978 0068 0922     		movs	r2, #9
 979 006a A049     		ldr	r1, .L48+20
 980 006c 3846     		mov	r0, r7
 981 006e FFF7FEFF 		bl	HAL_UART_Transmit
 982              	.LVL49:
 163:Src/main.c    ****   HAL_Delay(500);
 983              		.loc 1 163 0
 984 0072 DFF8A082 		ldr	r8, .L48+60
 985 0076 3146     		mov	r1, r6
 986 0078 4046     		mov	r0, r8
 987 007a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 988              	.LVL50:
 164:Src/main.c    ****   HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 989              		.loc 1 164 0
 990 007e 4FF4FA70 		mov	r0, #500
 991 0082 FFF7FEFF 		bl	HAL_Delay
 992              	.LVL51:
 165:Src/main.c    ****   HAL_Delay(500);
 993              		.loc 1 165 0
 994 0086 3146     		mov	r1, r6
 995 0088 4046     		mov	r0, r8
 996 008a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 997              	.LVL52:
 166:Src/main.c    **** 
 998              		.loc 1 166 0
 999 008e 4FF4FA70 		mov	r0, #500
 1000 0092 FFF7FEFF 		bl	HAL_Delay
 1001              	.LVL53:
 168:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 1002              		.loc 1 168 0
ARM GAS  /tmp/cc8ekGpW.s 			page 32


 1003 0096 2046     		mov	r0, r4
 1004 0098 FFF7FEFF 		bl	HAL_CAN_Start
 1005              	.LVL54:
 169:Src/main.c    ****   HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 1006              		.loc 1 169 0
 1007 009c 1421     		movs	r1, #20
 1008 009e 2046     		mov	r0, r4
 1009 00a0 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1010              	.LVL55:
 170:Src/main.c    **** 
 1011              		.loc 1 170 0
 1012 00a4 1521     		movs	r1, #21
 1013 00a6 2046     		mov	r0, r4
 1014 00a8 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 1015              	.LVL56:
 172:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"start\r\n", 7, 5);
 1016              		.loc 1 172 0
 1017 00ac 0523     		movs	r3, #5
 1018 00ae 0F22     		movs	r2, #15
 1019 00b0 8F49     		ldr	r1, .L48+24
 1020 00b2 2846     		mov	r0, r5
 1021 00b4 FFF7FEFF 		bl	HAL_UART_Transmit
 1022              	.LVL57:
 173:Src/main.c    **** 
 1023              		.loc 1 173 0
 1024 00b8 0523     		movs	r3, #5
 1025 00ba 0722     		movs	r2, #7
 1026 00bc 8D49     		ldr	r1, .L48+28
 1027 00be 3846     		mov	r0, r7
 1028 00c0 FFF7FEFF 		bl	HAL_UART_Transmit
 1029              	.LVL58:
 175:Src/main.c    ****   HAL_TIM_Base_Start(&htim7);
 1030              		.loc 1 175 0
 1031 00c4 8C4E     		ldr	r6, .L48+32
 1032 00c6 3046     		mov	r0, r6
 1033 00c8 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1034              	.LVL59:
 176:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim6);
 1035              		.loc 1 176 0
 1036 00cc 8B4C     		ldr	r4, .L48+36
 1037 00ce 2046     		mov	r0, r4
 1038 00d0 FFF7FEFF 		bl	HAL_TIM_Base_Start
 1039              	.LVL60:
 177:Src/main.c    ****   HAL_TIM_Base_Start_IT(&htim7);
 1040              		.loc 1 177 0
 1041 00d4 3046     		mov	r0, r6
 1042 00d6 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1043              	.LVL61:
 178:Src/main.c    **** 
 1044              		.loc 1 178 0
 1045 00da 2046     		mov	r0, r4
 1046 00dc FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1047              	.LVL62:
 180:Src/main.c    **** 
 1048              		.loc 1 180 0
 1049 00e0 2322     		movs	r2, #35
 1050 00e2 8749     		ldr	r1, .L48+40
ARM GAS  /tmp/cc8ekGpW.s 			page 33


 1051 00e4 2846     		mov	r0, r5
 1052 00e6 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1053              	.LVL63:
 1054              	.L44:
 193:Src/main.c    ****     HAL_Delay(1);
 1055              		.loc 1 193 0
 1056 00ea 864A     		ldr	r2, .L48+44
 1057 00ec 1368     		ldr	r3, [r2]
 1058 00ee 0133     		adds	r3, r3, #1
 1059 00f0 1360     		str	r3, [r2]
 194:Src/main.c    ****     //print(&huart2,"ciao\r\n");
 1060              		.loc 1 194 0
 1061 00f2 0120     		movs	r0, #1
 1062 00f4 FFF7FEFF 		bl	HAL_Delay
 1063              	.LVL64:
 202:Src/main.c    ****     {
 1064              		.loc 1 202 0
 1065 00f8 834B     		ldr	r3, .L48+48
 1066 00fa 1B68     		ldr	r3, [r3]
 1067 00fc 012B     		cmp	r3, #1
 1068 00fe F4D1     		bne	.L44
 1069              	.LBB10:
 204:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t *)msg_can_to_send, strlen(msg_can_to_send), 5);
 1070              		.loc 1 204 0
 1071 0100 0025     		movs	r5, #0
 1072 0102 814B     		ldr	r3, .L48+48
 1073 0104 1D60     		str	r5, [r3]
 205:Src/main.c    ****       HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 5);
 1074              		.loc 1 205 0
 1075 0106 814C     		ldr	r4, .L48+52
 1076 0108 2046     		mov	r0, r4
 1077 010a FFF7FEFF 		bl	strlen
 1078              	.LVL65:
 1079 010e 744E     		ldr	r6, .L48+8
 1080 0110 0523     		movs	r3, #5
 1081 0112 82B2     		uxth	r2, r0
 1082 0114 2146     		mov	r1, r4
 1083 0116 3046     		mov	r0, r6
 1084 0118 FFF7FEFF 		bl	HAL_UART_Transmit
 1085              	.LVL66:
 206:Src/main.c    **** 
 1086              		.loc 1 206 0
 1087 011c 7C4F     		ldr	r7, .L48+56
 1088 011e 0523     		movs	r3, #5
 1089 0120 0222     		movs	r2, #2
 1090 0122 3946     		mov	r1, r7
 1091 0124 3046     		mov	r0, r6
 1092 0126 FFF7FEFF 		bl	HAL_UART_Transmit
 1093              	.LVL67:
 208:Src/main.c    ****       HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, 5);
 1094              		.loc 1 208 0
 1095 012a 2046     		mov	r0, r4
 1096 012c FFF7FEFF 		bl	strlen
 1097              	.LVL68:
 1098 0130 6D4E     		ldr	r6, .L48+16
 1099 0132 0523     		movs	r3, #5
 1100 0134 82B2     		uxth	r2, r0
ARM GAS  /tmp/cc8ekGpW.s 			page 34


 1101 0136 2146     		mov	r1, r4
 1102 0138 3046     		mov	r0, r6
 1103 013a FFF7FEFF 		bl	HAL_UART_Transmit
 1104              	.LVL69:
 209:Src/main.c    **** 
 1105              		.loc 1 209 0
 1106 013e 0523     		movs	r3, #5
 1107 0140 0222     		movs	r2, #2
 1108 0142 3946     		mov	r1, r7
 1109 0144 3046     		mov	r0, r6
 1110 0146 FFF7FEFF 		bl	HAL_UART_Transmit
 1111              	.LVL70:
 213:Src/main.c    ****       int zero = (int)('0');
 1112              		.loc 1 213 0
 1113 014a 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1114 014c 8DF80430 		strb	r3, [sp, #4]
 1115 0150 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 1116 0152 8DF80530 		strb	r3, [sp, #5]
 1117 0156 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
 1118 0158 8DF80630 		strb	r3, [sp, #6]
 1119 015c 8DF80750 		strb	r5, [sp, #7]
 1120              	.LVL71:
 215:Src/main.c    ****       messaggio_can[1] = ((int)(msg_can_to_send[8]) - zero) * 100 + ((int)(msg_can_to_send[9]) - ze
 1121              		.loc 1 215 0
 1122 0160 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
 1123 0162 303B     		subs	r3, r3, #48
 1124 0164 6279     		ldrb	r2, [r4, #5]	@ zero_extendqisi2
 1125 0166 303A     		subs	r2, r2, #48
 1126 0168 03EB8303 		add	r3, r3, r3, lsl #2
 1127 016c 03EB8303 		add	r3, r3, r3, lsl #2
 1128 0170 9900     		lsls	r1, r3, #2
 1129 0172 02EB8203 		add	r3, r2, r2, lsl #2
 1130 0176 5A00     		lsls	r2, r3, #1
 1131 0178 1144     		add	r1, r1, r2
 1132 017a C9B2     		uxtb	r1, r1
 1133 017c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 1134 017e 303B     		subs	r3, r3, #48
 1135 0180 51FA83F1 		uxtab	r1, r1, r3
 1136 0184 8DF80810 		strb	r1, [sp, #8]
 216:Src/main.c    ****       messaggio_can[2] = ((int)(msg_can_to_send[12]) - zero) * 100 + ((int)(msg_can_to_send[13]) - 
 1137              		.loc 1 216 0
 1138 0188 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 1139 018a 303B     		subs	r3, r3, #48
 1140 018c 627A     		ldrb	r2, [r4, #9]	@ zero_extendqisi2
 1141 018e 303A     		subs	r2, r2, #48
 1142 0190 03EB8303 		add	r3, r3, r3, lsl #2
 1143 0194 03EB8303 		add	r3, r3, r3, lsl #2
 1144 0198 9900     		lsls	r1, r3, #2
 1145 019a 02EB8203 		add	r3, r2, r2, lsl #2
 1146 019e 5A00     		lsls	r2, r3, #1
 1147 01a0 1144     		add	r1, r1, r2
 1148 01a2 C9B2     		uxtb	r1, r1
 1149 01a4 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 1150 01a6 303B     		subs	r3, r3, #48
 1151 01a8 51FA83F1 		uxtab	r1, r1, r3
 1152 01ac 8DF80910 		strb	r1, [sp, #9]
 217:Src/main.c    ****       messaggio_can[3] = ((int)(msg_can_to_send[16]) - zero) * 100 + ((int)(msg_can_to_send[17]) - 
ARM GAS  /tmp/cc8ekGpW.s 			page 35


 1153              		.loc 1 217 0
 1154 01b0 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 1155 01b2 303B     		subs	r3, r3, #48
 1156 01b4 627B     		ldrb	r2, [r4, #13]	@ zero_extendqisi2
 1157 01b6 303A     		subs	r2, r2, #48
 1158 01b8 03EB8303 		add	r3, r3, r3, lsl #2
 1159 01bc 03EB8303 		add	r3, r3, r3, lsl #2
 1160 01c0 9900     		lsls	r1, r3, #2
 1161 01c2 02EB8203 		add	r3, r2, r2, lsl #2
 1162 01c6 5A00     		lsls	r2, r3, #1
 1163 01c8 1144     		add	r1, r1, r2
 1164 01ca C9B2     		uxtb	r1, r1
 1165 01cc A37B     		ldrb	r3, [r4, #14]	@ zero_extendqisi2
 1166 01ce 303B     		subs	r3, r3, #48
 1167 01d0 51FA83F1 		uxtab	r1, r1, r3
 1168 01d4 8DF80A10 		strb	r1, [sp, #10]
 218:Src/main.c    ****       messaggio_can[4] = ((int)(msg_can_to_send[20]) - zero) * 100 + ((int)(msg_can_to_send[21]) - 
 1169              		.loc 1 218 0
 1170 01d8 237C     		ldrb	r3, [r4, #16]	@ zero_extendqisi2
 1171 01da 303B     		subs	r3, r3, #48
 1172 01dc 627C     		ldrb	r2, [r4, #17]	@ zero_extendqisi2
 1173 01de 303A     		subs	r2, r2, #48
 1174 01e0 03EB8303 		add	r3, r3, r3, lsl #2
 1175 01e4 03EB8303 		add	r3, r3, r3, lsl #2
 1176 01e8 9900     		lsls	r1, r3, #2
 1177 01ea 02EB8203 		add	r3, r2, r2, lsl #2
 1178 01ee 5A00     		lsls	r2, r3, #1
 1179 01f0 1144     		add	r1, r1, r2
 1180 01f2 C9B2     		uxtb	r1, r1
 1181 01f4 A37C     		ldrb	r3, [r4, #18]	@ zero_extendqisi2
 1182 01f6 303B     		subs	r3, r3, #48
 1183 01f8 51FA83F1 		uxtab	r1, r1, r3
 1184 01fc 8DF80B10 		strb	r1, [sp, #11]
 219:Src/main.c    ****       messaggio_can[5] = ((int)(msg_can_to_send[24]) - zero) * 100 + ((int)(msg_can_to_send[25]) - 
 1185              		.loc 1 219 0
 1186 0200 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 1187 0202 303B     		subs	r3, r3, #48
 1188 0204 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 1189 0206 303A     		subs	r2, r2, #48
 1190 0208 03EB8303 		add	r3, r3, r3, lsl #2
 1191 020c 03EB8303 		add	r3, r3, r3, lsl #2
 1192 0210 9900     		lsls	r1, r3, #2
 1193 0212 02EB8203 		add	r3, r2, r2, lsl #2
 1194 0216 5A00     		lsls	r2, r3, #1
 1195 0218 1144     		add	r1, r1, r2
 1196 021a C9B2     		uxtb	r1, r1
 1197 021c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 1198 021e 303B     		subs	r3, r3, #48
 1199 0220 51FA83F1 		uxtab	r1, r1, r3
 1200 0224 8DF80C10 		strb	r1, [sp, #12]
 220:Src/main.c    ****       messaggio_can[6] = ((int)(msg_can_to_send[26]) - zero) * 100 + ((int)(msg_can_to_send[29]) - 
 1201              		.loc 1 220 0
 1202 0228 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 1203 022a 303B     		subs	r3, r3, #48
 1204 022c 617E     		ldrb	r1, [r4, #25]	@ zero_extendqisi2
 1205 022e 3039     		subs	r1, r1, #48
 1206 0230 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  /tmp/cc8ekGpW.s 			page 36


 1207 0234 03EB8303 		add	r3, r3, r3, lsl #2
 1208 0238 9A00     		lsls	r2, r3, #2
 1209 023a 01EB8103 		add	r3, r1, r1, lsl #2
 1210 023e 5900     		lsls	r1, r3, #1
 1211 0240 0A44     		add	r2, r2, r1
 1212 0242 D2B2     		uxtb	r2, r2
 1213 0244 A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 1214 0246 303B     		subs	r3, r3, #48
 1215 0248 52FA83F2 		uxtab	r2, r2, r3
 1216 024c 8DF80D20 		strb	r2, [sp, #13]
 221:Src/main.c    ****       messaggio_can[7] = ((int)(msg_can_to_send[30]) - zero) * 100 + ((int)(msg_can_to_send[31]) - 
 1217              		.loc 1 221 0
 1218 0250 617F     		ldrb	r1, [r4, #29]	@ zero_extendqisi2
 1219 0252 3039     		subs	r1, r1, #48
 1220 0254 03EB8303 		add	r3, r3, r3, lsl #2
 1221 0258 03EB8303 		add	r3, r3, r3, lsl #2
 1222 025c 9A00     		lsls	r2, r3, #2
 1223 025e 01EB8103 		add	r3, r1, r1, lsl #2
 1224 0262 5900     		lsls	r1, r3, #1
 1225 0264 0A44     		add	r2, r2, r1
 1226 0266 D2B2     		uxtb	r2, r2
 1227 0268 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 1228 026a 303B     		subs	r3, r3, #48
 1229 026c 52FA83F2 		uxtab	r2, r2, r3
 1230 0270 8DF80E20 		strb	r2, [sp, #14]
 222:Src/main.c    **** 
 1231              		.loc 1 222 0
 1232 0274 E27F     		ldrb	r2, [r4, #31]	@ zero_extendqisi2
 1233 0276 303A     		subs	r2, r2, #48
 1234 0278 03EB8303 		add	r3, r3, r3, lsl #2
 1235 027c 03EB8303 		add	r3, r3, r3, lsl #2
 1236 0280 9900     		lsls	r1, r3, #2
 1237 0282 02EB8203 		add	r3, r2, r2, lsl #2
 1238 0286 5A00     		lsls	r2, r3, #1
 1239 0288 1144     		add	r1, r1, r2
 1240 028a C9B2     		uxtb	r1, r1
 1241 028c 94F82230 		ldrb	r3, [r4, #34]	@ zero_extendqisi2
 1242 0290 303B     		subs	r3, r3, #48
 1243 0292 51FA83F1 		uxtab	r1, r1, r3
 1244 0296 8DF80F10 		strb	r1, [sp, #15]
 225:Src/main.c    ****       TxHeader.IDE = CAN_ID_STD;
 1245              		.loc 1 225 0
 1246 029a 01A8     		add	r0, sp, #4
 1247 029c FFF7FEFF 		bl	atoi
 1248              	.LVL72:
 1249 02a0 0490     		str	r0, [sp, #16]
 226:Src/main.c    ****       TxHeader.RTR = CAN_RTR_DATA;
 1250              		.loc 1 226 0
 1251 02a2 0695     		str	r5, [sp, #24]
 227:Src/main.c    ****       TxHeader.DLC = 8;
 1252              		.loc 1 227 0
 1253 02a4 0795     		str	r5, [sp, #28]
 228:Src/main.c    ****       TxHeader.TransmitGlobalTime = DISABLE;
 1254              		.loc 1 228 0
 1255 02a6 0823     		movs	r3, #8
 1256 02a8 0893     		str	r3, [sp, #32]
 229:Src/main.c    **** 
ARM GAS  /tmp/cc8ekGpW.s 			page 37


 1257              		.loc 1 229 0
 1258 02aa 8DF82450 		strb	r5, [sp, #36]
 231:Src/main.c    ****       {
 1259              		.loc 1 231 0
 1260 02ae 0B48     		ldr	r0, .L48+4
 1261 02b0 FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1262              	.LVL73:
 1263 02b4 0028     		cmp	r0, #0
 1264 02b6 3FF418AF 		beq	.L44
 231:Src/main.c    ****       {
 1265              		.loc 1 231 0 is_stmt 0 discriminator 1
 1266 02ba 0121     		movs	r1, #1
 1267 02bc 0748     		ldr	r0, .L48+4
 1268 02be FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 1269              	.LVL74:
 1270 02c2 0028     		cmp	r0, #0
 1271 02c4 7FF411AF 		bne	.L44
 233:Src/main.c    ****       }
 1272              		.loc 1 233 0 is_stmt 1
 1273 02c8 6B46     		mov	r3, sp
 1274 02ca 02AA     		add	r2, sp, #8
 1275 02cc 04A9     		add	r1, sp, #16
 1276 02ce 0348     		ldr	r0, .L48+4
 1277 02d0 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1278              	.LVL75:
 1279 02d4 09E7     		b	.L44
 1280              	.L49:
 1281 02d6 00BF     		.align	2
 1282              	.L48:
 1283 02d8 00000000 		.word	sFilter
 1284 02dc 00000000 		.word	hcan1
 1285 02e0 00000000 		.word	huart2
 1286 02e4 00000000 		.word	.LC0
 1287 02e8 00000000 		.word	huart3
 1288 02ec 14000000 		.word	.LC1
 1289 02f0 20000000 		.word	.LC2
 1290 02f4 30000000 		.word	.LC3
 1291 02f8 00000000 		.word	htim6
 1292 02fc 00000000 		.word	htim7
 1293 0300 00000000 		.word	huart_rx
 1294 0304 00000000 		.word	.LANCHOR0
 1295 0308 00000000 		.word	.LANCHOR1
 1296 030c 00000000 		.word	msg_can_to_send
 1297 0310 38000000 		.word	.LC4
 1298 0314 00040240 		.word	1073873920
 1299              	.LBE10:
 1300              		.cfi_endproc
 1301              	.LFE130:
 1303              		.section	.text.CAN_Send,"ax",%progbits
 1304              		.align	1
 1305              		.global	CAN_Send
 1306              		.syntax unified
 1307              		.thumb
 1308              		.thumb_func
 1309              		.fpu fpv4-sp-d16
 1311              	CAN_Send:
 1312              	.LFB142:
ARM GAS  /tmp/cc8ekGpW.s 			page 38


 625:Src/main.c    **** 
 626:Src/main.c    **** /* USER CODE BEGIN 4 */
 627:Src/main.c    **** 
 628:Src/main.c    **** int CAN_Send(char *msg_can)
 629:Src/main.c    **** {
 1313              		.loc 1 629 0
 1314              		.cfi_startproc
 1315              		@ args = 0, pretend = 0, frame = 48
 1316              		@ frame_needed = 0, uses_anonymous_args = 0
 1317              	.LVL76:
 1318 0000 30B5     		push	{r4, r5, lr}
 1319              	.LCFI25:
 1320              		.cfi_def_cfa_offset 12
 1321              		.cfi_offset 4, -12
 1322              		.cfi_offset 5, -8
 1323              		.cfi_offset 14, -4
 1324 0002 8DB0     		sub	sp, sp, #52
 1325              	.LCFI26:
 1326              		.cfi_def_cfa_offset 64
 1327 0004 0546     		mov	r5, r0
 1328              	.LVL77:
 630:Src/main.c    **** 
 631:Src/main.c    ****   uint32_t mailbox;
 632:Src/main.c    ****   uint8_t flag = 0;
 633:Src/main.c    **** 
 634:Src/main.c    ****   char msg_id[3];
 635:Src/main.c    ****   msg_id[0] = msg_can[0];
 1329              		.loc 1 635 0
 1330 0006 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1331 0008 8DF82830 		strb	r3, [sp, #40]
 636:Src/main.c    ****   msg_id[1] = msg_can[1];
 1332              		.loc 1 636 0
 1333 000c 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 1334 000e 8DF82930 		strb	r3, [sp, #41]
 637:Src/main.c    ****   msg_id[2] = '\0';
 1335              		.loc 1 637 0
 1336 0012 0024     		movs	r4, #0
 1337 0014 8DF82A40 		strb	r4, [sp, #42]
 638:Src/main.c    **** 
 639:Src/main.c    ****   CAN_TxHeaderTypeDef TxHeader;
 640:Src/main.c    ****   TxHeader.StdId = (uint32_t)atoi(msg_id);
 1338              		.loc 1 640 0
 1339 0018 0AA8     		add	r0, sp, #40
 1340              	.LVL78:
 1341 001a FFF7FEFF 		bl	atoi
 1342              	.LVL79:
 1343 001e 0490     		str	r0, [sp, #16]
 641:Src/main.c    ****   TxHeader.IDE = CAN_ID_STD;
 1344              		.loc 1 641 0
 1345 0020 0694     		str	r4, [sp, #24]
 642:Src/main.c    ****   TxHeader.RTR = CAN_RTR_DATA;
 1346              		.loc 1 642 0
 1347 0022 0794     		str	r4, [sp, #28]
 643:Src/main.c    ****   TxHeader.DLC = 8;
 1348              		.loc 1 643 0
 1349 0024 0823     		movs	r3, #8
 1350 0026 0893     		str	r3, [sp, #32]
ARM GAS  /tmp/cc8ekGpW.s 			page 39


 644:Src/main.c    ****   TxHeader.TransmitGlobalTime = DISABLE;
 1351              		.loc 1 644 0
 1352 0028 8DF82440 		strb	r4, [sp, #36]
 1353              	.LVL80:
 1354              	.LBB11:
 645:Src/main.c    **** 
 646:Src/main.c    ****   uint8_t data_to_send[8];
 647:Src/main.c    ****   int j = 0;
 648:Src/main.c    ****   for (int i = 0; i < 50 || msg_can[i + 2] == '\0'; i++)
 1355              		.loc 1 648 0
 1356 002c 07E0     		b	.L51
 1357              	.LVL81:
 1358              	.L59:
 649:Src/main.c    ****   {
 650:Src/main.c    ****     if (msg_can[i + 2] == '\t' || msg_can[i + 2] == ' ')
 1359              		.loc 1 650 0
 1360 002e 2346     		mov	r3, r4
 1361 0030 2A19     		adds	r2, r5, r4
 1362 0032 9278     		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 1363 0034 092A     		cmp	r2, #9
 1364 0036 10D0     		beq	.L52
 1365              	.LVL82:
 1366              		.loc 1 650 0 is_stmt 0 discriminator 1
 1367 0038 202A     		cmp	r2, #32
 1368 003a 0ED0     		beq	.L52
 1369              	.LVL83:
 1370              	.L53:
 648:Src/main.c    ****   {
 1371              		.loc 1 648 0 is_stmt 1 discriminator 2
 1372 003c 0134     		adds	r4, r4, #1
 1373              	.LVL84:
 1374              	.L51:
 648:Src/main.c    ****   {
 1375              		.loc 1 648 0 is_stmt 0 discriminator 1
 1376 003e 312C     		cmp	r4, #49
 1377 0040 F5DD     		ble	.L59
 648:Src/main.c    ****   {
 1378              		.loc 1 648 0 discriminator 3
 1379 0042 2B19     		adds	r3, r5, r4
 1380 0044 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1381 0046 002B     		cmp	r3, #0
 1382 0048 F1D0     		beq	.L59
 1383              	.LBE11:
 651:Src/main.c    ****     { // founded separation
 652:Src/main.c    ****       if (msg_can[i + 4] == '\t' || msg_can[i + 4] == ' ')
 653:Src/main.c    ****       { //one space number
 654:Src/main.c    ****         data_to_send[j] = msg_can[i + 3] - (int)('0');
 655:Src/main.c    ****         i = i + 1;
 656:Src/main.c    ****       }
 657:Src/main.c    ****       else if (msg_can[i + 5] == '\t' || msg_can[i + 5] == ' ')
 658:Src/main.c    ****       { //two space number
 659:Src/main.c    ****         char num[3];
 660:Src/main.c    ****         num[0] = msg_can[i + 3];
 661:Src/main.c    ****         num[1] = msg_can[i + 4];
 662:Src/main.c    ****         num[2] = '0';
 663:Src/main.c    ****         data_to_send[j] = atoi(num);
 664:Src/main.c    ****         i = i + 2;
ARM GAS  /tmp/cc8ekGpW.s 			page 40


 665:Src/main.c    ****       }
 666:Src/main.c    ****       else if (msg_can[i + 6] == '\t' || msg_can[i + 6] == ' ')
 667:Src/main.c    ****       { //three space number
 668:Src/main.c    ****         char num[4];
 669:Src/main.c    ****         num[0] = msg_can[i + 3];
 670:Src/main.c    ****         num[1] = msg_can[i + 4];
 671:Src/main.c    ****         num[2] = msg_can[i + 5];
 672:Src/main.c    ****         num[3] = '0';
 673:Src/main.c    ****         data_to_send[j] = atoi(num);
 674:Src/main.c    ****         i = i + 3;
 675:Src/main.c    ****       }
 676:Src/main.c    ****     }
 677:Src/main.c    ****   }
 678:Src/main.c    **** 
 679:Src/main.c    ****   if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 0 && HAL_CAN_IsTxMessagePending(&hcan1, CAN_TX_MAI
 1384              		.loc 1 679 0 is_stmt 1
 1385 004a 2A48     		ldr	r0, .L66
 1386 004c FFF7FEFF 		bl	HAL_CAN_GetTxMailboxesFreeLevel
 1387              	.LVL85:
 1388 0050 0028     		cmp	r0, #0
 1389 0052 40D1     		bne	.L64
 632:Src/main.c    **** 
 1390              		.loc 1 632 0
 1391 0054 0020     		movs	r0, #0
 1392              	.LVL86:
 1393              	.L60:
 680:Src/main.c    ****   {
 681:Src/main.c    ****     HAL_CAN_AddTxMessage(&hcan1, &TxHeader, data_to_send, &mailbox);
 682:Src/main.c    ****     flag = 1;
 683:Src/main.c    ****   }
 684:Src/main.c    **** 
 685:Src/main.c    ****   return flag;
 686:Src/main.c    **** }
 1394              		.loc 1 686 0
 1395 0056 0DB0     		add	sp, sp, #52
 1396              	.LCFI27:
 1397              		.cfi_remember_state
 1398              		.cfi_def_cfa_offset 12
 1399              		@ sp needed
 1400 0058 30BD     		pop	{r4, r5, pc}
 1401              	.LVL87:
 1402              	.L52:
 1403              	.LCFI28:
 1404              		.cfi_restore_state
 1405              	.LBB14:
 652:Src/main.c    ****       { //one space number
 1406              		.loc 1 652 0
 1407 005a 191D     		adds	r1, r3, #4
 1408 005c 6A5C     		ldrb	r2, [r5, r1]	@ zero_extendqisi2
 1409 005e 092A     		cmp	r2, #9
 1410 0060 21D0     		beq	.L54
 652:Src/main.c    ****       { //one space number
 1411              		.loc 1 652 0 is_stmt 0 discriminator 1
 1412 0062 202A     		cmp	r2, #32
 1413 0064 1FD0     		beq	.L54
 657:Src/main.c    ****       { //two space number
 1414              		.loc 1 657 0 is_stmt 1
ARM GAS  /tmp/cc8ekGpW.s 			page 41


 1415 0066 581D     		adds	r0, r3, #5
 1416 0068 2A5C     		ldrb	r2, [r5, r0]	@ zero_extendqisi2
 1417 006a 092A     		cmp	r2, #9
 1418 006c 22D0     		beq	.L56
 657:Src/main.c    ****       { //two space number
 1419              		.loc 1 657 0 is_stmt 0 discriminator 1
 1420 006e 202A     		cmp	r2, #32
 1421 0070 20D0     		beq	.L56
 666:Src/main.c    ****       { //three space number
 1422              		.loc 1 666 0 is_stmt 1
 1423 0072 EA18     		adds	r2, r5, r3
 1424 0074 9279     		ldrb	r2, [r2, #6]	@ zero_extendqisi2
 1425 0076 092A     		cmp	r2, #9
 1426 0078 01D0     		beq	.L58
 666:Src/main.c    ****       { //three space number
 1427              		.loc 1 666 0 is_stmt 0 discriminator 1
 1428 007a 202A     		cmp	r2, #32
 1429 007c DED1     		bne	.L53
 1430              	.L58:
 1431              	.LBB12:
 669:Src/main.c    ****         num[1] = msg_can[i + 4];
 1432              		.loc 1 669 0 is_stmt 1
 1433 007e 2B44     		add	r3, r3, r5
 1434              	.LVL88:
 1435 0080 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1436 0082 8DF80430 		strb	r3, [sp, #4]
 670:Src/main.c    ****         num[2] = msg_can[i + 5];
 1437              		.loc 1 670 0
 1438 0086 6B5C     		ldrb	r3, [r5, r1]	@ zero_extendqisi2
 1439 0088 8DF80530 		strb	r3, [sp, #5]
 671:Src/main.c    ****         num[3] = '0';
 1440              		.loc 1 671 0
 1441 008c 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 1442 008e 8DF80630 		strb	r3, [sp, #6]
 672:Src/main.c    ****         data_to_send[j] = atoi(num);
 1443              		.loc 1 672 0
 1444 0092 3023     		movs	r3, #48
 1445 0094 8DF80730 		strb	r3, [sp, #7]
 673:Src/main.c    ****         i = i + 3;
 1446              		.loc 1 673 0
 1447 0098 01A8     		add	r0, sp, #4
 1448 009a FFF7FEFF 		bl	atoi
 1449              	.LVL89:
 1450 009e 8DF80800 		strb	r0, [sp, #8]
 674:Src/main.c    ****       }
 1451              		.loc 1 674 0
 1452 00a2 0334     		adds	r4, r4, #3
 1453              	.LVL90:
 1454 00a4 CAE7     		b	.L53
 1455              	.LVL91:
 1456              	.L54:
 1457              	.LBE12:
 654:Src/main.c    ****         i = i + 1;
 1458              		.loc 1 654 0
 1459 00a6 2B44     		add	r3, r3, r5
 1460              	.LVL92:
 1461 00a8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
ARM GAS  /tmp/cc8ekGpW.s 			page 42


 1462 00aa 303B     		subs	r3, r3, #48
 1463 00ac 8DF80830 		strb	r3, [sp, #8]
 655:Src/main.c    ****       }
 1464              		.loc 1 655 0
 1465 00b0 0134     		adds	r4, r4, #1
 1466              	.LVL93:
 1467 00b2 C3E7     		b	.L53
 1468              	.LVL94:
 1469              	.L56:
 1470              	.LBB13:
 660:Src/main.c    ****         num[1] = msg_can[i + 4];
 1471              		.loc 1 660 0
 1472 00b4 2B44     		add	r3, r3, r5
 1473              	.LVL95:
 1474 00b6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1475 00b8 8DF80430 		strb	r3, [sp, #4]
 661:Src/main.c    ****         num[2] = '0';
 1476              		.loc 1 661 0
 1477 00bc 6B5C     		ldrb	r3, [r5, r1]	@ zero_extendqisi2
 1478 00be 8DF80530 		strb	r3, [sp, #5]
 662:Src/main.c    ****         data_to_send[j] = atoi(num);
 1479              		.loc 1 662 0
 1480 00c2 3023     		movs	r3, #48
 1481 00c4 8DF80630 		strb	r3, [sp, #6]
 663:Src/main.c    ****         i = i + 2;
 1482              		.loc 1 663 0
 1483 00c8 01A8     		add	r0, sp, #4
 1484 00ca FFF7FEFF 		bl	atoi
 1485              	.LVL96:
 1486 00ce 8DF80800 		strb	r0, [sp, #8]
 664:Src/main.c    ****       }
 1487              		.loc 1 664 0
 1488 00d2 0234     		adds	r4, r4, #2
 1489              	.LVL97:
 1490              	.LBE13:
 658:Src/main.c    ****         char num[3];
 1491              		.loc 1 658 0
 1492 00d4 B2E7     		b	.L53
 1493              	.L64:
 1494              	.LBE14:
 679:Src/main.c    ****   {
 1495              		.loc 1 679 0 discriminator 1
 1496 00d6 0121     		movs	r1, #1
 1497 00d8 0648     		ldr	r0, .L66
 1498 00da FFF7FEFF 		bl	HAL_CAN_IsTxMessagePending
 1499              	.LVL98:
 1500 00de 08B1     		cbz	r0, .L65
 632:Src/main.c    **** 
 1501              		.loc 1 632 0
 1502 00e0 0020     		movs	r0, #0
 1503 00e2 B8E7     		b	.L60
 1504              	.L65:
 681:Src/main.c    ****     flag = 1;
 1505              		.loc 1 681 0
 1506 00e4 0BAB     		add	r3, sp, #44
 1507 00e6 02AA     		add	r2, sp, #8
 1508 00e8 04A9     		add	r1, sp, #16
ARM GAS  /tmp/cc8ekGpW.s 			page 43


 1509 00ea 0248     		ldr	r0, .L66
 1510 00ec FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1511              	.LVL99:
 682:Src/main.c    ****   }
 1512              		.loc 1 682 0
 1513 00f0 0120     		movs	r0, #1
 1514 00f2 B0E7     		b	.L60
 1515              	.L67:
 1516              		.align	2
 1517              	.L66:
 1518 00f4 00000000 		.word	hcan1
 1519              		.cfi_endproc
 1520              	.LFE142:
 1522              		.section	.text.CAN_Receive,"ax",%progbits
 1523              		.align	1
 1524              		.global	CAN_Receive
 1525              		.syntax unified
 1526              		.thumb
 1527              		.thumb_func
 1528              		.fpu fpv4-sp-d16
 1530              	CAN_Receive:
 1531              	.LFB143:
 687:Src/main.c    **** int CAN_Receive(uint8_t *DataRx, int size)
 688:Src/main.c    **** {
 1532              		.loc 1 688 0
 1533              		.cfi_startproc
 1534              		@ args = 0, pretend = 0, frame = 0
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 1536              	.LVL100:
 1537 0000 10B5     		push	{r4, lr}
 1538              	.LCFI29:
 1539              		.cfi_def_cfa_offset 8
 1540              		.cfi_offset 4, -8
 1541              		.cfi_offset 14, -4
 1542 0002 0446     		mov	r4, r0
 689:Src/main.c    **** 
 690:Src/main.c    ****   if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0)
 1543              		.loc 1 690 0
 1544 0004 0021     		movs	r1, #0
 1545              	.LVL101:
 1546 0006 0748     		ldr	r0, .L72
 1547              	.LVL102:
 1548 0008 FFF7FEFF 		bl	HAL_CAN_GetRxFifoFillLevel
 1549              	.LVL103:
 1550 000c 10B9     		cbnz	r0, .L71
 1551              	.L69:
 1552              	.LVL104:
 691:Src/main.c    ****   {
 692:Src/main.c    ****     HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, DataRx);
 693:Src/main.c    ****   }
 694:Src/main.c    **** 
 695:Src/main.c    ****   int id = RxHeader.StdId;
 696:Src/main.c    **** 
 697:Src/main.c    ****   return id;
 698:Src/main.c    **** }
 1553              		.loc 1 698 0
 1554 000e 064B     		ldr	r3, .L72+4
ARM GAS  /tmp/cc8ekGpW.s 			page 44


 1555 0010 1868     		ldr	r0, [r3]
 1556 0012 10BD     		pop	{r4, pc}
 1557              	.LVL105:
 1558              	.L71:
 692:Src/main.c    ****   }
 1559              		.loc 1 692 0
 1560 0014 2346     		mov	r3, r4
 1561 0016 044A     		ldr	r2, .L72+4
 1562 0018 0021     		movs	r1, #0
 1563 001a 0248     		ldr	r0, .L72
 1564 001c FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 1565              	.LVL106:
 1566 0020 F5E7     		b	.L69
 1567              	.L73:
 1568 0022 00BF     		.align	2
 1569              	.L72:
 1570 0024 00000000 		.word	hcan1
 1571 0028 00000000 		.word	RxHeader
 1572              		.cfi_endproc
 1573              	.LFE143:
 1575              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 1576              		.align	1
 1577              		.global	HAL_CAN_RxFifo0FullCallback
 1578              		.syntax unified
 1579              		.thumb
 1580              		.thumb_func
 1581              		.fpu fpv4-sp-d16
 1583              	HAL_CAN_RxFifo0FullCallback:
 1584              	.LFB144:
 699:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
 700:Src/main.c    **** {
 1585              		.loc 1 700 0
 1586              		.cfi_startproc
 1587              		@ args = 0, pretend = 0, frame = 8
 1588              		@ frame_needed = 0, uses_anonymous_args = 0
 1589              	.LVL107:
 1590 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1591              	.LCFI30:
 1592              		.cfi_def_cfa_offset 36
 1593              		.cfi_offset 4, -36
 1594              		.cfi_offset 5, -32
 1595              		.cfi_offset 6, -28
 1596              		.cfi_offset 7, -24
 1597              		.cfi_offset 8, -20
 1598              		.cfi_offset 9, -16
 1599              		.cfi_offset 10, -12
 1600              		.cfi_offset 11, -8
 1601              		.cfi_offset 14, -4
 1602 0004 8BB0     		sub	sp, sp, #44
 1603              	.LCFI31:
 1604              		.cfi_def_cfa_offset 80
 701:Src/main.c    ****   //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 702:Src/main.c    ****   uint8_t RxData[8];
 703:Src/main.c    ****   int id;
 704:Src/main.c    ****   id = CAN_Receive(RxData, 8);
 1605              		.loc 1 704 0
 1606 0006 0821     		movs	r1, #8
ARM GAS  /tmp/cc8ekGpW.s 			page 45


 1607 0008 08A8     		add	r0, sp, #32
 1608              	.LVL108:
 1609 000a FFF7FEFF 		bl	CAN_Receive
 1610              	.LVL109:
 705:Src/main.c    ****   cont_rx++;
 1611              		.loc 1 705 0
 1612 000e 2D4A     		ldr	r2, .L76
 1613 0010 1368     		ldr	r3, [r2]
 1614 0012 0133     		adds	r3, r3, #1
 1615 0014 1360     		str	r3, [r2]
 706:Src/main.c    ****   //int time = secondsElapsed * 1000 + __HAL_TIM_GET_COUNTER(&htim6) / 20; //20 ticks for each mill
 707:Src/main.c    ****   //printable_time=time*1000+ __HAL_TIM_GET_COUNTER(&htim6);
 708:Src/main.c    ****   delta = 0;
 1616              		.loc 1 708 0
 1617 0016 0027     		movs	r7, #0
 1618 0018 2B4B     		ldr	r3, .L76+4
 1619 001a 1F60     		str	r7, [r3]
 709:Src/main.c    ****   mount_ok = 1;
 1620              		.loc 1 709 0
 1621 001c 2B4B     		ldr	r3, .L76+8
 1622 001e 0122     		movs	r2, #1
 1623 0020 1A60     		str	r2, [r3]
 1624              	.LBB15:
 710:Src/main.c    ****   if (mount_ok == 1)
 711:Src/main.c    ****   {
 712:Src/main.c    ****     msg_index++;
 1625              		.loc 1 712 0
 1626 0022 2B4D     		ldr	r5, .L76+12
 1627 0024 2E68     		ldr	r6, [r5]
 1628 0026 1644     		add	r6, r6, r2
 1629 0028 2E60     		str	r6, [r5]
 713:Src/main.c    ****     printable_time = time * 1000 + __HAL_TIM_GET_COUNTER(&htim6);
 1630              		.loc 1 713 0
 1631 002a 2A4B     		ldr	r3, .L76+16
 1632 002c 1B68     		ldr	r3, [r3]
 1633 002e 2A4A     		ldr	r2, .L76+20
 1634 0030 1268     		ldr	r2, [r2]
 1635 0032 526A     		ldr	r2, [r2, #36]
 1636 0034 4FF47A71 		mov	r1, #1000
 1637 0038 01FB0322 		mla	r2, r1, r3, r2
 1638 003c 274B     		ldr	r3, .L76+24
 1639 003e 1A60     		str	r2, [r3]
 714:Src/main.c    ****     msg_counter++;
 1640              		.loc 1 714 0
 1641 0040 DFF8AC80 		ldr	r8, .L76+44
 1642 0044 D8F80030 		ldr	r3, [r8]
 1643 0048 0133     		adds	r3, r3, #1
 1644 004a C8F80030 		str	r3, [r8]
 715:Src/main.c    ****     //sprintf(messagesToWrite[msg_index], "%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d\r\n", time, msg_index
 716:Src/main.c    ****     sprintf(messagesToWrite[msg_index], "%ld\t%d\t%u\t%u\t%u\t%u\t%u\t%u\t%u\t%u\r\n", printable_ti
 1645              		.loc 1 716 0
 1646 004e 244C     		ldr	r4, .L76+28
 1647 0050 9DF82030 		ldrb	r3, [sp, #32]	@ zero_extendqisi2
 1648 0054 9DF82110 		ldrb	r1, [sp, #33]	@ zero_extendqisi2
 1649 0058 0191     		str	r1, [sp, #4]
 1650 005a 9DF82210 		ldrb	r1, [sp, #34]	@ zero_extendqisi2
 1651 005e 9DF823E0 		ldrb	lr, [sp, #35]	@ zero_extendqisi2
ARM GAS  /tmp/cc8ekGpW.s 			page 46


 1652 0062 9DF824C0 		ldrb	ip, [sp, #36]	@ zero_extendqisi2
 1653 0066 9DF82590 		ldrb	r9, [sp, #37]	@ zero_extendqisi2
 1654 006a 9DF826A0 		ldrb	r10, [sp, #38]	@ zero_extendqisi2
 1655 006e 9DF827B0 		ldrb	fp, [sp, #39]	@ zero_extendqisi2
 1656 0072 CDF81CB0 		str	fp, [sp, #28]
 1657 0076 CDF818A0 		str	r10, [sp, #24]
 1658 007a CDF81490 		str	r9, [sp, #20]
 1659 007e CDF810C0 		str	ip, [sp, #16]
 1660 0082 CDF80CE0 		str	lr, [sp, #12]
 1661 0086 0291     		str	r1, [sp, #8]
 1662 0088 0093     		str	r3, [sp]
 1663 008a 0346     		mov	r3, r0
 1664 008c 1549     		ldr	r1, .L76+32
 1665 008e 04EB0620 		add	r0, r4, r6, lsl #8
 1666              	.LVL110:
 1667 0092 FFF7FEFF 		bl	sprintf
 1668              	.LVL111:
 717:Src/main.c    ****     HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 1669              		.loc 1 717 0
 1670 0096 0121     		movs	r1, #1
 1671 0098 1348     		ldr	r0, .L76+36
 1672 009a FFF7FEFF 		bl	HAL_GPIO_TogglePin
 1673              	.LVL112:
 718:Src/main.c    ****     //print(&huart2,messagesToWrite[msg_index]);
 719:Src/main.c    ****     //HAL_UART_Transmit(&huart2, (uint8_t *)messagesToWrite[msg_index], (uint16_t)strlen(messagesTo
 720:Src/main.c    ****     HAL_UART_Transmit(&huart3, (uint8_t *)messagesToWrite[msg_index], (uint16_t)strlen(messagesToWr
 1674              		.loc 1 720 0
 1675 009e 2B68     		ldr	r3, [r5]
 1676 00a0 04EB0324 		add	r4, r4, r3, lsl #8
 1677 00a4 2046     		mov	r0, r4
 1678 00a6 FFF7FEFF 		bl	strlen
 1679              	.LVL113:
 1680 00aa 6423     		movs	r3, #100
 1681 00ac 82B2     		uxth	r2, r0
 1682 00ae 2146     		mov	r1, r4
 1683 00b0 0E48     		ldr	r0, .L76+40
 1684 00b2 FFF7FEFF 		bl	HAL_UART_Transmit
 1685              	.LVL114:
 721:Src/main.c    ****     /*char printable_time_s[100];
 722:Src/main.c    **** 		sprintf(printable_time_s,"%d\r\n",printable_time);
 723:Src/main.c    **** 		print(&huart2,printable_time_s);*/
 724:Src/main.c    ****     msg_counter = 0;
 1686              		.loc 1 724 0
 1687 00b6 C8F80070 		str	r7, [r8]
 725:Src/main.c    ****     msg_index = 0;
 1688              		.loc 1 725 0
 1689 00ba 2F60     		str	r7, [r5]
 1690              	.LBE15:
 726:Src/main.c    ****   }
 727:Src/main.c    **** }
 1691              		.loc 1 727 0
 1692 00bc 0BB0     		add	sp, sp, #44
 1693              	.LCFI32:
 1694              		.cfi_def_cfa_offset 36
 1695              		@ sp needed
 1696 00be BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1697              	.L77:
ARM GAS  /tmp/cc8ekGpW.s 			page 47


 1698 00c2 00BF     		.align	2
 1699              	.L76:
 1700 00c4 00000000 		.word	.LANCHOR2
 1701 00c8 00000000 		.word	delta
 1702 00cc 00000000 		.word	.LANCHOR3
 1703 00d0 00000000 		.word	.LANCHOR4
 1704 00d4 00000000 		.word	.LANCHOR5
 1705 00d8 00000000 		.word	htim6
 1706 00dc 00000000 		.word	.LANCHOR6
 1707 00e0 00000000 		.word	messagesToWrite
 1708 00e4 00000000 		.word	.LC5
 1709 00e8 00040240 		.word	1073873920
 1710 00ec 00000000 		.word	huart3
 1711 00f0 00000000 		.word	.LANCHOR7
 1712              		.cfi_endproc
 1713              	.LFE144:
 1715              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1716              		.align	1
 1717              		.global	HAL_UART_RxCpltCallback
 1718              		.syntax unified
 1719              		.thumb
 1720              		.thumb_func
 1721              		.fpu fpv4-sp-d16
 1723              	HAL_UART_RxCpltCallback:
 1724              	.LFB145:
 728:Src/main.c    **** /*
 729:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 730:Src/main.c    **** 	print_it(huart);
 731:Src/main.c    **** }*/
 732:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 733:Src/main.c    **** {
 1725              		.loc 1 733 0
 1726              		.cfi_startproc
 1727              		@ args = 0, pretend = 0, frame = 0
 1728              		@ frame_needed = 0, uses_anonymous_args = 0
 1729              	.LVL115:
 1730 0000 38B5     		push	{r3, r4, r5, lr}
 1731              	.LCFI33:
 1732              		.cfi_def_cfa_offset 16
 1733              		.cfi_offset 3, -16
 1734              		.cfi_offset 4, -12
 1735              		.cfi_offset 5, -8
 1736              		.cfi_offset 14, -4
 734:Src/main.c    **** 
 735:Src/main.c    ****   flag_rx = 1;
 1737              		.loc 1 735 0
 1738 0002 0122     		movs	r2, #1
 1739 0004 124B     		ldr	r3, .L82
 1740 0006 1A60     		str	r2, [r3]
 1741              	.LVL116:
 1742              	.LBB16:
 736:Src/main.c    ****   for (int i = 0; i < 35; i++)
 1743              		.loc 1 736 0
 1744 0008 0023     		movs	r3, #0
 1745 000a 04E0     		b	.L79
 1746              	.LVL117:
 1747              	.L80:
ARM GAS  /tmp/cc8ekGpW.s 			page 48


 737:Src/main.c    ****   {
 738:Src/main.c    ****     msg_can_to_send[i] = huart_rx[i];
 1748              		.loc 1 738 0 discriminator 3
 1749 000c 114A     		ldr	r2, .L82+4
 1750 000e D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1751 0010 114A     		ldr	r2, .L82+8
 1752 0012 D154     		strb	r1, [r2, r3]
 736:Src/main.c    ****   for (int i = 0; i < 35; i++)
 1753              		.loc 1 736 0 discriminator 3
 1754 0014 0133     		adds	r3, r3, #1
 1755              	.LVL118:
 1756              	.L79:
 736:Src/main.c    ****   for (int i = 0; i < 35; i++)
 1757              		.loc 1 736 0 is_stmt 0 discriminator 1
 1758 0016 222B     		cmp	r3, #34
 1759 0018 F8DD     		ble	.L80
 1760              	.LBE16:
 739:Src/main.c    ****   }
 740:Src/main.c    ****   msg_can_to_send[35] = '\0';
 1761              		.loc 1 740 0 is_stmt 1
 1762 001a 0F4C     		ldr	r4, .L82+8
 1763 001c 0023     		movs	r3, #0
 1764              	.LVL119:
 1765 001e 84F82330 		strb	r3, [r4, #35]
 741:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)msg_can_to_send, strlen(msg_can_to_send), 5);
 1766              		.loc 1 741 0
 1767 0022 2046     		mov	r0, r4
 1768              	.LVL120:
 1769 0024 FFF7FEFF 		bl	strlen
 1770              	.LVL121:
 1771 0028 0C4D     		ldr	r5, .L82+12
 1772 002a 0523     		movs	r3, #5
 1773 002c 82B2     		uxth	r2, r0
 1774 002e 2146     		mov	r1, r4
 1775 0030 2846     		mov	r0, r5
 1776 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 1777              	.LVL122:
 742:Src/main.c    ****   HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, 5);
 1778              		.loc 1 742 0
 1779 0036 0523     		movs	r3, #5
 1780 0038 0222     		movs	r2, #2
 1781 003a 0949     		ldr	r1, .L82+16
 1782 003c 2846     		mov	r0, r5
 1783 003e FFF7FEFF 		bl	HAL_UART_Transmit
 1784              	.LVL123:
 743:Src/main.c    ****   HAL_UART_Receive_IT(&huart2, huart_rx, 35);
 1785              		.loc 1 743 0
 1786 0042 2322     		movs	r2, #35
 1787 0044 0349     		ldr	r1, .L82+4
 1788 0046 0748     		ldr	r0, .L82+20
 1789 0048 FFF7FEFF 		bl	HAL_UART_Receive_IT
 1790              	.LVL124:
 1791 004c 38BD     		pop	{r3, r4, r5, pc}
 1792              	.L83:
 1793 004e 00BF     		.align	2
 1794              	.L82:
 1795 0050 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/cc8ekGpW.s 			page 49


 1796 0054 00000000 		.word	huart_rx
 1797 0058 00000000 		.word	msg_can_to_send
 1798 005c 00000000 		.word	huart3
 1799 0060 38000000 		.word	.LC4
 1800 0064 00000000 		.word	huart2
 1801              		.cfi_endproc
 1802              	.LFE145:
 1804              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1805              		.align	1
 1806              		.global	HAL_TIM_PeriodElapsedCallback
 1807              		.syntax unified
 1808              		.thumb
 1809              		.thumb_func
 1810              		.fpu fpv4-sp-d16
 1812              	HAL_TIM_PeriodElapsedCallback:
 1813              	.LFB146:
 744:Src/main.c    **** 
 745:Src/main.c    ****   /*if(huart_rx[0]=='-'){
 746:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)msg_can_to_send, strlen(msg_can_to_send), 5);
 747:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 5);
 748:Src/main.c    **** 		flag_rx=1;
 749:Src/main.c    **** 		msg_can_to_send[cont_huart_rx] = '\0';
 750:Src/main.c    **** 		cont_huart_rx = 0;
 751:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)msg_can_to_send, strlen(msg_can_to_send), 5);
 752:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 5);
 753:Src/main.c    **** 	}else{
 754:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)huart_rx, strlen(huart_rx), 5);
 755:Src/main.c    **** 		//msg_can_to_send[cont_huart_rx] = (char)huart_rx[0];
 756:Src/main.c    **** 		//cont_huart_rx++;
 757:Src/main.c    **** 		HAL_UART_Receive_IT(&huart2,huart_rx, 10);
 758:Src/main.c    **** 	}*/
 759:Src/main.c    **** 
 760:Src/main.c    ****   /*if(huart_rx[0] == ' ' || huart_rx[0] == '\t'){
 761:Src/main.c    **** 		if(cont_length_num == 2){
 762:Src/main.c    **** 			msg_can_to_send[cont_huart_rx] = msg_can_to_send[cont_huat_rx-1];
 763:Src/main.c    **** 			msg_can_to_send[cont_huart_rx-1]='0';
 764:Src/main.c    **** 			cont_huart_rx+=1;
 765:Src/main.c    **** 		}else if(cont_length_num == 3){
 766:Src/main.c    **** 			msg_can_to_send[cont_huart_rx] = msg_can_to_send[cont_huart_rx-2];
 767:Src/main.c    **** 			msg_can_to_send[cont_huart_rx-1]='0';
 768:Src/main.c    **** 			msg_can_to_send[cont_huart_rx-2]='0';
 769:Src/main.c    **** 			cont_huart_rx+=2;
 770:Src/main.c    **** 		}
 771:Src/main.c    **** 		cont_length_num = 0;
 772:Src/main.c    **** 	}else{
 773:Src/main.c    **** 		//if(cont_huart_rx == 26)
 774:Src/main.c    **** 		msg_can_to_send[cont_huart_rx] = (char)huart_rx[0];
 775:Src/main.c    **** 		cont_huart_rx++;
 776:Src/main.c    **** 		cont_length_num++;
 777:Src/main.c    **** 	}
 778:Src/main.c    **** 	if(cont_huart_rx >= 27){
 779:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)msg_can_to_send, strlen(msg_can_to_send), 5);
 780:Src/main.c    **** 		HAL_UART_Transmit(&huart3, (uint8_t*)"\r\n", 2, 5);
 781:Src/main.c    **** 		cont_length_num = 0;
 782:Src/main.c    **** 		cont_huart_rx = 0;
 783:Src/main.c    **** 		flag_rx = 1;
 784:Src/main.c    **** 	}*/
ARM GAS  /tmp/cc8ekGpW.s 			page 50


 785:Src/main.c    **** }
 786:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 787:Src/main.c    **** {
 1814              		.loc 1 787 0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 0
 1817              		@ frame_needed = 0, uses_anonymous_args = 0
 1818              		@ link register save eliminated.
 1819              	.LVL125:
 788:Src/main.c    ****   if (htim == &htim7)
 1820              		.loc 1 788 0
 1821 0000 034B     		ldr	r3, .L87
 1822 0002 8342     		cmp	r3, r0
 1823 0004 00D0     		beq	.L86
 1824              	.L84:
 1825 0006 7047     		bx	lr
 1826              	.L86:
 789:Src/main.c    ****   {
 790:Src/main.c    ****     interrupt_flag = 1;
 1827              		.loc 1 790 0
 1828 0008 0122     		movs	r2, #1
 1829 000a 024B     		ldr	r3, .L87+4
 1830 000c 1A60     		str	r2, [r3]
 791:Src/main.c    ****   }
 792:Src/main.c    **** }
 1831              		.loc 1 792 0
 1832 000e FAE7     		b	.L84
 1833              	.L88:
 1834              		.align	2
 1835              	.L87:
 1836 0010 00000000 		.word	htim7
 1837 0014 00000000 		.word	.LANCHOR8
 1838              		.cfi_endproc
 1839              	.LFE146:
 1841              		.section	.text.Error_Handler,"ax",%progbits
 1842              		.align	1
 1843              		.global	Error_Handler
 1844              		.syntax unified
 1845              		.thumb
 1846              		.thumb_func
 1847              		.fpu fpv4-sp-d16
 1849              	Error_Handler:
 1850              	.LFB147:
 793:Src/main.c    **** 
 794:Src/main.c    **** /* USER CODE END 4 */
 795:Src/main.c    **** 
 796:Src/main.c    **** /**
 797:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 798:Src/main.c    ****   * @retval None
 799:Src/main.c    ****   */
 800:Src/main.c    **** void Error_Handler(void)
 801:Src/main.c    **** {
 1851              		.loc 1 801 0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 0
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
 1855              		@ link register save eliminated.
ARM GAS  /tmp/cc8ekGpW.s 			page 51


 1856 0000 7047     		bx	lr
 1857              		.cfi_endproc
 1858              	.LFE147:
 1860              		.comm	cont_length_num,4,4
 1861              		.comm	cont_huart_rx,4,4
 1862              		.global	flag_rx
 1863              		.comm	cont_msg_can_to_send,4,4
 1864              		.comm	msg_can_to_send,50,4
 1865              		.comm	huart_rx,50,4
 1866              		.global	interrupt_flag
 1867              		.global	msg_index
 1868              		.global	msg_counter
 1869              		.global	mount_ok
 1870              		.comm	delta,4,4
 1871              		.global	printable_time
 1872              		.global	time
 1873              		.comm	messagesToWrite,51200,4
 1874              		.global	cont_rx
 1875              		.global	a
 1876              		.comm	RxHeader,28,4
 1877              		.comm	sFilter,40,4
 1878              		.comm	huart3,64,4
 1879              		.comm	huart2,64,4
 1880              		.comm	htim7,64,4
 1881              		.comm	htim6,64,4
 1882              		.comm	hdma_sdio_tx,96,4
 1883              		.comm	hdma_sdio_rx,96,4
 1884              		.comm	hsd,132,4
 1885              		.comm	hcan1,40,4
 1886              		.comm	hadc1,72,4
 1887              		.section	.bss.a,"aw",%nobits
 1888              		.align	2
 1889              		.set	.LANCHOR0,. + 0
 1892              	a:
 1893 0000 00000000 		.space	4
 1894              		.section	.bss.cont_rx,"aw",%nobits
 1895              		.align	2
 1896              		.set	.LANCHOR2,. + 0
 1899              	cont_rx:
 1900 0000 00000000 		.space	4
 1901              		.section	.bss.flag_rx,"aw",%nobits
 1902              		.align	2
 1903              		.set	.LANCHOR1,. + 0
 1906              	flag_rx:
 1907 0000 00000000 		.space	4
 1908              		.section	.bss.interrupt_flag,"aw",%nobits
 1909              		.align	2
 1910              		.set	.LANCHOR8,. + 0
 1913              	interrupt_flag:
 1914 0000 00000000 		.space	4
 1915              		.section	.bss.mount_ok,"aw",%nobits
 1916              		.align	2
 1917              		.set	.LANCHOR3,. + 0
 1920              	mount_ok:
 1921 0000 00000000 		.space	4
 1922              		.section	.bss.msg_counter,"aw",%nobits
 1923              		.align	2
ARM GAS  /tmp/cc8ekGpW.s 			page 52


 1924              		.set	.LANCHOR7,. + 0
 1927              	msg_counter:
 1928 0000 00000000 		.space	4
 1929              		.section	.bss.msg_index,"aw",%nobits
 1930              		.align	2
 1931              		.set	.LANCHOR4,. + 0
 1934              	msg_index:
 1935 0000 00000000 		.space	4
 1936              		.section	.bss.printable_time,"aw",%nobits
 1937              		.align	2
 1938              		.set	.LANCHOR6,. + 0
 1941              	printable_time:
 1942 0000 00000000 		.space	4
 1943              		.section	.bss.time,"aw",%nobits
 1944              		.align	2
 1945              		.set	.LANCHOR5,. + 0
 1948              	time:
 1949 0000 00000000 		.space	4
 1950              		.section	.rodata.HAL_CAN_RxFifo0FullCallback.str1.4,"aMS",%progbits,1
 1951              		.align	2
 1952              	.LC5:
 1953 0000 256C6409 		.ascii	"%ld\011%d\011%u\011%u\011%u\011%u\011%u\011%u\011%u"
 1953      25640925 
 1953      75092575 
 1953      09257509 
 1953      25750925 
 1954 001b 0925750D 		.ascii	"\011%u\015\012\000"
 1954      0A00
 1955              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 1956              		.align	2
 1957              	.LC0:
 1958 0000 63616E20 		.ascii	"can init done_1\015\012\000"
 1958      696E6974 
 1958      20646F6E 
 1958      655F310D 
 1958      0A00
 1959 0012 0000     		.space	2
 1960              	.LC1:
 1961 0014 73746172 		.ascii	"start_1\015\012\000"
 1961      745F310D 
 1961      0A00
 1962 001e 0000     		.space	2
 1963              	.LC2:
 1964 0020 63616E20 		.ascii	"can init done\015\012\000"
 1964      696E6974 
 1964      20646F6E 
 1964      650D0A00 
 1965              	.LC3:
 1966 0030 73746172 		.ascii	"start\015\012\000"
 1966      740D0A00 
 1967              	.LC4:
 1968 0038 0D0A00   		.ascii	"\015\012\000"
 1969              		.text
 1970              	.Letext0:
 1971              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1972              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1973              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
ARM GAS  /tmp/cc8ekGpW.s 			page 53


 1974              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1975              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1976              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1977              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1978              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1979              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1980              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1981              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1982              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1983              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1984              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_ll_sdmmc.h"
 1985              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_sd.h"
 1986              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1987              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1988              		.file 19 "/usr/include/newlib/sys/lock.h"
 1989              		.file 20 "/usr/include/newlib/sys/_types.h"
 1990              		.file 21 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1991              		.file 22 "/usr/include/newlib/sys/reent.h"
 1992              		.file 23 "/usr/include/newlib/string.h"
 1993              		.file 24 "<built-in>"
 1994              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1995              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1996              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/cc8ekGpW.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc8ekGpW.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc8ekGpW.s:156    .text.MX_GPIO_Init:00000000000000b8 $d
     /tmp/cc8ekGpW.s:163    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:169    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/cc8ekGpW.s:225    .text.MX_DMA_Init:0000000000000040 $d
     /tmp/cc8ekGpW.s:230    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:236    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/cc8ekGpW.s:312    .text.MX_USART3_UART_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:318    .text.MX_USART3_UART_Init:0000000000000000 MX_USART3_UART_Init
     /tmp/cc8ekGpW.s:357    .text.MX_USART3_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart3
     /tmp/cc8ekGpW.s:363    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:369    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc8ekGpW.s:408    .text.MX_USART2_UART_Init:0000000000000024 $d
                            *COM*:0000000000000040 huart2
     /tmp/cc8ekGpW.s:415    .text.MX_SDIO_SD_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:421    .text.MX_SDIO_SD_Init:0000000000000000 MX_SDIO_SD_Init
     /tmp/cc8ekGpW.s:456    .text.MX_SDIO_SD_Init:000000000000001c $d
                            *COM*:0000000000000084 hsd
     /tmp/cc8ekGpW.s:462    .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:468    .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/cc8ekGpW.s:516    .text.MX_CAN1_Init:0000000000000030 $d
                            *COM*:0000000000000028 hcan1
     /tmp/cc8ekGpW.s:522    .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:528    .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/cc8ekGpW.s:583    .text.MX_TIM6_Init:0000000000000034 $d
                            *COM*:0000000000000040 htim6
     /tmp/cc8ekGpW.s:589    .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:595    .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/cc8ekGpW.s:650    .text.MX_TIM7_Init:0000000000000038 $d
                            *COM*:0000000000000040 htim7
     /tmp/cc8ekGpW.s:656    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc8ekGpW.s:662    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc8ekGpW.s:736    .text.MX_ADC1_Init:000000000000004c $d
                            *COM*:0000000000000048 hadc1
     /tmp/cc8ekGpW.s:743    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc8ekGpW.s:750    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc8ekGpW.s:874    .text.SystemClock_Config:00000000000000ac $d
     /tmp/cc8ekGpW.s:880    .text.main:0000000000000000 $t
     /tmp/cc8ekGpW.s:887    .text.main:0000000000000000 main
     /tmp/cc8ekGpW.s:1283   .text.main:00000000000002d8 $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000032 huart_rx
                            *COM*:0000000000000032 msg_can_to_send
     /tmp/cc8ekGpW.s:1304   .text.CAN_Send:0000000000000000 $t
     /tmp/cc8ekGpW.s:1311   .text.CAN_Send:0000000000000000 CAN_Send
     /tmp/cc8ekGpW.s:1518   .text.CAN_Send:00000000000000f4 $d
     /tmp/cc8ekGpW.s:1523   .text.CAN_Receive:0000000000000000 $t
     /tmp/cc8ekGpW.s:1530   .text.CAN_Receive:0000000000000000 CAN_Receive
     /tmp/cc8ekGpW.s:1570   .text.CAN_Receive:0000000000000024 $d
                            *COM*:000000000000001c RxHeader
     /tmp/cc8ekGpW.s:1576   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/cc8ekGpW.s:1583   .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/cc8ekGpW.s:1700   .text.HAL_CAN_RxFifo0FullCallback:00000000000000c4 $d
ARM GAS  /tmp/cc8ekGpW.s 			page 55


                            *COM*:0000000000000004 delta
                            *COM*:000000000000c800 messagesToWrite
     /tmp/cc8ekGpW.s:1716   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/cc8ekGpW.s:1723   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/cc8ekGpW.s:1795   .text.HAL_UART_RxCpltCallback:0000000000000050 $d
     /tmp/cc8ekGpW.s:1805   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/cc8ekGpW.s:1812   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/cc8ekGpW.s:1836   .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/cc8ekGpW.s:1842   .text.Error_Handler:0000000000000000 $t
     /tmp/cc8ekGpW.s:1849   .text.Error_Handler:0000000000000000 Error_Handler
                            *COM*:0000000000000004 cont_length_num
                            *COM*:0000000000000004 cont_huart_rx
     /tmp/cc8ekGpW.s:1906   .bss.flag_rx:0000000000000000 flag_rx
                            *COM*:0000000000000004 cont_msg_can_to_send
     /tmp/cc8ekGpW.s:1913   .bss.interrupt_flag:0000000000000000 interrupt_flag
     /tmp/cc8ekGpW.s:1934   .bss.msg_index:0000000000000000 msg_index
     /tmp/cc8ekGpW.s:1927   .bss.msg_counter:0000000000000000 msg_counter
     /tmp/cc8ekGpW.s:1920   .bss.mount_ok:0000000000000000 mount_ok
     /tmp/cc8ekGpW.s:1941   .bss.printable_time:0000000000000000 printable_time
     /tmp/cc8ekGpW.s:1948   .bss.time:0000000000000000 time
     /tmp/cc8ekGpW.s:1899   .bss.cont_rx:0000000000000000 cont_rx
     /tmp/cc8ekGpW.s:1892   .bss.a:0000000000000000 a
                            *COM*:0000000000000060 hdma_sdio_tx
                            *COM*:0000000000000060 hdma_sdio_rx
     /tmp/cc8ekGpW.s:1888   .bss.a:0000000000000000 $d
     /tmp/cc8ekGpW.s:1895   .bss.cont_rx:0000000000000000 $d
     /tmp/cc8ekGpW.s:1902   .bss.flag_rx:0000000000000000 $d
     /tmp/cc8ekGpW.s:1909   .bss.interrupt_flag:0000000000000000 $d
     /tmp/cc8ekGpW.s:1916   .bss.mount_ok:0000000000000000 $d
     /tmp/cc8ekGpW.s:1923   .bss.msg_counter:0000000000000000 $d
     /tmp/cc8ekGpW.s:1930   .bss.msg_index:0000000000000000 $d
     /tmp/cc8ekGpW.s:1937   .bss.printable_time:0000000000000000 $d
     /tmp/cc8ekGpW.s:1944   .bss.time:0000000000000000 $d
     /tmp/cc8ekGpW.s:1951   .rodata.HAL_CAN_RxFifo0FullCallback.str1.4:0000000000000000 $d
     /tmp/cc8ekGpW.s:1956   .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Init
HAL_SD_Init
HAL_CAN_Init
HAL_TIM_Base_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_ADC_Init
HAL_ADC_ConfigChannel
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_CAN_ConfigFilter
HAL_UART_Transmit
HAL_GPIO_TogglePin
ARM GAS  /tmp/cc8ekGpW.s 			page 56


HAL_Delay
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start
HAL_TIM_Base_Start_IT
HAL_UART_Receive_IT
strlen
atoi
HAL_CAN_GetTxMailboxesFreeLevel
HAL_CAN_IsTxMessagePending
HAL_CAN_AddTxMessage
HAL_CAN_GetRxFifoFillLevel
HAL_CAN_GetRxMessage
sprintf
