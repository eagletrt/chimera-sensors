ARM GAS  /tmp/ccP3MicS.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_GPIO_Init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	MX_GPIO_Init:
  25              	.LFB149:
  26              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** 
  24:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  25:Src/main.c    **** /* USER CODE BEGIN Includes */
  26:Src/main.c    **** #include "Eagle_TRT.h"
  27:Src/main.c    **** #include "string.h"
  28:Src/main.c    **** #include "stdio.h"
  29:Src/main.c    **** #include "stdlib.h"
  30:Src/main.c    **** #include <inttypes.h>
  31:Src/main.c    **** #include "stm32f4xx_hal_gpio.h"
  32:Src/main.c    **** #include "stm32f4xx_it.h"
ARM GAS  /tmp/ccP3MicS.s 			page 2


  33:Src/main.c    **** #include <math.h>
  34:Src/main.c    **** /* USER CODE END Includes */
  35:Src/main.c    **** 
  36:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  37:Src/main.c    **** /* USER CODE BEGIN PTD */
  38:Src/main.c    **** 
  39:Src/main.c    **** /* USER CODE END PTD */
  40:Src/main.c    **** 
  41:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  42:Src/main.c    **** /* USER CODE BEGIN PD */
  43:Src/main.c    **** 
  44:Src/main.c    **** /* USER CODE END PD */
  45:Src/main.c    **** 
  46:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  47:Src/main.c    **** /* USER CODE BEGIN PM */
  48:Src/main.c    **** 
  49:Src/main.c    **** /* USER CODE END PM */
  50:Src/main.c    **** 
  51:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  52:Src/main.c    **** ADC_HandleTypeDef hadc1;
  53:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  54:Src/main.c    **** 
  55:Src/main.c    **** CAN_HandleTypeDef hcan1;
  56:Src/main.c    **** 
  57:Src/main.c    **** SPI_HandleTypeDef hspi1;
  58:Src/main.c    **** 
  59:Src/main.c    **** TIM_HandleTypeDef htim2;
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** TIM_HandleTypeDef htim4;
  62:Src/main.c    **** TIM_HandleTypeDef htim5;
  63:Src/main.c    **** TIM_HandleTypeDef htim6;
  64:Src/main.c    **** TIM_HandleTypeDef htim7;
  65:Src/main.c    **** TIM_HandleTypeDef htim10;
  66:Src/main.c    **** TIM_HandleTypeDef htim11;
  67:Src/main.c    **** 
  68:Src/main.c    **** UART_HandleTypeDef huart1;
  69:Src/main.c    **** UART_HandleTypeDef huart2;
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE BEGIN PV */
  72:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  73:Src/main.c    **** extern can_stc can;
  74:Src/main.c    **** extern imu_stc accel;
  75:Src/main.c    **** extern imu_stc gyro;
  76:Src/main.c    **** extern enc_stc enc;
  77:Src/main.c    **** extern pot_stc pot_1;
  78:Src/main.c    **** extern pot_stc pot_2;
  79:Src/main.c    **** extern pot_stc pot_3;
  80:Src/main.c    **** 
  81:Src/main.c    **** CAN_FilterTypeDef sFilter;
  82:Src/main.c    **** uint32_t valMax0, valMin0, val0rang;
  83:Src/main.c    **** uint32_t ADC_buffer[4], val[3];
  84:Src/main.c    **** char txt[100];
  85:Src/main.c    **** int flag = 0;
  86:Src/main.c    **** int multiplier = 1;
  87:Src/main.c    **** int timer_factor = 2;
  88:Src/main.c    **** int command_flag = 0;
  89:Src/main.c    **** int calibration_flag = 0;
ARM GAS  /tmp/ccP3MicS.s 			page 3


  90:Src/main.c    **** int inverter_rpm = 0;
  91:Src/main.c    **** 
  92:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance2 = {.Instance = TIM2};
  93:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance3 = {.Instance = TIM3};
  94:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance4 = {.Instance = TIM4};
  95:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance5 = {.Instance = TIM5};
  96:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance6 = {.Instance = TIM6};
  97:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance7 = {.Instance = TIM7};
  98:Src/main.c    **** TIM_HandleTypeDef a_TimerInstance10 = {.Instance = TIM10};
  99:Src/main.c    **** 
 100:Src/main.c    **** gps_struct gps_main;
 101:Src/main.c    **** /* USER CODE END PV */
 102:Src/main.c    **** 
 103:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
 104:Src/main.c    **** void SystemClock_Config(void);
 105:Src/main.c    **** static void MX_GPIO_Init(void);
 106:Src/main.c    **** static void MX_DMA_Init(void);
 107:Src/main.c    **** static void MX_USART2_UART_Init(void);
 108:Src/main.c    **** static void MX_CAN1_Init(void);
 109:Src/main.c    **** static void MX_SPI1_Init(void);
 110:Src/main.c    **** static void MX_ADC1_Init(void);
 111:Src/main.c    **** static void MX_USART1_UART_Init(void);
 112:Src/main.c    **** static void MX_TIM2_Init(void);
 113:Src/main.c    **** static void MX_TIM3_Init(void);
 114:Src/main.c    **** static void MX_TIM4_Init(void);
 115:Src/main.c    **** static void MX_TIM5_Init(void);
 116:Src/main.c    **** static void MX_TIM6_Init(void);
 117:Src/main.c    **** static void MX_TIM7_Init(void);
 118:Src/main.c    **** static void MX_TIM10_Init(void);
 119:Src/main.c    **** static void MX_TIM11_Init(void);
 120:Src/main.c    **** static void MX_NVIC_Init(void);
 121:Src/main.c    **** /* USER CODE BEGIN PFP */
 122:Src/main.c    **** 
 123:Src/main.c    **** int send_CAN_data(uint32_t);
 124:Src/main.c    **** 
 125:Src/main.c    **** /* USER CODE END PFP */
 126:Src/main.c    **** 
 127:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
 128:Src/main.c    **** /* USER CODE BEGIN 0 */
 129:Src/main.c    **** void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 130:Src/main.c    **** {
 131:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 132:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 133:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 134:Src/main.c    ****     /*int txt_1[100];
 135:Src/main.c    ****     sprintf(txt_1, "sterzo: %d %d %d\r\n", pot_1.val, pot_2.val, pot_3.val);
 136:Src/main.c    ****     HAL_UART_Transmit(&huart2, (uint8_t*)txt_1, strlen(txt_1), 10);*/
 137:Src/main.c    **** }
 138:Src/main.c    **** 
 139:Src/main.c    **** int steer_enc_prescaler;
 140:Src/main.c    **** int encoder_counter;
 141:Src/main.c    **** int previous_millis;
 142:Src/main.c    **** 
 143:Src/main.c    **** /* USER CODE END 0 */
 144:Src/main.c    **** 
 145:Src/main.c    **** /**
 146:Src/main.c    ****   * @brief  The application entry point.
ARM GAS  /tmp/ccP3MicS.s 			page 4


 147:Src/main.c    ****   * @retval int
 148:Src/main.c    ****   */
 149:Src/main.c    **** int main(void)
 150:Src/main.c    **** {
 151:Src/main.c    ****     /* USER CODE BEGIN 1 */
 152:Src/main.c    ****     /* USER CODE END 1 */
 153:Src/main.c    **** 
 154:Src/main.c    ****     /* MCU Configuration--------------------------------------------------------*/
 155:Src/main.c    **** 
 156:Src/main.c    ****     /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 157:Src/main.c    ****     HAL_Init();
 158:Src/main.c    **** 
 159:Src/main.c    ****     /* USER CODE BEGIN Init */
 160:Src/main.c    **** 
 161:Src/main.c    ****     /* USER CODE END Init */
 162:Src/main.c    **** 
 163:Src/main.c    ****     /* Configure the system clock */
 164:Src/main.c    ****     SystemClock_Config();
 165:Src/main.c    **** 
 166:Src/main.c    ****     /* USER CODE BEGIN SysInit */
 167:Src/main.c    **** 
 168:Src/main.c    ****     /* USER CODE END SysInit */
 169:Src/main.c    **** 
 170:Src/main.c    ****     /* Initialize all configured peripherals */
 171:Src/main.c    ****     MX_GPIO_Init();
 172:Src/main.c    ****     MX_DMA_Init();
 173:Src/main.c    ****     MX_USART2_UART_Init();
 174:Src/main.c    ****     MX_CAN1_Init();
 175:Src/main.c    ****     MX_SPI1_Init();
 176:Src/main.c    ****     MX_ADC1_Init();
 177:Src/main.c    ****     MX_USART1_UART_Init();
 178:Src/main.c    ****     MX_TIM2_Init();
 179:Src/main.c    ****     MX_TIM3_Init();
 180:Src/main.c    ****     MX_TIM4_Init();
 181:Src/main.c    ****     MX_TIM5_Init();
 182:Src/main.c    ****     MX_TIM6_Init();
 183:Src/main.c    ****     MX_TIM7_Init();
 184:Src/main.c    ****     MX_TIM10_Init();
 185:Src/main.c    ****     MX_TIM11_Init();
 186:Src/main.c    **** 
 187:Src/main.c    ****     /* Initialize interrupts */
 188:Src/main.c    ****     MX_NVIC_Init();
 189:Src/main.c    ****     /* USER CODE BEGIN 2 */
 190:Src/main.c    **** 
 191:Src/main.c    ****     sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 192:Src/main.c    ****     sFilter.FilterIdLow = 0;
 193:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 194:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 195:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
 196:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 197:Src/main.c    ****     sFilter.FilterBank = 0;
 198:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 199:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 200:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 201:Src/main.c    **** 
 202:Src/main.c    ****     HAL_CAN_Start(&hcan1);
 203:Src/main.c    **** 
ARM GAS  /tmp/ccP3MicS.s 			page 5


 204:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 205:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 206:Src/main.c    ****     /* USER CODE END 2 */
 207:Src/main.c    **** 
 208:Src/main.c    ****     /* Infinite loop */
 209:Src/main.c    ****     /* USER CODE BEGIN WHILE */
 210:Src/main.c    ****     can.hcan = &hcan1;
 211:Src/main.c    ****     // can initialization //
 212:Src/main.c    **** 
 213:Src/main.c    ****     // imu initialization //
 214:Src/main.c    ****     accel.GPIOx_InUse = GPIOC;
 215:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 216:Src/main.c    ****     accel.hspi = &hspi1;
 217:Src/main.c    **** 
 218:Src/main.c    ****     gyro.GPIOx_InUse = GPIOA;
 219:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 220:Src/main.c    ****     gyro.hspi = &hspi1;
 221:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 222:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 223:Src/main.c    **** 
 224:Src/main.c    ****     steer_enc_prescaler = htim3.Init.Period;
 225:Src/main.c    ****     steer_enc_prescaler /= 3;
 226:Src/main.c    ****     steer_enc_prescaler /= 20;
 227:Src/main.c    ****     steer_enc_prescaler += 40;
 228:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 229:Src/main.c    **** 
 230:Src/main.c    ****     pot_2.max = 4060;
 231:Src/main.c    ****     pot_2.min = 2350;
 232:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 233:Src/main.c    **** 
 234:Src/main.c    ****     enc.ClockPinName = GPIOC;
 235:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 236:Src/main.c    ****     enc.DataPinName = GPIOC;
 237:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 238:Src/main.c    **** 
 239:Src/main.c    ****     enc.dx_wheel = 1;
 240:Src/main.c    ****     enc.interrupt_flag = 0;
 241:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 242:Src/main.c    ****     enc.average_speed = 0;
 243:Src/main.c    ****     enc.wheel_diameter = 0.395;
 244:Src/main.c    ****     enc.data_size = 14;
 245:Src/main.c    ****     enc.clock_period = 2;
 246:Src/main.c    ****     enc.wheel_rotation = 0;
 247:Src/main.c    ****     enc.Km = 0;
 248:Src/main.c    **** 
 249:Src/main.c    ****     enc.max_delta_angle = 5;
 250:Src/main.c    ****     enc.frequency = 0;
 251:Src/main.c    ****     enc.frequency_timer = &htim7;
 252:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 253:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 254:Src/main.c    **** 
 255:Src/main.c    ****     HAL_TIM_Base_Start(&htim2);
 256:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 257:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 258:Src/main.c    ****     //HAL_TIM_Base_Start(&htim5);
 259:Src/main.c    ****     //HAL_TIM_Base_Start(&htim6);
 260:Src/main.c    ****     HAL_TIM_Base_Start(&htim7);
ARM GAS  /tmp/ccP3MicS.s 			page 6


 261:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 262:Src/main.c    **** 
 263:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim2);
 264:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 265:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 266:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim5);
 267:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim6);
 268:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim7);
 269:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 270:Src/main.c    **** 
 271:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance2, 0);
 272:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 273:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 274:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance5, 0);
 275:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance6, 0);
 276:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance7, 0);
 277:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 278:Src/main.c    **** 
 279:Src/main.c    ****     // INIT Encoder
 280:Src/main.c    ****     enc_calculate_optimal_frequency(&enc);
 281:Src/main.c    **** 
 282:Src/main.c    ****     accel.scale = 4;
 283:Src/main.c    ****     gyro.scale = 500;
 284:Src/main.c    **** 
 285:Src/main.c    ****     //HAL_Delay(1000);
 286:Src/main.c    ****     LSMD9S0_accel_gyro_init(&accel, &gyro);
 287:Src/main.c    ****     LSMD9S0_check(&accel);
 288:Src/main.c    **** 
 289:Src/main.c    ****     LSM9DS0_calibration(&accel);
 290:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 291:Src/main.c    **** 
 292:Src/main.c    ****     encoder_counter = 0;
 293:Src/main.c    **** 
 294:Src/main.c    ****     HAL_Delay(1);
 295:Src/main.c    **** 
 296:Src/main.c    ****     can.dataTx[0] = 0x3D;
 297:Src/main.c    ****     can.dataTx[1] = 0xA8;
 298:Src/main.c    ****     can.dataTx[2] = 0x64;
 299:Src/main.c    ****     can.id = 0x201;
 300:Src/main.c    ****     can.size = 3;
 301:Src/main.c    ****     CAN_Send(&can);
 302:Src/main.c    **** 
 303:Src/main.c    ****     can.dataTx[0] = 0x3D;
 304:Src/main.c    ****     can.dataTx[1] = 0xA8;
 305:Src/main.c    ****     can.dataTx[2] = 0x64;
 306:Src/main.c    ****     can.id = 0x202;
 307:Src/main.c    ****     can.size = 3;
 308:Src/main.c    ****     CAN_Send(&can);
 309:Src/main.c    **** 
 310:Src/main.c    ****     HAL_Delay(1);
 311:Src/main.c    **** 
 312:Src/main.c    ****     if (gps_init(&huart1, &gps_main) == 0)
 313:Src/main.c    ****     {
 314:Src/main.c    ****         //--error--//
 315:Src/main.c    ****     }
 316:Src/main.c    **** 
 317:Src/main.c    ****     while (1)
ARM GAS  /tmp/ccP3MicS.s 			page 7


 318:Src/main.c    ****     {
 319:Src/main.c    **** 
 320:Src/main.c    ****         /* USER CODE END WHILE */
 321:Src/main.c    **** 
 322:Src/main.c    ****         /* USER CODE BEGIN 3 */
 323:Src/main.c    **** 
 324:Src/main.c    ****         HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 325:Src/main.c    ****         
 326:Src/main.c    ****         /*
 327:Src/main.c    ****         for(int i = 0; i < enc.data_size; i++){
 328:Src/main.c    ****             sprintf(txt, "%d ", enc.Data[i]);
 329:Src/main.c    ****             HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 330:Src/main.c    ****         }
 331:Src/main.c    ****         sprintf(txt, "\r\n");
 332:Src/main.c    ****         HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);*/
 333:Src/main.c    **** 
 334:Src/main.c    **** 
 335:Src/main.c    ****         // If CAN is free from important messages, send data
 336:Src/main.c    ****         if (command_flag == 0)
 337:Src/main.c    ****         {
 338:Src/main.c    ****             if (previous_millis != HAL_GetTick())
 339:Src/main.c    ****             {
 340:Src/main.c    ****                 // ALL DATA
 341:Src/main.c    ****                 // sprintf(txt, "speed: %d distance: %d ax: %d, ay: %d, az: %d gx: %d gy: %d gz: %d
 342:Src/main.c    ****                 // GPS
 343:Src/main.c    ****                 sprintf(txt, "latitude: %d lat orientation: %c longitude: %d lon orientation: %c al
 344:Src/main.c    **** 
 345:Src/main.c    ****                 HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
 346:Src/main.c    ****                 send_CAN_data(HAL_GetTick());
 347:Src/main.c    ****                 previous_millis = HAL_GetTick();
 348:Src/main.c    ****             }
 349:Src/main.c    ****         }
 350:Src/main.c    ****         else
 351:Src/main.c    ****         {
 352:Src/main.c    ****             HAL_Delay(1);
 353:Src/main.c    ****             command_flag = 0;
 354:Src/main.c    ****         }
 355:Src/main.c    ****     }
 356:Src/main.c    ****     /* USER CODE END 3 */
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** /**
 360:Src/main.c    ****   * @brief System Clock Configuration
 361:Src/main.c    ****   * @retval None
 362:Src/main.c    ****   */
 363:Src/main.c    **** void SystemClock_Config(void)
 364:Src/main.c    **** {
 365:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 366:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 367:Src/main.c    **** 
 368:Src/main.c    ****     /** Configure the main internal regulator output voltage 
 369:Src/main.c    ****   */
 370:Src/main.c    ****     __HAL_RCC_PWR_CLK_ENABLE();
 371:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 372:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 373:Src/main.c    ****   */
 374:Src/main.c    ****     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
ARM GAS  /tmp/ccP3MicS.s 			page 8


 375:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 376:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 377:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 378:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 379:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 380:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 381:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 382:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 383:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 384:Src/main.c    ****     {
 385:Src/main.c    ****         Error_Handler();
 386:Src/main.c    ****     }
 387:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 388:Src/main.c    ****   */
 389:Src/main.c    ****     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 |
 390:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 391:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 392:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 393:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 394:Src/main.c    **** 
 395:Src/main.c    ****     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 396:Src/main.c    ****     {
 397:Src/main.c    ****         Error_Handler();
 398:Src/main.c    ****     }
 399:Src/main.c    **** }
 400:Src/main.c    **** 
 401:Src/main.c    **** /**
 402:Src/main.c    ****   * @brief NVIC Configuration.
 403:Src/main.c    ****   * @retval None
 404:Src/main.c    ****   */
 405:Src/main.c    **** static void MX_NVIC_Init(void)
 406:Src/main.c    **** {
 407:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 408:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 409:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 410:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 411:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 412:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 413:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 414:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 415:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 416:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 417:Src/main.c    ****     HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 418:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 419:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 420:Src/main.c    ****     HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 421:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 422:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 423:Src/main.c    ****     HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 424:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 425:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 426:Src/main.c    ****     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 427:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 428:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 429:Src/main.c    ****     HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 430:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 431:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
ARM GAS  /tmp/ccP3MicS.s 			page 9


 432:Src/main.c    ****     HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 433:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 434:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 435:Src/main.c    ****     HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 436:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 437:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 438:Src/main.c    ****     HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 439:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 440:Src/main.c    **** }
 441:Src/main.c    **** 
 442:Src/main.c    **** /**
 443:Src/main.c    ****   * @brief ADC1 Initialization Function
 444:Src/main.c    ****   * @param None
 445:Src/main.c    ****   * @retval None
 446:Src/main.c    ****   */
 447:Src/main.c    **** static void MX_ADC1_Init(void)
 448:Src/main.c    **** {
 449:Src/main.c    **** 
 450:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 0 */
 451:Src/main.c    **** 
 452:Src/main.c    ****     /* USER CODE END ADC1_Init 0 */
 453:Src/main.c    **** 
 454:Src/main.c    ****     ADC_ChannelConfTypeDef sConfig = {0};
 455:Src/main.c    **** 
 456:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 1 */
 457:Src/main.c    **** 
 458:Src/main.c    ****     /* USER CODE END ADC1_Init 1 */
 459:Src/main.c    ****     /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of c
 460:Src/main.c    ****   */
 461:Src/main.c    ****     hadc1.Instance = ADC1;
 462:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 463:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 464:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 465:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 466:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 467:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 468:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 469:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 470:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 471:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 472:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 473:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 474:Src/main.c    ****     {
 475:Src/main.c    ****         Error_Handler();
 476:Src/main.c    ****     }
 477:Src/main.c    ****     /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and 
 478:Src/main.c    ****   */
 479:Src/main.c    ****     sConfig.Channel = ADC_CHANNEL_8;
 480:Src/main.c    ****     sConfig.Rank = 1;
 481:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 482:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 483:Src/main.c    ****     {
 484:Src/main.c    ****         Error_Handler();
 485:Src/main.c    ****     }
 486:Src/main.c    ****     /* USER CODE BEGIN ADC1_Init 2 */
 487:Src/main.c    **** 
 488:Src/main.c    ****     /* USER CODE END ADC1_Init 2 */
ARM GAS  /tmp/ccP3MicS.s 			page 10


 489:Src/main.c    **** }
 490:Src/main.c    **** 
 491:Src/main.c    **** /**
 492:Src/main.c    ****   * @brief CAN1 Initialization Function
 493:Src/main.c    ****   * @param None
 494:Src/main.c    ****   * @retval None
 495:Src/main.c    ****   */
 496:Src/main.c    **** static void MX_CAN1_Init(void)
 497:Src/main.c    **** {
 498:Src/main.c    **** 
 499:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 0 */
 500:Src/main.c    **** 
 501:Src/main.c    ****     /* USER CODE END CAN1_Init 0 */
 502:Src/main.c    **** 
 503:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 1 */
 504:Src/main.c    **** 
 505:Src/main.c    ****     /* USER CODE END CAN1_Init 1 */
 506:Src/main.c    ****     hcan1.Instance = CAN1;
 507:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 508:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 509:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 510:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 511:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 512:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 513:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 514:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 515:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 516:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 517:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 518:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 519:Src/main.c    ****     {
 520:Src/main.c    ****         Error_Handler();
 521:Src/main.c    ****     }
 522:Src/main.c    ****     /* USER CODE BEGIN CAN1_Init 2 */
 523:Src/main.c    **** 
 524:Src/main.c    ****     /* USER CODE END CAN1_Init 2 */
 525:Src/main.c    **** }
 526:Src/main.c    **** 
 527:Src/main.c    **** /**
 528:Src/main.c    ****   * @brief SPI1 Initialization Function
 529:Src/main.c    ****   * @param None
 530:Src/main.c    ****   * @retval None
 531:Src/main.c    ****   */
 532:Src/main.c    **** static void MX_SPI1_Init(void)
 533:Src/main.c    **** {
 534:Src/main.c    **** 
 535:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 0 */
 536:Src/main.c    **** 
 537:Src/main.c    ****     /* USER CODE END SPI1_Init 0 */
 538:Src/main.c    **** 
 539:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 1 */
 540:Src/main.c    **** 
 541:Src/main.c    ****     /* USER CODE END SPI1_Init 1 */
 542:Src/main.c    ****     /* SPI1 parameter configuration*/
 543:Src/main.c    ****     hspi1.Instance = SPI1;
 544:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 545:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
ARM GAS  /tmp/ccP3MicS.s 			page 11


 546:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 547:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 548:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 549:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 550:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 551:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 552:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 553:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 554:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 555:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 556:Src/main.c    ****     {
 557:Src/main.c    ****         Error_Handler();
 558:Src/main.c    ****     }
 559:Src/main.c    ****     /* USER CODE BEGIN SPI1_Init 2 */
 560:Src/main.c    **** 
 561:Src/main.c    ****     /* USER CODE END SPI1_Init 2 */
 562:Src/main.c    **** }
 563:Src/main.c    **** 
 564:Src/main.c    **** /**
 565:Src/main.c    ****   * @brief TIM2 Initialization Function
 566:Src/main.c    ****   * @param None
 567:Src/main.c    ****   * @retval None
 568:Src/main.c    ****   */
 569:Src/main.c    **** static void MX_TIM2_Init(void)
 570:Src/main.c    **** {
 571:Src/main.c    **** 
 572:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 0 */
 573:Src/main.c    **** 
 574:Src/main.c    ****     /* USER CODE END TIM2_Init 0 */
 575:Src/main.c    **** 
 576:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 577:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 578:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 579:Src/main.c    **** 
 580:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 1 */
 581:Src/main.c    **** 
 582:Src/main.c    ****     /* USER CODE END TIM2_Init 1 */
 583:Src/main.c    ****     htim2.Instance = TIM2;
 584:Src/main.c    ****     htim2.Init.Prescaler = 36;
 585:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 586:Src/main.c    ****     htim2.Init.Period = 1000;
 587:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 588:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 589:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 590:Src/main.c    ****     {
 591:Src/main.c    ****         Error_Handler();
 592:Src/main.c    ****     }
 593:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 594:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 595:Src/main.c    ****     {
 596:Src/main.c    ****         Error_Handler();
 597:Src/main.c    ****     }
 598:Src/main.c    ****     sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 599:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 600:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 601:Src/main.c    ****     {
 602:Src/main.c    ****         Error_Handler();
ARM GAS  /tmp/ccP3MicS.s 			page 12


 603:Src/main.c    ****     }
 604:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 605:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 606:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 607:Src/main.c    ****     {
 608:Src/main.c    ****         Error_Handler();
 609:Src/main.c    ****     }
 610:Src/main.c    ****     /* USER CODE BEGIN TIM2_Init 2 */
 611:Src/main.c    **** 
 612:Src/main.c    ****     /* USER CODE END TIM2_Init 2 */
 613:Src/main.c    **** }
 614:Src/main.c    **** 
 615:Src/main.c    **** /**
 616:Src/main.c    ****   * @brief TIM3 Initialization Function
 617:Src/main.c    ****   * @param None
 618:Src/main.c    ****   * @retval None
 619:Src/main.c    ****   */
 620:Src/main.c    **** static void MX_TIM3_Init(void)
 621:Src/main.c    **** {
 622:Src/main.c    **** 
 623:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 0 */
 624:Src/main.c    **** 
 625:Src/main.c    ****     /* USER CODE END TIM3_Init 0 */
 626:Src/main.c    **** 
 627:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 628:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 629:Src/main.c    **** 
 630:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 1 */
 631:Src/main.c    **** 
 632:Src/main.c    ****     /* USER CODE END TIM3_Init 1 */
 633:Src/main.c    ****     htim3.Instance = TIM3;
 634:Src/main.c    ****     htim3.Init.Prescaler = 18;
 635:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 636:Src/main.c    ****     htim3.Init.Period = 65500;
 637:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 638:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 639:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 640:Src/main.c    ****     {
 641:Src/main.c    ****         Error_Handler();
 642:Src/main.c    ****     }
 643:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 644:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 645:Src/main.c    ****     {
 646:Src/main.c    ****         Error_Handler();
 647:Src/main.c    ****     }
 648:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 649:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 650:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 651:Src/main.c    ****     {
 652:Src/main.c    ****         Error_Handler();
 653:Src/main.c    ****     }
 654:Src/main.c    ****     /* USER CODE BEGIN TIM3_Init 2 */
 655:Src/main.c    **** 
 656:Src/main.c    ****     /* USER CODE END TIM3_Init 2 */
 657:Src/main.c    **** }
 658:Src/main.c    **** 
 659:Src/main.c    **** /**
ARM GAS  /tmp/ccP3MicS.s 			page 13


 660:Src/main.c    ****   * @brief TIM4 Initialization Function
 661:Src/main.c    ****   * @param None
 662:Src/main.c    ****   * @retval None
 663:Src/main.c    ****   */
 664:Src/main.c    **** static void MX_TIM4_Init(void)
 665:Src/main.c    **** {
 666:Src/main.c    **** 
 667:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 0 */
 668:Src/main.c    **** 
 669:Src/main.c    ****     /* USER CODE END TIM4_Init 0 */
 670:Src/main.c    **** 
 671:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 672:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 673:Src/main.c    **** 
 674:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 1 */
 675:Src/main.c    **** 
 676:Src/main.c    ****     /* USER CODE END TIM4_Init 1 */
 677:Src/main.c    ****     htim4.Instance = TIM4;
 678:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 679:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 680:Src/main.c    ****     htim4.Init.Period = 2000;
 681:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 682:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 683:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 684:Src/main.c    ****     {
 685:Src/main.c    ****         Error_Handler();
 686:Src/main.c    ****     }
 687:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 688:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 689:Src/main.c    ****     {
 690:Src/main.c    ****         Error_Handler();
 691:Src/main.c    ****     }
 692:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 693:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 694:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 695:Src/main.c    ****     {
 696:Src/main.c    ****         Error_Handler();
 697:Src/main.c    ****     }
 698:Src/main.c    ****     /* USER CODE BEGIN TIM4_Init 2 */
 699:Src/main.c    **** 
 700:Src/main.c    ****     /* USER CODE END TIM4_Init 2 */
 701:Src/main.c    **** }
 702:Src/main.c    **** 
 703:Src/main.c    **** /**
 704:Src/main.c    ****   * @brief TIM5 Initialization Function
 705:Src/main.c    ****   * @param None
 706:Src/main.c    ****   * @retval None
 707:Src/main.c    ****   */
 708:Src/main.c    **** static void MX_TIM5_Init(void)
 709:Src/main.c    **** {
 710:Src/main.c    **** 
 711:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 0 */
 712:Src/main.c    **** 
 713:Src/main.c    ****     /* USER CODE END TIM5_Init 0 */
 714:Src/main.c    **** 
 715:Src/main.c    ****     TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 716:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
ARM GAS  /tmp/ccP3MicS.s 			page 14


 717:Src/main.c    **** 
 718:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 1 */
 719:Src/main.c    **** 
 720:Src/main.c    ****     /* USER CODE END TIM5_Init 1 */
 721:Src/main.c    ****     htim5.Instance = TIM5;
 722:Src/main.c    ****     htim5.Init.Prescaler = 36;
 723:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 724:Src/main.c    ****     htim5.Init.Period = 2000;
 725:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 726:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 727:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 728:Src/main.c    ****     {
 729:Src/main.c    ****         Error_Handler();
 730:Src/main.c    ****     }
 731:Src/main.c    ****     sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 732:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 733:Src/main.c    ****     {
 734:Src/main.c    ****         Error_Handler();
 735:Src/main.c    ****     }
 736:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 737:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 738:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 739:Src/main.c    ****     {
 740:Src/main.c    ****         Error_Handler();
 741:Src/main.c    ****     }
 742:Src/main.c    ****     /* USER CODE BEGIN TIM5_Init 2 */
 743:Src/main.c    **** 
 744:Src/main.c    ****     /* USER CODE END TIM5_Init 2 */
 745:Src/main.c    **** }
 746:Src/main.c    **** 
 747:Src/main.c    **** /**
 748:Src/main.c    ****   * @brief TIM6 Initialization Function
 749:Src/main.c    ****   * @param None
 750:Src/main.c    ****   * @retval None
 751:Src/main.c    ****   */
 752:Src/main.c    **** static void MX_TIM6_Init(void)
 753:Src/main.c    **** {
 754:Src/main.c    **** 
 755:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 0 */
 756:Src/main.c    **** 
 757:Src/main.c    ****     /* USER CODE END TIM6_Init 0 */
 758:Src/main.c    **** 
 759:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 760:Src/main.c    **** 
 761:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 1 */
 762:Src/main.c    **** 
 763:Src/main.c    ****     /* USER CODE END TIM6_Init 1 */
 764:Src/main.c    ****     htim6.Instance = TIM6;
 765:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 766:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 767:Src/main.c    ****     htim6.Init.Period = 2000;
 768:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 769:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 770:Src/main.c    ****     {
 771:Src/main.c    ****         Error_Handler();
 772:Src/main.c    ****     }
 773:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
ARM GAS  /tmp/ccP3MicS.s 			page 15


 774:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 775:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 776:Src/main.c    ****     {
 777:Src/main.c    ****         Error_Handler();
 778:Src/main.c    ****     }
 779:Src/main.c    ****     /* USER CODE BEGIN TIM6_Init 2 */
 780:Src/main.c    **** 
 781:Src/main.c    ****     /* USER CODE END TIM6_Init 2 */
 782:Src/main.c    **** }
 783:Src/main.c    **** 
 784:Src/main.c    **** /**
 785:Src/main.c    ****   * @brief TIM7 Initialization Function
 786:Src/main.c    ****   * @param None
 787:Src/main.c    ****   * @retval None
 788:Src/main.c    ****   */
 789:Src/main.c    **** static void MX_TIM7_Init(void)
 790:Src/main.c    **** {
 791:Src/main.c    **** 
 792:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 0 */
 793:Src/main.c    **** 
 794:Src/main.c    ****     /* USER CODE END TIM7_Init 0 */
 795:Src/main.c    **** 
 796:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 797:Src/main.c    **** 
 798:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 1 */
 799:Src/main.c    **** 
 800:Src/main.c    ****     /* USER CODE END TIM7_Init 1 */
 801:Src/main.c    ****     htim7.Instance = TIM7;
 802:Src/main.c    ****     htim7.Init.Prescaler = 36;
 803:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 804:Src/main.c    ****     htim7.Init.Period = 6000;
 805:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 806:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 807:Src/main.c    ****     {
 808:Src/main.c    ****         Error_Handler();
 809:Src/main.c    ****     }
 810:Src/main.c    ****     sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 811:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 812:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 813:Src/main.c    ****     {
 814:Src/main.c    ****         Error_Handler();
 815:Src/main.c    ****     }
 816:Src/main.c    ****     /* USER CODE BEGIN TIM7_Init 2 */
 817:Src/main.c    **** 
 818:Src/main.c    ****     /* USER CODE END TIM7_Init 2 */
 819:Src/main.c    **** }
 820:Src/main.c    **** 
 821:Src/main.c    **** /**
 822:Src/main.c    ****   * @brief TIM10 Initialization Function
 823:Src/main.c    ****   * @param None
 824:Src/main.c    ****   * @retval None
 825:Src/main.c    ****   */
 826:Src/main.c    **** static void MX_TIM10_Init(void)
 827:Src/main.c    **** {
 828:Src/main.c    **** 
 829:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 0 */
 830:Src/main.c    **** 
ARM GAS  /tmp/ccP3MicS.s 			page 16


 831:Src/main.c    ****     /* USER CODE END TIM10_Init 0 */
 832:Src/main.c    **** 
 833:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 1 */
 834:Src/main.c    **** 
 835:Src/main.c    ****     /* USER CODE END TIM10_Init 1 */
 836:Src/main.c    ****     htim10.Instance = TIM10;
 837:Src/main.c    ****     htim10.Init.Prescaler = 72;
 838:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 839:Src/main.c    ****     htim10.Init.Period = 1000;
 840:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 841:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 842:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 843:Src/main.c    ****     {
 844:Src/main.c    ****         Error_Handler();
 845:Src/main.c    ****     }
 846:Src/main.c    ****     /* USER CODE BEGIN TIM10_Init 2 */
 847:Src/main.c    **** 
 848:Src/main.c    ****     /* USER CODE END TIM10_Init 2 */
 849:Src/main.c    **** }
 850:Src/main.c    **** 
 851:Src/main.c    **** /**
 852:Src/main.c    ****   * @brief TIM11 Initialization Function
 853:Src/main.c    ****   * @param None
 854:Src/main.c    ****   * @retval None
 855:Src/main.c    ****   */
 856:Src/main.c    **** static void MX_TIM11_Init(void)
 857:Src/main.c    **** {
 858:Src/main.c    **** 
 859:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 0 */
 860:Src/main.c    **** 
 861:Src/main.c    ****     /* USER CODE END TIM11_Init 0 */
 862:Src/main.c    **** 
 863:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 1 */
 864:Src/main.c    **** 
 865:Src/main.c    ****     /* USER CODE END TIM11_Init 1 */
 866:Src/main.c    ****     htim11.Instance = TIM11;
 867:Src/main.c    ****     htim11.Init.Prescaler = 0;
 868:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 869:Src/main.c    ****     htim11.Init.Period = 0;
 870:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 871:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 872:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 873:Src/main.c    ****     {
 874:Src/main.c    ****         Error_Handler();
 875:Src/main.c    ****     }
 876:Src/main.c    ****     /* USER CODE BEGIN TIM11_Init 2 */
 877:Src/main.c    **** 
 878:Src/main.c    ****     /* USER CODE END TIM11_Init 2 */
 879:Src/main.c    **** }
 880:Src/main.c    **** 
 881:Src/main.c    **** /**
 882:Src/main.c    ****   * @brief USART1 Initialization Function
 883:Src/main.c    ****   * @param None
 884:Src/main.c    ****   * @retval None
 885:Src/main.c    ****   */
 886:Src/main.c    **** static void MX_USART1_UART_Init(void)
 887:Src/main.c    **** {
ARM GAS  /tmp/ccP3MicS.s 			page 17


 888:Src/main.c    **** 
 889:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 0 */
 890:Src/main.c    **** 
 891:Src/main.c    ****     /* USER CODE END USART1_Init 0 */
 892:Src/main.c    **** 
 893:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 1 */
 894:Src/main.c    **** 
 895:Src/main.c    ****     /* USER CODE END USART1_Init 1 */
 896:Src/main.c    ****     huart1.Instance = USART1;
 897:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 898:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 899:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 900:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 901:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 902:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 903:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 904:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 905:Src/main.c    ****     {
 906:Src/main.c    ****         Error_Handler();
 907:Src/main.c    ****     }
 908:Src/main.c    ****     /* USER CODE BEGIN USART1_Init 2 */
 909:Src/main.c    **** 
 910:Src/main.c    ****     /* USER CODE END USART1_Init 2 */
 911:Src/main.c    **** }
 912:Src/main.c    **** 
 913:Src/main.c    **** /**
 914:Src/main.c    ****   * @brief USART2 Initialization Function
 915:Src/main.c    ****   * @param None
 916:Src/main.c    ****   * @retval None
 917:Src/main.c    ****   */
 918:Src/main.c    **** static void MX_USART2_UART_Init(void)
 919:Src/main.c    **** {
 920:Src/main.c    **** 
 921:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 0 */
 922:Src/main.c    **** 
 923:Src/main.c    ****     /* USER CODE END USART2_Init 0 */
 924:Src/main.c    **** 
 925:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 1 */
 926:Src/main.c    **** 
 927:Src/main.c    ****     /* USER CODE END USART2_Init 1 */
 928:Src/main.c    ****     huart2.Instance = USART2;
 929:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 930:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 931:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 932:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 933:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 934:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 935:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 936:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 937:Src/main.c    ****     {
 938:Src/main.c    ****         Error_Handler();
 939:Src/main.c    ****     }
 940:Src/main.c    ****     /* USER CODE BEGIN USART2_Init 2 */
 941:Src/main.c    **** 
 942:Src/main.c    ****     /* USER CODE END USART2_Init 2 */
 943:Src/main.c    **** }
 944:Src/main.c    **** 
ARM GAS  /tmp/ccP3MicS.s 			page 18


 945:Src/main.c    **** /** 
 946:Src/main.c    ****   * Enable DMA controller clock
 947:Src/main.c    ****   */
 948:Src/main.c    **** static void MX_DMA_Init(void)
 949:Src/main.c    **** {
 950:Src/main.c    **** 
 951:Src/main.c    ****     /* DMA controller clock enable */
 952:Src/main.c    ****     __HAL_RCC_DMA2_CLK_ENABLE();
 953:Src/main.c    **** 
 954:Src/main.c    ****     /* DMA interrupt init */
 955:Src/main.c    ****     /* DMA2_Stream0_IRQn interrupt configuration */
 956:Src/main.c    ****     HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 957:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 958:Src/main.c    **** }
 959:Src/main.c    **** 
 960:Src/main.c    **** /**
 961:Src/main.c    ****   * @brief GPIO Initialization Function
 962:Src/main.c    ****   * @param None
 963:Src/main.c    ****   * @retval None
 964:Src/main.c    ****   */
 965:Src/main.c    **** static void MX_GPIO_Init(void)
 966:Src/main.c    **** {
  27              		.loc 1 966 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 40
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 8AB0     		sub	sp, sp, #40
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 64
 967:Src/main.c    ****     GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 967 0
  44 0006 0024     		movs	r4, #0
  45 0008 0594     		str	r4, [sp, #20]
  46 000a 0694     		str	r4, [sp, #24]
  47 000c 0794     		str	r4, [sp, #28]
  48 000e 0894     		str	r4, [sp, #32]
  49 0010 0994     		str	r4, [sp, #36]
  50              	.LBB2:
 968:Src/main.c    **** 
 969:Src/main.c    ****     /* GPIO Ports Clock Enable */
 970:Src/main.c    ****     __HAL_RCC_GPIOH_CLK_ENABLE();
  51              		.loc 1 970 0
  52 0012 0194     		str	r4, [sp, #4]
  53 0014 354B     		ldr	r3, .L3
  54 0016 1A6B     		ldr	r2, [r3, #48]
  55 0018 42F08002 		orr	r2, r2, #128
  56 001c 1A63     		str	r2, [r3, #48]
  57 001e 1A6B     		ldr	r2, [r3, #48]
ARM GAS  /tmp/ccP3MicS.s 			page 19


  58 0020 02F08002 		and	r2, r2, #128
  59 0024 0192     		str	r2, [sp, #4]
  60 0026 019A     		ldr	r2, [sp, #4]
  61              	.LBE2:
  62              	.LBB3:
 971:Src/main.c    ****     __HAL_RCC_GPIOA_CLK_ENABLE();
  63              		.loc 1 971 0
  64 0028 0294     		str	r4, [sp, #8]
  65 002a 1A6B     		ldr	r2, [r3, #48]
  66 002c 42F00102 		orr	r2, r2, #1
  67 0030 1A63     		str	r2, [r3, #48]
  68 0032 1A6B     		ldr	r2, [r3, #48]
  69 0034 02F00102 		and	r2, r2, #1
  70 0038 0292     		str	r2, [sp, #8]
  71 003a 029A     		ldr	r2, [sp, #8]
  72              	.LBE3:
  73              	.LBB4:
 972:Src/main.c    ****     __HAL_RCC_GPIOB_CLK_ENABLE();
  74              		.loc 1 972 0
  75 003c 0394     		str	r4, [sp, #12]
  76 003e 1A6B     		ldr	r2, [r3, #48]
  77 0040 42F00202 		orr	r2, r2, #2
  78 0044 1A63     		str	r2, [r3, #48]
  79 0046 1A6B     		ldr	r2, [r3, #48]
  80 0048 02F00202 		and	r2, r2, #2
  81 004c 0392     		str	r2, [sp, #12]
  82 004e 039A     		ldr	r2, [sp, #12]
  83              	.LBE4:
  84              	.LBB5:
 973:Src/main.c    ****     __HAL_RCC_GPIOC_CLK_ENABLE();
  85              		.loc 1 973 0
  86 0050 0494     		str	r4, [sp, #16]
  87 0052 1A6B     		ldr	r2, [r3, #48]
  88 0054 42F00402 		orr	r2, r2, #4
  89 0058 1A63     		str	r2, [r3, #48]
  90 005a 1B6B     		ldr	r3, [r3, #48]
  91 005c 03F00403 		and	r3, r3, #4
  92 0060 0493     		str	r3, [sp, #16]
  93 0062 049B     		ldr	r3, [sp, #16]
  94              	.LBE5:
 974:Src/main.c    **** 
 975:Src/main.c    ****     /*Configure GPIO pin Output Level */
 976:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
  95              		.loc 1 976 0
  96 0064 224D     		ldr	r5, .L3+4
  97 0066 0122     		movs	r2, #1
  98 0068 4021     		movs	r1, #64
  99 006a 2846     		mov	r0, r5
 100 006c FFF7FEFF 		bl	HAL_GPIO_WritePin
 101              	.LVL0:
 977:Src/main.c    **** 
 978:Src/main.c    ****     /*Configure GPIO pin Output Level */
 979:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 102              		.loc 1 979 0
 103 0070 2246     		mov	r2, r4
 104 0072 4FF40071 		mov	r1, #512
 105 0076 2846     		mov	r0, r5
ARM GAS  /tmp/ccP3MicS.s 			page 20


 106 0078 FFF7FEFF 		bl	HAL_GPIO_WritePin
 107              	.LVL1:
 980:Src/main.c    **** 
 981:Src/main.c    ****     /*Configure GPIO pin Output Level */
 982:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 108              		.loc 1 982 0
 109 007c DFF87880 		ldr	r8, .L3+12
 110 0080 2246     		mov	r2, r4
 111 0082 4FF48071 		mov	r1, #256
 112 0086 4046     		mov	r0, r8
 113 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 114              	.LVL2:
 983:Src/main.c    **** 
 984:Src/main.c    ****     /*Configure GPIO pin : PC6 */
 985:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_6;
 115              		.loc 1 985 0
 116 008c 4023     		movs	r3, #64
 117 008e 0593     		str	r3, [sp, #20]
 986:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 118              		.loc 1 986 0
 119 0090 0127     		movs	r7, #1
 120 0092 0697     		str	r7, [sp, #24]
 987:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 121              		.loc 1 987 0
 122 0094 0794     		str	r4, [sp, #28]
 988:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 123              		.loc 1 988 0
 124 0096 0323     		movs	r3, #3
 125 0098 0893     		str	r3, [sp, #32]
 989:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 126              		.loc 1 989 0
 127 009a 05A9     		add	r1, sp, #20
 128 009c 2846     		mov	r0, r5
 129 009e FFF7FEFF 		bl	HAL_GPIO_Init
 130              	.LVL3:
 990:Src/main.c    **** 
 991:Src/main.c    ****     /*Configure GPIO pin : PC8 */
 992:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 131              		.loc 1 992 0
 132 00a2 4FF48076 		mov	r6, #256
 133 00a6 0596     		str	r6, [sp, #20]
 993:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 134              		.loc 1 993 0
 135 00a8 0694     		str	r4, [sp, #24]
 994:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 136              		.loc 1 994 0
 137 00aa 0794     		str	r4, [sp, #28]
 995:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 138              		.loc 1 995 0
 139 00ac 05A9     		add	r1, sp, #20
 140 00ae 2846     		mov	r0, r5
 141 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 142              	.LVL4:
 996:Src/main.c    **** 
 997:Src/main.c    ****     /*Configure GPIO pin : PC9 */
 998:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_9;
 143              		.loc 1 998 0
ARM GAS  /tmp/ccP3MicS.s 			page 21


 144 00b4 4FF40073 		mov	r3, #512
 145 00b8 0593     		str	r3, [sp, #20]
 999:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 146              		.loc 1 999 0
 147 00ba 0697     		str	r7, [sp, #24]
1000:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 148              		.loc 1 1000 0
 149 00bc 0794     		str	r4, [sp, #28]
1001:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 150              		.loc 1 1001 0
 151 00be 0894     		str	r4, [sp, #32]
1002:Src/main.c    ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 152              		.loc 1 1002 0
 153 00c0 05A9     		add	r1, sp, #20
 154 00c2 2846     		mov	r0, r5
 155 00c4 FFF7FEFF 		bl	HAL_GPIO_Init
 156              	.LVL5:
1003:Src/main.c    **** 
1004:Src/main.c    ****     /*Configure GPIO pin : PA8 */
1005:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 157              		.loc 1 1005 0
 158 00c8 0596     		str	r6, [sp, #20]
1006:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 159              		.loc 1 1006 0
 160 00ca 0697     		str	r7, [sp, #24]
1007:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 161              		.loc 1 1007 0
 162 00cc 0794     		str	r4, [sp, #28]
1008:Src/main.c    ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 163              		.loc 1 1008 0
 164 00ce 0894     		str	r4, [sp, #32]
1009:Src/main.c    ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 165              		.loc 1 1009 0
 166 00d0 05A9     		add	r1, sp, #20
 167 00d2 4046     		mov	r0, r8
 168 00d4 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL6:
1010:Src/main.c    **** 
1011:Src/main.c    ****     /*Configure GPIO pin : PB8 */
1012:Src/main.c    ****     GPIO_InitStruct.Pin = GPIO_PIN_8;
 170              		.loc 1 1012 0
 171 00d8 0596     		str	r6, [sp, #20]
1013:Src/main.c    ****     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 172              		.loc 1 1013 0
 173 00da 0694     		str	r4, [sp, #24]
1014:Src/main.c    ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 174              		.loc 1 1014 0
 175 00dc 0794     		str	r4, [sp, #28]
1015:Src/main.c    ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 176              		.loc 1 1015 0
 177 00de 05A9     		add	r1, sp, #20
 178 00e0 0448     		ldr	r0, .L3+8
 179 00e2 FFF7FEFF 		bl	HAL_GPIO_Init
 180              	.LVL7:
1016:Src/main.c    **** }
 181              		.loc 1 1016 0
 182 00e6 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/ccP3MicS.s 			page 22


 183              	.LCFI2:
 184              		.cfi_def_cfa_offset 24
 185              		@ sp needed
 186 00e8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 187              	.L4:
 188              		.align	2
 189              	.L3:
 190 00ec 00380240 		.word	1073887232
 191 00f0 00080240 		.word	1073874944
 192 00f4 00040240 		.word	1073873920
 193 00f8 00000240 		.word	1073872896
 194              		.cfi_endproc
 195              	.LFE149:
 197              		.section	.text.MX_DMA_Init,"ax",%progbits
 198              		.align	1
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu fpv4-sp-d16
 204              	MX_DMA_Init:
 205              	.LFB148:
 949:Src/main.c    **** 
 206              		.loc 1 949 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 00B5     		push	{lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 4
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              	.LCFI4:
 216              		.cfi_def_cfa_offset 16
 217              	.LBB6:
 952:Src/main.c    **** 
 218              		.loc 1 952 0
 219 0004 0021     		movs	r1, #0
 220 0006 0191     		str	r1, [sp, #4]
 221 0008 094B     		ldr	r3, .L7
 222 000a 1A6B     		ldr	r2, [r3, #48]
 223 000c 42F48002 		orr	r2, r2, #4194304
 224 0010 1A63     		str	r2, [r3, #48]
 225 0012 1B6B     		ldr	r3, [r3, #48]
 226 0014 03F48003 		and	r3, r3, #4194304
 227 0018 0193     		str	r3, [sp, #4]
 228 001a 019B     		ldr	r3, [sp, #4]
 229              	.LBE6:
 956:Src/main.c    ****     HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 230              		.loc 1 956 0
 231 001c 0A46     		mov	r2, r1
 232 001e 3820     		movs	r0, #56
 233 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 234              	.LVL8:
 957:Src/main.c    **** }
 235              		.loc 1 957 0
 236 0024 3820     		movs	r0, #56
 237 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
ARM GAS  /tmp/ccP3MicS.s 			page 23


 238              	.LVL9:
 958:Src/main.c    **** 
 239              		.loc 1 958 0
 240 002a 03B0     		add	sp, sp, #12
 241              	.LCFI5:
 242              		.cfi_def_cfa_offset 4
 243              		@ sp needed
 244 002c 5DF804FB 		ldr	pc, [sp], #4
 245              	.L8:
 246              		.align	2
 247              	.L7:
 248 0030 00380240 		.word	1073887232
 249              		.cfi_endproc
 250              	.LFE148:
 252              		.section	.text.MX_NVIC_Init,"ax",%progbits
 253              		.align	1
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv4-sp-d16
 259              	MX_NVIC_Init:
 260              	.LFB134:
 406:Src/main.c    ****     /* CAN1_TX_IRQn interrupt configuration */
 261              		.loc 1 406 0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI6:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 408:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 270              		.loc 1 408 0
 271 0002 0022     		movs	r2, #0
 272 0004 1146     		mov	r1, r2
 273 0006 1320     		movs	r0, #19
 274 0008 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 275              	.LVL10:
 409:Src/main.c    ****     /* CAN1_RX0_IRQn interrupt configuration */
 276              		.loc 1 409 0
 277 000c 1320     		movs	r0, #19
 278 000e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 279              	.LVL11:
 411:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 280              		.loc 1 411 0
 281 0012 0022     		movs	r2, #0
 282 0014 1146     		mov	r1, r2
 283 0016 1420     		movs	r0, #20
 284 0018 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 285              	.LVL12:
 412:Src/main.c    ****     /* CAN1_RX1_IRQn interrupt configuration */
 286              		.loc 1 412 0
 287 001c 1420     		movs	r0, #20
 288 001e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 289              	.LVL13:
 414:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
ARM GAS  /tmp/ccP3MicS.s 			page 24


 290              		.loc 1 414 0
 291 0022 0022     		movs	r2, #0
 292 0024 1146     		mov	r1, r2
 293 0026 1520     		movs	r0, #21
 294 0028 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL14:
 415:Src/main.c    ****     /* CAN1_SCE_IRQn interrupt configuration */
 296              		.loc 1 415 0
 297 002c 1520     		movs	r0, #21
 298 002e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 299              	.LVL15:
 417:Src/main.c    ****     HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 300              		.loc 1 417 0
 301 0032 0022     		movs	r2, #0
 302 0034 1146     		mov	r1, r2
 303 0036 1620     		movs	r0, #22
 304 0038 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 305              	.LVL16:
 418:Src/main.c    ****     /* ADC_IRQn interrupt configuration */
 306              		.loc 1 418 0
 307 003c 1620     		movs	r0, #22
 308 003e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 309              	.LVL17:
 420:Src/main.c    ****     HAL_NVIC_EnableIRQ(ADC_IRQn);
 310              		.loc 1 420 0
 311 0042 0022     		movs	r2, #0
 312 0044 1146     		mov	r1, r2
 313 0046 1220     		movs	r0, #18
 314 0048 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 315              	.LVL18:
 421:Src/main.c    ****     /* TIM7_IRQn interrupt configuration */
 316              		.loc 1 421 0
 317 004c 1220     		movs	r0, #18
 318 004e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 319              	.LVL19:
 423:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM7_IRQn);
 320              		.loc 1 423 0
 321 0052 0022     		movs	r2, #0
 322 0054 1146     		mov	r1, r2
 323 0056 3720     		movs	r0, #55
 324 0058 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 325              	.LVL20:
 424:Src/main.c    ****     /* TIM6_DAC_IRQn interrupt configuration */
 326              		.loc 1 424 0
 327 005c 3720     		movs	r0, #55
 328 005e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 329              	.LVL21:
 426:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 330              		.loc 1 426 0
 331 0062 0022     		movs	r2, #0
 332 0064 1146     		mov	r1, r2
 333 0066 3620     		movs	r0, #54
 334 0068 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 335              	.LVL22:
 427:Src/main.c    ****     /* TIM5_IRQn interrupt configuration */
 336              		.loc 1 427 0
 337 006c 3620     		movs	r0, #54
ARM GAS  /tmp/ccP3MicS.s 			page 25


 338 006e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 339              	.LVL23:
 429:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 340              		.loc 1 429 0
 341 0072 0022     		movs	r2, #0
 342 0074 1146     		mov	r1, r2
 343 0076 3220     		movs	r0, #50
 344 0078 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 345              	.LVL24:
 430:Src/main.c    ****     /* TIM2_IRQn interrupt configuration */
 346              		.loc 1 430 0
 347 007c 3220     		movs	r0, #50
 348 007e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 349              	.LVL25:
 432:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM2_IRQn);
 350              		.loc 1 432 0
 351 0082 0022     		movs	r2, #0
 352 0084 1146     		mov	r1, r2
 353 0086 1C20     		movs	r0, #28
 354 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 355              	.LVL26:
 433:Src/main.c    ****     /* TIM1_UP_TIM10_IRQn interrupt configuration */
 356              		.loc 1 433 0
 357 008c 1C20     		movs	r0, #28
 358 008e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 359              	.LVL27:
 435:Src/main.c    ****     HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 360              		.loc 1 435 0
 361 0092 0022     		movs	r2, #0
 362 0094 1146     		mov	r1, r2
 363 0096 1920     		movs	r0, #25
 364 0098 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 365              	.LVL28:
 436:Src/main.c    ****     /* USART1_IRQn interrupt configuration */
 366              		.loc 1 436 0
 367 009c 1920     		movs	r0, #25
 368 009e FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 369              	.LVL29:
 438:Src/main.c    ****     HAL_NVIC_EnableIRQ(USART1_IRQn);
 370              		.loc 1 438 0
 371 00a2 0022     		movs	r2, #0
 372 00a4 1146     		mov	r1, r2
 373 00a6 2520     		movs	r0, #37
 374 00a8 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 375              	.LVL30:
 439:Src/main.c    **** }
 376              		.loc 1 439 0
 377 00ac 2520     		movs	r0, #37
 378 00ae FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 379              	.LVL31:
 380 00b2 08BD     		pop	{r3, pc}
 381              		.cfi_endproc
 382              	.LFE134:
 384              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
 385              		.align	1
 386              		.global	HAL_ADC_ConvCpltCallback
 387              		.syntax unified
ARM GAS  /tmp/ccP3MicS.s 			page 26


 388              		.thumb
 389              		.thumb_func
 390              		.fpu fpv4-sp-d16
 392              	HAL_ADC_ConvCpltCallback:
 393              	.LFB131:
 130:Src/main.c    ****     pot_1.val = ADC_buffer[0];
 394              		.loc 1 130 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399              	.LVL32:
 131:Src/main.c    ****     pot_2.val = ADC_buffer[1];
 400              		.loc 1 131 0
 401 0000 054B     		ldr	r3, .L12
 402 0002 1968     		ldr	r1, [r3]
 403 0004 054A     		ldr	r2, .L12+4
 404 0006 1161     		str	r1, [r2, #16]
 132:Src/main.c    ****     pot_3.val = ADC_buffer[2];
 405              		.loc 1 132 0
 406 0008 5968     		ldr	r1, [r3, #4]
 407 000a 054A     		ldr	r2, .L12+8
 408 000c 1161     		str	r1, [r2, #16]
 133:Src/main.c    ****     /*int txt_1[100];
 409              		.loc 1 133 0
 410 000e 9A68     		ldr	r2, [r3, #8]
 411 0010 044B     		ldr	r3, .L12+12
 412 0012 1A61     		str	r2, [r3, #16]
 413 0014 7047     		bx	lr
 414              	.L13:
 415 0016 00BF     		.align	2
 416              	.L12:
 417 0018 00000000 		.word	ADC_buffer
 418 001c 00000000 		.word	pot_1
 419 0020 00000000 		.word	pot_2
 420 0024 00000000 		.word	pot_3
 421              		.cfi_endproc
 422              	.LFE131:
 424              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 425              		.align	1
 426              		.global	HAL_UART_RxCpltCallback
 427              		.syntax unified
 428              		.thumb
 429              		.thumb_func
 430              		.fpu fpv4-sp-d16
 432              	HAL_UART_RxCpltCallback:
 433              	.LFB150:
1017:Src/main.c    **** 
1018:Src/main.c    **** /* USER CODE BEGIN 4 */
1019:Src/main.c    **** void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
1020:Src/main.c    **** {
 434              		.loc 1 1020 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 0
 437              		@ frame_needed = 0, uses_anonymous_args = 0
 438              	.LVL33:
 439 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccP3MicS.s 			page 27


 440              	.LCFI7:
 441              		.cfi_def_cfa_offset 8
 442              		.cfi_offset 3, -8
 443              		.cfi_offset 14, -4
1021:Src/main.c    ****     if (huart == &huart1)
 444              		.loc 1 1021 0
 445 0002 044B     		ldr	r3, .L18
 446 0004 9842     		cmp	r0, r3
 447 0006 00D0     		beq	.L17
 448              	.LVL34:
 449              	.L14:
 450 0008 08BD     		pop	{r3, pc}
 451              	.LVL35:
 452              	.L17:
1022:Src/main.c    ****     {
1023:Src/main.c    ****         gps_read_it(huart, &gps_main);
 453              		.loc 1 1023 0
 454 000a 0349     		ldr	r1, .L18+4
 455 000c FFF7FEFF 		bl	gps_read_it
 456              	.LVL36:
1024:Src/main.c    ****     }
1025:Src/main.c    **** }
 457              		.loc 1 1025 0
 458 0010 FAE7     		b	.L14
 459              	.L19:
 460 0012 00BF     		.align	2
 461              	.L18:
 462 0014 00000000 		.word	huart1
 463 0018 00000000 		.word	gps_main
 464              		.cfi_endproc
 465              	.LFE150:
 467              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 468              		.align	1
 469              		.global	HAL_UART_TxCpltCallback
 470              		.syntax unified
 471              		.thumb
 472              		.thumb_func
 473              		.fpu fpv4-sp-d16
 475              	HAL_UART_TxCpltCallback:
 476              	.LFB151:
1026:Src/main.c    **** 
1027:Src/main.c    **** void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
1028:Src/main.c    **** {
 477              		.loc 1 1028 0
 478              		.cfi_startproc
 479              		@ args = 0, pretend = 0, frame = 0
 480              		@ frame_needed = 0, uses_anonymous_args = 0
 481              	.LVL37:
 482 0000 08B5     		push	{r3, lr}
 483              	.LCFI8:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 3, -8
 486              		.cfi_offset 14, -4
1029:Src/main.c    ****     if (huart == &huart2)
 487              		.loc 1 1029 0
 488 0002 044B     		ldr	r3, .L24
 489 0004 8342     		cmp	r3, r0
ARM GAS  /tmp/ccP3MicS.s 			page 28


 490 0006 00D0     		beq	.L23
 491              	.LVL38:
 492              	.L20:
 493 0008 08BD     		pop	{r3, pc}
 494              	.LVL39:
 495              	.L23:
1030:Src/main.c    ****     {
1031:Src/main.c    ****         print_it(&huart2);
 496              		.loc 1 1031 0
 497 000a 1846     		mov	r0, r3
 498              	.LVL40:
 499 000c FFF7FEFF 		bl	print_it
 500              	.LVL41:
1032:Src/main.c    ****     }
1033:Src/main.c    **** }
 501              		.loc 1 1033 0
 502 0010 FAE7     		b	.L20
 503              	.L25:
 504 0012 00BF     		.align	2
 505              	.L24:
 506 0014 00000000 		.word	huart2
 507              		.cfi_endproc
 508              	.LFE151:
 510              		.section	.text.HAL_CAN_RxFifo0FullCallback,"ax",%progbits
 511              		.align	1
 512              		.global	HAL_CAN_RxFifo0FullCallback
 513              		.syntax unified
 514              		.thumb
 515              		.thumb_func
 516              		.fpu fpv4-sp-d16
 518              	HAL_CAN_RxFifo0FullCallback:
 519              	.LFB152:
1034:Src/main.c    **** 
1035:Src/main.c    **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
1036:Src/main.c    **** {
 520              		.loc 1 1036 0
 521              		.cfi_startproc
 522              		@ args = 0, pretend = 0, frame = 0
 523              		@ frame_needed = 0, uses_anonymous_args = 0
 524              	.LVL42:
 525 0000 38B5     		push	{r3, r4, r5, lr}
 526              	.LCFI9:
 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
1037:Src/main.c    ****     /// CALIBRATION CODE///
1038:Src/main.c    ****     int idsave = CAN_Receive(&can);
 532              		.loc 1 1038 0
 533 0002 4B48     		ldr	r0, .L46
 534              	.LVL43:
 535 0004 FFF7FEFF 		bl	CAN_Receive
 536              	.LVL44:
 537 0008 0446     		mov	r4, r0
 538              	.LVL45:
1039:Src/main.c    ****     //201/202
ARM GAS  /tmp/ccP3MicS.s 			page 29


1040:Src/main.c    **** 
1041:Src/main.c    ****     if (idsave == 0x55 || idsave == 0x201)
 539              		.loc 1 1041 0
 540 000a 5528     		cmp	r0, #85
 541 000c 1ED0     		beq	.L27
 542              		.loc 1 1041 0 is_stmt 0 discriminator 1
 543 000e 40F20123 		movw	r3, #513
 544 0012 9842     		cmp	r0, r3
 545 0014 1AD0     		beq	.L27
 546              	.LVL46:
 547              	.L28:
1042:Src/main.c    ****     {
1043:Src/main.c    ****         if (can.dataRx[0] == 0x51 || can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0
1044:Src/main.c    ****         {
1045:Src/main.c    ****             command_flag = 1;
1046:Src/main.c    ****             idsave = 0;
1047:Src/main.c    ****         }
1048:Src/main.c    ****     }
1049:Src/main.c    ****     if (idsave == 0xA0 || idsave == 0xAA || idsave == 0x181)
 548              		.loc 1 1049 0 is_stmt 1
 549 0016 A02C     		cmp	r4, #160
 550 0018 05D0     		beq	.L30
 551              		.loc 1 1049 0 is_stmt 0 discriminator 1
 552 001a AA2C     		cmp	r4, #170
 553 001c 03D0     		beq	.L30
 554              		.loc 1 1049 0 discriminator 2
 555 001e 40F28113 		movw	r3, #385
 556 0022 9C42     		cmp	r4, r3
 557 0024 0DD1     		bne	.L31
 558              	.L30:
1050:Src/main.c    ****     {
1051:Src/main.c    ****         if (can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0
 559              		.loc 1 1051 0 is_stmt 1
 560 0026 424B     		ldr	r3, .L46
 561 0028 1A7C     		ldrb	r2, [r3, #16]	@ zero_extendqisi2
 562 002a D31E     		subs	r3, r2, #3
 563 002c DBB2     		uxtb	r3, r3
 564 002e 022B     		cmp	r3, #2
 565 0030 03D9     		bls	.L32
 566              		.loc 1 1051 0 is_stmt 0 discriminator 1
 567 0032 082A     		cmp	r2, #8
 568 0034 01D0     		beq	.L32
 569              		.loc 1 1051 0 discriminator 2
 570 0036 D82A     		cmp	r2, #216
 571 0038 03D1     		bne	.L31
 572              	.L32:
1052:Src/main.c    ****         {
1053:Src/main.c    ****             command_flag = 1;
 573              		.loc 1 1053 0 is_stmt 1
 574 003a 0122     		movs	r2, #1
 575 003c 3D4B     		ldr	r3, .L46+4
 576 003e 1A60     		str	r2, [r3]
 577              	.LVL47:
1054:Src/main.c    ****             idsave = 0;
 578              		.loc 1 1054 0
 579 0040 0024     		movs	r4, #0
 580              	.LVL48:
ARM GAS  /tmp/ccP3MicS.s 			page 30


 581              	.L31:
1055:Src/main.c    ****         }
1056:Src/main.c    ****     }
1057:Src/main.c    **** /*
1058:Src/main.c    ****     if (idsave == 0x181){
1059:Src/main.c    ****         if (can.dataRx[0] = 0xA8){
1060:Src/main.c    ****             inverter_rpm = can.dataRx[2] * 256 + can.dataRx[1];
1061:Src/main.c    ****             //x : 32000 = 100 : 7000
1062:Src/main.c    ****             inverter_rpm = inverter_rpm * 7000/32767;
1063:Src/main.c    ****             if (inverter_rpm > 7000){
1064:Src/main.c    ****                 inverter_rpm -= 14000;
1065:Src/main.c    ****             }
1066:Src/main.c    ****         }
1067:Src/main.c    ****     }*/
1068:Src/main.c    **** 
1069:Src/main.c    ****     if (idsave == 0xBB)
 582              		.loc 1 1069 0
 583 0042 BB2C     		cmp	r4, #187
 584 0044 17D0     		beq	.L42
 585              	.L33:
1070:Src/main.c    ****     {
1071:Src/main.c    ****         //sprintf(val0, "APPS1: %d \r\n", idsave);  //use "%lu" for long, "%d" for int
1072:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), 10);
1073:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 0))
1074:Src/main.c    ****         {
1075:Src/main.c    ****             set_min(&pot_2);
1076:Src/main.c    ****             calibration_flag = 1;
1077:Src/main.c    **** 
1078:Src/main.c    ****             can.dataTx[0] = 2;
1079:Src/main.c    ****             can.dataTx[1] = 0;
1080:Src/main.c    ****             can.dataTx[2] = 0;
1081:Src/main.c    ****             can.dataTx[3] = 0;
1082:Src/main.c    ****             can.dataTx[4] = 0;
1083:Src/main.c    ****             can.dataTx[5] = 0;
1084:Src/main.c    ****             can.dataTx[6] = 0;
1085:Src/main.c    ****             can.dataTx[7] = 0;
1086:Src/main.c    ****             can.id = 0xBC;
1087:Src/main.c    ****             can.size = 8;
1088:Src/main.c    ****             for (int i = 0; i < 10; i++)
1089:Src/main.c    ****             {
1090:Src/main.c    ****                 CAN_Send(&can);
1091:Src/main.c    ****             }
1092:Src/main.c    ****         }
1093:Src/main.c    ****         if ((can.dataRx[0] == 2) && (can.dataRx[1] == 1))
1094:Src/main.c    ****         {
1095:Src/main.c    ****             set_max(&pot_2);
1096:Src/main.c    ****             calibration_flag = 0;
1097:Src/main.c    **** 
1098:Src/main.c    ****             can.dataTx[0] = 2;
1099:Src/main.c    ****             can.dataTx[1] = 1;
1100:Src/main.c    ****             can.dataTx[2] = 0;
1101:Src/main.c    ****             can.dataTx[3] = 0;
1102:Src/main.c    ****             can.dataTx[4] = 0;
1103:Src/main.c    ****             can.dataTx[5] = 0;
1104:Src/main.c    ****             ;
1105:Src/main.c    ****             can.dataTx[6] = 0;
1106:Src/main.c    ****             can.dataTx[7] = 0;
ARM GAS  /tmp/ccP3MicS.s 			page 31


1107:Src/main.c    ****             can.id = 0xBC;
1108:Src/main.c    ****             can.size = 8;
1109:Src/main.c    ****             for (int i = 0; i < 10; i++)
1110:Src/main.c    ****             {
1111:Src/main.c    ****                 CAN_Send(&can);
1112:Src/main.c    ****             }
1113:Src/main.c    ****         }
1114:Src/main.c    ****         //val0rang = abs(valMax0 - valMin0);
1115:Src/main.c    ****         pot_2.range = abs(pot_2.max - pot_2.min);
1116:Src/main.c    ****         int max_tmp = pot_2.max;
1117:Src/main.c    ****         int min_tmp = pot_2.min;
1118:Src/main.c    ****         if (max_tmp > min_tmp)
1119:Src/main.c    ****         {
1120:Src/main.c    ****             pot_2.max = max_tmp;
1121:Src/main.c    ****             pot_2.min = min_tmp;
1122:Src/main.c    ****         }
1123:Src/main.c    ****         if (max_tmp < min_tmp)
1124:Src/main.c    ****         {
1125:Src/main.c    ****             pot_2.max = min_tmp;
1126:Src/main.c    ****             pot_2.min = max_tmp;
1127:Src/main.c    ****         }
1128:Src/main.c    ****     }
1129:Src/main.c    **** 
1130:Src/main.c    ****     //TIMER Interrupt setup via CAN Message
1131:Src/main.c    ****     if (idsave == 195 && can.dataRx[0] == 1)
 586              		.loc 1 1131 0
 587 0046 C32C     		cmp	r4, #195
 588 0048 65D0     		beq	.L43
 589              	.L26:
 590 004a 38BD     		pop	{r3, r4, r5, pc}
 591              	.LVL49:
 592              	.L27:
1043:Src/main.c    ****         {
 593              		.loc 1 1043 0
 594 004c 384B     		ldr	r3, .L46
 595 004e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 596 0050 512B     		cmp	r3, #81
 597 0052 0BD0     		beq	.L29
1043:Src/main.c    ****         {
 598              		.loc 1 1043 0 is_stmt 0 discriminator 1
 599 0054 032B     		cmp	r3, #3
 600 0056 09D0     		beq	.L29
1043:Src/main.c    ****         {
 601              		.loc 1 1043 0 discriminator 2
 602 0058 042B     		cmp	r3, #4
 603 005a 07D0     		beq	.L29
1043:Src/main.c    ****         {
 604              		.loc 1 1043 0 discriminator 3
 605 005c 052B     		cmp	r3, #5
 606 005e 05D0     		beq	.L29
1043:Src/main.c    ****         {
 607              		.loc 1 1043 0 discriminator 4
 608 0060 082B     		cmp	r3, #8
 609 0062 03D0     		beq	.L29
1043:Src/main.c    ****         {
 610              		.loc 1 1043 0 discriminator 5
 611 0064 0A2B     		cmp	r3, #10
ARM GAS  /tmp/ccP3MicS.s 			page 32


 612 0066 01D0     		beq	.L29
1043:Src/main.c    ****         {
 613              		.loc 1 1043 0 discriminator 6
 614 0068 0B2B     		cmp	r3, #11
 615 006a D4D1     		bne	.L28
 616              	.L29:
1045:Src/main.c    ****             idsave = 0;
 617              		.loc 1 1045 0 is_stmt 1
 618 006c 0122     		movs	r2, #1
 619 006e 314B     		ldr	r3, .L46+4
 620 0070 1A60     		str	r2, [r3]
 621              	.LVL50:
1046:Src/main.c    ****         }
 622              		.loc 1 1046 0
 623 0072 0024     		movs	r4, #0
 624 0074 CFE7     		b	.L28
 625              	.LVL51:
 626              	.L42:
 627              	.LBB7:
1073:Src/main.c    ****         {
 628              		.loc 1 1073 0
 629 0076 2E4B     		ldr	r3, .L46
 630 0078 1B8A     		ldrh	r3, [r3, #16]
 631 007a 022B     		cmp	r3, #2
 632 007c 11D0     		beq	.L44
 633              	.L34:
1093:Src/main.c    ****         {
 634              		.loc 1 1093 0
 635 007e 2C4B     		ldr	r3, .L46
 636 0080 1B8A     		ldrh	r3, [r3, #16]
 637 0082 B3F5817F 		cmp	r3, #258
 638 0086 29D0     		beq	.L45
 639              	.L37:
1115:Src/main.c    ****         int max_tmp = pot_2.max;
 640              		.loc 1 1115 0
 641 0088 2B4B     		ldr	r3, .L46+8
 642 008a 5968     		ldr	r1, [r3, #4]
 643 008c 9868     		ldr	r0, [r3, #8]
 644 008e 0A1A     		subs	r2, r1, r0
 645 0090 002A     		cmp	r2, #0
 646 0092 B8BF     		it	lt
 647 0094 5242     		rsblt	r2, r2, #0
 648 0096 DA60     		str	r2, [r3, #12]
 649              	.LVL52:
1123:Src/main.c    ****         {
 650              		.loc 1 1123 0
 651 0098 8142     		cmp	r1, r0
 652 009a D4DA     		bge	.L33
1125:Src/main.c    ****             pot_2.min = max_tmp;
 653              		.loc 1 1125 0
 654 009c 5860     		str	r0, [r3, #4]
1126:Src/main.c    ****         }
 655              		.loc 1 1126 0
 656 009e 9960     		str	r1, [r3, #8]
 657 00a0 D1E7     		b	.L33
 658              	.LVL53:
 659              	.L44:
ARM GAS  /tmp/ccP3MicS.s 			page 33


1075:Src/main.c    ****             calibration_flag = 1;
 660              		.loc 1 1075 0
 661 00a2 2548     		ldr	r0, .L46+8
 662 00a4 FFF7FEFF 		bl	set_min
 663              	.LVL54:
1076:Src/main.c    **** 
 664              		.loc 1 1076 0
 665 00a8 0122     		movs	r2, #1
 666 00aa 244B     		ldr	r3, .L46+12
 667 00ac 1A60     		str	r2, [r3]
1078:Src/main.c    ****             can.dataTx[1] = 0;
 668              		.loc 1 1078 0
 669 00ae 204B     		ldr	r3, .L46
 670 00b0 0222     		movs	r2, #2
 671 00b2 1A72     		strb	r2, [r3, #8]
1079:Src/main.c    ****             can.dataTx[2] = 0;
 672              		.loc 1 1079 0
 673 00b4 0025     		movs	r5, #0
 674 00b6 5D72     		strb	r5, [r3, #9]
1080:Src/main.c    ****             can.dataTx[3] = 0;
 675              		.loc 1 1080 0
 676 00b8 9D72     		strb	r5, [r3, #10]
1081:Src/main.c    ****             can.dataTx[4] = 0;
 677              		.loc 1 1081 0
 678 00ba DD72     		strb	r5, [r3, #11]
1082:Src/main.c    ****             can.dataTx[5] = 0;
 679              		.loc 1 1082 0
 680 00bc 1D73     		strb	r5, [r3, #12]
1083:Src/main.c    ****             can.dataTx[6] = 0;
 681              		.loc 1 1083 0
 682 00be 5D73     		strb	r5, [r3, #13]
1084:Src/main.c    ****             can.dataTx[7] = 0;
 683              		.loc 1 1084 0
 684 00c0 9D73     		strb	r5, [r3, #14]
1085:Src/main.c    ****             can.id = 0xBC;
 685              		.loc 1 1085 0
 686 00c2 DD73     		strb	r5, [r3, #15]
1086:Src/main.c    ****             can.size = 8;
 687              		.loc 1 1086 0
 688 00c4 BC22     		movs	r2, #188
 689 00c6 1A60     		str	r2, [r3]
1087:Src/main.c    ****             for (int i = 0; i < 10; i++)
 690              		.loc 1 1087 0
 691 00c8 0822     		movs	r2, #8
 692 00ca 5A60     		str	r2, [r3, #4]
 693              	.LVL55:
 694              	.LBB8:
1088:Src/main.c    ****             {
 695              		.loc 1 1088 0
 696 00cc 03E0     		b	.L35
 697              	.LVL56:
 698              	.L36:
1090:Src/main.c    ****             }
 699              		.loc 1 1090 0 discriminator 3
 700 00ce 1848     		ldr	r0, .L46
 701 00d0 FFF7FEFF 		bl	CAN_Send
 702              	.LVL57:
ARM GAS  /tmp/ccP3MicS.s 			page 34


1088:Src/main.c    ****             {
 703              		.loc 1 1088 0 discriminator 3
 704 00d4 0135     		adds	r5, r5, #1
 705              	.LVL58:
 706              	.L35:
1088:Src/main.c    ****             {
 707              		.loc 1 1088 0 is_stmt 0 discriminator 1
 708 00d6 092D     		cmp	r5, #9
 709 00d8 F9DD     		ble	.L36
 710 00da D0E7     		b	.L34
 711              	.LVL59:
 712              	.L45:
 713              	.LBE8:
1095:Src/main.c    ****             calibration_flag = 0;
 714              		.loc 1 1095 0 is_stmt 1
 715 00dc 1648     		ldr	r0, .L46+8
 716 00de FFF7FEFF 		bl	set_max
 717              	.LVL60:
1096:Src/main.c    **** 
 718              		.loc 1 1096 0
 719 00e2 0025     		movs	r5, #0
 720 00e4 154B     		ldr	r3, .L46+12
 721 00e6 1D60     		str	r5, [r3]
1098:Src/main.c    ****             can.dataTx[1] = 1;
 722              		.loc 1 1098 0
 723 00e8 114B     		ldr	r3, .L46
 724 00ea 0222     		movs	r2, #2
 725 00ec 1A72     		strb	r2, [r3, #8]
1099:Src/main.c    ****             can.dataTx[2] = 0;
 726              		.loc 1 1099 0
 727 00ee 0122     		movs	r2, #1
 728 00f0 5A72     		strb	r2, [r3, #9]
1100:Src/main.c    ****             can.dataTx[3] = 0;
 729              		.loc 1 1100 0
 730 00f2 9D72     		strb	r5, [r3, #10]
1101:Src/main.c    ****             can.dataTx[4] = 0;
 731              		.loc 1 1101 0
 732 00f4 DD72     		strb	r5, [r3, #11]
1102:Src/main.c    ****             can.dataTx[5] = 0;
 733              		.loc 1 1102 0
 734 00f6 1D73     		strb	r5, [r3, #12]
1103:Src/main.c    ****             ;
 735              		.loc 1 1103 0
 736 00f8 5D73     		strb	r5, [r3, #13]
1105:Src/main.c    ****             can.dataTx[7] = 0;
 737              		.loc 1 1105 0
 738 00fa 9D73     		strb	r5, [r3, #14]
1106:Src/main.c    ****             can.id = 0xBC;
 739              		.loc 1 1106 0
 740 00fc DD73     		strb	r5, [r3, #15]
1107:Src/main.c    ****             can.size = 8;
 741              		.loc 1 1107 0
 742 00fe BC22     		movs	r2, #188
 743 0100 1A60     		str	r2, [r3]
1108:Src/main.c    ****             for (int i = 0; i < 10; i++)
 744              		.loc 1 1108 0
 745 0102 0822     		movs	r2, #8
ARM GAS  /tmp/ccP3MicS.s 			page 35


 746 0104 5A60     		str	r2, [r3, #4]
 747              	.LVL61:
 748              	.LBB9:
1109:Src/main.c    ****             {
 749              		.loc 1 1109 0
 750 0106 03E0     		b	.L38
 751              	.LVL62:
 752              	.L39:
1111:Src/main.c    ****             }
 753              		.loc 1 1111 0 discriminator 3
 754 0108 0948     		ldr	r0, .L46
 755 010a FFF7FEFF 		bl	CAN_Send
 756              	.LVL63:
1109:Src/main.c    ****             {
 757              		.loc 1 1109 0 discriminator 3
 758 010e 0135     		adds	r5, r5, #1
 759              	.LVL64:
 760              	.L38:
1109:Src/main.c    ****             {
 761              		.loc 1 1109 0 is_stmt 0 discriminator 1
 762 0110 092D     		cmp	r5, #9
 763 0112 F9DD     		ble	.L39
 764 0114 B8E7     		b	.L37
 765              	.LVL65:
 766              	.L43:
 767              	.LBE9:
 768              	.LBE7:
 769              		.loc 1 1131 0 is_stmt 1 discriminator 1
 770 0116 064B     		ldr	r3, .L46
 771 0118 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 772 011a 012B     		cmp	r3, #1
 773 011c 95D1     		bne	.L26
1132:Src/main.c    ****     {
1133:Src/main.c    ****         multiplier = can.dataRx[1] * 256 + can.dataRx[2];
 774              		.loc 1 1133 0
 775 011e 044A     		ldr	r2, .L46
 776 0120 517C     		ldrb	r1, [r2, #17]	@ zero_extendqisi2
 777 0122 937C     		ldrb	r3, [r2, #18]	@ zero_extendqisi2
 778 0124 03EB0123 		add	r3, r3, r1, lsl #8
 779 0128 054A     		ldr	r2, .L46+16
 780 012a 1360     		str	r3, [r2]
1134:Src/main.c    ****     }
1135:Src/main.c    **** }
 781              		.loc 1 1135 0
 782 012c 8DE7     		b	.L26
 783              	.L47:
 784 012e 00BF     		.align	2
 785              	.L46:
 786 0130 00000000 		.word	can
 787 0134 00000000 		.word	.LANCHOR0
 788 0138 00000000 		.word	pot_2
 789 013c 00000000 		.word	.LANCHOR1
 790 0140 00000000 		.word	.LANCHOR2
 791              		.cfi_endproc
 792              	.LFE152:
 794              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 795              		.align	1
ARM GAS  /tmp/ccP3MicS.s 			page 36


 796              		.global	HAL_TIM_PeriodElapsedCallback
 797              		.syntax unified
 798              		.thumb
 799              		.thumb_func
 800              		.fpu fpv4-sp-d16
 802              	HAL_TIM_PeriodElapsedCallback:
 803              	.LFB153:
1136:Src/main.c    **** 
1137:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
1138:Src/main.c    **** {
 804              		.loc 1 1138 0
 805              		.cfi_startproc
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              	.LVL66:
 809 0000 10B5     		push	{r4, lr}
 810              	.LCFI10:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 4, -8
 813              		.cfi_offset 14, -4
 814 0002 0446     		mov	r4, r0
1139:Src/main.c    **** 
1140:Src/main.c    ****     if (htim == &htim10)
 815              		.loc 1 1140 0
 816 0004 194B     		ldr	r3, .L61
 817 0006 9842     		cmp	r0, r3
 818 0008 03D0     		beq	.L56
 819              	.LVL67:
 820              	.L49:
1141:Src/main.c    ****     {
1142:Src/main.c    ****         //READING SENSORS
1143:Src/main.c    ****         if (flag == 1 * multiplier)
1144:Src/main.c    ****         {
1145:Src/main.c    ****             // ACCEL
1146:Src/main.c    ****             LSMD9S0_accel_read(&accel);
1147:Src/main.c    **** 
1148:Src/main.c    ****         }
1149:Src/main.c    ****         else if (flag == 2 * multiplier)
1150:Src/main.c    ****         {
1151:Src/main.c    ****             // STEER
1152:Src/main.c    ****             calc_pot_value(&pot_2);
1153:Src/main.c    ****         }
1154:Src/main.c    ****         else if (flag == 3 * multiplier)
1155:Src/main.c    ****         {
1156:Src/main.c    ****             // GYRO
1157:Src/main.c    ****             LSMD9S0_gyro_read(&gyro);
1158:Src/main.c    ****             //imu_elaborate_data(&gyro);
1159:Src/main.c    ****         }
1160:Src/main.c    **** 
1161:Src/main.c    ****         if (flag >= (3 * multiplier))
1162:Src/main.c    ****         {
1163:Src/main.c    ****             flag = 0;
1164:Src/main.c    ****         }
1165:Src/main.c    ****         else
1166:Src/main.c    ****         {
1167:Src/main.c    ****             flag++;
1168:Src/main.c    ****         }
ARM GAS  /tmp/ccP3MicS.s 			page 37


1169:Src/main.c    ****     }
1170:Src/main.c    **** 
1171:Src/main.c    ****     if (htim == &htim7)
 821              		.loc 1 1171 0
 822 000a 194B     		ldr	r3, .L61+4
 823 000c 9C42     		cmp	r4, r3
 824 000e 29D0     		beq	.L57
 825              	.L48:
 826 0010 10BD     		pop	{r4, pc}
 827              	.LVL68:
 828              	.L56:
1143:Src/main.c    ****         {
 829              		.loc 1 1143 0
 830 0012 184B     		ldr	r3, .L61+8
 831 0014 1A68     		ldr	r2, [r3]
 832 0016 184B     		ldr	r3, .L61+12
 833 0018 1B68     		ldr	r3, [r3]
 834 001a 9A42     		cmp	r2, r3
 835 001c 12D0     		beq	.L58
1149:Src/main.c    ****         {
 836              		.loc 1 1149 0
 837 001e B2EB430F 		cmp	r2, r3, lsl #1
 838 0022 13D0     		beq	.L59
1154:Src/main.c    ****         {
 839              		.loc 1 1154 0
 840 0024 03EB4303 		add	r3, r3, r3, lsl #1
 841 0028 9A42     		cmp	r2, r3
 842 002a 13D0     		beq	.L60
 843              	.LVL69:
 844              	.L51:
1161:Src/main.c    ****         {
 845              		.loc 1 1161 0
 846 002c 124B     		ldr	r3, .L61+12
 847 002e 1B68     		ldr	r3, [r3]
 848 0030 03EB4303 		add	r3, r3, r3, lsl #1
 849 0034 0F4A     		ldr	r2, .L61+8
 850 0036 1268     		ldr	r2, [r2]
 851 0038 9342     		cmp	r3, r2
 852 003a 0FDC     		bgt	.L53
1163:Src/main.c    ****         }
 853              		.loc 1 1163 0
 854 003c 0022     		movs	r2, #0
 855 003e 0D4B     		ldr	r3, .L61+8
 856 0040 1A60     		str	r2, [r3]
 857 0042 E2E7     		b	.L49
 858              	.LVL70:
 859              	.L58:
1146:Src/main.c    **** 
 860              		.loc 1 1146 0
 861 0044 0D48     		ldr	r0, .L61+16
 862              	.LVL71:
 863 0046 FFF7FEFF 		bl	LSMD9S0_accel_read
 864              	.LVL72:
 865 004a EFE7     		b	.L51
 866              	.LVL73:
 867              	.L59:
1152:Src/main.c    ****         }
ARM GAS  /tmp/ccP3MicS.s 			page 38


 868              		.loc 1 1152 0
 869 004c 0C48     		ldr	r0, .L61+20
 870              	.LVL74:
 871 004e FFF7FEFF 		bl	calc_pot_value
 872              	.LVL75:
 873 0052 EBE7     		b	.L51
 874              	.LVL76:
 875              	.L60:
1157:Src/main.c    ****             //imu_elaborate_data(&gyro);
 876              		.loc 1 1157 0
 877 0054 0B48     		ldr	r0, .L61+24
 878              	.LVL77:
 879 0056 FFF7FEFF 		bl	LSMD9S0_gyro_read
 880              	.LVL78:
 881 005a E7E7     		b	.L51
 882              	.L53:
1167:Src/main.c    ****         }
 883              		.loc 1 1167 0
 884 005c 0132     		adds	r2, r2, #1
 885 005e 054B     		ldr	r3, .L61+8
 886 0060 1A60     		str	r2, [r3]
 887 0062 D2E7     		b	.L49
 888              	.L57:
1172:Src/main.c    ****     {
1173:Src/main.c    ****         encoder_tim_interrupt(&enc);
 889              		.loc 1 1173 0
 890 0064 0848     		ldr	r0, .L61+28
 891 0066 FFF7FEFF 		bl	encoder_tim_interrupt
 892              	.LVL79:
1174:Src/main.c    ****     }
1175:Src/main.c    **** }
 893              		.loc 1 1175 0
 894 006a D1E7     		b	.L48
 895              	.L62:
 896              		.align	2
 897              	.L61:
 898 006c 00000000 		.word	htim10
 899 0070 00000000 		.word	htim7
 900 0074 00000000 		.word	.LANCHOR3
 901 0078 00000000 		.word	.LANCHOR2
 902 007c 00000000 		.word	accel
 903 0080 00000000 		.word	pot_2
 904 0084 00000000 		.word	gyro
 905 0088 00000000 		.word	enc
 906              		.cfi_endproc
 907              	.LFE153:
 909              		.global	__aeabi_d2uiz
 910              		.global	__aeabi_ddiv
 911              		.global	__aeabi_dmul
 912              		.global	__aeabi_i2d
 913              		.global	__aeabi_dadd
 914              		.section	.text.send_CAN_data,"ax",%progbits
 915              		.align	1
 916              		.global	send_CAN_data
 917              		.syntax unified
 918              		.thumb
 919              		.thumb_func
ARM GAS  /tmp/ccP3MicS.s 			page 39


 920              		.fpu fpv4-sp-d16
 922              	send_CAN_data:
 923              	.LFB154:
1176:Src/main.c    **** 
1177:Src/main.c    **** int send_CAN_data(uint32_t millis)
1178:Src/main.c    **** {
 924              		.loc 1 1178 0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 8
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              	.LVL80:
 929 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 930              	.LCFI11:
 931              		.cfi_def_cfa_offset 36
 932              		.cfi_offset 4, -36
 933              		.cfi_offset 5, -32
 934              		.cfi_offset 6, -28
 935              		.cfi_offset 7, -24
 936              		.cfi_offset 8, -20
 937              		.cfi_offset 9, -16
 938              		.cfi_offset 10, -12
 939              		.cfi_offset 11, -8
 940              		.cfi_offset 14, -4
 941 0004 83B0     		sub	sp, sp, #12
 942              	.LCFI12:
 943              		.cfi_def_cfa_offset 48
 944 0006 0446     		mov	r4, r0
 945              	.LVL81:
1179:Src/main.c    **** 
1180:Src/main.c    ****     int sent_flag = 0;
1181:Src/main.c    **** 
1182:Src/main.c    ****     //-------------------SEND Encoder-------------------//
1183:Src/main.c    ****     if (millis % 100 == 0)
 946              		.loc 1 1183 0
 947 0008 9D4B     		ldr	r3, .L76+8
 948 000a A3FB0023 		umull	r2, r3, r3, r0
 949 000e 5B09     		lsrs	r3, r3, #5
 950 0010 6422     		movs	r2, #100
 951 0012 02FB1303 		mls	r3, r2, r3, r0
 952 0016 93B3     		cbz	r3, .L71
1180:Src/main.c    **** 
 953              		.loc 1 1180 0
 954 0018 0020     		movs	r0, #0
 955              	.LVL82:
 956              	.L64:
1184:Src/main.c    ****     {
1185:Src/main.c    ****         uint16_t speed_kmh = enc.average_speed;
1186:Src/main.c    ****         uint16_t speed_ms = enc.average_speed / 3.6 * 100;
1187:Src/main.c    **** 
1188:Src/main.c    ****         can.dataTx[0] = 0x06;
1189:Src/main.c    ****         can.dataTx[1] = speed_kmh / 256;
1190:Src/main.c    ****         can.dataTx[2] = speed_kmh % 256;
1191:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
1192:Src/main.c    ****         can.dataTx[4] = speed_ms / 256;
1193:Src/main.c    ****         can.dataTx[5] = speed_ms % 256;
1194:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
1195:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
ARM GAS  /tmp/ccP3MicS.s 			page 40


1196:Src/main.c    ****         can.id = 0xD0;
1197:Src/main.c    ****         can.size = 8;
1198:Src/main.c    ****         CAN_Send(&can);
1199:Src/main.c    **** 
1200:Src/main.c    ****         sent_flag = 1;
1201:Src/main.c    **** 
1202:Src/main.c    ****         // sprintf(txt, "%d\t%d\r\n", (int)(speed_Send), (int)(enc.Km));
1203:Src/main.c    ****         // HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
1204:Src/main.c    ****     }
1205:Src/main.c    **** 
1206:Src/main.c    ****     millis += 5;
 957              		.loc 1 1206 0
 958 001a 621D     		adds	r2, r4, #5
 959              	.LVL83:
1207:Src/main.c    **** 
1208:Src/main.c    ****     //-------------SEND KM & WHEEL ROTAIONS-------------//
1209:Src/main.c    ****     if (millis % 100 == 0)
 960              		.loc 1 1209 0
 961 001c 984B     		ldr	r3, .L76+8
 962 001e A3FB0213 		umull	r1, r3, r3, r2
 963 0022 5B09     		lsrs	r3, r3, #5
 964 0024 6421     		movs	r1, #100
 965 0026 01FB1323 		mls	r3, r1, r3, r2
 966 002a 002B     		cmp	r3, #0
 967 002c 54D0     		beq	.L72
 968              	.LVL84:
 969              	.L65:
1210:Src/main.c    ****     {
1211:Src/main.c    **** 
1212:Src/main.c    ****         uint16_t Km = (enc.Km);
1213:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
1214:Src/main.c    **** 
1215:Src/main.c    ****         can.dataTx[0] = 0x08;
1216:Src/main.c    ****         can.dataTx[1] = Km >> 8;
1217:Src/main.c    ****         can.dataTx[2] = Km;
1218:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
1219:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
1220:Src/main.c    ****         can.dataTx[5] = 0;
1221:Src/main.c    ****         can.dataTx[6] = 0;
1222:Src/main.c    ****         can.dataTx[7] = 0;
1223:Src/main.c    ****         can.id = 0xD0;
1224:Src/main.c    ****         can.size = 8;
1225:Src/main.c    ****         CAN_Send(&can);
1226:Src/main.c    **** 
1227:Src/main.c    ****         sent_flag = 2;
1228:Src/main.c    ****     }
1229:Src/main.c    **** 
1230:Src/main.c    ****     millis += 5;
 970              		.loc 1 1230 0
 971 002e 04F10A02 		add	r2, r4, #10
 972              	.LVL85:
1231:Src/main.c    **** 
1232:Src/main.c    ****     //--------------------SEND Accel--------------------//
1233:Src/main.c    ****     if (millis % 100 == 0)
 973              		.loc 1 1233 0
 974 0032 934B     		ldr	r3, .L76+8
 975 0034 A3FB0213 		umull	r1, r3, r3, r2
ARM GAS  /tmp/ccP3MicS.s 			page 41


 976 0038 5B09     		lsrs	r3, r3, #5
 977 003a 6421     		movs	r1, #100
 978 003c 01FB1323 		mls	r3, r1, r3, r2
 979 0040 002B     		cmp	r3, #0
 980 0042 67D0     		beq	.L73
 981              	.LVL86:
 982              	.L66:
1234:Src/main.c    ****     {
1235:Src/main.c    **** 
1236:Src/main.c    ****         //removing negative values
1237:Src/main.c    ****         uint16_t val_a_x = (accel.x + accel.scale) * 100;
1238:Src/main.c    ****         uint16_t val_a_y = (accel.y + accel.scale) * 100;
1239:Src/main.c    ****         uint16_t val_a_z = (accel.z + accel.scale) * 100;
1240:Src/main.c    **** 
1241:Src/main.c    ****         can.dataTx[0] = 0x00;
1242:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
1243:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
1244:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
1245:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
1246:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
1247:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
1248:Src/main.c    ****         can.dataTx[7] = (uint8_t)accel.scale;
1249:Src/main.c    ****         can.id = 0xC0;
1250:Src/main.c    ****         can.size = 8;
1251:Src/main.c    ****         CAN_Send(&can);
1252:Src/main.c    **** 
1253:Src/main.c    ****         sent_flag = 3;
1254:Src/main.c    ****     }
1255:Src/main.c    **** 
1256:Src/main.c    ****     millis += 5;
 983              		.loc 1 1256 0
 984 0044 04F10F02 		add	r2, r4, #15
 985              	.LVL87:
1257:Src/main.c    **** 
1258:Src/main.c    ****     //---------------------SEND Gyro---------------------//
1259:Src/main.c    ****     if (millis % 100 == 0)
 986              		.loc 1 1259 0
 987 0048 8D4B     		ldr	r3, .L76+8
 988 004a A3FB0213 		umull	r1, r3, r3, r2
 989 004e 5B09     		lsrs	r3, r3, #5
 990 0050 6421     		movs	r1, #100
 991 0052 01FB1323 		mls	r3, r1, r3, r2
 992 0056 002B     		cmp	r3, #0
 993 0058 00F0A980 		beq	.L74
 994              	.LVL88:
 995              	.L67:
1260:Src/main.c    ****     {
1261:Src/main.c    ****         uint16_t val_g_x = (gyro.x + gyro.scale) * 10;
1262:Src/main.c    ****         uint16_t val_g_y = (gyro.y + gyro.scale) * 10;
1263:Src/main.c    ****         uint16_t val_g_z = (gyro.z + gyro.scale) * 10;
1264:Src/main.c    **** 
1265:Src/main.c    ****         can.dataTx[0] = 0x01;
1266:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
1267:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
1268:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
1269:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
1270:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
ARM GAS  /tmp/ccP3MicS.s 			page 42


1271:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
1272:Src/main.c    ****         can.dataTx[7] = (uint8_t)(gyro.scale / 10);
1273:Src/main.c    ****         can.id = 0xC0;
1274:Src/main.c    ****         can.size = 8;
1275:Src/main.c    ****         CAN_Send(&can);
1276:Src/main.c    **** 
1277:Src/main.c    ****         // sprintf(txt, "%d\t%d\r\n", (int)(val_g_x), (int)(val_g_y));
1278:Src/main.c    ****         // HAL_UART_Transmit(&huart2, txt, strlen(txt), 10);
1279:Src/main.c    **** 
1280:Src/main.c    ****         sent_flag = 4;
1281:Src/main.c    ****     }
1282:Src/main.c    **** 
1283:Src/main.c    ****     millis += 5;
 996              		.loc 1 1283 0
 997 005c 1434     		adds	r4, r4, #20
 998              	.LVL89:
1284:Src/main.c    **** 
1285:Src/main.c    ****     //--------------------SEND Steer--------------------//
1286:Src/main.c    ****     if (millis % 100 == 0)
 999              		.loc 1 1286 0
 1000 005e 884B     		ldr	r3, .L76+8
 1001 0060 A3FB0423 		umull	r2, r3, r3, r4
 1002 0064 5B09     		lsrs	r3, r3, #5
 1003 0066 6422     		movs	r2, #100
 1004 0068 02FB1343 		mls	r3, r2, r3, r4
 1005 006c 23B9     		cbnz	r3, .L63
1287:Src/main.c    ****     {
1288:Src/main.c    ****         if (calibration_flag == 0)
 1006              		.loc 1 1288 0
 1007 006e 854B     		ldr	r3, .L76+12
 1008 0070 1B68     		ldr	r3, [r3]
 1009 0072 002B     		cmp	r3, #0
 1010 0074 00F0EA80 		beq	.L75
 1011              	.LVL90:
 1012              	.L63:
1289:Src/main.c    ****         {
1290:Src/main.c    ****             can.dataTx[0] = 2;
1291:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
1292:Src/main.c    ****             can.dataTx[2] = 0;
1293:Src/main.c    ****             can.dataTx[3] = 0;
1294:Src/main.c    ****             can.dataTx[4] = 0;
1295:Src/main.c    ****             can.dataTx[5] = 0;
1296:Src/main.c    ****             can.dataTx[6] = 0;
1297:Src/main.c    ****             can.dataTx[7] = 0;
1298:Src/main.c    ****             can.id = 0xC0;
1299:Src/main.c    ****             can.size = 8;
1300:Src/main.c    ****             CAN_Send(&can);
1301:Src/main.c    **** 
1302:Src/main.c    ****             sent_flag = 5;
1303:Src/main.c    ****         }
1304:Src/main.c    ****     }
1305:Src/main.c    **** 
1306:Src/main.c    ****     return sent_flag;
1307:Src/main.c    **** }
 1013              		.loc 1 1307 0
 1014 0078 03B0     		add	sp, sp, #12
 1015              	.LCFI13:
ARM GAS  /tmp/ccP3MicS.s 			page 43


 1016              		.cfi_remember_state
 1017              		.cfi_def_cfa_offset 36
 1018              		@ sp needed
 1019 007a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1020              	.LVL91:
 1021              	.L71:
 1022              	.LCFI14:
 1023              		.cfi_restore_state
 1024              	.LBB10:
1185:Src/main.c    ****         uint16_t speed_ms = enc.average_speed / 3.6 * 100;
 1025              		.loc 1 1185 0
 1026 007e 824D     		ldr	r5, .L76+16
 1027 0080 D5E9F089 		ldrd	r8, [r5, #960]
 1028 0084 4046     		mov	r0, r8
 1029              	.LVL92:
 1030 0086 4946     		mov	r1, r9
 1031 0088 FFF7FEFF 		bl	__aeabi_d2uiz
 1032              	.LVL93:
 1033 008c 86B2     		uxth	r6, r0
 1034              	.LVL94:
1186:Src/main.c    **** 
 1035              		.loc 1 1186 0
 1036 008e 7AA3     		adr	r3, .L76
 1037 0090 D3E90023 		ldrd	r2, [r3]
 1038 0094 4046     		mov	r0, r8
 1039 0096 4946     		mov	r1, r9
 1040 0098 FFF7FEFF 		bl	__aeabi_ddiv
 1041              	.LVL95:
 1042 009c 0022     		movs	r2, #0
 1043 009e 7B4B     		ldr	r3, .L76+20
 1044 00a0 FFF7FEFF 		bl	__aeabi_dmul
 1045              	.LVL96:
 1046 00a4 FFF7FEFF 		bl	__aeabi_d2uiz
 1047              	.LVL97:
 1048 00a8 83B2     		uxth	r3, r0
 1049              	.LVL98:
1188:Src/main.c    ****         can.dataTx[1] = speed_kmh / 256;
 1050              		.loc 1 1188 0
 1051 00aa 7948     		ldr	r0, .L76+24
 1052 00ac 0622     		movs	r2, #6
 1053 00ae 0272     		strb	r2, [r0, #8]
1189:Src/main.c    ****         can.dataTx[2] = speed_kmh % 256;
 1054              		.loc 1 1189 0
 1055 00b0 320A     		lsrs	r2, r6, #8
 1056 00b2 4272     		strb	r2, [r0, #9]
1190:Src/main.c    ****         can.dataTx[3] = enc.speed_sign;
 1057              		.loc 1 1190 0
 1058 00b4 8672     		strb	r6, [r0, #10]
1191:Src/main.c    ****         can.dataTx[4] = speed_ms / 256;
 1059              		.loc 1 1191 0
 1060 00b6 AA6D     		ldr	r2, [r5, #88]
 1061 00b8 C272     		strb	r2, [r0, #11]
1192:Src/main.c    ****         can.dataTx[5] = speed_ms % 256;
 1062              		.loc 1 1192 0
 1063 00ba 1A0A     		lsrs	r2, r3, #8
 1064 00bc 0273     		strb	r2, [r0, #12]
1193:Src/main.c    ****         can.dataTx[6] = enc.error_flag;
ARM GAS  /tmp/ccP3MicS.s 			page 44


 1065              		.loc 1 1193 0
 1066 00be 4373     		strb	r3, [r0, #13]
1194:Src/main.c    ****         can.dataTx[7] = enc.steer_enc_prescaler;
 1067              		.loc 1 1194 0
 1068 00c0 6B68     		ldr	r3, [r5, #4]
 1069              	.LVL99:
 1070 00c2 8373     		strb	r3, [r0, #14]
1195:Src/main.c    ****         can.id = 0xD0;
 1071              		.loc 1 1195 0
 1072 00c4 AB6C     		ldr	r3, [r5, #72]
 1073 00c6 C373     		strb	r3, [r0, #15]
1196:Src/main.c    ****         can.size = 8;
 1074              		.loc 1 1196 0
 1075 00c8 D023     		movs	r3, #208
 1076 00ca 0360     		str	r3, [r0]
1197:Src/main.c    ****         CAN_Send(&can);
 1077              		.loc 1 1197 0
 1078 00cc 0823     		movs	r3, #8
 1079 00ce 4360     		str	r3, [r0, #4]
1198:Src/main.c    **** 
 1080              		.loc 1 1198 0
 1081 00d0 FFF7FEFF 		bl	CAN_Send
 1082              	.LVL100:
1200:Src/main.c    **** 
 1083              		.loc 1 1200 0
 1084 00d4 0120     		movs	r0, #1
 1085 00d6 A0E7     		b	.L64
 1086              	.LVL101:
 1087              	.L72:
 1088              	.LBE10:
 1089              	.LBB11:
1212:Src/main.c    ****         uint16_t rotations = enc.wheel_rotation;
 1090              		.loc 1 1212 0
 1091 00d8 6B4A     		ldr	r2, .L76+16
 1092              	.LVL102:
 1093 00da D2ED157A 		vldr.32	s15, [r2, #84]
 1094 00de FCEEE77A 		vcvt.u32.f32	s15, s15
 1095 00e2 CDED017A 		vstr.32	s15, [sp, #4]	@ int
 1096 00e6 BDF80430 		ldrh	r3, [sp, #4]
 1097              	.LVL103:
1213:Src/main.c    **** 
 1098              		.loc 1 1213 0
 1099 00ea 116D     		ldr	r1, [r2, #80]
 1100              	.LVL104:
1215:Src/main.c    ****         can.dataTx[1] = Km >> 8;
 1101              		.loc 1 1215 0
 1102 00ec 6848     		ldr	r0, .L76+24
 1103              	.LVL105:
 1104 00ee 0822     		movs	r2, #8
 1105 00f0 0272     		strb	r2, [r0, #8]
1216:Src/main.c    ****         can.dataTx[2] = Km;
 1106              		.loc 1 1216 0
 1107 00f2 23FA02F5 		lsr	r5, r3, r2
 1108 00f6 4572     		strb	r5, [r0, #9]
1217:Src/main.c    ****         can.dataTx[3] = (uint8_t)rotations >> 8;
 1109              		.loc 1 1217 0
 1110 00f8 8372     		strb	r3, [r0, #10]
ARM GAS  /tmp/ccP3MicS.s 			page 45


1218:Src/main.c    ****         can.dataTx[4] = (uint8_t)rotations;
 1111              		.loc 1 1218 0
 1112 00fa 0023     		movs	r3, #0
 1113              	.LVL106:
 1114 00fc C372     		strb	r3, [r0, #11]
1219:Src/main.c    ****         can.dataTx[5] = 0;
 1115              		.loc 1 1219 0
 1116 00fe 0173     		strb	r1, [r0, #12]
1220:Src/main.c    ****         can.dataTx[6] = 0;
 1117              		.loc 1 1220 0
 1118 0100 4373     		strb	r3, [r0, #13]
1221:Src/main.c    ****         can.dataTx[7] = 0;
 1119              		.loc 1 1221 0
 1120 0102 8373     		strb	r3, [r0, #14]
1222:Src/main.c    ****         can.id = 0xD0;
 1121              		.loc 1 1222 0
 1122 0104 C373     		strb	r3, [r0, #15]
1223:Src/main.c    ****         can.size = 8;
 1123              		.loc 1 1223 0
 1124 0106 D023     		movs	r3, #208
 1125 0108 0360     		str	r3, [r0]
1224:Src/main.c    ****         CAN_Send(&can);
 1126              		.loc 1 1224 0
 1127 010a 4260     		str	r2, [r0, #4]
1225:Src/main.c    **** 
 1128              		.loc 1 1225 0
 1129 010c FFF7FEFF 		bl	CAN_Send
 1130              	.LVL107:
1227:Src/main.c    ****     }
 1131              		.loc 1 1227 0
 1132 0110 0220     		movs	r0, #2
 1133 0112 8CE7     		b	.L65
 1134              	.LVL108:
 1135              	.L73:
 1136              	.LBE11:
 1137              	.LBB12:
1237:Src/main.c    ****         uint16_t val_a_y = (accel.y + accel.scale) * 100;
 1138              		.loc 1 1237 0
 1139 0114 5F4D     		ldr	r5, .L76+28
 1140 0116 D5E900AB 		ldrd	r10, [r5]
 1141 011a D5F81882 		ldr	r8, [r5, #536]
 1142 011e 4046     		mov	r0, r8
 1143              	.LVL109:
 1144 0120 FFF7FEFF 		bl	__aeabi_i2d
 1145              	.LVL110:
 1146 0124 0646     		mov	r6, r0
 1147 0126 0F46     		mov	r7, r1
 1148 0128 0246     		mov	r2, r0
 1149 012a 0B46     		mov	r3, r1
 1150 012c 5046     		mov	r0, r10
 1151 012e 5946     		mov	r1, fp
 1152 0130 FFF7FEFF 		bl	__aeabi_dadd
 1153              	.LVL111:
 1154 0134 0022     		movs	r2, #0
 1155 0136 554B     		ldr	r3, .L76+20
 1156 0138 FFF7FEFF 		bl	__aeabi_dmul
 1157              	.LVL112:
ARM GAS  /tmp/ccP3MicS.s 			page 46


 1158 013c FFF7FEFF 		bl	__aeabi_d2uiz
 1159              	.LVL113:
 1160 0140 1FFA80FA 		uxth	r10, r0
 1161              	.LVL114:
1238:Src/main.c    ****         uint16_t val_a_z = (accel.z + accel.scale) * 100;
 1162              		.loc 1 1238 0
 1163 0144 D5E90223 		ldrd	r2, [r5, #8]
 1164 0148 3046     		mov	r0, r6
 1165 014a 3946     		mov	r1, r7
 1166 014c FFF7FEFF 		bl	__aeabi_dadd
 1167              	.LVL115:
 1168 0150 0022     		movs	r2, #0
 1169 0152 4E4B     		ldr	r3, .L76+20
 1170 0154 FFF7FEFF 		bl	__aeabi_dmul
 1171              	.LVL116:
 1172 0158 FFF7FEFF 		bl	__aeabi_d2uiz
 1173              	.LVL117:
 1174 015c 1FFA80F9 		uxth	r9, r0
 1175              	.LVL118:
1239:Src/main.c    **** 
 1176              		.loc 1 1239 0
 1177 0160 D5E90423 		ldrd	r2, [r5, #16]
 1178 0164 3046     		mov	r0, r6
 1179 0166 3946     		mov	r1, r7
 1180 0168 FFF7FEFF 		bl	__aeabi_dadd
 1181              	.LVL119:
 1182 016c 0022     		movs	r2, #0
 1183 016e 474B     		ldr	r3, .L76+20
 1184 0170 FFF7FEFF 		bl	__aeabi_dmul
 1185              	.LVL120:
 1186 0174 FFF7FEFF 		bl	__aeabi_d2uiz
 1187              	.LVL121:
 1188 0178 83B2     		uxth	r3, r0
 1189              	.LVL122:
1241:Src/main.c    ****         can.dataTx[1] = val_a_x / 256;
 1190              		.loc 1 1241 0
 1191 017a 4548     		ldr	r0, .L76+24
 1192 017c 0022     		movs	r2, #0
 1193 017e 0272     		strb	r2, [r0, #8]
1242:Src/main.c    ****         can.dataTx[2] = val_a_x % 256;
 1194              		.loc 1 1242 0
 1195 0180 4FEA1A22 		lsr	r2, r10, #8
 1196 0184 4272     		strb	r2, [r0, #9]
1243:Src/main.c    ****         can.dataTx[3] = val_a_y / 256;
 1197              		.loc 1 1243 0
 1198 0186 80F80AA0 		strb	r10, [r0, #10]
1244:Src/main.c    ****         can.dataTx[4] = val_a_y % 256;
 1199              		.loc 1 1244 0
 1200 018a 4FEA1922 		lsr	r2, r9, #8
 1201 018e C272     		strb	r2, [r0, #11]
1245:Src/main.c    ****         can.dataTx[5] = val_a_z / 256;
 1202              		.loc 1 1245 0
 1203 0190 80F80C90 		strb	r9, [r0, #12]
1246:Src/main.c    ****         can.dataTx[6] = val_a_z % 256;
 1204              		.loc 1 1246 0
 1205 0194 1A0A     		lsrs	r2, r3, #8
 1206 0196 4273     		strb	r2, [r0, #13]
ARM GAS  /tmp/ccP3MicS.s 			page 47


1247:Src/main.c    ****         can.dataTx[7] = (uint8_t)accel.scale;
 1207              		.loc 1 1247 0
 1208 0198 8373     		strb	r3, [r0, #14]
1248:Src/main.c    ****         can.id = 0xC0;
 1209              		.loc 1 1248 0
 1210 019a 80F80F80 		strb	r8, [r0, #15]
1249:Src/main.c    ****         can.size = 8;
 1211              		.loc 1 1249 0
 1212 019e C023     		movs	r3, #192
 1213              	.LVL123:
 1214 01a0 0360     		str	r3, [r0]
1250:Src/main.c    ****         CAN_Send(&can);
 1215              		.loc 1 1250 0
 1216 01a2 0823     		movs	r3, #8
 1217 01a4 4360     		str	r3, [r0, #4]
1251:Src/main.c    **** 
 1218              		.loc 1 1251 0
 1219 01a6 FFF7FEFF 		bl	CAN_Send
 1220              	.LVL124:
1253:Src/main.c    ****     }
 1221              		.loc 1 1253 0
 1222 01aa 0320     		movs	r0, #3
 1223 01ac 4AE7     		b	.L66
 1224              	.LVL125:
 1225              	.L74:
 1226              	.LBE12:
 1227              	.LBB13:
1261:Src/main.c    ****         uint16_t val_g_y = (gyro.y + gyro.scale) * 10;
 1228              		.loc 1 1261 0
 1229 01ae 3A4E     		ldr	r6, .L76+32
 1230 01b0 D6E900AB 		ldrd	r10, [r6]
 1231 01b4 D6F81852 		ldr	r5, [r6, #536]
 1232 01b8 2846     		mov	r0, r5
 1233              	.LVL126:
 1234 01ba FFF7FEFF 		bl	__aeabi_i2d
 1235              	.LVL127:
 1236 01be 8046     		mov	r8, r0
 1237 01c0 8946     		mov	r9, r1
 1238 01c2 0246     		mov	r2, r0
 1239 01c4 0B46     		mov	r3, r1
 1240 01c6 5046     		mov	r0, r10
 1241 01c8 5946     		mov	r1, fp
 1242 01ca FFF7FEFF 		bl	__aeabi_dadd
 1243              	.LVL128:
 1244 01ce 0022     		movs	r2, #0
 1245 01d0 324B     		ldr	r3, .L76+36
 1246 01d2 FFF7FEFF 		bl	__aeabi_dmul
 1247              	.LVL129:
 1248 01d6 FFF7FEFF 		bl	__aeabi_d2uiz
 1249              	.LVL130:
 1250 01da 1FFA80FA 		uxth	r10, r0
 1251              	.LVL131:
1262:Src/main.c    ****         uint16_t val_g_z = (gyro.z + gyro.scale) * 10;
 1252              		.loc 1 1262 0
 1253 01de D6E90223 		ldrd	r2, [r6, #8]
 1254 01e2 4046     		mov	r0, r8
 1255 01e4 4946     		mov	r1, r9
ARM GAS  /tmp/ccP3MicS.s 			page 48


 1256 01e6 FFF7FEFF 		bl	__aeabi_dadd
 1257              	.LVL132:
 1258 01ea 0022     		movs	r2, #0
 1259 01ec 2B4B     		ldr	r3, .L76+36
 1260 01ee FFF7FEFF 		bl	__aeabi_dmul
 1261              	.LVL133:
 1262 01f2 FFF7FEFF 		bl	__aeabi_d2uiz
 1263              	.LVL134:
 1264 01f6 87B2     		uxth	r7, r0
 1265              	.LVL135:
1263:Src/main.c    **** 
 1266              		.loc 1 1263 0
 1267 01f8 D6E90423 		ldrd	r2, [r6, #16]
 1268 01fc 4046     		mov	r0, r8
 1269 01fe 4946     		mov	r1, r9
 1270 0200 FFF7FEFF 		bl	__aeabi_dadd
 1271              	.LVL136:
 1272 0204 0022     		movs	r2, #0
 1273 0206 254B     		ldr	r3, .L76+36
 1274 0208 FFF7FEFF 		bl	__aeabi_dmul
 1275              	.LVL137:
 1276 020c FFF7FEFF 		bl	__aeabi_d2uiz
 1277              	.LVL138:
 1278 0210 83B2     		uxth	r3, r0
 1279              	.LVL139:
1265:Src/main.c    ****         can.dataTx[1] = val_g_x / 256;
 1280              		.loc 1 1265 0
 1281 0212 1F48     		ldr	r0, .L76+24
 1282 0214 0122     		movs	r2, #1
 1283 0216 0272     		strb	r2, [r0, #8]
1266:Src/main.c    ****         can.dataTx[2] = val_g_x % 256;
 1284              		.loc 1 1266 0
 1285 0218 4FEA1A22 		lsr	r2, r10, #8
 1286 021c 4272     		strb	r2, [r0, #9]
1267:Src/main.c    ****         can.dataTx[3] = val_g_y / 256;
 1287              		.loc 1 1267 0
 1288 021e 80F80AA0 		strb	r10, [r0, #10]
1268:Src/main.c    ****         can.dataTx[4] = val_g_y % 256;
 1289              		.loc 1 1268 0
 1290 0222 3A0A     		lsrs	r2, r7, #8
 1291 0224 C272     		strb	r2, [r0, #11]
1269:Src/main.c    ****         can.dataTx[5] = val_g_z / 256;
 1292              		.loc 1 1269 0
 1293 0226 0773     		strb	r7, [r0, #12]
1270:Src/main.c    ****         can.dataTx[6] = val_g_z % 256;
 1294              		.loc 1 1270 0
 1295 0228 1A0A     		lsrs	r2, r3, #8
 1296 022a 4273     		strb	r2, [r0, #13]
1271:Src/main.c    ****         can.dataTx[7] = (uint8_t)(gyro.scale / 10);
 1297              		.loc 1 1271 0
 1298 022c 8373     		strb	r3, [r0, #14]
1272:Src/main.c    ****         can.id = 0xC0;
 1299              		.loc 1 1272 0
 1300 022e 1C4B     		ldr	r3, .L76+40
 1301              	.LVL140:
 1302 0230 83FB0523 		smull	r2, r3, r3, r5
 1303 0234 ED17     		asrs	r5, r5, #31
ARM GAS  /tmp/ccP3MicS.s 			page 49


 1304 0236 C5EBA305 		rsb	r5, r5, r3, asr #2
 1305 023a C573     		strb	r5, [r0, #15]
1273:Src/main.c    ****         can.size = 8;
 1306              		.loc 1 1273 0
 1307 023c C023     		movs	r3, #192
 1308 023e 0360     		str	r3, [r0]
1274:Src/main.c    ****         CAN_Send(&can);
 1309              		.loc 1 1274 0
 1310 0240 0823     		movs	r3, #8
 1311 0242 4360     		str	r3, [r0, #4]
1275:Src/main.c    **** 
 1312              		.loc 1 1275 0
 1313 0244 FFF7FEFF 		bl	CAN_Send
 1314              	.LVL141:
1280:Src/main.c    ****     }
 1315              		.loc 1 1280 0
 1316 0248 0420     		movs	r0, #4
 1317 024a 07E7     		b	.L67
 1318              	.LVL142:
 1319              	.L75:
 1320              	.LBE13:
1290:Src/main.c    ****             can.dataTx[1] = pot_2.val_100;
 1321              		.loc 1 1290 0
 1322 024c 1048     		ldr	r0, .L76+24
 1323              	.LVL143:
 1324 024e 0223     		movs	r3, #2
 1325 0250 0372     		strb	r3, [r0, #8]
1291:Src/main.c    ****             can.dataTx[2] = 0;
 1326              		.loc 1 1291 0
 1327 0252 144B     		ldr	r3, .L76+44
 1328 0254 1B68     		ldr	r3, [r3]
 1329 0256 4372     		strb	r3, [r0, #9]
1292:Src/main.c    ****             can.dataTx[3] = 0;
 1330              		.loc 1 1292 0
 1331 0258 0023     		movs	r3, #0
 1332 025a 8372     		strb	r3, [r0, #10]
1293:Src/main.c    ****             can.dataTx[4] = 0;
 1333              		.loc 1 1293 0
 1334 025c C372     		strb	r3, [r0, #11]
1294:Src/main.c    ****             can.dataTx[5] = 0;
 1335              		.loc 1 1294 0
 1336 025e 0373     		strb	r3, [r0, #12]
1295:Src/main.c    ****             can.dataTx[6] = 0;
 1337              		.loc 1 1295 0
 1338 0260 4373     		strb	r3, [r0, #13]
1296:Src/main.c    ****             can.dataTx[7] = 0;
 1339              		.loc 1 1296 0
 1340 0262 8373     		strb	r3, [r0, #14]
1297:Src/main.c    ****             can.id = 0xC0;
 1341              		.loc 1 1297 0
 1342 0264 C373     		strb	r3, [r0, #15]
1298:Src/main.c    ****             can.size = 8;
 1343              		.loc 1 1298 0
 1344 0266 C023     		movs	r3, #192
 1345 0268 0360     		str	r3, [r0]
1299:Src/main.c    ****             CAN_Send(&can);
 1346              		.loc 1 1299 0
ARM GAS  /tmp/ccP3MicS.s 			page 50


 1347 026a 0823     		movs	r3, #8
 1348 026c 4360     		str	r3, [r0, #4]
1300:Src/main.c    **** 
 1349              		.loc 1 1300 0
 1350 026e FFF7FEFF 		bl	CAN_Send
 1351              	.LVL144:
1302:Src/main.c    ****         }
 1352              		.loc 1 1302 0
 1353 0272 0520     		movs	r0, #5
1306:Src/main.c    **** }
 1354              		.loc 1 1306 0
 1355 0274 00E7     		b	.L63
 1356              	.L77:
 1357 0276 00BF     		.align	3
 1358              	.L76:
 1359 0278 CDCCCCCC 		.word	3435973837
 1360 027c CCCC0C40 		.word	1074580684
 1361 0280 1F85EB51 		.word	1374389535
 1362 0284 00000000 		.word	.LANCHOR1
 1363 0288 00000000 		.word	enc
 1364 028c 00005940 		.word	1079574528
 1365 0290 00000000 		.word	can
 1366 0294 00000000 		.word	accel
 1367 0298 00000000 		.word	gyro
 1368 029c 00002440 		.word	1076101120
 1369 02a0 67666666 		.word	1717986919
 1370 02a4 00000000 		.word	pot_2
 1371              		.cfi_endproc
 1372              	.LFE154:
 1374              		.section	.text.Error_Handler,"ax",%progbits
 1375              		.align	1
 1376              		.global	Error_Handler
 1377              		.syntax unified
 1378              		.thumb
 1379              		.thumb_func
 1380              		.fpu fpv4-sp-d16
 1382              	Error_Handler:
 1383              	.LFB155:
1308:Src/main.c    **** 
1309:Src/main.c    **** /* USER CODE END 4 */
1310:Src/main.c    **** 
1311:Src/main.c    **** /**
1312:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
1313:Src/main.c    ****   * @retval None
1314:Src/main.c    ****   */
1315:Src/main.c    **** void Error_Handler(void)
1316:Src/main.c    **** {
 1384              		.loc 1 1316 0
 1385              		.cfi_startproc
 1386              		@ Volatile: function does not return.
 1387              		@ args = 0, pretend = 0, frame = 0
 1388              		@ frame_needed = 0, uses_anonymous_args = 0
 1389 0000 08B5     		push	{r3, lr}
 1390              	.LCFI15:
 1391              		.cfi_def_cfa_offset 8
 1392              		.cfi_offset 3, -8
 1393              		.cfi_offset 14, -4
ARM GAS  /tmp/ccP3MicS.s 			page 51


 1394              	.L79:
1317:Src/main.c    ****     /* USER CODE BEGIN Error_Handler_Debug */
1318:Src/main.c    ****     /* User can add his own implementation to report the HAL error return state */
1319:Src/main.c    ****     while (1)
1320:Src/main.c    ****     {
1321:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 1395              		.loc 1 1321 0 discriminator 1
 1396 0002 074C     		ldr	r4, .L81
 1397 0004 0A23     		movs	r3, #10
 1398 0006 0F22     		movs	r2, #15
 1399 0008 0649     		ldr	r1, .L81+4
 1400 000a 2046     		mov	r0, r4
 1401 000c FFF7FEFF 		bl	HAL_UART_Transmit
 1402              	.LVL145:
1322:Src/main.c    ****         //HAL_UART_Transmit(&huart2, (uint8_t *)file, strlen(file), 10);
1323:Src/main.c    ****         HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 1403              		.loc 1 1323 0 discriminator 1
 1404 0010 0A23     		movs	r3, #10
 1405 0012 0222     		movs	r2, #2
 1406 0014 0449     		ldr	r1, .L81+8
 1407 0016 2046     		mov	r0, r4
 1408 0018 FFF7FEFF 		bl	HAL_UART_Transmit
 1409              	.LVL146:
 1410 001c F1E7     		b	.L79
 1411              	.L82:
 1412 001e 00BF     		.align	2
 1413              	.L81:
 1414 0020 00000000 		.word	huart2
 1415 0024 00000000 		.word	.LC0
 1416 0028 10000000 		.word	.LC1
 1417              		.cfi_endproc
 1418              	.LFE155:
 1420              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1421              		.align	1
 1422              		.syntax unified
 1423              		.thumb
 1424              		.thumb_func
 1425              		.fpu fpv4-sp-d16
 1427              	MX_USART2_UART_Init:
 1428              	.LFB147:
 919:Src/main.c    **** 
 1429              		.loc 1 919 0
 1430              		.cfi_startproc
 1431              		@ args = 0, pretend = 0, frame = 0
 1432              		@ frame_needed = 0, uses_anonymous_args = 0
 1433 0000 08B5     		push	{r3, lr}
 1434              	.LCFI16:
 1435              		.cfi_def_cfa_offset 8
 1436              		.cfi_offset 3, -8
 1437              		.cfi_offset 14, -4
 928:Src/main.c    ****     huart2.Init.BaudRate = 2250000;
 1438              		.loc 1 928 0
 1439 0002 0948     		ldr	r0, .L87
 1440 0004 094B     		ldr	r3, .L87+4
 1441 0006 0360     		str	r3, [r0]
 929:Src/main.c    ****     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1442              		.loc 1 929 0
ARM GAS  /tmp/ccP3MicS.s 			page 52


 1443 0008 094B     		ldr	r3, .L87+8
 1444 000a 4360     		str	r3, [r0, #4]
 930:Src/main.c    ****     huart2.Init.StopBits = UART_STOPBITS_1;
 1445              		.loc 1 930 0
 1446 000c 0023     		movs	r3, #0
 1447 000e 8360     		str	r3, [r0, #8]
 931:Src/main.c    ****     huart2.Init.Parity = UART_PARITY_NONE;
 1448              		.loc 1 931 0
 1449 0010 C360     		str	r3, [r0, #12]
 932:Src/main.c    ****     huart2.Init.Mode = UART_MODE_TX_RX;
 1450              		.loc 1 932 0
 1451 0012 0361     		str	r3, [r0, #16]
 933:Src/main.c    ****     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1452              		.loc 1 933 0
 1453 0014 0C22     		movs	r2, #12
 1454 0016 4261     		str	r2, [r0, #20]
 934:Src/main.c    ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1455              		.loc 1 934 0
 1456 0018 8361     		str	r3, [r0, #24]
 935:Src/main.c    ****     if (HAL_UART_Init(&huart2) != HAL_OK)
 1457              		.loc 1 935 0
 1458 001a C361     		str	r3, [r0, #28]
 936:Src/main.c    ****     {
 1459              		.loc 1 936 0
 1460 001c FFF7FEFF 		bl	HAL_UART_Init
 1461              	.LVL147:
 1462 0020 00B9     		cbnz	r0, .L86
 1463 0022 08BD     		pop	{r3, pc}
 1464              	.L86:
 938:Src/main.c    ****     }
 1465              		.loc 1 938 0
 1466 0024 FFF7FEFF 		bl	Error_Handler
 1467              	.LVL148:
 1468              	.L88:
 1469              		.align	2
 1470              	.L87:
 1471 0028 00000000 		.word	huart2
 1472 002c 00440040 		.word	1073759232
 1473 0030 10552200 		.word	2250000
 1474              		.cfi_endproc
 1475              	.LFE147:
 1477              		.section	.text.MX_CAN1_Init,"ax",%progbits
 1478              		.align	1
 1479              		.syntax unified
 1480              		.thumb
 1481              		.thumb_func
 1482              		.fpu fpv4-sp-d16
 1484              	MX_CAN1_Init:
 1485              	.LFB136:
 497:Src/main.c    **** 
 1486              		.loc 1 497 0
 1487              		.cfi_startproc
 1488              		@ args = 0, pretend = 0, frame = 0
 1489              		@ frame_needed = 0, uses_anonymous_args = 0
 1490 0000 08B5     		push	{r3, lr}
 1491              	.LCFI17:
 1492              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccP3MicS.s 			page 53


 1493              		.cfi_offset 3, -8
 1494              		.cfi_offset 14, -4
 506:Src/main.c    ****     hcan1.Init.Prescaler = 2;
 1495              		.loc 1 506 0
 1496 0002 0D48     		ldr	r0, .L93
 1497 0004 0D4B     		ldr	r3, .L93+4
 1498 0006 0360     		str	r3, [r0]
 507:Src/main.c    ****     hcan1.Init.Mode = CAN_MODE_NORMAL;
 1499              		.loc 1 507 0
 1500 0008 0223     		movs	r3, #2
 1501 000a 4360     		str	r3, [r0, #4]
 508:Src/main.c    ****     hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 1502              		.loc 1 508 0
 1503 000c 0023     		movs	r3, #0
 1504 000e 8360     		str	r3, [r0, #8]
 509:Src/main.c    ****     hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 1505              		.loc 1 509 0
 1506 0010 C360     		str	r3, [r0, #12]
 510:Src/main.c    ****     hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 1507              		.loc 1 510 0
 1508 0012 4FF43022 		mov	r2, #720896
 1509 0016 0261     		str	r2, [r0, #16]
 511:Src/main.c    ****     hcan1.Init.TimeTriggeredMode = DISABLE;
 1510              		.loc 1 511 0
 1511 0018 4FF48002 		mov	r2, #4194304
 1512 001c 4261     		str	r2, [r0, #20]
 512:Src/main.c    ****     hcan1.Init.AutoBusOff = DISABLE;
 1513              		.loc 1 512 0
 1514 001e 0376     		strb	r3, [r0, #24]
 513:Src/main.c    ****     hcan1.Init.AutoWakeUp = ENABLE;
 1515              		.loc 1 513 0
 1516 0020 4376     		strb	r3, [r0, #25]
 514:Src/main.c    ****     hcan1.Init.AutoRetransmission = DISABLE;
 1517              		.loc 1 514 0
 1518 0022 0122     		movs	r2, #1
 1519 0024 8276     		strb	r2, [r0, #26]
 515:Src/main.c    ****     hcan1.Init.ReceiveFifoLocked = DISABLE;
 1520              		.loc 1 515 0
 1521 0026 C376     		strb	r3, [r0, #27]
 516:Src/main.c    ****     hcan1.Init.TransmitFifoPriority = DISABLE;
 1522              		.loc 1 516 0
 1523 0028 0377     		strb	r3, [r0, #28]
 517:Src/main.c    ****     if (HAL_CAN_Init(&hcan1) != HAL_OK)
 1524              		.loc 1 517 0
 1525 002a 4377     		strb	r3, [r0, #29]
 518:Src/main.c    ****     {
 1526              		.loc 1 518 0
 1527 002c FFF7FEFF 		bl	HAL_CAN_Init
 1528              	.LVL149:
 1529 0030 00B9     		cbnz	r0, .L92
 1530 0032 08BD     		pop	{r3, pc}
 1531              	.L92:
 520:Src/main.c    ****     }
 1532              		.loc 1 520 0
 1533 0034 FFF7FEFF 		bl	Error_Handler
 1534              	.LVL150:
 1535              	.L94:
ARM GAS  /tmp/ccP3MicS.s 			page 54


 1536              		.align	2
 1537              	.L93:
 1538 0038 00000000 		.word	hcan1
 1539 003c 00640040 		.word	1073767424
 1540              		.cfi_endproc
 1541              	.LFE136:
 1543              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1544              		.align	1
 1545              		.syntax unified
 1546              		.thumb
 1547              		.thumb_func
 1548              		.fpu fpv4-sp-d16
 1550              	MX_SPI1_Init:
 1551              	.LFB137:
 533:Src/main.c    **** 
 1552              		.loc 1 533 0
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 0
 1555              		@ frame_needed = 0, uses_anonymous_args = 0
 1556 0000 08B5     		push	{r3, lr}
 1557              	.LCFI18:
 1558              		.cfi_def_cfa_offset 8
 1559              		.cfi_offset 3, -8
 1560              		.cfi_offset 14, -4
 543:Src/main.c    ****     hspi1.Init.Mode = SPI_MODE_MASTER;
 1561              		.loc 1 543 0
 1562 0002 0D48     		ldr	r0, .L99
 1563 0004 0D4B     		ldr	r3, .L99+4
 1564 0006 0360     		str	r3, [r0]
 544:Src/main.c    ****     hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1565              		.loc 1 544 0
 1566 0008 4FF48273 		mov	r3, #260
 1567 000c 4360     		str	r3, [r0, #4]
 545:Src/main.c    ****     hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1568              		.loc 1 545 0
 1569 000e 0023     		movs	r3, #0
 1570 0010 8360     		str	r3, [r0, #8]
 546:Src/main.c    ****     hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1571              		.loc 1 546 0
 1572 0012 C360     		str	r3, [r0, #12]
 547:Src/main.c    ****     hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1573              		.loc 1 547 0
 1574 0014 0361     		str	r3, [r0, #16]
 548:Src/main.c    ****     hspi1.Init.NSS = SPI_NSS_SOFT;
 1575              		.loc 1 548 0
 1576 0016 4361     		str	r3, [r0, #20]
 549:Src/main.c    ****     hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1577              		.loc 1 549 0
 1578 0018 4FF40072 		mov	r2, #512
 1579 001c 8261     		str	r2, [r0, #24]
 550:Src/main.c    ****     hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1580              		.loc 1 550 0
 1581 001e C361     		str	r3, [r0, #28]
 551:Src/main.c    ****     hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1582              		.loc 1 551 0
 1583 0020 0362     		str	r3, [r0, #32]
 552:Src/main.c    ****     hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
ARM GAS  /tmp/ccP3MicS.s 			page 55


 1584              		.loc 1 552 0
 1585 0022 4362     		str	r3, [r0, #36]
 553:Src/main.c    ****     hspi1.Init.CRCPolynomial = 10;
 1586              		.loc 1 553 0
 1587 0024 8362     		str	r3, [r0, #40]
 554:Src/main.c    ****     if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1588              		.loc 1 554 0
 1589 0026 0A23     		movs	r3, #10
 1590 0028 C362     		str	r3, [r0, #44]
 555:Src/main.c    ****     {
 1591              		.loc 1 555 0
 1592 002a FFF7FEFF 		bl	HAL_SPI_Init
 1593              	.LVL151:
 1594 002e 00B9     		cbnz	r0, .L98
 1595 0030 08BD     		pop	{r3, pc}
 1596              	.L98:
 557:Src/main.c    ****     }
 1597              		.loc 1 557 0
 1598 0032 FFF7FEFF 		bl	Error_Handler
 1599              	.LVL152:
 1600              	.L100:
 1601 0036 00BF     		.align	2
 1602              	.L99:
 1603 0038 00000000 		.word	hspi1
 1604 003c 00300140 		.word	1073819648
 1605              		.cfi_endproc
 1606              	.LFE137:
 1608              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1609              		.align	1
 1610              		.syntax unified
 1611              		.thumb
 1612              		.thumb_func
 1613              		.fpu fpv4-sp-d16
 1615              	MX_ADC1_Init:
 1616              	.LFB135:
 448:Src/main.c    **** 
 1617              		.loc 1 448 0
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 16
 1620              		@ frame_needed = 0, uses_anonymous_args = 0
 1621 0000 00B5     		push	{lr}
 1622              	.LCFI19:
 1623              		.cfi_def_cfa_offset 4
 1624              		.cfi_offset 14, -4
 1625 0002 85B0     		sub	sp, sp, #20
 1626              	.LCFI20:
 1627              		.cfi_def_cfa_offset 24
 454:Src/main.c    **** 
 1628              		.loc 1 454 0
 1629 0004 0023     		movs	r3, #0
 1630 0006 0093     		str	r3, [sp]
 1631 0008 0193     		str	r3, [sp, #4]
 1632 000a 0293     		str	r3, [sp, #8]
 1633 000c 0393     		str	r3, [sp, #12]
 461:Src/main.c    ****     hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 1634              		.loc 1 461 0
 1635 000e 1348     		ldr	r0, .L107
ARM GAS  /tmp/ccP3MicS.s 			page 56


 1636 0010 134A     		ldr	r2, .L107+4
 1637 0012 0260     		str	r2, [r0]
 462:Src/main.c    ****     hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 1638              		.loc 1 462 0
 1639 0014 4360     		str	r3, [r0, #4]
 463:Src/main.c    ****     hadc1.Init.ScanConvMode = ENABLE;
 1640              		.loc 1 463 0
 1641 0016 8360     		str	r3, [r0, #8]
 464:Src/main.c    ****     hadc1.Init.ContinuousConvMode = ENABLE;
 1642              		.loc 1 464 0
 1643 0018 0122     		movs	r2, #1
 1644 001a 0261     		str	r2, [r0, #16]
 465:Src/main.c    ****     hadc1.Init.DiscontinuousConvMode = DISABLE;
 1645              		.loc 1 465 0
 1646 001c 0276     		strb	r2, [r0, #24]
 466:Src/main.c    ****     hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 1647              		.loc 1 466 0
 1648 001e 80F82030 		strb	r3, [r0, #32]
 467:Src/main.c    ****     hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 1649              		.loc 1 467 0
 1650 0022 C362     		str	r3, [r0, #44]
 468:Src/main.c    ****     hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 1651              		.loc 1 468 0
 1652 0024 0F49     		ldr	r1, .L107+8
 1653 0026 8162     		str	r1, [r0, #40]
 469:Src/main.c    ****     hadc1.Init.NbrOfConversion = 1;
 1654              		.loc 1 469 0
 1655 0028 C360     		str	r3, [r0, #12]
 470:Src/main.c    ****     hadc1.Init.DMAContinuousRequests = ENABLE;
 1656              		.loc 1 470 0
 1657 002a C261     		str	r2, [r0, #28]
 471:Src/main.c    ****     hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 1658              		.loc 1 471 0
 1659 002c 80F83020 		strb	r2, [r0, #48]
 472:Src/main.c    ****     if (HAL_ADC_Init(&hadc1) != HAL_OK)
 1660              		.loc 1 472 0
 1661 0030 4261     		str	r2, [r0, #20]
 473:Src/main.c    ****     {
 1662              		.loc 1 473 0
 1663 0032 FFF7FEFF 		bl	HAL_ADC_Init
 1664              	.LVL153:
 1665 0036 68B9     		cbnz	r0, .L105
 479:Src/main.c    ****     sConfig.Rank = 1;
 1666              		.loc 1 479 0
 1667 0038 0823     		movs	r3, #8
 1668 003a 0093     		str	r3, [sp]
 480:Src/main.c    ****     sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 1669              		.loc 1 480 0
 1670 003c 0123     		movs	r3, #1
 1671 003e 0193     		str	r3, [sp, #4]
 481:Src/main.c    ****     if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 1672              		.loc 1 481 0
 1673 0040 0023     		movs	r3, #0
 1674 0042 0293     		str	r3, [sp, #8]
 482:Src/main.c    ****     {
 1675              		.loc 1 482 0
 1676 0044 6946     		mov	r1, sp
ARM GAS  /tmp/ccP3MicS.s 			page 57


 1677 0046 0548     		ldr	r0, .L107
 1678 0048 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1679              	.LVL154:
 1680 004c 20B9     		cbnz	r0, .L106
 489:Src/main.c    **** 
 1681              		.loc 1 489 0
 1682 004e 05B0     		add	sp, sp, #20
 1683              	.LCFI21:
 1684              		.cfi_remember_state
 1685              		.cfi_def_cfa_offset 4
 1686              		@ sp needed
 1687 0050 5DF804FB 		ldr	pc, [sp], #4
 1688              	.L105:
 1689              	.LCFI22:
 1690              		.cfi_restore_state
 475:Src/main.c    ****     }
 1691              		.loc 1 475 0
 1692 0054 FFF7FEFF 		bl	Error_Handler
 1693              	.LVL155:
 1694              	.L106:
 484:Src/main.c    ****     }
 1695              		.loc 1 484 0
 1696 0058 FFF7FEFF 		bl	Error_Handler
 1697              	.LVL156:
 1698              	.L108:
 1699              		.align	2
 1700              	.L107:
 1701 005c 00000000 		.word	hadc1
 1702 0060 00200140 		.word	1073815552
 1703 0064 0100000F 		.word	251658241
 1704              		.cfi_endproc
 1705              	.LFE135:
 1707              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 1708              		.align	1
 1709              		.syntax unified
 1710              		.thumb
 1711              		.thumb_func
 1712              		.fpu fpv4-sp-d16
 1714              	MX_USART1_UART_Init:
 1715              	.LFB146:
 887:Src/main.c    **** 
 1716              		.loc 1 887 0
 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720 0000 08B5     		push	{r3, lr}
 1721              	.LCFI23:
 1722              		.cfi_def_cfa_offset 8
 1723              		.cfi_offset 3, -8
 1724              		.cfi_offset 14, -4
 896:Src/main.c    ****     huart1.Init.BaudRate = 115200;
 1725              		.loc 1 896 0
 1726 0002 0A48     		ldr	r0, .L113
 1727 0004 0A4B     		ldr	r3, .L113+4
 1728 0006 0360     		str	r3, [r0]
 897:Src/main.c    ****     huart1.Init.WordLength = UART_WORDLENGTH_8B;
 1729              		.loc 1 897 0
ARM GAS  /tmp/ccP3MicS.s 			page 58


 1730 0008 4FF4E133 		mov	r3, #115200
 1731 000c 4360     		str	r3, [r0, #4]
 898:Src/main.c    ****     huart1.Init.StopBits = UART_STOPBITS_1;
 1732              		.loc 1 898 0
 1733 000e 0023     		movs	r3, #0
 1734 0010 8360     		str	r3, [r0, #8]
 899:Src/main.c    ****     huart1.Init.Parity = UART_PARITY_NONE;
 1735              		.loc 1 899 0
 1736 0012 C360     		str	r3, [r0, #12]
 900:Src/main.c    ****     huart1.Init.Mode = UART_MODE_TX_RX;
 1737              		.loc 1 900 0
 1738 0014 0361     		str	r3, [r0, #16]
 901:Src/main.c    ****     huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1739              		.loc 1 901 0
 1740 0016 0C22     		movs	r2, #12
 1741 0018 4261     		str	r2, [r0, #20]
 902:Src/main.c    ****     huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 1742              		.loc 1 902 0
 1743 001a 8361     		str	r3, [r0, #24]
 903:Src/main.c    ****     if (HAL_UART_Init(&huart1) != HAL_OK)
 1744              		.loc 1 903 0
 1745 001c C361     		str	r3, [r0, #28]
 904:Src/main.c    ****     {
 1746              		.loc 1 904 0
 1747 001e FFF7FEFF 		bl	HAL_UART_Init
 1748              	.LVL157:
 1749 0022 00B9     		cbnz	r0, .L112
 1750 0024 08BD     		pop	{r3, pc}
 1751              	.L112:
 906:Src/main.c    ****     }
 1752              		.loc 1 906 0
 1753 0026 FFF7FEFF 		bl	Error_Handler
 1754              	.LVL158:
 1755              	.L114:
 1756 002a 00BF     		.align	2
 1757              	.L113:
 1758 002c 00000000 		.word	huart1
 1759 0030 00100140 		.word	1073811456
 1760              		.cfi_endproc
 1761              	.LFE146:
 1763              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1764              		.align	1
 1765              		.syntax unified
 1766              		.thumb
 1767              		.thumb_func
 1768              		.fpu fpv4-sp-d16
 1770              	MX_TIM2_Init:
 1771              	.LFB138:
 570:Src/main.c    **** 
 1772              		.loc 1 570 0
 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 48
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 1776 0000 00B5     		push	{lr}
 1777              	.LCFI24:
 1778              		.cfi_def_cfa_offset 4
 1779              		.cfi_offset 14, -4
ARM GAS  /tmp/ccP3MicS.s 			page 59


 1780 0002 8DB0     		sub	sp, sp, #52
 1781              	.LCFI25:
 1782              		.cfi_def_cfa_offset 56
 576:Src/main.c    ****     TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 1783              		.loc 1 576 0
 1784 0004 0023     		movs	r3, #0
 1785 0006 0893     		str	r3, [sp, #32]
 1786 0008 0993     		str	r3, [sp, #36]
 1787 000a 0A93     		str	r3, [sp, #40]
 1788 000c 0B93     		str	r3, [sp, #44]
 577:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1789              		.loc 1 577 0
 1790 000e 0393     		str	r3, [sp, #12]
 1791 0010 0493     		str	r3, [sp, #16]
 1792 0012 0593     		str	r3, [sp, #20]
 1793 0014 0693     		str	r3, [sp, #24]
 1794 0016 0793     		str	r3, [sp, #28]
 578:Src/main.c    **** 
 1795              		.loc 1 578 0
 1796 0018 0193     		str	r3, [sp, #4]
 1797 001a 0293     		str	r3, [sp, #8]
 583:Src/main.c    ****     htim2.Init.Prescaler = 36;
 1798              		.loc 1 583 0
 1799 001c 1948     		ldr	r0, .L125
 1800 001e 4FF08042 		mov	r2, #1073741824
 1801 0022 0260     		str	r2, [r0]
 584:Src/main.c    ****     htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1802              		.loc 1 584 0
 1803 0024 2422     		movs	r2, #36
 1804 0026 4260     		str	r2, [r0, #4]
 585:Src/main.c    ****     htim2.Init.Period = 1000;
 1805              		.loc 1 585 0
 1806 0028 8360     		str	r3, [r0, #8]
 586:Src/main.c    ****     htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1807              		.loc 1 586 0
 1808 002a 4FF47A72 		mov	r2, #1000
 1809 002e C260     		str	r2, [r0, #12]
 587:Src/main.c    ****     htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1810              		.loc 1 587 0
 1811 0030 0361     		str	r3, [r0, #16]
 588:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1812              		.loc 1 588 0
 1813 0032 8361     		str	r3, [r0, #24]
 589:Src/main.c    ****     {
 1814              		.loc 1 589 0
 1815 0034 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1816              	.LVL159:
 1817 0038 D8B9     		cbnz	r0, .L121
 593:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1818              		.loc 1 593 0
 1819 003a 0CA9     		add	r1, sp, #48
 1820 003c 4FF48053 		mov	r3, #4096
 1821 0040 41F8103D 		str	r3, [r1, #-16]!
 594:Src/main.c    ****     {
 1822              		.loc 1 594 0
 1823 0044 0F48     		ldr	r0, .L125
 1824 0046 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
ARM GAS  /tmp/ccP3MicS.s 			page 60


 1825              	.LVL160:
 1826 004a A0B9     		cbnz	r0, .L122
 598:Src/main.c    ****     sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 1827              		.loc 1 598 0
 1828 004c 0023     		movs	r3, #0
 1829 004e 0393     		str	r3, [sp, #12]
 599:Src/main.c    ****     if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 1830              		.loc 1 599 0
 1831 0050 0493     		str	r3, [sp, #16]
 600:Src/main.c    ****     {
 1832              		.loc 1 600 0
 1833 0052 03A9     		add	r1, sp, #12
 1834 0054 0B48     		ldr	r0, .L125
 1835 0056 FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchro
 1836              	.LVL161:
 1837 005a 70B9     		cbnz	r0, .L123
 604:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1838              		.loc 1 604 0
 1839 005c 0023     		movs	r3, #0
 1840 005e 0193     		str	r3, [sp, #4]
 605:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1841              		.loc 1 605 0
 1842 0060 0293     		str	r3, [sp, #8]
 606:Src/main.c    ****     {
 1843              		.loc 1 606 0
 1844 0062 01A9     		add	r1, sp, #4
 1845 0064 0748     		ldr	r0, .L125
 1846 0066 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1847              	.LVL162:
 1848 006a 40B9     		cbnz	r0, .L124
 613:Src/main.c    **** 
 1849              		.loc 1 613 0
 1850 006c 0DB0     		add	sp, sp, #52
 1851              	.LCFI26:
 1852              		.cfi_remember_state
 1853              		.cfi_def_cfa_offset 4
 1854              		@ sp needed
 1855 006e 5DF804FB 		ldr	pc, [sp], #4
 1856              	.L121:
 1857              	.LCFI27:
 1858              		.cfi_restore_state
 591:Src/main.c    ****     }
 1859              		.loc 1 591 0
 1860 0072 FFF7FEFF 		bl	Error_Handler
 1861              	.LVL163:
 1862              	.L122:
 596:Src/main.c    ****     }
 1863              		.loc 1 596 0
 1864 0076 FFF7FEFF 		bl	Error_Handler
 1865              	.LVL164:
 1866              	.L123:
 602:Src/main.c    ****     }
 1867              		.loc 1 602 0
 1868 007a FFF7FEFF 		bl	Error_Handler
 1869              	.LVL165:
 1870              	.L124:
 608:Src/main.c    ****     }
ARM GAS  /tmp/ccP3MicS.s 			page 61


 1871              		.loc 1 608 0
 1872 007e FFF7FEFF 		bl	Error_Handler
 1873              	.LVL166:
 1874              	.L126:
 1875 0082 00BF     		.align	2
 1876              	.L125:
 1877 0084 00000000 		.word	htim2
 1878              		.cfi_endproc
 1879              	.LFE138:
 1881              		.section	.text.MX_TIM3_Init,"ax",%progbits
 1882              		.align	1
 1883              		.syntax unified
 1884              		.thumb
 1885              		.thumb_func
 1886              		.fpu fpv4-sp-d16
 1888              	MX_TIM3_Init:
 1889              	.LFB139:
 621:Src/main.c    **** 
 1890              		.loc 1 621 0
 1891              		.cfi_startproc
 1892              		@ args = 0, pretend = 0, frame = 24
 1893              		@ frame_needed = 0, uses_anonymous_args = 0
 1894 0000 00B5     		push	{lr}
 1895              	.LCFI28:
 1896              		.cfi_def_cfa_offset 4
 1897              		.cfi_offset 14, -4
 1898 0002 87B0     		sub	sp, sp, #28
 1899              	.LCFI29:
 1900              		.cfi_def_cfa_offset 32
 627:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1901              		.loc 1 627 0
 1902 0004 0023     		movs	r3, #0
 1903 0006 0293     		str	r3, [sp, #8]
 1904 0008 0393     		str	r3, [sp, #12]
 1905 000a 0493     		str	r3, [sp, #16]
 1906 000c 0593     		str	r3, [sp, #20]
 628:Src/main.c    **** 
 1907              		.loc 1 628 0
 1908 000e 0093     		str	r3, [sp]
 1909 0010 0193     		str	r3, [sp, #4]
 633:Src/main.c    ****     htim3.Init.Prescaler = 18;
 1910              		.loc 1 633 0
 1911 0012 1448     		ldr	r0, .L135
 1912 0014 144A     		ldr	r2, .L135+4
 1913 0016 0260     		str	r2, [r0]
 634:Src/main.c    ****     htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1914              		.loc 1 634 0
 1915 0018 1222     		movs	r2, #18
 1916 001a 4260     		str	r2, [r0, #4]
 635:Src/main.c    ****     htim3.Init.Period = 65500;
 1917              		.loc 1 635 0
 1918 001c 8360     		str	r3, [r0, #8]
 636:Src/main.c    ****     htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1919              		.loc 1 636 0
 1920 001e 4FF6DC72 		movw	r2, #65500
 1921 0022 C260     		str	r2, [r0, #12]
 637:Src/main.c    ****     htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccP3MicS.s 			page 62


 1922              		.loc 1 637 0
 1923 0024 0361     		str	r3, [r0, #16]
 638:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1924              		.loc 1 638 0
 1925 0026 8361     		str	r3, [r0, #24]
 639:Src/main.c    ****     {
 1926              		.loc 1 639 0
 1927 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1928              	.LVL167:
 1929 002c 98B9     		cbnz	r0, .L132
 643:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1930              		.loc 1 643 0
 1931 002e 06A9     		add	r1, sp, #24
 1932 0030 4FF48053 		mov	r3, #4096
 1933 0034 41F8103D 		str	r3, [r1, #-16]!
 644:Src/main.c    ****     {
 1934              		.loc 1 644 0
 1935 0038 0A48     		ldr	r0, .L135
 1936 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1937              	.LVL168:
 1938 003e 60B9     		cbnz	r0, .L133
 648:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1939              		.loc 1 648 0
 1940 0040 0023     		movs	r3, #0
 1941 0042 0093     		str	r3, [sp]
 649:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1942              		.loc 1 649 0
 1943 0044 0193     		str	r3, [sp, #4]
 650:Src/main.c    ****     {
 1944              		.loc 1 650 0
 1945 0046 6946     		mov	r1, sp
 1946 0048 0648     		ldr	r0, .L135
 1947 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1948              	.LVL169:
 1949 004e 30B9     		cbnz	r0, .L134
 657:Src/main.c    **** 
 1950              		.loc 1 657 0
 1951 0050 07B0     		add	sp, sp, #28
 1952              	.LCFI30:
 1953              		.cfi_remember_state
 1954              		.cfi_def_cfa_offset 4
 1955              		@ sp needed
 1956 0052 5DF804FB 		ldr	pc, [sp], #4
 1957              	.L132:
 1958              	.LCFI31:
 1959              		.cfi_restore_state
 641:Src/main.c    ****     }
 1960              		.loc 1 641 0
 1961 0056 FFF7FEFF 		bl	Error_Handler
 1962              	.LVL170:
 1963              	.L133:
 646:Src/main.c    ****     }
 1964              		.loc 1 646 0
 1965 005a FFF7FEFF 		bl	Error_Handler
 1966              	.LVL171:
 1967              	.L134:
 652:Src/main.c    ****     }
ARM GAS  /tmp/ccP3MicS.s 			page 63


 1968              		.loc 1 652 0
 1969 005e FFF7FEFF 		bl	Error_Handler
 1970              	.LVL172:
 1971              	.L136:
 1972 0062 00BF     		.align	2
 1973              	.L135:
 1974 0064 00000000 		.word	htim3
 1975 0068 00040040 		.word	1073742848
 1976              		.cfi_endproc
 1977              	.LFE139:
 1979              		.section	.text.MX_TIM4_Init,"ax",%progbits
 1980              		.align	1
 1981              		.syntax unified
 1982              		.thumb
 1983              		.thumb_func
 1984              		.fpu fpv4-sp-d16
 1986              	MX_TIM4_Init:
 1987              	.LFB140:
 665:Src/main.c    **** 
 1988              		.loc 1 665 0
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 24
 1991              		@ frame_needed = 0, uses_anonymous_args = 0
 1992 0000 00B5     		push	{lr}
 1993              	.LCFI32:
 1994              		.cfi_def_cfa_offset 4
 1995              		.cfi_offset 14, -4
 1996 0002 87B0     		sub	sp, sp, #28
 1997              	.LCFI33:
 1998              		.cfi_def_cfa_offset 32
 671:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 1999              		.loc 1 671 0
 2000 0004 0023     		movs	r3, #0
 2001 0006 0293     		str	r3, [sp, #8]
 2002 0008 0393     		str	r3, [sp, #12]
 2003 000a 0493     		str	r3, [sp, #16]
 2004 000c 0593     		str	r3, [sp, #20]
 672:Src/main.c    **** 
 2005              		.loc 1 672 0
 2006 000e 0093     		str	r3, [sp]
 2007 0010 0193     		str	r3, [sp, #4]
 677:Src/main.c    ****     htim4.Init.Prescaler = 3600;
 2008              		.loc 1 677 0
 2009 0012 1448     		ldr	r0, .L145
 2010 0014 144A     		ldr	r2, .L145+4
 2011 0016 0260     		str	r2, [r0]
 678:Src/main.c    ****     htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 2012              		.loc 1 678 0
 2013 0018 4FF46162 		mov	r2, #3600
 2014 001c 4260     		str	r2, [r0, #4]
 679:Src/main.c    ****     htim4.Init.Period = 2000;
 2015              		.loc 1 679 0
 2016 001e 8360     		str	r3, [r0, #8]
 680:Src/main.c    ****     htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2017              		.loc 1 680 0
 2018 0020 4FF4FA62 		mov	r2, #2000
 2019 0024 C260     		str	r2, [r0, #12]
ARM GAS  /tmp/ccP3MicS.s 			page 64


 681:Src/main.c    ****     htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2020              		.loc 1 681 0
 2021 0026 0361     		str	r3, [r0, #16]
 682:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 2022              		.loc 1 682 0
 2023 0028 8361     		str	r3, [r0, #24]
 683:Src/main.c    ****     {
 2024              		.loc 1 683 0
 2025 002a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2026              	.LVL173:
 2027 002e 98B9     		cbnz	r0, .L142
 687:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 2028              		.loc 1 687 0
 2029 0030 06A9     		add	r1, sp, #24
 2030 0032 4FF48053 		mov	r3, #4096
 2031 0036 41F8103D 		str	r3, [r1, #-16]!
 688:Src/main.c    ****     {
 2032              		.loc 1 688 0
 2033 003a 0A48     		ldr	r0, .L145
 2034 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2035              	.LVL174:
 2036 0040 60B9     		cbnz	r0, .L143
 692:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2037              		.loc 1 692 0
 2038 0042 0023     		movs	r3, #0
 2039 0044 0093     		str	r3, [sp]
 693:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 2040              		.loc 1 693 0
 2041 0046 0193     		str	r3, [sp, #4]
 694:Src/main.c    ****     {
 2042              		.loc 1 694 0
 2043 0048 6946     		mov	r1, sp
 2044 004a 0648     		ldr	r0, .L145
 2045 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2046              	.LVL175:
 2047 0050 30B9     		cbnz	r0, .L144
 701:Src/main.c    **** 
 2048              		.loc 1 701 0
 2049 0052 07B0     		add	sp, sp, #28
 2050              	.LCFI34:
 2051              		.cfi_remember_state
 2052              		.cfi_def_cfa_offset 4
 2053              		@ sp needed
 2054 0054 5DF804FB 		ldr	pc, [sp], #4
 2055              	.L142:
 2056              	.LCFI35:
 2057              		.cfi_restore_state
 685:Src/main.c    ****     }
 2058              		.loc 1 685 0
 2059 0058 FFF7FEFF 		bl	Error_Handler
 2060              	.LVL176:
 2061              	.L143:
 690:Src/main.c    ****     }
 2062              		.loc 1 690 0
 2063 005c FFF7FEFF 		bl	Error_Handler
 2064              	.LVL177:
 2065              	.L144:
ARM GAS  /tmp/ccP3MicS.s 			page 65


 696:Src/main.c    ****     }
 2066              		.loc 1 696 0
 2067 0060 FFF7FEFF 		bl	Error_Handler
 2068              	.LVL178:
 2069              	.L146:
 2070              		.align	2
 2071              	.L145:
 2072 0064 00000000 		.word	htim4
 2073 0068 00080040 		.word	1073743872
 2074              		.cfi_endproc
 2075              	.LFE140:
 2077              		.section	.text.MX_TIM5_Init,"ax",%progbits
 2078              		.align	1
 2079              		.syntax unified
 2080              		.thumb
 2081              		.thumb_func
 2082              		.fpu fpv4-sp-d16
 2084              	MX_TIM5_Init:
 2085              	.LFB141:
 709:Src/main.c    **** 
 2086              		.loc 1 709 0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 24
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
 2090 0000 00B5     		push	{lr}
 2091              	.LCFI36:
 2092              		.cfi_def_cfa_offset 4
 2093              		.cfi_offset 14, -4
 2094 0002 87B0     		sub	sp, sp, #28
 2095              	.LCFI37:
 2096              		.cfi_def_cfa_offset 32
 715:Src/main.c    ****     TIM_MasterConfigTypeDef sMasterConfig = {0};
 2097              		.loc 1 715 0
 2098 0004 0023     		movs	r3, #0
 2099 0006 0293     		str	r3, [sp, #8]
 2100 0008 0393     		str	r3, [sp, #12]
 2101 000a 0493     		str	r3, [sp, #16]
 2102 000c 0593     		str	r3, [sp, #20]
 716:Src/main.c    **** 
 2103              		.loc 1 716 0
 2104 000e 0093     		str	r3, [sp]
 2105 0010 0193     		str	r3, [sp, #4]
 721:Src/main.c    ****     htim5.Init.Prescaler = 36;
 2106              		.loc 1 721 0
 2107 0012 1448     		ldr	r0, .L155
 2108 0014 144A     		ldr	r2, .L155+4
 2109 0016 0260     		str	r2, [r0]
 722:Src/main.c    ****     htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 2110              		.loc 1 722 0
 2111 0018 2422     		movs	r2, #36
 2112 001a 4260     		str	r2, [r0, #4]
 723:Src/main.c    ****     htim5.Init.Period = 2000;
 2113              		.loc 1 723 0
 2114 001c 8360     		str	r3, [r0, #8]
 724:Src/main.c    ****     htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2115              		.loc 1 724 0
 2116 001e 4FF4FA62 		mov	r2, #2000
ARM GAS  /tmp/ccP3MicS.s 			page 66


 2117 0022 C260     		str	r2, [r0, #12]
 725:Src/main.c    ****     htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2118              		.loc 1 725 0
 2119 0024 0361     		str	r3, [r0, #16]
 726:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 2120              		.loc 1 726 0
 2121 0026 8361     		str	r3, [r0, #24]
 727:Src/main.c    ****     {
 2122              		.loc 1 727 0
 2123 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2124              	.LVL179:
 2125 002c 98B9     		cbnz	r0, .L152
 731:Src/main.c    ****     if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 2126              		.loc 1 731 0
 2127 002e 06A9     		add	r1, sp, #24
 2128 0030 4FF48053 		mov	r3, #4096
 2129 0034 41F8103D 		str	r3, [r1, #-16]!
 732:Src/main.c    ****     {
 2130              		.loc 1 732 0
 2131 0038 0A48     		ldr	r0, .L155
 2132 003a FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 2133              	.LVL180:
 2134 003e 60B9     		cbnz	r0, .L153
 736:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2135              		.loc 1 736 0
 2136 0040 0023     		movs	r3, #0
 2137 0042 0093     		str	r3, [sp]
 737:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 2138              		.loc 1 737 0
 2139 0044 0193     		str	r3, [sp, #4]
 738:Src/main.c    ****     {
 2140              		.loc 1 738 0
 2141 0046 6946     		mov	r1, sp
 2142 0048 0648     		ldr	r0, .L155
 2143 004a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2144              	.LVL181:
 2145 004e 30B9     		cbnz	r0, .L154
 745:Src/main.c    **** 
 2146              		.loc 1 745 0
 2147 0050 07B0     		add	sp, sp, #28
 2148              	.LCFI38:
 2149              		.cfi_remember_state
 2150              		.cfi_def_cfa_offset 4
 2151              		@ sp needed
 2152 0052 5DF804FB 		ldr	pc, [sp], #4
 2153              	.L152:
 2154              	.LCFI39:
 2155              		.cfi_restore_state
 729:Src/main.c    ****     }
 2156              		.loc 1 729 0
 2157 0056 FFF7FEFF 		bl	Error_Handler
 2158              	.LVL182:
 2159              	.L153:
 734:Src/main.c    ****     }
 2160              		.loc 1 734 0
 2161 005a FFF7FEFF 		bl	Error_Handler
 2162              	.LVL183:
ARM GAS  /tmp/ccP3MicS.s 			page 67


 2163              	.L154:
 740:Src/main.c    ****     }
 2164              		.loc 1 740 0
 2165 005e FFF7FEFF 		bl	Error_Handler
 2166              	.LVL184:
 2167              	.L156:
 2168 0062 00BF     		.align	2
 2169              	.L155:
 2170 0064 00000000 		.word	htim5
 2171 0068 000C0040 		.word	1073744896
 2172              		.cfi_endproc
 2173              	.LFE141:
 2175              		.section	.text.MX_TIM6_Init,"ax",%progbits
 2176              		.align	1
 2177              		.syntax unified
 2178              		.thumb
 2179              		.thumb_func
 2180              		.fpu fpv4-sp-d16
 2182              	MX_TIM6_Init:
 2183              	.LFB142:
 753:Src/main.c    **** 
 2184              		.loc 1 753 0
 2185              		.cfi_startproc
 2186              		@ args = 0, pretend = 0, frame = 8
 2187              		@ frame_needed = 0, uses_anonymous_args = 0
 2188 0000 00B5     		push	{lr}
 2189              	.LCFI40:
 2190              		.cfi_def_cfa_offset 4
 2191              		.cfi_offset 14, -4
 2192 0002 83B0     		sub	sp, sp, #12
 2193              	.LCFI41:
 2194              		.cfi_def_cfa_offset 16
 759:Src/main.c    **** 
 2195              		.loc 1 759 0
 2196 0004 0023     		movs	r3, #0
 2197 0006 0093     		str	r3, [sp]
 2198 0008 0193     		str	r3, [sp, #4]
 764:Src/main.c    ****     htim6.Init.Prescaler = 3600;
 2199              		.loc 1 764 0
 2200 000a 0E48     		ldr	r0, .L163
 2201 000c 0E4A     		ldr	r2, .L163+4
 2202 000e 0260     		str	r2, [r0]
 765:Src/main.c    ****     htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 2203              		.loc 1 765 0
 2204 0010 4FF46162 		mov	r2, #3600
 2205 0014 4260     		str	r2, [r0, #4]
 766:Src/main.c    ****     htim6.Init.Period = 2000;
 2206              		.loc 1 766 0
 2207 0016 8360     		str	r3, [r0, #8]
 767:Src/main.c    ****     htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2208              		.loc 1 767 0
 2209 0018 4FF4FA62 		mov	r2, #2000
 2210 001c C260     		str	r2, [r0, #12]
 768:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 2211              		.loc 1 768 0
 2212 001e 8361     		str	r3, [r0, #24]
 769:Src/main.c    ****     {
ARM GAS  /tmp/ccP3MicS.s 			page 68


 2213              		.loc 1 769 0
 2214 0020 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2215              	.LVL185:
 2216 0024 50B9     		cbnz	r0, .L161
 773:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2217              		.loc 1 773 0
 2218 0026 0023     		movs	r3, #0
 2219 0028 0093     		str	r3, [sp]
 774:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 2220              		.loc 1 774 0
 2221 002a 0193     		str	r3, [sp, #4]
 775:Src/main.c    ****     {
 2222              		.loc 1 775 0
 2223 002c 6946     		mov	r1, sp
 2224 002e 0548     		ldr	r0, .L163
 2225 0030 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2226              	.LVL186:
 2227 0034 20B9     		cbnz	r0, .L162
 782:Src/main.c    **** 
 2228              		.loc 1 782 0
 2229 0036 03B0     		add	sp, sp, #12
 2230              	.LCFI42:
 2231              		.cfi_remember_state
 2232              		.cfi_def_cfa_offset 4
 2233              		@ sp needed
 2234 0038 5DF804FB 		ldr	pc, [sp], #4
 2235              	.L161:
 2236              	.LCFI43:
 2237              		.cfi_restore_state
 771:Src/main.c    ****     }
 2238              		.loc 1 771 0
 2239 003c FFF7FEFF 		bl	Error_Handler
 2240              	.LVL187:
 2241              	.L162:
 777:Src/main.c    ****     }
 2242              		.loc 1 777 0
 2243 0040 FFF7FEFF 		bl	Error_Handler
 2244              	.LVL188:
 2245              	.L164:
 2246              		.align	2
 2247              	.L163:
 2248 0044 00000000 		.word	htim6
 2249 0048 00100040 		.word	1073745920
 2250              		.cfi_endproc
 2251              	.LFE142:
 2253              		.section	.text.MX_TIM7_Init,"ax",%progbits
 2254              		.align	1
 2255              		.syntax unified
 2256              		.thumb
 2257              		.thumb_func
 2258              		.fpu fpv4-sp-d16
 2260              	MX_TIM7_Init:
 2261              	.LFB143:
 790:Src/main.c    **** 
 2262              		.loc 1 790 0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccP3MicS.s 			page 69


 2265              		@ frame_needed = 0, uses_anonymous_args = 0
 2266 0000 00B5     		push	{lr}
 2267              	.LCFI44:
 2268              		.cfi_def_cfa_offset 4
 2269              		.cfi_offset 14, -4
 2270 0002 83B0     		sub	sp, sp, #12
 2271              	.LCFI45:
 2272              		.cfi_def_cfa_offset 16
 796:Src/main.c    **** 
 2273              		.loc 1 796 0
 2274 0004 0023     		movs	r3, #0
 2275 0006 0093     		str	r3, [sp]
 2276 0008 0193     		str	r3, [sp, #4]
 801:Src/main.c    ****     htim7.Init.Prescaler = 36;
 2277              		.loc 1 801 0
 2278 000a 0E48     		ldr	r0, .L171
 2279 000c 0E4A     		ldr	r2, .L171+4
 2280 000e 0260     		str	r2, [r0]
 802:Src/main.c    ****     htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 2281              		.loc 1 802 0
 2282 0010 2422     		movs	r2, #36
 2283 0012 4260     		str	r2, [r0, #4]
 803:Src/main.c    ****     htim7.Init.Period = 6000;
 2284              		.loc 1 803 0
 2285 0014 8360     		str	r3, [r0, #8]
 804:Src/main.c    ****     htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 2286              		.loc 1 804 0
 2287 0016 41F27072 		movw	r2, #6000
 2288 001a C260     		str	r2, [r0, #12]
 805:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 2289              		.loc 1 805 0
 2290 001c 8361     		str	r3, [r0, #24]
 806:Src/main.c    ****     {
 2291              		.loc 1 806 0
 2292 001e FFF7FEFF 		bl	HAL_TIM_Base_Init
 2293              	.LVL189:
 2294 0022 50B9     		cbnz	r0, .L169
 810:Src/main.c    ****     sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 2295              		.loc 1 810 0
 2296 0024 0023     		movs	r3, #0
 2297 0026 0093     		str	r3, [sp]
 811:Src/main.c    ****     if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 2298              		.loc 1 811 0
 2299 0028 0193     		str	r3, [sp, #4]
 812:Src/main.c    ****     {
 2300              		.loc 1 812 0
 2301 002a 6946     		mov	r1, sp
 2302 002c 0548     		ldr	r0, .L171
 2303 002e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 2304              	.LVL190:
 2305 0032 20B9     		cbnz	r0, .L170
 819:Src/main.c    **** 
 2306              		.loc 1 819 0
 2307 0034 03B0     		add	sp, sp, #12
 2308              	.LCFI46:
 2309              		.cfi_remember_state
 2310              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccP3MicS.s 			page 70


 2311              		@ sp needed
 2312 0036 5DF804FB 		ldr	pc, [sp], #4
 2313              	.L169:
 2314              	.LCFI47:
 2315              		.cfi_restore_state
 808:Src/main.c    ****     }
 2316              		.loc 1 808 0
 2317 003a FFF7FEFF 		bl	Error_Handler
 2318              	.LVL191:
 2319              	.L170:
 814:Src/main.c    ****     }
 2320              		.loc 1 814 0
 2321 003e FFF7FEFF 		bl	Error_Handler
 2322              	.LVL192:
 2323              	.L172:
 2324 0042 00BF     		.align	2
 2325              	.L171:
 2326 0044 00000000 		.word	htim7
 2327 0048 00140040 		.word	1073746944
 2328              		.cfi_endproc
 2329              	.LFE143:
 2331              		.section	.text.MX_TIM10_Init,"ax",%progbits
 2332              		.align	1
 2333              		.syntax unified
 2334              		.thumb
 2335              		.thumb_func
 2336              		.fpu fpv4-sp-d16
 2338              	MX_TIM10_Init:
 2339              	.LFB144:
 827:Src/main.c    **** 
 2340              		.loc 1 827 0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 0
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 2344 0000 08B5     		push	{r3, lr}
 2345              	.LCFI48:
 2346              		.cfi_def_cfa_offset 8
 2347              		.cfi_offset 3, -8
 2348              		.cfi_offset 14, -4
 836:Src/main.c    ****     htim10.Init.Prescaler = 72;
 2349              		.loc 1 836 0
 2350 0002 0948     		ldr	r0, .L177
 2351 0004 094B     		ldr	r3, .L177+4
 2352 0006 0360     		str	r3, [r0]
 837:Src/main.c    ****     htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 2353              		.loc 1 837 0
 2354 0008 4823     		movs	r3, #72
 2355 000a 4360     		str	r3, [r0, #4]
 838:Src/main.c    ****     htim10.Init.Period = 1000;
 2356              		.loc 1 838 0
 2357 000c 0023     		movs	r3, #0
 2358 000e 8360     		str	r3, [r0, #8]
 839:Src/main.c    ****     htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2359              		.loc 1 839 0
 2360 0010 4FF47A72 		mov	r2, #1000
 2361 0014 C260     		str	r2, [r0, #12]
 840:Src/main.c    ****     htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccP3MicS.s 			page 71


 2362              		.loc 1 840 0
 2363 0016 0361     		str	r3, [r0, #16]
 841:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 2364              		.loc 1 841 0
 2365 0018 8361     		str	r3, [r0, #24]
 842:Src/main.c    ****     {
 2366              		.loc 1 842 0
 2367 001a FFF7FEFF 		bl	HAL_TIM_Base_Init
 2368              	.LVL193:
 2369 001e 00B9     		cbnz	r0, .L176
 2370 0020 08BD     		pop	{r3, pc}
 2371              	.L176:
 844:Src/main.c    ****     }
 2372              		.loc 1 844 0
 2373 0022 FFF7FEFF 		bl	Error_Handler
 2374              	.LVL194:
 2375              	.L178:
 2376 0026 00BF     		.align	2
 2377              	.L177:
 2378 0028 00000000 		.word	htim10
 2379 002c 00440140 		.word	1073824768
 2380              		.cfi_endproc
 2381              	.LFE144:
 2383              		.section	.text.MX_TIM11_Init,"ax",%progbits
 2384              		.align	1
 2385              		.syntax unified
 2386              		.thumb
 2387              		.thumb_func
 2388              		.fpu fpv4-sp-d16
 2390              	MX_TIM11_Init:
 2391              	.LFB145:
 857:Src/main.c    **** 
 2392              		.loc 1 857 0
 2393              		.cfi_startproc
 2394              		@ args = 0, pretend = 0, frame = 0
 2395              		@ frame_needed = 0, uses_anonymous_args = 0
 2396 0000 08B5     		push	{r3, lr}
 2397              	.LCFI49:
 2398              		.cfi_def_cfa_offset 8
 2399              		.cfi_offset 3, -8
 2400              		.cfi_offset 14, -4
 866:Src/main.c    ****     htim11.Init.Prescaler = 0;
 2401              		.loc 1 866 0
 2402 0002 0748     		ldr	r0, .L183
 2403 0004 074B     		ldr	r3, .L183+4
 2404 0006 0360     		str	r3, [r0]
 867:Src/main.c    ****     htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 2405              		.loc 1 867 0
 2406 0008 0023     		movs	r3, #0
 2407 000a 4360     		str	r3, [r0, #4]
 868:Src/main.c    ****     htim11.Init.Period = 0;
 2408              		.loc 1 868 0
 2409 000c 8360     		str	r3, [r0, #8]
 869:Src/main.c    ****     htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 2410              		.loc 1 869 0
 2411 000e C360     		str	r3, [r0, #12]
 870:Src/main.c    ****     htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
ARM GAS  /tmp/ccP3MicS.s 			page 72


 2412              		.loc 1 870 0
 2413 0010 0361     		str	r3, [r0, #16]
 871:Src/main.c    ****     if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 2414              		.loc 1 871 0
 2415 0012 8361     		str	r3, [r0, #24]
 872:Src/main.c    ****     {
 2416              		.loc 1 872 0
 2417 0014 FFF7FEFF 		bl	HAL_TIM_Base_Init
 2418              	.LVL195:
 2419 0018 00B9     		cbnz	r0, .L182
 2420 001a 08BD     		pop	{r3, pc}
 2421              	.L182:
 874:Src/main.c    ****     }
 2422              		.loc 1 874 0
 2423 001c FFF7FEFF 		bl	Error_Handler
 2424              	.LVL196:
 2425              	.L184:
 2426              		.align	2
 2427              	.L183:
 2428 0020 00000000 		.word	htim11
 2429 0024 00480140 		.word	1073825792
 2430              		.cfi_endproc
 2431              	.LFE145:
 2433              		.section	.text.SystemClock_Config,"ax",%progbits
 2434              		.align	1
 2435              		.global	SystemClock_Config
 2436              		.syntax unified
 2437              		.thumb
 2438              		.thumb_func
 2439              		.fpu fpv4-sp-d16
 2441              	SystemClock_Config:
 2442              	.LFB133:
 364:Src/main.c    ****     RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 2443              		.loc 1 364 0
 2444              		.cfi_startproc
 2445              		@ args = 0, pretend = 0, frame = 80
 2446              		@ frame_needed = 0, uses_anonymous_args = 0
 2447 0000 00B5     		push	{lr}
 2448              	.LCFI50:
 2449              		.cfi_def_cfa_offset 4
 2450              		.cfi_offset 14, -4
 2451 0002 95B0     		sub	sp, sp, #84
 2452              	.LCFI51:
 2453              		.cfi_def_cfa_offset 88
 365:Src/main.c    ****     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 2454              		.loc 1 365 0
 2455 0004 3422     		movs	r2, #52
 2456 0006 0021     		movs	r1, #0
 2457 0008 07A8     		add	r0, sp, #28
 2458 000a FFF7FEFF 		bl	memset
 2459              	.LVL197:
 366:Src/main.c    **** 
 2460              		.loc 1 366 0
 2461 000e 0023     		movs	r3, #0
 2462 0010 0293     		str	r3, [sp, #8]
 2463 0012 0393     		str	r3, [sp, #12]
 2464 0014 0493     		str	r3, [sp, #16]
ARM GAS  /tmp/ccP3MicS.s 			page 73


 2465 0016 0593     		str	r3, [sp, #20]
 2466 0018 0693     		str	r3, [sp, #24]
 2467              	.LBB14:
 370:Src/main.c    ****     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 2468              		.loc 1 370 0
 2469 001a 0093     		str	r3, [sp]
 2470 001c 204A     		ldr	r2, .L191
 2471 001e 116C     		ldr	r1, [r2, #64]
 2472 0020 41F08051 		orr	r1, r1, #268435456
 2473 0024 1164     		str	r1, [r2, #64]
 2474 0026 126C     		ldr	r2, [r2, #64]
 2475 0028 02F08052 		and	r2, r2, #268435456
 2476 002c 0092     		str	r2, [sp]
 2477 002e 009A     		ldr	r2, [sp]
 2478              	.LBE14:
 2479              	.LBB15:
 371:Src/main.c    ****     /** Initializes the CPU, AHB and APB busses clocks 
 2480              		.loc 1 371 0
 2481 0030 0193     		str	r3, [sp, #4]
 2482 0032 1C4B     		ldr	r3, .L191+4
 2483 0034 1A68     		ldr	r2, [r3]
 2484 0036 42F44042 		orr	r2, r2, #49152
 2485 003a 1A60     		str	r2, [r3]
 2486 003c 1B68     		ldr	r3, [r3]
 2487 003e 03F44043 		and	r3, r3, #49152
 2488 0042 0193     		str	r3, [sp, #4]
 2489 0044 019B     		ldr	r3, [sp, #4]
 2490              	.LBE15:
 374:Src/main.c    ****     RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 2491              		.loc 1 374 0
 2492 0046 0123     		movs	r3, #1
 2493 0048 0793     		str	r3, [sp, #28]
 375:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 2494              		.loc 1 375 0
 2495 004a 4FF4A023 		mov	r3, #327680
 2496 004e 0893     		str	r3, [sp, #32]
 376:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 2497              		.loc 1 376 0
 2498 0050 0223     		movs	r3, #2
 2499 0052 0D93     		str	r3, [sp, #52]
 377:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLM = 8;
 2500              		.loc 1 377 0
 2501 0054 4FF48002 		mov	r2, #4194304
 2502 0058 0E92     		str	r2, [sp, #56]
 378:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLN = 288;
 2503              		.loc 1 378 0
 2504 005a 0822     		movs	r2, #8
 2505 005c 0F92     		str	r2, [sp, #60]
 379:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 2506              		.loc 1 379 0
 2507 005e 4FF49072 		mov	r2, #288
 2508 0062 1092     		str	r2, [sp, #64]
 380:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLQ = 2;
 2509              		.loc 1 380 0
 2510 0064 1193     		str	r3, [sp, #68]
 381:Src/main.c    ****     RCC_OscInitStruct.PLL.PLLR = 2;
 2511              		.loc 1 381 0
ARM GAS  /tmp/ccP3MicS.s 			page 74


 2512 0066 1293     		str	r3, [sp, #72]
 382:Src/main.c    ****     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 2513              		.loc 1 382 0
 2514 0068 1393     		str	r3, [sp, #76]
 383:Src/main.c    ****     {
 2515              		.loc 1 383 0
 2516 006a 07A8     		add	r0, sp, #28
 2517 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 2518              	.LVL198:
 2519 0070 88B9     		cbnz	r0, .L189
 389:Src/main.c    ****     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 2520              		.loc 1 389 0
 2521 0072 0F23     		movs	r3, #15
 2522 0074 0293     		str	r3, [sp, #8]
 390:Src/main.c    ****     RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 2523              		.loc 1 390 0
 2524 0076 0223     		movs	r3, #2
 2525 0078 0393     		str	r3, [sp, #12]
 391:Src/main.c    ****     RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 2526              		.loc 1 391 0
 2527 007a 0023     		movs	r3, #0
 2528 007c 0493     		str	r3, [sp, #16]
 392:Src/main.c    ****     RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 2529              		.loc 1 392 0
 2530 007e 4FF4A053 		mov	r3, #5120
 2531 0082 0593     		str	r3, [sp, #20]
 393:Src/main.c    **** 
 2532              		.loc 1 393 0
 2533 0084 0693     		str	r3, [sp, #24]
 395:Src/main.c    ****     {
 2534              		.loc 1 395 0
 2535 0086 0421     		movs	r1, #4
 2536 0088 02A8     		add	r0, sp, #8
 2537 008a FFF7FEFF 		bl	HAL_RCC_ClockConfig
 2538              	.LVL199:
 2539 008e 20B9     		cbnz	r0, .L190
 399:Src/main.c    **** 
 2540              		.loc 1 399 0
 2541 0090 15B0     		add	sp, sp, #84
 2542              	.LCFI52:
 2543              		.cfi_remember_state
 2544              		.cfi_def_cfa_offset 4
 2545              		@ sp needed
 2546 0092 5DF804FB 		ldr	pc, [sp], #4
 2547              	.L189:
 2548              	.LCFI53:
 2549              		.cfi_restore_state
 385:Src/main.c    ****     }
 2550              		.loc 1 385 0
 2551 0096 FFF7FEFF 		bl	Error_Handler
 2552              	.LVL200:
 2553              	.L190:
 397:Src/main.c    ****     }
 2554              		.loc 1 397 0
 2555 009a FFF7FEFF 		bl	Error_Handler
 2556              	.LVL201:
 2557              	.L192:
ARM GAS  /tmp/ccP3MicS.s 			page 75


 2558 009e 00BF     		.align	2
 2559              	.L191:
 2560 00a0 00380240 		.word	1073887232
 2561 00a4 00700040 		.word	1073770496
 2562              		.cfi_endproc
 2563              	.LFE133:
 2565              		.section	.text.main,"ax",%progbits
 2566              		.align	1
 2567              		.global	main
 2568              		.syntax unified
 2569              		.thumb
 2570              		.thumb_func
 2571              		.fpu fpv4-sp-d16
 2573              	main:
 2574              	.LFB132:
 150:Src/main.c    ****     /* USER CODE BEGIN 1 */
 2575              		.loc 1 150 0
 2576              		.cfi_startproc
 2577              		@ Volatile: function does not return.
 2578              		@ args = 0, pretend = 0, frame = 0
 2579              		@ frame_needed = 0, uses_anonymous_args = 0
 2580 0000 2DE98048 		push	{r7, fp, lr}
 2581              	.LCFI54:
 2582              		.cfi_def_cfa_offset 12
 2583              		.cfi_offset 7, -12
 2584              		.cfi_offset 11, -8
 2585              		.cfi_offset 14, -4
 2586 0004 85B0     		sub	sp, sp, #20
 2587              	.LCFI55:
 2588              		.cfi_def_cfa_offset 32
 157:Src/main.c    **** 
 2589              		.loc 1 157 0
 2590 0006 FFF7FEFF 		bl	HAL_Init
 2591              	.LVL202:
 164:Src/main.c    **** 
 2592              		.loc 1 164 0
 2593 000a FFF7FEFF 		bl	SystemClock_Config
 2594              	.LVL203:
 171:Src/main.c    ****     MX_DMA_Init();
 2595              		.loc 1 171 0
 2596 000e FFF7FEFF 		bl	MX_GPIO_Init
 2597              	.LVL204:
 172:Src/main.c    ****     MX_USART2_UART_Init();
 2598              		.loc 1 172 0
 2599 0012 FFF7FEFF 		bl	MX_DMA_Init
 2600              	.LVL205:
 173:Src/main.c    ****     MX_CAN1_Init();
 2601              		.loc 1 173 0
 2602 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 2603              	.LVL206:
 174:Src/main.c    ****     MX_SPI1_Init();
 2604              		.loc 1 174 0
 2605 001a FFF7FEFF 		bl	MX_CAN1_Init
 2606              	.LVL207:
 175:Src/main.c    ****     MX_ADC1_Init();
 2607              		.loc 1 175 0
 2608 001e FFF7FEFF 		bl	MX_SPI1_Init
ARM GAS  /tmp/ccP3MicS.s 			page 76


 2609              	.LVL208:
 176:Src/main.c    ****     MX_USART1_UART_Init();
 2610              		.loc 1 176 0
 2611 0022 FFF7FEFF 		bl	MX_ADC1_Init
 2612              	.LVL209:
 177:Src/main.c    ****     MX_TIM2_Init();
 2613              		.loc 1 177 0
 2614 0026 FFF7FEFF 		bl	MX_USART1_UART_Init
 2615              	.LVL210:
 178:Src/main.c    ****     MX_TIM3_Init();
 2616              		.loc 1 178 0
 2617 002a FFF7FEFF 		bl	MX_TIM2_Init
 2618              	.LVL211:
 179:Src/main.c    ****     MX_TIM4_Init();
 2619              		.loc 1 179 0
 2620 002e FFF7FEFF 		bl	MX_TIM3_Init
 2621              	.LVL212:
 180:Src/main.c    ****     MX_TIM5_Init();
 2622              		.loc 1 180 0
 2623 0032 FFF7FEFF 		bl	MX_TIM4_Init
 2624              	.LVL213:
 181:Src/main.c    ****     MX_TIM6_Init();
 2625              		.loc 1 181 0
 2626 0036 FFF7FEFF 		bl	MX_TIM5_Init
 2627              	.LVL214:
 182:Src/main.c    ****     MX_TIM7_Init();
 2628              		.loc 1 182 0
 2629 003a FFF7FEFF 		bl	MX_TIM6_Init
 2630              	.LVL215:
 183:Src/main.c    ****     MX_TIM10_Init();
 2631              		.loc 1 183 0
 2632 003e FFF7FEFF 		bl	MX_TIM7_Init
 2633              	.LVL216:
 184:Src/main.c    ****     MX_TIM11_Init();
 2634              		.loc 1 184 0
 2635 0042 FFF7FEFF 		bl	MX_TIM10_Init
 2636              	.LVL217:
 185:Src/main.c    **** 
 2637              		.loc 1 185 0
 2638 0046 FFF7FEFF 		bl	MX_TIM11_Init
 2639              	.LVL218:
 188:Src/main.c    ****     /* USER CODE BEGIN 2 */
 2640              		.loc 1 188 0
 2641 004a FFF7FEFF 		bl	MX_NVIC_Init
 2642              	.LVL219:
 191:Src/main.c    ****     sFilter.FilterIdLow = 0;
 2643              		.loc 1 191 0
 2644 004e 9049     		ldr	r1, .L198
 2645 0050 0025     		movs	r5, #0
 2646 0052 8D61     		str	r5, [r1, #24]
 192:Src/main.c    ****     sFilter.FilterIdHigh = 0;
 2647              		.loc 1 192 0
 2648 0054 4D60     		str	r5, [r1, #4]
 193:Src/main.c    ****     sFilter.FilterMaskIdHigh = 0;
 2649              		.loc 1 193 0
 2650 0056 0D60     		str	r5, [r1]
 194:Src/main.c    ****     sFilter.FilterMaskIdLow = 0;
ARM GAS  /tmp/ccP3MicS.s 			page 77


 2651              		.loc 1 194 0
 2652 0058 8D60     		str	r5, [r1, #8]
 195:Src/main.c    ****     sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 2653              		.loc 1 195 0
 2654 005a CD60     		str	r5, [r1, #12]
 196:Src/main.c    ****     sFilter.FilterBank = 0;
 2655              		.loc 1 196 0
 2656 005c 0D61     		str	r5, [r1, #16]
 197:Src/main.c    ****     sFilter.FilterScale = CAN_FILTERSCALE_16BIT;
 2657              		.loc 1 197 0
 2658 005e 4D61     		str	r5, [r1, #20]
 198:Src/main.c    ****     sFilter.FilterActivation = ENABLE;
 2659              		.loc 1 198 0
 2660 0060 CD61     		str	r5, [r1, #28]
 199:Src/main.c    ****     HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 2661              		.loc 1 199 0
 2662 0062 0127     		movs	r7, #1
 2663 0064 0F62     		str	r7, [r1, #32]
 200:Src/main.c    **** 
 2664              		.loc 1 200 0
 2665 0066 8B4C     		ldr	r4, .L198+4
 2666 0068 2046     		mov	r0, r4
 2667 006a FFF7FEFF 		bl	HAL_CAN_ConfigFilter
 2668              	.LVL220:
 202:Src/main.c    **** 
 2669              		.loc 1 202 0
 2670 006e 2046     		mov	r0, r4
 2671 0070 FFF7FEFF 		bl	HAL_CAN_Start
 2672              	.LVL221:
 204:Src/main.c    ****     HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 2673              		.loc 1 204 0
 2674 0074 1421     		movs	r1, #20
 2675 0076 2046     		mov	r0, r4
 2676 0078 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2677              	.LVL222:
 205:Src/main.c    ****     /* USER CODE END 2 */
 2678              		.loc 1 205 0
 2679 007c 1521     		movs	r1, #21
 2680 007e 2046     		mov	r0, r4
 2681 0080 FFF7FEFF 		bl	HAL_CAN_ActivateNotification
 2682              	.LVL223:
 210:Src/main.c    ****     // can initialization //
 2683              		.loc 1 210 0
 2684 0084 844E     		ldr	r6, .L198+8
 2685 0086 B461     		str	r4, [r6, #24]
 214:Src/main.c    ****     accel.GPIO_Pin_InUse = GPIO_PIN_9;
 2686              		.loc 1 214 0
 2687 0088 DFF88082 		ldr	r8, .L198+124
 2688 008c DFF880A2 		ldr	r10, .L198+128
 2689 0090 C8F820A2 		str	r10, [r8, #544]
 215:Src/main.c    ****     accel.hspi = &hspi1;
 2690              		.loc 1 215 0
 2691 0094 4FF40074 		mov	r4, #512
 2692 0098 A8F82442 		strh	r4, [r8, #548]	@ movhi
 216:Src/main.c    **** 
 2693              		.loc 1 216 0
 2694 009c 7F4B     		ldr	r3, .L198+12
ARM GAS  /tmp/ccP3MicS.s 			page 78


 2695 009e C8F83032 		str	r3, [r8, #560]
 218:Src/main.c    ****     gyro.GPIO_Pin_InUse = GPIO_PIN_8;
 2696              		.loc 1 218 0
 2697 00a2 DFF87092 		ldr	r9, .L198+132
 2698 00a6 7E48     		ldr	r0, .L198+16
 2699 00a8 C9F82002 		str	r0, [r9, #544]
 219:Src/main.c    ****     gyro.hspi = &hspi1;
 2700              		.loc 1 219 0
 2701 00ac 4FF4807B 		mov	fp, #256
 2702 00b0 A9F824B2 		strh	fp, [r9, #548]	@ movhi
 220:Src/main.c    ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 2703              		.loc 1 220 0
 2704 00b4 C9F83032 		str	r3, [r9, #560]
 221:Src/main.c    ****     HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 2705              		.loc 1 221 0
 2706 00b8 3A46     		mov	r2, r7
 2707 00ba 5946     		mov	r1, fp
 2708 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 2709              	.LVL224:
 222:Src/main.c    **** 
 2710              		.loc 1 222 0
 2711 00c0 3A46     		mov	r2, r7
 2712 00c2 2146     		mov	r1, r4
 2713 00c4 5046     		mov	r0, r10
 2714 00c6 FFF7FEFF 		bl	HAL_GPIO_WritePin
 2715              	.LVL225:
 224:Src/main.c    ****     steer_enc_prescaler /= 3;
 2716              		.loc 1 224 0
 2717 00ca 764B     		ldr	r3, .L198+20
 2718 00cc DA68     		ldr	r2, [r3, #12]
 225:Src/main.c    ****     steer_enc_prescaler /= 20;
 2719              		.loc 1 225 0
 2720 00ce 764B     		ldr	r3, .L198+24
 2721 00d0 83FB0213 		smull	r1, r3, r3, r2
 2722 00d4 A3EBE273 		sub	r3, r3, r2, asr #31
 226:Src/main.c    ****     steer_enc_prescaler += 40;
 2723              		.loc 1 226 0
 2724 00d8 744A     		ldr	r2, .L198+28
 2725 00da 82FB0312 		smull	r1, r2, r2, r3
 2726 00de DB17     		asrs	r3, r3, #31
 2727 00e0 C3EBE203 		rsb	r3, r3, r2, asr #3
 227:Src/main.c    ****     enc.steer_enc_prescaler = steer_enc_prescaler;
 2728              		.loc 1 227 0
 2729 00e4 2833     		adds	r3, r3, #40
 2730 00e6 724A     		ldr	r2, .L198+32
 2731 00e8 1360     		str	r3, [r2]
 228:Src/main.c    **** 
 2732              		.loc 1 228 0
 2733 00ea 724C     		ldr	r4, .L198+36
 2734 00ec A364     		str	r3, [r4, #72]
 230:Src/main.c    ****     pot_2.min = 2350;
 2735              		.loc 1 230 0
 2736 00ee 724B     		ldr	r3, .L198+40
 2737 00f0 40F6DC72 		movw	r2, #4060
 2738 00f4 5A60     		str	r2, [r3, #4]
 231:Src/main.c    ****     pot_2.range = abs(pot_2.max - pot_2.min);
 2739              		.loc 1 231 0
ARM GAS  /tmp/ccP3MicS.s 			page 79


 2740 00f6 40F62E12 		movw	r2, #2350
 2741 00fa 9A60     		str	r2, [r3, #8]
 232:Src/main.c    **** 
 2742              		.loc 1 232 0
 2743 00fc 40F2AE62 		movw	r2, #1710
 2744 0100 DA60     		str	r2, [r3, #12]
 234:Src/main.c    ****     enc.ClockPinNumber = GPIO_PIN_6;
 2745              		.loc 1 234 0
 2746 0102 C4F8D8A3 		str	r10, [r4, #984]
 235:Src/main.c    ****     enc.DataPinName = GPIOC;
 2747              		.loc 1 235 0
 2748 0106 4021     		movs	r1, #64
 2749 0108 A4F8E013 		strh	r1, [r4, #992]	@ movhi
 236:Src/main.c    ****     enc.DataPinNumber = GPIO_PIN_8;
 2750              		.loc 1 236 0
 2751 010c C4F8DCA3 		str	r10, [r4, #988]
 237:Src/main.c    **** 
 2752              		.loc 1 237 0
 2753 0110 A4F8E2B3 		strh	fp, [r4, #994]	@ movhi
 239:Src/main.c    ****     enc.interrupt_flag = 0;
 2754              		.loc 1 239 0
 2755 0114 E764     		str	r7, [r4, #76]
 240:Src/main.c    ****     enc.TimerInstance = &a_TimerInstance3;
 2756              		.loc 1 240 0
 2757 0116 A560     		str	r5, [r4, #8]
 241:Src/main.c    ****     enc.average_speed = 0;
 2758              		.loc 1 241 0
 2759 0118 684B     		ldr	r3, .L198+44
 2760 011a C4F8D033 		str	r3, [r4, #976]
 242:Src/main.c    ****     enc.wheel_diameter = 0.395;
 2761              		.loc 1 242 0
 2762 011e 0022     		movs	r2, #0
 2763 0120 0023     		movs	r3, #0
 2764 0122 C4E9F023 		strd	r2, [r4, #960]
 243:Src/main.c    ****     enc.data_size = 14;
 2765              		.loc 1 243 0
 2766 0126 664B     		ldr	r3, .L198+48
 2767 0128 E365     		str	r3, [r4, #92]	@ float
 244:Src/main.c    ****     enc.clock_period = 2;
 2768              		.loc 1 244 0
 2769 012a 0E23     		movs	r3, #14
 2770 012c 2360     		str	r3, [r4]
 245:Src/main.c    ****     enc.wheel_rotation = 0;
 2771              		.loc 1 245 0
 2772 012e 0223     		movs	r3, #2
 2773 0130 E360     		str	r3, [r4, #12]
 246:Src/main.c    ****     enc.Km = 0;
 2774              		.loc 1 246 0
 2775 0132 2565     		str	r5, [r4, #80]
 247:Src/main.c    **** 
 2776              		.loc 1 247 0
 2777 0134 0023     		movs	r3, #0
 2778 0136 6365     		str	r3, [r4, #84]	@ float
 249:Src/main.c    ****     enc.frequency = 0;
 2779              		.loc 1 249 0
 2780 0138 624A     		ldr	r2, .L198+52
 2781 013a 2266     		str	r2, [r4, #96]	@ float
ARM GAS  /tmp/ccP3MicS.s 			page 80


 250:Src/main.c    ****     enc.frequency_timer = &htim7;
 2782              		.loc 1 250 0
 2783 013c 6366     		str	r3, [r4, #100]	@ float
 251:Src/main.c    ****     enc.frequency_timer_Hz = 72000000;
 2784              		.loc 1 251 0
 2785 013e 624B     		ldr	r3, .L198+56
 2786 0140 C4F8D433 		str	r3, [r4, #980]
 252:Src/main.c    ****     HAL_GPIO_WritePin(enc.ClockPinName, enc.ClockPinNumber, GPIO_PIN_SET);
 2787              		.loc 1 252 0
 2788 0144 614B     		ldr	r3, .L198+60
 2789 0146 A366     		str	r3, [r4, #104]
 253:Src/main.c    **** 
 2790              		.loc 1 253 0
 2791 0148 3A46     		mov	r2, r7
 2792 014a 5046     		mov	r0, r10
 2793 014c FFF7FEFF 		bl	HAL_GPIO_WritePin
 2794              	.LVL226:
 255:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 2795              		.loc 1 255 0
 2796 0150 DFF8C4A1 		ldr	r10, .L198+136
 2797 0154 5046     		mov	r0, r10
 2798 0156 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2799              	.LVL227:
 256:Src/main.c    ****     //HAL_TIM_Base_Start(&htim4);
 2800              		.loc 1 256 0
 2801 015a 5248     		ldr	r0, .L198+20
 2802 015c FFF7FEFF 		bl	HAL_TIM_Base_Start
 2803              	.LVL228:
 260:Src/main.c    ****     HAL_TIM_Base_Start(&htim10);
 2804              		.loc 1 260 0
 2805 0160 5948     		ldr	r0, .L198+56
 2806 0162 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2807              	.LVL229:
 261:Src/main.c    **** 
 2808              		.loc 1 261 0
 2809 0166 5A48     		ldr	r0, .L198+64
 2810 0168 FFF7FEFF 		bl	HAL_TIM_Base_Start
 2811              	.LVL230:
 263:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim3);
 2812              		.loc 1 263 0
 2813 016c 5046     		mov	r0, r10
 2814 016e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2815              	.LVL231:
 264:Src/main.c    ****     //HAL_TIM_Base_Start_IT(&htim4);
 2816              		.loc 1 264 0
 2817 0172 4C48     		ldr	r0, .L198+20
 2818 0174 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2819              	.LVL232:
 268:Src/main.c    ****     HAL_TIM_Base_Start_IT(&htim10);
 2820              		.loc 1 268 0
 2821 0178 5348     		ldr	r0, .L198+56
 2822 017a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 2823              	.LVL233:
 269:Src/main.c    **** 
 2824              		.loc 1 269 0
 2825 017e 5448     		ldr	r0, .L198+64
 2826 0180 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
ARM GAS  /tmp/ccP3MicS.s 			page 81


 2827              	.LVL234:
 271:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 2828              		.loc 1 271 0
 2829 0184 534B     		ldr	r3, .L198+68
 2830 0186 1B68     		ldr	r3, [r3]
 2831 0188 5D62     		str	r5, [r3, #36]
 272:Src/main.c    ****     //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
 2832              		.loc 1 272 0
 2833 018a 4C4B     		ldr	r3, .L198+44
 2834 018c 1B68     		ldr	r3, [r3]
 2835 018e 5D62     		str	r5, [r3, #36]
 276:Src/main.c    ****     __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 2836              		.loc 1 276 0
 2837 0190 514B     		ldr	r3, .L198+72
 2838 0192 1B68     		ldr	r3, [r3]
 2839 0194 5D62     		str	r5, [r3, #36]
 277:Src/main.c    **** 
 2840              		.loc 1 277 0
 2841 0196 514B     		ldr	r3, .L198+76
 2842 0198 1B68     		ldr	r3, [r3]
 2843 019a 5D62     		str	r5, [r3, #36]
 280:Src/main.c    **** 
 2844              		.loc 1 280 0
 2845 019c 2046     		mov	r0, r4
 2846 019e FFF7FEFF 		bl	enc_calculate_optimal_frequency
 2847              	.LVL235:
 282:Src/main.c    ****     gyro.scale = 500;
 2848              		.loc 1 282 0
 2849 01a2 0423     		movs	r3, #4
 2850 01a4 C8F81832 		str	r3, [r8, #536]
 283:Src/main.c    **** 
 2851              		.loc 1 283 0
 2852 01a8 4FF4FA73 		mov	r3, #500
 2853 01ac C9F81832 		str	r3, [r9, #536]
 286:Src/main.c    ****     LSMD9S0_check(&accel);
 2854              		.loc 1 286 0
 2855 01b0 4946     		mov	r1, r9
 2856 01b2 4046     		mov	r0, r8
 2857 01b4 FFF7FEFF 		bl	LSMD9S0_accel_gyro_init
 2858              	.LVL236:
 287:Src/main.c    **** 
 2859              		.loc 1 287 0
 2860 01b8 4046     		mov	r0, r8
 2861 01ba FFF7FEFF 		bl	LSMD9S0_check
 2862              	.LVL237:
 289:Src/main.c    ****     LSM9DS0_calibration(&gyro);
 2863              		.loc 1 289 0
 2864 01be 4046     		mov	r0, r8
 2865 01c0 FFF7FEFF 		bl	LSM9DS0_calibration
 2866              	.LVL238:
 290:Src/main.c    **** 
 2867              		.loc 1 290 0
 2868 01c4 4846     		mov	r0, r9
 2869 01c6 FFF7FEFF 		bl	LSM9DS0_calibration
 2870              	.LVL239:
 292:Src/main.c    **** 
 2871              		.loc 1 292 0
ARM GAS  /tmp/ccP3MicS.s 			page 82


 2872 01ca 454B     		ldr	r3, .L198+80
 2873 01cc 1D60     		str	r5, [r3]
 294:Src/main.c    **** 
 2874              		.loc 1 294 0
 2875 01ce 3846     		mov	r0, r7
 2876 01d0 FFF7FEFF 		bl	HAL_Delay
 2877              	.LVL240:
 296:Src/main.c    ****     can.dataTx[1] = 0xA8;
 2878              		.loc 1 296 0
 2879 01d4 4FF03D09 		mov	r9, #61
 2880 01d8 86F80890 		strb	r9, [r6, #8]
 297:Src/main.c    ****     can.dataTx[2] = 0x64;
 2881              		.loc 1 297 0
 2882 01dc 4FF0A808 		mov	r8, #168
 2883 01e0 86F80980 		strb	r8, [r6, #9]
 298:Src/main.c    ****     can.id = 0x201;
 2884              		.loc 1 298 0
 2885 01e4 6425     		movs	r5, #100
 2886 01e6 B572     		strb	r5, [r6, #10]
 299:Src/main.c    ****     can.size = 3;
 2887              		.loc 1 299 0
 2888 01e8 40F20123 		movw	r3, #513
 2889 01ec 3360     		str	r3, [r6]
 300:Src/main.c    ****     CAN_Send(&can);
 2890              		.loc 1 300 0
 2891 01ee 0324     		movs	r4, #3
 2892 01f0 7460     		str	r4, [r6, #4]
 301:Src/main.c    **** 
 2893              		.loc 1 301 0
 2894 01f2 3046     		mov	r0, r6
 2895 01f4 FFF7FEFF 		bl	CAN_Send
 2896              	.LVL241:
 303:Src/main.c    ****     can.dataTx[1] = 0xA8;
 2897              		.loc 1 303 0
 2898 01f8 86F80890 		strb	r9, [r6, #8]
 304:Src/main.c    ****     can.dataTx[2] = 0x64;
 2899              		.loc 1 304 0
 2900 01fc 86F80980 		strb	r8, [r6, #9]
 305:Src/main.c    ****     can.id = 0x202;
 2901              		.loc 1 305 0
 2902 0200 B572     		strb	r5, [r6, #10]
 306:Src/main.c    ****     can.size = 3;
 2903              		.loc 1 306 0
 2904 0202 40F20223 		movw	r3, #514
 2905 0206 3360     		str	r3, [r6]
 307:Src/main.c    ****     CAN_Send(&can);
 2906              		.loc 1 307 0
 2907 0208 7460     		str	r4, [r6, #4]
 308:Src/main.c    **** 
 2908              		.loc 1 308 0
 2909 020a 3046     		mov	r0, r6
 2910 020c FFF7FEFF 		bl	CAN_Send
 2911              	.LVL242:
 310:Src/main.c    **** 
 2912              		.loc 1 310 0
 2913 0210 3846     		mov	r0, r7
 2914 0212 FFF7FEFF 		bl	HAL_Delay
ARM GAS  /tmp/ccP3MicS.s 			page 83


 2915              	.LVL243:
 312:Src/main.c    ****     {
 2916              		.loc 1 312 0
 2917 0216 3349     		ldr	r1, .L198+84
 2918 0218 3348     		ldr	r0, .L198+88
 2919 021a FFF7FEFF 		bl	gps_init
 2920              	.LVL244:
 2921 021e 05E0     		b	.L194
 2922              	.L195:
 352:Src/main.c    ****             command_flag = 0;
 2923              		.loc 1 352 0
 2924 0220 0120     		movs	r0, #1
 2925 0222 FFF7FEFF 		bl	HAL_Delay
 2926              	.LVL245:
 353:Src/main.c    ****         }
 2927              		.loc 1 353 0
 2928 0226 0022     		movs	r2, #0
 2929 0228 304B     		ldr	r3, .L198+92
 2930 022a 1A60     		str	r2, [r3]
 2931              	.L194:
 324:Src/main.c    ****         
 2932              		.loc 1 324 0
 2933 022c 0322     		movs	r2, #3
 2934 022e 3049     		ldr	r1, .L198+96
 2935 0230 3048     		ldr	r0, .L198+100
 2936 0232 FFF7FEFF 		bl	HAL_ADC_Start_DMA
 2937              	.LVL246:
 336:Src/main.c    ****         {
 2938              		.loc 1 336 0
 2939 0236 2D4B     		ldr	r3, .L198+92
 2940 0238 1B68     		ldr	r3, [r3]
 2941 023a 002B     		cmp	r3, #0
 2942 023c F0D1     		bne	.L195
 338:Src/main.c    ****             {
 2943              		.loc 1 338 0
 2944 023e FFF7FEFF 		bl	HAL_GetTick
 2945              	.LVL247:
 2946 0242 2D4B     		ldr	r3, .L198+104
 2947 0244 1B68     		ldr	r3, [r3]
 2948 0246 9842     		cmp	r0, r3
 2949 0248 F0D0     		beq	.L194
 343:Src/main.c    **** 
 2950              		.loc 1 343 0
 2951 024a 2C4B     		ldr	r3, .L198+108
 2952 024c 5A68     		ldr	r2, [r3, #4]
 2953 024e 2C4C     		ldr	r4, .L198+112
 2954 0250 53F8140C 		ldr	r0, [r3, #-20]
 2955 0254 0390     		str	r0, [sp, #12]
 2956 0256 986B     		ldr	r0, [r3, #56]
 2957 0258 0290     		str	r0, [sp, #8]
 2958 025a 03F12000 		add	r0, r3, #32
 2959 025e 0190     		str	r0, [sp, #4]
 2960 0260 596A     		ldr	r1, [r3, #36]
 2961 0262 0091     		str	r1, [sp]
 2962 0264 2749     		ldr	r1, .L198+116
 2963 0266 2046     		mov	r0, r4
 2964 0268 FFF7FEFF 		bl	sprintf
ARM GAS  /tmp/ccP3MicS.s 			page 84


 2965              	.LVL248:
 345:Src/main.c    ****                 send_CAN_data(HAL_GetTick());
 2966              		.loc 1 345 0
 2967 026c 2046     		mov	r0, r4
 2968 026e FFF7FEFF 		bl	strlen
 2969              	.LVL249:
 2970 0272 0A23     		movs	r3, #10
 2971 0274 82B2     		uxth	r2, r0
 2972 0276 2146     		mov	r1, r4
 2973 0278 2348     		ldr	r0, .L198+120
 2974 027a FFF7FEFF 		bl	HAL_UART_Transmit
 2975              	.LVL250:
 346:Src/main.c    ****                 previous_millis = HAL_GetTick();
 2976              		.loc 1 346 0
 2977 027e FFF7FEFF 		bl	HAL_GetTick
 2978              	.LVL251:
 2979 0282 FFF7FEFF 		bl	send_CAN_data
 2980              	.LVL252:
 347:Src/main.c    ****             }
 2981              		.loc 1 347 0
 2982 0286 FFF7FEFF 		bl	HAL_GetTick
 2983              	.LVL253:
 2984 028a 1B4B     		ldr	r3, .L198+104
 2985 028c 1860     		str	r0, [r3]
 2986 028e CDE7     		b	.L194
 2987              	.L199:
 2988              		.align	2
 2989              	.L198:
 2990 0290 00000000 		.word	sFilter
 2991 0294 00000000 		.word	hcan1
 2992 0298 00000000 		.word	can
 2993 029c 00000000 		.word	hspi1
 2994 02a0 00000240 		.word	1073872896
 2995 02a4 00000000 		.word	htim3
 2996 02a8 56555555 		.word	1431655766
 2997 02ac 67666666 		.word	1717986919
 2998 02b0 00000000 		.word	steer_enc_prescaler
 2999 02b4 00000000 		.word	enc
 3000 02b8 00000000 		.word	pot_2
 3001 02bc 00000000 		.word	.LANCHOR4
 3002 02c0 713DCA3E 		.word	1053441393
 3003 02c4 0000A040 		.word	1084227584
 3004 02c8 00000000 		.word	htim7
 3005 02cc 00A24A04 		.word	72000000
 3006 02d0 00000000 		.word	htim10
 3007 02d4 00000000 		.word	.LANCHOR5
 3008 02d8 00000000 		.word	.LANCHOR6
 3009 02dc 00000000 		.word	.LANCHOR7
 3010 02e0 00000000 		.word	encoder_counter
 3011 02e4 00000000 		.word	gps_main
 3012 02e8 00000000 		.word	huart1
 3013 02ec 00000000 		.word	.LANCHOR0
 3014 02f0 00000000 		.word	ADC_buffer
 3015 02f4 00000000 		.word	hadc1
 3016 02f8 00000000 		.word	previous_millis
 3017 02fc 1C000000 		.word	gps_main+28
 3018 0300 00000000 		.word	txt
ARM GAS  /tmp/ccP3MicS.s 			page 85


 3019 0304 00000000 		.word	.LC2
 3020 0308 00000000 		.word	huart2
 3021 030c 00000000 		.word	accel
 3022 0310 00080240 		.word	1073874944
 3023 0314 00000000 		.word	gyro
 3024 0318 00000000 		.word	htim2
 3025              		.cfi_endproc
 3026              	.LFE132:
 3028              		.comm	previous_millis,4,4
 3029              		.comm	encoder_counter,4,4
 3030              		.comm	steer_enc_prescaler,4,4
 3031              		.comm	gps_main,100,4
 3032              		.global	a_TimerInstance10
 3033              		.global	a_TimerInstance7
 3034              		.global	a_TimerInstance6
 3035              		.global	a_TimerInstance5
 3036              		.global	a_TimerInstance4
 3037              		.global	a_TimerInstance3
 3038              		.global	a_TimerInstance2
 3039              		.global	inverter_rpm
 3040              		.global	calibration_flag
 3041              		.global	command_flag
 3042              		.global	timer_factor
 3043              		.global	multiplier
 3044              		.global	flag
 3045              		.comm	txt,100,4
 3046              		.comm	val,12,4
 3047              		.comm	ADC_buffer,16,4
 3048              		.comm	val0rang,4,4
 3049              		.comm	valMin0,4,4
 3050              		.comm	valMax0,4,4
 3051              		.comm	sFilter,40,4
 3052              		.comm	huart2,64,4
 3053              		.comm	huart1,64,4
 3054              		.comm	htim11,64,4
 3055              		.comm	htim10,64,4
 3056              		.comm	htim7,64,4
 3057              		.comm	htim6,64,4
 3058              		.comm	htim5,64,4
 3059              		.comm	htim4,64,4
 3060              		.comm	htim3,64,4
 3061              		.comm	htim2,64,4
 3062              		.comm	hspi1,88,4
 3063              		.comm	hcan1,40,4
 3064              		.comm	hdma_adc1,96,4
 3065              		.comm	hadc1,72,4
 3066              		.section	.bss.calibration_flag,"aw",%nobits
 3067              		.align	2
 3068              		.set	.LANCHOR1,. + 0
 3071              	calibration_flag:
 3072 0000 00000000 		.space	4
 3073              		.section	.bss.command_flag,"aw",%nobits
 3074              		.align	2
 3075              		.set	.LANCHOR0,. + 0
 3078              	command_flag:
 3079 0000 00000000 		.space	4
 3080              		.section	.bss.flag,"aw",%nobits
ARM GAS  /tmp/ccP3MicS.s 			page 86


 3081              		.align	2
 3082              		.set	.LANCHOR3,. + 0
 3085              	flag:
 3086 0000 00000000 		.space	4
 3087              		.section	.bss.inverter_rpm,"aw",%nobits
 3088              		.align	2
 3091              	inverter_rpm:
 3092 0000 00000000 		.space	4
 3093              		.section	.data.a_TimerInstance10,"aw",%progbits
 3094              		.align	2
 3095              		.set	.LANCHOR7,. + 0
 3098              	a_TimerInstance10:
 3099 0000 00440140 		.word	1073824768
 3100 0004 00000000 		.space	60
 3100      00000000 
 3100      00000000 
 3100      00000000 
 3100      00000000 
 3101              		.section	.data.a_TimerInstance2,"aw",%progbits
 3102              		.align	2
 3103              		.set	.LANCHOR5,. + 0
 3106              	a_TimerInstance2:
 3107 0000 00000040 		.word	1073741824
 3108 0004 00000000 		.space	60
 3108      00000000 
 3108      00000000 
 3108      00000000 
 3108      00000000 
 3109              		.section	.data.a_TimerInstance3,"aw",%progbits
 3110              		.align	2
 3111              		.set	.LANCHOR4,. + 0
 3114              	a_TimerInstance3:
 3115 0000 00040040 		.word	1073742848
 3116 0004 00000000 		.space	60
 3116      00000000 
 3116      00000000 
 3116      00000000 
 3116      00000000 
 3117              		.section	.data.a_TimerInstance4,"aw",%progbits
 3118              		.align	2
 3121              	a_TimerInstance4:
 3122 0000 00080040 		.word	1073743872
 3123 0004 00000000 		.space	60
 3123      00000000 
 3123      00000000 
 3123      00000000 
 3123      00000000 
 3124              		.section	.data.a_TimerInstance5,"aw",%progbits
 3125              		.align	2
 3128              	a_TimerInstance5:
 3129 0000 000C0040 		.word	1073744896
 3130 0004 00000000 		.space	60
 3130      00000000 
 3130      00000000 
 3130      00000000 
 3130      00000000 
 3131              		.section	.data.a_TimerInstance6,"aw",%progbits
ARM GAS  /tmp/ccP3MicS.s 			page 87


 3132              		.align	2
 3135              	a_TimerInstance6:
 3136 0000 00100040 		.word	1073745920
 3137 0004 00000000 		.space	60
 3137      00000000 
 3137      00000000 
 3137      00000000 
 3137      00000000 
 3138              		.section	.data.a_TimerInstance7,"aw",%progbits
 3139              		.align	2
 3140              		.set	.LANCHOR6,. + 0
 3143              	a_TimerInstance7:
 3144 0000 00140040 		.word	1073746944
 3145 0004 00000000 		.space	60
 3145      00000000 
 3145      00000000 
 3145      00000000 
 3145      00000000 
 3146              		.section	.data.multiplier,"aw",%progbits
 3147              		.align	2
 3148              		.set	.LANCHOR2,. + 0
 3151              	multiplier:
 3152 0000 01000000 		.word	1
 3153              		.section	.data.timer_factor,"aw",%progbits
 3154              		.align	2
 3157              	timer_factor:
 3158 0000 02000000 		.word	2
 3159              		.section	.rodata.Error_Handler.str1.4,"aMS",%progbits,1
 3160              		.align	2
 3161              	.LC0:
 3162 0000 4572726F 		.ascii	"Error on file: \000"
 3162      72206F6E 
 3162      2066696C 
 3162      653A2000 
 3163              	.LC1:
 3164 0010 0D0A00   		.ascii	"\015\012\000"
 3165              		.section	.rodata.main.str1.4,"aMS",%progbits,1
 3166              		.align	2
 3167              	.LC2:
 3168 0000 6C617469 		.ascii	"latitude: %d lat orientation: %c longitude: %d lon "
 3168      74756465 
 3168      3A202564 
 3168      206C6174 
 3168      206F7269 
 3169 0033 6F726965 		.ascii	"orientation: %c altitude: %d speed: %d\015\012\000"
 3169      6E746174 
 3169      696F6E3A 
 3169      20256320 
 3169      616C7469 
 3170              		.text
 3171              	.Letext0:
 3172              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3173              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3174              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3175              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3176              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 3177              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
ARM GAS  /tmp/ccP3MicS.s 			page 88


 3178              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3179              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 3180              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 3181              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3182              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3183              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 3184              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 3185              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_spi.h"
 3186              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 3187              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3188              		.file 18 "/usr/include/newlib/sys/lock.h"
 3189              		.file 19 "/usr/include/newlib/sys/_types.h"
 3190              		.file 20 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3191              		.file 21 "/usr/include/newlib/sys/reent.h"
 3192              		.file 22 "/usr/include/newlib/stdlib.h"
 3193              		.file 23 "/usr/include/newlib/math.h"
 3194              		.file 24 "Inc/Eagle_TRT.h"
 3195              		.file 25 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 3196              		.file 26 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 3197              		.file 27 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3198              		.file 28 "/usr/include/newlib/stdio.h"
 3199              		.file 29 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccP3MicS.s 			page 89


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccP3MicS.s:18     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccP3MicS.s:190    .text.MX_GPIO_Init:00000000000000ec $d
     /tmp/ccP3MicS.s:198    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:204    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccP3MicS.s:248    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccP3MicS.s:253    .text.MX_NVIC_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:259    .text.MX_NVIC_Init:0000000000000000 MX_NVIC_Init
     /tmp/ccP3MicS.s:385    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccP3MicS.s:392    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccP3MicS.s:417    .text.HAL_ADC_ConvCpltCallback:0000000000000018 $d
                            *COM*:0000000000000010 ADC_buffer
     /tmp/ccP3MicS.s:425    .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccP3MicS.s:432    .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccP3MicS.s:462    .text.HAL_UART_RxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart1
                            *COM*:0000000000000064 gps_main
     /tmp/ccP3MicS.s:468    .text.HAL_UART_TxCpltCallback:0000000000000000 $t
     /tmp/ccP3MicS.s:475    .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccP3MicS.s:506    .text.HAL_UART_TxCpltCallback:0000000000000014 $d
                            *COM*:0000000000000040 huart2
     /tmp/ccP3MicS.s:511    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 $t
     /tmp/ccP3MicS.s:518    .text.HAL_CAN_RxFifo0FullCallback:0000000000000000 HAL_CAN_RxFifo0FullCallback
     /tmp/ccP3MicS.s:786    .text.HAL_CAN_RxFifo0FullCallback:0000000000000130 $d
     /tmp/ccP3MicS.s:795    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccP3MicS.s:802    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccP3MicS.s:898    .text.HAL_TIM_PeriodElapsedCallback:000000000000006c $d
                            *COM*:0000000000000040 htim10
                            *COM*:0000000000000040 htim7
     /tmp/ccP3MicS.s:915    .text.send_CAN_data:0000000000000000 $t
     /tmp/ccP3MicS.s:922    .text.send_CAN_data:0000000000000000 send_CAN_data
     /tmp/ccP3MicS.s:1359   .text.send_CAN_data:0000000000000278 $d
     /tmp/ccP3MicS.s:1375   .text.Error_Handler:0000000000000000 $t
     /tmp/ccP3MicS.s:1382   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccP3MicS.s:1414   .text.Error_Handler:0000000000000020 $d
     /tmp/ccP3MicS.s:1421   .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1427   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccP3MicS.s:1471   .text.MX_USART2_UART_Init:0000000000000028 $d
     /tmp/ccP3MicS.s:1478   .text.MX_CAN1_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1484   .text.MX_CAN1_Init:0000000000000000 MX_CAN1_Init
     /tmp/ccP3MicS.s:1538   .text.MX_CAN1_Init:0000000000000038 $d
                            *COM*:0000000000000028 hcan1
     /tmp/ccP3MicS.s:1544   .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1550   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccP3MicS.s:1603   .text.MX_SPI1_Init:0000000000000038 $d
                            *COM*:0000000000000058 hspi1
     /tmp/ccP3MicS.s:1609   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1615   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccP3MicS.s:1701   .text.MX_ADC1_Init:000000000000005c $d
                            *COM*:0000000000000048 hadc1
     /tmp/ccP3MicS.s:1708   .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1714   .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccP3MicS.s:1758   .text.MX_USART1_UART_Init:000000000000002c $d
     /tmp/ccP3MicS.s:1764   .text.MX_TIM2_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1770   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
ARM GAS  /tmp/ccP3MicS.s 			page 90


     /tmp/ccP3MicS.s:1877   .text.MX_TIM2_Init:0000000000000084 $d
                            *COM*:0000000000000040 htim2
     /tmp/ccP3MicS.s:1882   .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1888   .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccP3MicS.s:1974   .text.MX_TIM3_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccP3MicS.s:1980   .text.MX_TIM4_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:1986   .text.MX_TIM4_Init:0000000000000000 MX_TIM4_Init
     /tmp/ccP3MicS.s:2072   .text.MX_TIM4_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim4
     /tmp/ccP3MicS.s:2078   .text.MX_TIM5_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:2084   .text.MX_TIM5_Init:0000000000000000 MX_TIM5_Init
     /tmp/ccP3MicS.s:2170   .text.MX_TIM5_Init:0000000000000064 $d
                            *COM*:0000000000000040 htim5
     /tmp/ccP3MicS.s:2176   .text.MX_TIM6_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:2182   .text.MX_TIM6_Init:0000000000000000 MX_TIM6_Init
     /tmp/ccP3MicS.s:2248   .text.MX_TIM6_Init:0000000000000044 $d
                            *COM*:0000000000000040 htim6
     /tmp/ccP3MicS.s:2254   .text.MX_TIM7_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:2260   .text.MX_TIM7_Init:0000000000000000 MX_TIM7_Init
     /tmp/ccP3MicS.s:2326   .text.MX_TIM7_Init:0000000000000044 $d
     /tmp/ccP3MicS.s:2332   .text.MX_TIM10_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:2338   .text.MX_TIM10_Init:0000000000000000 MX_TIM10_Init
     /tmp/ccP3MicS.s:2378   .text.MX_TIM10_Init:0000000000000028 $d
     /tmp/ccP3MicS.s:2384   .text.MX_TIM11_Init:0000000000000000 $t
     /tmp/ccP3MicS.s:2390   .text.MX_TIM11_Init:0000000000000000 MX_TIM11_Init
     /tmp/ccP3MicS.s:2428   .text.MX_TIM11_Init:0000000000000020 $d
                            *COM*:0000000000000040 htim11
     /tmp/ccP3MicS.s:2434   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccP3MicS.s:2441   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccP3MicS.s:2560   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccP3MicS.s:2566   .text.main:0000000000000000 $t
     /tmp/ccP3MicS.s:2573   .text.main:0000000000000000 main
     /tmp/ccP3MicS.s:2990   .text.main:0000000000000290 $d
                            *COM*:0000000000000028 sFilter
                            *COM*:0000000000000004 steer_enc_prescaler
                            *COM*:0000000000000004 encoder_counter
                            *COM*:0000000000000004 previous_millis
                            *COM*:0000000000000064 txt
     /tmp/ccP3MicS.s:3098   .data.a_TimerInstance10:0000000000000000 a_TimerInstance10
     /tmp/ccP3MicS.s:3143   .data.a_TimerInstance7:0000000000000000 a_TimerInstance7
     /tmp/ccP3MicS.s:3135   .data.a_TimerInstance6:0000000000000000 a_TimerInstance6
     /tmp/ccP3MicS.s:3128   .data.a_TimerInstance5:0000000000000000 a_TimerInstance5
     /tmp/ccP3MicS.s:3121   .data.a_TimerInstance4:0000000000000000 a_TimerInstance4
     /tmp/ccP3MicS.s:3114   .data.a_TimerInstance3:0000000000000000 a_TimerInstance3
     /tmp/ccP3MicS.s:3106   .data.a_TimerInstance2:0000000000000000 a_TimerInstance2
     /tmp/ccP3MicS.s:3091   .bss.inverter_rpm:0000000000000000 inverter_rpm
     /tmp/ccP3MicS.s:3071   .bss.calibration_flag:0000000000000000 calibration_flag
     /tmp/ccP3MicS.s:3078   .bss.command_flag:0000000000000000 command_flag
     /tmp/ccP3MicS.s:3157   .data.timer_factor:0000000000000000 timer_factor
     /tmp/ccP3MicS.s:3151   .data.multiplier:0000000000000000 multiplier
     /tmp/ccP3MicS.s:3085   .bss.flag:0000000000000000 flag
                            *COM*:000000000000000c val
                            *COM*:0000000000000004 val0rang
                            *COM*:0000000000000004 valMin0
                            *COM*:0000000000000004 valMax0
                            *COM*:0000000000000060 hdma_adc1
ARM GAS  /tmp/ccP3MicS.s 			page 91


     /tmp/ccP3MicS.s:3067   .bss.calibration_flag:0000000000000000 $d
     /tmp/ccP3MicS.s:3074   .bss.command_flag:0000000000000000 $d
     /tmp/ccP3MicS.s:3081   .bss.flag:0000000000000000 $d
     /tmp/ccP3MicS.s:3088   .bss.inverter_rpm:0000000000000000 $d
     /tmp/ccP3MicS.s:3094   .data.a_TimerInstance10:0000000000000000 $d
     /tmp/ccP3MicS.s:3102   .data.a_TimerInstance2:0000000000000000 $d
     /tmp/ccP3MicS.s:3110   .data.a_TimerInstance3:0000000000000000 $d
     /tmp/ccP3MicS.s:3118   .data.a_TimerInstance4:0000000000000000 $d
     /tmp/ccP3MicS.s:3125   .data.a_TimerInstance5:0000000000000000 $d
     /tmp/ccP3MicS.s:3132   .data.a_TimerInstance6:0000000000000000 $d
     /tmp/ccP3MicS.s:3139   .data.a_TimerInstance7:0000000000000000 $d
     /tmp/ccP3MicS.s:3147   .data.multiplier:0000000000000000 $d
     /tmp/ccP3MicS.s:3154   .data.timer_factor:0000000000000000 $d
     /tmp/ccP3MicS.s:3160   .rodata.Error_Handler.str1.4:0000000000000000 $d
     /tmp/ccP3MicS.s:3166   .rodata.main.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
pot_1
pot_2
pot_3
gps_read_it
print_it
CAN_Receive
set_min
CAN_Send
set_max
can
LSMD9S0_accel_read
calc_pot_value
LSMD9S0_gyro_read
encoder_tim_interrupt
accel
gyro
enc
__aeabi_d2uiz
__aeabi_ddiv
__aeabi_dmul
__aeabi_i2d
__aeabi_dadd
HAL_UART_Transmit
HAL_UART_Init
HAL_CAN_Init
HAL_SPI_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_SlaveConfigSynchro
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
ARM GAS  /tmp/ccP3MicS.s 			page 92


HAL_Init
HAL_CAN_ConfigFilter
HAL_CAN_Start
HAL_CAN_ActivateNotification
HAL_TIM_Base_Start
HAL_TIM_Base_Start_IT
enc_calculate_optimal_frequency
LSMD9S0_accel_gyro_init
LSMD9S0_check
LSM9DS0_calibration
HAL_Delay
gps_init
HAL_ADC_Start_DMA
HAL_GetTick
sprintf
strlen
