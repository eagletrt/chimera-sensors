
FRONTAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b778  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800b948  0800b948  0001b948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce8  0800bce8  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bce8  0800bce8  0001bce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcf0  0800bcf0  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcf0  0800bcf0  0001bcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bcf4  0800bcf4  0001bcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800bcf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ed4  200002f8  0800bff0  000202f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200011cc  0800bff0  000211cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146bd  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027d2  00000000  00000000  000349e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012c0  00000000  00000000  000371b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001198  00000000  00000000  00038478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f37  00000000  00000000  00039610  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8f0  00000000  00000000  0005d547  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000da5f2  00000000  00000000  0006ae37  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145429  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc8  00000000  00000000  001454a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002f8 	.word	0x200002f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b930 	.word	0x0800b930

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002fc 	.word	0x200002fc
 800020c:	0800b930 	.word	0x0800b930

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b972 	b.w	8000f98 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4688      	mov	r8, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14b      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	4615      	mov	r5, r2
 8000cde:	d967      	bls.n	8000db0 <__udivmoddi4+0xe4>
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b14a      	cbz	r2, 8000cfa <__udivmoddi4+0x2e>
 8000ce6:	f1c2 0720 	rsb	r7, r2, #32
 8000cea:	fa01 f302 	lsl.w	r3, r1, r2
 8000cee:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf2:	4095      	lsls	r5, r2
 8000cf4:	ea47 0803 	orr.w	r8, r7, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d04:	fa1f fc85 	uxth.w	ip, r5
 8000d08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d10:	fb07 f10c 	mul.w	r1, r7, ip
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x60>
 8000d18:	18eb      	adds	r3, r5, r3
 8000d1a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1e:	f080 811b 	bcs.w	8000f58 <__udivmoddi4+0x28c>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 8118 	bls.w	8000f58 <__udivmoddi4+0x28c>
 8000d28:	3f02      	subs	r7, #2
 8000d2a:	442b      	add	r3, r5
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x8c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d54:	3802      	subs	r0, #2
 8000d56:	442c      	add	r4, r5
 8000d58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d5c:	eba4 040c 	sub.w	r4, r4, ip
 8000d60:	2700      	movs	r7, #0
 8000d62:	b11e      	cbz	r6, 8000d6c <__udivmoddi4+0xa0>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xbe>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80eb 	beq.w	8000f52 <__udivmoddi4+0x286>
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d82:	4638      	mov	r0, r7
 8000d84:	4639      	mov	r1, r7
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f783 	clz	r7, r3
 8000d8e:	2f00      	cmp	r7, #0
 8000d90:	d147      	bne.n	8000e22 <__udivmoddi4+0x156>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd0>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2c4>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4698      	mov	r8, r3
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa0>
 8000daa:	e9c6 4800 	strd	r4, r8, [r6]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xe8>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 808f 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbe:	1b49      	subs	r1, r1, r5
 8000dc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc4:	fa1f f885 	uxth.w	r8, r5
 8000dc8:	2701      	movs	r7, #1
 8000dca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000de0:	18eb      	adds	r3, r5, r3
 8000de2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2bc>
 8000dee:	4684      	mov	ip, r0
 8000df0:	1a59      	subs	r1, r3, r1
 8000df2:	b2a3      	uxth	r3, r4
 8000df4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e00:	fb08 f800 	mul.w	r8, r8, r0
 8000e04:	45a0      	cmp	r8, r4
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x14c>
 8000e08:	192c      	adds	r4, r5, r4
 8000e0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14a>
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	f200 80b6 	bhi.w	8000f82 <__udivmoddi4+0x2b6>
 8000e16:	4618      	mov	r0, r3
 8000e18:	eba4 0408 	sub.w	r4, r4, r8
 8000e1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e20:	e79f      	b.n	8000d62 <__udivmoddi4+0x96>
 8000e22:	f1c7 0c20 	rsb	ip, r7, #32
 8000e26:	40bb      	lsls	r3, r7
 8000e28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e30:	fa01 f407 	lsl.w	r4, r1, r7
 8000e34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e40:	4325      	orrs	r5, r4
 8000e42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e46:	0c2c      	lsrs	r4, r5, #16
 8000e48:	fb08 3319 	mls	r3, r8, r9, r3
 8000e4c:	fa1f fa8e 	uxth.w	sl, lr
 8000e50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e54:	fb09 f40a 	mul.w	r4, r9, sl
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1e 0303 	adds.w	r3, lr, r3
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e6c:	f080 8087 	bcs.w	8000f7e <__udivmoddi4+0x2b2>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f240 8084 	bls.w	8000f7e <__udivmoddi4+0x2b2>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4473      	add	r3, lr
 8000e7c:	1b1b      	subs	r3, r3, r4
 8000e7e:	b2ad      	uxth	r5, r5
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e90:	45a2      	cmp	sl, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1e 0404 	adds.w	r4, lr, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e9c:	d26b      	bcs.n	8000f76 <__udivmoddi4+0x2aa>
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	d969      	bls.n	8000f76 <__udivmoddi4+0x2aa>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4474      	add	r4, lr
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	eba4 040a 	sub.w	r4, r4, sl
 8000eb2:	454c      	cmp	r4, r9
 8000eb4:	46c2      	mov	sl, r8
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	d354      	bcc.n	8000f64 <__udivmoddi4+0x298>
 8000eba:	d051      	beq.n	8000f60 <__udivmoddi4+0x294>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d069      	beq.n	8000f94 <__udivmoddi4+0x2c8>
 8000ec0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ecc:	40fd      	lsrs	r5, r7
 8000ece:	40fc      	lsrs	r4, r7
 8000ed0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed8:	2700      	movs	r7, #0
 8000eda:	e747      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee4:	4095      	lsls	r5, r2
 8000ee6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eea:	fa21 f303 	lsr.w	r3, r1, r3
 8000eee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ef2:	4338      	orrs	r0, r7
 8000ef4:	0c01      	lsrs	r1, r0, #16
 8000ef6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000efa:	fa1f f885 	uxth.w	r8, r5
 8000efe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f06:	fb07 f308 	mul.w	r3, r7, r8
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x256>
 8000f12:	1869      	adds	r1, r5, r1
 8000f14:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f18:	d22f      	bcs.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d92d      	bls.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1e:	3f02      	subs	r7, #2
 8000f20:	4429      	add	r1, r5
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	b281      	uxth	r1, r0
 8000f26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb00 f308 	mul.w	r3, r0, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x27e>
 8000f3a:	1869      	adds	r1, r5, r1
 8000f3c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f40:	d217      	bcs.n	8000f72 <__udivmoddi4+0x2a6>
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d915      	bls.n	8000f72 <__udivmoddi4+0x2a6>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4429      	add	r1, r5
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f50:	e73b      	b.n	8000dca <__udivmoddi4+0xfe>
 8000f52:	4637      	mov	r7, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e709      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000f58:	4607      	mov	r7, r0
 8000f5a:	e6e7      	b.n	8000d2c <__udivmoddi4+0x60>
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x8c>
 8000f60:	4541      	cmp	r1, r8
 8000f62:	d2ab      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f68:	eb69 020e 	sbc.w	r2, r9, lr
 8000f6c:	3801      	subs	r0, #1
 8000f6e:	4613      	mov	r3, r2
 8000f70:	e7a4      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f72:	4660      	mov	r0, ip
 8000f74:	e7e9      	b.n	8000f4a <__udivmoddi4+0x27e>
 8000f76:	4618      	mov	r0, r3
 8000f78:	e795      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7a:	4667      	mov	r7, ip
 8000f7c:	e7d1      	b.n	8000f22 <__udivmoddi4+0x256>
 8000f7e:	4681      	mov	r9, r0
 8000f80:	e77c      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f82:	3802      	subs	r0, #2
 8000f84:	442c      	add	r4, r5
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0x14c>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	442b      	add	r3, r5
 8000f8e:	e72f      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f90:	4638      	mov	r0, r7
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xda>
 8000f94:	4637      	mov	r7, r6
 8000f96:	e6e9      	b.n	8000d6c <__udivmoddi4+0xa0>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_Init+0x40>)
 8000fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_Init+0x40>)
 8000fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <HAL_Init+0x40>)
 8000fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	f001 fd79 	bl	8002abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 f808 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd0:	f007 fee0 	bl	8008d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023c00 	.word	0x40023c00

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x54>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x58>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fd91 	bl	8002b26 <HAL_SYSTICK_Config>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00e      	b.n	800102c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d80a      	bhi.n	800102a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800101c:	f001 fd59 	bl	8002ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <HAL_InitTick+0x5c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000124 	.word	0x20000124
 8001038:	20000004 	.word	0x20000004
 800103c:	20000000 	.word	0x20000000

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000004 	.word	0x20000004
 8001064:	20000414 	.word	0x20000414

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000414 	.word	0x20000414

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109a:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <HAL_Delay+0x40>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000004 	.word	0x20000004

080010c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e033      	b.n	8001142 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d109      	bne.n	80010f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f007 fe7e 	bl	8008de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d118      	bne.n	8001134 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800110a:	f023 0302 	bic.w	r3, r3, #2
 800110e:	f043 0202 	orr.w	r2, r3, #2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 fb9a 	bl	8001850 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f023 0303 	bic.w	r3, r3, #3
 800112a:	f043 0201 	orr.w	r2, r3, #1
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	641a      	str	r2, [r3, #64]	; 0x40
 8001132:	e001      	b.n	8001138 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b02      	cmp	r3, #2
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0320 	and.w	r3, r3, #32
 800117a:	2b20      	cmp	r3, #32
 800117c:	bf0c      	ite	eq
 800117e:	2301      	moveq	r3, #1
 8001180:	2300      	movne	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d049      	beq.n	8001220 <HAL_ADC_IRQHandler+0xd6>
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d046      	beq.n	8001220 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	d105      	bne.n	80011aa <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d12b      	bne.n	8001210 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d127      	bne.n	8001210 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d119      	bne.n	8001210 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f022 0220 	bic.w	r2, r2, #32
 80011ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f043 0201 	orr.w	r2, r3, #1
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f006 fc07 	bl	8007a24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f06f 0212 	mvn.w	r2, #18
 800121e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0304 	and.w	r3, r3, #4
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001240:	2b80      	cmp	r3, #128	; 0x80
 8001242:	bf0c      	ite	eq
 8001244:	2301      	moveq	r3, #1
 8001246:	2300      	movne	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d057      	beq.n	8001302 <HAL_ADC_IRQHandler+0x1b8>
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d054      	beq.n	8001302 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b00      	cmp	r3, #0
 8001262:	d105      	bne.n	8001270 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d139      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001296:	2b00      	cmp	r3, #0
 8001298:	d12b      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d124      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d11d      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d119      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012cc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d105      	bne.n	80012f2 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f043 0201 	orr.w	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 fc2a 	bl	8001b4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f06f 020c 	mvn.w	r2, #12
 8001300:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001322:	2b40      	cmp	r3, #64	; 0x40
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d017      	beq.n	8001364 <HAL_ADC_IRQHandler+0x21a>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d014      	beq.n	8001364 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b01      	cmp	r3, #1
 8001346:	d10d      	bne.n	8001364 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f935 	bl	80015c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f06f 0201 	mvn.w	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0320 	and.w	r3, r3, #32
 800136e:	2b20      	cmp	r3, #32
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001388:	bf0c      	ite	eq
 800138a:	2301      	moveq	r3, #1
 800138c:	2300      	movne	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d015      	beq.n	80013c4 <HAL_ADC_IRQHandler+0x27a>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d012      	beq.n	80013c4 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f043 0202 	orr.w	r2, r3, #2
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f06f 0220 	mvn.w	r2, #32
 80013b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f90f 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f06f 0220 	mvn.w	r2, #32
 80013c2:	601a      	str	r2, [r3, #0]
  }
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Start_DMA+0x1e>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0cc      	b.n	8001584 <HAL_ADC_Start_DMA+0x1b8>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d018      	beq.n	8001432 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001410:	4b5e      	ldr	r3, [pc, #376]	; (800158c <HAL_ADC_Start_DMA+0x1c0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a5e      	ldr	r2, [pc, #376]	; (8001590 <HAL_ADC_Start_DMA+0x1c4>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0c9a      	lsrs	r2, r3, #18
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	3b01      	subs	r3, #1
 800142a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	f040 80a0 	bne.w	8001582 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800146c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001480:	d106      	bne.n	8001490 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f023 0206 	bic.w	r2, r3, #6
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
 800148e:	e002      	b.n	8001496 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149e:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <HAL_ADC_Start_DMA+0x1c8>)
 80014a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a6:	4a3c      	ldr	r2, [pc, #240]	; (8001598 <HAL_ADC_Start_DMA+0x1cc>)
 80014a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	4a3b      	ldr	r2, [pc, #236]	; (800159c <HAL_ADC_Start_DMA+0x1d0>)
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	4a3a      	ldr	r2, [pc, #232]	; (80015a0 <HAL_ADC_Start_DMA+0x1d4>)
 80014b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	334c      	adds	r3, #76	; 0x4c
 80014ee:	4619      	mov	r1, r3
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f001 fbd2 	bl	8002c9c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 031f 	and.w	r3, r3, #31
 8001500:	2b00      	cmp	r3, #0
 8001502:	d12a      	bne.n	800155a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a26      	ldr	r2, [pc, #152]	; (80015a4 <HAL_ADC_Start_DMA+0x1d8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d015      	beq.n	800153a <HAL_ADC_Start_DMA+0x16e>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a25      	ldr	r2, [pc, #148]	; (80015a8 <HAL_ADC_Start_DMA+0x1dc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d105      	bne.n	8001524 <HAL_ADC_Start_DMA+0x158>
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_ADC_Start_DMA+0x1c8>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 031f 	and.w	r3, r3, #31
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00a      	beq.n	800153a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a20      	ldr	r2, [pc, #128]	; (80015ac <HAL_ADC_Start_DMA+0x1e0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d129      	bne.n	8001582 <HAL_ADC_Start_DMA+0x1b6>
 800152e:	4b19      	ldr	r3, [pc, #100]	; (8001594 <HAL_ADC_Start_DMA+0x1c8>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d823      	bhi.n	8001582 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11c      	bne.n	8001582 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	e013      	b.n	8001582 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a11      	ldr	r2, [pc, #68]	; (80015a4 <HAL_ADC_Start_DMA+0x1d8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d10e      	bne.n	8001582 <HAL_ADC_Start_DMA+0x1b6>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001580:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000124 	.word	0x20000124
 8001590:	431bde83 	.word	0x431bde83
 8001594:	40012300 	.word	0x40012300
 8001598:	08001a49 	.word	0x08001a49
 800159c:	08001b03 	.word	0x08001b03
 80015a0:	08001b1f 	.word	0x08001b1f
 80015a4:	40012000 	.word	0x40012000
 80015a8:	40012100 	.word	0x40012100
 80015ac:	40012200 	.word	0x40012200

080015b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1c>
 8001604:	2302      	movs	r3, #2
 8001606:	e113      	b.n	8001830 <HAL_ADC_ConfigChannel+0x244>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d925      	bls.n	8001664 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68d9      	ldr	r1, [r3, #12]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	3b1e      	subs	r3, #30
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68d9      	ldr	r1, [r3, #12]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4403      	add	r3, r0
 8001656:	3b1e      	subs	r3, #30
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	e022      	b.n	80016aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	2207      	movs	r2, #7
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	4603      	mov	r3, r0
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4403      	add	r3, r0
 80016a0:	409a      	lsls	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d824      	bhi.n	80016fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b05      	subs	r3, #5
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	400a      	ands	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b05      	subs	r3, #5
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
 80016fa:	e04c      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d824      	bhi.n	800174e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b23      	subs	r3, #35	; 0x23
 8001716:	221f      	movs	r2, #31
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b23      	subs	r3, #35	; 0x23
 8001740:	fa00 f203 	lsl.w	r2, r0, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
 800174c:	e023      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b41      	subs	r3, #65	; 0x41
 8001760:	221f      	movs	r2, #31
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b41      	subs	r3, #65	; 0x41
 800178a:	fa00 f203 	lsl.w	r2, r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001796:	4b29      	ldr	r3, [pc, #164]	; (800183c <HAL_ADC_ConfigChannel+0x250>)
 8001798:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a28      	ldr	r2, [pc, #160]	; (8001840 <HAL_ADC_ConfigChannel+0x254>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d10f      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d8>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d10b      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_ADC_ConfigChannel+0x254>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12b      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x23a>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <HAL_ADC_ConfigChannel+0x258>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d003      	beq.n	80017e0 <HAL_ADC_ConfigChannel+0x1f4>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b11      	cmp	r3, #17
 80017de:	d122      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a11      	ldr	r2, [pc, #68]	; (8001844 <HAL_ADC_ConfigChannel+0x258>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d111      	bne.n	8001826 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <HAL_ADC_ConfigChannel+0x25c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a11      	ldr	r2, [pc, #68]	; (800184c <HAL_ADC_ConfigChannel+0x260>)
 8001808:	fba2 2303 	umull	r2, r3, r2, r3
 800180c:	0c9a      	lsrs	r2, r3, #18
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001818:	e002      	b.n	8001820 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3b01      	subs	r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f9      	bne.n	800181a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40012300 	.word	0x40012300
 8001840:	40012000 	.word	0x40012000
 8001844:	10000012 	.word	0x10000012
 8001848:	20000124 	.word	0x20000124
 800184c:	431bde83 	.word	0x431bde83

08001850 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001858:	4b79      	ldr	r3, [pc, #484]	; (8001a40 <ADC_Init+0x1f0>)
 800185a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	431a      	orrs	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001884:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	021a      	lsls	r2, r3, #8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6899      	ldr	r1, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68da      	ldr	r2, [r3, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e2:	4a58      	ldr	r2, [pc, #352]	; (8001a44 <ADC_Init+0x1f4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d022      	beq.n	800192e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001918:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6899      	ldr	r1, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	e00f      	b.n	800194e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800193c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800194c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 0202 	bic.w	r2, r2, #2
 800195c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6899      	ldr	r1, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7e1b      	ldrb	r3, [r3, #24]
 8001968:	005a      	lsls	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01b      	beq.n	80019b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800199a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6859      	ldr	r1, [r3, #4]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	3b01      	subs	r3, #1
 80019a8:	035a      	lsls	r2, r3, #13
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	e007      	b.n	80019c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	3b01      	subs	r3, #1
 80019e0:	051a      	lsls	r2, r3, #20
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a06:	025a      	lsls	r2, r3, #9
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6899      	ldr	r1, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	029a      	lsls	r2, r3, #10
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40012300 	.word	0x40012300
 8001a44:	0f000001 	.word	0x0f000001

08001a48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d13c      	bne.n	8001adc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d12b      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d127      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d119      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0220 	bic.w	r2, r2, #32
 8001aae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001acc:	f043 0201 	orr.w	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f005 ffa5 	bl	8007a24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ada:	e00e      	b.n	8001afa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f003 0310 	and.w	r3, r3, #16
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f7ff fd75 	bl	80015d8 <HAL_ADC_ErrorCallback>
}
 8001aee:	e004      	b.n	8001afa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	4798      	blx	r3
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b10:	68f8      	ldr	r0, [r7, #12]
 8001b12:	f7ff fd4d 	bl	80015b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f043 0204 	orr.w	r2, r3, #4
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff fd4a 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b44:	bf00      	nop
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d101      	bne.n	8001b72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0ed      	b.n	8001d4e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f007 f9a6 	bl	8008ed0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0202 	bic.w	r2, r2, #2
 8001b92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b94:	f7ff fa68 	bl	8001068 <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b9a:	e012      	b.n	8001bc2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b9c:	f7ff fa64 	bl	8001068 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d90b      	bls.n	8001bc2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2205      	movs	r2, #5
 8001bba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0c5      	b.n	8001d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e5      	bne.n	8001b9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001be0:	f7ff fa42 	bl	8001068 <HAL_GetTick>
 8001be4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001be6:	e012      	b.n	8001c0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be8:	f7ff fa3e 	bl	8001068 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b0a      	cmp	r3, #10
 8001bf4:	d90b      	bls.n	8001c0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2205      	movs	r2, #5
 8001c06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e09f      	b.n	8001d4e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0e5      	beq.n	8001be8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	7e1b      	ldrb	r3, [r3, #24]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e007      	b.n	8001c46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	7e5b      	ldrb	r3, [r3, #25]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d108      	bne.n	8001c60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	e007      	b.n	8001c70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7e9b      	ldrb	r3, [r3, #26]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d108      	bne.n	8001c8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	e007      	b.n	8001c9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 0220 	bic.w	r2, r2, #32
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7edb      	ldrb	r3, [r3, #27]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d108      	bne.n	8001cb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0210 	bic.w	r2, r2, #16
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e007      	b.n	8001cc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0210 	orr.w	r2, r2, #16
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7f1b      	ldrb	r3, [r3, #28]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d108      	bne.n	8001cde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0208 	orr.w	r2, r2, #8
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	e007      	b.n	8001cee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f022 0208 	bic.w	r2, r2, #8
 8001cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7f5b      	ldrb	r3, [r3, #29]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0204 	orr.w	r2, r2, #4
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	e007      	b.n	8001d18 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 0204 	bic.w	r2, r2, #4
 8001d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	ea42 0103 	orr.w	r1, r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	1e5a      	subs	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d003      	beq.n	8001d7e <HAL_CAN_ConfigFilter+0x26>
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	f040 80be 	bne.w	8001efa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001d7e:	4b65      	ldr	r3, [pc, #404]	; (8001f14 <HAL_CAN_ConfigFilter+0x1bc>)
 8001d80:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d88:	f043 0201 	orr.w	r2, r3, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d98:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	431a      	orrs	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	401a      	ands	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d123      	bne.n	8001e28 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3248      	adds	r2, #72	; 0x48
 8001e08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e1e:	6979      	ldr	r1, [r7, #20]
 8001e20:	3348      	adds	r3, #72	; 0x48
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	69db      	ldr	r3, [r3, #28]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d122      	bne.n	8001e76 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e50:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	3248      	adds	r2, #72	; 0x48
 8001e56:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e6a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e6c:	6979      	ldr	r1, [r7, #20]
 8001e6e:	3348      	adds	r3, #72	; 0x48
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	440b      	add	r3, r1
 8001e74:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	401a      	ands	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ebc:	e007      	b.n	8001ece <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d107      	bne.n	8001ee6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001eec:	f023 0201 	bic.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e006      	b.n	8001f08 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40006400 	.word	0x40006400

08001f18 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d12e      	bne.n	8001f8a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f44:	f7ff f890 	bl	8001068 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f4a:	e012      	b.n	8001f72 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f4c:	f7ff f88c 	bl	8001068 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b0a      	cmp	r3, #10
 8001f58:	d90b      	bls.n	8001f72 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2205      	movs	r2, #5
 8001f6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e012      	b.n	8001f98 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e5      	bne.n	8001f4c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e006      	b.n	8001f98 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d003      	beq.n	8001fcc <HAL_CAN_AddTxMessage+0x2c>
 8001fc4:	7ffb      	ldrb	r3, [r7, #31]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 80b8 	bne.w	800213c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a0 	beq.w	800212c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	0e1b      	lsrs	r3, r3, #24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d907      	bls.n	800200c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e09e      	b.n	800214a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800200c:	2201      	movs	r2, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	409a      	lsls	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	6809      	ldr	r1, [r1, #0]
 800202c:	431a      	orrs	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3318      	adds	r3, #24
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e00f      	b.n	800205a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002044:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800204e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3318      	adds	r3, #24
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	440b      	add	r3, r1
 8002058:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3318      	adds	r3, #24
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	440b      	add	r3, r1
 800206a:	3304      	adds	r3, #4
 800206c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	7d1b      	ldrb	r3, [r3, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d111      	bne.n	800209a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3318      	adds	r3, #24
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6811      	ldr	r1, [r2, #0]
 800208a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	3318      	adds	r3, #24
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	440b      	add	r3, r1
 8002096:	3304      	adds	r3, #4
 8002098:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3307      	adds	r3, #7
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	061a      	lsls	r2, r3, #24
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3306      	adds	r3, #6
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	041b      	lsls	r3, r3, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3305      	adds	r3, #5
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	4313      	orrs	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	3204      	adds	r2, #4
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	4610      	mov	r0, r2
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	6811      	ldr	r1, [r2, #0]
 80020c2:	ea43 0200 	orr.w	r2, r3, r0
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	061a      	lsls	r2, r3, #24
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3302      	adds	r3, #2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3301      	adds	r3, #1
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	4313      	orrs	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	4610      	mov	r0, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	6811      	ldr	r1, [r2, #0]
 80020f8:	ea43 0200 	orr.w	r2, r3, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	440b      	add	r3, r1
 8002102:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002106:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3318      	adds	r3, #24
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3318      	adds	r3, #24
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	440b      	add	r3, r1
 8002126:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e00e      	b.n	800214a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e006      	b.n	800214a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002168:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800216a:	7afb      	ldrb	r3, [r7, #11]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d002      	beq.n	8002176 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d11d      	bne.n	80021b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3301      	adds	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3301      	adds	r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3301      	adds	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80021d6:	7afb      	ldrb	r3, [r7, #11]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d002      	beq.n	80021e2 <HAL_CAN_IsTxMessagePending+0x22>
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d10b      	bne.n	80021fa <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	069b      	lsls	r3, r3, #26
 80021ec:	401a      	ands	r2, r3
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	069b      	lsls	r3, r3, #26
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d001      	beq.n	80021fa <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80021f6:	2301      	movs	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d003      	beq.n	800222c <HAL_CAN_GetRxMessage+0x24>
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b02      	cmp	r3, #2
 8002228:	f040 80f4 	bne.w	8002414 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10e      	bne.n	8002250 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d116      	bne.n	800226e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0e8      	b.n	8002422 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d107      	bne.n	800226e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0d9      	b.n	8002422 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	331b      	adds	r3, #27
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	4413      	add	r3, r2
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0204 	and.w	r2, r3, #4
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10c      	bne.n	80022a6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	331b      	adds	r3, #27
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	4413      	add	r3, r2
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	0d5b      	lsrs	r3, r3, #21
 800229c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e00b      	b.n	80022be <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	331b      	adds	r3, #27
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	4413      	add	r3, r2
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	331b      	adds	r3, #27
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4413      	add	r3, r2
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	331b      	adds	r3, #27
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	4413      	add	r3, r2
 80022e2:	3304      	adds	r3, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 020f 	and.w	r2, r3, #15
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	331b      	adds	r3, #27
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4413      	add	r3, r2
 80022fa:	3304      	adds	r3, #4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b2da      	uxtb	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	331b      	adds	r3, #27
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	0c1b      	lsrs	r3, r3, #16
 8002318:	b29a      	uxth	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	4413      	add	r3, r2
 8002328:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	0a1a      	lsrs	r2, r3, #8
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	4413      	add	r3, r2
 8002358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	0c1a      	lsrs	r2, r3, #16
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	3302      	adds	r3, #2
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	4413      	add	r3, r2
 8002372:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0e1a      	lsrs	r2, r3, #24
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	3303      	adds	r3, #3
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	4413      	add	r3, r2
 800238c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3304      	adds	r3, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0a1a      	lsrs	r2, r3, #8
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3305      	adds	r3, #5
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4413      	add	r3, r2
 80023be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0c1a      	lsrs	r2, r3, #16
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	3306      	adds	r3, #6
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0e1a      	lsrs	r2, r3, #24
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3307      	adds	r3, #7
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d108      	bne.n	8002400 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0220 	orr.w	r2, r2, #32
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	e007      	b.n	8002410 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691a      	ldr	r2, [r3, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e006      	b.n	8002422 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800242e:	b480      	push	{r7}
 8002430:	b085      	sub	sp, #20
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002442:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002444:	7afb      	ldrb	r3, [r7, #11]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d002      	beq.n	8002450 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d10f      	bne.n	8002470 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0303 	and.w	r3, r3, #3
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	e005      	b.n	8002470 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002470:	68fb      	ldr	r3, [r7, #12]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800247e:	b480      	push	{r7}
 8002480:	b085      	sub	sp, #20
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d002      	beq.n	800249c <HAL_CAN_ActivateNotification+0x1e>
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b02      	cmp	r3, #2
 800249a:	d109      	bne.n	80024b0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6959      	ldr	r1, [r3, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	e006      	b.n	80024be <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
  }
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b08a      	sub	sp, #40	; 0x28
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d07c      	beq.n	800260a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d023      	beq.n	8002562 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2201      	movs	r2, #1
 8002520:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f97d 	bl	800282c <HAL_CAN_TxMailbox0CompleteCallback>
 8002532:	e016      	b.n	8002562 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	e00c      	b.n	8002562 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d004      	beq.n	800255c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
 800255a:	e002      	b.n	8002562 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f983 	bl	8002868 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d024      	beq.n	80025b6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002574:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f95d 	bl	8002840 <HAL_CAN_TxMailbox1CompleteCallback>
 8002586:	e016      	b.n	80025b6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
 800259a:	e00c      	b.n	80025b6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d004      	beq.n	80025b0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
 80025ae:	e002      	b.n	80025b6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f963 	bl	800287c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d024      	beq.n	800260a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025c8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f93d 	bl	8002854 <HAL_CAN_TxMailbox2CompleteCallback>
 80025da:	e016      	b.n	800260a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	e00c      	b.n	800260a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	e002      	b.n	800260a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f943 	bl	8002890 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00c      	beq.n	800262e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800261e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002624:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2210      	movs	r2, #16
 800262c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2208      	movs	r2, #8
 8002648:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f006 f866 	bl	800871c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d009      	beq.n	800266e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f91b 	bl	80028a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002688:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2210      	movs	r2, #16
 8002690:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00b      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d006      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2208      	movs	r2, #8
 80026ac:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f90c 	bl	80028cc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f8f3 	bl	80028b8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d006      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2210      	movs	r2, #16
 80026ec:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f8f6 	bl	80028e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2208      	movs	r2, #8
 800270e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f8ef 	bl	80028f4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d075      	beq.n	800280c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d06c      	beq.n	8002804 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274c:	2b00      	cmp	r3, #0
 800274e:	d008      	beq.n	8002762 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002784:	2b00      	cmp	r3, #0
 8002786:	d03d      	beq.n	8002804 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d038      	beq.n	8002804 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002798:	2b30      	cmp	r3, #48	; 0x30
 800279a:	d017      	beq.n	80027cc <HAL_CAN_IRQHandler+0x302>
 800279c:	2b30      	cmp	r3, #48	; 0x30
 800279e:	d804      	bhi.n	80027aa <HAL_CAN_IRQHandler+0x2e0>
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d009      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x2ee>
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d00c      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027a8:	e024      	b.n	80027f4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80027aa:	2b50      	cmp	r3, #80	; 0x50
 80027ac:	d018      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x316>
 80027ae:	2b60      	cmp	r3, #96	; 0x60
 80027b0:	d01b      	beq.n	80027ea <HAL_CAN_IRQHandler+0x320>
 80027b2:	2b40      	cmp	r3, #64	; 0x40
 80027b4:	d00f      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x30c>
            break;
 80027b6:	e01d      	b.n	80027f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f043 0308 	orr.w	r3, r3, #8
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c0:	e018      	b.n	80027f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	f043 0310 	orr.w	r3, r3, #16
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027ca:	e013      	b.n	80027f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	f043 0320 	orr.w	r3, r3, #32
 80027d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d4:	e00e      	b.n	80027f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027de:	e009      	b.n	80027f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027e8:	e004      	b.n	80027f4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002802:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2204      	movs	r2, #4
 800280a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	431a      	orrs	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f872 	bl	8002908 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002824:	bf00      	nop
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800292c:	4b0c      	ldr	r3, [pc, #48]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002938:	4013      	ands	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002944:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800294c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800294e:	4a04      	ldr	r2, [pc, #16]	; (8002960 <__NVIC_SetPriorityGrouping+0x44>)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <__NVIC_GetPriorityGrouping+0x18>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0a1b      	lsrs	r3, r3, #8
 800296e:	f003 0307 	and.w	r3, r3, #7
}
 8002972:	4618      	mov	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	2b00      	cmp	r3, #0
 8002990:	db0b      	blt.n	80029aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	4907      	ldr	r1, [pc, #28]	; (80029b8 <__NVIC_EnableIRQ+0x38>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	2001      	movs	r0, #1
 80029a2:	fa00 f202 	lsl.w	r2, r0, r2
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	; (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	; (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	; 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	; 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a88:	d301      	bcc.n	8002a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00f      	b.n	8002aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <SysTick_Config+0x40>)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a96:	210f      	movs	r1, #15
 8002a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a9c:	f7ff ff8e 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <SysTick_Config+0x40>)
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	e000e010 	.word	0xe000e010

08002abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff ff29 	bl	800291c <__NVIC_SetPriorityGrouping>
}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b086      	sub	sp, #24
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	4603      	mov	r3, r0
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae4:	f7ff ff3e 	bl	8002964 <__NVIC_GetPriorityGrouping>
 8002ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6978      	ldr	r0, [r7, #20]
 8002af0:	f7ff ff8e 	bl	8002a10 <NVIC_EncodePriority>
 8002af4:	4602      	mov	r2, r0
 8002af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff5d 	bl	80029bc <__NVIC_SetPriority>
}
 8002b02:	bf00      	nop
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff31 	bl	8002980 <__NVIC_EnableIRQ>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff ffa2 	bl	8002a78 <SysTick_Config>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b4c:	f7fe fa8c 	bl	8001068 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e099      	b.n	8002c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0201 	bic.w	r2, r2, #1
 8002b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b7c:	e00f      	b.n	8002b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b7e:	f7fe fa73 	bl	8001068 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b05      	cmp	r3, #5
 8002b8a:	d908      	bls.n	8002b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2203      	movs	r2, #3
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e078      	b.n	8002c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1e8      	bne.n	8002b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_DMA_Init+0x158>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d107      	bne.n	8002c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	4313      	orrs	r3, r2
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f023 0307 	bic.w	r3, r3, #7
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d117      	bne.n	8002c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fa99 	bl	800317c <DMA_CheckFifoParam>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d008      	beq.n	8002c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2240      	movs	r2, #64	; 0x40
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e016      	b.n	8002c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 fa50 	bl	8003110 <DMA_CalcBaseAndBitshift>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	223f      	movs	r2, #63	; 0x3f
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	f010803f 	.word	0xf010803f

08002c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_DMA_Start_IT+0x26>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e048      	b.n	8002d54 <HAL_DMA_Start_IT+0xb8>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d137      	bne.n	8002d46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f9e2 	bl	80030b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	223f      	movs	r2, #63	; 0x3f
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0216 	orr.w	r2, r2, #22
 8002d0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d1a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0208 	orr.w	r2, r2, #8
 8002d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	e005      	b.n	8002d52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d004      	beq.n	8002d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00c      	b.n	8002d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2205      	movs	r2, #5
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 0201 	bic.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dac:	4b92      	ldr	r3, [pc, #584]	; (8002ff8 <HAL_DMA_IRQHandler+0x258>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a92      	ldr	r2, [pc, #584]	; (8002ffc <HAL_DMA_IRQHandler+0x25c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2208      	movs	r2, #8
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0204 	bic.w	r2, r2, #4
 8002df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	2208      	movs	r2, #8
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	2201      	movs	r2, #1
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2204      	movs	r2, #4
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d043      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03c      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d024      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
 8002ece:	e01f      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0208 	bic.w	r2, r2, #8
 8002efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2220      	movs	r2, #32
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808e 	beq.w	800303e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8086 	beq.w	800303e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2220      	movs	r2, #32
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d136      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x1da>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	223f      	movs	r2, #63	; 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d07d      	beq.n	80030aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
        }
        return;
 8002fb6:	e078      	b.n	80030aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01c      	beq.n	8003000 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d030      	beq.n	800303e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e02b      	b.n	800303e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d027      	beq.n	800303e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e022      	b.n	800303e <HAL_DMA_IRQHandler+0x29e>
 8002ff8:	20000124 	.word	0x20000124
 8002ffc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10f      	bne.n	800302e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0210 	bic.w	r2, r2, #16
 800301c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	2b00      	cmp	r3, #0
 8003044:	d032      	beq.n	80030ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d022      	beq.n	8003098 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2205      	movs	r2, #5
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3301      	adds	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	697a      	ldr	r2, [r7, #20]
 8003072:	429a      	cmp	r2, r3
 8003074:	d307      	bcc.n	8003086 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f2      	bne.n	800306a <HAL_DMA_IRQHandler+0x2ca>
 8003084:	e000      	b.n	8003088 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003086:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	4798      	blx	r3
 80030a8:	e000      	b.n	80030ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80030aa:	bf00      	nop
    }
  }
}
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop

080030b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d108      	bne.n	80030f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030f2:	e007      	b.n	8003104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	3b10      	subs	r3, #16
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <DMA_CalcBaseAndBitshift+0x64>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <DMA_CalcBaseAndBitshift+0x68>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d909      	bls.n	8003152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	659a      	str	r2, [r3, #88]	; 0x58
 8003150:	e007      	b.n	8003162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	aaaaaaab 	.word	0xaaaaaaab
 8003178:	0800ba2c 	.word	0x0800ba2c

0800317c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11f      	bne.n	80031d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d855      	bhi.n	8003248 <DMA_CheckFifoParam+0xcc>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <DMA_CheckFifoParam+0x28>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031c7 	.word	0x080031c7
 80031ac:	080031b5 	.word	0x080031b5
 80031b0:	08003249 	.word	0x08003249
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d045      	beq.n	800324c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c4:	e042      	b.n	800324c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ce:	d13f      	bne.n	8003250 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d4:	e03c      	b.n	8003250 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031de:	d121      	bne.n	8003224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d836      	bhi.n	8003254 <DMA_CheckFifoParam+0xd8>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <DMA_CheckFifoParam+0x70>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003203 	.word	0x08003203
 80031f4:	080031fd 	.word	0x080031fd
 80031f8:	08003215 	.word	0x08003215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003200:	e02f      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d024      	beq.n	8003258 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003212:	e021      	b.n	8003258 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800321c:	d11e      	bne.n	800325c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003222:	e01b      	b.n	800325c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d902      	bls.n	8003230 <DMA_CheckFifoParam+0xb4>
 800322a:	2b03      	cmp	r3, #3
 800322c:	d003      	beq.n	8003236 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800322e:	e018      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      break;
 8003234:	e015      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00e      	beq.n	8003260 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
      break;
 8003246:	e00b      	b.n	8003260 <DMA_CheckFifoParam+0xe4>
      break;
 8003248:	bf00      	nop
 800324a:	e00a      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;
 800324c:	bf00      	nop
 800324e:	e008      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;
 8003250:	bf00      	nop
 8003252:	e006      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;
 8003254:	bf00      	nop
 8003256:	e004      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;
 8003258:	bf00      	nop
 800325a:	e002      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;   
 800325c:	bf00      	nop
 800325e:	e000      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;
 8003260:	bf00      	nop
    }
  } 
  
  return status; 
 8003262:	7bfb      	ldrb	r3, [r7, #15]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
 800328a:	e165      	b.n	8003558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800328c:	2201      	movs	r2, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	f040 8154 	bne.w	8003552 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x4a>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b12      	cmp	r3, #18
 80032b8:	d123      	bne.n	8003302 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	08da      	lsrs	r2, r3, #3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3208      	adds	r2, #8
 80032c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	220f      	movs	r2, #15
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	08da      	lsrs	r2, r3, #3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3208      	adds	r2, #8
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	2203      	movs	r2, #3
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f003 0203 	and.w	r2, r3, #3
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d00b      	beq.n	8003356 <HAL_GPIO_Init+0xe6>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800334a:	2b11      	cmp	r3, #17
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b12      	cmp	r3, #18
 8003354:	d130      	bne.n	80033b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800338c:	2201      	movs	r2, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 0201 	and.w	r2, r3, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f000 80ae 	beq.w	8003552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b5c      	ldr	r3, [pc, #368]	; (800356c <HAL_GPIO_Init+0x2fc>)
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	4a5b      	ldr	r2, [pc, #364]	; (800356c <HAL_GPIO_Init+0x2fc>)
 8003400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003404:	6453      	str	r3, [r2, #68]	; 0x44
 8003406:	4b59      	ldr	r3, [pc, #356]	; (800356c <HAL_GPIO_Init+0x2fc>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003412:	4a57      	ldr	r2, [pc, #348]	; (8003570 <HAL_GPIO_Init+0x300>)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	089b      	lsrs	r3, r3, #2
 8003418:	3302      	adds	r3, #2
 800341a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 0303 	and.w	r3, r3, #3
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	220f      	movs	r2, #15
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4013      	ands	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4e      	ldr	r2, [pc, #312]	; (8003574 <HAL_GPIO_Init+0x304>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d025      	beq.n	800348a <HAL_GPIO_Init+0x21a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a4d      	ldr	r2, [pc, #308]	; (8003578 <HAL_GPIO_Init+0x308>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d01f      	beq.n	8003486 <HAL_GPIO_Init+0x216>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_GPIO_Init+0x30c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d019      	beq.n	8003482 <HAL_GPIO_Init+0x212>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_GPIO_Init+0x310>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d013      	beq.n	800347e <HAL_GPIO_Init+0x20e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a4a      	ldr	r2, [pc, #296]	; (8003584 <HAL_GPIO_Init+0x314>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d00d      	beq.n	800347a <HAL_GPIO_Init+0x20a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a49      	ldr	r2, [pc, #292]	; (8003588 <HAL_GPIO_Init+0x318>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <HAL_GPIO_Init+0x206>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a48      	ldr	r2, [pc, #288]	; (800358c <HAL_GPIO_Init+0x31c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d101      	bne.n	8003472 <HAL_GPIO_Init+0x202>
 800346e:	2306      	movs	r3, #6
 8003470:	e00c      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003472:	2307      	movs	r3, #7
 8003474:	e00a      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003476:	2305      	movs	r3, #5
 8003478:	e008      	b.n	800348c <HAL_GPIO_Init+0x21c>
 800347a:	2304      	movs	r3, #4
 800347c:	e006      	b.n	800348c <HAL_GPIO_Init+0x21c>
 800347e:	2303      	movs	r3, #3
 8003480:	e004      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003482:	2302      	movs	r3, #2
 8003484:	e002      	b.n	800348c <HAL_GPIO_Init+0x21c>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <HAL_GPIO_Init+0x21c>
 800348a:	2300      	movs	r3, #0
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	f002 0203 	and.w	r2, r2, #3
 8003492:	0092      	lsls	r2, r2, #2
 8003494:	4093      	lsls	r3, r2
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4313      	orrs	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800349c:	4934      	ldr	r1, [pc, #208]	; (8003570 <HAL_GPIO_Init+0x300>)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	089b      	lsrs	r3, r3, #2
 80034a2:	3302      	adds	r3, #2
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034aa:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	43db      	mvns	r3, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4013      	ands	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034ce:	4a30      	ldr	r2, [pc, #192]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034d4:	4b2e      	ldr	r3, [pc, #184]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4013      	ands	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034f8:	4a25      	ldr	r2, [pc, #148]	; (8003590 <HAL_GPIO_Init+0x320>)
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fe:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_GPIO_Init+0x320>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	43db      	mvns	r3, r3
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4013      	ands	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003522:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_GPIO_Init+0x320>)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <HAL_GPIO_Init+0x320>)
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	43db      	mvns	r3, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4013      	ands	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800354c:	4a10      	ldr	r2, [pc, #64]	; (8003590 <HAL_GPIO_Init+0x320>)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3301      	adds	r3, #1
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b0f      	cmp	r3, #15
 800355c:	f67f ae96 	bls.w	800328c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003560:	bf00      	nop
 8003562:	3724      	adds	r7, #36	; 0x24
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	40023800 	.word	0x40023800
 8003570:	40013800 	.word	0x40013800
 8003574:	40020000 	.word	0x40020000
 8003578:	40020400 	.word	0x40020400
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40021000 	.word	0x40021000
 8003588:	40021400 	.word	0x40021400
 800358c:	40021800 	.word	0x40021800
 8003590:	40013c00 	.word	0x40013c00

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035e0:	e003      	b.n	80035ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	041a      	lsls	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0ca      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800360c:	4b67      	ldr	r3, [pc, #412]	; (80037ac <HAL_RCC_ClockConfig+0x1b4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d90c      	bls.n	8003634 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b64      	ldr	r3, [pc, #400]	; (80037ac <HAL_RCC_ClockConfig+0x1b4>)
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003622:	4b62      	ldr	r3, [pc, #392]	; (80037ac <HAL_RCC_ClockConfig+0x1b4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	429a      	cmp	r2, r3
 800362e:	d001      	beq.n	8003634 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e0b6      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d020      	beq.n	8003682 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800364c:	4b58      	ldr	r3, [pc, #352]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a57      	ldr	r2, [pc, #348]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003656:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003664:	4b52      	ldr	r3, [pc, #328]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4a51      	ldr	r2, [pc, #324]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800366a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800366e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003670:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	494c      	ldr	r1, [pc, #304]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b00      	cmp	r3, #0
 800368c:	d044      	beq.n	8003718 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d107      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b46      	ldr	r3, [pc, #280]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d119      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e07d      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d003      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	4b3e      	ldr	r3, [pc, #248]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e06d      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c6:	4b3a      	ldr	r3, [pc, #232]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e065      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d6:	4b36      	ldr	r3, [pc, #216]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 0203 	bic.w	r2, r3, #3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	4933      	ldr	r1, [pc, #204]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e8:	f7fd fcbe 	bl	8001068 <HAL_GetTick>
 80036ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f0:	f7fd fcba 	bl	8001068 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e04d      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	4b2a      	ldr	r3, [pc, #168]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 020c 	and.w	r2, r3, #12
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	429a      	cmp	r2, r3
 8003716:	d1eb      	bne.n	80036f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b24      	ldr	r3, [pc, #144]	; (80037ac <HAL_RCC_ClockConfig+0x1b4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d20c      	bcs.n	8003740 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_RCC_ClockConfig+0x1b4>)
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800372e:	4b1f      	ldr	r3, [pc, #124]	; (80037ac <HAL_RCC_ClockConfig+0x1b4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d001      	beq.n	8003740 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e030      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4915      	ldr	r1, [pc, #84]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	490d      	ldr	r1, [pc, #52]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800377e:	f000 f851 	bl	8003824 <HAL_RCC_GetSysClockFreq>
 8003782:	4601      	mov	r1, r0
 8003784:	4b0a      	ldr	r3, [pc, #40]	; (80037b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	5cd3      	ldrb	r3, [r2, r3]
 8003792:	fa21 f303 	lsr.w	r3, r1, r3
 8003796:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800379a:	2000      	movs	r0, #0
 800379c:	f7fd fc20 	bl	8000fe0 <HAL_InitTick>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023c00 	.word	0x40023c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	0800ba34 	.word	0x0800ba34
 80037b8:	20000124 	.word	0x20000124

080037bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	20000124 	.word	0x20000124

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d8:	f7ff fff0 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 80037dc:	4601      	mov	r1, r0
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	0a9b      	lsrs	r3, r3, #10
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	4a03      	ldr	r2, [pc, #12]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40023800 	.word	0x40023800
 80037f8:	0800ba44 	.word	0x0800ba44

080037fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003800:	f7ff ffdc 	bl	80037bc <HAL_RCC_GetHCLKFreq>
 8003804:	4601      	mov	r1, r0
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0b5b      	lsrs	r3, r3, #13
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4a03      	ldr	r2, [pc, #12]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003812:	5cd3      	ldrb	r3, [r2, r3]
 8003814:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40023800 	.word	0x40023800
 8003820:	0800ba44 	.word	0x0800ba44

08003824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800383e:	4bc6      	ldr	r3, [pc, #792]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f003 030c 	and.w	r3, r3, #12
 8003846:	2b0c      	cmp	r3, #12
 8003848:	f200 817e 	bhi.w	8003b48 <HAL_RCC_GetSysClockFreq+0x324>
 800384c:	a201      	add	r2, pc, #4	; (adr r2, 8003854 <HAL_RCC_GetSysClockFreq+0x30>)
 800384e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003852:	bf00      	nop
 8003854:	08003889 	.word	0x08003889
 8003858:	08003b49 	.word	0x08003b49
 800385c:	08003b49 	.word	0x08003b49
 8003860:	08003b49 	.word	0x08003b49
 8003864:	0800388f 	.word	0x0800388f
 8003868:	08003b49 	.word	0x08003b49
 800386c:	08003b49 	.word	0x08003b49
 8003870:	08003b49 	.word	0x08003b49
 8003874:	08003895 	.word	0x08003895
 8003878:	08003b49 	.word	0x08003b49
 800387c:	08003b49 	.word	0x08003b49
 8003880:	08003b49 	.word	0x08003b49
 8003884:	080039f1 	.word	0x080039f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003888:	4bb4      	ldr	r3, [pc, #720]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x338>)
 800388a:	613b      	str	r3, [r7, #16]
       break;
 800388c:	e15f      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800388e:	4bb4      	ldr	r3, [pc, #720]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003890:	613b      	str	r3, [r7, #16]
      break;
 8003892:	e15c      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003894:	4bb0      	ldr	r3, [pc, #704]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800389e:	4bae      	ldr	r3, [pc, #696]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d04a      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038aa:	4bab      	ldr	r3, [pc, #684]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	f04f 0400 	mov.w	r4, #0
 80038b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	ea03 0501 	and.w	r5, r3, r1
 80038c0:	ea04 0602 	and.w	r6, r4, r2
 80038c4:	4629      	mov	r1, r5
 80038c6:	4632      	mov	r2, r6
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	f04f 0400 	mov.w	r4, #0
 80038d0:	0154      	lsls	r4, r2, #5
 80038d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038d6:	014b      	lsls	r3, r1, #5
 80038d8:	4619      	mov	r1, r3
 80038da:	4622      	mov	r2, r4
 80038dc:	1b49      	subs	r1, r1, r5
 80038de:	eb62 0206 	sbc.w	r2, r2, r6
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	f04f 0400 	mov.w	r4, #0
 80038ea:	0194      	lsls	r4, r2, #6
 80038ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038f0:	018b      	lsls	r3, r1, #6
 80038f2:	1a5b      	subs	r3, r3, r1
 80038f4:	eb64 0402 	sbc.w	r4, r4, r2
 80038f8:	f04f 0100 	mov.w	r1, #0
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	00e2      	lsls	r2, r4, #3
 8003902:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003906:	00d9      	lsls	r1, r3, #3
 8003908:	460b      	mov	r3, r1
 800390a:	4614      	mov	r4, r2
 800390c:	195b      	adds	r3, r3, r5
 800390e:	eb44 0406 	adc.w	r4, r4, r6
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	0262      	lsls	r2, r4, #9
 800391c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003920:	0259      	lsls	r1, r3, #9
 8003922:	460b      	mov	r3, r1
 8003924:	4614      	mov	r4, r2
 8003926:	4618      	mov	r0, r3
 8003928:	4621      	mov	r1, r4
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f04f 0400 	mov.w	r4, #0
 8003930:	461a      	mov	r2, r3
 8003932:	4623      	mov	r3, r4
 8003934:	f7fd f9b2 	bl	8000c9c <__aeabi_uldivmod>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e049      	b.n	80039d4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003940:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	099b      	lsrs	r3, r3, #6
 8003946:	f04f 0400 	mov.w	r4, #0
 800394a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	ea03 0501 	and.w	r5, r3, r1
 8003956:	ea04 0602 	and.w	r6, r4, r2
 800395a:	4629      	mov	r1, r5
 800395c:	4632      	mov	r2, r6
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	f04f 0400 	mov.w	r4, #0
 8003966:	0154      	lsls	r4, r2, #5
 8003968:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800396c:	014b      	lsls	r3, r1, #5
 800396e:	4619      	mov	r1, r3
 8003970:	4622      	mov	r2, r4
 8003972:	1b49      	subs	r1, r1, r5
 8003974:	eb62 0206 	sbc.w	r2, r2, r6
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	f04f 0400 	mov.w	r4, #0
 8003980:	0194      	lsls	r4, r2, #6
 8003982:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003986:	018b      	lsls	r3, r1, #6
 8003988:	1a5b      	subs	r3, r3, r1
 800398a:	eb64 0402 	sbc.w	r4, r4, r2
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	00e2      	lsls	r2, r4, #3
 8003998:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800399c:	00d9      	lsls	r1, r3, #3
 800399e:	460b      	mov	r3, r1
 80039a0:	4614      	mov	r4, r2
 80039a2:	195b      	adds	r3, r3, r5
 80039a4:	eb44 0406 	adc.w	r4, r4, r6
 80039a8:	f04f 0100 	mov.w	r1, #0
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	02a2      	lsls	r2, r4, #10
 80039b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039b6:	0299      	lsls	r1, r3, #10
 80039b8:	460b      	mov	r3, r1
 80039ba:	4614      	mov	r4, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	4621      	mov	r1, r4
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f04f 0400 	mov.w	r4, #0
 80039c6:	461a      	mov	r2, r3
 80039c8:	4623      	mov	r3, r4
 80039ca:	f7fd f967 	bl	8000c9c <__aeabi_uldivmod>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039d4:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	3301      	adds	r3, #1
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	613b      	str	r3, [r7, #16]
      break;
 80039ee:	e0ae      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f0:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039fa:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d04a      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a06:	4b54      	ldr	r3, [pc, #336]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	099b      	lsrs	r3, r3, #6
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	ea03 0501 	and.w	r5, r3, r1
 8003a1c:	ea04 0602 	and.w	r6, r4, r2
 8003a20:	4629      	mov	r1, r5
 8003a22:	4632      	mov	r2, r6
 8003a24:	f04f 0300 	mov.w	r3, #0
 8003a28:	f04f 0400 	mov.w	r4, #0
 8003a2c:	0154      	lsls	r4, r2, #5
 8003a2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a32:	014b      	lsls	r3, r1, #5
 8003a34:	4619      	mov	r1, r3
 8003a36:	4622      	mov	r2, r4
 8003a38:	1b49      	subs	r1, r1, r5
 8003a3a:	eb62 0206 	sbc.w	r2, r2, r6
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	f04f 0400 	mov.w	r4, #0
 8003a46:	0194      	lsls	r4, r2, #6
 8003a48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a4c:	018b      	lsls	r3, r1, #6
 8003a4e:	1a5b      	subs	r3, r3, r1
 8003a50:	eb64 0402 	sbc.w	r4, r4, r2
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	00e2      	lsls	r2, r4, #3
 8003a5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a62:	00d9      	lsls	r1, r3, #3
 8003a64:	460b      	mov	r3, r1
 8003a66:	4614      	mov	r4, r2
 8003a68:	195b      	adds	r3, r3, r5
 8003a6a:	eb44 0406 	adc.w	r4, r4, r6
 8003a6e:	f04f 0100 	mov.w	r1, #0
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	0262      	lsls	r2, r4, #9
 8003a78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a7c:	0259      	lsls	r1, r3, #9
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4614      	mov	r4, r2
 8003a82:	4618      	mov	r0, r3
 8003a84:	4621      	mov	r1, r4
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f04f 0400 	mov.w	r4, #0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	f7fd f904 	bl	8000c9c <__aeabi_uldivmod>
 8003a94:	4603      	mov	r3, r0
 8003a96:	460c      	mov	r4, r1
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e049      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	4b2e      	ldr	r3, [pc, #184]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	f04f 0400 	mov.w	r4, #0
 8003aa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	ea03 0501 	and.w	r5, r3, r1
 8003ab2:	ea04 0602 	and.w	r6, r4, r2
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	4632      	mov	r2, r6
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	0154      	lsls	r4, r2, #5
 8003ac4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ac8:	014b      	lsls	r3, r1, #5
 8003aca:	4619      	mov	r1, r3
 8003acc:	4622      	mov	r2, r4
 8003ace:	1b49      	subs	r1, r1, r5
 8003ad0:	eb62 0206 	sbc.w	r2, r2, r6
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	f04f 0400 	mov.w	r4, #0
 8003adc:	0194      	lsls	r4, r2, #6
 8003ade:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ae2:	018b      	lsls	r3, r1, #6
 8003ae4:	1a5b      	subs	r3, r3, r1
 8003ae6:	eb64 0402 	sbc.w	r4, r4, r2
 8003aea:	f04f 0100 	mov.w	r1, #0
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003af8:	00d9      	lsls	r1, r3, #3
 8003afa:	460b      	mov	r3, r1
 8003afc:	4614      	mov	r4, r2
 8003afe:	195b      	adds	r3, r3, r5
 8003b00:	eb44 0406 	adc.w	r4, r4, r6
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	02a2      	lsls	r2, r4, #10
 8003b0e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b12:	0299      	lsls	r1, r3, #10
 8003b14:	460b      	mov	r3, r1
 8003b16:	4614      	mov	r4, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f04f 0400 	mov.w	r4, #0
 8003b22:	461a      	mov	r2, r3
 8003b24:	4623      	mov	r3, r4
 8003b26:	f7fd f8b9 	bl	8000c9c <__aeabi_uldivmod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0f1b      	lsrs	r3, r3, #28
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b44:	613b      	str	r3, [r7, #16]
      break;
 8003b46:	e002      	b.n	8003b4e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b48:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x338>)
 8003b4a:	613b      	str	r3, [r7, #16]
      break;
 8003b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b4e:	693b      	ldr	r3, [r7, #16]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8083 	beq.w	8003c84 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b7e:	4b95      	ldr	r3, [pc, #596]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d019      	beq.n	8003bbe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b8a:	4b92      	ldr	r3, [pc, #584]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d106      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003b96:	4b8f      	ldr	r3, [pc, #572]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ba2:	d00c      	beq.n	8003bbe <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba4:	4b8b      	ldr	r3, [pc, #556]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d112      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb0:	4b88      	ldr	r3, [pc, #544]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bbe:	4b85      	ldr	r3, [pc, #532]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d05b      	beq.n	8003c82 <HAL_RCC_OscConfig+0x11e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d157      	bne.n	8003c82 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e216      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d106      	bne.n	8003bee <HAL_RCC_OscConfig+0x8a>
 8003be0:	4b7c      	ldr	r3, [pc, #496]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a7b      	ldr	r2, [pc, #492]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	e01d      	b.n	8003c2a <HAL_RCC_OscConfig+0xc6>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bf6:	d10c      	bne.n	8003c12 <HAL_RCC_OscConfig+0xae>
 8003bf8:	4b76      	ldr	r3, [pc, #472]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a75      	ldr	r2, [pc, #468]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	4b73      	ldr	r3, [pc, #460]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a72      	ldr	r2, [pc, #456]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	e00b      	b.n	8003c2a <HAL_RCC_OscConfig+0xc6>
 8003c12:	4b70      	ldr	r3, [pc, #448]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6f      	ldr	r2, [pc, #444]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b6d      	ldr	r3, [pc, #436]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6c      	ldr	r2, [pc, #432]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c32:	f7fd fa19 	bl	8001068 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c3a:	f7fd fa15 	bl	8001068 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e1db      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4c:	4b61      	ldr	r3, [pc, #388]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0xd6>
 8003c58:	e014      	b.n	8003c84 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5a:	f7fd fa05 	bl	8001068 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c62:	f7fd fa01 	bl	8001068 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b64      	cmp	r3, #100	; 0x64
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e1c7      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c74:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0xfe>
 8003c80:	e000      	b.n	8003c84 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d06f      	beq.n	8003d70 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003c90:	4b50      	ldr	r3, [pc, #320]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d017      	beq.n	8003ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003c9c:	4b4d      	ldr	r3, [pc, #308]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ca8:	4b4a      	ldr	r3, [pc, #296]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb4:	4b47      	ldr	r3, [pc, #284]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003cbc:	2b0c      	cmp	r3, #12
 8003cbe:	d11c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc0:	4b44      	ldr	r3, [pc, #272]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d116      	bne.n	8003cfa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ccc:	4b41      	ldr	r3, [pc, #260]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x180>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e18f      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4938      	ldr	r1, [pc, #224]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf8:	e03a      	b.n	8003d70 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d020      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fd f9ae 	bl	8001068 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d10:	f7fd f9aa 	bl	8001068 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e170      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d22:	4b2c      	ldr	r3, [pc, #176]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2e:	4b29      	ldr	r3, [pc, #164]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4925      	ldr	r1, [pc, #148]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	600b      	str	r3, [r1, #0]
 8003d42:	e015      	b.n	8003d70 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d44:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fd f98d 	bl	8001068 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fd f989 	bl	8001068 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e14f      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d64:	4b1b      	ldr	r3, [pc, #108]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d037      	beq.n	8003dec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d016      	beq.n	8003db2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_RCC_OscConfig+0x278>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7fd f96d 	bl	8001068 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d92:	f7fd f969 	bl	8001068 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e12f      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da4:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x22e>
 8003db0:	e01c      	b.n	8003dec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_OscConfig+0x278>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db8:	f7fd f956 	bl	8001068 <HAL_GetTick>
 8003dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbe:	e00f      	b.n	8003de0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc0:	f7fd f952 	bl	8001068 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d908      	bls.n	8003de0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e118      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	42470000 	.word	0x42470000
 8003ddc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	4b8a      	ldr	r3, [pc, #552]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003de2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e9      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8097 	beq.w	8003f28 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfe:	4b83      	ldr	r3, [pc, #524]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	4b7f      	ldr	r3, [pc, #508]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a7e      	ldr	r2, [pc, #504]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
 8003e1a:	4b7c      	ldr	r3, [pc, #496]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	4b79      	ldr	r3, [pc, #484]	; (8004010 <HAL_RCC_OscConfig+0x4ac>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d118      	bne.n	8003e68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e36:	4b76      	ldr	r3, [pc, #472]	; (8004010 <HAL_RCC_OscConfig+0x4ac>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a75      	ldr	r2, [pc, #468]	; (8004010 <HAL_RCC_OscConfig+0x4ac>)
 8003e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e42:	f7fd f911 	bl	8001068 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e4a:	f7fd f90d 	bl	8001068 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0d3      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	4b6c      	ldr	r3, [pc, #432]	; (8004010 <HAL_RCC_OscConfig+0x4ac>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f0      	beq.n	8003e4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x31a>
 8003e70:	4b66      	ldr	r3, [pc, #408]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e74:	4a65      	ldr	r2, [pc, #404]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e76:	f043 0301 	orr.w	r3, r3, #1
 8003e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e7c:	e01c      	b.n	8003eb8 <HAL_RCC_OscConfig+0x354>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b05      	cmp	r3, #5
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x33c>
 8003e86:	4b61      	ldr	r3, [pc, #388]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a60      	ldr	r2, [pc, #384]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
 8003e92:	4b5e      	ldr	r3, [pc, #376]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e96:	4a5d      	ldr	r2, [pc, #372]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCC_OscConfig+0x354>
 8003ea0:	4b5a      	ldr	r3, [pc, #360]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea4:	4a59      	ldr	r2, [pc, #356]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	6713      	str	r3, [r2, #112]	; 0x70
 8003eac:	4b57      	ldr	r3, [pc, #348]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a56      	ldr	r2, [pc, #344]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003eb2:	f023 0304 	bic.w	r3, r3, #4
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d015      	beq.n	8003eec <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd f8d2 	bl	8001068 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec6:	e00a      	b.n	8003ede <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fd f8ce 	bl	8001068 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e092      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ede:	4b4b      	ldr	r3, [pc, #300]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ee      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x364>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd f8bc 	bl	8001068 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef4:	f7fd f8b8 	bl	8001068 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e07c      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0a:	4b40      	ldr	r3, [pc, #256]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	4a3a      	ldr	r2, [pc, #232]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d068      	beq.n	8004002 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f30:	4b36      	ldr	r3, [pc, #216]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 030c 	and.w	r3, r3, #12
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d060      	beq.n	8003ffe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d145      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4b33      	ldr	r3, [pc, #204]	; (8004014 <HAL_RCC_OscConfig+0x4b0>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd f88d 	bl	8001068 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f52:	f7fd f889 	bl	8001068 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e04f      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f64:	4b29      	ldr	r3, [pc, #164]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	019b      	lsls	r3, r3, #6
 8003f80:	431a      	orrs	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	071b      	lsls	r3, r3, #28
 8003f9c:	491b      	ldr	r1, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <HAL_RCC_OscConfig+0x4b0>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa8:	f7fd f85e 	bl	8001068 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fd f85a 	bl	8001068 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e020      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x44c>
 8003fce:	e018      	b.n	8004002 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b10      	ldr	r3, [pc, #64]	; (8004014 <HAL_RCC_OscConfig+0x4b0>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fd f847 	bl	8001068 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fd f843 	bl	8001068 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e009      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_RCC_OscConfig+0x4a8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1f0      	bne.n	8003fde <HAL_RCC_OscConfig+0x47a>
 8003ffc:	e001      	b.n	8004002 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3718      	adds	r7, #24
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	40023800 	.word	0x40023800
 8004010:	40007000 	.word	0x40007000
 8004014:	42470060 	.word	0x42470060

08004018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e056      	b.n	80040d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f004 ff9d 	bl	8008f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004060:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	431a      	orrs	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	ea42 0103 	orr.w	r1, r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	f003 0104 	and.w	r1, r3, #4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_SPI_Transmit+0x22>
 80040fe:	2302      	movs	r3, #2
 8004100:	e11e      	b.n	8004340 <HAL_SPI_Transmit+0x260>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800410a:	f7fc ffad 	bl	8001068 <HAL_GetTick>
 800410e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d002      	beq.n	8004126 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004120:	2302      	movs	r3, #2
 8004122:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004124:	e103      	b.n	800432e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <HAL_SPI_Transmit+0x52>
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004136:	e0fa      	b.n	800432e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2203      	movs	r2, #3
 800413c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	88fa      	ldrh	r2, [r7, #6]
 8004150:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	88fa      	ldrh	r2, [r7, #6]
 8004156:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417e:	d107      	bne.n	8004190 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800418e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419a:	2b40      	cmp	r3, #64	; 0x40
 800419c:	d007      	beq.n	80041ae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b6:	d14b      	bne.n	8004250 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_SPI_Transmit+0xe6>
 80041c0:	8afb      	ldrh	r3, [r7, #22]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d13e      	bne.n	8004244 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	881a      	ldrh	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	1c9a      	adds	r2, r3, #2
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80041ea:	e02b      	b.n	8004244 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d112      	bne.n	8004220 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fe:	881a      	ldrh	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	1c9a      	adds	r2, r3, #2
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	86da      	strh	r2, [r3, #54]	; 0x36
 800421e:	e011      	b.n	8004244 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004220:	f7fc ff22 	bl	8001068 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d803      	bhi.n	8004238 <HAL_SPI_Transmit+0x158>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004236:	d102      	bne.n	800423e <HAL_SPI_Transmit+0x15e>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d102      	bne.n	8004244 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004242:	e074      	b.n	800432e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004248:	b29b      	uxth	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1ce      	bne.n	80041ec <HAL_SPI_Transmit+0x10c>
 800424e:	e04c      	b.n	80042ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_SPI_Transmit+0x17e>
 8004258:	8afb      	ldrh	r3, [r7, #22]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d140      	bne.n	80042e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	3b01      	subs	r3, #1
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004284:	e02c      	b.n	80042e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d113      	bne.n	80042bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	330c      	adds	r3, #12
 800429e:	7812      	ldrb	r2, [r2, #0]
 80042a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80042ba:	e011      	b.n	80042e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042bc:	f7fc fed4 	bl	8001068 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d803      	bhi.n	80042d4 <HAL_SPI_Transmit+0x1f4>
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d2:	d102      	bne.n	80042da <HAL_SPI_Transmit+0x1fa>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80042de:	e026      	b.n	800432e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1cd      	bne.n	8004286 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	6839      	ldr	r1, [r7, #0]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 fba4 	bl	8004a3c <SPI_EndRxTxTransaction>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e000      	b.n	800432e <HAL_SPI_Transmit+0x24e>
  }

error:
 800432c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2201      	movs	r2, #1
 8004332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800433e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af02      	add	r7, sp, #8
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004364:	d112      	bne.n	800438c <HAL_SPI_Receive+0x44>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10e      	bne.n	800438c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2204      	movs	r2, #4
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8e9 	bl	800455a <HAL_SPI_TransmitReceive>
 8004388:	4603      	mov	r3, r0
 800438a:	e0e2      	b.n	8004552 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004392:	2b01      	cmp	r3, #1
 8004394:	d101      	bne.n	800439a <HAL_SPI_Receive+0x52>
 8004396:	2302      	movs	r3, #2
 8004398:	e0db      	b.n	8004552 <HAL_SPI_Receive+0x20a>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043a2:	f7fc fe61 	bl	8001068 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d002      	beq.n	80043ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80043b4:	2302      	movs	r3, #2
 80043b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043b8:	e0c2      	b.n	8004540 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d002      	beq.n	80043c6 <HAL_SPI_Receive+0x7e>
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d102      	bne.n	80043cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043ca:	e0b9      	b.n	8004540 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2204      	movs	r2, #4
 80043d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004412:	d107      	bne.n	8004424 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004422:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	d007      	beq.n	8004442 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004440:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d162      	bne.n	8004510 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800444a:	e02e      	b.n	80044aa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b01      	cmp	r3, #1
 8004458:	d115      	bne.n	8004486 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f103 020c 	add.w	r2, r3, #12
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	7812      	ldrb	r2, [r2, #0]
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004484:	e011      	b.n	80044aa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004486:	f7fc fdef 	bl	8001068 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d803      	bhi.n	800449e <HAL_SPI_Receive+0x156>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449c:	d102      	bne.n	80044a4 <HAL_SPI_Receive+0x15c>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044a8:	e04a      	b.n	8004540 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1cb      	bne.n	800444c <HAL_SPI_Receive+0x104>
 80044b4:	e031      	b.n	800451a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d113      	bne.n	80044ec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	b292      	uxth	r2, r2
 80044d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	1c9a      	adds	r2, r3, #2
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044ea:	e011      	b.n	8004510 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ec:	f7fc fdbc 	bl	8001068 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d803      	bhi.n	8004504 <HAL_SPI_Receive+0x1bc>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004502:	d102      	bne.n	800450a <HAL_SPI_Receive+0x1c2>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800450e:	e017      	b.n	8004540 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004514:	b29b      	uxth	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1cd      	bne.n	80044b6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	6839      	ldr	r1, [r7, #0]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 fa27 	bl	8004972 <SPI_EndRxTransaction>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2220      	movs	r2, #32
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	75fb      	strb	r3, [r7, #23]
 800453c:	e000      	b.n	8004540 <HAL_SPI_Receive+0x1f8>
  }

error :
 800453e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004550:	7dfb      	ldrb	r3, [r7, #23]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b08c      	sub	sp, #48	; 0x30
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004568:	2301      	movs	r3, #1
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_SPI_TransmitReceive+0x26>
 800457c:	2302      	movs	r3, #2
 800457e:	e18a      	b.n	8004896 <HAL_SPI_TransmitReceive+0x33c>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004588:	f7fc fd6e 	bl	8001068 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800459e:	887b      	ldrh	r3, [r7, #2]
 80045a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d00f      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x70>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045b0:	d107      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d103      	bne.n	80045c2 <HAL_SPI_TransmitReceive+0x68>
 80045ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d003      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
 80045c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045c8:	e15b      	b.n	8004882 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x82>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x82>
 80045d6:	887b      	ldrh	r3, [r7, #2]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80045e2:	e14e      	b.n	8004882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d003      	beq.n	80045f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2205      	movs	r2, #5
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	887a      	ldrh	r2, [r7, #2]
 8004608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	887a      	ldrh	r2, [r7, #2]
 800460e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	887a      	ldrh	r2, [r7, #2]
 800461a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	887a      	ldrh	r2, [r7, #2]
 8004620:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b40      	cmp	r3, #64	; 0x40
 800463a:	d007      	beq.n	800464c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800464a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004654:	d178      	bne.n	8004748 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x10a>
 800465e:	8b7b      	ldrh	r3, [r7, #26]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d166      	bne.n	8004732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	1c9a      	adds	r2, r3, #2
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004688:	e053      	b.n	8004732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b02      	cmp	r3, #2
 8004696:	d11b      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x176>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <HAL_SPI_TransmitReceive+0x176>
 80046a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d113      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	881a      	ldrh	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d119      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x1b8>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d014      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f2:	b292      	uxth	r2, r2
 80046f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fa:	1c9a      	adds	r2, r3, #2
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004704:	b29b      	uxth	r3, r3
 8004706:	3b01      	subs	r3, #1
 8004708:	b29a      	uxth	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800470e:	2301      	movs	r3, #1
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004712:	f7fc fca9 	bl	8001068 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800471e:	429a      	cmp	r2, r3
 8004720:	d807      	bhi.n	8004732 <HAL_SPI_TransmitReceive+0x1d8>
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004728:	d003      	beq.n	8004732 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004730:	e0a7      	b.n	8004882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004736:	b29b      	uxth	r3, r3
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1a6      	bne.n	800468a <HAL_SPI_TransmitReceive+0x130>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1a1      	bne.n	800468a <HAL_SPI_TransmitReceive+0x130>
 8004746:	e07c      	b.n	8004842 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x1fc>
 8004750:	8b7b      	ldrh	r3, [r7, #26]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d16b      	bne.n	800482e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	330c      	adds	r3, #12
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800477c:	e057      	b.n	800482e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d11c      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x26c>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0x26c>
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004798:	2b01      	cmp	r3, #1
 800479a:	d114      	bne.n	80047c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d119      	bne.n	8004808 <HAL_SPI_TransmitReceive+0x2ae>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d014      	beq.n	8004808 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	1c5a      	adds	r2, r3, #1
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004804:	2301      	movs	r3, #1
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004808:	f7fc fc2e 	bl	8001068 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004814:	429a      	cmp	r2, r3
 8004816:	d803      	bhi.n	8004820 <HAL_SPI_TransmitReceive+0x2c6>
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481e:	d102      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x2cc>
 8004820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800482c:	e029      	b.n	8004882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1a2      	bne.n	800477e <HAL_SPI_TransmitReceive+0x224>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d19d      	bne.n	800477e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f8f8 	bl	8004a3c <SPI_EndRxTxTransaction>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d006      	beq.n	8004860 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800485e:	e010      	b.n	8004882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	e000      	b.n	8004882 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004896:	4618      	mov	r0, r3
 8004898:	3730      	adds	r7, #48	; 0x30
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4613      	mov	r3, r2
 80048ac:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ae:	e04c      	b.n	800494a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b6:	d048      	beq.n	800494a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80048b8:	f7fc fbd6 	bl	8001068 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d902      	bls.n	80048ce <SPI_WaitFlagStateUntilTimeout+0x30>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d13d      	bne.n	800494a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048e6:	d111      	bne.n	800490c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f0:	d004      	beq.n	80048fc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048fa:	d107      	bne.n	800490c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800490a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004914:	d10f      	bne.n	8004936 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e00f      	b.n	800496a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4013      	ands	r3, r2
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	429a      	cmp	r2, r3
 8004958:	bf0c      	ite	eq
 800495a:	2301      	moveq	r3, #1
 800495c:	2300      	movne	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	429a      	cmp	r2, r3
 8004966:	d1a3      	bne.n	80048b0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af02      	add	r7, sp, #8
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004986:	d111      	bne.n	80049ac <SPI_EndRxTransaction+0x3a>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	d004      	beq.n	800499c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499a:	d107      	bne.n	80049ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049aa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b4:	d12a      	bne.n	8004a0c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049be:	d012      	beq.n	80049e6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	9300      	str	r3, [sp, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2200      	movs	r2, #0
 80049c8:	2180      	movs	r1, #128	; 0x80
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff ff67 	bl	800489e <SPI_WaitFlagStateUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02d      	beq.n	8004a32 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f043 0220 	orr.w	r2, r3, #32
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e026      	b.n	8004a34 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2200      	movs	r2, #0
 80049ee:	2101      	movs	r1, #1
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f7ff ff54 	bl	800489e <SPI_WaitFlagStateUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01a      	beq.n	8004a32 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e013      	b.n	8004a34 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2200      	movs	r2, #0
 8004a14:	2101      	movs	r1, #1
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f7ff ff41 	bl	800489e <SPI_WaitFlagStateUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e000      	b.n	8004a34 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a48:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <SPI_EndRxTxTransaction+0x7c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a1b      	ldr	r2, [pc, #108]	; (8004abc <SPI_EndRxTxTransaction+0x80>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	0d5b      	lsrs	r3, r3, #21
 8004a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a58:	fb02 f303 	mul.w	r3, r2, r3
 8004a5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a66:	d112      	bne.n	8004a8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2180      	movs	r1, #128	; 0x80
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7ff ff13 	bl	800489e <SPI_WaitFlagStateUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f043 0220 	orr.w	r2, r3, #32
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e00f      	b.n	8004aae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa4:	2b80      	cmp	r3, #128	; 0x80
 8004aa6:	d0f2      	beq.n	8004a8e <SPI_EndRxTxTransaction+0x52>
 8004aa8:	e000      	b.n	8004aac <SPI_EndRxTxTransaction+0x70>
        break;
 8004aaa:	bf00      	nop
  }

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20000124 	.word	0x20000124
 8004abc:	165e9f81 	.word	0x165e9f81

08004ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e01d      	b.n	8004b0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d106      	bne.n	8004aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f004 fa94 	bl	8009014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f000 fa7a 	bl	8004ff8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b06      	cmp	r3, #6
 8004b36:	d007      	beq.n	8004b48 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68da      	ldr	r2, [r3, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d007      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d122      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d11b      	bne.n	8004c02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0202 	mvn.w	r2, #2
 8004bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f9e7 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004bee:	e005      	b.n	8004bfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f9d9 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9ea 	bl	8004fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d122      	bne.n	8004c56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d11b      	bne.n	8004c56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f06f 0204 	mvn.w	r2, #4
 8004c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9bd 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004c42:	e005      	b.n	8004c50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f9af 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f9c0 	bl	8004fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d122      	bne.n	8004caa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d11b      	bne.n	8004caa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f06f 0208 	mvn.w	r2, #8
 8004c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f993 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004c96:	e005      	b.n	8004ca4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f985 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f996 	bl	8004fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0310 	and.w	r3, r3, #16
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d122      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d11b      	bne.n	8004cfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f06f 0210 	mvn.w	r2, #16
 8004cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 f969 	bl	8004fbc <HAL_TIM_IC_CaptureCallback>
 8004cea:	e005      	b.n	8004cf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f95b 	bl	8004fa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f96c 	bl	8004fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10e      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d107      	bne.n	8004d2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f06f 0201 	mvn.w	r2, #1
 8004d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f003 fe03 	bl	8008930 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d34:	2b80      	cmp	r3, #128	; 0x80
 8004d36:	d10e      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b80      	cmp	r3, #128	; 0x80
 8004d44:	d107      	bne.n	8004d56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fb60 	bl	8005416 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	d10e      	bne.n	8004d82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d107      	bne.n	8004d82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 f931 	bl	8004fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d10e      	bne.n	8004dae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f003 0320 	and.w	r3, r3, #32
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d107      	bne.n	8004dae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0220 	mvn.w	r2, #32
 8004da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fb2a 	bl	8005402 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_ConfigClockSource+0x18>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0a6      	b.n	8004f1c <HAL_TIM_ConfigClockSource+0x166>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b40      	cmp	r3, #64	; 0x40
 8004e04:	d067      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x120>
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d80b      	bhi.n	8004e22 <HAL_TIM_ConfigClockSource+0x6c>
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d073      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x140>
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d802      	bhi.n	8004e18 <HAL_TIM_ConfigClockSource+0x62>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d06f      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004e16:	e078      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d06c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x140>
 8004e1c:	2b30      	cmp	r3, #48	; 0x30
 8004e1e:	d06a      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004e20:	e073      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e22:	2b70      	cmp	r3, #112	; 0x70
 8004e24:	d00d      	beq.n	8004e42 <HAL_TIM_ConfigClockSource+0x8c>
 8004e26:	2b70      	cmp	r3, #112	; 0x70
 8004e28:	d804      	bhi.n	8004e34 <HAL_TIM_ConfigClockSource+0x7e>
 8004e2a:	2b50      	cmp	r3, #80	; 0x50
 8004e2c:	d033      	beq.n	8004e96 <HAL_TIM_ConfigClockSource+0xe0>
 8004e2e:	2b60      	cmp	r3, #96	; 0x60
 8004e30:	d041      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004e32:	e06a      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e38:	d066      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x152>
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	d017      	beq.n	8004e70 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004e40:	e063      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6899      	ldr	r1, [r3, #8]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f000 fa71 	bl	8005338 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	609a      	str	r2, [r3, #8]
      break;
 8004e6e:	e04c      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	6899      	ldr	r1, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f000 fa5a 	bl	8005338 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e92:	609a      	str	r2, [r3, #8]
      break;
 8004e94:	e039      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	6859      	ldr	r1, [r3, #4]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f000 f9ce 	bl	8005244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2150      	movs	r1, #80	; 0x50
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f000 fa27 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004eb4:	e029      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 f9ed 	bl	80052a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2160      	movs	r1, #96	; 0x60
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fa17 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e019      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 f9ae 	bl	8005244 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fa07 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e009      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f000 f9fe 	bl	8005302 <TIM_ITRx_SetConfig>
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004f08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e031      	b.n	8004fa0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if(TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f8f2 	bl	8005138 <TIM_SlaveTimer_SetConfig>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d009      	beq.n	8004f6e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
      htim->State = HAL_TIM_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e018      	b.n	8004fa0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f7c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f8c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a40      	ldr	r2, [pc, #256]	; (800510c <TIM_Base_SetConfig+0x114>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d013      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005016:	d00f      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a3d      	ldr	r2, [pc, #244]	; (8005110 <TIM_Base_SetConfig+0x118>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00b      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <TIM_Base_SetConfig+0x11c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d007      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a3b      	ldr	r2, [pc, #236]	; (8005118 <TIM_Base_SetConfig+0x120>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_Base_SetConfig+0x40>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a3a      	ldr	r2, [pc, #232]	; (800511c <TIM_Base_SetConfig+0x124>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d108      	bne.n	800504a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a2f      	ldr	r2, [pc, #188]	; (800510c <TIM_Base_SetConfig+0x114>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d02b      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005058:	d027      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a2c      	ldr	r2, [pc, #176]	; (8005110 <TIM_Base_SetConfig+0x118>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d023      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a2b      	ldr	r2, [pc, #172]	; (8005114 <TIM_Base_SetConfig+0x11c>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d01f      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <TIM_Base_SetConfig+0x120>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d01b      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a29      	ldr	r2, [pc, #164]	; (800511c <TIM_Base_SetConfig+0x124>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d017      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a28      	ldr	r2, [pc, #160]	; (8005120 <TIM_Base_SetConfig+0x128>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d013      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a27      	ldr	r2, [pc, #156]	; (8005124 <TIM_Base_SetConfig+0x12c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d00f      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <TIM_Base_SetConfig+0x130>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00b      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a25      	ldr	r2, [pc, #148]	; (800512c <TIM_Base_SetConfig+0x134>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a24      	ldr	r2, [pc, #144]	; (8005130 <TIM_Base_SetConfig+0x138>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_Base_SetConfig+0xb2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a23      	ldr	r2, [pc, #140]	; (8005134 <TIM_Base_SetConfig+0x13c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d108      	bne.n	80050bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a0a      	ldr	r2, [pc, #40]	; (800510c <TIM_Base_SetConfig+0x114>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d003      	beq.n	80050f0 <TIM_Base_SetConfig+0xf8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a0c      	ldr	r2, [pc, #48]	; (800511c <TIM_Base_SetConfig+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d103      	bne.n	80050f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	615a      	str	r2, [r3, #20]
}
 80050fe:	bf00      	nop
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40010400 	.word	0x40010400
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800
 800512c:	40001800 	.word	0x40001800
 8005130:	40001c00 	.word	0x40001c00
 8005134:	40002000 	.word	0x40002000

08005138 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                     TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f023 0307 	bic.w	r3, r3, #7
 8005162:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b30      	cmp	r3, #48	; 0x30
 800517c:	d05c      	beq.n	8005238 <TIM_SlaveTimer_SetConfig+0x100>
 800517e:	2b30      	cmp	r3, #48	; 0x30
 8005180:	d806      	bhi.n	8005190 <TIM_SlaveTimer_SetConfig+0x58>
 8005182:	2b10      	cmp	r3, #16
 8005184:	d058      	beq.n	8005238 <TIM_SlaveTimer_SetConfig+0x100>
 8005186:	2b20      	cmp	r3, #32
 8005188:	d056      	beq.n	8005238 <TIM_SlaveTimer_SetConfig+0x100>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d054      	beq.n	8005238 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800518e:	e054      	b.n	800523a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8005190:	2b50      	cmp	r3, #80	; 0x50
 8005192:	d03d      	beq.n	8005210 <TIM_SlaveTimer_SetConfig+0xd8>
 8005194:	2b50      	cmp	r3, #80	; 0x50
 8005196:	d802      	bhi.n	800519e <TIM_SlaveTimer_SetConfig+0x66>
 8005198:	2b40      	cmp	r3, #64	; 0x40
 800519a:	d010      	beq.n	80051be <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800519c:	e04d      	b.n	800523a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800519e:	2b60      	cmp	r3, #96	; 0x60
 80051a0:	d040      	beq.n	8005224 <TIM_SlaveTimer_SetConfig+0xec>
 80051a2:	2b70      	cmp	r3, #112	; 0x70
 80051a4:	d000      	beq.n	80051a8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80051a6:	e048      	b.n	800523a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6818      	ldr	r0, [r3, #0]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	68d9      	ldr	r1, [r3, #12]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f000 f8be 	bl	8005338 <TIM_ETR_SetConfig>
      break;
 80051bc:	e03d      	b.n	800523a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	d101      	bne.n	80051ca <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e038      	b.n	800523c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	6a1a      	ldr	r2, [r3, #32]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0201 	bic.w	r2, r2, #1
 80051e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051f0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	621a      	str	r2, [r3, #32]
      break;
 800520e:	e014      	b.n	800523a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6818      	ldr	r0, [r3, #0]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	6899      	ldr	r1, [r3, #8]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	461a      	mov	r2, r3
 800521e:	f000 f811 	bl	8005244 <TIM_TI1_ConfigInputStage>
      break;
 8005222:	e00a      	b.n	800523a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6818      	ldr	r0, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	6899      	ldr	r1, [r3, #8]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	461a      	mov	r2, r3
 8005232:	f000 f836 	bl	80052a2 <TIM_TI2_ConfigInputStage>
      break;
 8005236:	e000      	b.n	800523a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8005238:	bf00      	nop
  }
  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	f023 0201 	bic.w	r2, r3, #1
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800526e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f023 030a 	bic.w	r3, r3, #10
 8005280:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	621a      	str	r2, [r3, #32]
}
 8005296:	bf00      	nop
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b087      	sub	sp, #28
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	60f8      	str	r0, [r7, #12]
 80052aa:	60b9      	str	r1, [r7, #8]
 80052ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0210 	bic.w	r2, r3, #16
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	031b      	lsls	r3, r3, #12
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	621a      	str	r2, [r3, #32]
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005302:	b480      	push	{r7}
 8005304:	b085      	sub	sp, #20
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005318:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	f043 0307 	orr.w	r3, r3, #7
 8005324:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	609a      	str	r2, [r3, #8]
}
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
 8005344:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005352:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	021a      	lsls	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	431a      	orrs	r2, r3
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	4313      	orrs	r3, r2
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	609a      	str	r2, [r3, #8]
}
 800536c:	bf00      	nop
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800538c:	2302      	movs	r3, #2
 800538e:	e032      	b.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005416:	b480      	push	{r7}
 8005418:	b083      	sub	sp, #12
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800542a:	b580      	push	{r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e03f      	b.n	80054bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f003 fe9f 	bl	8009194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2224      	movs	r2, #36	; 0x24
 800545a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68da      	ldr	r2, [r3, #12]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800546c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fbce 	bl	8005c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	691a      	ldr	r2, [r3, #16]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005482:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	695a      	ldr	r2, [r3, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005492:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2220      	movs	r2, #32
 80054b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	4613      	mov	r3, r2
 80054d2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	f040 8083 	bne.w	80055ec <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_UART_Transmit+0x2e>
 80054ec:	88fb      	ldrh	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e07b      	b.n	80055ee <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_UART_Transmit+0x40>
 8005500:	2302      	movs	r3, #2
 8005502:	e074      	b.n	80055ee <HAL_UART_Transmit+0x12a>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2221      	movs	r2, #33	; 0x21
 8005516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800551a:	f7fb fda5 	bl	8001068 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	88fa      	ldrh	r2, [r7, #6]
 8005524:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800552c:	e042      	b.n	80055b4 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005532:	b29b      	uxth	r3, r3
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005544:	d122      	bne.n	800558c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2200      	movs	r2, #0
 800554e:	2180      	movs	r1, #128	; 0x80
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f9f1 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e046      	b.n	80055ee <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	461a      	mov	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005572:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d103      	bne.n	8005584 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	3302      	adds	r3, #2
 8005580:	60bb      	str	r3, [r7, #8]
 8005582:	e017      	b.n	80055b4 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	3301      	adds	r3, #1
 8005588:	60bb      	str	r3, [r7, #8]
 800558a:	e013      	b.n	80055b4 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2200      	movs	r2, #0
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f000 f9ce 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e023      	b.n	80055ee <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	60ba      	str	r2, [r7, #8]
 80055ac:	781a      	ldrb	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1b7      	bne.n	800552e <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2200      	movs	r2, #0
 80055c6:	2140      	movs	r1, #64	; 0x40
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f9b5 	bl	8005938 <UART_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e00a      	b.n	80055ee <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	e000      	b.n	80055ee <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80055ec:	2302      	movs	r3, #2
  }
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3718      	adds	r7, #24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	d130      	bne.n	8005672 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Transmit_IT+0x26>
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e029      	b.n	8005674 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_UART_Transmit_IT+0x38>
 800562a:	2302      	movs	r3, #2
 800562c:	e022      	b.n	8005674 <HAL_UART_Transmit_IT+0x7e>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	88fa      	ldrh	r2, [r7, #6]
 8005640:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	88fa      	ldrh	r2, [r7, #6]
 8005646:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2221      	movs	r2, #33	; 0x21
 8005652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800566c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	e000      	b.n	8005674 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	4613      	mov	r3, r2
 800568c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b20      	cmp	r3, #32
 8005698:	d140      	bne.n	800571c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <HAL_UART_Receive_IT+0x26>
 80056a0:	88fb      	ldrh	r3, [r7, #6]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e039      	b.n	800571e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_UART_Receive_IT+0x38>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e032      	b.n	800571e <HAL_UART_Receive_IT+0x9e>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	88fa      	ldrh	r2, [r7, #6]
 80056d0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2222      	movs	r2, #34	; 0x22
 80056dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68da      	ldr	r2, [r3, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056f6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	695a      	ldr	r2, [r3, #20]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0220 	orr.w	r2, r2, #32
 8005716:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e000      	b.n	800571e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800571c:	2302      	movs	r3, #2
  }
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10d      	bne.n	800577e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_UART_IRQHandler+0x52>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f9c8 	bl	8005b0c <UART_Receive_IT>
      return;
 800577c:	e0cc      	b.n	8005918 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80ab 	beq.w	80058dc <HAL_UART_IRQHandler+0x1b0>
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b00      	cmp	r3, #0
 800578e:	d105      	bne.n	800579c <HAL_UART_IRQHandler+0x70>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 80a0 	beq.w	80058dc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_UART_IRQHandler+0x90>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	f043 0201 	orr.w	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_UART_IRQHandler+0xb0>
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	f043 0202 	orr.w	r2, r3, #2
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00a      	beq.n	80057fc <HAL_UART_IRQHandler+0xd0>
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f4:	f043 0204 	orr.w	r2, r3, #4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <HAL_UART_IRQHandler+0xf0>
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f043 0208 	orr.w	r2, r3, #8
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d078      	beq.n	8005916 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0320 	and.w	r3, r3, #32
 800582a:	2b00      	cmp	r3, #0
 800582c:	d007      	beq.n	800583e <HAL_UART_IRQHandler+0x112>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d002      	beq.n	800583e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f967 	bl	8005b0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005858:	f003 0308 	and.w	r3, r3, #8
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <HAL_UART_IRQHandler+0x13a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d031      	beq.n	80058ca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f8b0 	bl	80059cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005876:	2b40      	cmp	r3, #64	; 0x40
 8005878:	d123      	bne.n	80058c2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695a      	ldr	r2, [r3, #20]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005888:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	2b00      	cmp	r3, #0
 8005890:	d013      	beq.n	80058ba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005896:	4a22      	ldr	r2, [pc, #136]	; (8005920 <HAL_UART_IRQHandler+0x1f4>)
 8005898:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fd fa5c 	bl	8002d5c <HAL_DMA_Abort_IT>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	e00e      	b.n	80058d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f832 	bl	8005924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	e00a      	b.n	80058d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f82e 	bl	8005924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	e006      	b.n	80058d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f82a 	bl	8005924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80058d6:	e01e      	b.n	8005916 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	bf00      	nop
    return;
 80058da:	e01c      	b.n	8005916 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d008      	beq.n	80058f8 <HAL_UART_IRQHandler+0x1cc>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f89d 	bl	8005a30 <UART_Transmit_IT>
    return;
 80058f6:	e00f      	b.n	8005918 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_UART_IRQHandler+0x1ec>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005908:	2b00      	cmp	r3, #0
 800590a:	d005      	beq.n	8005918 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8e5 	bl	8005adc <UART_EndTransmit_IT>
    return;
 8005912:	bf00      	nop
 8005914:	e000      	b.n	8005918 <HAL_UART_IRQHandler+0x1ec>
    return;
 8005916:	bf00      	nop
  }
}
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	08005a09 	.word	0x08005a09

08005924 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005948:	e02c      	b.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005950:	d028      	beq.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <UART_WaitOnFlagUntilTimeout+0x30>
 8005958:	f7fb fb86 	bl	8001068 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	69ba      	ldr	r2, [r7, #24]
 8005964:	429a      	cmp	r2, r3
 8005966:	d21d      	bcs.n	80059a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005976:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0201 	bic.w	r2, r2, #1
 8005986:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e00f      	b.n	80059c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	4013      	ands	r3, r2
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d0c3      	beq.n	800594a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 0201 	bic.w	r2, r2, #1
 80059f2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f7ff ff7e 	bl	8005924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b21      	cmp	r3, #33	; 0x21
 8005a42:	d144      	bne.n	8005ace <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4c:	d11a      	bne.n	8005a84 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a62:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d105      	bne.n	8005a78 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	1c9a      	adds	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]
 8005a76:	e00e      	b.n	8005a96 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]
 8005a82:	e008      	b.n	8005a96 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	6211      	str	r1, [r2, #32]
 8005a8e:	781a      	ldrb	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10f      	bne.n	8005aca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ab8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ac8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e000      	b.n	8005ad0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
  }
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68da      	ldr	r2, [r3, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f002 fdfb 	bl	80086f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b22      	cmp	r3, #34	; 0x22
 8005b1e:	d171      	bne.n	8005c04 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b28:	d123      	bne.n	8005b72 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10e      	bne.n	8005b56 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b4e:	1c9a      	adds	r2, r3, #2
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
 8005b54:	e029      	b.n	8005baa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b70:	e01b      	b.n	8005baa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d10a      	bne.n	8005b90 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6858      	ldr	r0, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	1c59      	adds	r1, r3, #1
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6291      	str	r1, [r2, #40]	; 0x28
 8005b8a:	b2c2      	uxtb	r2, r0
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e00c      	b.n	8005baa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	b2da      	uxtb	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9c:	1c58      	adds	r0, r3, #1
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	6288      	str	r0, [r1, #40]	; 0x28
 8005ba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d120      	bne.n	8005c00 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 0220 	bic.w	r2, r2, #32
 8005bcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f002 fd6a 	bl	80086d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e002      	b.n	8005c06 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	e000      	b.n	8005c06 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c04:	2302      	movs	r3, #2
  }
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c10:	b5b0      	push	{r4, r5, r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c50:	f023 030c 	bic.w	r3, r3, #12
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	68f9      	ldr	r1, [r7, #12]
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	699a      	ldr	r2, [r3, #24]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
 8005c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7c:	f040 80e4 	bne.w	8005e48 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4aab      	ldr	r2, [pc, #684]	; (8005f34 <UART_SetConfig+0x324>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d004      	beq.n	8005c94 <UART_SetConfig+0x84>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4aaa      	ldr	r2, [pc, #680]	; (8005f38 <UART_SetConfig+0x328>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d16c      	bne.n	8005d6e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005c94:	f7fd fdb2 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009a      	lsls	r2, r3, #2
 8005ca2:	441a      	add	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cae:	4aa3      	ldr	r2, [pc, #652]	; (8005f3c <UART_SetConfig+0x32c>)
 8005cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	011c      	lsls	r4, r3, #4
 8005cb8:	f7fd fda0 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009a      	lsls	r2, r3, #2
 8005cc6:	441a      	add	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	fbb2 f5f3 	udiv	r5, r2, r3
 8005cd2:	f7fd fd93 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	009a      	lsls	r2, r3, #2
 8005ce0:	441a      	add	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	4a93      	ldr	r2, [pc, #588]	; (8005f3c <UART_SetConfig+0x32c>)
 8005cee:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf2:	095b      	lsrs	r3, r3, #5
 8005cf4:	2264      	movs	r2, #100	; 0x64
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	1aeb      	subs	r3, r5, r3
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	3332      	adds	r3, #50	; 0x32
 8005d00:	4a8e      	ldr	r2, [pc, #568]	; (8005f3c <UART_SetConfig+0x32c>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d0e:	441c      	add	r4, r3
 8005d10:	f7fd fd74 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4613      	mov	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	4413      	add	r3, r2
 8005d1c:	009a      	lsls	r2, r3, #2
 8005d1e:	441a      	add	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	fbb2 f5f3 	udiv	r5, r2, r3
 8005d2a:	f7fd fd67 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	009a      	lsls	r2, r3, #2
 8005d38:	441a      	add	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	4a7d      	ldr	r2, [pc, #500]	; (8005f3c <UART_SetConfig+0x32c>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	2264      	movs	r2, #100	; 0x64
 8005d4e:	fb02 f303 	mul.w	r3, r2, r3
 8005d52:	1aeb      	subs	r3, r5, r3
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	3332      	adds	r3, #50	; 0x32
 8005d58:	4a78      	ldr	r2, [pc, #480]	; (8005f3c <UART_SetConfig+0x32c>)
 8005d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	f003 0207 	and.w	r2, r3, #7
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4422      	add	r2, r4
 8005d6a:	609a      	str	r2, [r3, #8]
 8005d6c:	e154      	b.n	8006018 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005d6e:	f7fd fd31 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005d72:	4602      	mov	r2, r0
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009a      	lsls	r2, r3, #2
 8005d7c:	441a      	add	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d88:	4a6c      	ldr	r2, [pc, #432]	; (8005f3c <UART_SetConfig+0x32c>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	011c      	lsls	r4, r3, #4
 8005d92:	f7fd fd1f 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005d96:	4602      	mov	r2, r0
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009a      	lsls	r2, r3, #2
 8005da0:	441a      	add	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	fbb2 f5f3 	udiv	r5, r2, r3
 8005dac:	f7fd fd12 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005db0:	4602      	mov	r2, r0
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009a      	lsls	r2, r3, #2
 8005dba:	441a      	add	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc6:	4a5d      	ldr	r2, [pc, #372]	; (8005f3c <UART_SetConfig+0x32c>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	2264      	movs	r2, #100	; 0x64
 8005dd0:	fb02 f303 	mul.w	r3, r2, r3
 8005dd4:	1aeb      	subs	r3, r5, r3
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	3332      	adds	r3, #50	; 0x32
 8005dda:	4a58      	ldr	r2, [pc, #352]	; (8005f3c <UART_SetConfig+0x32c>)
 8005ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	005b      	lsls	r3, r3, #1
 8005de4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005de8:	441c      	add	r4, r3
 8005dea:	f7fd fcf3 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005dee:	4602      	mov	r2, r0
 8005df0:	4613      	mov	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4413      	add	r3, r2
 8005df6:	009a      	lsls	r2, r3, #2
 8005df8:	441a      	add	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e04:	f7fd fce6 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	4413      	add	r3, r2
 8005e10:	009a      	lsls	r2, r3, #2
 8005e12:	441a      	add	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	4a47      	ldr	r2, [pc, #284]	; (8005f3c <UART_SetConfig+0x32c>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	2264      	movs	r2, #100	; 0x64
 8005e28:	fb02 f303 	mul.w	r3, r2, r3
 8005e2c:	1aeb      	subs	r3, r5, r3
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	3332      	adds	r3, #50	; 0x32
 8005e32:	4a42      	ldr	r2, [pc, #264]	; (8005f3c <UART_SetConfig+0x32c>)
 8005e34:	fba2 2303 	umull	r2, r3, r2, r3
 8005e38:	095b      	lsrs	r3, r3, #5
 8005e3a:	f003 0207 	and.w	r2, r3, #7
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4422      	add	r2, r4
 8005e44:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005e46:	e0e7      	b.n	8006018 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a39      	ldr	r2, [pc, #228]	; (8005f34 <UART_SetConfig+0x324>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <UART_SetConfig+0x24c>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a38      	ldr	r2, [pc, #224]	; (8005f38 <UART_SetConfig+0x328>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d171      	bne.n	8005f40 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005e5c:	f7fd fcce 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4613      	mov	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	009a      	lsls	r2, r3, #2
 8005e6a:	441a      	add	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e76:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <UART_SetConfig+0x32c>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	011c      	lsls	r4, r3, #4
 8005e80:	f7fd fcbc 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4613      	mov	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	009a      	lsls	r2, r3, #2
 8005e8e:	441a      	add	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	fbb2 f5f3 	udiv	r5, r2, r3
 8005e9a:	f7fd fcaf 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009a      	lsls	r2, r3, #2
 8005ea8:	441a      	add	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb4:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <UART_SetConfig+0x32c>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2264      	movs	r2, #100	; 0x64
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	1aeb      	subs	r3, r5, r3
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	3332      	adds	r3, #50	; 0x32
 8005ec8:	4a1c      	ldr	r2, [pc, #112]	; (8005f3c <UART_SetConfig+0x32c>)
 8005eca:	fba2 2303 	umull	r2, r3, r2, r3
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed4:	441c      	add	r4, r3
 8005ed6:	f7fd fc91 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009a      	lsls	r2, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ef0:	f7fd fc84 	bl	80037fc <HAL_RCC_GetPCLK2Freq>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009a      	lsls	r2, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0a:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <UART_SetConfig+0x32c>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	2264      	movs	r2, #100	; 0x64
 8005f14:	fb02 f303 	mul.w	r3, r2, r3
 8005f18:	1aeb      	subs	r3, r5, r3
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	3332      	adds	r3, #50	; 0x32
 8005f1e:	4a07      	ldr	r2, [pc, #28]	; (8005f3c <UART_SetConfig+0x32c>)
 8005f20:	fba2 2303 	umull	r2, r3, r2, r3
 8005f24:	095b      	lsrs	r3, r3, #5
 8005f26:	f003 020f 	and.w	r2, r3, #15
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4422      	add	r2, r4
 8005f30:	609a      	str	r2, [r3, #8]
 8005f32:	e071      	b.n	8006018 <UART_SetConfig+0x408>
 8005f34:	40011000 	.word	0x40011000
 8005f38:	40011400 	.word	0x40011400
 8005f3c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005f40:	f7fd fc48 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009a      	lsls	r2, r3, #2
 8005f4e:	441a      	add	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5a:	4a31      	ldr	r2, [pc, #196]	; (8006020 <UART_SetConfig+0x410>)
 8005f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	011c      	lsls	r4, r3, #4
 8005f64:	f7fd fc36 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	009a      	lsls	r2, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	fbb2 f5f3 	udiv	r5, r2, r3
 8005f7e:	f7fd fc29 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009a      	lsls	r2, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f98:	4a21      	ldr	r2, [pc, #132]	; (8006020 <UART_SetConfig+0x410>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	2264      	movs	r2, #100	; 0x64
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	1aeb      	subs	r3, r5, r3
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	3332      	adds	r3, #50	; 0x32
 8005fac:	4a1c      	ldr	r2, [pc, #112]	; (8006020 <UART_SetConfig+0x410>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb8:	441c      	add	r4, r3
 8005fba:	f7fd fc0b 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009a      	lsls	r2, r3, #2
 8005fc8:	441a      	add	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	fbb2 f5f3 	udiv	r5, r2, r3
 8005fd4:	f7fd fbfe 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4613      	mov	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	4413      	add	r3, r2
 8005fe0:	009a      	lsls	r2, r3, #2
 8005fe2:	441a      	add	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <UART_SetConfig+0x410>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	2264      	movs	r2, #100	; 0x64
 8005ff8:	fb02 f303 	mul.w	r3, r2, r3
 8005ffc:	1aeb      	subs	r3, r5, r3
 8005ffe:	011b      	lsls	r3, r3, #4
 8006000:	3332      	adds	r3, #50	; 0x32
 8006002:	4a07      	ldr	r2, [pc, #28]	; (8006020 <UART_SetConfig+0x410>)
 8006004:	fba2 2303 	umull	r2, r3, r2, r3
 8006008:	095b      	lsrs	r3, r3, #5
 800600a:	f003 020f 	and.w	r2, r3, #15
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4422      	add	r2, r4
 8006014:	609a      	str	r2, [r3, #8]
}
 8006016:	e7ff      	b.n	8006018 <UART_SetConfig+0x408>
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bdb0      	pop	{r4, r5, r7, pc}
 8006020:	51eb851f 	.word	0x51eb851f

08006024 <send_config>:
	uint8_t OUT_Z_H_A_ADD = 0xAD;

	imu_stc imu;
	can_stc can;

	void send_config(GPIO_TypeDef* pinx, uint16_t pinn, uint8_t * addr, uint8_t * val){
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	607a      	str	r2, [r7, #4]
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	460b      	mov	r3, r1
 8006032:	817b      	strh	r3, [r7, #10]
		HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_RESET); 					///CS_InUse to 0
 8006034:	897b      	ldrh	r3, [r7, #10]
 8006036:	2200      	movs	r2, #0
 8006038:	4619      	mov	r1, r3
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7fd fac2 	bl	80035c4 <HAL_GPIO_WritePin>
		htim2.Instance->CNT=0; 																		//set counter to 0
 8006040:	4b16      	ldr	r3, [pc, #88]	; (800609c <send_config+0x78>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2200      	movs	r2, #0
 8006046:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} 															//delay (must be >5ns)
 8006048:	bf00      	nop
 800604a:	4b14      	ldr	r3, [pc, #80]	; (800609c <send_config+0x78>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	2b14      	cmp	r3, #20
 8006052:	d9fa      	bls.n	800604a <send_config+0x26>
		HAL_SPI_Transmit(imu.hspi, addr, 1, 10); ///Writing the address
 8006054:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <send_config+0x7c>)
 8006056:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 800605a:	230a      	movs	r3, #10
 800605c:	2201      	movs	r2, #1
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	f7fe f83e 	bl	80040e0 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(imu.hspi, val, 1, 10); ///Writing 0b00001111 to enable PowerMode and x,y,z axis
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <send_config+0x7c>)
 8006066:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 800606a:	230a      	movs	r3, #10
 800606c:	2201      	movs	r2, #1
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	f7fe f836 	bl	80040e0 <HAL_SPI_Transmit>
		htim2.Instance->CNT=0; 																	//set counter to 0
 8006074:	4b09      	ldr	r3, [pc, #36]	; (800609c <send_config+0x78>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} 															//delay (must be >5ns)
 800607c:	bf00      	nop
 800607e:	4b07      	ldr	r3, [pc, #28]	; (800609c <send_config+0x78>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	2b14      	cmp	r3, #20
 8006086:	d9fa      	bls.n	800607e <send_config+0x5a>
		HAL_GPIO_WritePin(pinx, pinn, GPIO_PIN_SET); 					///CS_InUse to 1
 8006088:	897b      	ldrh	r3, [r7, #10]
 800608a:	2201      	movs	r2, #1
 800608c:	4619      	mov	r1, r3
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7fd fa98 	bl	80035c4 <HAL_GPIO_WritePin>
	}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	200010cc 	.word	0x200010cc
 80060a0:	20000430 	.word	0x20000430

080060a4 <LSMD9S0_accel_gyro_init>:

	//accelerometer, gyroscope and magnetometer initialization
	//call this function before requesting data from the sensor
	//hspi = pointer to the spi port defined
	void LSMD9S0_accel_gyro_init(imu_stc* imu){
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 80060ac:	2201      	movs	r2, #1
 80060ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060b2:	482e      	ldr	r0, [pc, #184]	; (800616c <LSMD9S0_accel_gyro_init+0xc8>)
 80060b4:	f7fd fa86 	bl	80035c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 80060b8:	2201      	movs	r2, #1
 80060ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060be:	482c      	ldr	r0, [pc, #176]	; (8006170 <LSMD9S0_accel_gyro_init+0xcc>)
 80060c0:	f7fd fa80 	bl	80035c4 <HAL_GPIO_WritePin>

		send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t*)&CTRL_REG1_G_ADD, (uint8_t*)&CTRL_REG1_G_VAL);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <LSMD9S0_accel_gyro_init+0xd0>)
 80060d2:	4a29      	ldr	r2, [pc, #164]	; (8006178 <LSMD9S0_accel_gyro_init+0xd4>)
 80060d4:	f7ff ffa6 	bl	8006024 <send_config>
		send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t*)&CTRL_REG1_XM_ADD, (uint8_t*)&CTRL_REG1_XM_VAL);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 80060e4:	4b25      	ldr	r3, [pc, #148]	; (800617c <LSMD9S0_accel_gyro_init+0xd8>)
 80060e6:	4a26      	ldr	r2, [pc, #152]	; (8006180 <LSMD9S0_accel_gyro_init+0xdc>)
 80060e8:	f7ff ff9c 	bl	8006024 <send_config>

		send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t*)&CTRL_REG2_XM, (uint8_t*)&SCL_A_4);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 80060f8:	4b22      	ldr	r3, [pc, #136]	; (8006184 <LSMD9S0_accel_gyro_init+0xe0>)
 80060fa:	4a23      	ldr	r2, [pc, #140]	; (8006188 <LSMD9S0_accel_gyro_init+0xe4>)
 80060fc:	f7ff ff92 	bl	8006024 <send_config>
		send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t*)&CTRL_REG4_G, (uint8_t*)&SCL_G_500);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 800610c:	4b1f      	ldr	r3, [pc, #124]	; (800618c <LSMD9S0_accel_gyro_init+0xe8>)
 800610e:	4a20      	ldr	r2, [pc, #128]	; (8006190 <LSMD9S0_accel_gyro_init+0xec>)
 8006110:	f7ff ff88 	bl	8006024 <send_config>

		send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t*)&CTRL_REG5_XM_ADD, (uint8_t*)&CTRL_REG5_XM_VAL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 8006120:	4b1c      	ldr	r3, [pc, #112]	; (8006194 <LSMD9S0_accel_gyro_init+0xf0>)
 8006122:	4a1d      	ldr	r2, [pc, #116]	; (8006198 <LSMD9S0_accel_gyro_init+0xf4>)
 8006124:	f7ff ff7e 	bl	8006024 <send_config>
		send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t*)&CTRL_REG6_XM_ADD, (uint8_t*)&CTRL_REG6_XM_VAL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 8006134:	4b19      	ldr	r3, [pc, #100]	; (800619c <LSMD9S0_accel_gyro_init+0xf8>)
 8006136:	4a1a      	ldr	r2, [pc, #104]	; (80061a0 <LSMD9S0_accel_gyro_init+0xfc>)
 8006138:	f7ff ff74 	bl	8006024 <send_config>
		send_config(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, (uint8_t*)&CTRL_REG7_XM_ADD, (uint8_t*)&CTRL_REG7_XM_VAL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8b3 1418 	ldrh.w	r1, [r3, #1048]	; 0x418
 8006148:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <LSMD9S0_accel_gyro_init+0x100>)
 800614a:	4a17      	ldr	r2, [pc, #92]	; (80061a8 <LSMD9S0_accel_gyro_init+0x104>)
 800614c:	f7ff ff6a 	bl	8006024 <send_config>

		HAL_Delay(1);
 8006150:	2001      	movs	r0, #1
 8006152:	f7fa ff95 	bl	8001080 <HAL_Delay>

		HAL_UART_Transmit(&huart2, (uint8_t*)"<IMU> Initialization -> Done\r\n", 26, 10);
 8006156:	230a      	movs	r3, #10
 8006158:	221a      	movs	r2, #26
 800615a:	4914      	ldr	r1, [pc, #80]	; (80061ac <LSMD9S0_accel_gyro_init+0x108>)
 800615c:	4814      	ldr	r0, [pc, #80]	; (80061b0 <LSMD9S0_accel_gyro_init+0x10c>)
 800615e:	f7ff f9b1 	bl	80054c4 <HAL_UART_Transmit>
	}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	40020000 	.word	0x40020000
 8006170:	40020800 	.word	0x40020800
 8006174:	20000008 	.word	0x20000008
 8006178:	20000007 	.word	0x20000007
 800617c:	2000000a 	.word	0x2000000a
 8006180:	20000009 	.word	0x20000009
 8006184:	20000013 	.word	0x20000013
 8006188:	20000012 	.word	0x20000012
 800618c:	20000011 	.word	0x20000011
 8006190:	20000010 	.word	0x20000010
 8006194:	2000000c 	.word	0x2000000c
 8006198:	2000000b 	.word	0x2000000b
 800619c:	2000000e 	.word	0x2000000e
 80061a0:	2000000d 	.word	0x2000000d
 80061a4:	20000314 	.word	0x20000314
 80061a8:	2000000f 	.word	0x2000000f
 80061ac:	0800b948 	.word	0x0800b948
 80061b0:	2000110c 	.word	0x2000110c

080061b4 <LSMD9S0_read>:
		imu->X_A_axis_offset = LSM9DS0_calib(imu);
		imu->Y_A_axis_offset = LSM9DS0_calib(imu);
		imu->Z_A_axis_offset = LSM9DS0_calib(imu);
	}*/

	float LSMD9S0_read(imu_stc* imu){
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
		//__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);			//delay of 1 microsecond like from datasheet
		//while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){
		//}

		///READING ROTATION
		HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); 					///CS_InUse to 0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
 80061c8:	2200      	movs	r2, #0
 80061ca:	4619      	mov	r1, r3
 80061cc:	f7fd f9fa 	bl	80035c4 <HAL_GPIO_WritePin>
		htim2.Instance->CNT=0; 																		//set counter to 0
 80061d0:	4b3f      	ldr	r3, [pc, #252]	; (80062d0 <LSMD9S0_read+0x11c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2200      	movs	r2, #0
 80061d6:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} 															//delay (must be >5ns)
 80061d8:	bf00      	nop
 80061da:	4b3d      	ldr	r3, [pc, #244]	; (80062d0 <LSMD9S0_read+0x11c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	2b14      	cmp	r3, #20
 80061e2:	d9fa      	bls.n	80061da <LSMD9S0_read+0x26>

		HAL_SPI_Transmit(imu->hspi, &(imu->REG_L), 1, 10); 											///Writing LOW address
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f203 4122 	addw	r1, r3, #1058	; 0x422
 80061f0:	230a      	movs	r3, #10
 80061f2:	2201      	movs	r2, #1
 80061f4:	f7fd ff74 	bl	80040e0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(imu->hspi, (uint8_t*)&OUT_L_VAL, 1, 10); 									///Saving LOW data
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80061fe:	f107 010f 	add.w	r1, r7, #15
 8006202:	230a      	movs	r3, #10
 8006204:	2201      	movs	r2, #1
 8006206:	f7fe f89f 	bl	8004348 <HAL_SPI_Receive>

		htim2.Instance->CNT=0; 																	//set counter to 0
 800620a:	4b31      	ldr	r3, [pc, #196]	; (80062d0 <LSMD9S0_read+0x11c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	2200      	movs	r2, #0
 8006210:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} 															//delay (must be >5ns)
 8006212:	bf00      	nop
 8006214:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <LSMD9S0_read+0x11c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b14      	cmp	r3, #20
 800621c:	d9fa      	bls.n	8006214 <LSMD9S0_read+0x60>
		HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); 					///CS_InUse to 1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
 800622a:	2201      	movs	r2, #1
 800622c:	4619      	mov	r1, r3
 800622e:	f7fd f9c9 	bl	80035c4 <HAL_GPIO_WritePin>

		htim2.Instance->CNT=0; 																		//set counter to 0
 8006232:	4b27      	ldr	r3, [pc, #156]	; (80062d0 <LSMD9S0_read+0x11c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} 															//delay (must be >5ns)
 800623a:	bf00      	nop
 800623c:	4b24      	ldr	r3, [pc, #144]	; (80062d0 <LSMD9S0_read+0x11c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b14      	cmp	r3, #20
 8006244:	d9fa      	bls.n	800623c <LSMD9S0_read+0x88>
		HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_RESET); 					///CS_InUse to 0
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
 8006252:	2200      	movs	r2, #0
 8006254:	4619      	mov	r1, r3
 8006256:	f7fd f9b5 	bl	80035c4 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(imu->hspi, &(imu->REG_H), 1, 10); 											///Writing HIGH address
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f203 4123 	addw	r1, r3, #1059	; 0x423
 8006266:	230a      	movs	r3, #10
 8006268:	2201      	movs	r2, #1
 800626a:	f7fd ff39 	bl	80040e0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(imu->hspi, (uint8_t*)&OUT_H_VAL, 1, 10); 									///Saving HIGH data
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8006274:	f107 010e 	add.w	r1, r7, #14
 8006278:	230a      	movs	r3, #10
 800627a:	2201      	movs	r2, #1
 800627c:	f7fe f864 	bl	8004348 <HAL_SPI_Receive>

		htim2.Instance->CNT=0; 																		//set counter to 0
 8006280:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <LSMD9S0_read+0x11c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2200      	movs	r2, #0
 8006286:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} 															//delay (must be >5ns)
 8006288:	bf00      	nop
 800628a:	4b11      	ldr	r3, [pc, #68]	; (80062d0 <LSMD9S0_read+0x11c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006290:	2b14      	cmp	r3, #20
 8006292:	d9fa      	bls.n	800628a <LSMD9S0_read+0xd6>

		HAL_GPIO_WritePin(imu->GPIOx_InUse, imu->GPIO_Pin_InUse, GPIO_PIN_SET); 					///CS_InUse to 1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8b3 3418 	ldrh.w	r3, [r3, #1048]	; 0x418
 80062a0:	2201      	movs	r2, #1
 80062a2:	4619      	mov	r1, r3
 80062a4:	f7fd f98e 	bl	80035c4 <HAL_GPIO_WritePin>



		///CALCULATING ROTATION
		uint32_t value = (OUT_H_VAL << 8) | OUT_L_VAL;	///Calculating axis value shifting and using a logic OR
 80062a8:	7bbb      	ldrb	r3, [r7, #14]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	7bfa      	ldrb	r2, [r7, #15]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]
		float axis = value;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	ee07 3a90 	vmov	s15, r3
 80062b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062bc:	edc7 7a04 	vstr	s15, [r7, #16]
		/*char imu_str_1[100];
		int imu_val_ret = OUT_H_VAL << 8 | OUT_L_VAL;
		sprintf(imu_str_1,"gyro: %d\n\r",imu_val_ret);
		HAL_UART_Transmit(&huart2, (uint8_t*)imu_str_1, strlen(imu_str_1), 10);*/

		return axis;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	ee07 3a90 	vmov	s15, r3
	}
 80062c6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	200010cc 	.word	0x200010cc

080062d4 <LSMD9S0_check>:
		axis_cal = sum_cal / 10000;

		return axis_cal;
	}*/

	int LSMD9S0_check(imu_stc* imu){
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b09c      	sub	sp, #112	; 0x70
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

		int check = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	66fb      	str	r3, [r7, #108]	; 0x6c

		///AXEL/MAGN ARE WORKING
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET); ///CS_XM to 0
 80062e0:	2200      	movs	r2, #0
 80062e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062e6:	483c      	ldr	r0, [pc, #240]	; (80063d8 <LSMD9S0_check+0x104>)
 80062e8:	f7fd f96c 	bl	80035c4 <HAL_GPIO_WritePin>
		htim2.Instance->CNT=0; //set counter to 0
 80062ec:	4b3b      	ldr	r3, [pc, #236]	; (80063dc <LSMD9S0_check+0x108>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2200      	movs	r2, #0
 80062f2:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} //delay (must be >5ns)
 80062f4:	bf00      	nop
 80062f6:	4b39      	ldr	r3, [pc, #228]	; (80063dc <LSMD9S0_check+0x108>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2b14      	cmp	r3, #20
 80062fe:	d9fa      	bls.n	80062f6 <LSMD9S0_check+0x22>
		HAL_SPI_Transmit(imu->hspi, (uint8_t*)&WHO_AM_I_XM, 1, 10); ///Writing on register ----> (uint8_t*) it's the cast of the pointer to WHO_AM_I_G (giving by &variable)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8006306:	230a      	movs	r3, #10
 8006308:	2201      	movs	r2, #1
 800630a:	4935      	ldr	r1, [pc, #212]	; (80063e0 <LSMD9S0_check+0x10c>)
 800630c:	f7fd fee8 	bl	80040e0 <HAL_SPI_Transmit>
		//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_XM_VAL, 1, 10); ///Reading from register sending a 0x00
		HAL_SPI_Receive(imu->hspi, (uint8_t*)&WHO_AM_I_XM_VAL, 1, 10);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8006316:	230a      	movs	r3, #10
 8006318:	2201      	movs	r2, #1
 800631a:	4932      	ldr	r1, [pc, #200]	; (80063e4 <LSMD9S0_check+0x110>)
 800631c:	f7fe f814 	bl	8004348 <HAL_SPI_Receive>
		htim2.Instance->CNT=0; //set counter to 0
 8006320:	4b2e      	ldr	r3, [pc, #184]	; (80063dc <LSMD9S0_check+0x108>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2200      	movs	r2, #0
 8006326:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} //delay (must be >5ns)
 8006328:	bf00      	nop
 800632a:	4b2c      	ldr	r3, [pc, #176]	; (80063dc <LSMD9S0_check+0x108>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b14      	cmp	r3, #20
 8006332:	d9fa      	bls.n	800632a <LSMD9S0_check+0x56>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 8006334:	2201      	movs	r2, #1
 8006336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800633a:	4827      	ldr	r0, [pc, #156]	; (80063d8 <LSMD9S0_check+0x104>)
 800633c:	f7fd f942 	bl	80035c4 <HAL_GPIO_WritePin>

		///GYRO IS WORKING
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET); ///CS_G to 0
 8006340:	2200      	movs	r2, #0
 8006342:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006346:	4828      	ldr	r0, [pc, #160]	; (80063e8 <LSMD9S0_check+0x114>)
 8006348:	f7fd f93c 	bl	80035c4 <HAL_GPIO_WritePin>
		htim2.Instance->CNT=0; //set counter to 0
 800634c:	4b23      	ldr	r3, [pc, #140]	; (80063dc <LSMD9S0_check+0x108>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2200      	movs	r2, #0
 8006352:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} //delay (must be >5ns)
 8006354:	bf00      	nop
 8006356:	4b21      	ldr	r3, [pc, #132]	; (80063dc <LSMD9S0_check+0x108>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	2b14      	cmp	r3, #20
 800635e:	d9fa      	bls.n	8006356 <LSMD9S0_check+0x82>
		HAL_SPI_Transmit(imu->hspi, (uint8_t*)&WHO_AM_I_G, 1, 10); ///Writing on register ----> (uint8_t*) it's the cast of the pointer to WHO_AM_I_G (giving by &variable)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8006366:	230a      	movs	r3, #10
 8006368:	2201      	movs	r2, #1
 800636a:	4920      	ldr	r1, [pc, #128]	; (80063ec <LSMD9S0_check+0x118>)
 800636c:	f7fd feb8 	bl	80040e0 <HAL_SPI_Transmit>
		//HAL_SPI_TransmitReceive(imu->hspi, (uint8_t*)&ZERO, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10); ///Reading from register sending a 0x00
		HAL_SPI_Receive(imu->hspi, (uint8_t*)&WHO_AM_I_G_VAL, 1, 10);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8006376:	230a      	movs	r3, #10
 8006378:	2201      	movs	r2, #1
 800637a:	491d      	ldr	r1, [pc, #116]	; (80063f0 <LSMD9S0_check+0x11c>)
 800637c:	f7fd ffe4 	bl	8004348 <HAL_SPI_Receive>
		htim2.Instance->CNT=0; //set counter to 0
 8006380:	4b16      	ldr	r3, [pc, #88]	; (80063dc <LSMD9S0_check+0x108>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	625a      	str	r2, [r3, #36]	; 0x24
		while(htim2.Instance->CNT<=20){} //delay (must be >5ns)
 8006388:	bf00      	nop
 800638a:	4b14      	ldr	r3, [pc, #80]	; (80063dc <LSMD9S0_check+0x108>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	2b14      	cmp	r3, #20
 8006392:	d9fa      	bls.n	800638a <LSMD9S0_check+0xb6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 8006394:	2201      	movs	r2, #1
 8006396:	f44f 7180 	mov.w	r1, #256	; 0x100
 800639a:	4813      	ldr	r0, [pc, #76]	; (80063e8 <LSMD9S0_check+0x114>)
 800639c:	f7fd f912 	bl	80035c4 <HAL_GPIO_WritePin>

		//sprintf(imu_str,"Test with %d and %d\r\n%d, %d\r\n",WHO_AM_I_G,WHO_AM_I_XM,WHO_AM_I_G_VAL,WHO_AM_I_XM_VAL);
		//HAL_UART_Transmit(&huart2, (uint8_t*)imu_str, strlen(imu_str), 10);

		///AXEL/GYRO STATUS
		if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73)){
 80063a0:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <LSMD9S0_check+0x11c>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2bd4      	cmp	r3, #212	; 0xd4
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <LSMD9S0_check+0x110>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b49      	cmp	r3, #73	; 0x49
 80063b4:	bf0c      	ite	eq
 80063b6:	2301      	moveq	r3, #1
 80063b8:	2300      	movne	r3, #0
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	4013      	ands	r3, r2
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <LSMD9S0_check+0xf6>
			check = 1;
 80063c4:	2301      	movs	r3, #1
 80063c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063c8:	e001      	b.n	80063ce <LSMD9S0_check+0xfa>
			//HAL_UART_Transmit(&huart2, (uint8_t*)"imu int correct\r\n", 17, 10);
		}else{
			check = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	66fb      	str	r3, [r7, #108]	; 0x6c
			//HAL_UART_Transmit(&huart2, (uint8_t*)"imu int failed\r\n", 16, 10);
		}

		return check;
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3770      	adds	r7, #112	; 0x70
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	40020800 	.word	0x40020800
 80063dc:	200010cc 	.word	0x200010cc
 80063e0:	20000006 	.word	0x20000006
 80063e4:	20000858 	.word	0x20000858
 80063e8:	40020000 	.word	0x40020000
 80063ec:	20000005 	.word	0x20000005
 80063f0:	20000c90 	.word	0x20000c90

080063f4 <LSMD9S0_gyro_read>:
	//Y_G_axis = pointer gyroscope y variable
	//Z_G_axis = pointer gyroscope z variable
	//X_G_axis_offset = offset x value
	//Y_G_axis_offset = offset y value
	//Z_G_axis_offset = offset z value
	void LSMD9S0_gyro_read(imu_stc* imu){
 80063f4:	b590      	push	{r4, r7, lr}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]

		imu->kp = 0.0175;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8006402:	4a85      	ldr	r2, [pc, #532]	; (8006618 <LSMD9S0_gyro_read+0x224>)
 8006404:	601a      	str	r2, [r3, #0]

		imu->GPIOx_InUse=GPIOA;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a84      	ldr	r2, [pc, #528]	; (800661c <LSMD9S0_gyro_read+0x228>)
 800640a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		imu->GPIO_Pin_InUse=GPIO_PIN_8;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006414:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418

		imu->REG_H = OUT_X_H_G_ADD;
 8006418:	4b81      	ldr	r3, [pc, #516]	; (8006620 <LSMD9S0_gyro_read+0x22c>)
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
		imu->REG_L = OUT_X_L_G_ADD;
 8006422:	4b80      	ldr	r3, [pc, #512]	; (8006624 <LSMD9S0_gyro_read+0x230>)
 8006424:	781a      	ldrb	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
		imu->X_G_axis = LSMD9S0_read(imu);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f7ff fec1 	bl	80061b4 <LSMD9S0_read>
 8006432:	eef0 7a40 	vmov.f32	s15, s0
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	edc3 7a00 	vstr	s15, [r3]
		//imu->X_G_axis = imu->X_G_axis - imu->X_G_axis_offset;

		imu->REG_H = OUT_Y_H_G_ADD;
 800643c:	4b7a      	ldr	r3, [pc, #488]	; (8006628 <LSMD9S0_gyro_read+0x234>)
 800643e:	781a      	ldrb	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
		imu->REG_L = OUT_Y_L_G_ADD;
 8006446:	4b79      	ldr	r3, [pc, #484]	; (800662c <LSMD9S0_gyro_read+0x238>)
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
		imu->Y_G_axis = LSMD9S0_read(imu);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f7ff feaf 	bl	80061b4 <LSMD9S0_read>
 8006456:	eef0 7a40 	vmov.f32	s15, s0
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	edc3 7a01 	vstr	s15, [r3, #4]
		//imu->Y_G_axis = imu->Y_G_axis - imu->Y_G_axis_offset;

		imu->REG_H = OUT_Z_H_G_ADD;
 8006460:	4b73      	ldr	r3, [pc, #460]	; (8006630 <LSMD9S0_gyro_read+0x23c>)
 8006462:	781a      	ldrb	r2, [r3, #0]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
		imu->REG_L = OUT_Z_L_G_ADD;
 800646a:	4b72      	ldr	r3, [pc, #456]	; (8006634 <LSMD9S0_gyro_read+0x240>)
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
		imu->Z_G_axis = LSMD9S0_read(imu);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fe9d 	bl	80061b4 <LSMD9S0_read>
 800647a:	eef0 7a40 	vmov.f32	s15, s0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	edc3 7a02 	vstr	s15, [r3, #8]
		//imu->Z_G_axis = imu->Z_G_axis - imu->Z_G_axis_offset;

		///AXEL/GYRO STATUS
		if ((WHO_AM_I_G_VAL == 212) & (WHO_AM_I_XM_VAL == 73)){
 8006484:	4b6c      	ldr	r3, [pc, #432]	; (8006638 <LSMD9S0_gyro_read+0x244>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2bd4      	cmp	r3, #212	; 0xd4
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b6a      	ldr	r3, [pc, #424]	; (800663c <LSMD9S0_gyro_read+0x248>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b49      	cmp	r3, #73	; 0x49
 8006498:	bf0c      	ite	eq
 800649a:	2301      	moveq	r3, #1
 800649c:	2300      	movne	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	4013      	ands	r3, r2
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d004      	beq.n	80064b2 <LSMD9S0_gyro_read+0xbe>
			imu->error_flag = 0;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
 80064b0:	e003      	b.n	80064ba <LSMD9S0_gyro_read+0xc6>
		}else{
			imu->error_flag = 1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		}
		if(imu->Z_G_axis < 0){
			imu->Z_G_axis += 32768;
		}*/

		shift_array(imu->X_G_axis_array, 10, imu->X_G_axis);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f503 7404 	add.w	r4, r3, #528	; 0x210
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fa f85f 	bl	8000588 <__aeabi_f2d>
 80064ca:	4602      	mov	r2, r0
 80064cc:	460b      	mov	r3, r1
 80064ce:	ec43 2b10 	vmov	d0, r2, r3
 80064d2:	210a      	movs	r1, #10
 80064d4:	4620      	mov	r0, r4
 80064d6:	f001 fa2f 	bl	8007938 <shift_array>
		shift_array(imu->Y_G_axis_array, 10, imu->Y_G_axis);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f503 742c 	add.w	r4, r3, #688	; 0x2b0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fa f84f 	bl	8000588 <__aeabi_f2d>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	ec43 2b10 	vmov	d0, r2, r3
 80064f2:	210a      	movs	r1, #10
 80064f4:	4620      	mov	r0, r4
 80064f6:	f001 fa1f 	bl	8007938 <shift_array>
		shift_array(imu->Z_G_axis_array, 10, imu->Z_G_axis);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f503 7454 	add.w	r4, r3, #848	; 0x350
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	4618      	mov	r0, r3
 8006506:	f7fa f83f 	bl	8000588 <__aeabi_f2d>
 800650a:	4602      	mov	r2, r0
 800650c:	460b      	mov	r3, r1
 800650e:	ec43 2b10 	vmov	d0, r2, r3
 8006512:	210a      	movs	r1, #10
 8006514:	4620      	mov	r0, r4
 8006516:	f001 fa0f 	bl	8007938 <shift_array>

		imu->X_G_axis = dynamic_average(imu->X_G_axis_array, 10);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006520:	210a      	movs	r1, #10
 8006522:	4618      	mov	r0, r3
 8006524:	f001 fa38 	bl	8007998 <dynamic_average>
 8006528:	ec54 3b10 	vmov	r3, r4, d0
 800652c:	4618      	mov	r0, r3
 800652e:	4621      	mov	r1, r4
 8006530:	f7fa fb64 	bl	8000bfc <__aeabi_d2f>
 8006534:	4602      	mov	r2, r0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	601a      	str	r2, [r3, #0]
		imu->Y_G_axis = dynamic_average(imu->Y_G_axis_array, 10);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006540:	210a      	movs	r1, #10
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fa28 	bl	8007998 <dynamic_average>
 8006548:	ec54 3b10 	vmov	r3, r4, d0
 800654c:	4618      	mov	r0, r3
 800654e:	4621      	mov	r1, r4
 8006550:	f7fa fb54 	bl	8000bfc <__aeabi_d2f>
 8006554:	4602      	mov	r2, r0
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	605a      	str	r2, [r3, #4]
		imu->Z_G_axis = dynamic_average(imu->Z_G_axis_array, 10);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006560:	210a      	movs	r1, #10
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fa18 	bl	8007998 <dynamic_average>
 8006568:	ec54 3b10 	vmov	r3, r4, d0
 800656c:	4618      	mov	r0, r3
 800656e:	4621      	mov	r1, r4
 8006570:	f7fa fb44 	bl	8000bfc <__aeabi_d2f>
 8006574:	4602      	mov	r2, r0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	609a      	str	r2, [r3, #8]

		if(imu->X_G_axis >= 0){
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	edd3 7a00 	vldr	s15, [r3]
 8006580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006588:	db04      	blt.n	8006594 <LSMD9S0_gyro_read+0x1a0>
			imu->x_g_sign = 0;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
 8006592:	e00b      	b.n	80065ac <LSMD9S0_gyro_read+0x1b8>
		}
		else{
			imu->x_g_sign = 1;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
			imu->X_G_axis *= -1;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	edd3 7a00 	vldr	s15, [r3]
 80065a2:	eef1 7a67 	vneg.f32	s15, s15
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	edc3 7a00 	vstr	s15, [r3]
		}
		if(imu->Y_G_axis >= 0){
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80065b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ba:	db04      	blt.n	80065c6 <LSMD9S0_gyro_read+0x1d2>
			imu->y_g_sign = 0;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80065c4:	e00b      	b.n	80065de <LSMD9S0_gyro_read+0x1ea>
		}
		else{
			imu->y_g_sign = 1;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			imu->Y_G_axis *= -1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80065d4:	eef1 7a67 	vneg.f32	s15, s15
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		if(imu->Z_G_axis >= 0){
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80065e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ec:	db04      	blt.n	80065f8 <LSMD9S0_gyro_read+0x204>
			imu->z_g_sign = 0;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

		/*char imu_str_1[100];

		sprintf(imu_str_1,"gyro: %d %d %d\n\r", (int)imu->X_G_axis, (int)imu->Y_G_axis, (int)imu->Z_G_axis);
		HAL_UART_Transmit(&huart2, (uint8_t*)imu_str_1, strlen(imu_str_1), 10);*/
	}
 80065f6:	e00b      	b.n	8006610 <LSMD9S0_gyro_read+0x21c>
			imu->z_g_sign = 1;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
			imu->Z_G_axis *= -1;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	edd3 7a02 	vldr	s15, [r3, #8]
 8006606:	eef1 7a67 	vneg.f32	s15, s15
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	edc3 7a02 	vstr	s15, [r3, #8]
	}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	bd90      	pop	{r4, r7, pc}
 8006618:	3c8f5c29 	.word	0x3c8f5c29
 800661c:	40020000 	.word	0x40020000
 8006620:	20000015 	.word	0x20000015
 8006624:	20000014 	.word	0x20000014
 8006628:	20000017 	.word	0x20000017
 800662c:	20000016 	.word	0x20000016
 8006630:	20000019 	.word	0x20000019
 8006634:	20000018 	.word	0x20000018
 8006638:	20000c90 	.word	0x20000c90
 800663c:	20000858 	.word	0x20000858

08006640 <LSMD9S0_accel_read>:
	//Y_A_axis = pointer accelerometer y variable
	//Z_A_axis = pointer accelerometer z variable
	//X_A_axis_offset = offset x value
	//Y_A_axis_offset = offset y value
	//Z_A_axis_offset = offset z value
	void LSMD9S0_accel_read(imu_stc* imu){
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]

		imu->kp= 0.00119782; ///0.000122 * 9,81
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800664e:	4a54      	ldr	r2, [pc, #336]	; (80067a0 <LSMD9S0_accel_read+0x160>)
 8006650:	601a      	str	r2, [r3, #0]

		imu->GPIOx_InUse=GPIOC;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a53      	ldr	r2, [pc, #332]	; (80067a4 <LSMD9S0_accel_read+0x164>)
 8006656:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
		imu->GPIO_Pin_InUse=GPIO_PIN_9;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006660:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418

		imu->REG_H = OUT_X_H_A_ADD;
 8006664:	4b50      	ldr	r3, [pc, #320]	; (80067a8 <LSMD9S0_accel_read+0x168>)
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
		imu->REG_L = OUT_X_L_A_ADD;
 800666e:	4b4f      	ldr	r3, [pc, #316]	; (80067ac <LSMD9S0_accel_read+0x16c>)
 8006670:	781a      	ldrb	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
		imu->X_A_axis = LSMD9S0_read(imu);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f7ff fd9b 	bl	80061b4 <LSMD9S0_read>
 800667e:	eef0 7a40 	vmov.f32	s15, s0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	edc3 7a06 	vstr	s15, [r3, #24]

		//imu->X_A_axis = imu->X_A_axis - imu->X_A_axis_offset;

		imu->REG_H = OUT_Y_H_A_ADD;
 8006688:	4b49      	ldr	r3, [pc, #292]	; (80067b0 <LSMD9S0_accel_read+0x170>)
 800668a:	781a      	ldrb	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
		imu->REG_L = OUT_Y_L_A_ADD;
 8006692:	4b48      	ldr	r3, [pc, #288]	; (80067b4 <LSMD9S0_accel_read+0x174>)
 8006694:	781a      	ldrb	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
		imu->Y_A_axis = LSMD9S0_read(imu);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f7ff fd89 	bl	80061b4 <LSMD9S0_read>
 80066a2:	eef0 7a40 	vmov.f32	s15, s0
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	edc3 7a07 	vstr	s15, [r3, #28]
		//imu->Y_A_axis = imu->Y_A_axis - imu->Y_A_axis_offset;

		imu->REG_H = OUT_Z_H_A_ADD;
 80066ac:	4b42      	ldr	r3, [pc, #264]	; (80067b8 <LSMD9S0_accel_read+0x178>)
 80066ae:	781a      	ldrb	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
		imu->REG_L = OUT_Z_L_A_ADD;
 80066b6:	4b41      	ldr	r3, [pc, #260]	; (80067bc <LSMD9S0_accel_read+0x17c>)
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
		imu->Z_A_axis = LSMD9S0_read(imu);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff fd77 	bl	80061b4 <LSMD9S0_read>
 80066c6:	eef0 7a40 	vmov.f32	s15, s0
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	edc3 7a08 	vstr	s15, [r3, #32]
		//imu->Z_A_axis = imu->Z_A_axis - imu->Z_A_axis_offset + 9.81;

		if(imu->calibration_done){
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d05d      	beq.n	8006796 <LSMD9S0_accel_read+0x156>

			imu->X_A_axis -= imu->X_A_axis_offset;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80066e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	edc3 7a06 	vstr	s15, [r3, #24]
			imu->Y_A_axis -= imu->Y_A_axis_offset;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	ed93 7a07 	vldr	s14, [r3, #28]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80066fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	edc3 7a07 	vstr	s15, [r3, #28]
			imu->Z_A_axis -= imu->Z_A_axis_offset;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	ed93 7a08 	vldr	s14, [r3, #32]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	edc3 7a08 	vstr	s15, [r3, #32]

			if(imu->X_A_axis > 32768){
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	edd3 7a06 	vldr	s15, [r3, #24]
 8006722:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80067c0 <LSMD9S0_accel_read+0x180>
 8006726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800672a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672e:	dd09      	ble.n	8006744 <LSMD9S0_accel_read+0x104>
				imu->X_A_axis -= 65536;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	edd3 7a06 	vldr	s15, [r3, #24]
 8006736:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80067c4 <LSMD9S0_accel_read+0x184>
 800673a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	edc3 7a06 	vstr	s15, [r3, #24]
			}
			if(imu->Y_A_axis > 32768){
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	edd3 7a07 	vldr	s15, [r3, #28]
 800674a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80067c0 <LSMD9S0_accel_read+0x180>
 800674e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006756:	dd09      	ble.n	800676c <LSMD9S0_accel_read+0x12c>
				imu->Y_A_axis -= 65536;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	edd3 7a07 	vldr	s15, [r3, #28]
 800675e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80067c4 <LSMD9S0_accel_read+0x184>
 8006762:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	edc3 7a07 	vstr	s15, [r3, #28]
			}
			if(imu->Z_A_axis > 32768){
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	edd3 7a08 	vldr	s15, [r3, #32]
 8006772:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80067c0 <LSMD9S0_accel_read+0x180>
 8006776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677e:	dc00      	bgt.n	8006782 <LSMD9S0_accel_read+0x142>
		else{
			imu->z_a_sign = 1;
			imu->Z_A_axis *= -1;
		}*/

	}
 8006780:	e009      	b.n	8006796 <LSMD9S0_accel_read+0x156>
				imu->Z_A_axis -= 65536;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	edd3 7a08 	vldr	s15, [r3, #32]
 8006788:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80067c4 <LSMD9S0_accel_read+0x184>
 800678c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	edc3 7a08 	vstr	s15, [r3, #32]
	}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	3a9d002b 	.word	0x3a9d002b
 80067a4:	40020800 	.word	0x40020800
 80067a8:	2000001b 	.word	0x2000001b
 80067ac:	2000001a 	.word	0x2000001a
 80067b0:	2000001d 	.word	0x2000001d
 80067b4:	2000001c 	.word	0x2000001c
 80067b8:	2000001f 	.word	0x2000001f
 80067bc:	2000001e 	.word	0x2000001e
 80067c0:	47000000 	.word	0x47000000
 80067c4:	47800000 	.word	0x47800000

080067c8 <CAN_Send>:
	//hcan = pointer to can port
	//id = id of the message to be sent
	//dataTx = pointer to array that contains the data to be sent
	//size = size of the array
	can_stc can;
	int CAN_Send(can_stc* can){
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08a      	sub	sp, #40	; 0x28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]

		uint32_t mailbox;
		uint8_t flag = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		CAN_TxHeaderTypeDef TxHeader;
		TxHeader.StdId = can->id;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60bb      	str	r3, [r7, #8]
		TxHeader.IDE = CAN_ID_STD;
 80067dc:	2300      	movs	r3, #0
 80067de:	613b      	str	r3, [r7, #16]
		TxHeader.RTR = CAN_RTR_DATA;
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]
		TxHeader.DLC = can->size;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	61bb      	str	r3, [r7, #24]
		TxHeader.TransmitGlobalTime = DISABLE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	773b      	strb	r3, [r7, #28]

		if (HAL_CAN_GetTxMailboxesFreeLevel(can->hcan) != 0 && HAL_CAN_IsTxMessagePending(can->hcan, CAN_TX_MAILBOX0) == 0){
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fb fcaf 	bl	8002156 <HAL_CAN_GetTxMailboxesFreeLevel>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d016      	beq.n	800682c <CAN_Send+0x64>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	2101      	movs	r1, #1
 8006804:	4618      	mov	r0, r3
 8006806:	f7fb fcdb 	bl	80021c0 <HAL_CAN_IsTxMessagePending>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10d      	bne.n	800682c <CAN_Send+0x64>
			HAL_CAN_AddTxMessage(can->hcan, &TxHeader, can->dataTx, &mailbox);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6998      	ldr	r0, [r3, #24]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f103 0208 	add.w	r2, r3, #8
 800681a:	f107 0320 	add.w	r3, r7, #32
 800681e:	f107 0108 	add.w	r1, r7, #8
 8006822:	f7fb fbbd 	bl	8001fa0 <HAL_CAN_AddTxMessage>
			flag = 1;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		return flag;
 800682c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
	}
 8006830:	4618      	mov	r0, r3
 8006832:	3728      	adds	r7, #40	; 0x28
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <CAN_Receive>:
	//receive a buffer from the CAN communication
	//you can call this function in the callback of the CAN interrupt
	//hcan = pointer to can port
	//DataRx = pointer to the buffer you are receiveng
	//size = size of the buffer you are using
	int CAN_Receive(can_stc* can){
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

		CAN_RxHeaderTypeDef RxHeader;

		if (HAL_CAN_GetRxFifoFillLevel(can->hcan, CAN_RX_FIFO0) != 0){
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2100      	movs	r1, #0
 8006846:	4618      	mov	r0, r3
 8006848:	f7fb fdf1 	bl	800242e <HAL_CAN_GetRxFifoFillLevel>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d008      	beq.n	8006864 <CAN_Receive+0x2c>
			HAL_CAN_GetRxMessage(can->hcan, CAN_RX_FIFO0, &RxHeader, can->dataRx);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6998      	ldr	r0, [r3, #24]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	3310      	adds	r3, #16
 800685a:	f107 0208 	add.w	r2, r7, #8
 800685e:	2100      	movs	r1, #0
 8006860:	f7fb fcd2 	bl	8002208 <HAL_CAN_GetRxMessage>
		}

		int id = RxHeader.StdId;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	627b      	str	r3, [r7, #36]	; 0x24

		return id;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800686a:	4618      	mov	r0, r3
 800686c:	3728      	adds	r7, #40	; 0x28
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <emptyp>:

	  q->tail=q->head=0;
	  q->dim=40;
	}

	static int emptyp(const queue * q){
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]

	  return (q->tail==q->head);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	bf0c      	ite	eq
 8006886:	2301      	moveq	r3, #1
 8006888:	2300      	movne	r3, #0
 800688a:	b2db      	uxtb	r3, r3
	}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <pop>:
		}

		return res;
	}

	int pop(char * str,queue * q){
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
		int res;
		if (emptyp(q)){
 80068a2:	6838      	ldr	r0, [r7, #0]
 80068a4:	f7ff ffe5 	bl	8006872 <emptyp>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <pop+0x1c>
			res = FAIL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	e023      	b.n	80068fc <pop+0x64>
		}
		else {
			strcpy(str,q->elem[q->head]);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	3302      	adds	r3, #2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f002 ff19 	bl	80096fc <strcpy>
			free(q->elem[q->head]);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	3302      	adds	r3, #2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	4618      	mov	r0, r3
 80068da:	f002 fe27 	bl	800952c <free>
			//q->head = next(q->head,q->dim);
			if(q->head==39){
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b27      	cmp	r3, #39	; 0x27
 80068e4:	d103      	bne.n	80068ee <pop+0x56>
				q->head=0;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	e004      	b.n	80068f8 <pop+0x60>
			}else{
				q->head++;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	1c5a      	adds	r2, r3, #1
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	601a      	str	r2, [r3, #0]
			}
			res=OK;
 80068f8:	2301      	movs	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
		}

		return res;
 80068fc:	68fb      	ldr	r3, [r7, #12]
	}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <print_it>:
		}

		return ret;
	}

	void print_it(UART_HandleTypeDef *huart){ //put in the uart interrupt
 8006908:	b580      	push	{r7, lr}
 800690a:	b090      	sub	sp, #64	; 0x40
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]

		char text_print_function[50];

		if(pop(text_print_function,&print_q)==OK){
 8006910:	f107 030c 	add.w	r3, r7, #12
 8006914:	490b      	ldr	r1, [pc, #44]	; (8006944 <print_it+0x3c>)
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff ffbe 	bl	8006898 <pop>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
 8006920:	d10c      	bne.n	800693c <print_it+0x34>
			HAL_UART_Transmit_IT(huart, (uint8_t*)text_print_function, strlen(text_print_function));
 8006922:	f107 030c 	add.w	r3, r7, #12
 8006926:	4618      	mov	r0, r3
 8006928:	f7f9 fc72 	bl	8000210 <strlen>
 800692c:	4603      	mov	r3, r0
 800692e:	b29a      	uxth	r2, r3
 8006930:	f107 030c 	add.w	r3, r7, #12
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fe fe5d 	bl	80055f6 <HAL_UART_Transmit_IT>
		}
	}
 800693c:	bf00      	nop
 800693e:	3740      	adds	r7, #64	; 0x40
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	20000318 	.word	0x20000318

08006948 <gps_init>:
	gps_read_it() -> put it in interrupt. Example:
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
		gps_read_it(huart,&gps_main);
	}*/

	int gps_init(UART_HandleTypeDef* huart,gps_struct * gps){ //initialization of GPS
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]

		//if return--> 0=error,1=ok
		huart_GPS=huart;
 8006952:	4a51      	ldr	r2, [pc, #324]	; (8006a98 <gps_init+0x150>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6013      	str	r3, [r2, #0]
		huart_GPS->Init.BaudRate = 9600;
 8006958:	4b4f      	ldr	r3, [pc, #316]	; (8006a98 <gps_init+0x150>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006960:	605a      	str	r2, [r3, #4]
		HAL_UART_Init(huart_GPS);
 8006962:	4b4d      	ldr	r3, [pc, #308]	; (8006a98 <gps_init+0x150>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe fd5f 	bl	800542a <HAL_UART_Init>
		HAL_UART_Transmit(huart_GPS, (uint8_t*)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 800696c:	4b4a      	ldr	r3, [pc, #296]	; (8006a98 <gps_init+0x150>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	23c8      	movs	r3, #200	; 0xc8
 8006972:	2214      	movs	r2, #20
 8006974:	4949      	ldr	r1, [pc, #292]	; (8006a9c <gps_init+0x154>)
 8006976:	f7fe fda5 	bl	80054c4 <HAL_UART_Transmit>
		HAL_Delay(500);
 800697a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800697e:	f7fa fb7f 	bl	8001080 <HAL_Delay>
		huart_GPS->Init.BaudRate = 57600;
 8006982:	4b45      	ldr	r3, [pc, #276]	; (8006a98 <gps_init+0x150>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800698a:	605a      	str	r2, [r3, #4]
		HAL_UART_Init(huart_GPS);
 800698c:	4b42      	ldr	r3, [pc, #264]	; (8006a98 <gps_init+0x150>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f7fe fd4a 	bl	800542a <HAL_UART_Init>
		HAL_UART_Transmit(huart_GPS, (uint8_t*)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 8006996:	4b40      	ldr	r3, [pc, #256]	; (8006a98 <gps_init+0x150>)
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	23c8      	movs	r3, #200	; 0xc8
 800699c:	2214      	movs	r2, #20
 800699e:	493f      	ldr	r1, [pc, #252]	; (8006a9c <gps_init+0x154>)
 80069a0:	f7fe fd90 	bl	80054c4 <HAL_UART_Transmit>
		HAL_Delay(500);
 80069a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069a8:	f7fa fb6a 	bl	8001080 <HAL_Delay>
		huart_GPS->Init.BaudRate = 115200;
 80069ac:	4b3a      	ldr	r3, [pc, #232]	; (8006a98 <gps_init+0x150>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80069b4:	605a      	str	r2, [r3, #4]
		HAL_UART_Init(huart_GPS);
 80069b6:	4b38      	ldr	r3, [pc, #224]	; (8006a98 <gps_init+0x150>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fd35 	bl	800542a <HAL_UART_Init>
		HAL_UART_Transmit(huart_GPS, (uint8_t*)PMTK_SET_BAUD_115200, strlen(PMTK_SET_BAUD_115200), 200);
 80069c0:	4b35      	ldr	r3, [pc, #212]	; (8006a98 <gps_init+0x150>)
 80069c2:	6818      	ldr	r0, [r3, #0]
 80069c4:	23c8      	movs	r3, #200	; 0xc8
 80069c6:	2214      	movs	r2, #20
 80069c8:	4934      	ldr	r1, [pc, #208]	; (8006a9c <gps_init+0x154>)
 80069ca:	f7fe fd7b 	bl	80054c4 <HAL_UART_Transmit>
		HAL_Delay(500);
 80069ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069d2:	f7fa fb55 	bl	8001080 <HAL_Delay>
		HAL_UART_Transmit(huart_GPS, (uint8_t*)PMTK_SET_NMEA_UPDATE_10HZ, strlen(PMTK_SET_NMEA_UPDATE_10HZ), 200);
 80069d6:	4b30      	ldr	r3, [pc, #192]	; (8006a98 <gps_init+0x150>)
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	23c8      	movs	r3, #200	; 0xc8
 80069dc:	2211      	movs	r2, #17
 80069de:	4930      	ldr	r1, [pc, #192]	; (8006aa0 <gps_init+0x158>)
 80069e0:	f7fe fd70 	bl	80054c4 <HAL_UART_Transmit>
		HAL_Delay(500);
 80069e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069e8:	f7fa fb4a 	bl	8001080 <HAL_Delay>
		HAL_UART_Transmit(huart_GPS, (uint8_t*)PMTK_SET_NMEA_OUTPUT_GGAVTG, strlen(PMTK_SET_NMEA_OUTPUT_GGAVTG), 200);
 80069ec:	4b2a      	ldr	r3, [pc, #168]	; (8006a98 <gps_init+0x150>)
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	23c8      	movs	r3, #200	; 0xc8
 80069f2:	2233      	movs	r2, #51	; 0x33
 80069f4:	492b      	ldr	r1, [pc, #172]	; (8006aa4 <gps_init+0x15c>)
 80069f6:	f7fe fd65 	bl	80054c4 <HAL_UART_Transmit>
		HAL_Delay(500);
 80069fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069fe:	f7fa fb3f 	bl	8001080 <HAL_Delay>
		strcpy(gps->speed,"000.00");
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	4a28      	ldr	r2, [pc, #160]	; (8006aa8 <gps_init+0x160>)
 8006a06:	6810      	ldr	r0, [r2, #0]
 8006a08:	6018      	str	r0, [r3, #0]
 8006a0a:	8891      	ldrh	r1, [r2, #4]
 8006a0c:	7992      	ldrb	r2, [r2, #6]
 8006a0e:	8099      	strh	r1, [r3, #4]
 8006a10:	719a      	strb	r2, [r3, #6]
		strcpy(gps->latitude,"0000.0000");
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	4925      	ldr	r1, [pc, #148]	; (8006aac <gps_init+0x164>)
 8006a18:	461a      	mov	r2, r3
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	cb03      	ldmia	r3!, {r0, r1}
 8006a1e:	6010      	str	r0, [r2, #0]
 8006a20:	6051      	str	r1, [r2, #4]
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	8113      	strh	r3, [r2, #8]
		strcpy(gps->latitude_o,"N");
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	331c      	adds	r3, #28
 8006a2a:	4921      	ldr	r1, [pc, #132]	; (8006ab0 <gps_init+0x168>)
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	460b      	mov	r3, r1
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	8013      	strh	r3, [r2, #0]
		strcpy(gps->longitude,"00000.0000");
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	332c      	adds	r3, #44	; 0x2c
 8006a38:	491e      	ldr	r1, [pc, #120]	; (8006ab4 <gps_init+0x16c>)
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	cb03      	ldmia	r3!, {r0, r1}
 8006a40:	6010      	str	r0, [r2, #0]
 8006a42:	6051      	str	r1, [r2, #4]
 8006a44:	8819      	ldrh	r1, [r3, #0]
 8006a46:	789b      	ldrb	r3, [r3, #2]
 8006a48:	8111      	strh	r1, [r2, #8]
 8006a4a:	7293      	strb	r3, [r2, #10]
		strcpy(gps->longitude_o,"W");
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	333c      	adds	r3, #60	; 0x3c
 8006a50:	4919      	ldr	r1, [pc, #100]	; (8006ab8 <gps_init+0x170>)
 8006a52:	461a      	mov	r2, r3
 8006a54:	460b      	mov	r3, r1
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	8013      	strh	r3, [r2, #0]
		strcpy(gps->altitude,"0000.0");
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	334c      	adds	r3, #76	; 0x4c
 8006a5e:	4a17      	ldr	r2, [pc, #92]	; (8006abc <gps_init+0x174>)
 8006a60:	6810      	ldr	r0, [r2, #0]
 8006a62:	6018      	str	r0, [r3, #0]
 8006a64:	8891      	ldrh	r1, [r2, #4]
 8006a66:	7992      	ldrb	r2, [r2, #6]
 8006a68:	8099      	strh	r1, [r3, #4]
 8006a6a:	719a      	strb	r2, [r3, #6]
		strcpy(gps->time,"000000");
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	3358      	adds	r3, #88	; 0x58
 8006a70:	4a13      	ldr	r2, [pc, #76]	; (8006ac0 <gps_init+0x178>)
 8006a72:	6810      	ldr	r0, [r2, #0]
 8006a74:	6018      	str	r0, [r3, #0]
 8006a76:	8891      	ldrh	r1, [r2, #4]
 8006a78:	7992      	ldrb	r2, [r2, #6]
 8006a7a:	8099      	strh	r1, [r3, #4]
 8006a7c:	719a      	strb	r2, [r3, #6]
		HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request of rx buffer interrupt
 8006a7e:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <gps_init+0x150>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2201      	movs	r2, #1
 8006a84:	490f      	ldr	r1, [pc, #60]	; (8006ac4 <gps_init+0x17c>)
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe fdfa 	bl	8005680 <HAL_UART_Receive_IT>

		return 1;
 8006a8c:	2301      	movs	r3, #1
	}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000c94 	.word	0x20000c94
 8006a9c:	0800b968 	.word	0x0800b968
 8006aa0:	0800b980 	.word	0x0800b980
 8006aa4:	0800b994 	.word	0x0800b994
 8006aa8:	0800b9c8 	.word	0x0800b9c8
 8006aac:	0800b9d0 	.word	0x0800b9d0
 8006ab0:	0800b9dc 	.word	0x0800b9dc
 8006ab4:	0800b9e0 	.word	0x0800b9e0
 8006ab8:	0800b9ec 	.word	0x0800b9ec
 8006abc:	0800b9f0 	.word	0x0800b9f0
 8006ac0:	0800b9f8 	.word	0x0800b9f8
 8006ac4:	20000c74 	.word	0x20000c74

08006ac8 <gps_read_it>:

	int gps_read_it(UART_HandleTypeDef *huart, gps_struct* gps){
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b08d      	sub	sp, #52	; 0x34
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]

			int ret=0; //return--> 0=error,1=ok
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
				$GPWPL - Waypoint location
				$GPXTE - Cross-track error, Measured
				$GPZDA - Date & Time
				http://aprs.gids.nl/nmea/
			*/
			if(huart==huart_GPS){
 8006ad6:	4b7b      	ldr	r3, [pc, #492]	; (8006cc4 <gps_read_it+0x1fc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	f040 8295 	bne.w	800700c <gps_read_it+0x544>
				//check if it's the huart_gps interrupt
				HAL_UART_Receive_IT(huart_GPS, (uint8_t *)buffer_gps, 1); //request interrupt for the next data
 8006ae2:	4b78      	ldr	r3, [pc, #480]	; (8006cc4 <gps_read_it+0x1fc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4977      	ldr	r1, [pc, #476]	; (8006cc8 <gps_read_it+0x200>)
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fdc8 	bl	8005680 <HAL_UART_Receive_IT>
				data_string_gps=buffer_gps[0]; //convert a pointer into a char
 8006af0:	4b75      	ldr	r3, [pc, #468]	; (8006cc8 <gps_read_it+0x200>)
 8006af2:	781a      	ldrb	r2, [r3, #0]
 8006af4:	4b75      	ldr	r3, [pc, #468]	; (8006ccc <gps_read_it+0x204>)
 8006af6:	701a      	strb	r2, [r3, #0]
				if((start_string_gps==1)&&(data_string_gps!='$')){ //check that the new string has not started yet
 8006af8:	4b75      	ldr	r3, [pc, #468]	; (8006cd0 <gps_read_it+0x208>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	f040 8279 	bne.w	8006ff4 <gps_read_it+0x52c>
 8006b02:	4b72      	ldr	r3, [pc, #456]	; (8006ccc <gps_read_it+0x204>)
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	2b24      	cmp	r3, #36	; 0x24
 8006b08:	f000 8274 	beq.w	8006ff4 <gps_read_it+0x52c>
					string_gps[cont_string]=data_string_gps; //save the data into the array
 8006b0c:	4b71      	ldr	r3, [pc, #452]	; (8006cd4 <gps_read_it+0x20c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a6e      	ldr	r2, [pc, #440]	; (8006ccc <gps_read_it+0x204>)
 8006b12:	7811      	ldrb	r1, [r2, #0]
 8006b14:	4a70      	ldr	r2, [pc, #448]	; (8006cd8 <gps_read_it+0x210>)
 8006b16:	54d1      	strb	r1, [r2, r3]
					cont_string++;
 8006b18:	4b6e      	ldr	r3, [pc, #440]	; (8006cd4 <gps_read_it+0x20c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	4a6d      	ldr	r2, [pc, #436]	; (8006cd4 <gps_read_it+0x20c>)
 8006b20:	6013      	str	r3, [r2, #0]
					if(string_gps[cont_string-1]=='\r'||string_gps[cont_string-1]=='\n'){  //indicates that the string is finishing
 8006b22:	4b6c      	ldr	r3, [pc, #432]	; (8006cd4 <gps_read_it+0x20c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3b01      	subs	r3, #1
 8006b28:	4a6b      	ldr	r2, [pc, #428]	; (8006cd8 <gps_read_it+0x210>)
 8006b2a:	5cd3      	ldrb	r3, [r2, r3]
 8006b2c:	2b0d      	cmp	r3, #13
 8006b2e:	d007      	beq.n	8006b40 <gps_read_it+0x78>
 8006b30:	4b68      	ldr	r3, [pc, #416]	; (8006cd4 <gps_read_it+0x20c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4a68      	ldr	r2, [pc, #416]	; (8006cd8 <gps_read_it+0x210>)
 8006b38:	5cd3      	ldrb	r3, [r2, r3]
 8006b3a:	2b0a      	cmp	r3, #10
 8006b3c:	f040 8265 	bne.w	800700a <gps_read_it+0x542>
						cont_string--;
 8006b40:	4b64      	ldr	r3, [pc, #400]	; (8006cd4 <gps_read_it+0x20c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3b01      	subs	r3, #1
 8006b46:	4a63      	ldr	r2, [pc, #396]	; (8006cd4 <gps_read_it+0x20c>)
 8006b48:	6013      	str	r3, [r2, #0]
						string_gps[cont_string]='\0'; // '\0'=end of the string
 8006b4a:	4b62      	ldr	r3, [pc, #392]	; (8006cd4 <gps_read_it+0x20c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a62      	ldr	r2, [pc, #392]	; (8006cd8 <gps_read_it+0x210>)
 8006b50:	2100      	movs	r1, #0
 8006b52:	54d1      	strb	r1, [r2, r3]
						start_string_gps=0; //end of string
 8006b54:	4b5e      	ldr	r3, [pc, #376]	; (8006cd0 <gps_read_it+0x208>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	601a      	str	r2, [r3, #0]
						if(string_gps[2]=='G'&&string_gps[3]=='G'&&string_gps[4]=='A'){ // operation when the string is GPGGA //
 8006b5a:	4b5f      	ldr	r3, [pc, #380]	; (8006cd8 <gps_read_it+0x210>)
 8006b5c:	789b      	ldrb	r3, [r3, #2]
 8006b5e:	2b47      	cmp	r3, #71	; 0x47
 8006b60:	f040 8171 	bne.w	8006e46 <gps_read_it+0x37e>
 8006b64:	4b5c      	ldr	r3, [pc, #368]	; (8006cd8 <gps_read_it+0x210>)
 8006b66:	78db      	ldrb	r3, [r3, #3]
 8006b68:	2b47      	cmp	r3, #71	; 0x47
 8006b6a:	f040 816c 	bne.w	8006e46 <gps_read_it+0x37e>
 8006b6e:	4b5a      	ldr	r3, [pc, #360]	; (8006cd8 <gps_read_it+0x210>)
 8006b70:	791b      	ldrb	r3, [r3, #4]
 8006b72:	2b41      	cmp	r3, #65	; 0x41
 8006b74:	f040 8167 	bne.w	8006e46 <gps_read_it+0x37e>
							if(checksum(string_gps,cont_string)==1){ //check the checksum (if==true -> enter)
 8006b78:	4b56      	ldr	r3, [pc, #344]	; (8006cd4 <gps_read_it+0x20c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4856      	ldr	r0, [pc, #344]	; (8006cd8 <gps_read_it+0x210>)
 8006b80:	f000 fa50 	bl	8007024 <checksum>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	f040 815a 	bne.w	8006e40 <gps_read_it+0x378>
								int cont_comma=0,cont_latitude=0,cont_longitude=0,cont_altitude=0,cont_time=0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b90:	2300      	movs	r3, #0
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
 8006b94:	2300      	movs	r3, #0
 8006b96:	623b      	str	r3, [r7, #32]
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61bb      	str	r3, [r7, #24]
								for(int i=5;i<100;i++){
 8006ba0:	2305      	movs	r3, #5
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	e075      	b.n	8006c92 <gps_read_it+0x1ca>
									if(string_gps[i]==',')cont_comma++;
 8006ba6:	4a4c      	ldr	r2, [pc, #304]	; (8006cd8 <gps_read_it+0x210>)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4413      	add	r3, r2
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b2c      	cmp	r3, #44	; 0x2c
 8006bb0:	d103      	bne.n	8006bba <gps_read_it+0xf2>
 8006bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb8:	e068      	b.n	8006c8c <gps_read_it+0x1c4>
									else{
										if(cont_comma==1){ //save the time
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d10d      	bne.n	8006bdc <gps_read_it+0x114>
											gps->time[cont_time]=string_gps[i];
 8006bc0:	4a45      	ldr	r2, [pc, #276]	; (8006cd8 <gps_read_it+0x210>)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	7819      	ldrb	r1, [r3, #0]
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	4413      	add	r3, r2
 8006bce:	3358      	adds	r3, #88	; 0x58
 8006bd0:	460a      	mov	r2, r1
 8006bd2:	701a      	strb	r2, [r3, #0]
											cont_time++;
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	e057      	b.n	8006c8c <gps_read_it+0x1c4>
										}
										else if(cont_comma==2){ //save latitude
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d10d      	bne.n	8006bfe <gps_read_it+0x136>
											gps->latitude[cont_latitude]=string_gps[i];
 8006be2:	4a3d      	ldr	r2, [pc, #244]	; (8006cd8 <gps_read_it+0x210>)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	7819      	ldrb	r1, [r3, #0]
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	4413      	add	r3, r2
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	460a      	mov	r2, r1
 8006bf4:	701a      	strb	r2, [r3, #0]
											cont_latitude++;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfc:	e046      	b.n	8006c8c <gps_read_it+0x1c4>
										}
										else if(cont_comma==3){ //save orientation of latitude
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d106      	bne.n	8006c12 <gps_read_it+0x14a>
											gps->latitude_o[0]=string_gps[i];
 8006c04:	4a34      	ldr	r2, [pc, #208]	; (8006cd8 <gps_read_it+0x210>)
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	4413      	add	r3, r2
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	771a      	strb	r2, [r3, #28]
 8006c10:	e03c      	b.n	8006c8c <gps_read_it+0x1c4>
										}
										else if(cont_comma==4){ //save longitude
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	d10d      	bne.n	8006c34 <gps_read_it+0x16c>
											gps->longitude[cont_longitude]=string_gps[i];
 8006c18:	4a2f      	ldr	r2, [pc, #188]	; (8006cd8 <gps_read_it+0x210>)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	7819      	ldrb	r1, [r3, #0]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	4413      	add	r3, r2
 8006c26:	332c      	adds	r3, #44	; 0x2c
 8006c28:	460a      	mov	r2, r1
 8006c2a:	701a      	strb	r2, [r3, #0]
											cont_longitude++;
 8006c2c:	6a3b      	ldr	r3, [r7, #32]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	e02b      	b.n	8006c8c <gps_read_it+0x1c4>
										}
										else if(cont_comma==5){ //save orientation of longitude
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d107      	bne.n	8006c4a <gps_read_it+0x182>
											gps->longitude_o[0]=string_gps[i];
 8006c3a:	4a27      	ldr	r2, [pc, #156]	; (8006cd8 <gps_read_it+0x210>)
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	4413      	add	r3, r2
 8006c40:	781a      	ldrb	r2, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c48:	e020      	b.n	8006c8c <gps_read_it+0x1c4>
										}
										else if (cont_comma==6){
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	2b06      	cmp	r3, #6
 8006c4e:	d107      	bne.n	8006c60 <gps_read_it+0x198>
											gps->fix_status=string_gps[i];
 8006c50:	4a21      	ldr	r2, [pc, #132]	; (8006cd8 <gps_read_it+0x210>)
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	4413      	add	r3, r2
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8006c5e:	e015      	b.n	8006c8c <gps_read_it+0x1c4>
										}
										else if(cont_comma==9){ //save altitude
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	2b09      	cmp	r3, #9
 8006c64:	d10d      	bne.n	8006c82 <gps_read_it+0x1ba>
											gps->altitude[cont_altitude]=string_gps[i];
 8006c66:	4a1c      	ldr	r2, [pc, #112]	; (8006cd8 <gps_read_it+0x210>)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	7819      	ldrb	r1, [r3, #0]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	334c      	adds	r3, #76	; 0x4c
 8006c76:	460a      	mov	r2, r1
 8006c78:	701a      	strb	r2, [r3, #0]
											cont_altitude++;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	e004      	b.n	8006c8c <gps_read_it+0x1c4>
										}
										else if(cont_comma==10){
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	2b0a      	cmp	r3, #10
 8006c86:	d101      	bne.n	8006c8c <gps_read_it+0x1c4>
											i=100; //end the cicle
 8006c88:	2364      	movs	r3, #100	; 0x64
 8006c8a:	617b      	str	r3, [r7, #20]
								for(int i=5;i<100;i++){
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2b63      	cmp	r3, #99	; 0x63
 8006c96:	dd86      	ble.n	8006ba6 <gps_read_it+0xde>
										}
									}

								}
								//-- operation to split data and send them --//
								if(gps->fix_status=='0'){
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8006c9e:	2b30      	cmp	r3, #48	; 0x30
 8006ca0:	d11c      	bne.n	8006cdc <gps_read_it+0x214>
									gps->latitude_i_h=0;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	625a      	str	r2, [r3, #36]	; 0x24
									gps->latitude_i_l=0;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	2200      	movs	r2, #0
 8006cac:	629a      	str	r2, [r3, #40]	; 0x28
									gps->longitude_i_h=0;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	645a      	str	r2, [r3, #68]	; 0x44
									gps->longitude_i_l=0;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	649a      	str	r2, [r3, #72]	; 0x48
									gps->altitude_i=0;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	655a      	str	r2, [r3, #84]	; 0x54
 8006cc0:	e073      	b.n	8006daa <gps_read_it+0x2e2>
 8006cc2:	bf00      	nop
 8006cc4:	20000c94 	.word	0x20000c94
 8006cc8:	20000c74 	.word	0x20000c74
 8006ccc:	20000c54 	.word	0x20000c54
 8006cd0:	200003f8 	.word	0x200003f8
 8006cd4:	20000874 	.word	0x20000874
 8006cd8:	20000c98 	.word	0x20000c98
								}
								else{
									gps->latitude_i=(long int)(atof(gps->latitude)*10000);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	330c      	adds	r3, #12
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f002 fbf4 	bl	80094ce <atof>
 8006ce6:	ec51 0b10 	vmov	r0, r1, d0
 8006cea:	a3be      	add	r3, pc, #760	; (adr r3, 8006fe4 <gps_read_it+0x51c>)
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f7f9 fca2 	bl	8000638 <__aeabi_dmul>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	f7f9 ff36 	bl	8000b6c <__aeabi_d2iz>
 8006d00:	4602      	mov	r2, r0
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	621a      	str	r2, [r3, #32]
									gps->longitude_i=(long int)(atof(gps->longitude)*100000);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	332c      	adds	r3, #44	; 0x2c
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f002 fbdf 	bl	80094ce <atof>
 8006d10:	ec51 0b10 	vmov	r0, r1, d0
 8006d14:	a3b5      	add	r3, pc, #724	; (adr r3, 8006fec <gps_read_it+0x524>)
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fc8d 	bl	8000638 <__aeabi_dmul>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	460c      	mov	r4, r1
 8006d22:	4618      	mov	r0, r3
 8006d24:	4621      	mov	r1, r4
 8006d26:	f7f9 ff21 	bl	8000b6c <__aeabi_d2iz>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	641a      	str	r2, [r3, #64]	; 0x40
									gps->altitude_i=(int)(atof(gps->altitude)*100);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	334c      	adds	r3, #76	; 0x4c
 8006d34:	4618      	mov	r0, r3
 8006d36:	f002 fbca 	bl	80094ce <atof>
 8006d3a:	ec51 0b10 	vmov	r0, r1, d0
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	4b9f      	ldr	r3, [pc, #636]	; (8006fc0 <gps_read_it+0x4f8>)
 8006d44:	f7f9 fc78 	bl	8000638 <__aeabi_dmul>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	4621      	mov	r1, r4
 8006d50:	f7f9 ff0c 	bl	8000b6c <__aeabi_d2iz>
 8006d54:	4602      	mov	r2, r0
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	655a      	str	r2, [r3, #84]	; 0x54
									gps->latitude_i_h=(int)(gps->latitude_i/10000);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	4a99      	ldr	r2, [pc, #612]	; (8006fc4 <gps_read_it+0x4fc>)
 8006d60:	fb82 1203 	smull	r1, r2, r2, r3
 8006d64:	1312      	asrs	r2, r2, #12
 8006d66:	17db      	asrs	r3, r3, #31
 8006d68:	1ad2      	subs	r2, r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	625a      	str	r2, [r3, #36]	; 0x24
									gps->latitude_i_l=(int)(gps->latitude_i-gps->latitude_i_h*10000);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6a1a      	ldr	r2, [r3, #32]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	4994      	ldr	r1, [pc, #592]	; (8006fc8 <gps_read_it+0x500>)
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	441a      	add	r2, r3
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	629a      	str	r2, [r3, #40]	; 0x28
									gps->longitude_i_h=(int)(gps->longitude_i/100000);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	4a91      	ldr	r2, [pc, #580]	; (8006fcc <gps_read_it+0x504>)
 8006d88:	fb82 1203 	smull	r1, r2, r2, r3
 8006d8c:	1352      	asrs	r2, r2, #13
 8006d8e:	17db      	asrs	r3, r3, #31
 8006d90:	1ad2      	subs	r2, r2, r3
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44
									gps->longitude_i_l=(int)(gps->longitude_i-gps->longitude_i_h*100000);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d9e:	498c      	ldr	r1, [pc, #560]	; (8006fd0 <gps_read_it+0x508>)
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	441a      	add	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	649a      	str	r2, [r3, #72]	; 0x48
								}

								can.dataTx[0] = 0x08;
 8006daa:	4b8a      	ldr	r3, [pc, #552]	; (8006fd4 <gps_read_it+0x50c>)
 8006dac:	2208      	movs	r2, #8
 8006dae:	721a      	strb	r2, [r3, #8]
								can.dataTx[1] = gps->longitude_i_h / 256;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da00      	bge.n	8006dba <gps_read_it+0x2f2>
 8006db8:	33ff      	adds	r3, #255	; 0xff
 8006dba:	121b      	asrs	r3, r3, #8
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	4b85      	ldr	r3, [pc, #532]	; (8006fd4 <gps_read_it+0x50c>)
 8006dc0:	725a      	strb	r2, [r3, #9]
								can.dataTx[2] = gps->longitude_i_h % 256;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	425a      	negs	r2, r3
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	b2d2      	uxtb	r2, r2
 8006dcc:	bf58      	it	pl
 8006dce:	4253      	negpl	r3, r2
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	4b80      	ldr	r3, [pc, #512]	; (8006fd4 <gps_read_it+0x50c>)
 8006dd4:	729a      	strb	r2, [r3, #10]
								can.dataTx[3] = gps->longitude_i_l / 256;
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	da00      	bge.n	8006de0 <gps_read_it+0x318>
 8006dde:	33ff      	adds	r3, #255	; 0xff
 8006de0:	121b      	asrs	r3, r3, #8
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	4b7b      	ldr	r3, [pc, #492]	; (8006fd4 <gps_read_it+0x50c>)
 8006de6:	72da      	strb	r2, [r3, #11]
								can.dataTx[4] = gps->longitude_i_l % 256;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dec:	425a      	negs	r2, r3
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	bf58      	it	pl
 8006df4:	4253      	negpl	r3, r2
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	4b76      	ldr	r3, [pc, #472]	; (8006fd4 <gps_read_it+0x50c>)
 8006dfa:	731a      	strb	r2, [r3, #12]
								can.dataTx[5] = (int)gps->longitude_o;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	333c      	adds	r3, #60	; 0x3c
 8006e00:	b2da      	uxtb	r2, r3
 8006e02:	4b74      	ldr	r3, [pc, #464]	; (8006fd4 <gps_read_it+0x50c>)
 8006e04:	735a      	strb	r2, [r3, #13]
								can.dataTx[6] = gps->altitude_i / 256;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da00      	bge.n	8006e10 <gps_read_it+0x348>
 8006e0e:	33ff      	adds	r3, #255	; 0xff
 8006e10:	121b      	asrs	r3, r3, #8
 8006e12:	b2da      	uxtb	r2, r3
 8006e14:	4b6f      	ldr	r3, [pc, #444]	; (8006fd4 <gps_read_it+0x50c>)
 8006e16:	739a      	strb	r2, [r3, #14]
								can.dataTx[7] = gps->altitude_i % 256;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1c:	425a      	negs	r2, r3
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	b2d2      	uxtb	r2, r2
 8006e22:	bf58      	it	pl
 8006e24:	4253      	negpl	r3, r2
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	4b6a      	ldr	r3, [pc, #424]	; (8006fd4 <gps_read_it+0x50c>)
 8006e2a:	73da      	strb	r2, [r3, #15]
								can.id = 0xD0;
 8006e2c:	4b69      	ldr	r3, [pc, #420]	; (8006fd4 <gps_read_it+0x50c>)
 8006e2e:	22d0      	movs	r2, #208	; 0xd0
 8006e30:	601a      	str	r2, [r3, #0]
								can.size = 8;
 8006e32:	4b68      	ldr	r3, [pc, #416]	; (8006fd4 <gps_read_it+0x50c>)
 8006e34:	2208      	movs	r2, #8
 8006e36:	605a      	str	r2, [r3, #4]
								CAN_Send(&can);
 8006e38:	4866      	ldr	r0, [pc, #408]	; (8006fd4 <gps_read_it+0x50c>)
 8006e3a:	f7ff fcc5 	bl	80067c8 <CAN_Send>
							if(checksum(string_gps,cont_string)==1){ //check the checksum (if==true -> enter)
 8006e3e:	e0bc      	b.n	8006fba <gps_read_it+0x4f2>
							}
							else{
								ret=0; //checksum failed
 8006e40:	2300      	movs	r3, #0
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
							if(checksum(string_gps,cont_string)==1){ //check the checksum (if==true -> enter)
 8006e44:	e0b9      	b.n	8006fba <gps_read_it+0x4f2>
							}
						}
						else if(string_gps[2]=='V'&&string_gps[3]=='T'&&string_gps[4]=='G'){ 	// operation when the string is GPVTG //
 8006e46:	4b64      	ldr	r3, [pc, #400]	; (8006fd8 <gps_read_it+0x510>)
 8006e48:	789b      	ldrb	r3, [r3, #2]
 8006e4a:	2b56      	cmp	r3, #86	; 0x56
 8006e4c:	f040 80dd 	bne.w	800700a <gps_read_it+0x542>
 8006e50:	4b61      	ldr	r3, [pc, #388]	; (8006fd8 <gps_read_it+0x510>)
 8006e52:	78db      	ldrb	r3, [r3, #3]
 8006e54:	2b54      	cmp	r3, #84	; 0x54
 8006e56:	f040 80d8 	bne.w	800700a <gps_read_it+0x542>
 8006e5a:	4b5f      	ldr	r3, [pc, #380]	; (8006fd8 <gps_read_it+0x510>)
 8006e5c:	791b      	ldrb	r3, [r3, #4]
 8006e5e:	2b47      	cmp	r3, #71	; 0x47
 8006e60:	f040 80d3 	bne.w	800700a <gps_read_it+0x542>
							if(checksum(string_gps,cont_string)==1){ //check the checksum (if==true -> enter)
 8006e64:	4b5d      	ldr	r3, [pc, #372]	; (8006fdc <gps_read_it+0x514>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	485b      	ldr	r0, [pc, #364]	; (8006fd8 <gps_read_it+0x510>)
 8006e6c:	f000 f8da 	bl	8007024 <checksum>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	f040 809e 	bne.w	8006fb4 <gps_read_it+0x4ec>
								cont_comma=0;
 8006e78:	4b59      	ldr	r3, [pc, #356]	; (8006fe0 <gps_read_it+0x518>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
								int cont_speed=0;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]
								for(int i=5;i<cont_string;i++){
 8006e82:	2305      	movs	r3, #5
 8006e84:	60fb      	str	r3, [r7, #12]
 8006e86:	e026      	b.n	8006ed6 <gps_read_it+0x40e>
									if(string_gps[i]==',')cont_comma++;
 8006e88:	4a53      	ldr	r2, [pc, #332]	; (8006fd8 <gps_read_it+0x510>)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b2c      	cmp	r3, #44	; 0x2c
 8006e92:	d105      	bne.n	8006ea0 <gps_read_it+0x3d8>
 8006e94:	4b52      	ldr	r3, [pc, #328]	; (8006fe0 <gps_read_it+0x518>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	4a51      	ldr	r2, [pc, #324]	; (8006fe0 <gps_read_it+0x518>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	e017      	b.n	8006ed0 <gps_read_it+0x408>
									else{
										if(cont_comma==7){ //save the speed
 8006ea0:	4b4f      	ldr	r3, [pc, #316]	; (8006fe0 <gps_read_it+0x518>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b07      	cmp	r3, #7
 8006ea6:	d10c      	bne.n	8006ec2 <gps_read_it+0x3fa>
											gps->speed[cont_speed]=string_gps[i];
 8006ea8:	4a4b      	ldr	r2, [pc, #300]	; (8006fd8 <gps_read_it+0x510>)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	7819      	ldrb	r1, [r3, #0]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	460a      	mov	r2, r1
 8006eb8:	701a      	strb	r2, [r3, #0]
											cont_speed++;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
 8006ec0:	e006      	b.n	8006ed0 <gps_read_it+0x408>
										}
										else if(cont_comma==8){
 8006ec2:	4b47      	ldr	r3, [pc, #284]	; (8006fe0 <gps_read_it+0x518>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d102      	bne.n	8006ed0 <gps_read_it+0x408>
											i=cont_string;
 8006eca:	4b44      	ldr	r3, [pc, #272]	; (8006fdc <gps_read_it+0x514>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60fb      	str	r3, [r7, #12]
								for(int i=5;i<cont_string;i++){
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]
 8006ed6:	4b41      	ldr	r3, [pc, #260]	; (8006fdc <gps_read_it+0x514>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	dbd3      	blt.n	8006e88 <gps_read_it+0x3c0>
										}
									}
								}
								//-- operation to split data and send them --//
								if(gps->fix_status=='0'){
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8006ee6:	2b30      	cmp	r3, #48	; 0x30
 8006ee8:	d103      	bne.n	8006ef2 <gps_read_it+0x42a>
									gps->speed_i=0;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2200      	movs	r2, #0
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	e013      	b.n	8006f1a <gps_read_it+0x452>
								}else{
									gps->speed_i=(int)(atof(gps->speed)*100);
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f002 faea 	bl	80094ce <atof>
 8006efa:	ec51 0b10 	vmov	r0, r1, d0
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	4b2f      	ldr	r3, [pc, #188]	; (8006fc0 <gps_read_it+0x4f8>)
 8006f04:	f7f9 fb98 	bl	8000638 <__aeabi_dmul>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f7f9 fe2c 	bl	8000b6c <__aeabi_d2iz>
 8006f14:	4602      	mov	r2, r0
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	609a      	str	r2, [r3, #8]
								}
								can.dataTx[0] = 0x07;
 8006f1a:	4b2e      	ldr	r3, [pc, #184]	; (8006fd4 <gps_read_it+0x50c>)
 8006f1c:	2207      	movs	r2, #7
 8006f1e:	721a      	strb	r2, [r3, #8]
								can.dataTx[1] = gps->latitude_i_h / 256;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	da00      	bge.n	8006f2a <gps_read_it+0x462>
 8006f28:	33ff      	adds	r3, #255	; 0xff
 8006f2a:	121b      	asrs	r3, r3, #8
 8006f2c:	b2da      	uxtb	r2, r3
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <gps_read_it+0x50c>)
 8006f30:	725a      	strb	r2, [r3, #9]
								can.dataTx[2] = gps->latitude_i_h % 256;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	425a      	negs	r2, r3
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	bf58      	it	pl
 8006f3e:	4253      	negpl	r3, r2
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	4b24      	ldr	r3, [pc, #144]	; (8006fd4 <gps_read_it+0x50c>)
 8006f44:	729a      	strb	r2, [r3, #10]
								can.dataTx[3] = gps->latitude_i_l / 256;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	da00      	bge.n	8006f50 <gps_read_it+0x488>
 8006f4e:	33ff      	adds	r3, #255	; 0xff
 8006f50:	121b      	asrs	r3, r3, #8
 8006f52:	b2da      	uxtb	r2, r3
 8006f54:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <gps_read_it+0x50c>)
 8006f56:	72da      	strb	r2, [r3, #11]
								can.dataTx[4] = gps->latitude_i_l % 256;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	425a      	negs	r2, r3
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	bf58      	it	pl
 8006f64:	4253      	negpl	r3, r2
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <gps_read_it+0x50c>)
 8006f6a:	731a      	strb	r2, [r3, #12]
								can.dataTx[5] = (int)gps->latitude_o;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	331c      	adds	r3, #28
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	4b18      	ldr	r3, [pc, #96]	; (8006fd4 <gps_read_it+0x50c>)
 8006f74:	735a      	strb	r2, [r3, #13]
								can.dataTx[6] = gps->speed_i / 256;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da00      	bge.n	8006f80 <gps_read_it+0x4b8>
 8006f7e:	33ff      	adds	r3, #255	; 0xff
 8006f80:	121b      	asrs	r3, r3, #8
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <gps_read_it+0x50c>)
 8006f86:	739a      	strb	r2, [r3, #14]
								can.dataTx[7] = gps->speed_i % 256;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	425a      	negs	r2, r3
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	bf58      	it	pl
 8006f94:	4253      	negpl	r3, r2
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <gps_read_it+0x50c>)
 8006f9a:	73da      	strb	r2, [r3, #15]
								can.id = 0xD0;
 8006f9c:	4b0d      	ldr	r3, [pc, #52]	; (8006fd4 <gps_read_it+0x50c>)
 8006f9e:	22d0      	movs	r2, #208	; 0xd0
 8006fa0:	601a      	str	r2, [r3, #0]
								can.size = 8;
 8006fa2:	4b0c      	ldr	r3, [pc, #48]	; (8006fd4 <gps_read_it+0x50c>)
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	605a      	str	r2, [r3, #4]
								CAN_Send(&can);
 8006fa8:	480a      	ldr	r0, [pc, #40]	; (8006fd4 <gps_read_it+0x50c>)
 8006faa:	f7ff fc0d 	bl	80067c8 <CAN_Send>
								ret=1;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(string_gps[cont_string-1]=='\r'||string_gps[cont_string-1]=='\n'){  //indicates that the string is finishing
 8006fb2:	e02a      	b.n	800700a <gps_read_it+0x542>
							}
							else{
								ret=0;  //checksum failed
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
					if(string_gps[cont_string-1]=='\r'||string_gps[cont_string-1]=='\n'){  //indicates that the string is finishing
 8006fb8:	e027      	b.n	800700a <gps_read_it+0x542>
 8006fba:	e026      	b.n	800700a <gps_read_it+0x542>
 8006fbc:	f3af 8000 	nop.w
 8006fc0:	40590000 	.word	0x40590000
 8006fc4:	68db8bad 	.word	0x68db8bad
 8006fc8:	ffffd8f0 	.word	0xffffd8f0
 8006fcc:	14f8b589 	.word	0x14f8b589
 8006fd0:	fffe7960 	.word	0xfffe7960
 8006fd4:	20000c58 	.word	0x20000c58
 8006fd8:	20000c98 	.word	0x20000c98
 8006fdc:	20000874 	.word	0x20000874
 8006fe0:	20000c50 	.word	0x20000c50
 8006fe4:	00000000 	.word	0x00000000
 8006fe8:	40c38800 	.word	0x40c38800
 8006fec:	00000000 	.word	0x00000000
 8006ff0:	40f86a00 	.word	0x40f86a00
							}
						}
					}
				}
				else{
					if(data_string_gps=='$'){ //check if data indicates the start of new string
 8006ff4:	4b08      	ldr	r3, [pc, #32]	; (8007018 <gps_read_it+0x550>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b24      	cmp	r3, #36	; 0x24
 8006ffa:	d107      	bne.n	800700c <gps_read_it+0x544>
						start_string_gps=1; //new string started
 8006ffc:	4b07      	ldr	r3, [pc, #28]	; (800701c <gps_read_it+0x554>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	601a      	str	r2, [r3, #0]
						cont_string=0; //set the counter to 1
 8007002:	4b07      	ldr	r3, [pc, #28]	; (8007020 <gps_read_it+0x558>)
 8007004:	2200      	movs	r2, #0
 8007006:	601a      	str	r2, [r3, #0]
 8007008:	e000      	b.n	800700c <gps_read_it+0x544>
					if(string_gps[cont_string-1]=='\r'||string_gps[cont_string-1]=='\n'){  //indicates that the string is finishing
 800700a:	bf00      	nop
					}
				}


			}
			return ret;
 800700c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		}
 800700e:	4618      	mov	r0, r3
 8007010:	3734      	adds	r7, #52	; 0x34
 8007012:	46bd      	mov	sp, r7
 8007014:	bd90      	pop	{r4, r7, pc}
 8007016:	bf00      	nop
 8007018:	20000c54 	.word	0x20000c54
 800701c:	200003f8 	.word	0x200003f8
 8007020:	20000874 	.word	0x20000874

08007024 <checksum>:
	static int checksum(char * string_checksum, int size_string_checksum){ //check the checksum
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
		//return 1;

		int res=0;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
		int offset_maiusc=(int)('A')-(int)('a');
 8007032:	f06f 031f 	mvn.w	r3, #31
 8007036:	613b      	str	r3, [r7, #16]
		int i=0;
 8007038:	2300      	movs	r3, #0
 800703a:	61bb      	str	r3, [r7, #24]

		for(i=0;(i<size_string_checksum)&&(string_checksum[i]!='*');i++){
 800703c:	2300      	movs	r3, #0
 800703e:	61bb      	str	r3, [r7, #24]
 8007040:	e00a      	b.n	8007058 <checksum+0x34>
			res=res^string_checksum[i];
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	4413      	add	r3, r2
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	4053      	eors	r3, r2
 8007050:	61fb      	str	r3, [r7, #28]
		for(i=0;(i<size_string_checksum)&&(string_checksum[i]!='*');i++){
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	3301      	adds	r3, #1
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	429a      	cmp	r2, r3
 800705e:	da05      	bge.n	800706c <checksum+0x48>
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	4413      	add	r3, r2
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b2a      	cmp	r3, #42	; 0x2a
 800706a:	d1ea      	bne.n	8007042 <checksum+0x1e>
		}
		char check[2]={string_checksum[i+1],string_checksum[i+2]};
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	3301      	adds	r3, #1
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	733b      	strb	r3, [r7, #12]
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	3302      	adds	r3, #2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	4413      	add	r3, r2
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	737b      	strb	r3, [r7, #13]
		char res_char[3];
		sprintf(res_char,"%x",res);
 8007084:	f107 0308 	add.w	r3, r7, #8
 8007088:	69fa      	ldr	r2, [r7, #28]
 800708a:	4920      	ldr	r1, [pc, #128]	; (800710c <checksum+0xe8>)
 800708c:	4618      	mov	r0, r3
 800708e:	f002 fb15 	bl	80096bc <siprintf>
		if(res<17){
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2b10      	cmp	r3, #16
 8007096:	dc03      	bgt.n	80070a0 <checksum+0x7c>
			res_char[1]=res_char[0];
 8007098:	7a3b      	ldrb	r3, [r7, #8]
 800709a:	727b      	strb	r3, [r7, #9]
			res_char[0]='0';
 800709c:	2330      	movs	r3, #48	; 0x30
 800709e:	723b      	strb	r3, [r7, #8]
		}
		for(int j=0;j<2;j++){ //convert to upper case letter
 80070a0:	2300      	movs	r3, #0
 80070a2:	617b      	str	r3, [r7, #20]
 80070a4:	e01f      	b.n	80070e6 <checksum+0xc2>
			if((int)res_char[j]>='a'&&(int)res_char[j]<='f'){
 80070a6:	f107 0208 	add.w	r2, r7, #8
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	4413      	add	r3, r2
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b60      	cmp	r3, #96	; 0x60
 80070b2:	d915      	bls.n	80070e0 <checksum+0xbc>
 80070b4:	f107 0208 	add.w	r2, r7, #8
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4413      	add	r3, r2
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b66      	cmp	r3, #102	; 0x66
 80070c0:	d80e      	bhi.n	80070e0 <checksum+0xbc>
				res_char[j]=(char)((int)res_char[j]+offset_maiusc);
 80070c2:	f107 0208 	add.w	r2, r7, #8
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	4413      	add	r3, r2
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	4413      	add	r3, r2
 80070d2:	b2d9      	uxtb	r1, r3
 80070d4:	f107 0208 	add.w	r2, r7, #8
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	4413      	add	r3, r2
 80070dc:	460a      	mov	r2, r1
 80070de:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<2;j++){ //convert to upper case letter
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3301      	adds	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	dddc      	ble.n	80070a6 <checksum+0x82>
			}
		}
		if(res_char[0]==check[0]&&res_char[1]==check[1]){
 80070ec:	7a3a      	ldrb	r2, [r7, #8]
 80070ee:	7b3b      	ldrb	r3, [r7, #12]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d105      	bne.n	8007100 <checksum+0xdc>
 80070f4:	7a7a      	ldrb	r2, [r7, #9]
 80070f6:	7b7b      	ldrb	r3, [r7, #13]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d101      	bne.n	8007100 <checksum+0xdc>
			return 1; //checksum is correct
 80070fc:	2301      	movs	r3, #1
 80070fe:	e000      	b.n	8007102 <checksum+0xde>
		}
		else {
			return 0; //checksum failed
 8007100:	2300      	movs	r3, #0
		}
	}
 8007102:	4618      	mov	r0, r3
 8007104:	3720      	adds	r7, #32
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	0800ba00 	.word	0x0800ba00

08007110 <read_encoder>:
	// This function is called from the interrupt callback of the timer that you are using for the encoder
	// The tim used for this function must be initialized at most at 2 microsecond per tick
	// Lower the number of microseconds per tick better it is
	// TimerInstance = struct of the tim used for the encoder
	enc_stc enc;
	double read_encoder(enc_stc *enc){
 8007110:	b590      	push	{r4, r7, lr}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]

		enc->clock_period = 2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	611a      	str	r2, [r3, #16]

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800711e:	2200      	movs	r2, #0
 8007120:	2140      	movs	r1, #64	; 0x40
 8007122:	4867      	ldr	r0, [pc, #412]	; (80072c0 <read_encoder+0x1b0>)
 8007124:	f7fc fa4e 	bl	80035c4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2200      	movs	r2, #0
 8007132:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){}
 8007134:	bf00      	nop
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6912      	ldr	r2, [r2, #16]
 8007144:	4293      	cmp	r3, r2
 8007146:	d9f6      	bls.n	8007136 <read_encoder+0x26>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8007148:	2201      	movs	r2, #1
 800714a:	2140      	movs	r1, #64	; 0x40
 800714c:	485c      	ldr	r0, [pc, #368]	; (80072c0 <read_encoder+0x1b0>)
 800714e:	f7fc fa39 	bl	80035c4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2200      	movs	r2, #0
 800715c:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){}
 800715e:	bf00      	nop
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6912      	ldr	r2, [r2, #16]
 800716e:	4293      	cmp	r3, r2
 8007170:	d9f6      	bls.n	8007160 <read_encoder+0x50>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8007172:	2200      	movs	r2, #0
 8007174:	2140      	movs	r1, #64	; 0x40
 8007176:	4852      	ldr	r0, [pc, #328]	; (80072c0 <read_encoder+0x1b0>)
 8007178:	f7fc fa24 	bl	80035c4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){}
 8007188:	bf00      	nop
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6912      	ldr	r2, [r2, #16]
 8007198:	4293      	cmp	r3, r2
 800719a:	d9f6      	bls.n	800718a <read_encoder+0x7a>


		// Starting the clock to retrieve 14 bits from the sensor
		for (int i = 0; i < enc->data_size; i++){
 800719c:	2300      	movs	r3, #0
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e039      	b.n	8007216 <read_encoder+0x106>

			// CLOCK HIGH
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80071a2:	2201      	movs	r2, #1
 80071a4:	2140      	movs	r1, #64	; 0x40
 80071a6:	4846      	ldr	r0, [pc, #280]	; (80072c0 <read_encoder+0x1b0>)
 80071a8:	f7fc fa0c 	bl	80035c4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2200      	movs	r2, #0
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24
			while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){}
 80071b8:	bf00      	nop
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6912      	ldr	r2, [r2, #16]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d9f6      	bls.n	80071ba <read_encoder+0xaa>

			// Set the bit as the pin state (0 or 1)
			enc->Data[i] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 80071cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80071d0:	483b      	ldr	r0, [pc, #236]	; (80072c0 <read_encoder+0x1b0>)
 80071d2:	f7fc f9df 	bl	8003594 <HAL_GPIO_ReadPin>
 80071d6:	4603      	mov	r3, r0
 80071d8:	4619      	mov	r1, r3
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3304      	adds	r3, #4
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	6059      	str	r1, [r3, #4]

			// CLOCK LOW
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80071e6:	2200      	movs	r2, #0
 80071e8:	2140      	movs	r1, #64	; 0x40
 80071ea:	4835      	ldr	r0, [pc, #212]	; (80072c0 <read_encoder+0x1b0>)
 80071ec:	f7fc f9ea 	bl	80035c4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2200      	movs	r2, #0
 80071fa:	625a      	str	r2, [r3, #36]	; 0x24
			while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){}
 80071fc:	bf00      	nop
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6912      	ldr	r2, [r2, #16]
 800720c:	4293      	cmp	r3, r2
 800720e:	d9f6      	bls.n	80071fe <read_encoder+0xee>
		for (int i = 0; i < enc->data_size; i++){
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3301      	adds	r3, #1
 8007214:	60fb      	str	r3, [r7, #12]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	429a      	cmp	r2, r3
 800721e:	dbc0      	blt.n	80071a2 <read_encoder+0x92>
		}

		// Requesting an other bit for the aventual error sent from the sensor
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8007220:	2201      	movs	r2, #1
 8007222:	2140      	movs	r1, #64	; 0x40
 8007224:	4826      	ldr	r0, [pc, #152]	; (80072c0 <read_encoder+0x1b0>)
 8007226:	f7fc f9cd 	bl	80035c4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(enc->TimerInstance, 0);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	625a      	str	r2, [r3, #36]	; 0x24
		while(__HAL_TIM_GET_COUNTER(enc->TimerInstance) <= enc->clock_period){}
 8007236:	bf00      	nop
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6912      	ldr	r2, [r2, #16]
 8007246:	4293      	cmp	r3, r2
 8007248:	d9f6      	bls.n	8007238 <read_encoder+0x128>

		enc->error_flag = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8);
 800724a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800724e:	481c      	ldr	r0, [pc, #112]	; (80072c0 <read_encoder+0x1b0>)
 8007250:	f7fc f9a0 	bl	8003594 <HAL_GPIO_ReadPin>
 8007254:	4603      	mov	r3, r0
 8007256:	461a      	mov	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	609a      	str	r2, [r3, #8]

		// Converting bits into number and converting it into angle in degrees (0 ~ 359)
		enc->converted_data = bin_dec(enc->Data, enc->data_size);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f103 0214 	add.w	r2, r3, #20
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	4619      	mov	r1, r3
 8007268:	4610      	mov	r0, r2
 800726a:	f000 faf6 	bl	800785a <bin_dec>
 800726e:	4603      	mov	r3, r0
 8007270:	4618      	mov	r0, r3
 8007272:	f7f9 f977 	bl	8000564 <__aeabi_i2d>
 8007276:	4603      	mov	r3, r0
 8007278:	460c      	mov	r4, r1
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	e9c2 34f2 	strd	r3, r4, [r2, #968]	; 0x3c8
		enc->converted_data = enc->converted_data / 45.5055;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	e9d3 01f2 	ldrd	r0, r1, [r3, #968]	; 0x3c8
 8007286:	a30c      	add	r3, pc, #48	; (adr r3, 80072b8 <read_encoder+0x1a8>)
 8007288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728c:	f7f9 fafe 	bl	800088c <__aeabi_ddiv>
 8007290:	4603      	mov	r3, r0
 8007292:	460c      	mov	r4, r1
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	e9c2 34f2 	strd	r3, r4, [r2, #968]	; 0x3c8

		return enc->converted_data;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	e9d3 34f2 	ldrd	r3, r4, [r3, #968]	; 0x3c8
 80072a0:	ec44 3b17 	vmov	d7, r3, r4
	}
 80072a4:	eeb0 0a47 	vmov.f32	s0, s14
 80072a8:	eef0 0a67 	vmov.f32	s1, s15
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd90      	pop	{r4, r7, pc}
 80072b2:	bf00      	nop
 80072b4:	f3af 8000 	nop.w
 80072b8:	39581062 	.word	0x39581062
 80072bc:	4046c0b4 	.word	0x4046c0b4
 80072c0:	40020800 	.word	0x40020800

080072c4 <encoder_tim_interrupt>:
	// Call this function in the timer callback function of the stm
	// htim = timer TimerInstance of the timer that you are using for the clock of the encoder
	// Interrupt_flag = initilize a int variable in the main file
	// Angles_array = array to store the last angles
	// Speed = pointer to the speed value
	void encoder_tim_interrupt(enc_stc* enc){
 80072c4:	b5b0      	push	{r4, r5, r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]


		if(enc->interrupt_flag == 0){
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d110      	bne.n	80072f6 <encoder_tim_interrupt+0x32>
			// Requesting first angle
			enc->angle0_prec = enc->angle0;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
			enc->angle0 = read_encoder(enc);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ff15 	bl	8007110 <read_encoder>
 80072e6:	eeb0 7a40 	vmov.f32	s14, s0
 80072ea:	eef0 7a60 	vmov.f32	s15, s1
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
 80072f4:	e044      	b.n	8007380 <encoder_tim_interrupt+0xbc>
		}
		else if(enc->interrupt_flag == 1){
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d110      	bne.n	8007320 <encoder_tim_interrupt+0x5c>
			// Requesting second angle
			enc->angle1_prec = enc->angle1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
			enc->angle1 = read_encoder(enc);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7ff ff00 	bl	8007110 <read_encoder>
 8007310:	eeb0 7a40 	vmov.f32	s14, s0
 8007314:	eef0 7a60 	vmov.f32	s15, s1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
 800731e:	e02f      	b.n	8007380 <encoder_tim_interrupt+0xbc>
		}
		else if(enc->interrupt_flag == 2){
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	2b02      	cmp	r3, #2
 8007326:	d12b      	bne.n	8007380 <encoder_tim_interrupt+0xbc>
			// Calculate speed from the two angles
			get_speed_encoder(enc);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f83d 	bl	80073a8 <get_speed_encoder>

			enc->average_speed *= 10;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	e9d3 01f0 	ldrd	r0, r1, [r3, #960]	; 0x3c0
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	4b1a      	ldr	r3, [pc, #104]	; (80073a4 <encoder_tim_interrupt+0xe0>)
 800733a:	f7f9 f97d 	bl	8000638 <__aeabi_dmul>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	e9c1 23f0 	strd	r2, r3, [r1, #960]	; 0x3c0

			// Get the speed sign to be sent in CAN
			if(enc->average_speed < 0){
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	e9d3 01f0 	ldrd	r0, r1, [r3, #960]	; 0x3c0
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	f7f9 fbe1 	bl	8000b1c <__aeabi_dcmplt>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00c      	beq.n	800737a <encoder_tim_interrupt+0xb6>
				enc->average_speed *= -1;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	e9d3 23f0 	ldrd	r2, r3, [r3, #960]	; 0x3c0
 8007366:	4614      	mov	r4, r2
 8007368:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	e9c3 45f0 	strd	r4, r5, [r3, #960]	; 0x3c0
				enc->speed_sign = 1;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	675a      	str	r2, [r3, #116]	; 0x74
 8007378:	e002      	b.n	8007380 <encoder_tim_interrupt+0xbc>
			}else{
				enc->speed_sign = 0;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	675a      	str	r2, [r3, #116]	; 0x74
			}
		}

		// Cycle between steps
		if(enc->interrupt_flag >= 2){
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	2b01      	cmp	r3, #1
 8007386:	dd03      	ble.n	8007390 <encoder_tim_interrupt+0xcc>
			enc->interrupt_flag = 0;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	60da      	str	r2, [r3, #12]
		}
		else{
			enc->interrupt_flag ++;
		}
	}
 800738e:	e004      	b.n	800739a <encoder_tim_interrupt+0xd6>
			enc->interrupt_flag ++;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
	}
 800739a:	bf00      	nop
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bdb0      	pop	{r4, r5, r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40240000 	.word	0x40240000

080073a8 <get_speed_encoder>:
	// Funtion to calculate the speed
	// Angle0 = last angle calculated
	// Angle1 = previous angle calculated
	// Refresh = delta-time from the two calculations, express it in microseconds
	// Wheel_diameter = diameter of the wheel expressed meters
	void get_speed_encoder(enc_stc* enc){
 80073a8:	b5b0      	push	{r4, r5, r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]

		long double speed = 0;
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	f04f 0400 	mov.w	r4, #0
 80073b8:	e9c7 3404 	strd	r3, r4, [r7, #16]
		double dt = 0;
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	f04f 0400 	mov.w	r4, #0
 80073c4:	e9c7 3402 	strd	r3, r4, [r7, #8]
		double d_angle;

		dt = enc->samle_delta_time;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7f9 f8c9 	bl	8000564 <__aeabi_i2d>
 80073d2:	4603      	mov	r3, r0
 80073d4:	460c      	mov	r4, r1
 80073d6:	e9c7 3402 	strd	r3, r4, [r7, #8]

		enc->angle0 *= 1000;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	4b13      	ldr	r3, [pc, #76]	; (8007434 <get_speed_encoder+0x8c>)
 80073e6:	f7f9 f927 	bl	8000638 <__aeabi_dmul>
 80073ea:	4603      	mov	r3, r0
 80073ec:	460c      	mov	r4, r1
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		enc->angle1 *= 1000;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	4b0d      	ldr	r3, [pc, #52]	; (8007434 <get_speed_encoder+0x8c>)
 8007400:	f7f9 f91a 	bl	8000638 <__aeabi_dmul>
 8007404:	4603      	mov	r3, r0
 8007406:	460c      	mov	r4, r1
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

		if(enc->dx_wheel == 1){
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007412:	2b01      	cmp	r3, #1
 8007414:	d110      	bne.n	8007438 <get_speed_encoder+0x90>
			d_angle = enc->angle1 - enc->angle0;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8007422:	461a      	mov	r2, r3
 8007424:	4623      	mov	r3, r4
 8007426:	f7f8 ff4f 	bl	80002c8 <__aeabi_dsub>
 800742a:	4603      	mov	r3, r0
 800742c:	460c      	mov	r4, r1
 800742e:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8007432:	e00f      	b.n	8007454 <get_speed_encoder+0xac>
 8007434:	408f4000 	.word	0x408f4000
		}
		else{
			d_angle = enc->angle0 - enc->angle1;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	e9d3 3422 	ldrd	r3, r4, [r3, #136]	; 0x88
 8007444:	461a      	mov	r2, r3
 8007446:	4623      	mov	r3, r4
 8007448:	f7f8 ff3e 	bl	80002c8 <__aeabi_dsub>
 800744c:	4603      	mov	r3, r0
 800744e:	460c      	mov	r4, r1
 8007450:	e9c7 3406 	strd	r3, r4, [r7, #24]
		}

		// Calculating rad/s, then m/s, then Km/h
		speed = (d_angle/360)*3.1415*(enc->wheel_diameter);
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	4bbb      	ldr	r3, [pc, #748]	; (8007748 <get_speed_encoder+0x3a0>)
 800745a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800745e:	f7f9 fa15 	bl	800088c <__aeabi_ddiv>
 8007462:	4603      	mov	r3, r0
 8007464:	460c      	mov	r4, r1
 8007466:	4618      	mov	r0, r3
 8007468:	4621      	mov	r1, r4
 800746a:	a3a9      	add	r3, pc, #676	; (adr r3, 8007710 <get_speed_encoder+0x368>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f9 f8e2 	bl	8000638 <__aeabi_dmul>
 8007474:	4603      	mov	r3, r0
 8007476:	460c      	mov	r4, r1
 8007478:	4625      	mov	r5, r4
 800747a:	461c      	mov	r4, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007480:	4618      	mov	r0, r3
 8007482:	f7f9 f881 	bl	8000588 <__aeabi_f2d>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f7f9 f8d3 	bl	8000638 <__aeabi_dmul>
 8007492:	4603      	mov	r3, r0
 8007494:	460c      	mov	r4, r1
 8007496:	e9c7 3404 	strd	r3, r4, [r7, #16]
		speed *= 3.6;
 800749a:	a39f      	add	r3, pc, #636	; (adr r3, 8007718 <get_speed_encoder+0x370>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074a4:	f7f9 f8c8 	bl	8000638 <__aeabi_dmul>
 80074a8:	4603      	mov	r3, r0
 80074aa:	460c      	mov	r4, r1
 80074ac:	e9c7 3404 	strd	r3, r4, [r7, #16]
		speed /= dt;
 80074b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074b8:	f7f9 f9e8 	bl	800088c <__aeabi_ddiv>
 80074bc:	4603      	mov	r3, r0
 80074be:	460c      	mov	r4, r1
 80074c0:	e9c7 3404 	strd	r3, r4, [r7, #16]
		speed = round((speed*10000))/100000;
 80074c4:	a396      	add	r3, pc, #600	; (adr r3, 8007720 <get_speed_encoder+0x378>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80074ce:	f7f9 f8b3 	bl	8000638 <__aeabi_dmul>
 80074d2:	4603      	mov	r3, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	ec44 3b17 	vmov	d7, r3, r4
 80074da:	eeb0 0a47 	vmov.f32	s0, s14
 80074de:	eef0 0a67 	vmov.f32	s1, s15
 80074e2:	f004 f9cd 	bl	800b880 <round>
 80074e6:	ec51 0b10 	vmov	r0, r1, d0
 80074ea:	a38f      	add	r3, pc, #572	; (adr r3, 8007728 <get_speed_encoder+0x380>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f9 f9cc 	bl	800088c <__aeabi_ddiv>
 80074f4:	4603      	mov	r3, r0
 80074f6:	460c      	mov	r4, r1
 80074f8:	e9c7 3404 	strd	r3, r4, [r7, #16]

		enc->angle0 /= 1000;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8007502:	f04f 0200 	mov.w	r2, #0
 8007506:	4b91      	ldr	r3, [pc, #580]	; (800774c <get_speed_encoder+0x3a4>)
 8007508:	f7f9 f9c0 	bl	800088c <__aeabi_ddiv>
 800750c:	4603      	mov	r3, r0
 800750e:	460c      	mov	r4, r1
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
		enc->angle1 /= 1000;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	4b8a      	ldr	r3, [pc, #552]	; (800774c <get_speed_encoder+0x3a4>)
 8007522:	f7f9 f9b3 	bl	800088c <__aeabi_ddiv>
 8007526:	4603      	mov	r3, r0
 8007528:	460c      	mov	r4, r1
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88

		// Start detecting eventual new wheel roation
		// If the speed is too low, don't count rotations
		if(enc->average_speed < -0.5 || enc->average_speed > 0.5){
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	e9d3 01f0 	ldrd	r0, r1, [r3, #960]	; 0x3c0
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	4b85      	ldr	r3, [pc, #532]	; (8007750 <get_speed_encoder+0x3a8>)
 800753c:	f7f9 faee 	bl	8000b1c <__aeabi_dcmplt>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10b      	bne.n	800755e <get_speed_encoder+0x1b6>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	e9d3 01f0 	ldrd	r0, r1, [r3, #960]	; 0x3c0
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	4b80      	ldr	r3, [pc, #512]	; (8007754 <get_speed_encoder+0x3ac>)
 8007552:	f7f9 fb01 	bl	8000b58 <__aeabi_dcmpgt>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 80b4 	beq.w	80076c6 <get_speed_encoder+0x31e>
			if((enc->angle0_prec <= 361 && enc->angle0_prec > 350) && (enc->angle0 >= -1 && enc->angle0 < 10)){
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8007564:	a372      	add	r3, pc, #456	; (adr r3, 8007730 <get_speed_encoder+0x388>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f7f9 fae1 	bl	8000b30 <__aeabi_dcmple>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d04e      	beq.n	8007612 <get_speed_encoder+0x26a>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800757a:	a36f      	add	r3, pc, #444	; (adr r3, 8007738 <get_speed_encoder+0x390>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	f7f9 faea 	bl	8000b58 <__aeabi_dcmpgt>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d043      	beq.n	8007612 <get_speed_encoder+0x26a>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	4b70      	ldr	r3, [pc, #448]	; (8007758 <get_speed_encoder+0x3b0>)
 8007596:	f7f9 fad5 	bl	8000b44 <__aeabi_dcmpge>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d038      	beq.n	8007612 <get_speed_encoder+0x26a>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80075a6:	f04f 0200 	mov.w	r2, #0
 80075aa:	4b6c      	ldr	r3, [pc, #432]	; (800775c <get_speed_encoder+0x3b4>)
 80075ac:	f7f9 fab6 	bl	8000b1c <__aeabi_dcmplt>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d02d      	beq.n	8007612 <get_speed_encoder+0x26a>
				enc->wheel_rotation ++;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	66da      	str	r2, [r3, #108]	; 0x6c
				enc->Km += (3.14 * enc->wheel_diameter)/1000;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7f8 ffdf 	bl	8000588 <__aeabi_f2d>
 80075ca:	4604      	mov	r4, r0
 80075cc:	460d      	mov	r5, r1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7f8 ffd8 	bl	8000588 <__aeabi_f2d>
 80075d8:	a359      	add	r3, pc, #356	; (adr r3, 8007740 <get_speed_encoder+0x398>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f9 f82b 	bl	8000638 <__aeabi_dmul>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4610      	mov	r0, r2
 80075e8:	4619      	mov	r1, r3
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	4b57      	ldr	r3, [pc, #348]	; (800774c <get_speed_encoder+0x3a4>)
 80075f0:	f7f9 f94c 	bl	800088c <__aeabi_ddiv>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4620      	mov	r0, r4
 80075fa:	4629      	mov	r1, r5
 80075fc:	f7f8 fe66 	bl	80002cc <__adddf3>
 8007600:	4603      	mov	r3, r0
 8007602:	460c      	mov	r4, r1
 8007604:	4618      	mov	r0, r3
 8007606:	4621      	mov	r1, r4
 8007608:	f7f9 faf8 	bl	8000bfc <__aeabi_d2f>
 800760c:	4602      	mov	r2, r0
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	671a      	str	r2, [r3, #112]	; 0x70
			}
			if((enc->angle0_prec >= -1 && enc->angle0_prec < 10) && (enc->angle0 <= 361 && enc->angle0 > 350)){
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	4b4e      	ldr	r3, [pc, #312]	; (8007758 <get_speed_encoder+0x3b0>)
 800761e:	f7f9 fa91 	bl	8000b44 <__aeabi_dcmpge>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d04e      	beq.n	80076c6 <get_speed_encoder+0x31e>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 800762e:	f04f 0200 	mov.w	r2, #0
 8007632:	4b4a      	ldr	r3, [pc, #296]	; (800775c <get_speed_encoder+0x3b4>)
 8007634:	f7f9 fa72 	bl	8000b1c <__aeabi_dcmplt>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d043      	beq.n	80076c6 <get_speed_encoder+0x31e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8007644:	a33a      	add	r3, pc, #232	; (adr r3, 8007730 <get_speed_encoder+0x388>)
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f7f9 fa71 	bl	8000b30 <__aeabi_dcmple>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d038      	beq.n	80076c6 <get_speed_encoder+0x31e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800765a:	a337      	add	r3, pc, #220	; (adr r3, 8007738 <get_speed_encoder+0x390>)
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f7f9 fa7a 	bl	8000b58 <__aeabi_dcmpgt>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d02d      	beq.n	80076c6 <get_speed_encoder+0x31e>
				enc->wheel_rotation ++;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800766e:	1c5a      	adds	r2, r3, #1
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	66da      	str	r2, [r3, #108]	; 0x6c
				enc->Km += (3.14 * enc->wheel_diameter)/1000;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007678:	4618      	mov	r0, r3
 800767a:	f7f8 ff85 	bl	8000588 <__aeabi_f2d>
 800767e:	4604      	mov	r4, r0
 8007680:	460d      	mov	r5, r1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007686:	4618      	mov	r0, r3
 8007688:	f7f8 ff7e 	bl	8000588 <__aeabi_f2d>
 800768c:	a32c      	add	r3, pc, #176	; (adr r3, 8007740 <get_speed_encoder+0x398>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f8 ffd1 	bl	8000638 <__aeabi_dmul>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4610      	mov	r0, r2
 800769c:	4619      	mov	r1, r3
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	4b2a      	ldr	r3, [pc, #168]	; (800774c <get_speed_encoder+0x3a4>)
 80076a4:	f7f9 f8f2 	bl	800088c <__aeabi_ddiv>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f8 fe0c 	bl	80002cc <__adddf3>
 80076b4:	4603      	mov	r3, r0
 80076b6:	460c      	mov	r4, r1
 80076b8:	4618      	mov	r0, r3
 80076ba:	4621      	mov	r1, r4
 80076bc:	f7f9 fa9e 	bl	8000bfc <__aeabi_d2f>
 80076c0:	4602      	mov	r2, r0
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	671a      	str	r2, [r3, #112]	; 0x70
			}
		}

		// Don't use the speed if the two samples are near to 0/360
		if((enc->angle0 < 40 && enc->angle1 > 320) || (enc->angle1 < 40 && enc->angle0 > 320)){
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	4b23      	ldr	r3, [pc, #140]	; (8007760 <get_speed_encoder+0x3b8>)
 80076d2:	f7f9 fa23 	bl	8000b1c <__aeabi_dcmplt>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <get_speed_encoder+0x34a>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <get_speed_encoder+0x3bc>)
 80076e8:	f7f9 fa36 	bl	8000b58 <__aeabi_dcmpgt>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d15a      	bne.n	80077a8 <get_speed_encoder+0x400>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	; 0x88
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	4b18      	ldr	r3, [pc, #96]	; (8007760 <get_speed_encoder+0x3b8>)
 80076fe:	f7f9 fa0d 	bl	8000b1c <__aeabi_dcmplt>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d03a      	beq.n	800777e <get_speed_encoder+0x3d6>
 8007708:	e02e      	b.n	8007768 <get_speed_encoder+0x3c0>
 800770a:	bf00      	nop
 800770c:	f3af 8000 	nop.w
 8007710:	c083126f 	.word	0xc083126f
 8007714:	400921ca 	.word	0x400921ca
 8007718:	cccccccd 	.word	0xcccccccd
 800771c:	400ccccc 	.word	0x400ccccc
 8007720:	00000000 	.word	0x00000000
 8007724:	40c38800 	.word	0x40c38800
 8007728:	00000000 	.word	0x00000000
 800772c:	40f86a00 	.word	0x40f86a00
 8007730:	00000000 	.word	0x00000000
 8007734:	40769000 	.word	0x40769000
 8007738:	00000000 	.word	0x00000000
 800773c:	4075e000 	.word	0x4075e000
 8007740:	51eb851f 	.word	0x51eb851f
 8007744:	40091eb8 	.word	0x40091eb8
 8007748:	40768000 	.word	0x40768000
 800774c:	408f4000 	.word	0x408f4000
 8007750:	bfe00000 	.word	0xbfe00000
 8007754:	3fe00000 	.word	0x3fe00000
 8007758:	bff00000 	.word	0xbff00000
 800775c:	40240000 	.word	0x40240000
 8007760:	40440000 	.word	0x40440000
 8007764:	40740000 	.word	0x40740000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	4b0f      	ldr	r3, [pc, #60]	; (80077b0 <get_speed_encoder+0x408>)
 8007774:	f7f9 f9f0 	bl	8000b58 <__aeabi_dcmpgt>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d114      	bne.n	80077a8 <get_speed_encoder+0x400>

		}
		else{
			shift_array(enc->speed_array, 50, speed);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	33a0      	adds	r3, #160	; 0xa0
 8007782:	ed97 0b04 	vldr	d0, [r7, #16]
 8007786:	2132      	movs	r1, #50	; 0x32
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f8d5 	bl	8007938 <shift_array>
			enc->average_speed = dynamic_average(enc->speed_array, 50);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	33a0      	adds	r3, #160	; 0xa0
 8007792:	2132      	movs	r1, #50	; 0x32
 8007794:	4618      	mov	r0, r3
 8007796:	f000 f8ff 	bl	8007998 <dynamic_average>
 800779a:	eeb0 7a40 	vmov.f32	s14, s0
 800779e:	eef0 7a60 	vmov.f32	s15, s1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	ed83 7bf0 	vstr	d7, [r3, #960]	; 0x3c0
		}
	}
 80077a8:	bf00      	nop
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bdb0      	pop	{r4, r5, r7, pc}
 80077b0:	40740000 	.word	0x40740000

080077b4 <calc_pot_value>:

	pot_stc pot_1;
	pot_stc pot_2;
	pot_stc pot_3;
	void calc_pot_value(pot_stc *pot) {
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]

		pot->val_100 = round(100 - (abs(pot->val - pot->min) * 100 / (pot->range))); //val0_100 -->STEER --> 0 = SX | 100 = DX
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	691a      	ldr	r2, [r3, #16]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfb8      	it	lt
 80077ca:	425b      	neglt	r3, r3
 80077cc:	2264      	movs	r2, #100	; 0x64
 80077ce:	fb02 f203 	mul.w	r2, r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80077da:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80077de:	4618      	mov	r0, r3
 80077e0:	f7f8 fec0 	bl	8000564 <__aeabi_i2d>
 80077e4:	4603      	mov	r3, r0
 80077e6:	460c      	mov	r4, r1
 80077e8:	4618      	mov	r0, r3
 80077ea:	4621      	mov	r1, r4
 80077ec:	f7f9 f9be 	bl	8000b6c <__aeabi_d2iz>
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
		if (pot->val <= pot->min) {
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	429a      	cmp	r2, r3
 8007800:	dc02      	bgt.n	8007808 <calc_pot_value+0x54>
			pot->val_100 = 100;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2264      	movs	r2, #100	; 0x64
 8007806:	601a      	str	r2, [r3, #0]
		}
		if (pot->val >= pot->max) {
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691a      	ldr	r2, [r3, #16]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	429a      	cmp	r2, r3
 8007812:	db02      	blt.n	800781a <calc_pot_value+0x66>
			pot->val_100 = 0;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
		}
	}
 800781a:	bf00      	nop
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	bd90      	pop	{r4, r7, pc}

08007822 <set_max>:

	//function to set the value of the potentiometer when the pedal is released
	//val = array pointer to the potentiometer values
	//max1 = pointer to the maximum value of the APPS1
	//max2 = pointer to the maximum value of the APPS2
	void set_max(pot_stc *pot_1){
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
		pot_1->max = pot_1->val;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	605a      	str	r2, [r3, #4]
	}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <set_min>:

	//function to set the value of the potentiometer when the pedal is pressed
	//val = array pointer to the potentiometer values
	//min1 = pointer to the minimum value of the APPS1
	//min2 = pointer to the minimum value of the APPS2
	void set_min(pot_stc *pot_1){
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
		pot_1->min = pot_1->val;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691a      	ldr	r2, [r3, #16]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	609a      	str	r2, [r3, #8]
	}
 800784e:	bf00      	nop
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <bin_dec>:
#endif

//function to calculate the decimal value from MSB binary array
//bin = pointer to binary array
//max = size of the array
int bin_dec(int* bin, int size){
 800785a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]

	int dec = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i < size; i++){
 8007868:	2300      	movs	r3, #0
 800786a:	60bb      	str	r3, [r7, #8]
 800786c:	e026      	b.n	80078bc <bin_dec+0x62>
		if(bin[i] == 1){
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d11c      	bne.n	80078b6 <bin_dec+0x5c>
			dec += Power(2, size-i-1);
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	4619      	mov	r1, r3
 8007886:	2002      	movs	r0, #2
 8007888:	f000 f822 	bl	80078d0 <Power>
 800788c:	ec56 5b10 	vmov	r5, r6, d0
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f7f8 fe67 	bl	8000564 <__aeabi_i2d>
 8007896:	4603      	mov	r3, r0
 8007898:	460c      	mov	r4, r1
 800789a:	461a      	mov	r2, r3
 800789c:	4623      	mov	r3, r4
 800789e:	4628      	mov	r0, r5
 80078a0:	4631      	mov	r1, r6
 80078a2:	f7f8 fd13 	bl	80002cc <__adddf3>
 80078a6:	4603      	mov	r3, r0
 80078a8:	460c      	mov	r4, r1
 80078aa:	4618      	mov	r0, r3
 80078ac:	4621      	mov	r1, r4
 80078ae:	f7f9 f95d 	bl	8000b6c <__aeabi_d2iz>
 80078b2:	4603      	mov	r3, r0
 80078b4:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < size; i++){
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	dbd4      	blt.n	800786e <bin_dec+0x14>
		}
	}

	return dec;
 80078c4:	68fb      	ldr	r3, [r7, #12]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080078d0 <Power>:

//function to calculate the power of a given number
double Power(int base, int expn){
 80078d0:	b590      	push	{r4, r7, lr}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]

	double result = 1;
 80078da:	f04f 0300 	mov.w	r3, #0
 80078de:	4c15      	ldr	r4, [pc, #84]	; (8007934 <Power+0x64>)
 80078e0:	e9c7 3404 	strd	r3, r4, [r7, #16]

	if(expn != 0){
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d018      	beq.n	800791c <Power+0x4c>
		for(int j = 0; j < expn; j++){
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	e011      	b.n	8007914 <Power+0x44>
			result = result * base;
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7f8 fe37 	bl	8000564 <__aeabi_i2d>
 80078f6:	4603      	mov	r3, r0
 80078f8:	460c      	mov	r4, r1
 80078fa:	461a      	mov	r2, r3
 80078fc:	4623      	mov	r3, r4
 80078fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007902:	f7f8 fe99 	bl	8000638 <__aeabi_dmul>
 8007906:	4603      	mov	r3, r0
 8007908:	460c      	mov	r4, r1
 800790a:	e9c7 3404 	strd	r3, r4, [r7, #16]
		for(int j = 0; j < expn; j++){
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	3301      	adds	r3, #1
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	dbe9      	blt.n	80078f0 <Power+0x20>
		}
	}

	return result;
 800791c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8007920:	ec44 3b17 	vmov	d7, r3, r4
}
 8007924:	eeb0 0a47 	vmov.f32	s0, s14
 8007928:	eef0 0a67 	vmov.f32	s1, s15
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	bd90      	pop	{r4, r7, pc}
 8007932:	bf00      	nop
 8007934:	3ff00000 	.word	0x3ff00000

08007938 <shift_array>:

//shift all the data of a numeric array and add another one value
//array = array to be shifted
//size = size of the array
//data = value to be added in the last position of the array
void shift_array(long double *array, int size, long double data){
 8007938:	b490      	push	{r4, r7}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	ed87 0b00 	vstr	d0, [r7]

	for(int i = 1; i < size; i++){
 8007946:	2301      	movs	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	e011      	b.n	8007970 <shift_array+0x38>
		array[i-1] = array[i];
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	18d1      	adds	r1, r2, r3
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800795a:	3b01      	subs	r3, #1
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	441a      	add	r2, r3
 8007962:	e9d1 3400 	ldrd	r3, r4, [r1]
 8007966:	e9c2 3400 	strd	r3, r4, [r2]
	for(int i = 1; i < size; i++){
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	3301      	adds	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	429a      	cmp	r2, r3
 8007976:	dbe9      	blt.n	800794c <shift_array+0x14>
	}
	array[size-1] = data;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800797e:	3b01      	subs	r3, #1
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	441a      	add	r2, r3
 8007986:	e9d7 3400 	ldrd	r3, r4, [r7]
 800798a:	e9c2 3400 	strd	r3, r4, [r2]
}
 800798e:	bf00      	nop
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bc90      	pop	{r4, r7}
 8007996:	4770      	bx	lr

08007998 <dynamic_average>:
	return average;

}

//function that calculate the average of all the numbers in one array
double dynamic_average(long double *array, int size){
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b089      	sub	sp, #36	; 0x24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]

	double sum = 0;
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	f04f 0400 	mov.w	r4, #0
 80079aa:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double average = 0;
 80079ae:	f04f 0300 	mov.w	r3, #0
 80079b2:	f04f 0400 	mov.w	r4, #0
 80079b6:	e9c7 3402 	strd	r3, r4, [r7, #8]

	for(int i = 0; i < size; i++){
 80079ba:	2300      	movs	r3, #0
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e012      	b.n	80079e6 <dynamic_average+0x4e>
		sum += array[i];
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	4413      	add	r3, r2
 80079c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80079cc:	461a      	mov	r2, r3
 80079ce:	4623      	mov	r3, r4
 80079d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80079d4:	f7f8 fc7a 	bl	80002cc <__adddf3>
 80079d8:	4603      	mov	r3, r0
 80079da:	460c      	mov	r4, r1
 80079dc:	e9c7 3406 	strd	r3, r4, [r7, #24]
	for(int i = 0; i < size; i++){
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	3301      	adds	r3, #1
 80079e4:	617b      	str	r3, [r7, #20]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	dbe8      	blt.n	80079c0 <dynamic_average+0x28>
	}
	average = sum / size;
 80079ee:	6838      	ldr	r0, [r7, #0]
 80079f0:	f7f8 fdb8 	bl	8000564 <__aeabi_i2d>
 80079f4:	4603      	mov	r3, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	461a      	mov	r2, r3
 80079fa:	4623      	mov	r3, r4
 80079fc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a00:	f7f8 ff44 	bl	800088c <__aeabi_ddiv>
 8007a04:	4603      	mov	r3, r0
 8007a06:	460c      	mov	r4, r1
 8007a08:	e9c7 3402 	strd	r3, r4, [r7, #8]

	return average;
 8007a0c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007a10:	ec44 3b17 	vmov	d7, r3, r4
}
 8007a14:	eeb0 0a47 	vmov.f32	s0, s14
 8007a18:	eef0 0a67 	vmov.f32	s1, s15
 8007a1c:	3724      	adds	r7, #36	; 0x24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd90      	pop	{r4, r7, pc}
	...

08007a24 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
    pot_1.val = ADC_buffer[0];
 8007a2c:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <HAL_ADC_ConvCpltCallback+0x34>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	461a      	mov	r2, r3
 8007a32:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <HAL_ADC_ConvCpltCallback+0x38>)
 8007a34:	611a      	str	r2, [r3, #16]
    pot_2.val = ADC_buffer[1];
 8007a36:	4b08      	ldr	r3, [pc, #32]	; (8007a58 <HAL_ADC_ConvCpltCallback+0x34>)
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	4b08      	ldr	r3, [pc, #32]	; (8007a60 <HAL_ADC_ConvCpltCallback+0x3c>)
 8007a3e:	611a      	str	r2, [r3, #16]
    pot_3.val = ADC_buffer[2];
 8007a40:	4b05      	ldr	r3, [pc, #20]	; (8007a58 <HAL_ADC_ConvCpltCallback+0x34>)
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	461a      	mov	r2, r3
 8007a46:	4b07      	ldr	r3, [pc, #28]	; (8007a64 <HAL_ADC_ConvCpltCallback+0x40>)
 8007a48:	611a      	str	r2, [r3, #16]
    /*int txt_1[100];
    sprintf(txt_1, "sterzo: %d %d %d\r\n", pot_1.val, pot_2.val, pot_3.val);
    HAL_UART_Transmit(&huart2, (uint8_t*)txt_1, strlen(txt_1), 10);*/
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	20001174 	.word	0x20001174
 8007a5c:	20000c78 	.word	0x20000c78
 8007a60:	20000418 	.word	0x20000418
 8007a64:	2000085c 	.word	0x2000085c

08007a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007a68:	b590      	push	{r4, r7, lr}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007a6e:	f7f9 fa95 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007a72:	f000 f98d 	bl	8007d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007a76:	f000 fd85 	bl	8008584 <MX_GPIO_Init>
  MX_DMA_Init();
 8007a7a:	f000 fd63 	bl	8008544 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8007a7e:	f000 fd37 	bl	80084f0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8007a82:	f000 fa9f 	bl	8007fc4 <MX_CAN1_Init>
  MX_SPI1_Init();
 8007a86:	f000 fad3 	bl	8008030 <MX_SPI1_Init>
  MX_ADC1_Init();
 8007a8a:	f000 fa49 	bl	8007f20 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8007a8e:	f000 fd05 	bl	800849c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8007a92:	f000 fb03 	bl	800809c <MX_TIM2_Init>
  MX_TIM3_Init();
 8007a96:	f000 fb65 	bl	8008164 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007a9a:	f000 fbb1 	bl	8008200 <MX_TIM4_Init>
  MX_TIM5_Init();
 8007a9e:	f000 fbfd 	bl	800829c <MX_TIM5_Init>
  MX_TIM6_Init();
 8007aa2:	f000 fc49 	bl	8008338 <MX_TIM6_Init>
  MX_TIM7_Init();
 8007aa6:	f000 fc7d 	bl	80083a4 <MX_TIM7_Init>
  MX_TIM10_Init();
 8007aaa:	f000 fcb1 	bl	8008410 <MX_TIM10_Init>
  MX_TIM11_Init();
 8007aae:	f000 fcd3 	bl	8008458 <MX_TIM11_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8007ab2:	f000 f9d9 	bl	8007e68 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

    sFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8007ab6:	4b97      	ldr	r3, [pc, #604]	; (8007d14 <main+0x2ac>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	619a      	str	r2, [r3, #24]
    sFilter.FilterIdLow = 0;
 8007abc:	4b95      	ldr	r3, [pc, #596]	; (8007d14 <main+0x2ac>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	605a      	str	r2, [r3, #4]
    sFilter.FilterIdHigh = 0;
 8007ac2:	4b94      	ldr	r3, [pc, #592]	; (8007d14 <main+0x2ac>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	601a      	str	r2, [r3, #0]
    sFilter.FilterMaskIdHigh = 0;
 8007ac8:	4b92      	ldr	r3, [pc, #584]	; (8007d14 <main+0x2ac>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
    sFilter.FilterMaskIdLow = 0;
 8007ace:	4b91      	ldr	r3, [pc, #580]	; (8007d14 <main+0x2ac>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	60da      	str	r2, [r3, #12]
    sFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8007ad4:	4b8f      	ldr	r3, [pc, #572]	; (8007d14 <main+0x2ac>)
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	611a      	str	r2, [r3, #16]
    sFilter.FilterBank = 0;
 8007ada:	4b8e      	ldr	r3, [pc, #568]	; (8007d14 <main+0x2ac>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	615a      	str	r2, [r3, #20]
    sFilter.FilterScale  = CAN_FILTERSCALE_16BIT;
 8007ae0:	4b8c      	ldr	r3, [pc, #560]	; (8007d14 <main+0x2ac>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	61da      	str	r2, [r3, #28]
    sFilter.FilterActivation = ENABLE;
 8007ae6:	4b8b      	ldr	r3, [pc, #556]	; (8007d14 <main+0x2ac>)
 8007ae8:	2201      	movs	r2, #1
 8007aea:	621a      	str	r2, [r3, #32]
    HAL_CAN_ConfigFilter(&hcan1, &sFilter);
 8007aec:	4989      	ldr	r1, [pc, #548]	; (8007d14 <main+0x2ac>)
 8007aee:	488a      	ldr	r0, [pc, #552]	; (8007d18 <main+0x2b0>)
 8007af0:	f7fa f932 	bl	8001d58 <HAL_CAN_ConfigFilter>

    HAL_CAN_Start(&hcan1);
 8007af4:	4888      	ldr	r0, [pc, #544]	; (8007d18 <main+0x2b0>)
 8007af6:	f7fa fa0f 	bl	8001f18 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(&hcan1, CAN1_RX0_IRQn);
 8007afa:	2114      	movs	r1, #20
 8007afc:	4886      	ldr	r0, [pc, #536]	; (8007d18 <main+0x2b0>)
 8007afe:	f7fa fcbe 	bl	800247e <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN1_RX1_IRQn);
 8007b02:	2115      	movs	r1, #21
 8007b04:	4884      	ldr	r0, [pc, #528]	; (8007d18 <main+0x2b0>)
 8007b06:	f7fa fcba 	bl	800247e <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    can.hcan=&hcan1;
 8007b0a:	4b84      	ldr	r3, [pc, #528]	; (8007d1c <main+0x2b4>)
 8007b0c:	4a82      	ldr	r2, [pc, #520]	; (8007d18 <main+0x2b0>)
 8007b0e:	619a      	str	r2, [r3, #24]
    // can initialization //

    // imu initialization //
    imu.GPIOx_InUse=GPIOC;
 8007b10:	4b83      	ldr	r3, [pc, #524]	; (8007d20 <main+0x2b8>)
 8007b12:	4a84      	ldr	r2, [pc, #528]	; (8007d24 <main+0x2bc>)
 8007b14:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    imu.GPIO_Pin_InUse=GPIO_PIN_9;
 8007b18:	4b81      	ldr	r3, [pc, #516]	; (8007d20 <main+0x2b8>)
 8007b1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b1e:	f8a3 2418 	strh.w	r2, [r3, #1048]	; 0x418
    imu.GPIOx_NotInUse=GPIOA;
 8007b22:	4b7f      	ldr	r3, [pc, #508]	; (8007d20 <main+0x2b8>)
 8007b24:	4a80      	ldr	r2, [pc, #512]	; (8007d28 <main+0x2c0>)
 8007b26:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    imu.GPIO_Pin_NotInUse=GPIO_PIN_8;
 8007b2a:	4b7d      	ldr	r3, [pc, #500]	; (8007d20 <main+0x2b8>)
 8007b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b30:	f8a3 2420 	strh.w	r2, [r3, #1056]	; 0x420
    imu.hspi = &hspi1;
 8007b34:	4b7a      	ldr	r3, [pc, #488]	; (8007d20 <main+0x2b8>)
 8007b36:	4a7d      	ldr	r2, [pc, #500]	; (8007d2c <main+0x2c4>)
 8007b38:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); ///CS_G to 1
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b42:	4879      	ldr	r0, [pc, #484]	; (8007d28 <main+0x2c0>)
 8007b44:	f7fb fd3e 	bl	80035c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET); ///CS_XM to 1
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b4e:	4875      	ldr	r0, [pc, #468]	; (8007d24 <main+0x2bc>)
 8007b50:	f7fb fd38 	bl	80035c4 <HAL_GPIO_WritePin>


    if(gps_init(&huart1,&gps_main)==0){
 8007b54:	4976      	ldr	r1, [pc, #472]	; (8007d30 <main+0x2c8>)
 8007b56:	4877      	ldr	r0, [pc, #476]	; (8007d34 <main+0x2cc>)
 8007b58:	f7fe fef6 	bl	8006948 <gps_init>
        //--error--//
    }

    steer_enc_prescaler = htim3.Init.Period;
 8007b5c:	4b76      	ldr	r3, [pc, #472]	; (8007d38 <main+0x2d0>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	461a      	mov	r2, r3
 8007b62:	4b76      	ldr	r3, [pc, #472]	; (8007d3c <main+0x2d4>)
 8007b64:	601a      	str	r2, [r3, #0]
    steer_enc_prescaler /= 3;
 8007b66:	4b75      	ldr	r3, [pc, #468]	; (8007d3c <main+0x2d4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a75      	ldr	r2, [pc, #468]	; (8007d40 <main+0x2d8>)
 8007b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8007b70:	17db      	asrs	r3, r3, #31
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	4a71      	ldr	r2, [pc, #452]	; (8007d3c <main+0x2d4>)
 8007b76:	6013      	str	r3, [r2, #0]
    steer_enc_prescaler /= 20;
 8007b78:	4b70      	ldr	r3, [pc, #448]	; (8007d3c <main+0x2d4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a71      	ldr	r2, [pc, #452]	; (8007d44 <main+0x2dc>)
 8007b7e:	fb82 1203 	smull	r1, r2, r2, r3
 8007b82:	10d2      	asrs	r2, r2, #3
 8007b84:	17db      	asrs	r3, r3, #31
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	4a6c      	ldr	r2, [pc, #432]	; (8007d3c <main+0x2d4>)
 8007b8a:	6013      	str	r3, [r2, #0]
    steer_enc_prescaler += 40;
 8007b8c:	4b6b      	ldr	r3, [pc, #428]	; (8007d3c <main+0x2d4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3328      	adds	r3, #40	; 0x28
 8007b92:	4a6a      	ldr	r2, [pc, #424]	; (8007d3c <main+0x2d4>)
 8007b94:	6013      	str	r3, [r2, #0]
    enc.steer_enc_prescaler = steer_enc_prescaler;
 8007b96:	4b69      	ldr	r3, [pc, #420]	; (8007d3c <main+0x2d4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a6b      	ldr	r2, [pc, #428]	; (8007d48 <main+0x2e0>)
 8007b9c:	6653      	str	r3, [r2, #100]	; 0x64

    pot_2.max = 4060;
 8007b9e:	4b6b      	ldr	r3, [pc, #428]	; (8007d4c <main+0x2e4>)
 8007ba0:	f640 72dc 	movw	r2, #4060	; 0xfdc
 8007ba4:	605a      	str	r2, [r3, #4]
    pot_2.min = 2350;
 8007ba6:	4b69      	ldr	r3, [pc, #420]	; (8007d4c <main+0x2e4>)
 8007ba8:	f640 122e 	movw	r2, #2350	; 0x92e
 8007bac:	609a      	str	r2, [r3, #8]
    pot_2.range = abs(pot_2.max - pot_2.min);
 8007bae:	4b67      	ldr	r3, [pc, #412]	; (8007d4c <main+0x2e4>)
 8007bb0:	685a      	ldr	r2, [r3, #4]
 8007bb2:	4b66      	ldr	r3, [pc, #408]	; (8007d4c <main+0x2e4>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfb8      	it	lt
 8007bbc:	425b      	neglt	r3, r3
 8007bbe:	4a63      	ldr	r2, [pc, #396]	; (8007d4c <main+0x2e4>)
 8007bc0:	60d3      	str	r3, [r2, #12]

    enc.dx_wheel = 0;
 8007bc2:	4b61      	ldr	r3, [pc, #388]	; (8007d48 <main+0x2e0>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	669a      	str	r2, [r3, #104]	; 0x68
    enc.interrupt_flag = 0;
 8007bc8:	4b5f      	ldr	r3, [pc, #380]	; (8007d48 <main+0x2e0>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	60da      	str	r2, [r3, #12]
    enc.TimerInstance = &a_TimerInstance3;
 8007bce:	4b5e      	ldr	r3, [pc, #376]	; (8007d48 <main+0x2e0>)
 8007bd0:	4a5f      	ldr	r2, [pc, #380]	; (8007d50 <main+0x2e8>)
 8007bd2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
    enc.average_speed = 0;
 8007bd6:	4a5c      	ldr	r2, [pc, #368]	; (8007d48 <main+0x2e0>)
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	f04f 0400 	mov.w	r4, #0
 8007be0:	e9c2 34f0 	strd	r3, r4, [r2, #960]	; 0x3c0
    enc.wheel_diameter = 395;
 8007be4:	4b58      	ldr	r3, [pc, #352]	; (8007d48 <main+0x2e0>)
 8007be6:	4a5b      	ldr	r2, [pc, #364]	; (8007d54 <main+0x2ec>)
 8007be8:	679a      	str	r2, [r3, #120]	; 0x78
    enc.samle_delta_time = htim7.Init.Period;
 8007bea:	4b5b      	ldr	r3, [pc, #364]	; (8007d58 <main+0x2f0>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	4b55      	ldr	r3, [pc, #340]	; (8007d48 <main+0x2e0>)
 8007bf2:	601a      	str	r2, [r3, #0]
    enc.data_size = 14;
 8007bf4:	4b54      	ldr	r3, [pc, #336]	; (8007d48 <main+0x2e0>)
 8007bf6:	220e      	movs	r2, #14
 8007bf8:	605a      	str	r2, [r3, #4]
    enc.clock_period = (36 / htim3.Init.Prescaler);
 8007bfa:	4b4f      	ldr	r3, [pc, #316]	; (8007d38 <main+0x2d0>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	2224      	movs	r2, #36	; 0x24
 8007c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	4b50      	ldr	r3, [pc, #320]	; (8007d48 <main+0x2e0>)
 8007c08:	611a      	str	r2, [r3, #16]
    enc.wheel_rotation = 0;
 8007c0a:	4b4f      	ldr	r3, [pc, #316]	; (8007d48 <main+0x2e0>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	66da      	str	r2, [r3, #108]	; 0x6c
    enc.Km = 0;
 8007c10:	4b4d      	ldr	r3, [pc, #308]	; (8007d48 <main+0x2e0>)
 8007c12:	f04f 0200 	mov.w	r2, #0
 8007c16:	671a      	str	r2, [r3, #112]	; 0x70

    HAL_TIM_Base_Start(&htim2);
 8007c18:	4850      	ldr	r0, [pc, #320]	; (8007d5c <main+0x2f4>)
 8007c1a:	f7fc ff7c 	bl	8004b16 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim3);
 8007c1e:	4846      	ldr	r0, [pc, #280]	; (8007d38 <main+0x2d0>)
 8007c20:	f7fc ff79 	bl	8004b16 <HAL_TIM_Base_Start>
    //HAL_TIM_Base_Start(&htim4);
    //HAL_TIM_Base_Start(&htim5);
    //HAL_TIM_Base_Start(&htim6);
    HAL_TIM_Base_Start(&htim7);
 8007c24:	484c      	ldr	r0, [pc, #304]	; (8007d58 <main+0x2f0>)
 8007c26:	f7fc ff76 	bl	8004b16 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim10);
 8007c2a:	484d      	ldr	r0, [pc, #308]	; (8007d60 <main+0x2f8>)
 8007c2c:	f7fc ff73 	bl	8004b16 <HAL_TIM_Base_Start>

    HAL_TIM_Base_Start_IT(&htim2);
 8007c30:	484a      	ldr	r0, [pc, #296]	; (8007d5c <main+0x2f4>)
 8007c32:	f7fc ff94 	bl	8004b5e <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8007c36:	4840      	ldr	r0, [pc, #256]	; (8007d38 <main+0x2d0>)
 8007c38:	f7fc ff91 	bl	8004b5e <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start_IT(&htim4);
    //HAL_TIM_Base_Start_IT(&htim5);
    //HAL_TIM_Base_Start_IT(&htim6);
    HAL_TIM_Base_Start_IT(&htim7);
 8007c3c:	4846      	ldr	r0, [pc, #280]	; (8007d58 <main+0x2f0>)
 8007c3e:	f7fc ff8e 	bl	8004b5e <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim10);
 8007c42:	4847      	ldr	r0, [pc, #284]	; (8007d60 <main+0x2f8>)
 8007c44:	f7fc ff8b 	bl	8004b5e <HAL_TIM_Base_Start_IT>

    __HAL_TIM_SET_COUNTER(&a_TimerInstance2, 0);
 8007c48:	4b46      	ldr	r3, [pc, #280]	; (8007d64 <main+0x2fc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&a_TimerInstance3, 0);
 8007c50:	4b3f      	ldr	r3, [pc, #252]	; (8007d50 <main+0x2e8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2200      	movs	r2, #0
 8007c56:	625a      	str	r2, [r3, #36]	; 0x24
    //__HAL_TIM_SET_COUNTER(&a_TimerInstance4, 0);
    //__HAL_TIM_SET_COUNTER(&a_TimerInstance5, 0);
    //__HAL_TIM_SET_COUNTER(&a_TimerInstance6, 0);
    __HAL_TIM_SET_COUNTER(&a_TimerInstance7, 0);
 8007c58:	4b43      	ldr	r3, [pc, #268]	; (8007d68 <main+0x300>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&a_TimerInstance10, 0);
 8007c60:	4b42      	ldr	r3, [pc, #264]	; (8007d6c <main+0x304>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2200      	movs	r2, #0
 8007c66:	625a      	str	r2, [r3, #36]	; 0x24

    //HAL_Delay(1000);
    LSMD9S0_accel_gyro_init(&imu);
 8007c68:	482d      	ldr	r0, [pc, #180]	; (8007d20 <main+0x2b8>)
 8007c6a:	f7fe fa1b 	bl	80060a4 <LSMD9S0_accel_gyro_init>
    LSMD9S0_check(&imu);
 8007c6e:	482c      	ldr	r0, [pc, #176]	; (8007d20 <main+0x2b8>)
 8007c70:	f7fe fb30 	bl	80062d4 <LSMD9S0_check>

    imu.calibration_done = 1;
 8007c74:	4b2a      	ldr	r3, [pc, #168]	; (8007d20 <main+0x2b8>)
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    //LSM9DS0_calibration(&imu);

    encoder_counter = 0;
 8007c7c:	4b3c      	ldr	r3, [pc, #240]	; (8007d70 <main+0x308>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	601a      	str	r2, [r3, #0]

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 8007c82:	2203      	movs	r2, #3
 8007c84:	493b      	ldr	r1, [pc, #236]	; (8007d74 <main+0x30c>)
 8007c86:	483c      	ldr	r0, [pc, #240]	; (8007d78 <main+0x310>)
 8007c88:	f7f9 fba0 	bl	80013cc <HAL_ADC_Start_DMA>

        // If CAN is free from important messages, send data
        if(command_flag == 0){
 8007c8c:	4b3b      	ldr	r3, [pc, #236]	; (8007d7c <main+0x314>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d137      	bne.n	8007d04 <main+0x29c>
        	if (previous_millis != HAL_GetTick()){
 8007c94:	f7f9 f9e8 	bl	8001068 <HAL_GetTick>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	4b39      	ldr	r3, [pc, #228]	; (8007d80 <main+0x318>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d0ef      	beq.n	8007c82 <main+0x21a>
				send_CAN_data(HAL_GetTick());
 8007ca2:	f7f9 f9e1 	bl	8001068 <HAL_GetTick>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fe95 	bl	80089d8 <send_CAN_data>
				previous_millis = HAL_GetTick();
 8007cae:	f7f9 f9db 	bl	8001068 <HAL_GetTick>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	4b32      	ldr	r3, [pc, #200]	; (8007d80 <main+0x318>)
 8007cb8:	601a      	str	r2, [r3, #0]

				sprintf(txt, "suca: %d\t%d\t%d\r\n", (int)imu.X_A_axis, (int)imu.Y_A_axis, (int)imu.Z_A_axis);
 8007cba:	4b19      	ldr	r3, [pc, #100]	; (8007d20 <main+0x2b8>)
 8007cbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8007cc0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007cc4:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <main+0x2b8>)
 8007cc6:	edd3 7a07 	vldr	s15, [r3, #28]
 8007cca:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8007cce:	4b14      	ldr	r3, [pc, #80]	; (8007d20 <main+0x2b8>)
 8007cd0:	edd3 7a08 	vldr	s15, [r3, #32]
 8007cd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007cd8:	ee17 3a90 	vmov	r3, s15
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	ee16 3a90 	vmov	r3, s13
 8007ce2:	ee17 2a10 	vmov	r2, s14
 8007ce6:	4927      	ldr	r1, [pc, #156]	; (8007d84 <main+0x31c>)
 8007ce8:	4827      	ldr	r0, [pc, #156]	; (8007d88 <main+0x320>)
 8007cea:	f001 fce7 	bl	80096bc <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt), 10);
 8007cee:	4826      	ldr	r0, [pc, #152]	; (8007d88 <main+0x320>)
 8007cf0:	f7f8 fa8e 	bl	8000210 <strlen>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	230a      	movs	r3, #10
 8007cfa:	4923      	ldr	r1, [pc, #140]	; (8007d88 <main+0x320>)
 8007cfc:	4823      	ldr	r0, [pc, #140]	; (8007d8c <main+0x324>)
 8007cfe:	f7fd fbe1 	bl	80054c4 <HAL_UART_Transmit>
 8007d02:	e7be      	b.n	8007c82 <main+0x21a>
        	}
        }
        else{
        	HAL_Delay(1);
 8007d04:	2001      	movs	r0, #1
 8007d06:	f7f9 f9bb 	bl	8001080 <HAL_Delay>
        	command_flag = 0;
 8007d0a:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <main+0x314>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
        HAL_ADC_Start_DMA(&hadc1, ADC_buffer, 3);
 8007d10:	e7b7      	b.n	8007c82 <main+0x21a>
 8007d12:	bf00      	nop
 8007d14:	20000ecc 	.word	0x20000ecc
 8007d18:	2000114c 	.word	0x2000114c
 8007d1c:	20000c58 	.word	0x20000c58
 8007d20:	20000430 	.word	0x20000430
 8007d24:	40020800 	.word	0x40020800
 8007d28:	40020000 	.word	0x40020000
 8007d2c:	20001074 	.word	0x20001074
 8007d30:	20000da4 	.word	0x20000da4
 8007d34:	20000f48 	.word	0x20000f48
 8007d38:	20000e8c 	.word	0x20000e8c
 8007d3c:	20001070 	.word	0x20001070
 8007d40:	55555556 	.word	0x55555556
 8007d44:	66666667 	.word	0x66666667
 8007d48:	20000878 	.word	0x20000878
 8007d4c:	20000418 	.word	0x20000418
 8007d50:	20000064 	.word	0x20000064
 8007d54:	43c58000 	.word	0x43c58000
 8007d58:	20001184 	.word	0x20001184
 8007d5c:	200010cc 	.word	0x200010cc
 8007d60:	20000e08 	.word	0x20000e08
 8007d64:	20000024 	.word	0x20000024
 8007d68:	200000a4 	.word	0x200000a4
 8007d6c:	200000e4 	.word	0x200000e4
 8007d70:	20000e48 	.word	0x20000e48
 8007d74:	20001174 	.word	0x20001174
 8007d78:	20000ef4 	.word	0x20000ef4
 8007d7c:	20000400 	.word	0x20000400
 8007d80:	200011c4 	.word	0x200011c4
 8007d84:	0800ba04 	.word	0x0800ba04
 8007d88:	20000cfc 	.word	0x20000cfc
 8007d8c:	2000110c 	.word	0x2000110c

08007d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b094      	sub	sp, #80	; 0x50
 8007d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d96:	f107 031c 	add.w	r3, r7, #28
 8007d9a:	2234      	movs	r2, #52	; 0x34
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f001 fbcc 	bl	800953c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007da4:	f107 0308 	add.w	r3, r7, #8
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	605a      	str	r2, [r3, #4]
 8007dae:	609a      	str	r2, [r3, #8]
 8007db0:	60da      	str	r2, [r3, #12]
 8007db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007db4:	2300      	movs	r3, #0
 8007db6:	607b      	str	r3, [r7, #4]
 8007db8:	4b29      	ldr	r3, [pc, #164]	; (8007e60 <SystemClock_Config+0xd0>)
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	4a28      	ldr	r2, [pc, #160]	; (8007e60 <SystemClock_Config+0xd0>)
 8007dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8007dc4:	4b26      	ldr	r3, [pc, #152]	; (8007e60 <SystemClock_Config+0xd0>)
 8007dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <SystemClock_Config+0xd4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <SystemClock_Config+0xd4>)
 8007dda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	4b20      	ldr	r3, [pc, #128]	; (8007e64 <SystemClock_Config+0xd4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007dec:	2301      	movs	r3, #1
 8007dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8007df0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8007df4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007df6:	2302      	movs	r3, #2
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007dfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007e00:	2308      	movs	r3, #8
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 288;
 8007e04:	f44f 7390 	mov.w	r3, #288	; 0x120
 8007e08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007e0e:	2302      	movs	r3, #2
 8007e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007e12:	2302      	movs	r3, #2
 8007e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e16:	f107 031c 	add.w	r3, r7, #28
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fb fea2 	bl	8003b64 <HAL_RCC_OscConfig>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007e26:	f000 ff9f 	bl	8008d68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e2a:	230f      	movs	r3, #15
 8007e2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e32:	2300      	movs	r3, #0
 8007e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007e36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007e3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8007e3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007e40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007e42:	f107 0308 	add.w	r3, r7, #8
 8007e46:	2104      	movs	r1, #4
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fb fbd5 	bl	80035f8 <HAL_RCC_ClockConfig>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8007e54:	f000 ff88 	bl	8008d68 <Error_Handler>
  }
}
 8007e58:	bf00      	nop
 8007e5a:	3750      	adds	r7, #80	; 0x50
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	40023800 	.word	0x40023800
 8007e64:	40007000 	.word	0x40007000

08007e68 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2100      	movs	r1, #0
 8007e70:	2013      	movs	r0, #19
 8007e72:	f7fa fe2e 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007e76:	2013      	movs	r0, #19
 8007e78:	f7fa fe47 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2100      	movs	r1, #0
 8007e80:	2014      	movs	r0, #20
 8007e82:	f7fa fe26 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007e86:	2014      	movs	r0, #20
 8007e88:	f7fa fe3f 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	2015      	movs	r0, #21
 8007e92:	f7fa fe1e 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007e96:	2015      	movs	r0, #21
 8007e98:	f7fa fe37 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	2016      	movs	r0, #22
 8007ea2:	f7fa fe16 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8007ea6:	2016      	movs	r0, #22
 8007ea8:	f7fa fe2f 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007eac:	2200      	movs	r2, #0
 8007eae:	2100      	movs	r1, #0
 8007eb0:	2012      	movs	r0, #18
 8007eb2:	f7fa fe0e 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007eb6:	2012      	movs	r0, #18
 8007eb8:	f7fa fe27 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	2037      	movs	r0, #55	; 0x37
 8007ec2:	f7fa fe06 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007ec6:	2037      	movs	r0, #55	; 0x37
 8007ec8:	f7fa fe1f 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	2036      	movs	r0, #54	; 0x36
 8007ed2:	f7fa fdfe 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007ed6:	2036      	movs	r0, #54	; 0x36
 8007ed8:	f7fa fe17 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* TIM5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8007edc:	2200      	movs	r2, #0
 8007ede:	2100      	movs	r1, #0
 8007ee0:	2032      	movs	r0, #50	; 0x32
 8007ee2:	f7fa fdf6 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007ee6:	2032      	movs	r0, #50	; 0x32
 8007ee8:	f7fa fe0f 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007eec:	2200      	movs	r2, #0
 8007eee:	2100      	movs	r1, #0
 8007ef0:	201c      	movs	r0, #28
 8007ef2:	f7fa fdee 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007ef6:	201c      	movs	r0, #28
 8007ef8:	f7fa fe07 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8007efc:	2200      	movs	r2, #0
 8007efe:	2100      	movs	r1, #0
 8007f00:	2019      	movs	r0, #25
 8007f02:	f7fa fde6 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007f06:	2019      	movs	r0, #25
 8007f08:	f7fa fdff 	bl	8002b0a <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2100      	movs	r1, #0
 8007f10:	2025      	movs	r0, #37	; 0x25
 8007f12:	f7fa fdde 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007f16:	2025      	movs	r0, #37	; 0x25
 8007f18:	f7fa fdf7 	bl	8002b0a <HAL_NVIC_EnableIRQ>
}
 8007f1c:	bf00      	nop
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b084      	sub	sp, #16
 8007f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007f26:	463b      	mov	r3, r7
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	609a      	str	r2, [r3, #8]
 8007f30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007f32:	4b21      	ldr	r3, [pc, #132]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f34:	4a21      	ldr	r2, [pc, #132]	; (8007fbc <MX_ADC1_Init+0x9c>)
 8007f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8007f38:	4b1f      	ldr	r3, [pc, #124]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007f3e:	4b1e      	ldr	r3, [pc, #120]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8007f44:	4b1c      	ldr	r3, [pc, #112]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f46:	2201      	movs	r2, #1
 8007f48:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007f4a:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007f50:	4b19      	ldr	r3, [pc, #100]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007f5e:	4b16      	ldr	r3, [pc, #88]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f60:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <MX_ADC1_Init+0xa0>)
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f64:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007f78:	4b0f      	ldr	r3, [pc, #60]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007f7e:	480e      	ldr	r0, [pc, #56]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007f80:	f7f9 f8a0 	bl	80010c4 <HAL_ADC_Init>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8007f8a:	f000 feed 	bl	8008d68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007f8e:	2308      	movs	r3, #8
 8007f90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007f92:	2301      	movs	r3, #1
 8007f94:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007f9a:	463b      	mov	r3, r7
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4806      	ldr	r0, [pc, #24]	; (8007fb8 <MX_ADC1_Init+0x98>)
 8007fa0:	f7f9 fb24 	bl	80015ec <HAL_ADC_ConfigChannel>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8007faa:	f000 fedd 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007fae:	bf00      	nop
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20000ef4 	.word	0x20000ef4
 8007fbc:	40012000 	.word	0x40012000
 8007fc0:	0f000001 	.word	0x0f000001

08007fc4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007fc8:	4b17      	ldr	r3, [pc, #92]	; (8008028 <MX_CAN1_Init+0x64>)
 8007fca:	4a18      	ldr	r2, [pc, #96]	; (800802c <MX_CAN1_Init+0x68>)
 8007fcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8007fce:	4b16      	ldr	r3, [pc, #88]	; (8008028 <MX_CAN1_Init+0x64>)
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007fd4:	4b14      	ldr	r3, [pc, #80]	; (8008028 <MX_CAN1_Init+0x64>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007fda:	4b13      	ldr	r3, [pc, #76]	; (8008028 <MX_CAN1_Init+0x64>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8007fe0:	4b11      	ldr	r3, [pc, #68]	; (8008028 <MX_CAN1_Init+0x64>)
 8007fe2:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8007fe6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8007fe8:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <MX_CAN1_Init+0x64>)
 8007fea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007fee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007ff0:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <MX_CAN1_Init+0x64>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007ff6:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <MX_CAN1_Init+0x64>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <MX_CAN1_Init+0x64>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8008002:	4b09      	ldr	r3, [pc, #36]	; (8008028 <MX_CAN1_Init+0x64>)
 8008004:	2200      	movs	r2, #0
 8008006:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008008:	4b07      	ldr	r3, [pc, #28]	; (8008028 <MX_CAN1_Init+0x64>)
 800800a:	2200      	movs	r2, #0
 800800c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800800e:	4b06      	ldr	r3, [pc, #24]	; (8008028 <MX_CAN1_Init+0x64>)
 8008010:	2200      	movs	r2, #0
 8008012:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008014:	4804      	ldr	r0, [pc, #16]	; (8008028 <MX_CAN1_Init+0x64>)
 8008016:	f7f9 fda3 	bl	8001b60 <HAL_CAN_Init>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8008020:	f000 fea2 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8008024:	bf00      	nop
 8008026:	bd80      	pop	{r7, pc}
 8008028:	2000114c 	.word	0x2000114c
 800802c:	40006400 	.word	0x40006400

08008030 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008034:	4b17      	ldr	r3, [pc, #92]	; (8008094 <MX_SPI1_Init+0x64>)
 8008036:	4a18      	ldr	r2, [pc, #96]	; (8008098 <MX_SPI1_Init+0x68>)
 8008038:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <MX_SPI1_Init+0x64>)
 800803c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008040:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008042:	4b14      	ldr	r3, [pc, #80]	; (8008094 <MX_SPI1_Init+0x64>)
 8008044:	2200      	movs	r2, #0
 8008046:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008048:	4b12      	ldr	r3, [pc, #72]	; (8008094 <MX_SPI1_Init+0x64>)
 800804a:	2200      	movs	r2, #0
 800804c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800804e:	4b11      	ldr	r3, [pc, #68]	; (8008094 <MX_SPI1_Init+0x64>)
 8008050:	2200      	movs	r2, #0
 8008052:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008054:	4b0f      	ldr	r3, [pc, #60]	; (8008094 <MX_SPI1_Init+0x64>)
 8008056:	2200      	movs	r2, #0
 8008058:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800805a:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <MX_SPI1_Init+0x64>)
 800805c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008060:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008062:	4b0c      	ldr	r3, [pc, #48]	; (8008094 <MX_SPI1_Init+0x64>)
 8008064:	2200      	movs	r2, #0
 8008066:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008068:	4b0a      	ldr	r3, [pc, #40]	; (8008094 <MX_SPI1_Init+0x64>)
 800806a:	2200      	movs	r2, #0
 800806c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800806e:	4b09      	ldr	r3, [pc, #36]	; (8008094 <MX_SPI1_Init+0x64>)
 8008070:	2200      	movs	r2, #0
 8008072:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008074:	4b07      	ldr	r3, [pc, #28]	; (8008094 <MX_SPI1_Init+0x64>)
 8008076:	2200      	movs	r2, #0
 8008078:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800807a:	4b06      	ldr	r3, [pc, #24]	; (8008094 <MX_SPI1_Init+0x64>)
 800807c:	220a      	movs	r2, #10
 800807e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008080:	4804      	ldr	r0, [pc, #16]	; (8008094 <MX_SPI1_Init+0x64>)
 8008082:	f7fb ffc9 	bl	8004018 <HAL_SPI_Init>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800808c:	f000 fe6c 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008090:	bf00      	nop
 8008092:	bd80      	pop	{r7, pc}
 8008094:	20001074 	.word	0x20001074
 8008098:	40013000 	.word	0x40013000

0800809c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08c      	sub	sp, #48	; 0x30
 80080a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080a2:	f107 0320 	add.w	r3, r7, #32
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	605a      	str	r2, [r3, #4]
 80080ac:	609a      	str	r2, [r3, #8]
 80080ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80080b0:	f107 030c 	add.w	r3, r7, #12
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	60da      	str	r2, [r3, #12]
 80080be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080c0:	1d3b      	adds	r3, r7, #4
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
 80080c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80080c8:	4b25      	ldr	r3, [pc, #148]	; (8008160 <MX_TIM2_Init+0xc4>)
 80080ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80080ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36;
 80080d0:	4b23      	ldr	r3, [pc, #140]	; (8008160 <MX_TIM2_Init+0xc4>)
 80080d2:	2224      	movs	r2, #36	; 0x24
 80080d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080d6:	4b22      	ldr	r3, [pc, #136]	; (8008160 <MX_TIM2_Init+0xc4>)
 80080d8:	2200      	movs	r2, #0
 80080da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80080dc:	4b20      	ldr	r3, [pc, #128]	; (8008160 <MX_TIM2_Init+0xc4>)
 80080de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080e4:	4b1e      	ldr	r3, [pc, #120]	; (8008160 <MX_TIM2_Init+0xc4>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080ea:	4b1d      	ldr	r3, [pc, #116]	; (8008160 <MX_TIM2_Init+0xc4>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80080f0:	481b      	ldr	r0, [pc, #108]	; (8008160 <MX_TIM2_Init+0xc4>)
 80080f2:	f7fc fce5 	bl	8004ac0 <HAL_TIM_Base_Init>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80080fc:	f000 fe34 	bl	8008d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008104:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008106:	f107 0320 	add.w	r3, r7, #32
 800810a:	4619      	mov	r1, r3
 800810c:	4814      	ldr	r0, [pc, #80]	; (8008160 <MX_TIM2_Init+0xc4>)
 800810e:	f7fc fe52 	bl	8004db6 <HAL_TIM_ConfigClockSource>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8008118:	f000 fe26 	bl	8008d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800811c:	2300      	movs	r3, #0
 800811e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8008120:	2300      	movs	r3, #0
 8008122:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8008124:	f107 030c 	add.w	r3, r7, #12
 8008128:	4619      	mov	r1, r3
 800812a:	480d      	ldr	r0, [pc, #52]	; (8008160 <MX_TIM2_Init+0xc4>)
 800812c:	f7fc fefa 	bl	8004f24 <HAL_TIM_SlaveConfigSynchro>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d001      	beq.n	800813a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8008136:	f000 fe17 	bl	8008d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800813a:	2300      	movs	r3, #0
 800813c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800813e:	2300      	movs	r3, #0
 8008140:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008142:	1d3b      	adds	r3, r7, #4
 8008144:	4619      	mov	r1, r3
 8008146:	4806      	ldr	r0, [pc, #24]	; (8008160 <MX_TIM2_Init+0xc4>)
 8008148:	f7fd f916 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8008152:	f000 fe09 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008156:	bf00      	nop
 8008158:	3730      	adds	r7, #48	; 0x30
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	200010cc 	.word	0x200010cc

08008164 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800816a:	f107 0308 	add.w	r3, r7, #8
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	609a      	str	r2, [r3, #8]
 8008176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008178:	463b      	mov	r3, r7
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008180:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <MX_TIM3_Init+0x94>)
 8008182:	4a1e      	ldr	r2, [pc, #120]	; (80081fc <MX_TIM3_Init+0x98>)
 8008184:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 18;
 8008186:	4b1c      	ldr	r3, [pc, #112]	; (80081f8 <MX_TIM3_Init+0x94>)
 8008188:	2212      	movs	r2, #18
 800818a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800818c:	4b1a      	ldr	r3, [pc, #104]	; (80081f8 <MX_TIM3_Init+0x94>)
 800818e:	2200      	movs	r2, #0
 8008190:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65500;
 8008192:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <MX_TIM3_Init+0x94>)
 8008194:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8008198:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800819a:	4b17      	ldr	r3, [pc, #92]	; (80081f8 <MX_TIM3_Init+0x94>)
 800819c:	2200      	movs	r2, #0
 800819e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081a0:	4b15      	ldr	r3, [pc, #84]	; (80081f8 <MX_TIM3_Init+0x94>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80081a6:	4814      	ldr	r0, [pc, #80]	; (80081f8 <MX_TIM3_Init+0x94>)
 80081a8:	f7fc fc8a 	bl	8004ac0 <HAL_TIM_Base_Init>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80081b2:	f000 fdd9 	bl	8008d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80081bc:	f107 0308 	add.w	r3, r7, #8
 80081c0:	4619      	mov	r1, r3
 80081c2:	480d      	ldr	r0, [pc, #52]	; (80081f8 <MX_TIM3_Init+0x94>)
 80081c4:	f7fc fdf7 	bl	8004db6 <HAL_TIM_ConfigClockSource>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80081ce:	f000 fdcb 	bl	8008d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081d2:	2300      	movs	r3, #0
 80081d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80081da:	463b      	mov	r3, r7
 80081dc:	4619      	mov	r1, r3
 80081de:	4806      	ldr	r0, [pc, #24]	; (80081f8 <MX_TIM3_Init+0x94>)
 80081e0:	f7fd f8ca 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80081ea:	f000 fdbd 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80081ee:	bf00      	nop
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000e8c 	.word	0x20000e8c
 80081fc:	40000400 	.word	0x40000400

08008200 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008206:	f107 0308 	add.w	r3, r7, #8
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	605a      	str	r2, [r3, #4]
 8008210:	609a      	str	r2, [r3, #8]
 8008212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008214:	463b      	mov	r3, r7
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <MX_TIM4_Init+0x94>)
 800821e:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <MX_TIM4_Init+0x98>)
 8008220:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3600;
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <MX_TIM4_Init+0x94>)
 8008224:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008228:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <MX_TIM4_Init+0x94>)
 800822c:	2200      	movs	r2, #0
 800822e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8008230:	4b18      	ldr	r3, [pc, #96]	; (8008294 <MX_TIM4_Init+0x94>)
 8008232:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008236:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008238:	4b16      	ldr	r3, [pc, #88]	; (8008294 <MX_TIM4_Init+0x94>)
 800823a:	2200      	movs	r2, #0
 800823c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <MX_TIM4_Init+0x94>)
 8008240:	2200      	movs	r2, #0
 8008242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008244:	4813      	ldr	r0, [pc, #76]	; (8008294 <MX_TIM4_Init+0x94>)
 8008246:	f7fc fc3b 	bl	8004ac0 <HAL_TIM_Base_Init>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d001      	beq.n	8008254 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8008250:	f000 fd8a 	bl	8008d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008258:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800825a:	f107 0308 	add.w	r3, r7, #8
 800825e:	4619      	mov	r1, r3
 8008260:	480c      	ldr	r0, [pc, #48]	; (8008294 <MX_TIM4_Init+0x94>)
 8008262:	f7fc fda8 	bl	8004db6 <HAL_TIM_ConfigClockSource>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800826c:	f000 fd7c 	bl	8008d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008270:	2300      	movs	r3, #0
 8008272:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008274:	2300      	movs	r3, #0
 8008276:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008278:	463b      	mov	r3, r7
 800827a:	4619      	mov	r1, r3
 800827c:	4805      	ldr	r0, [pc, #20]	; (8008294 <MX_TIM4_Init+0x94>)
 800827e:	f7fd f87b 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8008288:	f000 fd6e 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800828c:	bf00      	nop
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000d64 	.word	0x20000d64
 8008298:	40000800 	.word	0x40000800

0800829c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80082a2:	f107 0308 	add.w	r3, r7, #8
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	605a      	str	r2, [r3, #4]
 80082ac:	609a      	str	r2, [r3, #8]
 80082ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082b0:	463b      	mov	r3, r7
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
 80082b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80082b8:	4b1d      	ldr	r3, [pc, #116]	; (8008330 <MX_TIM5_Init+0x94>)
 80082ba:	4a1e      	ldr	r2, [pc, #120]	; (8008334 <MX_TIM5_Init+0x98>)
 80082bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 36;
 80082be:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <MX_TIM5_Init+0x94>)
 80082c0:	2224      	movs	r2, #36	; 0x24
 80082c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082c4:	4b1a      	ldr	r3, [pc, #104]	; (8008330 <MX_TIM5_Init+0x94>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2000;
 80082ca:	4b19      	ldr	r3, [pc, #100]	; (8008330 <MX_TIM5_Init+0x94>)
 80082cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80082d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082d2:	4b17      	ldr	r3, [pc, #92]	; (8008330 <MX_TIM5_Init+0x94>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082d8:	4b15      	ldr	r3, [pc, #84]	; (8008330 <MX_TIM5_Init+0x94>)
 80082da:	2200      	movs	r2, #0
 80082dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80082de:	4814      	ldr	r0, [pc, #80]	; (8008330 <MX_TIM5_Init+0x94>)
 80082e0:	f7fc fbee 	bl	8004ac0 <HAL_TIM_Base_Init>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80082ea:	f000 fd3d 	bl	8008d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80082f4:	f107 0308 	add.w	r3, r7, #8
 80082f8:	4619      	mov	r1, r3
 80082fa:	480d      	ldr	r0, [pc, #52]	; (8008330 <MX_TIM5_Init+0x94>)
 80082fc:	f7fc fd5b 	bl	8004db6 <HAL_TIM_ConfigClockSource>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8008306:	f000 fd2f 	bl	8008d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800830a:	2300      	movs	r3, #0
 800830c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800830e:	2300      	movs	r3, #0
 8008310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008312:	463b      	mov	r3, r7
 8008314:	4619      	mov	r1, r3
 8008316:	4806      	ldr	r0, [pc, #24]	; (8008330 <MX_TIM5_Init+0x94>)
 8008318:	f7fd f82e 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d001      	beq.n	8008326 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8008322:	f000 fd21 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8008326:	bf00      	nop
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000e4c 	.word	0x20000e4c
 8008334:	40000c00 	.word	0x40000c00

08008338 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800833e:	463b      	mov	r3, r7
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8008346:	4b15      	ldr	r3, [pc, #84]	; (800839c <MX_TIM6_Init+0x64>)
 8008348:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <MX_TIM6_Init+0x68>)
 800834a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3600;
 800834c:	4b13      	ldr	r3, [pc, #76]	; (800839c <MX_TIM6_Init+0x64>)
 800834e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8008352:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <MX_TIM6_Init+0x64>)
 8008356:	2200      	movs	r2, #0
 8008358:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2000;
 800835a:	4b10      	ldr	r3, [pc, #64]	; (800839c <MX_TIM6_Init+0x64>)
 800835c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008360:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008362:	4b0e      	ldr	r3, [pc, #56]	; (800839c <MX_TIM6_Init+0x64>)
 8008364:	2200      	movs	r2, #0
 8008366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8008368:	480c      	ldr	r0, [pc, #48]	; (800839c <MX_TIM6_Init+0x64>)
 800836a:	f7fc fba9 	bl	8004ac0 <HAL_TIM_Base_Init>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d001      	beq.n	8008378 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8008374:	f000 fcf8 	bl	8008d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008378:	2300      	movs	r3, #0
 800837a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800837c:	2300      	movs	r3, #0
 800837e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8008380:	463b      	mov	r3, r7
 8008382:	4619      	mov	r1, r3
 8008384:	4805      	ldr	r0, [pc, #20]	; (800839c <MX_TIM6_Init+0x64>)
 8008386:	f7fc fff7 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8008390:	f000 fcea 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	2000102c 	.word	0x2000102c
 80083a0:	40001000 	.word	0x40001000

080083a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083aa:	463b      	mov	r3, r7
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80083b2:	4b15      	ldr	r3, [pc, #84]	; (8008408 <MX_TIM7_Init+0x64>)
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <MX_TIM7_Init+0x68>)
 80083b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 36;
 80083b8:	4b13      	ldr	r3, [pc, #76]	; (8008408 <MX_TIM7_Init+0x64>)
 80083ba:	2224      	movs	r2, #36	; 0x24
 80083bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083be:	4b12      	ldr	r3, [pc, #72]	; (8008408 <MX_TIM7_Init+0x64>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 6000;
 80083c4:	4b10      	ldr	r3, [pc, #64]	; (8008408 <MX_TIM7_Init+0x64>)
 80083c6:	f241 7270 	movw	r2, #6000	; 0x1770
 80083ca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083cc:	4b0e      	ldr	r3, [pc, #56]	; (8008408 <MX_TIM7_Init+0x64>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80083d2:	480d      	ldr	r0, [pc, #52]	; (8008408 <MX_TIM7_Init+0x64>)
 80083d4:	f7fc fb74 	bl	8004ac0 <HAL_TIM_Base_Init>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80083de:	f000 fcc3 	bl	8008d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083e2:	2300      	movs	r3, #0
 80083e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80083ea:	463b      	mov	r3, r7
 80083ec:	4619      	mov	r1, r3
 80083ee:	4806      	ldr	r0, [pc, #24]	; (8008408 <MX_TIM7_Init+0x64>)
 80083f0:	f7fc ffc2 	bl	8005378 <HAL_TIMEx_MasterConfigSynchronization>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80083fa:	f000 fcb5 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	20001184 	.word	0x20001184
 800840c:	40001400 	.word	0x40001400

08008410 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <MX_TIM10_Init+0x40>)
 8008416:	4a0f      	ldr	r2, [pc, #60]	; (8008454 <MX_TIM10_Init+0x44>)
 8008418:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 36;
 800841a:	4b0d      	ldr	r3, [pc, #52]	; (8008450 <MX_TIM10_Init+0x40>)
 800841c:	2224      	movs	r2, #36	; 0x24
 800841e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008420:	4b0b      	ldr	r3, [pc, #44]	; (8008450 <MX_TIM10_Init+0x40>)
 8008422:	2200      	movs	r2, #0
 8008424:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500;
 8008426:	4b0a      	ldr	r3, [pc, #40]	; (8008450 <MX_TIM10_Init+0x40>)
 8008428:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800842c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800842e:	4b08      	ldr	r3, [pc, #32]	; (8008450 <MX_TIM10_Init+0x40>)
 8008430:	2200      	movs	r2, #0
 8008432:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008434:	4b06      	ldr	r3, [pc, #24]	; (8008450 <MX_TIM10_Init+0x40>)
 8008436:	2200      	movs	r2, #0
 8008438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800843a:	4805      	ldr	r0, [pc, #20]	; (8008450 <MX_TIM10_Init+0x40>)
 800843c:	f7fc fb40 	bl	8004ac0 <HAL_TIM_Base_Init>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8008446:	f000 fc8f 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800844a:	bf00      	nop
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20000e08 	.word	0x20000e08
 8008454:	40014400 	.word	0x40014400

08008458 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <MX_TIM11_Init+0x3c>)
 800845e:	4a0e      	ldr	r2, [pc, #56]	; (8008498 <MX_TIM11_Init+0x40>)
 8008460:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <MX_TIM11_Init+0x3c>)
 8008464:	2200      	movs	r2, #0
 8008466:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008468:	4b0a      	ldr	r3, [pc, #40]	; (8008494 <MX_TIM11_Init+0x3c>)
 800846a:	2200      	movs	r2, #0
 800846c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0;
 800846e:	4b09      	ldr	r3, [pc, #36]	; (8008494 <MX_TIM11_Init+0x3c>)
 8008470:	2200      	movs	r2, #0
 8008472:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <MX_TIM11_Init+0x3c>)
 8008476:	2200      	movs	r2, #0
 8008478:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800847a:	4b06      	ldr	r3, [pc, #24]	; (8008494 <MX_TIM11_Init+0x3c>)
 800847c:	2200      	movs	r2, #0
 800847e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008480:	4804      	ldr	r0, [pc, #16]	; (8008494 <MX_TIM11_Init+0x3c>)
 8008482:	f7fc fb1d 	bl	8004ac0 <HAL_TIM_Base_Init>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 800848c:	f000 fc6c 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8008490:	bf00      	nop
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20000f88 	.word	0x20000f88
 8008498:	40014800 	.word	0x40014800

0800849c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80084a0:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084a2:	4a12      	ldr	r2, [pc, #72]	; (80084ec <MX_USART1_UART_Init+0x50>)
 80084a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80084a6:	4b10      	ldr	r3, [pc, #64]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80084ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80084ae:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80084ba:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084bc:	2200      	movs	r2, #0
 80084be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80084c0:	4b09      	ldr	r3, [pc, #36]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084c2:	220c      	movs	r2, #12
 80084c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084c6:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80084cc:	4b06      	ldr	r3, [pc, #24]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80084d2:	4805      	ldr	r0, [pc, #20]	; (80084e8 <MX_USART1_UART_Init+0x4c>)
 80084d4:	f7fc ffa9 	bl	800542a <HAL_UART_Init>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80084de:	f000 fc43 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80084e2:	bf00      	nop
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20000f48 	.word	0x20000f48
 80084ec:	40011000 	.word	0x40011000

080084f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80084f4:	4b10      	ldr	r3, [pc, #64]	; (8008538 <MX_USART2_UART_Init+0x48>)
 80084f6:	4a11      	ldr	r2, [pc, #68]	; (800853c <MX_USART2_UART_Init+0x4c>)
 80084f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2250000;
 80084fa:	4b0f      	ldr	r3, [pc, #60]	; (8008538 <MX_USART2_UART_Init+0x48>)
 80084fc:	4a10      	ldr	r2, [pc, #64]	; (8008540 <MX_USART2_UART_Init+0x50>)
 80084fe:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008500:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <MX_USART2_UART_Init+0x48>)
 8008502:	2200      	movs	r2, #0
 8008504:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008506:	4b0c      	ldr	r3, [pc, #48]	; (8008538 <MX_USART2_UART_Init+0x48>)
 8008508:	2200      	movs	r2, #0
 800850a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800850c:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <MX_USART2_UART_Init+0x48>)
 800850e:	2200      	movs	r2, #0
 8008510:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008512:	4b09      	ldr	r3, [pc, #36]	; (8008538 <MX_USART2_UART_Init+0x48>)
 8008514:	220c      	movs	r2, #12
 8008516:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008518:	4b07      	ldr	r3, [pc, #28]	; (8008538 <MX_USART2_UART_Init+0x48>)
 800851a:	2200      	movs	r2, #0
 800851c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800851e:	4b06      	ldr	r3, [pc, #24]	; (8008538 <MX_USART2_UART_Init+0x48>)
 8008520:	2200      	movs	r2, #0
 8008522:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008524:	4804      	ldr	r0, [pc, #16]	; (8008538 <MX_USART2_UART_Init+0x48>)
 8008526:	f7fc ff80 	bl	800542a <HAL_UART_Init>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d001      	beq.n	8008534 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8008530:	f000 fc1a 	bl	8008d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008534:	bf00      	nop
 8008536:	bd80      	pop	{r7, pc}
 8008538:	2000110c 	.word	0x2000110c
 800853c:	40004400 	.word	0x40004400
 8008540:	00225510 	.word	0x00225510

08008544 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]
 800854e:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <MX_DMA_Init+0x3c>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	4a0b      	ldr	r2, [pc, #44]	; (8008580 <MX_DMA_Init+0x3c>)
 8008554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008558:	6313      	str	r3, [r2, #48]	; 0x30
 800855a:	4b09      	ldr	r3, [pc, #36]	; (8008580 <MX_DMA_Init+0x3c>)
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008562:	607b      	str	r3, [r7, #4]
 8008564:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008566:	2200      	movs	r2, #0
 8008568:	2100      	movs	r1, #0
 800856a:	2038      	movs	r0, #56	; 0x38
 800856c:	f7fa fab1 	bl	8002ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008570:	2038      	movs	r0, #56	; 0x38
 8008572:	f7fa faca 	bl	8002b0a <HAL_NVIC_EnableIRQ>

}
 8008576:	bf00      	nop
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	40023800 	.word	0x40023800

08008584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08a      	sub	sp, #40	; 0x28
 8008588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800858a:	f107 0314 	add.w	r3, r7, #20
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	605a      	str	r2, [r3, #4]
 8008594:	609a      	str	r2, [r3, #8]
 8008596:	60da      	str	r2, [r3, #12]
 8008598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800859a:	2300      	movs	r3, #0
 800859c:	613b      	str	r3, [r7, #16]
 800859e:	4b48      	ldr	r3, [pc, #288]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a2:	4a47      	ldr	r2, [pc, #284]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085a8:	6313      	str	r3, [r2, #48]	; 0x30
 80085aa:	4b45      	ldr	r3, [pc, #276]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80085b6:	2300      	movs	r3, #0
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	4b41      	ldr	r3, [pc, #260]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	4a40      	ldr	r2, [pc, #256]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	6313      	str	r3, [r2, #48]	; 0x30
 80085c6:	4b3e      	ldr	r3, [pc, #248]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80085d2:	2300      	movs	r3, #0
 80085d4:	60bb      	str	r3, [r7, #8]
 80085d6:	4b3a      	ldr	r3, [pc, #232]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	4a39      	ldr	r2, [pc, #228]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085dc:	f043 0302 	orr.w	r3, r3, #2
 80085e0:	6313      	str	r3, [r2, #48]	; 0x30
 80085e2:	4b37      	ldr	r3, [pc, #220]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	60bb      	str	r3, [r7, #8]
 80085ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80085ee:	2300      	movs	r3, #0
 80085f0:	607b      	str	r3, [r7, #4]
 80085f2:	4b33      	ldr	r3, [pc, #204]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f6:	4a32      	ldr	r2, [pc, #200]	; (80086c0 <MX_GPIO_Init+0x13c>)
 80085f8:	f043 0304 	orr.w	r3, r3, #4
 80085fc:	6313      	str	r3, [r2, #48]	; 0x30
 80085fe:	4b30      	ldr	r3, [pc, #192]	; (80086c0 <MX_GPIO_Init+0x13c>)
 8008600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008602:	f003 0304 	and.w	r3, r3, #4
 8008606:	607b      	str	r3, [r7, #4]
 8008608:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800860a:	2201      	movs	r2, #1
 800860c:	2140      	movs	r1, #64	; 0x40
 800860e:	482d      	ldr	r0, [pc, #180]	; (80086c4 <MX_GPIO_Init+0x140>)
 8008610:	f7fa ffd8 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8008614:	2200      	movs	r2, #0
 8008616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800861a:	482a      	ldr	r0, [pc, #168]	; (80086c4 <MX_GPIO_Init+0x140>)
 800861c:	f7fa ffd2 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8008620:	2200      	movs	r2, #0
 8008622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008626:	4828      	ldr	r0, [pc, #160]	; (80086c8 <MX_GPIO_Init+0x144>)
 8008628:	f7fa ffcc 	bl	80035c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800862c:	2340      	movs	r3, #64	; 0x40
 800862e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008630:	2301      	movs	r3, #1
 8008632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008634:	2300      	movs	r3, #0
 8008636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008638:	2303      	movs	r3, #3
 800863a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800863c:	f107 0314 	add.w	r3, r7, #20
 8008640:	4619      	mov	r1, r3
 8008642:	4820      	ldr	r0, [pc, #128]	; (80086c4 <MX_GPIO_Init+0x140>)
 8008644:	f7fa fe14 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800864c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800864e:	2300      	movs	r3, #0
 8008650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	4619      	mov	r1, r3
 800865c:	4819      	ldr	r0, [pc, #100]	; (80086c4 <MX_GPIO_Init+0x140>)
 800865e:	f7fa fe07 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008668:	2301      	movs	r3, #1
 800866a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800866c:	2300      	movs	r3, #0
 800866e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008670:	2300      	movs	r3, #0
 8008672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008674:	f107 0314 	add.w	r3, r7, #20
 8008678:	4619      	mov	r1, r3
 800867a:	4812      	ldr	r0, [pc, #72]	; (80086c4 <MX_GPIO_Init+0x140>)
 800867c:	f7fa fdf8 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008686:	2301      	movs	r3, #1
 8008688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868a:	2300      	movs	r3, #0
 800868c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800868e:	2300      	movs	r3, #0
 8008690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008692:	f107 0314 	add.w	r3, r7, #20
 8008696:	4619      	mov	r1, r3
 8008698:	480b      	ldr	r0, [pc, #44]	; (80086c8 <MX_GPIO_Init+0x144>)
 800869a:	f7fa fde9 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800869e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80086a4:	2300      	movs	r3, #0
 80086a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086ac:	f107 0314 	add.w	r3, r7, #20
 80086b0:	4619      	mov	r1, r3
 80086b2:	4806      	ldr	r0, [pc, #24]	; (80086cc <MX_GPIO_Init+0x148>)
 80086b4:	f7fa fddc 	bl	8003270 <HAL_GPIO_Init>

}
 80086b8:	bf00      	nop
 80086ba:	3728      	adds	r7, #40	; 0x28
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40023800 	.word	0x40023800
 80086c4:	40020800 	.word	0x40020800
 80086c8:	40020000 	.word	0x40020000
 80086cc:	40020400 	.word	0x40020400

080086d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
    if(huart == &huart1){
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a05      	ldr	r2, [pc, #20]	; (80086f0 <HAL_UART_RxCpltCallback+0x20>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d103      	bne.n	80086e8 <HAL_UART_RxCpltCallback+0x18>
        gps_read_it(huart,&gps_main);
 80086e0:	4904      	ldr	r1, [pc, #16]	; (80086f4 <HAL_UART_RxCpltCallback+0x24>)
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7fe f9f0 	bl	8006ac8 <gps_read_it>
    }
}
 80086e8:	bf00      	nop
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20000f48 	.word	0x20000f48
 80086f4:	20000da4 	.word	0x20000da4

080086f8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
    if(huart == &huart2){
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a05      	ldr	r2, [pc, #20]	; (8008718 <HAL_UART_TxCpltCallback+0x20>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d102      	bne.n	800870e <HAL_UART_TxCpltCallback+0x16>
        print_it(&huart2);
 8008708:	4803      	ldr	r0, [pc, #12]	; (8008718 <HAL_UART_TxCpltCallback+0x20>)
 800870a:	f7fe f8fd 	bl	8006908 <print_it>
    }
}
 800870e:	bf00      	nop
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	2000110c 	.word	0x2000110c

0800871c <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan){
 800871c:	b580      	push	{r7, lr}
 800871e:	b088      	sub	sp, #32
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
    /// CALIBRATION CODE///
    int idsave = CAN_Receive(&can);
 8008724:	487d      	ldr	r0, [pc, #500]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008726:	f7fe f887 	bl	8006838 <CAN_Receive>
 800872a:	61f8      	str	r0, [r7, #28]
    //201/202

    if(idsave == 0x55 || idsave == 0x201){
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	2b55      	cmp	r3, #85	; 0x55
 8008730:	d004      	beq.n	800873c <HAL_CAN_RxFifo0FullCallback+0x20>
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	f240 2201 	movw	r2, #513	; 0x201
 8008738:	4293      	cmp	r3, r2
 800873a:	d120      	bne.n	800877e <HAL_CAN_RxFifo0FullCallback+0x62>
        if(can.dataRx[0] == 0x51 || can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0] == 0x08 || can.dataRx[0] == 0x0A || can.dataRx[0] == 0x0B){
 800873c:	4b77      	ldr	r3, [pc, #476]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800873e:	7c1b      	ldrb	r3, [r3, #16]
 8008740:	2b51      	cmp	r3, #81	; 0x51
 8008742:	d017      	beq.n	8008774 <HAL_CAN_RxFifo0FullCallback+0x58>
 8008744:	4b75      	ldr	r3, [pc, #468]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008746:	7c1b      	ldrb	r3, [r3, #16]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d013      	beq.n	8008774 <HAL_CAN_RxFifo0FullCallback+0x58>
 800874c:	4b73      	ldr	r3, [pc, #460]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800874e:	7c1b      	ldrb	r3, [r3, #16]
 8008750:	2b04      	cmp	r3, #4
 8008752:	d00f      	beq.n	8008774 <HAL_CAN_RxFifo0FullCallback+0x58>
 8008754:	4b71      	ldr	r3, [pc, #452]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008756:	7c1b      	ldrb	r3, [r3, #16]
 8008758:	2b05      	cmp	r3, #5
 800875a:	d00b      	beq.n	8008774 <HAL_CAN_RxFifo0FullCallback+0x58>
 800875c:	4b6f      	ldr	r3, [pc, #444]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800875e:	7c1b      	ldrb	r3, [r3, #16]
 8008760:	2b08      	cmp	r3, #8
 8008762:	d007      	beq.n	8008774 <HAL_CAN_RxFifo0FullCallback+0x58>
 8008764:	4b6d      	ldr	r3, [pc, #436]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008766:	7c1b      	ldrb	r3, [r3, #16]
 8008768:	2b0a      	cmp	r3, #10
 800876a:	d003      	beq.n	8008774 <HAL_CAN_RxFifo0FullCallback+0x58>
 800876c:	4b6b      	ldr	r3, [pc, #428]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800876e:	7c1b      	ldrb	r3, [r3, #16]
 8008770:	2b0b      	cmp	r3, #11
 8008772:	d104      	bne.n	800877e <HAL_CAN_RxFifo0FullCallback+0x62>
            command_flag = 1;
 8008774:	4b6a      	ldr	r3, [pc, #424]	; (8008920 <HAL_CAN_RxFifo0FullCallback+0x204>)
 8008776:	2201      	movs	r2, #1
 8008778:	601a      	str	r2, [r3, #0]
            idsave = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	61fb      	str	r3, [r7, #28]
        }
    }
    if(idsave == 0xA0 || idsave == 0xAA || idsave == 0x181){
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	2ba0      	cmp	r3, #160	; 0xa0
 8008782:	d007      	beq.n	8008794 <HAL_CAN_RxFifo0FullCallback+0x78>
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	2baa      	cmp	r3, #170	; 0xaa
 8008788:	d004      	beq.n	8008794 <HAL_CAN_RxFifo0FullCallback+0x78>
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	f240 1281 	movw	r2, #385	; 0x181
 8008790:	4293      	cmp	r3, r2
 8008792:	d118      	bne.n	80087c6 <HAL_CAN_RxFifo0FullCallback+0xaa>
        if(can.dataRx[0] == 0x03 || can.dataRx[0] == 0x04 || can.dataRx[0] == 0x05 || can.dataRx[0] == 0x08 || can.dataRx[0] == 0xD8){
 8008794:	4b61      	ldr	r3, [pc, #388]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008796:	7c1b      	ldrb	r3, [r3, #16]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d00f      	beq.n	80087bc <HAL_CAN_RxFifo0FullCallback+0xa0>
 800879c:	4b5f      	ldr	r3, [pc, #380]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800879e:	7c1b      	ldrb	r3, [r3, #16]
 80087a0:	2b04      	cmp	r3, #4
 80087a2:	d00b      	beq.n	80087bc <HAL_CAN_RxFifo0FullCallback+0xa0>
 80087a4:	4b5d      	ldr	r3, [pc, #372]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087a6:	7c1b      	ldrb	r3, [r3, #16]
 80087a8:	2b05      	cmp	r3, #5
 80087aa:	d007      	beq.n	80087bc <HAL_CAN_RxFifo0FullCallback+0xa0>
 80087ac:	4b5b      	ldr	r3, [pc, #364]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087ae:	7c1b      	ldrb	r3, [r3, #16]
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d003      	beq.n	80087bc <HAL_CAN_RxFifo0FullCallback+0xa0>
 80087b4:	4b59      	ldr	r3, [pc, #356]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087b6:	7c1b      	ldrb	r3, [r3, #16]
 80087b8:	2bd8      	cmp	r3, #216	; 0xd8
 80087ba:	d104      	bne.n	80087c6 <HAL_CAN_RxFifo0FullCallback+0xaa>
            command_flag = 1;
 80087bc:	4b58      	ldr	r3, [pc, #352]	; (8008920 <HAL_CAN_RxFifo0FullCallback+0x204>)
 80087be:	2201      	movs	r2, #1
 80087c0:	601a      	str	r2, [r3, #0]
            idsave = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	61fb      	str	r3, [r7, #28]
        }
    }

    if (idsave == 0xBB){
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	2bbb      	cmp	r3, #187	; 0xbb
 80087ca:	f040 8094 	bne.w	80088f6 <HAL_CAN_RxFifo0FullCallback+0x1da>
        //sprintf(val0, "APPS1: %d \r\n", idsave);  //use "%lu" for long, "%d" for int
        //HAL_UART_Transmit(&huart2, (uint8_t*)val0, strlen(val0), 10);
        if ((can.dataRx[0] == 2) && (can.dataRx[1] == 0)){
 80087ce:	4b53      	ldr	r3, [pc, #332]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087d0:	7c1b      	ldrb	r3, [r3, #16]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d133      	bne.n	800883e <HAL_CAN_RxFifo0FullCallback+0x122>
 80087d6:	4b51      	ldr	r3, [pc, #324]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087d8:	7c5b      	ldrb	r3, [r3, #17]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d12f      	bne.n	800883e <HAL_CAN_RxFifo0FullCallback+0x122>
            set_min(&pot_2);
 80087de:	4851      	ldr	r0, [pc, #324]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80087e0:	f7ff f82d 	bl	800783e <set_min>
            calibration_flag = 1;
 80087e4:	4b50      	ldr	r3, [pc, #320]	; (8008928 <HAL_CAN_RxFifo0FullCallback+0x20c>)
 80087e6:	2201      	movs	r2, #1
 80087e8:	601a      	str	r2, [r3, #0]

            can.dataTx[0] = 2;
 80087ea:	4b4c      	ldr	r3, [pc, #304]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087ec:	2202      	movs	r2, #2
 80087ee:	721a      	strb	r2, [r3, #8]
            can.dataTx[1] = 0;
 80087f0:	4b4a      	ldr	r3, [pc, #296]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	725a      	strb	r2, [r3, #9]
            can.dataTx[2] = 0;
 80087f6:	4b49      	ldr	r3, [pc, #292]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	729a      	strb	r2, [r3, #10]
            can.dataTx[3] = 0;
 80087fc:	4b47      	ldr	r3, [pc, #284]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80087fe:	2200      	movs	r2, #0
 8008800:	72da      	strb	r2, [r3, #11]
            can.dataTx[4] = 0;
 8008802:	4b46      	ldr	r3, [pc, #280]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008804:	2200      	movs	r2, #0
 8008806:	731a      	strb	r2, [r3, #12]
            can.dataTx[5] = 0;
 8008808:	4b44      	ldr	r3, [pc, #272]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800880a:	2200      	movs	r2, #0
 800880c:	735a      	strb	r2, [r3, #13]
            can.dataTx[6] = 0;
 800880e:	4b43      	ldr	r3, [pc, #268]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008810:	2200      	movs	r2, #0
 8008812:	739a      	strb	r2, [r3, #14]
            can.dataTx[7] = 0;
 8008814:	4b41      	ldr	r3, [pc, #260]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008816:	2200      	movs	r2, #0
 8008818:	73da      	strb	r2, [r3, #15]
            can.id = 0xBC;
 800881a:	4b40      	ldr	r3, [pc, #256]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800881c:	22bc      	movs	r2, #188	; 0xbc
 800881e:	601a      	str	r2, [r3, #0]
            can.size = 8;
 8008820:	4b3e      	ldr	r3, [pc, #248]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008822:	2208      	movs	r2, #8
 8008824:	605a      	str	r2, [r3, #4]
            for(int i = 0; i < 10; i++){
 8008826:	2300      	movs	r3, #0
 8008828:	61bb      	str	r3, [r7, #24]
 800882a:	e005      	b.n	8008838 <HAL_CAN_RxFifo0FullCallback+0x11c>
                CAN_Send(&can);
 800882c:	483b      	ldr	r0, [pc, #236]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800882e:	f7fd ffcb 	bl	80067c8 <CAN_Send>
            for(int i = 0; i < 10; i++){
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	3301      	adds	r3, #1
 8008836:	61bb      	str	r3, [r7, #24]
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b09      	cmp	r3, #9
 800883c:	ddf6      	ble.n	800882c <HAL_CAN_RxFifo0FullCallback+0x110>
            }
        }
        if ((can.dataRx[0] == 2) && (can.dataRx[1] == 1)){
 800883e:	4b37      	ldr	r3, [pc, #220]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008840:	7c1b      	ldrb	r3, [r3, #16]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d133      	bne.n	80088ae <HAL_CAN_RxFifo0FullCallback+0x192>
 8008846:	4b35      	ldr	r3, [pc, #212]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008848:	7c5b      	ldrb	r3, [r3, #17]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d12f      	bne.n	80088ae <HAL_CAN_RxFifo0FullCallback+0x192>
            set_max(&pot_2);
 800884e:	4835      	ldr	r0, [pc, #212]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 8008850:	f7fe ffe7 	bl	8007822 <set_max>
            calibration_flag = 0;
 8008854:	4b34      	ldr	r3, [pc, #208]	; (8008928 <HAL_CAN_RxFifo0FullCallback+0x20c>)
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]

            can.dataTx[0] = 2;
 800885a:	4b30      	ldr	r3, [pc, #192]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800885c:	2202      	movs	r2, #2
 800885e:	721a      	strb	r2, [r3, #8]
            can.dataTx[1] = 1;
 8008860:	4b2e      	ldr	r3, [pc, #184]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008862:	2201      	movs	r2, #1
 8008864:	725a      	strb	r2, [r3, #9]
            can.dataTx[2] = 0;
 8008866:	4b2d      	ldr	r3, [pc, #180]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008868:	2200      	movs	r2, #0
 800886a:	729a      	strb	r2, [r3, #10]
            can.dataTx[3] = 0;
 800886c:	4b2b      	ldr	r3, [pc, #172]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800886e:	2200      	movs	r2, #0
 8008870:	72da      	strb	r2, [r3, #11]
            can.dataTx[4] = 0;
 8008872:	4b2a      	ldr	r3, [pc, #168]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008874:	2200      	movs	r2, #0
 8008876:	731a      	strb	r2, [r3, #12]
            can.dataTx[5] = 0;
 8008878:	4b28      	ldr	r3, [pc, #160]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800887a:	2200      	movs	r2, #0
 800887c:	735a      	strb	r2, [r3, #13]
            can.dataTx[6] = 0;
 800887e:	4b27      	ldr	r3, [pc, #156]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008880:	2200      	movs	r2, #0
 8008882:	739a      	strb	r2, [r3, #14]
            can.dataTx[7] = 0;
 8008884:	4b25      	ldr	r3, [pc, #148]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008886:	2200      	movs	r2, #0
 8008888:	73da      	strb	r2, [r3, #15]
            can.id = 0xBC;
 800888a:	4b24      	ldr	r3, [pc, #144]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800888c:	22bc      	movs	r2, #188	; 0xbc
 800888e:	601a      	str	r2, [r3, #0]
            can.size = 8;
 8008890:	4b22      	ldr	r3, [pc, #136]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008892:	2208      	movs	r2, #8
 8008894:	605a      	str	r2, [r3, #4]
            for(int i = 0; i < 10; i++){
 8008896:	2300      	movs	r3, #0
 8008898:	617b      	str	r3, [r7, #20]
 800889a:	e005      	b.n	80088a8 <HAL_CAN_RxFifo0FullCallback+0x18c>
                CAN_Send(&can);
 800889c:	481f      	ldr	r0, [pc, #124]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800889e:	f7fd ff93 	bl	80067c8 <CAN_Send>
            for(int i = 0; i < 10; i++){
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	3301      	adds	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b09      	cmp	r3, #9
 80088ac:	ddf6      	ble.n	800889c <HAL_CAN_RxFifo0FullCallback+0x180>
            }
        }
        //val0rang = abs(valMax0 - valMin0);
        pot_2.range = abs(pot_2.max - pot_2.min);
 80088ae:	4b1d      	ldr	r3, [pc, #116]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088b0:	685a      	ldr	r2, [r3, #4]
 80088b2:	4b1c      	ldr	r3, [pc, #112]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bfb8      	it	lt
 80088bc:	425b      	neglt	r3, r3
 80088be:	4a19      	ldr	r2, [pc, #100]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088c0:	60d3      	str	r3, [r2, #12]
        int max_tmp = pot_2.max;
 80088c2:	4b18      	ldr	r3, [pc, #96]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	613b      	str	r3, [r7, #16]
        int min_tmp = pot_2.min;
 80088c8:	4b16      	ldr	r3, [pc, #88]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	60fb      	str	r3, [r7, #12]
        if (max_tmp > min_tmp){
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	dd05      	ble.n	80088e2 <HAL_CAN_RxFifo0FullCallback+0x1c6>
            pot_2.max = max_tmp;
 80088d6:	4a13      	ldr	r2, [pc, #76]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	6053      	str	r3, [r2, #4]
            pot_2.min = min_tmp;
 80088dc:	4a11      	ldr	r2, [pc, #68]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6093      	str	r3, [r2, #8]
        }
        if (max_tmp < min_tmp){
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	da05      	bge.n	80088f6 <HAL_CAN_RxFifo0FullCallback+0x1da>
            pot_2.max = min_tmp;
 80088ea:	4a0e      	ldr	r2, [pc, #56]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6053      	str	r3, [r2, #4]
            pot_2.min = max_tmp;
 80088f0:	4a0c      	ldr	r2, [pc, #48]	; (8008924 <HAL_CAN_RxFifo0FullCallback+0x208>)
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	6093      	str	r3, [r2, #8]
        }
    }

    //TIMER Interrupt setup via CAN Message
    if(idsave == 195 && can.dataRx[0] == 1){
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	2bc3      	cmp	r3, #195	; 0xc3
 80088fa:	d10b      	bne.n	8008914 <HAL_CAN_RxFifo0FullCallback+0x1f8>
 80088fc:	4b07      	ldr	r3, [pc, #28]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 80088fe:	7c1b      	ldrb	r3, [r3, #16]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d107      	bne.n	8008914 <HAL_CAN_RxFifo0FullCallback+0x1f8>
        multiplier = can.dataRx[1]*256 + can.dataRx[2];
 8008904:	4b05      	ldr	r3, [pc, #20]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 8008906:	7c5b      	ldrb	r3, [r3, #17]
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	4a04      	ldr	r2, [pc, #16]	; (800891c <HAL_CAN_RxFifo0FullCallback+0x200>)
 800890c:	7c92      	ldrb	r2, [r2, #18]
 800890e:	4413      	add	r3, r2
 8008910:	4a06      	ldr	r2, [pc, #24]	; (800892c <HAL_CAN_RxFifo0FullCallback+0x210>)
 8008912:	6013      	str	r3, [r2, #0]
    }
}
 8008914:	bf00      	nop
 8008916:	3720      	adds	r7, #32
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20000c58 	.word	0x20000c58
 8008920:	20000400 	.word	0x20000400
 8008924:	20000418 	.word	0x20000418
 8008928:	20000404 	.word	0x20000404
 800892c:	20000020 	.word	0x20000020

08008930 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]

    if(htim == &htim10){
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a20      	ldr	r2, [pc, #128]	; (80089bc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d132      	bne.n	80089a6 <HAL_TIM_PeriodElapsedCallback+0x76>
        //READING SENSORS
        if(flag == 1 * multiplier){
 8008940:	4b1f      	ldr	r3, [pc, #124]	; (80089c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	4b1f      	ldr	r3, [pc, #124]	; (80089c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d103      	bne.n	8008954 <HAL_TIM_PeriodElapsedCallback+0x24>
            // ACCEL
            LSMD9S0_accel_read(&imu);
 800894c:	481e      	ldr	r0, [pc, #120]	; (80089c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800894e:	f7fd fe77 	bl	8006640 <LSMD9S0_accel_read>
 8008952:	e016      	b.n	8008982 <HAL_TIM_PeriodElapsedCallback+0x52>

        }else if (flag == 2 * multiplier){
 8008954:	4b1b      	ldr	r3, [pc, #108]	; (80089c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	005a      	lsls	r2, r3, #1
 800895a:	4b19      	ldr	r3, [pc, #100]	; (80089c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	429a      	cmp	r2, r3
 8008960:	d103      	bne.n	800896a <HAL_TIM_PeriodElapsedCallback+0x3a>
            // GYRO
            LSMD9S0_gyro_read(&imu);
 8008962:	4819      	ldr	r0, [pc, #100]	; (80089c8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8008964:	f7fd fd46 	bl	80063f4 <LSMD9S0_gyro_read>
 8008968:	e00b      	b.n	8008982 <HAL_TIM_PeriodElapsedCallback+0x52>

        }else if (flag == 3 * multiplier){
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	4613      	mov	r3, r2
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	441a      	add	r2, r3
 8008974:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	429a      	cmp	r2, r3
 800897a:	d102      	bne.n	8008982 <HAL_TIM_PeriodElapsedCallback+0x52>
            // STEER
            calc_pot_value(&pot_2);
 800897c:	4813      	ldr	r0, [pc, #76]	; (80089cc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800897e:	f7fe ff19 	bl	80077b4 <calc_pot_value>

        }

        if(flag >= (3 * multiplier)){
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4613      	mov	r3, r2
 8008988:	005b      	lsls	r3, r3, #1
 800898a:	441a      	add	r2, r3
 800898c:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	dc03      	bgt.n	800899c <HAL_TIM_PeriodElapsedCallback+0x6c>
            flag = 0;
 8008994:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8008996:	2200      	movs	r2, #0
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	e004      	b.n	80089a6 <HAL_TIM_PeriodElapsedCallback+0x76>
        }
        else{
            flag  ++;
 800899c:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3301      	adds	r3, #1
 80089a2:	4a07      	ldr	r2, [pc, #28]	; (80089c0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80089a4:	6013      	str	r3, [r2, #0]
        }
    }

    if(htim == &htim7){
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a09      	ldr	r2, [pc, #36]	; (80089d0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d102      	bne.n	80089b4 <HAL_TIM_PeriodElapsedCallback+0x84>
        encoder_tim_interrupt(&enc);
 80089ae:	4809      	ldr	r0, [pc, #36]	; (80089d4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80089b0:	f7fe fc88 	bl	80072c4 <encoder_tim_interrupt>
    }
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000e08 	.word	0x20000e08
 80089c0:	200003fc 	.word	0x200003fc
 80089c4:	20000020 	.word	0x20000020
 80089c8:	20000430 	.word	0x20000430
 80089cc:	20000418 	.word	0x20000418
 80089d0:	20001184 	.word	0x20001184
 80089d4:	20000878 	.word	0x20000878

080089d8 <send_CAN_data>:

int send_CAN_data(uint32_t millis){
 80089d8:	b590      	push	{r4, r7, lr}
 80089da:	b089      	sub	sp, #36	; 0x24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]

    int sent_flag = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	61fb      	str	r3, [r7, #28]

    //-------------------SEND Encoder-------------------//
    if(millis % 25 == 0){
 80089e4:	6879      	ldr	r1, [r7, #4]
 80089e6:	4baf      	ldr	r3, [pc, #700]	; (8008ca4 <send_CAN_data+0x2cc>)
 80089e8:	fba3 2301 	umull	r2, r3, r3, r1
 80089ec:	08da      	lsrs	r2, r3, #3
 80089ee:	4613      	mov	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	009a      	lsls	r2, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	1aca      	subs	r2, r1, r3
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	d135      	bne.n	8008a6a <send_CAN_data+0x92>
        uint16_t speed_Send = enc.average_speed;
 80089fe:	4baa      	ldr	r3, [pc, #680]	; (8008ca8 <send_CAN_data+0x2d0>)
 8008a00:	e9d3 34f0 	ldrd	r3, r4, [r3, #960]	; 0x3c0
 8008a04:	4618      	mov	r0, r3
 8008a06:	4621      	mov	r1, r4
 8008a08:	f7f8 f8d8 	bl	8000bbc <__aeabi_d2uiz>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	837b      	strh	r3, [r7, #26]

        can.dataTx[0] = 0x06;
 8008a10:	4ba6      	ldr	r3, [pc, #664]	; (8008cac <send_CAN_data+0x2d4>)
 8008a12:	2206      	movs	r2, #6
 8008a14:	721a      	strb	r2, [r3, #8]
        can.dataTx[1] = speed_Send / 256;
 8008a16:	8b7b      	ldrh	r3, [r7, #26]
 8008a18:	0a1b      	lsrs	r3, r3, #8
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	b2da      	uxtb	r2, r3
 8008a1e:	4ba3      	ldr	r3, [pc, #652]	; (8008cac <send_CAN_data+0x2d4>)
 8008a20:	725a      	strb	r2, [r3, #9]
        can.dataTx[2] = speed_Send % 256;
 8008a22:	8b7b      	ldrh	r3, [r7, #26]
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	4ba1      	ldr	r3, [pc, #644]	; (8008cac <send_CAN_data+0x2d4>)
 8008a28:	729a      	strb	r2, [r3, #10]
        can.dataTx[3] = enc.speed_sign;
 8008a2a:	4b9f      	ldr	r3, [pc, #636]	; (8008ca8 <send_CAN_data+0x2d0>)
 8008a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	4b9e      	ldr	r3, [pc, #632]	; (8008cac <send_CAN_data+0x2d4>)
 8008a32:	72da      	strb	r2, [r3, #11]
        can.dataTx[4] = 0;
 8008a34:	4b9d      	ldr	r3, [pc, #628]	; (8008cac <send_CAN_data+0x2d4>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	731a      	strb	r2, [r3, #12]
        can.dataTx[5] = 0;
 8008a3a:	4b9c      	ldr	r3, [pc, #624]	; (8008cac <send_CAN_data+0x2d4>)
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	735a      	strb	r2, [r3, #13]
        can.dataTx[6] = enc.error_flag;
 8008a40:	4b99      	ldr	r3, [pc, #612]	; (8008ca8 <send_CAN_data+0x2d0>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	4b99      	ldr	r3, [pc, #612]	; (8008cac <send_CAN_data+0x2d4>)
 8008a48:	739a      	strb	r2, [r3, #14]
        can.dataTx[7] = enc.steer_enc_prescaler;
 8008a4a:	4b97      	ldr	r3, [pc, #604]	; (8008ca8 <send_CAN_data+0x2d0>)
 8008a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a4e:	b2da      	uxtb	r2, r3
 8008a50:	4b96      	ldr	r3, [pc, #600]	; (8008cac <send_CAN_data+0x2d4>)
 8008a52:	73da      	strb	r2, [r3, #15]
        can.id = 0xD0;
 8008a54:	4b95      	ldr	r3, [pc, #596]	; (8008cac <send_CAN_data+0x2d4>)
 8008a56:	22d0      	movs	r2, #208	; 0xd0
 8008a58:	601a      	str	r2, [r3, #0]
        can.size = 8;
 8008a5a:	4b94      	ldr	r3, [pc, #592]	; (8008cac <send_CAN_data+0x2d4>)
 8008a5c:	2208      	movs	r2, #8
 8008a5e:	605a      	str	r2, [r3, #4]
        CAN_Send(&can);
 8008a60:	4892      	ldr	r0, [pc, #584]	; (8008cac <send_CAN_data+0x2d4>)
 8008a62:	f7fd feb1 	bl	80067c8 <CAN_Send>

        sent_flag = 1;
 8008a66:	2301      	movs	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
    }

    //-------------SEND KM & WHEEL ROTAIONS-------------//
    if(millis % 1000 == 0){
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	4b90      	ldr	r3, [pc, #576]	; (8008cb0 <send_CAN_data+0x2d8>)
 8008a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a72:	099b      	lsrs	r3, r3, #6
 8008a74:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008a78:	fb01 f303 	mul.w	r3, r1, r3
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d135      	bne.n	8008aee <send_CAN_data+0x116>

        uint16_t Km = enc.Km;
 8008a82:	4b89      	ldr	r3, [pc, #548]	; (8008ca8 <send_CAN_data+0x2d0>)
 8008a84:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8008a88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a8c:	ee17 3a90 	vmov	r3, s15
 8008a90:	833b      	strh	r3, [r7, #24]
        uint16_t rotations = enc.wheel_rotation;
 8008a92:	4b85      	ldr	r3, [pc, #532]	; (8008ca8 <send_CAN_data+0x2d0>)
 8008a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a96:	82fb      	strh	r3, [r7, #22]

        can.dataTx[0] = 0x08;
 8008a98:	4b84      	ldr	r3, [pc, #528]	; (8008cac <send_CAN_data+0x2d4>)
 8008a9a:	2208      	movs	r2, #8
 8008a9c:	721a      	strb	r2, [r3, #8]
        can.dataTx[1] = Km >> 8;
 8008a9e:	8b3b      	ldrh	r3, [r7, #24]
 8008aa0:	0a1b      	lsrs	r3, r3, #8
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	4b81      	ldr	r3, [pc, #516]	; (8008cac <send_CAN_data+0x2d4>)
 8008aa8:	725a      	strb	r2, [r3, #9]
        can.dataTx[2] = Km;
 8008aaa:	8b3b      	ldrh	r3, [r7, #24]
 8008aac:	b2da      	uxtb	r2, r3
 8008aae:	4b7f      	ldr	r3, [pc, #508]	; (8008cac <send_CAN_data+0x2d4>)
 8008ab0:	729a      	strb	r2, [r3, #10]
        can.dataTx[3] = (uint8_t)rotations >> 8;
 8008ab2:	8afb      	ldrh	r3, [r7, #22]
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	121b      	asrs	r3, r3, #8
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	4b7c      	ldr	r3, [pc, #496]	; (8008cac <send_CAN_data+0x2d4>)
 8008abc:	72da      	strb	r2, [r3, #11]
        can.dataTx[4] = (uint8_t)rotations;
 8008abe:	8afb      	ldrh	r3, [r7, #22]
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	4b7a      	ldr	r3, [pc, #488]	; (8008cac <send_CAN_data+0x2d4>)
 8008ac4:	731a      	strb	r2, [r3, #12]
        can.dataTx[5] = 0;
 8008ac6:	4b79      	ldr	r3, [pc, #484]	; (8008cac <send_CAN_data+0x2d4>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	735a      	strb	r2, [r3, #13]
        can.dataTx[6] = 0;
 8008acc:	4b77      	ldr	r3, [pc, #476]	; (8008cac <send_CAN_data+0x2d4>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	739a      	strb	r2, [r3, #14]
        can.dataTx[7] = 0;
 8008ad2:	4b76      	ldr	r3, [pc, #472]	; (8008cac <send_CAN_data+0x2d4>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	73da      	strb	r2, [r3, #15]
        can.id = 0xD0;
 8008ad8:	4b74      	ldr	r3, [pc, #464]	; (8008cac <send_CAN_data+0x2d4>)
 8008ada:	22d0      	movs	r2, #208	; 0xd0
 8008adc:	601a      	str	r2, [r3, #0]
        can.size = 8;
 8008ade:	4b73      	ldr	r3, [pc, #460]	; (8008cac <send_CAN_data+0x2d4>)
 8008ae0:	2208      	movs	r2, #8
 8008ae2:	605a      	str	r2, [r3, #4]
        CAN_Send(&can);
 8008ae4:	4871      	ldr	r0, [pc, #452]	; (8008cac <send_CAN_data+0x2d4>)
 8008ae6:	f7fd fe6f 	bl	80067c8 <CAN_Send>

        sent_flag = 2;
 8008aea:	2302      	movs	r3, #2
 8008aec:	61fb      	str	r3, [r7, #28]
    }

    millis += 5;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3305      	adds	r3, #5
 8008af2:	607b      	str	r3, [r7, #4]

    //--------------------SEND Accel--------------------//
    if(millis % 10 == 0){
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4b6f      	ldr	r3, [pc, #444]	; (8008cb4 <send_CAN_data+0x2dc>)
 8008af8:	fba3 2301 	umull	r2, r3, r3, r1
 8008afc:	08da      	lsrs	r2, r3, #3
 8008afe:	4613      	mov	r3, r2
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	1aca      	subs	r2, r1, r3
 8008b08:	2a00      	cmp	r2, #0
 8008b0a:	d152      	bne.n	8008bb2 <send_CAN_data+0x1da>

    	//removing negative values
        uint16_t val_a_x = imu.Y_A_axis + 32768;
 8008b0c:	4b6a      	ldr	r3, [pc, #424]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008b0e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008b12:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8008cbc <send_CAN_data+0x2e4>
 8008b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b1e:	ee17 3a90 	vmov	r3, s15
 8008b22:	82bb      	strh	r3, [r7, #20]
        uint16_t val_a_y = imu.X_A_axis + 32768;
 8008b24:	4b64      	ldr	r3, [pc, #400]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008b26:	edd3 7a06 	vldr	s15, [r3, #24]
 8008b2a:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008cbc <send_CAN_data+0x2e4>
 8008b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b36:	ee17 3a90 	vmov	r3, s15
 8008b3a:	827b      	strh	r3, [r7, #18]
        uint16_t val_a_z = imu.Z_A_axis + 32768;
 8008b3c:	4b5e      	ldr	r3, [pc, #376]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008b3e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008b42:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008cbc <send_CAN_data+0x2e4>
 8008b46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b4e:	ee17 3a90 	vmov	r3, s15
 8008b52:	823b      	strh	r3, [r7, #16]

        can.dataTx[0] = 0x05;
 8008b54:	4b55      	ldr	r3, [pc, #340]	; (8008cac <send_CAN_data+0x2d4>)
 8008b56:	2205      	movs	r2, #5
 8008b58:	721a      	strb	r2, [r3, #8]
        can.dataTx[1] = val_a_x / 256;
 8008b5a:	8abb      	ldrh	r3, [r7, #20]
 8008b5c:	0a1b      	lsrs	r3, r3, #8
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	4b52      	ldr	r3, [pc, #328]	; (8008cac <send_CAN_data+0x2d4>)
 8008b64:	725a      	strb	r2, [r3, #9]
        can.dataTx[2] = val_a_x % 256;
 8008b66:	8abb      	ldrh	r3, [r7, #20]
 8008b68:	b2da      	uxtb	r2, r3
 8008b6a:	4b50      	ldr	r3, [pc, #320]	; (8008cac <send_CAN_data+0x2d4>)
 8008b6c:	729a      	strb	r2, [r3, #10]
        can.dataTx[3] = val_a_y / 256;
 8008b6e:	8a7b      	ldrh	r3, [r7, #18]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	b2da      	uxtb	r2, r3
 8008b76:	4b4d      	ldr	r3, [pc, #308]	; (8008cac <send_CAN_data+0x2d4>)
 8008b78:	72da      	strb	r2, [r3, #11]
        can.dataTx[4] = val_a_y % 256;
 8008b7a:	8a7b      	ldrh	r3, [r7, #18]
 8008b7c:	b2da      	uxtb	r2, r3
 8008b7e:	4b4b      	ldr	r3, [pc, #300]	; (8008cac <send_CAN_data+0x2d4>)
 8008b80:	731a      	strb	r2, [r3, #12]
        can.dataTx[5] = val_a_z / 256;
 8008b82:	8a3b      	ldrh	r3, [r7, #16]
 8008b84:	0a1b      	lsrs	r3, r3, #8
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	4b48      	ldr	r3, [pc, #288]	; (8008cac <send_CAN_data+0x2d4>)
 8008b8c:	735a      	strb	r2, [r3, #13]
        can.dataTx[6] = val_a_z % 256;
 8008b8e:	8a3b      	ldrh	r3, [r7, #16]
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	4b46      	ldr	r3, [pc, #280]	; (8008cac <send_CAN_data+0x2d4>)
 8008b94:	739a      	strb	r2, [r3, #14]
        can.dataTx[7] = 0;
 8008b96:	4b45      	ldr	r3, [pc, #276]	; (8008cac <send_CAN_data+0x2d4>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	73da      	strb	r2, [r3, #15]
        can.id = 0xC0;
 8008b9c:	4b43      	ldr	r3, [pc, #268]	; (8008cac <send_CAN_data+0x2d4>)
 8008b9e:	22c0      	movs	r2, #192	; 0xc0
 8008ba0:	601a      	str	r2, [r3, #0]
        can.size = 8;
 8008ba2:	4b42      	ldr	r3, [pc, #264]	; (8008cac <send_CAN_data+0x2d4>)
 8008ba4:	2208      	movs	r2, #8
 8008ba6:	605a      	str	r2, [r3, #4]
        CAN_Send(&can);
 8008ba8:	4840      	ldr	r0, [pc, #256]	; (8008cac <send_CAN_data+0x2d4>)
 8008baa:	f7fd fe0d 	bl	80067c8 <CAN_Send>

        sent_flag = 3;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	61fb      	str	r3, [r7, #28]
    }

    millis += 5;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3305      	adds	r3, #5
 8008bb6:	607b      	str	r3, [r7, #4]

    //---------------------SEND Gyro---------------------//
    if(millis % 25 == 0){
 8008bb8:	6879      	ldr	r1, [r7, #4]
 8008bba:	4b3a      	ldr	r3, [pc, #232]	; (8008ca4 <send_CAN_data+0x2cc>)
 8008bbc:	fba3 2301 	umull	r2, r3, r3, r1
 8008bc0:	08da      	lsrs	r2, r3, #3
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	009a      	lsls	r2, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	1aca      	subs	r2, r1, r3
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	f040 8084 	bne.w	8008cdc <send_CAN_data+0x304>
        uint16_t val_g_x = imu.X_G_axis;
 8008bd4:	4b38      	ldr	r3, [pc, #224]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008bd6:	edd3 7a00 	vldr	s15, [r3]
 8008bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bde:	ee17 3a90 	vmov	r3, s15
 8008be2:	81fb      	strh	r3, [r7, #14]
        uint16_t val_g_y = imu.Y_G_axis;
 8008be4:	4b34      	ldr	r3, [pc, #208]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8008bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bee:	ee17 3a90 	vmov	r3, s15
 8008bf2:	81bb      	strh	r3, [r7, #12]

        can.dataTx[0] = 0x03;
 8008bf4:	4b2d      	ldr	r3, [pc, #180]	; (8008cac <send_CAN_data+0x2d4>)
 8008bf6:	2203      	movs	r2, #3
 8008bf8:	721a      	strb	r2, [r3, #8]
        can.dataTx[1] = val_g_x / 256;
 8008bfa:	89fb      	ldrh	r3, [r7, #14]
 8008bfc:	0a1b      	lsrs	r3, r3, #8
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	4b2a      	ldr	r3, [pc, #168]	; (8008cac <send_CAN_data+0x2d4>)
 8008c04:	725a      	strb	r2, [r3, #9]
        can.dataTx[2] = val_g_x % 256;
 8008c06:	89fb      	ldrh	r3, [r7, #14]
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	4b28      	ldr	r3, [pc, #160]	; (8008cac <send_CAN_data+0x2d4>)
 8008c0c:	729a      	strb	r2, [r3, #10]
        can.dataTx[3] = imu.x_g_sign;
 8008c0e:	4b2a      	ldr	r3, [pc, #168]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008c10:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	4b25      	ldr	r3, [pc, #148]	; (8008cac <send_CAN_data+0x2d4>)
 8008c18:	72da      	strb	r2, [r3, #11]
        can.dataTx[4] = val_g_y / 256;
 8008c1a:	89bb      	ldrh	r3, [r7, #12]
 8008c1c:	0a1b      	lsrs	r3, r3, #8
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	b2da      	uxtb	r2, r3
 8008c22:	4b22      	ldr	r3, [pc, #136]	; (8008cac <send_CAN_data+0x2d4>)
 8008c24:	731a      	strb	r2, [r3, #12]
        can.dataTx[5] = val_g_y % 256;
 8008c26:	89bb      	ldrh	r3, [r7, #12]
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	4b20      	ldr	r3, [pc, #128]	; (8008cac <send_CAN_data+0x2d4>)
 8008c2c:	735a      	strb	r2, [r3, #13]
        can.dataTx[6] = imu.x_g_sign;
 8008c2e:	4b22      	ldr	r3, [pc, #136]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008c30:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	4b1d      	ldr	r3, [pc, #116]	; (8008cac <send_CAN_data+0x2d4>)
 8008c38:	739a      	strb	r2, [r3, #14]
        can.dataTx[7] = 0;
 8008c3a:	4b1c      	ldr	r3, [pc, #112]	; (8008cac <send_CAN_data+0x2d4>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	73da      	strb	r2, [r3, #15]
        can.id = 0xC0;
 8008c40:	4b1a      	ldr	r3, [pc, #104]	; (8008cac <send_CAN_data+0x2d4>)
 8008c42:	22c0      	movs	r2, #192	; 0xc0
 8008c44:	601a      	str	r2, [r3, #0]
        can.size = 8;
 8008c46:	4b19      	ldr	r3, [pc, #100]	; (8008cac <send_CAN_data+0x2d4>)
 8008c48:	2208      	movs	r2, #8
 8008c4a:	605a      	str	r2, [r3, #4]
        CAN_Send(&can);
 8008c4c:	4817      	ldr	r0, [pc, #92]	; (8008cac <send_CAN_data+0x2d4>)
 8008c4e:	f7fd fdbb 	bl	80067c8 <CAN_Send>


        uint16_t val_g_z = imu.Z_G_axis;
 8008c52:	4b19      	ldr	r3, [pc, #100]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008c54:	edd3 7a02 	vldr	s15, [r3, #8]
 8008c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c5c:	ee17 3a90 	vmov	r3, s15
 8008c60:	817b      	strh	r3, [r7, #10]

        can.dataTx[0] = 0x04;
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <send_CAN_data+0x2d4>)
 8008c64:	2204      	movs	r2, #4
 8008c66:	721a      	strb	r2, [r3, #8]
        can.dataTx[1] = val_g_z / 256;
 8008c68:	897b      	ldrh	r3, [r7, #10]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <send_CAN_data+0x2d4>)
 8008c72:	725a      	strb	r2, [r3, #9]
        can.dataTx[2] = val_g_z % 256;
 8008c74:	897b      	ldrh	r3, [r7, #10]
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	4b0c      	ldr	r3, [pc, #48]	; (8008cac <send_CAN_data+0x2d4>)
 8008c7a:	729a      	strb	r2, [r3, #10]
        can.dataTx[3] = imu.z_g_sign;
 8008c7c:	4b0e      	ldr	r3, [pc, #56]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008c7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	4b09      	ldr	r3, [pc, #36]	; (8008cac <send_CAN_data+0x2d4>)
 8008c86:	72da      	strb	r2, [r3, #11]
        can.dataTx[4] = 0;
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <send_CAN_data+0x2d4>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	731a      	strb	r2, [r3, #12]
        can.dataTx[5] = 0;
 8008c8e:	4b07      	ldr	r3, [pc, #28]	; (8008cac <send_CAN_data+0x2d4>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	735a      	strb	r2, [r3, #13]
        can.dataTx[6] = 0;
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <send_CAN_data+0x2d4>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	739a      	strb	r2, [r3, #14]
        can.dataTx[7] = imu.error_flag;
 8008c9a:	4b07      	ldr	r3, [pc, #28]	; (8008cb8 <send_CAN_data+0x2e0>)
 8008c9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8008ca0:	e00e      	b.n	8008cc0 <send_CAN_data+0x2e8>
 8008ca2:	bf00      	nop
 8008ca4:	51eb851f 	.word	0x51eb851f
 8008ca8:	20000878 	.word	0x20000878
 8008cac:	20000c58 	.word	0x20000c58
 8008cb0:	10624dd3 	.word	0x10624dd3
 8008cb4:	cccccccd 	.word	0xcccccccd
 8008cb8:	20000430 	.word	0x20000430
 8008cbc:	47000000 	.word	0x47000000
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <send_CAN_data+0x380>)
 8008cc4:	73da      	strb	r2, [r3, #15]
        can.id = 0xC0;
 8008cc6:	4b24      	ldr	r3, [pc, #144]	; (8008d58 <send_CAN_data+0x380>)
 8008cc8:	22c0      	movs	r2, #192	; 0xc0
 8008cca:	601a      	str	r2, [r3, #0]
        can.size = 8;
 8008ccc:	4b22      	ldr	r3, [pc, #136]	; (8008d58 <send_CAN_data+0x380>)
 8008cce:	2208      	movs	r2, #8
 8008cd0:	605a      	str	r2, [r3, #4]
        CAN_Send(&can);
 8008cd2:	4821      	ldr	r0, [pc, #132]	; (8008d58 <send_CAN_data+0x380>)
 8008cd4:	f7fd fd78 	bl	80067c8 <CAN_Send>

        sent_flag = 4;
 8008cd8:	2304      	movs	r3, #4
 8008cda:	61fb      	str	r3, [r7, #28]
    }

    millis += 5;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3305      	adds	r3, #5
 8008ce0:	607b      	str	r3, [r7, #4]

    //--------------------SEND Steer--------------------//
    if(millis % 25 == 0){
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	4b1d      	ldr	r3, [pc, #116]	; (8008d5c <send_CAN_data+0x384>)
 8008ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8008cea:	08da      	lsrs	r2, r3, #3
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009a      	lsls	r2, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	1aca      	subs	r2, r1, r3
 8008cf8:	2a00      	cmp	r2, #0
 8008cfa:	d128      	bne.n	8008d4e <send_CAN_data+0x376>
        if(calibration_flag == 0){
 8008cfc:	4b18      	ldr	r3, [pc, #96]	; (8008d60 <send_CAN_data+0x388>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d124      	bne.n	8008d4e <send_CAN_data+0x376>
            can.dataTx[0] = 2;
 8008d04:	4b14      	ldr	r3, [pc, #80]	; (8008d58 <send_CAN_data+0x380>)
 8008d06:	2202      	movs	r2, #2
 8008d08:	721a      	strb	r2, [r3, #8]
            can.dataTx[1] = pot_2.val_100;
 8008d0a:	4b16      	ldr	r3, [pc, #88]	; (8008d64 <send_CAN_data+0x38c>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <send_CAN_data+0x380>)
 8008d12:	725a      	strb	r2, [r3, #9]
            can.dataTx[2] = 0;
 8008d14:	4b10      	ldr	r3, [pc, #64]	; (8008d58 <send_CAN_data+0x380>)
 8008d16:	2200      	movs	r2, #0
 8008d18:	729a      	strb	r2, [r3, #10]
            can.dataTx[3] = 0;
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	; (8008d58 <send_CAN_data+0x380>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	72da      	strb	r2, [r3, #11]
            can.dataTx[4] = 0;
 8008d20:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <send_CAN_data+0x380>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	731a      	strb	r2, [r3, #12]
            can.dataTx[5] = 0;
 8008d26:	4b0c      	ldr	r3, [pc, #48]	; (8008d58 <send_CAN_data+0x380>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	735a      	strb	r2, [r3, #13]
            can.dataTx[6] = 0;
 8008d2c:	4b0a      	ldr	r3, [pc, #40]	; (8008d58 <send_CAN_data+0x380>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	739a      	strb	r2, [r3, #14]
            can.dataTx[7] = 0;
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <send_CAN_data+0x380>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	73da      	strb	r2, [r3, #15]
            can.id = 0xC0;
 8008d38:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <send_CAN_data+0x380>)
 8008d3a:	22c0      	movs	r2, #192	; 0xc0
 8008d3c:	601a      	str	r2, [r3, #0]
            can.size = 8;
 8008d3e:	4b06      	ldr	r3, [pc, #24]	; (8008d58 <send_CAN_data+0x380>)
 8008d40:	2208      	movs	r2, #8
 8008d42:	605a      	str	r2, [r3, #4]
            CAN_Send(&can);
 8008d44:	4804      	ldr	r0, [pc, #16]	; (8008d58 <send_CAN_data+0x380>)
 8008d46:	f7fd fd3f 	bl	80067c8 <CAN_Send>

            sent_flag = 5;
 8008d4a:	2305      	movs	r3, #5
 8008d4c:	61fb      	str	r3, [r7, #28]
        }
    }

    return sent_flag;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3724      	adds	r7, #36	; 0x24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd90      	pop	{r4, r7, pc}
 8008d58:	20000c58 	.word	0x20000c58
 8008d5c:	51eb851f 	.word	0x51eb851f
 8008d60:	20000404 	.word	0x20000404
 8008d64:	20000418 	.word	0x20000418

08008d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    while(1)
    {
    	HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 8008d6c:	230a      	movs	r3, #10
 8008d6e:	220f      	movs	r2, #15
 8008d70:	4905      	ldr	r1, [pc, #20]	; (8008d88 <Error_Handler+0x20>)
 8008d72:	4806      	ldr	r0, [pc, #24]	; (8008d8c <Error_Handler+0x24>)
 8008d74:	f7fc fba6 	bl	80054c4 <HAL_UART_Transmit>
    	//HAL_UART_Transmit(&huart2, (uint8_t *)file, strlen(file), 10);
    	HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, 10);
 8008d78:	230a      	movs	r3, #10
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	4904      	ldr	r1, [pc, #16]	; (8008d90 <Error_Handler+0x28>)
 8008d7e:	4803      	ldr	r0, [pc, #12]	; (8008d8c <Error_Handler+0x24>)
 8008d80:	f7fc fba0 	bl	80054c4 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart2, (uint8_t *)"Error on file: ", strlen("Error on file: "), 10);
 8008d84:	e7f2      	b.n	8008d6c <Error_Handler+0x4>
 8008d86:	bf00      	nop
 8008d88:	0800ba18 	.word	0x0800ba18
 8008d8c:	2000110c 	.word	0x2000110c
 8008d90:	0800ba28 	.word	0x0800ba28

08008d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	4b10      	ldr	r3, [pc, #64]	; (8008de0 <HAL_MspInit+0x4c>)
 8008da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008da2:	4a0f      	ldr	r2, [pc, #60]	; (8008de0 <HAL_MspInit+0x4c>)
 8008da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008da8:	6453      	str	r3, [r2, #68]	; 0x44
 8008daa:	4b0d      	ldr	r3, [pc, #52]	; (8008de0 <HAL_MspInit+0x4c>)
 8008dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008db2:	607b      	str	r3, [r7, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008db6:	2300      	movs	r3, #0
 8008db8:	603b      	str	r3, [r7, #0]
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <HAL_MspInit+0x4c>)
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	4a08      	ldr	r2, [pc, #32]	; (8008de0 <HAL_MspInit+0x4c>)
 8008dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8008dc6:	4b06      	ldr	r3, [pc, #24]	; (8008de0 <HAL_MspInit+0x4c>)
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008dd2:	bf00      	nop
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40023800 	.word	0x40023800

08008de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b08a      	sub	sp, #40	; 0x28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dec:	f107 0314 	add.w	r3, r7, #20
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	605a      	str	r2, [r3, #4]
 8008df6:	609a      	str	r2, [r3, #8]
 8008df8:	60da      	str	r2, [r3, #12]
 8008dfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a2e      	ldr	r2, [pc, #184]	; (8008ebc <HAL_ADC_MspInit+0xd8>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d156      	bne.n	8008eb4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008e06:	2300      	movs	r3, #0
 8008e08:	613b      	str	r3, [r7, #16]
 8008e0a:	4b2d      	ldr	r3, [pc, #180]	; (8008ec0 <HAL_ADC_MspInit+0xdc>)
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0e:	4a2c      	ldr	r2, [pc, #176]	; (8008ec0 <HAL_ADC_MspInit+0xdc>)
 8008e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e14:	6453      	str	r3, [r2, #68]	; 0x44
 8008e16:	4b2a      	ldr	r3, [pc, #168]	; (8008ec0 <HAL_ADC_MspInit+0xdc>)
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	4b26      	ldr	r3, [pc, #152]	; (8008ec0 <HAL_ADC_MspInit+0xdc>)
 8008e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e2a:	4a25      	ldr	r2, [pc, #148]	; (8008ec0 <HAL_ADC_MspInit+0xdc>)
 8008e2c:	f043 0302 	orr.w	r3, r3, #2
 8008e30:	6313      	str	r3, [r2, #48]	; 0x30
 8008e32:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <HAL_ADC_MspInit+0xdc>)
 8008e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e42:	2303      	movs	r3, #3
 8008e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e4a:	f107 0314 	add.w	r3, r7, #20
 8008e4e:	4619      	mov	r1, r3
 8008e50:	481c      	ldr	r0, [pc, #112]	; (8008ec4 <HAL_ADC_MspInit+0xe0>)
 8008e52:	f7fa fa0d 	bl	8003270 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008e56:	4b1c      	ldr	r3, [pc, #112]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e58:	4a1c      	ldr	r2, [pc, #112]	; (8008ecc <HAL_ADC_MspInit+0xe8>)
 8008e5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008e5c:	4b1a      	ldr	r3, [pc, #104]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e62:	4b19      	ldr	r3, [pc, #100]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e68:	4b17      	ldr	r3, [pc, #92]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008e6e:	4b16      	ldr	r3, [pc, #88]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008e76:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008e7e:	4b12      	ldr	r3, [pc, #72]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8008e86:	4b10      	ldr	r3, [pc, #64]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e88:	2200      	movs	r2, #0
 8008e8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008e92:	4b0d      	ldr	r3, [pc, #52]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008e98:	480b      	ldr	r0, [pc, #44]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008e9a:	f7f9 fe51 	bl	8002b40 <HAL_DMA_Init>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d001      	beq.n	8008ea8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8008ea4:	f7ff ff60 	bl	8008d68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a07      	ldr	r2, [pc, #28]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008eac:	639a      	str	r2, [r3, #56]	; 0x38
 8008eae:	4a06      	ldr	r2, [pc, #24]	; (8008ec8 <HAL_ADC_MspInit+0xe4>)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8008eb4:	bf00      	nop
 8008eb6:	3728      	adds	r7, #40	; 0x28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	40012000 	.word	0x40012000
 8008ec0:	40023800 	.word	0x40023800
 8008ec4:	40020400 	.word	0x40020400
 8008ec8:	20000fcc 	.word	0x20000fcc
 8008ecc:	40026410 	.word	0x40026410

08008ed0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b08a      	sub	sp, #40	; 0x28
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed8:	f107 0314 	add.w	r3, r7, #20
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	60da      	str	r2, [r3, #12]
 8008ee6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a22      	ldr	r2, [pc, #136]	; (8008f78 <HAL_CAN_MspInit+0xa8>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d13d      	bne.n	8008f6e <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	613b      	str	r3, [r7, #16]
 8008ef6:	4b21      	ldr	r3, [pc, #132]	; (8008f7c <HAL_CAN_MspInit+0xac>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	4a20      	ldr	r2, [pc, #128]	; (8008f7c <HAL_CAN_MspInit+0xac>)
 8008efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008f00:	6413      	str	r3, [r2, #64]	; 0x40
 8008f02:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <HAL_CAN_MspInit+0xac>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f0a:	613b      	str	r3, [r7, #16]
 8008f0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	4b1a      	ldr	r3, [pc, #104]	; (8008f7c <HAL_CAN_MspInit+0xac>)
 8008f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f16:	4a19      	ldr	r2, [pc, #100]	; (8008f7c <HAL_CAN_MspInit+0xac>)
 8008f18:	f043 0301 	orr.w	r3, r3, #1
 8008f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008f1e:	4b17      	ldr	r3, [pc, #92]	; (8008f7c <HAL_CAN_MspInit+0xac>)
 8008f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f30:	2302      	movs	r3, #2
 8008f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008f34:	2301      	movs	r3, #1
 8008f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008f3c:	2309      	movs	r3, #9
 8008f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f40:	f107 0314 	add.w	r3, r7, #20
 8008f44:	4619      	mov	r1, r3
 8008f46:	480e      	ldr	r0, [pc, #56]	; (8008f80 <HAL_CAN_MspInit+0xb0>)
 8008f48:	f7fa f992 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f52:	2302      	movs	r3, #2
 8008f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f56:	2300      	movs	r3, #0
 8008f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008f5e:	2309      	movs	r3, #9
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f62:	f107 0314 	add.w	r3, r7, #20
 8008f66:	4619      	mov	r1, r3
 8008f68:	4805      	ldr	r0, [pc, #20]	; (8008f80 <HAL_CAN_MspInit+0xb0>)
 8008f6a:	f7fa f981 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008f6e:	bf00      	nop
 8008f70:	3728      	adds	r7, #40	; 0x28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	40006400 	.word	0x40006400
 8008f7c:	40023800 	.word	0x40023800
 8008f80:	40020000 	.word	0x40020000

08008f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08a      	sub	sp, #40	; 0x28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f8c:	f107 0314 	add.w	r3, r7, #20
 8008f90:	2200      	movs	r2, #0
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	605a      	str	r2, [r3, #4]
 8008f96:	609a      	str	r2, [r3, #8]
 8008f98:	60da      	str	r2, [r3, #12]
 8008f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a19      	ldr	r2, [pc, #100]	; (8009008 <HAL_SPI_MspInit+0x84>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d12b      	bne.n	8008ffe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	4b18      	ldr	r3, [pc, #96]	; (800900c <HAL_SPI_MspInit+0x88>)
 8008fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fae:	4a17      	ldr	r2, [pc, #92]	; (800900c <HAL_SPI_MspInit+0x88>)
 8008fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8008fb6:	4b15      	ldr	r3, [pc, #84]	; (800900c <HAL_SPI_MspInit+0x88>)
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fbe:	613b      	str	r3, [r7, #16]
 8008fc0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	60fb      	str	r3, [r7, #12]
 8008fc6:	4b11      	ldr	r3, [pc, #68]	; (800900c <HAL_SPI_MspInit+0x88>)
 8008fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fca:	4a10      	ldr	r2, [pc, #64]	; (800900c <HAL_SPI_MspInit+0x88>)
 8008fcc:	f043 0301 	orr.w	r3, r3, #1
 8008fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8008fd2:	4b0e      	ldr	r3, [pc, #56]	; (800900c <HAL_SPI_MspInit+0x88>)
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008fde:	23e0      	movs	r3, #224	; 0xe0
 8008fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fea:	2303      	movs	r3, #3
 8008fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008fee:	2305      	movs	r3, #5
 8008ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ff2:	f107 0314 	add.w	r3, r7, #20
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4805      	ldr	r0, [pc, #20]	; (8009010 <HAL_SPI_MspInit+0x8c>)
 8008ffa:	f7fa f939 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008ffe:	bf00      	nop
 8009000:	3728      	adds	r7, #40	; 0x28
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	40013000 	.word	0x40013000
 800900c:	40023800 	.word	0x40023800
 8009010:	40020000 	.word	0x40020000

08009014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b08a      	sub	sp, #40	; 0x28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009024:	d10e      	bne.n	8009044 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009026:	2300      	movs	r3, #0
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
 800902a:	4b52      	ldr	r3, [pc, #328]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	4a51      	ldr	r2, [pc, #324]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009030:	f043 0301 	orr.w	r3, r3, #1
 8009034:	6413      	str	r3, [r2, #64]	; 0x40
 8009036:	4b4f      	ldr	r3, [pc, #316]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	627b      	str	r3, [r7, #36]	; 0x24
 8009040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8009042:	e092      	b.n	800916a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM3)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a4b      	ldr	r2, [pc, #300]	; (8009178 <HAL_TIM_Base_MspInit+0x164>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d10e      	bne.n	800906c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800904e:	2300      	movs	r3, #0
 8009050:	623b      	str	r3, [r7, #32]
 8009052:	4b48      	ldr	r3, [pc, #288]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	4a47      	ldr	r2, [pc, #284]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009058:	f043 0302 	orr.w	r3, r3, #2
 800905c:	6413      	str	r3, [r2, #64]	; 0x40
 800905e:	4b45      	ldr	r3, [pc, #276]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009062:	f003 0302 	and.w	r3, r3, #2
 8009066:	623b      	str	r3, [r7, #32]
 8009068:	6a3b      	ldr	r3, [r7, #32]
}
 800906a:	e07e      	b.n	800916a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM4)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a42      	ldr	r2, [pc, #264]	; (800917c <HAL_TIM_Base_MspInit+0x168>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d116      	bne.n	80090a4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009076:	2300      	movs	r3, #0
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	4b3e      	ldr	r3, [pc, #248]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	4a3d      	ldr	r2, [pc, #244]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009080:	f043 0304 	orr.w	r3, r3, #4
 8009084:	6413      	str	r3, [r2, #64]	; 0x40
 8009086:	4b3b      	ldr	r3, [pc, #236]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908a:	f003 0304 	and.w	r3, r3, #4
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	201e      	movs	r0, #30
 8009098:	f7f9 fd1b 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800909c:	201e      	movs	r0, #30
 800909e:	f7f9 fd34 	bl	8002b0a <HAL_NVIC_EnableIRQ>
}
 80090a2:	e062      	b.n	800916a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM5)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a35      	ldr	r2, [pc, #212]	; (8009180 <HAL_TIM_Base_MspInit+0x16c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d10e      	bne.n	80090cc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80090ae:	2300      	movs	r3, #0
 80090b0:	61bb      	str	r3, [r7, #24]
 80090b2:	4b30      	ldr	r3, [pc, #192]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	4a2f      	ldr	r2, [pc, #188]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 80090b8:	f043 0308 	orr.w	r3, r3, #8
 80090bc:	6413      	str	r3, [r2, #64]	; 0x40
 80090be:	4b2d      	ldr	r3, [pc, #180]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 80090c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	61bb      	str	r3, [r7, #24]
 80090c8:	69bb      	ldr	r3, [r7, #24]
}
 80090ca:	e04e      	b.n	800916a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM6)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a2c      	ldr	r2, [pc, #176]	; (8009184 <HAL_TIM_Base_MspInit+0x170>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d10e      	bne.n	80090f4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	4b26      	ldr	r3, [pc, #152]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	4a25      	ldr	r2, [pc, #148]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 80090e0:	f043 0310 	orr.w	r3, r3, #16
 80090e4:	6413      	str	r3, [r2, #64]	; 0x40
 80090e6:	4b23      	ldr	r3, [pc, #140]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	f003 0310 	and.w	r3, r3, #16
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	697b      	ldr	r3, [r7, #20]
}
 80090f2:	e03a      	b.n	800916a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM7)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a23      	ldr	r2, [pc, #140]	; (8009188 <HAL_TIM_Base_MspInit+0x174>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d10e      	bne.n	800911c <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80090fe:	2300      	movs	r3, #0
 8009100:	613b      	str	r3, [r7, #16]
 8009102:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009108:	f043 0320 	orr.w	r3, r3, #32
 800910c:	6413      	str	r3, [r2, #64]	; 0x40
 800910e:	4b19      	ldr	r3, [pc, #100]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	613b      	str	r3, [r7, #16]
 8009118:	693b      	ldr	r3, [r7, #16]
}
 800911a:	e026      	b.n	800916a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM10)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a1a      	ldr	r2, [pc, #104]	; (800918c <HAL_TIM_Base_MspInit+0x178>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d10e      	bne.n	8009144 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
 800912a:	4b12      	ldr	r3, [pc, #72]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 800912c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912e:	4a11      	ldr	r2, [pc, #68]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009134:	6453      	str	r3, [r2, #68]	; 0x44
 8009136:	4b0f      	ldr	r3, [pc, #60]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	68fb      	ldr	r3, [r7, #12]
}
 8009142:	e012      	b.n	800916a <HAL_TIM_Base_MspInit+0x156>
  else if(htim_base->Instance==TIM11)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a11      	ldr	r2, [pc, #68]	; (8009190 <HAL_TIM_Base_MspInit+0x17c>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d10d      	bne.n	800916a <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800914e:	2300      	movs	r3, #0
 8009150:	60bb      	str	r3, [r7, #8]
 8009152:	4b08      	ldr	r3, [pc, #32]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009156:	4a07      	ldr	r2, [pc, #28]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800915c:	6453      	str	r3, [r2, #68]	; 0x44
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <HAL_TIM_Base_MspInit+0x160>)
 8009160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009162:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009166:	60bb      	str	r3, [r7, #8]
 8009168:	68bb      	ldr	r3, [r7, #8]
}
 800916a:	bf00      	nop
 800916c:	3728      	adds	r7, #40	; 0x28
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	40023800 	.word	0x40023800
 8009178:	40000400 	.word	0x40000400
 800917c:	40000800 	.word	0x40000800
 8009180:	40000c00 	.word	0x40000c00
 8009184:	40001000 	.word	0x40001000
 8009188:	40001400 	.word	0x40001400
 800918c:	40014400 	.word	0x40014400
 8009190:	40014800 	.word	0x40014800

08009194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b08c      	sub	sp, #48	; 0x30
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800919c:	f107 031c 	add.w	r3, r7, #28
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	605a      	str	r2, [r3, #4]
 80091a6:	609a      	str	r2, [r3, #8]
 80091a8:	60da      	str	r2, [r3, #12]
 80091aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a36      	ldr	r2, [pc, #216]	; (800928c <HAL_UART_MspInit+0xf8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d12d      	bne.n	8009212 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80091b6:	2300      	movs	r3, #0
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	4b35      	ldr	r3, [pc, #212]	; (8009290 <HAL_UART_MspInit+0xfc>)
 80091bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091be:	4a34      	ldr	r2, [pc, #208]	; (8009290 <HAL_UART_MspInit+0xfc>)
 80091c0:	f043 0310 	orr.w	r3, r3, #16
 80091c4:	6453      	str	r3, [r2, #68]	; 0x44
 80091c6:	4b32      	ldr	r3, [pc, #200]	; (8009290 <HAL_UART_MspInit+0xfc>)
 80091c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	61bb      	str	r3, [r7, #24]
 80091d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]
 80091d6:	4b2e      	ldr	r3, [pc, #184]	; (8009290 <HAL_UART_MspInit+0xfc>)
 80091d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091da:	4a2d      	ldr	r2, [pc, #180]	; (8009290 <HAL_UART_MspInit+0xfc>)
 80091dc:	f043 0301 	orr.w	r3, r3, #1
 80091e0:	6313      	str	r3, [r2, #48]	; 0x30
 80091e2:	4b2b      	ldr	r3, [pc, #172]	; (8009290 <HAL_UART_MspInit+0xfc>)
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
 80091ec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80091ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80091f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091f4:	2302      	movs	r3, #2
 80091f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80091f8:	2301      	movs	r3, #1
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091fc:	2303      	movs	r3, #3
 80091fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009200:	2307      	movs	r3, #7
 8009202:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009204:	f107 031c 	add.w	r3, r7, #28
 8009208:	4619      	mov	r1, r3
 800920a:	4822      	ldr	r0, [pc, #136]	; (8009294 <HAL_UART_MspInit+0x100>)
 800920c:	f7fa f830 	bl	8003270 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8009210:	e038      	b.n	8009284 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a20      	ldr	r2, [pc, #128]	; (8009298 <HAL_UART_MspInit+0x104>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d133      	bne.n	8009284 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]
 8009220:	4b1b      	ldr	r3, [pc, #108]	; (8009290 <HAL_UART_MspInit+0xfc>)
 8009222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009224:	4a1a      	ldr	r2, [pc, #104]	; (8009290 <HAL_UART_MspInit+0xfc>)
 8009226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800922a:	6413      	str	r3, [r2, #64]	; 0x40
 800922c:	4b18      	ldr	r3, [pc, #96]	; (8009290 <HAL_UART_MspInit+0xfc>)
 800922e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009238:	2300      	movs	r3, #0
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	4b14      	ldr	r3, [pc, #80]	; (8009290 <HAL_UART_MspInit+0xfc>)
 800923e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009240:	4a13      	ldr	r2, [pc, #76]	; (8009290 <HAL_UART_MspInit+0xfc>)
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	6313      	str	r3, [r2, #48]	; 0x30
 8009248:	4b11      	ldr	r3, [pc, #68]	; (8009290 <HAL_UART_MspInit+0xfc>)
 800924a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	60fb      	str	r3, [r7, #12]
 8009252:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009254:	230c      	movs	r3, #12
 8009256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009258:	2302      	movs	r3, #2
 800925a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800925c:	2301      	movs	r3, #1
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009260:	2303      	movs	r3, #3
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009264:	2307      	movs	r3, #7
 8009266:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009268:	f107 031c 	add.w	r3, r7, #28
 800926c:	4619      	mov	r1, r3
 800926e:	4809      	ldr	r0, [pc, #36]	; (8009294 <HAL_UART_MspInit+0x100>)
 8009270:	f7f9 fffe 	bl	8003270 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009274:	2200      	movs	r2, #0
 8009276:	2100      	movs	r1, #0
 8009278:	2026      	movs	r0, #38	; 0x26
 800927a:	f7f9 fc2a 	bl	8002ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800927e:	2026      	movs	r0, #38	; 0x26
 8009280:	f7f9 fc43 	bl	8002b0a <HAL_NVIC_EnableIRQ>
}
 8009284:	bf00      	nop
 8009286:	3730      	adds	r7, #48	; 0x30
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40011000 	.word	0x40011000
 8009290:	40023800 	.word	0x40023800
 8009294:	40020000 	.word	0x40020000
 8009298:	40004400 	.word	0x40004400

0800929c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80092a0:	bf00      	nop
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr

080092aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80092aa:	b480      	push	{r7}
 80092ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80092ae:	e7fe      	b.n	80092ae <HardFault_Handler+0x4>

080092b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80092b4:	e7fe      	b.n	80092b4 <MemManage_Handler+0x4>

080092b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80092b6:	b480      	push	{r7}
 80092b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80092ba:	e7fe      	b.n	80092ba <BusFault_Handler+0x4>

080092bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80092bc:	b480      	push	{r7}
 80092be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80092c0:	e7fe      	b.n	80092c0 <UsageFault_Handler+0x4>

080092c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80092c2:	b480      	push	{r7}
 80092c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80092c6:	bf00      	nop
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80092d0:	b480      	push	{r7}
 80092d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80092d4:	bf00      	nop
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80092de:	b480      	push	{r7}
 80092e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092e2:	bf00      	nop
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092f0:	f7f7 fea6 	bl	8001040 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092f4:	bf00      	nop
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80092fc:	4802      	ldr	r0, [pc, #8]	; (8009308 <ADC_IRQHandler+0x10>)
 80092fe:	f7f7 ff24 	bl	800114a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8009302:	bf00      	nop
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	20000ef4 	.word	0x20000ef4

0800930c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009310:	4802      	ldr	r0, [pc, #8]	; (800931c <CAN1_TX_IRQHandler+0x10>)
 8009312:	f7f9 f8da 	bl	80024ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8009316:	bf00      	nop
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	2000114c 	.word	0x2000114c

08009320 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009324:	4802      	ldr	r0, [pc, #8]	; (8009330 <CAN1_RX0_IRQHandler+0x10>)
 8009326:	f7f9 f8d0 	bl	80024ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800932a:	bf00      	nop
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	2000114c 	.word	0x2000114c

08009334 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009338:	4802      	ldr	r0, [pc, #8]	; (8009344 <CAN1_RX1_IRQHandler+0x10>)
 800933a:	f7f9 f8c6 	bl	80024ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800933e:	bf00      	nop
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	2000114c 	.word	0x2000114c

08009348 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800934c:	4802      	ldr	r0, [pc, #8]	; (8009358 <CAN1_SCE_IRQHandler+0x10>)
 800934e:	f7f9 f8bc 	bl	80024ca <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8009352:	bf00      	nop
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	2000114c 	.word	0x2000114c

0800935c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8009360:	4802      	ldr	r0, [pc, #8]	; (800936c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009362:	f7fb fc20 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009366:	bf00      	nop
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000e08 	.word	0x20000e08

08009370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009374:	4802      	ldr	r0, [pc, #8]	; (8009380 <TIM2_IRQHandler+0x10>)
 8009376:	f7fb fc16 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800937a:	bf00      	nop
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	200010cc 	.word	0x200010cc

08009384 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009388:	4802      	ldr	r0, [pc, #8]	; (8009394 <TIM4_IRQHandler+0x10>)
 800938a:	f7fb fc0c 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800938e:	bf00      	nop
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20000d64 	.word	0x20000d64

08009398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800939c:	4802      	ldr	r0, [pc, #8]	; (80093a8 <USART1_IRQHandler+0x10>)
 800939e:	f7fc f9c5 	bl	800572c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80093a2:	bf00      	nop
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	20000f48 	.word	0x20000f48

080093ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80093b0:	4802      	ldr	r0, [pc, #8]	; (80093bc <USART2_IRQHandler+0x10>)
 80093b2:	f7fc f9bb 	bl	800572c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80093b6:	bf00      	nop
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	2000110c 	.word	0x2000110c

080093c0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80093c4:	4802      	ldr	r0, [pc, #8]	; (80093d0 <TIM5_IRQHandler+0x10>)
 80093c6:	f7fb fbee 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80093ca:	bf00      	nop
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	20000e4c 	.word	0x20000e4c

080093d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80093d8:	4802      	ldr	r0, [pc, #8]	; (80093e4 <TIM6_DAC_IRQHandler+0x10>)
 80093da:	f7fb fbe4 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80093de:	bf00      	nop
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	2000102c 	.word	0x2000102c

080093e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80093ec:	4802      	ldr	r0, [pc, #8]	; (80093f8 <TIM7_IRQHandler+0x10>)
 80093ee:	f7fb fbda 	bl	8004ba6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80093f2:	bf00      	nop
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20001184 	.word	0x20001184

080093fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009400:	4802      	ldr	r0, [pc, #8]	; (800940c <DMA2_Stream0_IRQHandler+0x10>)
 8009402:	f7f9 fccd 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009406:	bf00      	nop
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000fcc 	.word	0x20000fcc

08009410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009414:	4b16      	ldr	r3, [pc, #88]	; (8009470 <SystemInit+0x60>)
 8009416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941a:	4a15      	ldr	r2, [pc, #84]	; (8009470 <SystemInit+0x60>)
 800941c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009424:	4b13      	ldr	r3, [pc, #76]	; (8009474 <SystemInit+0x64>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a12      	ldr	r2, [pc, #72]	; (8009474 <SystemInit+0x64>)
 800942a:	f043 0301 	orr.w	r3, r3, #1
 800942e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009430:	4b10      	ldr	r3, [pc, #64]	; (8009474 <SystemInit+0x64>)
 8009432:	2200      	movs	r2, #0
 8009434:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <SystemInit+0x64>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a0e      	ldr	r2, [pc, #56]	; (8009474 <SystemInit+0x64>)
 800943c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009444:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009446:	4b0b      	ldr	r3, [pc, #44]	; (8009474 <SystemInit+0x64>)
 8009448:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <SystemInit+0x68>)
 800944a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800944c:	4b09      	ldr	r3, [pc, #36]	; (8009474 <SystemInit+0x64>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a08      	ldr	r2, [pc, #32]	; (8009474 <SystemInit+0x64>)
 8009452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009456:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <SystemInit+0x64>)
 800945a:	2200      	movs	r2, #0
 800945c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800945e:	4b04      	ldr	r3, [pc, #16]	; (8009470 <SystemInit+0x60>)
 8009460:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009464:	609a      	str	r2, [r3, #8]
#endif
}
 8009466:	bf00      	nop
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	e000ed00 	.word	0xe000ed00
 8009474:	40023800 	.word	0x40023800
 8009478:	24003010 	.word	0x24003010

0800947c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800947c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80094b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009480:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009482:	e003      	b.n	800948c <LoopCopyDataInit>

08009484 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009484:	4b0c      	ldr	r3, [pc, #48]	; (80094b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009486:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009488:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800948a:	3104      	adds	r1, #4

0800948c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800948c:	480b      	ldr	r0, [pc, #44]	; (80094bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009490:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009492:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009494:	d3f6      	bcc.n	8009484 <CopyDataInit>
  ldr  r2, =_sbss
 8009496:	4a0b      	ldr	r2, [pc, #44]	; (80094c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009498:	e002      	b.n	80094a0 <LoopFillZerobss>

0800949a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800949a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800949c:	f842 3b04 	str.w	r3, [r2], #4

080094a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80094a0:	4b09      	ldr	r3, [pc, #36]	; (80094c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80094a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80094a4:	d3f9      	bcc.n	800949a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80094a6:	f7ff ffb3 	bl	8009410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80094aa:	f000 f813 	bl	80094d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80094ae:	f7fe fadb 	bl	8007a68 <main>
  bx  lr    
 80094b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80094b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80094b8:	0800bcf8 	.word	0x0800bcf8
  ldr  r0, =_sdata
 80094bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80094c0:	200002f8 	.word	0x200002f8
  ldr  r2, =_sbss
 80094c4:	200002f8 	.word	0x200002f8
  ldr  r3, = _ebss
 80094c8:	200011cc 	.word	0x200011cc

080094cc <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80094cc:	e7fe      	b.n	80094cc <CAN2_RX0_IRQHandler>

080094ce <atof>:
 80094ce:	2100      	movs	r1, #0
 80094d0:	f000 bf2e 	b.w	800a330 <strtod>

080094d4 <__libc_init_array>:
 80094d4:	b570      	push	{r4, r5, r6, lr}
 80094d6:	4e0d      	ldr	r6, [pc, #52]	; (800950c <__libc_init_array+0x38>)
 80094d8:	4c0d      	ldr	r4, [pc, #52]	; (8009510 <__libc_init_array+0x3c>)
 80094da:	1ba4      	subs	r4, r4, r6
 80094dc:	10a4      	asrs	r4, r4, #2
 80094de:	2500      	movs	r5, #0
 80094e0:	42a5      	cmp	r5, r4
 80094e2:	d109      	bne.n	80094f8 <__libc_init_array+0x24>
 80094e4:	4e0b      	ldr	r6, [pc, #44]	; (8009514 <__libc_init_array+0x40>)
 80094e6:	4c0c      	ldr	r4, [pc, #48]	; (8009518 <__libc_init_array+0x44>)
 80094e8:	f002 fa22 	bl	800b930 <_init>
 80094ec:	1ba4      	subs	r4, r4, r6
 80094ee:	10a4      	asrs	r4, r4, #2
 80094f0:	2500      	movs	r5, #0
 80094f2:	42a5      	cmp	r5, r4
 80094f4:	d105      	bne.n	8009502 <__libc_init_array+0x2e>
 80094f6:	bd70      	pop	{r4, r5, r6, pc}
 80094f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094fc:	4798      	blx	r3
 80094fe:	3501      	adds	r5, #1
 8009500:	e7ee      	b.n	80094e0 <__libc_init_array+0xc>
 8009502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009506:	4798      	blx	r3
 8009508:	3501      	adds	r5, #1
 800950a:	e7f2      	b.n	80094f2 <__libc_init_array+0x1e>
 800950c:	0800bcf0 	.word	0x0800bcf0
 8009510:	0800bcf0 	.word	0x0800bcf0
 8009514:	0800bcf0 	.word	0x0800bcf0
 8009518:	0800bcf4 	.word	0x0800bcf4

0800951c <malloc>:
 800951c:	4b02      	ldr	r3, [pc, #8]	; (8009528 <malloc+0xc>)
 800951e:	4601      	mov	r1, r0
 8009520:	6818      	ldr	r0, [r3, #0]
 8009522:	f000 b861 	b.w	80095e8 <_malloc_r>
 8009526:	bf00      	nop
 8009528:	20000128 	.word	0x20000128

0800952c <free>:
 800952c:	4b02      	ldr	r3, [pc, #8]	; (8009538 <free+0xc>)
 800952e:	4601      	mov	r1, r0
 8009530:	6818      	ldr	r0, [r3, #0]
 8009532:	f000 b80b 	b.w	800954c <_free_r>
 8009536:	bf00      	nop
 8009538:	20000128 	.word	0x20000128

0800953c <memset>:
 800953c:	4402      	add	r2, r0
 800953e:	4603      	mov	r3, r0
 8009540:	4293      	cmp	r3, r2
 8009542:	d100      	bne.n	8009546 <memset+0xa>
 8009544:	4770      	bx	lr
 8009546:	f803 1b01 	strb.w	r1, [r3], #1
 800954a:	e7f9      	b.n	8009540 <memset+0x4>

0800954c <_free_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4605      	mov	r5, r0
 8009550:	2900      	cmp	r1, #0
 8009552:	d045      	beq.n	80095e0 <_free_r+0x94>
 8009554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009558:	1f0c      	subs	r4, r1, #4
 800955a:	2b00      	cmp	r3, #0
 800955c:	bfb8      	it	lt
 800955e:	18e4      	addlt	r4, r4, r3
 8009560:	f001 fa3f 	bl	800a9e2 <__malloc_lock>
 8009564:	4a1f      	ldr	r2, [pc, #124]	; (80095e4 <_free_r+0x98>)
 8009566:	6813      	ldr	r3, [r2, #0]
 8009568:	4610      	mov	r0, r2
 800956a:	b933      	cbnz	r3, 800957a <_free_r+0x2e>
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	6014      	str	r4, [r2, #0]
 8009570:	4628      	mov	r0, r5
 8009572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009576:	f001 ba35 	b.w	800a9e4 <__malloc_unlock>
 800957a:	42a3      	cmp	r3, r4
 800957c:	d90c      	bls.n	8009598 <_free_r+0x4c>
 800957e:	6821      	ldr	r1, [r4, #0]
 8009580:	1862      	adds	r2, r4, r1
 8009582:	4293      	cmp	r3, r2
 8009584:	bf04      	itt	eq
 8009586:	681a      	ldreq	r2, [r3, #0]
 8009588:	685b      	ldreq	r3, [r3, #4]
 800958a:	6063      	str	r3, [r4, #4]
 800958c:	bf04      	itt	eq
 800958e:	1852      	addeq	r2, r2, r1
 8009590:	6022      	streq	r2, [r4, #0]
 8009592:	6004      	str	r4, [r0, #0]
 8009594:	e7ec      	b.n	8009570 <_free_r+0x24>
 8009596:	4613      	mov	r3, r2
 8009598:	685a      	ldr	r2, [r3, #4]
 800959a:	b10a      	cbz	r2, 80095a0 <_free_r+0x54>
 800959c:	42a2      	cmp	r2, r4
 800959e:	d9fa      	bls.n	8009596 <_free_r+0x4a>
 80095a0:	6819      	ldr	r1, [r3, #0]
 80095a2:	1858      	adds	r0, r3, r1
 80095a4:	42a0      	cmp	r0, r4
 80095a6:	d10b      	bne.n	80095c0 <_free_r+0x74>
 80095a8:	6820      	ldr	r0, [r4, #0]
 80095aa:	4401      	add	r1, r0
 80095ac:	1858      	adds	r0, r3, r1
 80095ae:	4282      	cmp	r2, r0
 80095b0:	6019      	str	r1, [r3, #0]
 80095b2:	d1dd      	bne.n	8009570 <_free_r+0x24>
 80095b4:	6810      	ldr	r0, [r2, #0]
 80095b6:	6852      	ldr	r2, [r2, #4]
 80095b8:	605a      	str	r2, [r3, #4]
 80095ba:	4401      	add	r1, r0
 80095bc:	6019      	str	r1, [r3, #0]
 80095be:	e7d7      	b.n	8009570 <_free_r+0x24>
 80095c0:	d902      	bls.n	80095c8 <_free_r+0x7c>
 80095c2:	230c      	movs	r3, #12
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	e7d3      	b.n	8009570 <_free_r+0x24>
 80095c8:	6820      	ldr	r0, [r4, #0]
 80095ca:	1821      	adds	r1, r4, r0
 80095cc:	428a      	cmp	r2, r1
 80095ce:	bf04      	itt	eq
 80095d0:	6811      	ldreq	r1, [r2, #0]
 80095d2:	6852      	ldreq	r2, [r2, #4]
 80095d4:	6062      	str	r2, [r4, #4]
 80095d6:	bf04      	itt	eq
 80095d8:	1809      	addeq	r1, r1, r0
 80095da:	6021      	streq	r1, [r4, #0]
 80095dc:	605c      	str	r4, [r3, #4]
 80095de:	e7c7      	b.n	8009570 <_free_r+0x24>
 80095e0:	bd38      	pop	{r3, r4, r5, pc}
 80095e2:	bf00      	nop
 80095e4:	20000408 	.word	0x20000408

080095e8 <_malloc_r>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	1ccd      	adds	r5, r1, #3
 80095ec:	f025 0503 	bic.w	r5, r5, #3
 80095f0:	3508      	adds	r5, #8
 80095f2:	2d0c      	cmp	r5, #12
 80095f4:	bf38      	it	cc
 80095f6:	250c      	movcc	r5, #12
 80095f8:	2d00      	cmp	r5, #0
 80095fa:	4606      	mov	r6, r0
 80095fc:	db01      	blt.n	8009602 <_malloc_r+0x1a>
 80095fe:	42a9      	cmp	r1, r5
 8009600:	d903      	bls.n	800960a <_malloc_r+0x22>
 8009602:	230c      	movs	r3, #12
 8009604:	6033      	str	r3, [r6, #0]
 8009606:	2000      	movs	r0, #0
 8009608:	bd70      	pop	{r4, r5, r6, pc}
 800960a:	f001 f9ea 	bl	800a9e2 <__malloc_lock>
 800960e:	4a21      	ldr	r2, [pc, #132]	; (8009694 <_malloc_r+0xac>)
 8009610:	6814      	ldr	r4, [r2, #0]
 8009612:	4621      	mov	r1, r4
 8009614:	b991      	cbnz	r1, 800963c <_malloc_r+0x54>
 8009616:	4c20      	ldr	r4, [pc, #128]	; (8009698 <_malloc_r+0xb0>)
 8009618:	6823      	ldr	r3, [r4, #0]
 800961a:	b91b      	cbnz	r3, 8009624 <_malloc_r+0x3c>
 800961c:	4630      	mov	r0, r6
 800961e:	f000 f83d 	bl	800969c <_sbrk_r>
 8009622:	6020      	str	r0, [r4, #0]
 8009624:	4629      	mov	r1, r5
 8009626:	4630      	mov	r0, r6
 8009628:	f000 f838 	bl	800969c <_sbrk_r>
 800962c:	1c43      	adds	r3, r0, #1
 800962e:	d124      	bne.n	800967a <_malloc_r+0x92>
 8009630:	230c      	movs	r3, #12
 8009632:	6033      	str	r3, [r6, #0]
 8009634:	4630      	mov	r0, r6
 8009636:	f001 f9d5 	bl	800a9e4 <__malloc_unlock>
 800963a:	e7e4      	b.n	8009606 <_malloc_r+0x1e>
 800963c:	680b      	ldr	r3, [r1, #0]
 800963e:	1b5b      	subs	r3, r3, r5
 8009640:	d418      	bmi.n	8009674 <_malloc_r+0x8c>
 8009642:	2b0b      	cmp	r3, #11
 8009644:	d90f      	bls.n	8009666 <_malloc_r+0x7e>
 8009646:	600b      	str	r3, [r1, #0]
 8009648:	50cd      	str	r5, [r1, r3]
 800964a:	18cc      	adds	r4, r1, r3
 800964c:	4630      	mov	r0, r6
 800964e:	f001 f9c9 	bl	800a9e4 <__malloc_unlock>
 8009652:	f104 000b 	add.w	r0, r4, #11
 8009656:	1d23      	adds	r3, r4, #4
 8009658:	f020 0007 	bic.w	r0, r0, #7
 800965c:	1ac3      	subs	r3, r0, r3
 800965e:	d0d3      	beq.n	8009608 <_malloc_r+0x20>
 8009660:	425a      	negs	r2, r3
 8009662:	50e2      	str	r2, [r4, r3]
 8009664:	e7d0      	b.n	8009608 <_malloc_r+0x20>
 8009666:	428c      	cmp	r4, r1
 8009668:	684b      	ldr	r3, [r1, #4]
 800966a:	bf16      	itet	ne
 800966c:	6063      	strne	r3, [r4, #4]
 800966e:	6013      	streq	r3, [r2, #0]
 8009670:	460c      	movne	r4, r1
 8009672:	e7eb      	b.n	800964c <_malloc_r+0x64>
 8009674:	460c      	mov	r4, r1
 8009676:	6849      	ldr	r1, [r1, #4]
 8009678:	e7cc      	b.n	8009614 <_malloc_r+0x2c>
 800967a:	1cc4      	adds	r4, r0, #3
 800967c:	f024 0403 	bic.w	r4, r4, #3
 8009680:	42a0      	cmp	r0, r4
 8009682:	d005      	beq.n	8009690 <_malloc_r+0xa8>
 8009684:	1a21      	subs	r1, r4, r0
 8009686:	4630      	mov	r0, r6
 8009688:	f000 f808 	bl	800969c <_sbrk_r>
 800968c:	3001      	adds	r0, #1
 800968e:	d0cf      	beq.n	8009630 <_malloc_r+0x48>
 8009690:	6025      	str	r5, [r4, #0]
 8009692:	e7db      	b.n	800964c <_malloc_r+0x64>
 8009694:	20000408 	.word	0x20000408
 8009698:	2000040c 	.word	0x2000040c

0800969c <_sbrk_r>:
 800969c:	b538      	push	{r3, r4, r5, lr}
 800969e:	4c06      	ldr	r4, [pc, #24]	; (80096b8 <_sbrk_r+0x1c>)
 80096a0:	2300      	movs	r3, #0
 80096a2:	4605      	mov	r5, r0
 80096a4:	4608      	mov	r0, r1
 80096a6:	6023      	str	r3, [r4, #0]
 80096a8:	f002 f934 	bl	800b914 <_sbrk>
 80096ac:	1c43      	adds	r3, r0, #1
 80096ae:	d102      	bne.n	80096b6 <_sbrk_r+0x1a>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	b103      	cbz	r3, 80096b6 <_sbrk_r+0x1a>
 80096b4:	602b      	str	r3, [r5, #0]
 80096b6:	bd38      	pop	{r3, r4, r5, pc}
 80096b8:	200011c8 	.word	0x200011c8

080096bc <siprintf>:
 80096bc:	b40e      	push	{r1, r2, r3}
 80096be:	b500      	push	{lr}
 80096c0:	b09c      	sub	sp, #112	; 0x70
 80096c2:	ab1d      	add	r3, sp, #116	; 0x74
 80096c4:	9002      	str	r0, [sp, #8]
 80096c6:	9006      	str	r0, [sp, #24]
 80096c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096cc:	4809      	ldr	r0, [pc, #36]	; (80096f4 <siprintf+0x38>)
 80096ce:	9107      	str	r1, [sp, #28]
 80096d0:	9104      	str	r1, [sp, #16]
 80096d2:	4909      	ldr	r1, [pc, #36]	; (80096f8 <siprintf+0x3c>)
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	a902      	add	r1, sp, #8
 80096e0:	f001 fde8 	bl	800b2b4 <_svfiprintf_r>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	b01c      	add	sp, #112	; 0x70
 80096ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f0:	b003      	add	sp, #12
 80096f2:	4770      	bx	lr
 80096f4:	20000128 	.word	0x20000128
 80096f8:	ffff0208 	.word	0xffff0208

080096fc <strcpy>:
 80096fc:	4603      	mov	r3, r0
 80096fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009702:	f803 2b01 	strb.w	r2, [r3], #1
 8009706:	2a00      	cmp	r2, #0
 8009708:	d1f9      	bne.n	80096fe <strcpy+0x2>
 800970a:	4770      	bx	lr

0800970c <sulp>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4604      	mov	r4, r0
 8009710:	460d      	mov	r5, r1
 8009712:	ec45 4b10 	vmov	d0, r4, r5
 8009716:	4616      	mov	r6, r2
 8009718:	f001 fc30 	bl	800af7c <__ulp>
 800971c:	ec51 0b10 	vmov	r0, r1, d0
 8009720:	b17e      	cbz	r6, 8009742 <sulp+0x36>
 8009722:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009726:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800972a:	2b00      	cmp	r3, #0
 800972c:	dd09      	ble.n	8009742 <sulp+0x36>
 800972e:	051b      	lsls	r3, r3, #20
 8009730:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009734:	2400      	movs	r4, #0
 8009736:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800973a:	4622      	mov	r2, r4
 800973c:	462b      	mov	r3, r5
 800973e:	f7f6 ff7b 	bl	8000638 <__aeabi_dmul>
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	0000      	movs	r0, r0
	...

08009748 <_strtod_l>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	461f      	mov	r7, r3
 800974e:	b0a1      	sub	sp, #132	; 0x84
 8009750:	2300      	movs	r3, #0
 8009752:	4681      	mov	r9, r0
 8009754:	4638      	mov	r0, r7
 8009756:	460e      	mov	r6, r1
 8009758:	9217      	str	r2, [sp, #92]	; 0x5c
 800975a:	931c      	str	r3, [sp, #112]	; 0x70
 800975c:	f001 f922 	bl	800a9a4 <__localeconv_l>
 8009760:	4680      	mov	r8, r0
 8009762:	6800      	ldr	r0, [r0, #0]
 8009764:	f7f6 fd54 	bl	8000210 <strlen>
 8009768:	f04f 0a00 	mov.w	sl, #0
 800976c:	4604      	mov	r4, r0
 800976e:	f04f 0b00 	mov.w	fp, #0
 8009772:	961b      	str	r6, [sp, #108]	; 0x6c
 8009774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009776:	781a      	ldrb	r2, [r3, #0]
 8009778:	2a0d      	cmp	r2, #13
 800977a:	d832      	bhi.n	80097e2 <_strtod_l+0x9a>
 800977c:	2a09      	cmp	r2, #9
 800977e:	d236      	bcs.n	80097ee <_strtod_l+0xa6>
 8009780:	2a00      	cmp	r2, #0
 8009782:	d03e      	beq.n	8009802 <_strtod_l+0xba>
 8009784:	2300      	movs	r3, #0
 8009786:	930d      	str	r3, [sp, #52]	; 0x34
 8009788:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800978a:	782b      	ldrb	r3, [r5, #0]
 800978c:	2b30      	cmp	r3, #48	; 0x30
 800978e:	f040 80ac 	bne.w	80098ea <_strtod_l+0x1a2>
 8009792:	786b      	ldrb	r3, [r5, #1]
 8009794:	2b58      	cmp	r3, #88	; 0x58
 8009796:	d001      	beq.n	800979c <_strtod_l+0x54>
 8009798:	2b78      	cmp	r3, #120	; 0x78
 800979a:	d167      	bne.n	800986c <_strtod_l+0x124>
 800979c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	ab1c      	add	r3, sp, #112	; 0x70
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	9702      	str	r7, [sp, #8]
 80097a6:	ab1d      	add	r3, sp, #116	; 0x74
 80097a8:	4a88      	ldr	r2, [pc, #544]	; (80099cc <_strtod_l+0x284>)
 80097aa:	a91b      	add	r1, sp, #108	; 0x6c
 80097ac:	4648      	mov	r0, r9
 80097ae:	f000 fe22 	bl	800a3f6 <__gethex>
 80097b2:	f010 0407 	ands.w	r4, r0, #7
 80097b6:	4606      	mov	r6, r0
 80097b8:	d005      	beq.n	80097c6 <_strtod_l+0x7e>
 80097ba:	2c06      	cmp	r4, #6
 80097bc:	d12b      	bne.n	8009816 <_strtod_l+0xce>
 80097be:	3501      	adds	r5, #1
 80097c0:	2300      	movs	r3, #0
 80097c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80097c4:	930d      	str	r3, [sp, #52]	; 0x34
 80097c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f040 859a 	bne.w	800a302 <_strtod_l+0xbba>
 80097ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097d0:	b1e3      	cbz	r3, 800980c <_strtod_l+0xc4>
 80097d2:	4652      	mov	r2, sl
 80097d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097d8:	ec43 2b10 	vmov	d0, r2, r3
 80097dc:	b021      	add	sp, #132	; 0x84
 80097de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e2:	2a2b      	cmp	r2, #43	; 0x2b
 80097e4:	d015      	beq.n	8009812 <_strtod_l+0xca>
 80097e6:	2a2d      	cmp	r2, #45	; 0x2d
 80097e8:	d004      	beq.n	80097f4 <_strtod_l+0xac>
 80097ea:	2a20      	cmp	r2, #32
 80097ec:	d1ca      	bne.n	8009784 <_strtod_l+0x3c>
 80097ee:	3301      	adds	r3, #1
 80097f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80097f2:	e7bf      	b.n	8009774 <_strtod_l+0x2c>
 80097f4:	2201      	movs	r2, #1
 80097f6:	920d      	str	r2, [sp, #52]	; 0x34
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80097fc:	785b      	ldrb	r3, [r3, #1]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1c2      	bne.n	8009788 <_strtod_l+0x40>
 8009802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009804:	961b      	str	r6, [sp, #108]	; 0x6c
 8009806:	2b00      	cmp	r3, #0
 8009808:	f040 8579 	bne.w	800a2fe <_strtod_l+0xbb6>
 800980c:	4652      	mov	r2, sl
 800980e:	465b      	mov	r3, fp
 8009810:	e7e2      	b.n	80097d8 <_strtod_l+0x90>
 8009812:	2200      	movs	r2, #0
 8009814:	e7ef      	b.n	80097f6 <_strtod_l+0xae>
 8009816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009818:	b13a      	cbz	r2, 800982a <_strtod_l+0xe2>
 800981a:	2135      	movs	r1, #53	; 0x35
 800981c:	a81e      	add	r0, sp, #120	; 0x78
 800981e:	f001 fca5 	bl	800b16c <__copybits>
 8009822:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009824:	4648      	mov	r0, r9
 8009826:	f001 f912 	bl	800aa4e <_Bfree>
 800982a:	3c01      	subs	r4, #1
 800982c:	2c04      	cmp	r4, #4
 800982e:	d806      	bhi.n	800983e <_strtod_l+0xf6>
 8009830:	e8df f004 	tbb	[pc, r4]
 8009834:	1714030a 	.word	0x1714030a
 8009838:	0a          	.byte	0x0a
 8009839:	00          	.byte	0x00
 800983a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800983e:	0730      	lsls	r0, r6, #28
 8009840:	d5c1      	bpl.n	80097c6 <_strtod_l+0x7e>
 8009842:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009846:	e7be      	b.n	80097c6 <_strtod_l+0x7e>
 8009848:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800984c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800984e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009852:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009856:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800985a:	e7f0      	b.n	800983e <_strtod_l+0xf6>
 800985c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80099d0 <_strtod_l+0x288>
 8009860:	e7ed      	b.n	800983e <_strtod_l+0xf6>
 8009862:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009866:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800986a:	e7e8      	b.n	800983e <_strtod_l+0xf6>
 800986c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	921b      	str	r2, [sp, #108]	; 0x6c
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b30      	cmp	r3, #48	; 0x30
 8009876:	d0f9      	beq.n	800986c <_strtod_l+0x124>
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0a4      	beq.n	80097c6 <_strtod_l+0x7e>
 800987c:	2301      	movs	r3, #1
 800987e:	2500      	movs	r5, #0
 8009880:	9306      	str	r3, [sp, #24]
 8009882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009884:	9308      	str	r3, [sp, #32]
 8009886:	9507      	str	r5, [sp, #28]
 8009888:	9505      	str	r5, [sp, #20]
 800988a:	220a      	movs	r2, #10
 800988c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800988e:	7807      	ldrb	r7, [r0, #0]
 8009890:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8009894:	b2d9      	uxtb	r1, r3
 8009896:	2909      	cmp	r1, #9
 8009898:	d929      	bls.n	80098ee <_strtod_l+0x1a6>
 800989a:	4622      	mov	r2, r4
 800989c:	f8d8 1000 	ldr.w	r1, [r8]
 80098a0:	f001 ff88 	bl	800b7b4 <strncmp>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d031      	beq.n	800990c <_strtod_l+0x1c4>
 80098a8:	2000      	movs	r0, #0
 80098aa:	9c05      	ldr	r4, [sp, #20]
 80098ac:	9004      	str	r0, [sp, #16]
 80098ae:	463b      	mov	r3, r7
 80098b0:	4602      	mov	r2, r0
 80098b2:	2b65      	cmp	r3, #101	; 0x65
 80098b4:	d001      	beq.n	80098ba <_strtod_l+0x172>
 80098b6:	2b45      	cmp	r3, #69	; 0x45
 80098b8:	d114      	bne.n	80098e4 <_strtod_l+0x19c>
 80098ba:	b924      	cbnz	r4, 80098c6 <_strtod_l+0x17e>
 80098bc:	b910      	cbnz	r0, 80098c4 <_strtod_l+0x17c>
 80098be:	9b06      	ldr	r3, [sp, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d09e      	beq.n	8009802 <_strtod_l+0xba>
 80098c4:	2400      	movs	r4, #0
 80098c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80098c8:	1c73      	adds	r3, r6, #1
 80098ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80098cc:	7873      	ldrb	r3, [r6, #1]
 80098ce:	2b2b      	cmp	r3, #43	; 0x2b
 80098d0:	d078      	beq.n	80099c4 <_strtod_l+0x27c>
 80098d2:	2b2d      	cmp	r3, #45	; 0x2d
 80098d4:	d070      	beq.n	80099b8 <_strtod_l+0x270>
 80098d6:	f04f 0c00 	mov.w	ip, #0
 80098da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80098de:	2f09      	cmp	r7, #9
 80098e0:	d97c      	bls.n	80099dc <_strtod_l+0x294>
 80098e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80098e4:	f04f 0e00 	mov.w	lr, #0
 80098e8:	e09a      	b.n	8009a20 <_strtod_l+0x2d8>
 80098ea:	2300      	movs	r3, #0
 80098ec:	e7c7      	b.n	800987e <_strtod_l+0x136>
 80098ee:	9905      	ldr	r1, [sp, #20]
 80098f0:	2908      	cmp	r1, #8
 80098f2:	bfdd      	ittte	le
 80098f4:	9907      	ldrle	r1, [sp, #28]
 80098f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80098fa:	9307      	strle	r3, [sp, #28]
 80098fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009900:	9b05      	ldr	r3, [sp, #20]
 8009902:	3001      	adds	r0, #1
 8009904:	3301      	adds	r3, #1
 8009906:	9305      	str	r3, [sp, #20]
 8009908:	901b      	str	r0, [sp, #108]	; 0x6c
 800990a:	e7bf      	b.n	800988c <_strtod_l+0x144>
 800990c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800990e:	191a      	adds	r2, r3, r4
 8009910:	921b      	str	r2, [sp, #108]	; 0x6c
 8009912:	9a05      	ldr	r2, [sp, #20]
 8009914:	5d1b      	ldrb	r3, [r3, r4]
 8009916:	2a00      	cmp	r2, #0
 8009918:	d037      	beq.n	800998a <_strtod_l+0x242>
 800991a:	9c05      	ldr	r4, [sp, #20]
 800991c:	4602      	mov	r2, r0
 800991e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009922:	2909      	cmp	r1, #9
 8009924:	d913      	bls.n	800994e <_strtod_l+0x206>
 8009926:	2101      	movs	r1, #1
 8009928:	9104      	str	r1, [sp, #16]
 800992a:	e7c2      	b.n	80098b2 <_strtod_l+0x16a>
 800992c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800992e:	1c5a      	adds	r2, r3, #1
 8009930:	921b      	str	r2, [sp, #108]	; 0x6c
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	3001      	adds	r0, #1
 8009936:	2b30      	cmp	r3, #48	; 0x30
 8009938:	d0f8      	beq.n	800992c <_strtod_l+0x1e4>
 800993a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800993e:	2a08      	cmp	r2, #8
 8009940:	f200 84e4 	bhi.w	800a30c <_strtod_l+0xbc4>
 8009944:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009946:	9208      	str	r2, [sp, #32]
 8009948:	4602      	mov	r2, r0
 800994a:	2000      	movs	r0, #0
 800994c:	4604      	mov	r4, r0
 800994e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8009952:	f100 0101 	add.w	r1, r0, #1
 8009956:	d012      	beq.n	800997e <_strtod_l+0x236>
 8009958:	440a      	add	r2, r1
 800995a:	eb00 0c04 	add.w	ip, r0, r4
 800995e:	4621      	mov	r1, r4
 8009960:	270a      	movs	r7, #10
 8009962:	458c      	cmp	ip, r1
 8009964:	d113      	bne.n	800998e <_strtod_l+0x246>
 8009966:	1821      	adds	r1, r4, r0
 8009968:	2908      	cmp	r1, #8
 800996a:	f104 0401 	add.w	r4, r4, #1
 800996e:	4404      	add	r4, r0
 8009970:	dc19      	bgt.n	80099a6 <_strtod_l+0x25e>
 8009972:	9b07      	ldr	r3, [sp, #28]
 8009974:	210a      	movs	r1, #10
 8009976:	fb01 e303 	mla	r3, r1, r3, lr
 800997a:	9307      	str	r3, [sp, #28]
 800997c:	2100      	movs	r1, #0
 800997e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009980:	1c58      	adds	r0, r3, #1
 8009982:	901b      	str	r0, [sp, #108]	; 0x6c
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	4608      	mov	r0, r1
 8009988:	e7c9      	b.n	800991e <_strtod_l+0x1d6>
 800998a:	9805      	ldr	r0, [sp, #20]
 800998c:	e7d3      	b.n	8009936 <_strtod_l+0x1ee>
 800998e:	2908      	cmp	r1, #8
 8009990:	f101 0101 	add.w	r1, r1, #1
 8009994:	dc03      	bgt.n	800999e <_strtod_l+0x256>
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	437b      	muls	r3, r7
 800999a:	9307      	str	r3, [sp, #28]
 800999c:	e7e1      	b.n	8009962 <_strtod_l+0x21a>
 800999e:	2910      	cmp	r1, #16
 80099a0:	bfd8      	it	le
 80099a2:	437d      	mulle	r5, r7
 80099a4:	e7dd      	b.n	8009962 <_strtod_l+0x21a>
 80099a6:	2c10      	cmp	r4, #16
 80099a8:	bfdc      	itt	le
 80099aa:	210a      	movle	r1, #10
 80099ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80099b0:	e7e4      	b.n	800997c <_strtod_l+0x234>
 80099b2:	2301      	movs	r3, #1
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	e781      	b.n	80098bc <_strtod_l+0x174>
 80099b8:	f04f 0c01 	mov.w	ip, #1
 80099bc:	1cb3      	adds	r3, r6, #2
 80099be:	931b      	str	r3, [sp, #108]	; 0x6c
 80099c0:	78b3      	ldrb	r3, [r6, #2]
 80099c2:	e78a      	b.n	80098da <_strtod_l+0x192>
 80099c4:	f04f 0c00 	mov.w	ip, #0
 80099c8:	e7f8      	b.n	80099bc <_strtod_l+0x274>
 80099ca:	bf00      	nop
 80099cc:	0800ba58 	.word	0x0800ba58
 80099d0:	7ff00000 	.word	0x7ff00000
 80099d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099d6:	1c5f      	adds	r7, r3, #1
 80099d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	2b30      	cmp	r3, #48	; 0x30
 80099de:	d0f9      	beq.n	80099d4 <_strtod_l+0x28c>
 80099e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80099e4:	2f08      	cmp	r7, #8
 80099e6:	f63f af7d 	bhi.w	80098e4 <_strtod_l+0x19c>
 80099ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80099ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099f0:	930a      	str	r3, [sp, #40]	; 0x28
 80099f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099f4:	1c5f      	adds	r7, r3, #1
 80099f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80099f8:	785b      	ldrb	r3, [r3, #1]
 80099fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80099fe:	f1b8 0f09 	cmp.w	r8, #9
 8009a02:	d937      	bls.n	8009a74 <_strtod_l+0x32c>
 8009a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009a06:	1a7f      	subs	r7, r7, r1
 8009a08:	2f08      	cmp	r7, #8
 8009a0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009a0e:	dc37      	bgt.n	8009a80 <_strtod_l+0x338>
 8009a10:	45be      	cmp	lr, r7
 8009a12:	bfa8      	it	ge
 8009a14:	46be      	movge	lr, r7
 8009a16:	f1bc 0f00 	cmp.w	ip, #0
 8009a1a:	d001      	beq.n	8009a20 <_strtod_l+0x2d8>
 8009a1c:	f1ce 0e00 	rsb	lr, lr, #0
 8009a20:	2c00      	cmp	r4, #0
 8009a22:	d151      	bne.n	8009ac8 <_strtod_l+0x380>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	f47f aece 	bne.w	80097c6 <_strtod_l+0x7e>
 8009a2a:	9a06      	ldr	r2, [sp, #24]
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	f47f aeca 	bne.w	80097c6 <_strtod_l+0x7e>
 8009a32:	9a04      	ldr	r2, [sp, #16]
 8009a34:	2a00      	cmp	r2, #0
 8009a36:	f47f aee4 	bne.w	8009802 <_strtod_l+0xba>
 8009a3a:	2b4e      	cmp	r3, #78	; 0x4e
 8009a3c:	d027      	beq.n	8009a8e <_strtod_l+0x346>
 8009a3e:	dc21      	bgt.n	8009a84 <_strtod_l+0x33c>
 8009a40:	2b49      	cmp	r3, #73	; 0x49
 8009a42:	f47f aede 	bne.w	8009802 <_strtod_l+0xba>
 8009a46:	49a0      	ldr	r1, [pc, #640]	; (8009cc8 <_strtod_l+0x580>)
 8009a48:	a81b      	add	r0, sp, #108	; 0x6c
 8009a4a:	f000 ff07 	bl	800a85c <__match>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f aed7 	beq.w	8009802 <_strtod_l+0xba>
 8009a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a56:	499d      	ldr	r1, [pc, #628]	; (8009ccc <_strtod_l+0x584>)
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	a81b      	add	r0, sp, #108	; 0x6c
 8009a5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a5e:	f000 fefd 	bl	800a85c <__match>
 8009a62:	b910      	cbnz	r0, 8009a6a <_strtod_l+0x322>
 8009a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a66:	3301      	adds	r3, #1
 8009a68:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009ce0 <_strtod_l+0x598>
 8009a6e:	f04f 0a00 	mov.w	sl, #0
 8009a72:	e6a8      	b.n	80097c6 <_strtod_l+0x7e>
 8009a74:	210a      	movs	r1, #10
 8009a76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009a7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a7e:	e7b8      	b.n	80099f2 <_strtod_l+0x2aa>
 8009a80:	46be      	mov	lr, r7
 8009a82:	e7c8      	b.n	8009a16 <_strtod_l+0x2ce>
 8009a84:	2b69      	cmp	r3, #105	; 0x69
 8009a86:	d0de      	beq.n	8009a46 <_strtod_l+0x2fe>
 8009a88:	2b6e      	cmp	r3, #110	; 0x6e
 8009a8a:	f47f aeba 	bne.w	8009802 <_strtod_l+0xba>
 8009a8e:	4990      	ldr	r1, [pc, #576]	; (8009cd0 <_strtod_l+0x588>)
 8009a90:	a81b      	add	r0, sp, #108	; 0x6c
 8009a92:	f000 fee3 	bl	800a85c <__match>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	f43f aeb3 	beq.w	8009802 <_strtod_l+0xba>
 8009a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	2b28      	cmp	r3, #40	; 0x28
 8009aa2:	d10e      	bne.n	8009ac2 <_strtod_l+0x37a>
 8009aa4:	aa1e      	add	r2, sp, #120	; 0x78
 8009aa6:	498b      	ldr	r1, [pc, #556]	; (8009cd4 <_strtod_l+0x58c>)
 8009aa8:	a81b      	add	r0, sp, #108	; 0x6c
 8009aaa:	f000 feeb 	bl	800a884 <__hexnan>
 8009aae:	2805      	cmp	r0, #5
 8009ab0:	d107      	bne.n	8009ac2 <_strtod_l+0x37a>
 8009ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ab4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009ab8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009abc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ac0:	e681      	b.n	80097c6 <_strtod_l+0x7e>
 8009ac2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009ce8 <_strtod_l+0x5a0>
 8009ac6:	e7d2      	b.n	8009a6e <_strtod_l+0x326>
 8009ac8:	ebae 0302 	sub.w	r3, lr, r2
 8009acc:	9306      	str	r3, [sp, #24]
 8009ace:	9b05      	ldr	r3, [sp, #20]
 8009ad0:	9807      	ldr	r0, [sp, #28]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bf08      	it	eq
 8009ad6:	4623      	moveq	r3, r4
 8009ad8:	2c10      	cmp	r4, #16
 8009ada:	9305      	str	r3, [sp, #20]
 8009adc:	46a0      	mov	r8, r4
 8009ade:	bfa8      	it	ge
 8009ae0:	f04f 0810 	movge.w	r8, #16
 8009ae4:	f7f6 fd2e 	bl	8000544 <__aeabi_ui2d>
 8009ae8:	2c09      	cmp	r4, #9
 8009aea:	4682      	mov	sl, r0
 8009aec:	468b      	mov	fp, r1
 8009aee:	dc13      	bgt.n	8009b18 <_strtod_l+0x3d0>
 8009af0:	9b06      	ldr	r3, [sp, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f43f ae67 	beq.w	80097c6 <_strtod_l+0x7e>
 8009af8:	9b06      	ldr	r3, [sp, #24]
 8009afa:	dd7a      	ble.n	8009bf2 <_strtod_l+0x4aa>
 8009afc:	2b16      	cmp	r3, #22
 8009afe:	dc61      	bgt.n	8009bc4 <_strtod_l+0x47c>
 8009b00:	4a75      	ldr	r2, [pc, #468]	; (8009cd8 <_strtod_l+0x590>)
 8009b02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009b06:	e9de 0100 	ldrd	r0, r1, [lr]
 8009b0a:	4652      	mov	r2, sl
 8009b0c:	465b      	mov	r3, fp
 8009b0e:	f7f6 fd93 	bl	8000638 <__aeabi_dmul>
 8009b12:	4682      	mov	sl, r0
 8009b14:	468b      	mov	fp, r1
 8009b16:	e656      	b.n	80097c6 <_strtod_l+0x7e>
 8009b18:	4b6f      	ldr	r3, [pc, #444]	; (8009cd8 <_strtod_l+0x590>)
 8009b1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009b1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b22:	f7f6 fd89 	bl	8000638 <__aeabi_dmul>
 8009b26:	4606      	mov	r6, r0
 8009b28:	4628      	mov	r0, r5
 8009b2a:	460f      	mov	r7, r1
 8009b2c:	f7f6 fd0a 	bl	8000544 <__aeabi_ui2d>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f6 fbc8 	bl	80002cc <__adddf3>
 8009b3c:	2c0f      	cmp	r4, #15
 8009b3e:	4682      	mov	sl, r0
 8009b40:	468b      	mov	fp, r1
 8009b42:	ddd5      	ble.n	8009af0 <_strtod_l+0x3a8>
 8009b44:	9b06      	ldr	r3, [sp, #24]
 8009b46:	eba4 0808 	sub.w	r8, r4, r8
 8009b4a:	4498      	add	r8, r3
 8009b4c:	f1b8 0f00 	cmp.w	r8, #0
 8009b50:	f340 8096 	ble.w	8009c80 <_strtod_l+0x538>
 8009b54:	f018 030f 	ands.w	r3, r8, #15
 8009b58:	d00a      	beq.n	8009b70 <_strtod_l+0x428>
 8009b5a:	495f      	ldr	r1, [pc, #380]	; (8009cd8 <_strtod_l+0x590>)
 8009b5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b60:	4652      	mov	r2, sl
 8009b62:	465b      	mov	r3, fp
 8009b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b68:	f7f6 fd66 	bl	8000638 <__aeabi_dmul>
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	468b      	mov	fp, r1
 8009b70:	f038 080f 	bics.w	r8, r8, #15
 8009b74:	d073      	beq.n	8009c5e <_strtod_l+0x516>
 8009b76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009b7a:	dd47      	ble.n	8009c0c <_strtod_l+0x4c4>
 8009b7c:	2400      	movs	r4, #0
 8009b7e:	46a0      	mov	r8, r4
 8009b80:	9407      	str	r4, [sp, #28]
 8009b82:	9405      	str	r4, [sp, #20]
 8009b84:	2322      	movs	r3, #34	; 0x22
 8009b86:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009ce0 <_strtod_l+0x598>
 8009b8a:	f8c9 3000 	str.w	r3, [r9]
 8009b8e:	f04f 0a00 	mov.w	sl, #0
 8009b92:	9b07      	ldr	r3, [sp, #28]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f43f ae16 	beq.w	80097c6 <_strtod_l+0x7e>
 8009b9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009b9c:	4648      	mov	r0, r9
 8009b9e:	f000 ff56 	bl	800aa4e <_Bfree>
 8009ba2:	9905      	ldr	r1, [sp, #20]
 8009ba4:	4648      	mov	r0, r9
 8009ba6:	f000 ff52 	bl	800aa4e <_Bfree>
 8009baa:	4641      	mov	r1, r8
 8009bac:	4648      	mov	r0, r9
 8009bae:	f000 ff4e 	bl	800aa4e <_Bfree>
 8009bb2:	9907      	ldr	r1, [sp, #28]
 8009bb4:	4648      	mov	r0, r9
 8009bb6:	f000 ff4a 	bl	800aa4e <_Bfree>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4648      	mov	r0, r9
 8009bbe:	f000 ff46 	bl	800aa4e <_Bfree>
 8009bc2:	e600      	b.n	80097c6 <_strtod_l+0x7e>
 8009bc4:	9a06      	ldr	r2, [sp, #24]
 8009bc6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	dbba      	blt.n	8009b44 <_strtod_l+0x3fc>
 8009bce:	4d42      	ldr	r5, [pc, #264]	; (8009cd8 <_strtod_l+0x590>)
 8009bd0:	f1c4 040f 	rsb	r4, r4, #15
 8009bd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009bd8:	4652      	mov	r2, sl
 8009bda:	465b      	mov	r3, fp
 8009bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009be0:	f7f6 fd2a 	bl	8000638 <__aeabi_dmul>
 8009be4:	9b06      	ldr	r3, [sp, #24]
 8009be6:	1b1c      	subs	r4, r3, r4
 8009be8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009bec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009bf0:	e78d      	b.n	8009b0e <_strtod_l+0x3c6>
 8009bf2:	f113 0f16 	cmn.w	r3, #22
 8009bf6:	dba5      	blt.n	8009b44 <_strtod_l+0x3fc>
 8009bf8:	4a37      	ldr	r2, [pc, #220]	; (8009cd8 <_strtod_l+0x590>)
 8009bfa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009bfe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009c02:	4650      	mov	r0, sl
 8009c04:	4659      	mov	r1, fp
 8009c06:	f7f6 fe41 	bl	800088c <__aeabi_ddiv>
 8009c0a:	e782      	b.n	8009b12 <_strtod_l+0x3ca>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4e33      	ldr	r6, [pc, #204]	; (8009cdc <_strtod_l+0x594>)
 8009c10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c14:	4650      	mov	r0, sl
 8009c16:	4659      	mov	r1, fp
 8009c18:	461d      	mov	r5, r3
 8009c1a:	f1b8 0f01 	cmp.w	r8, #1
 8009c1e:	dc21      	bgt.n	8009c64 <_strtod_l+0x51c>
 8009c20:	b10b      	cbz	r3, 8009c26 <_strtod_l+0x4de>
 8009c22:	4682      	mov	sl, r0
 8009c24:	468b      	mov	fp, r1
 8009c26:	4b2d      	ldr	r3, [pc, #180]	; (8009cdc <_strtod_l+0x594>)
 8009c28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009c30:	4652      	mov	r2, sl
 8009c32:	465b      	mov	r3, fp
 8009c34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009c38:	f7f6 fcfe 	bl	8000638 <__aeabi_dmul>
 8009c3c:	4b28      	ldr	r3, [pc, #160]	; (8009ce0 <_strtod_l+0x598>)
 8009c3e:	460a      	mov	r2, r1
 8009c40:	400b      	ands	r3, r1
 8009c42:	4928      	ldr	r1, [pc, #160]	; (8009ce4 <_strtod_l+0x59c>)
 8009c44:	428b      	cmp	r3, r1
 8009c46:	4682      	mov	sl, r0
 8009c48:	d898      	bhi.n	8009b7c <_strtod_l+0x434>
 8009c4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c4e:	428b      	cmp	r3, r1
 8009c50:	bf86      	itte	hi
 8009c52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009cec <_strtod_l+0x5a4>
 8009c56:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009c5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c5e:	2300      	movs	r3, #0
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	e077      	b.n	8009d54 <_strtod_l+0x60c>
 8009c64:	f018 0f01 	tst.w	r8, #1
 8009c68:	d006      	beq.n	8009c78 <_strtod_l+0x530>
 8009c6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8009c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c72:	f7f6 fce1 	bl	8000638 <__aeabi_dmul>
 8009c76:	2301      	movs	r3, #1
 8009c78:	3501      	adds	r5, #1
 8009c7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c7e:	e7cc      	b.n	8009c1a <_strtod_l+0x4d2>
 8009c80:	d0ed      	beq.n	8009c5e <_strtod_l+0x516>
 8009c82:	f1c8 0800 	rsb	r8, r8, #0
 8009c86:	f018 020f 	ands.w	r2, r8, #15
 8009c8a:	d00a      	beq.n	8009ca2 <_strtod_l+0x55a>
 8009c8c:	4b12      	ldr	r3, [pc, #72]	; (8009cd8 <_strtod_l+0x590>)
 8009c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c92:	4650      	mov	r0, sl
 8009c94:	4659      	mov	r1, fp
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 fdf7 	bl	800088c <__aeabi_ddiv>
 8009c9e:	4682      	mov	sl, r0
 8009ca0:	468b      	mov	fp, r1
 8009ca2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009ca6:	d0da      	beq.n	8009c5e <_strtod_l+0x516>
 8009ca8:	f1b8 0f1f 	cmp.w	r8, #31
 8009cac:	dd20      	ble.n	8009cf0 <_strtod_l+0x5a8>
 8009cae:	2400      	movs	r4, #0
 8009cb0:	46a0      	mov	r8, r4
 8009cb2:	9407      	str	r4, [sp, #28]
 8009cb4:	9405      	str	r4, [sp, #20]
 8009cb6:	2322      	movs	r3, #34	; 0x22
 8009cb8:	f04f 0a00 	mov.w	sl, #0
 8009cbc:	f04f 0b00 	mov.w	fp, #0
 8009cc0:	f8c9 3000 	str.w	r3, [r9]
 8009cc4:	e765      	b.n	8009b92 <_strtod_l+0x44a>
 8009cc6:	bf00      	nop
 8009cc8:	0800ba4c 	.word	0x0800ba4c
 8009ccc:	0800ba4f 	.word	0x0800ba4f
 8009cd0:	0800ba55 	.word	0x0800ba55
 8009cd4:	0800ba6c 	.word	0x0800ba6c
 8009cd8:	0800bae0 	.word	0x0800bae0
 8009cdc:	0800bab8 	.word	0x0800bab8
 8009ce0:	7ff00000 	.word	0x7ff00000
 8009ce4:	7ca00000 	.word	0x7ca00000
 8009ce8:	fff80000 	.word	0xfff80000
 8009cec:	7fefffff 	.word	0x7fefffff
 8009cf0:	f018 0310 	ands.w	r3, r8, #16
 8009cf4:	bf18      	it	ne
 8009cf6:	236a      	movne	r3, #106	; 0x6a
 8009cf8:	4da0      	ldr	r5, [pc, #640]	; (8009f7c <_strtod_l+0x834>)
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	4650      	mov	r0, sl
 8009cfe:	4659      	mov	r1, fp
 8009d00:	2300      	movs	r3, #0
 8009d02:	f1b8 0f00 	cmp.w	r8, #0
 8009d06:	f300 810a 	bgt.w	8009f1e <_strtod_l+0x7d6>
 8009d0a:	b10b      	cbz	r3, 8009d10 <_strtod_l+0x5c8>
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	468b      	mov	fp, r1
 8009d10:	9b04      	ldr	r3, [sp, #16]
 8009d12:	b1bb      	cbz	r3, 8009d44 <_strtod_l+0x5fc>
 8009d14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009d18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	4659      	mov	r1, fp
 8009d20:	dd10      	ble.n	8009d44 <_strtod_l+0x5fc>
 8009d22:	2b1f      	cmp	r3, #31
 8009d24:	f340 8107 	ble.w	8009f36 <_strtod_l+0x7ee>
 8009d28:	2b34      	cmp	r3, #52	; 0x34
 8009d2a:	bfde      	ittt	le
 8009d2c:	3b20      	suble	r3, #32
 8009d2e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8009d32:	fa02 f303 	lslle.w	r3, r2, r3
 8009d36:	f04f 0a00 	mov.w	sl, #0
 8009d3a:	bfcc      	ite	gt
 8009d3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d40:	ea03 0b01 	andle.w	fp, r3, r1
 8009d44:	2200      	movs	r2, #0
 8009d46:	2300      	movs	r3, #0
 8009d48:	4650      	mov	r0, sl
 8009d4a:	4659      	mov	r1, fp
 8009d4c:	f7f6 fedc 	bl	8000b08 <__aeabi_dcmpeq>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d1ac      	bne.n	8009cae <_strtod_l+0x566>
 8009d54:	9b07      	ldr	r3, [sp, #28]
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	9a05      	ldr	r2, [sp, #20]
 8009d5a:	9908      	ldr	r1, [sp, #32]
 8009d5c:	4623      	mov	r3, r4
 8009d5e:	4648      	mov	r0, r9
 8009d60:	f000 fec7 	bl	800aaf2 <__s2b>
 8009d64:	9007      	str	r0, [sp, #28]
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f43f af08 	beq.w	8009b7c <_strtod_l+0x434>
 8009d6c:	9a06      	ldr	r2, [sp, #24]
 8009d6e:	9b06      	ldr	r3, [sp, #24]
 8009d70:	2a00      	cmp	r2, #0
 8009d72:	f1c3 0300 	rsb	r3, r3, #0
 8009d76:	bfa8      	it	ge
 8009d78:	2300      	movge	r3, #0
 8009d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8009d7c:	2400      	movs	r4, #0
 8009d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d82:	9316      	str	r3, [sp, #88]	; 0x58
 8009d84:	46a0      	mov	r8, r4
 8009d86:	9b07      	ldr	r3, [sp, #28]
 8009d88:	4648      	mov	r0, r9
 8009d8a:	6859      	ldr	r1, [r3, #4]
 8009d8c:	f000 fe2b 	bl	800a9e6 <_Balloc>
 8009d90:	9005      	str	r0, [sp, #20]
 8009d92:	2800      	cmp	r0, #0
 8009d94:	f43f aef6 	beq.w	8009b84 <_strtod_l+0x43c>
 8009d98:	9b07      	ldr	r3, [sp, #28]
 8009d9a:	691a      	ldr	r2, [r3, #16]
 8009d9c:	3202      	adds	r2, #2
 8009d9e:	f103 010c 	add.w	r1, r3, #12
 8009da2:	0092      	lsls	r2, r2, #2
 8009da4:	300c      	adds	r0, #12
 8009da6:	f000 fe11 	bl	800a9cc <memcpy>
 8009daa:	aa1e      	add	r2, sp, #120	; 0x78
 8009dac:	a91d      	add	r1, sp, #116	; 0x74
 8009dae:	ec4b ab10 	vmov	d0, sl, fp
 8009db2:	4648      	mov	r0, r9
 8009db4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009db8:	f001 f956 	bl	800b068 <__d2b>
 8009dbc:	901c      	str	r0, [sp, #112]	; 0x70
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f aee0 	beq.w	8009b84 <_strtod_l+0x43c>
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	4648      	mov	r0, r9
 8009dc8:	f000 ff1f 	bl	800ac0a <__i2b>
 8009dcc:	4680      	mov	r8, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f43f aed8 	beq.w	8009b84 <_strtod_l+0x43c>
 8009dd4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009dd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dd8:	2e00      	cmp	r6, #0
 8009dda:	bfab      	itete	ge
 8009ddc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009dde:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009de0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009de2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009de4:	bfac      	ite	ge
 8009de6:	18f7      	addge	r7, r6, r3
 8009de8:	1b9d      	sublt	r5, r3, r6
 8009dea:	9b04      	ldr	r3, [sp, #16]
 8009dec:	1af6      	subs	r6, r6, r3
 8009dee:	4416      	add	r6, r2
 8009df0:	4b63      	ldr	r3, [pc, #396]	; (8009f80 <_strtod_l+0x838>)
 8009df2:	3e01      	subs	r6, #1
 8009df4:	429e      	cmp	r6, r3
 8009df6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009dfa:	f280 80af 	bge.w	8009f5c <_strtod_l+0x814>
 8009dfe:	1b9b      	subs	r3, r3, r6
 8009e00:	2b1f      	cmp	r3, #31
 8009e02:	eba2 0203 	sub.w	r2, r2, r3
 8009e06:	f04f 0101 	mov.w	r1, #1
 8009e0a:	f300 809b 	bgt.w	8009f44 <_strtod_l+0x7fc>
 8009e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e12:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e14:	2300      	movs	r3, #0
 8009e16:	930a      	str	r3, [sp, #40]	; 0x28
 8009e18:	18be      	adds	r6, r7, r2
 8009e1a:	9b04      	ldr	r3, [sp, #16]
 8009e1c:	42b7      	cmp	r7, r6
 8009e1e:	4415      	add	r5, r2
 8009e20:	441d      	add	r5, r3
 8009e22:	463b      	mov	r3, r7
 8009e24:	bfa8      	it	ge
 8009e26:	4633      	movge	r3, r6
 8009e28:	42ab      	cmp	r3, r5
 8009e2a:	bfa8      	it	ge
 8009e2c:	462b      	movge	r3, r5
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfc2      	ittt	gt
 8009e32:	1af6      	subgt	r6, r6, r3
 8009e34:	1aed      	subgt	r5, r5, r3
 8009e36:	1aff      	subgt	r7, r7, r3
 8009e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e3a:	b1bb      	cbz	r3, 8009e6c <_strtod_l+0x724>
 8009e3c:	4641      	mov	r1, r8
 8009e3e:	461a      	mov	r2, r3
 8009e40:	4648      	mov	r0, r9
 8009e42:	f000 ff81 	bl	800ad48 <__pow5mult>
 8009e46:	4680      	mov	r8, r0
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	f43f ae9b 	beq.w	8009b84 <_strtod_l+0x43c>
 8009e4e:	4601      	mov	r1, r0
 8009e50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e52:	4648      	mov	r0, r9
 8009e54:	f000 fee2 	bl	800ac1c <__multiply>
 8009e58:	900c      	str	r0, [sp, #48]	; 0x30
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	f43f ae92 	beq.w	8009b84 <_strtod_l+0x43c>
 8009e60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e62:	4648      	mov	r0, r9
 8009e64:	f000 fdf3 	bl	800aa4e <_Bfree>
 8009e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e6a:	931c      	str	r3, [sp, #112]	; 0x70
 8009e6c:	2e00      	cmp	r6, #0
 8009e6e:	dc7a      	bgt.n	8009f66 <_strtod_l+0x81e>
 8009e70:	9b06      	ldr	r3, [sp, #24]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	dd08      	ble.n	8009e88 <_strtod_l+0x740>
 8009e76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e78:	9905      	ldr	r1, [sp, #20]
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	f000 ff64 	bl	800ad48 <__pow5mult>
 8009e80:	9005      	str	r0, [sp, #20]
 8009e82:	2800      	cmp	r0, #0
 8009e84:	f43f ae7e 	beq.w	8009b84 <_strtod_l+0x43c>
 8009e88:	2d00      	cmp	r5, #0
 8009e8a:	dd08      	ble.n	8009e9e <_strtod_l+0x756>
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	9905      	ldr	r1, [sp, #20]
 8009e90:	4648      	mov	r0, r9
 8009e92:	f000 ffa7 	bl	800ade4 <__lshift>
 8009e96:	9005      	str	r0, [sp, #20]
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f43f ae73 	beq.w	8009b84 <_strtod_l+0x43c>
 8009e9e:	2f00      	cmp	r7, #0
 8009ea0:	dd08      	ble.n	8009eb4 <_strtod_l+0x76c>
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	463a      	mov	r2, r7
 8009ea6:	4648      	mov	r0, r9
 8009ea8:	f000 ff9c 	bl	800ade4 <__lshift>
 8009eac:	4680      	mov	r8, r0
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	f43f ae68 	beq.w	8009b84 <_strtod_l+0x43c>
 8009eb4:	9a05      	ldr	r2, [sp, #20]
 8009eb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009eb8:	4648      	mov	r0, r9
 8009eba:	f001 f801 	bl	800aec0 <__mdiff>
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	f43f ae5f 	beq.w	8009b84 <_strtod_l+0x43c>
 8009ec6:	68c3      	ldr	r3, [r0, #12]
 8009ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60c3      	str	r3, [r0, #12]
 8009ece:	4641      	mov	r1, r8
 8009ed0:	f000 ffdc 	bl	800ae8c <__mcmp>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	da55      	bge.n	8009f84 <_strtod_l+0x83c>
 8009ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009eda:	b9e3      	cbnz	r3, 8009f16 <_strtod_l+0x7ce>
 8009edc:	f1ba 0f00 	cmp.w	sl, #0
 8009ee0:	d119      	bne.n	8009f16 <_strtod_l+0x7ce>
 8009ee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ee6:	b9b3      	cbnz	r3, 8009f16 <_strtod_l+0x7ce>
 8009ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009eec:	0d1b      	lsrs	r3, r3, #20
 8009eee:	051b      	lsls	r3, r3, #20
 8009ef0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009ef4:	d90f      	bls.n	8009f16 <_strtod_l+0x7ce>
 8009ef6:	6963      	ldr	r3, [r4, #20]
 8009ef8:	b913      	cbnz	r3, 8009f00 <_strtod_l+0x7b8>
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	dd0a      	ble.n	8009f16 <_strtod_l+0x7ce>
 8009f00:	4621      	mov	r1, r4
 8009f02:	2201      	movs	r2, #1
 8009f04:	4648      	mov	r0, r9
 8009f06:	f000 ff6d 	bl	800ade4 <__lshift>
 8009f0a:	4641      	mov	r1, r8
 8009f0c:	4604      	mov	r4, r0
 8009f0e:	f000 ffbd 	bl	800ae8c <__mcmp>
 8009f12:	2800      	cmp	r0, #0
 8009f14:	dc67      	bgt.n	8009fe6 <_strtod_l+0x89e>
 8009f16:	9b04      	ldr	r3, [sp, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d171      	bne.n	800a000 <_strtod_l+0x8b8>
 8009f1c:	e63d      	b.n	8009b9a <_strtod_l+0x452>
 8009f1e:	f018 0f01 	tst.w	r8, #1
 8009f22:	d004      	beq.n	8009f2e <_strtod_l+0x7e6>
 8009f24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009f28:	f7f6 fb86 	bl	8000638 <__aeabi_dmul>
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f32:	3508      	adds	r5, #8
 8009f34:	e6e5      	b.n	8009d02 <_strtod_l+0x5ba>
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f3e:	ea03 0a0a 	and.w	sl, r3, sl
 8009f42:	e6ff      	b.n	8009d44 <_strtod_l+0x5fc>
 8009f44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009f48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009f4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009f50:	36e2      	adds	r6, #226	; 0xe2
 8009f52:	fa01 f306 	lsl.w	r3, r1, r6
 8009f56:	930a      	str	r3, [sp, #40]	; 0x28
 8009f58:	910f      	str	r1, [sp, #60]	; 0x3c
 8009f5a:	e75d      	b.n	8009e18 <_strtod_l+0x6d0>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f60:	2301      	movs	r3, #1
 8009f62:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f64:	e758      	b.n	8009e18 <_strtod_l+0x6d0>
 8009f66:	4632      	mov	r2, r6
 8009f68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f6a:	4648      	mov	r0, r9
 8009f6c:	f000 ff3a 	bl	800ade4 <__lshift>
 8009f70:	901c      	str	r0, [sp, #112]	; 0x70
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f47f af7c 	bne.w	8009e70 <_strtod_l+0x728>
 8009f78:	e604      	b.n	8009b84 <_strtod_l+0x43c>
 8009f7a:	bf00      	nop
 8009f7c:	0800ba80 	.word	0x0800ba80
 8009f80:	fffffc02 	.word	0xfffffc02
 8009f84:	465d      	mov	r5, fp
 8009f86:	f040 8086 	bne.w	800a096 <_strtod_l+0x94e>
 8009f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f90:	b32a      	cbz	r2, 8009fde <_strtod_l+0x896>
 8009f92:	4aaf      	ldr	r2, [pc, #700]	; (800a250 <_strtod_l+0xb08>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d153      	bne.n	800a040 <_strtod_l+0x8f8>
 8009f98:	9b04      	ldr	r3, [sp, #16]
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	b1d3      	cbz	r3, 8009fd4 <_strtod_l+0x88c>
 8009f9e:	4aad      	ldr	r2, [pc, #692]	; (800a254 <_strtod_l+0xb0c>)
 8009fa0:	402a      	ands	r2, r5
 8009fa2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009fa6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009faa:	d816      	bhi.n	8009fda <_strtod_l+0x892>
 8009fac:	0d12      	lsrs	r2, r2, #20
 8009fae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fb6:	4298      	cmp	r0, r3
 8009fb8:	d142      	bne.n	800a040 <_strtod_l+0x8f8>
 8009fba:	4ba7      	ldr	r3, [pc, #668]	; (800a258 <_strtod_l+0xb10>)
 8009fbc:	429d      	cmp	r5, r3
 8009fbe:	d102      	bne.n	8009fc6 <_strtod_l+0x87e>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	f43f addf 	beq.w	8009b84 <_strtod_l+0x43c>
 8009fc6:	4ba3      	ldr	r3, [pc, #652]	; (800a254 <_strtod_l+0xb0c>)
 8009fc8:	402b      	ands	r3, r5
 8009fca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009fce:	f04f 0a00 	mov.w	sl, #0
 8009fd2:	e7a0      	b.n	8009f16 <_strtod_l+0x7ce>
 8009fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fd8:	e7ed      	b.n	8009fb6 <_strtod_l+0x86e>
 8009fda:	460b      	mov	r3, r1
 8009fdc:	e7eb      	b.n	8009fb6 <_strtod_l+0x86e>
 8009fde:	bb7b      	cbnz	r3, 800a040 <_strtod_l+0x8f8>
 8009fe0:	f1ba 0f00 	cmp.w	sl, #0
 8009fe4:	d12c      	bne.n	800a040 <_strtod_l+0x8f8>
 8009fe6:	9904      	ldr	r1, [sp, #16]
 8009fe8:	4a9a      	ldr	r2, [pc, #616]	; (800a254 <_strtod_l+0xb0c>)
 8009fea:	465b      	mov	r3, fp
 8009fec:	b1f1      	cbz	r1, 800a02c <_strtod_l+0x8e4>
 8009fee:	ea02 010b 	and.w	r1, r2, fp
 8009ff2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ff6:	dc19      	bgt.n	800a02c <_strtod_l+0x8e4>
 8009ff8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009ffc:	f77f ae5b 	ble.w	8009cb6 <_strtod_l+0x56e>
 800a000:	4a96      	ldr	r2, [pc, #600]	; (800a25c <_strtod_l+0xb14>)
 800a002:	2300      	movs	r3, #0
 800a004:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a008:	4650      	mov	r0, sl
 800a00a:	4659      	mov	r1, fp
 800a00c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a010:	f7f6 fb12 	bl	8000638 <__aeabi_dmul>
 800a014:	4682      	mov	sl, r0
 800a016:	468b      	mov	fp, r1
 800a018:	2900      	cmp	r1, #0
 800a01a:	f47f adbe 	bne.w	8009b9a <_strtod_l+0x452>
 800a01e:	2800      	cmp	r0, #0
 800a020:	f47f adbb 	bne.w	8009b9a <_strtod_l+0x452>
 800a024:	2322      	movs	r3, #34	; 0x22
 800a026:	f8c9 3000 	str.w	r3, [r9]
 800a02a:	e5b6      	b.n	8009b9a <_strtod_l+0x452>
 800a02c:	4013      	ands	r3, r2
 800a02e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a032:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a036:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a03a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a03e:	e76a      	b.n	8009f16 <_strtod_l+0x7ce>
 800a040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a042:	b193      	cbz	r3, 800a06a <_strtod_l+0x922>
 800a044:	422b      	tst	r3, r5
 800a046:	f43f af66 	beq.w	8009f16 <_strtod_l+0x7ce>
 800a04a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a04c:	9a04      	ldr	r2, [sp, #16]
 800a04e:	4650      	mov	r0, sl
 800a050:	4659      	mov	r1, fp
 800a052:	b173      	cbz	r3, 800a072 <_strtod_l+0x92a>
 800a054:	f7ff fb5a 	bl	800970c <sulp>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a060:	f7f6 f934 	bl	80002cc <__adddf3>
 800a064:	4682      	mov	sl, r0
 800a066:	468b      	mov	fp, r1
 800a068:	e755      	b.n	8009f16 <_strtod_l+0x7ce>
 800a06a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a06c:	ea13 0f0a 	tst.w	r3, sl
 800a070:	e7e9      	b.n	800a046 <_strtod_l+0x8fe>
 800a072:	f7ff fb4b 	bl	800970c <sulp>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a07e:	f7f6 f923 	bl	80002c8 <__aeabi_dsub>
 800a082:	2200      	movs	r2, #0
 800a084:	2300      	movs	r3, #0
 800a086:	4682      	mov	sl, r0
 800a088:	468b      	mov	fp, r1
 800a08a:	f7f6 fd3d 	bl	8000b08 <__aeabi_dcmpeq>
 800a08e:	2800      	cmp	r0, #0
 800a090:	f47f ae11 	bne.w	8009cb6 <_strtod_l+0x56e>
 800a094:	e73f      	b.n	8009f16 <_strtod_l+0x7ce>
 800a096:	4641      	mov	r1, r8
 800a098:	4620      	mov	r0, r4
 800a09a:	f001 f834 	bl	800b106 <__ratio>
 800a09e:	ec57 6b10 	vmov	r6, r7, d0
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0a8:	ee10 0a10 	vmov	r0, s0
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f7f6 fd3f 	bl	8000b30 <__aeabi_dcmple>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d077      	beq.n	800a1a6 <_strtod_l+0xa5e>
 800a0b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d04a      	beq.n	800a152 <_strtod_l+0xa0a>
 800a0bc:	4b68      	ldr	r3, [pc, #416]	; (800a260 <_strtod_l+0xb18>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a0c4:	4f66      	ldr	r7, [pc, #408]	; (800a260 <_strtod_l+0xb18>)
 800a0c6:	2600      	movs	r6, #0
 800a0c8:	4b62      	ldr	r3, [pc, #392]	; (800a254 <_strtod_l+0xb0c>)
 800a0ca:	402b      	ands	r3, r5
 800a0cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0d0:	4b64      	ldr	r3, [pc, #400]	; (800a264 <_strtod_l+0xb1c>)
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	f040 80ce 	bne.w	800a274 <_strtod_l+0xb2c>
 800a0d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a0dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800a0e4:	ec4b ab10 	vmov	d0, sl, fp
 800a0e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a0ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a0f0:	f000 ff44 	bl	800af7c <__ulp>
 800a0f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a0f8:	ec53 2b10 	vmov	r2, r3, d0
 800a0fc:	f7f6 fa9c 	bl	8000638 <__aeabi_dmul>
 800a100:	4652      	mov	r2, sl
 800a102:	465b      	mov	r3, fp
 800a104:	f7f6 f8e2 	bl	80002cc <__adddf3>
 800a108:	460b      	mov	r3, r1
 800a10a:	4952      	ldr	r1, [pc, #328]	; (800a254 <_strtod_l+0xb0c>)
 800a10c:	4a56      	ldr	r2, [pc, #344]	; (800a268 <_strtod_l+0xb20>)
 800a10e:	4019      	ands	r1, r3
 800a110:	4291      	cmp	r1, r2
 800a112:	4682      	mov	sl, r0
 800a114:	d95b      	bls.n	800a1ce <_strtod_l+0xa86>
 800a116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a118:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d103      	bne.n	800a128 <_strtod_l+0x9e0>
 800a120:	9b08      	ldr	r3, [sp, #32]
 800a122:	3301      	adds	r3, #1
 800a124:	f43f ad2e 	beq.w	8009b84 <_strtod_l+0x43c>
 800a128:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800a258 <_strtod_l+0xb10>
 800a12c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a130:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a132:	4648      	mov	r0, r9
 800a134:	f000 fc8b 	bl	800aa4e <_Bfree>
 800a138:	9905      	ldr	r1, [sp, #20]
 800a13a:	4648      	mov	r0, r9
 800a13c:	f000 fc87 	bl	800aa4e <_Bfree>
 800a140:	4641      	mov	r1, r8
 800a142:	4648      	mov	r0, r9
 800a144:	f000 fc83 	bl	800aa4e <_Bfree>
 800a148:	4621      	mov	r1, r4
 800a14a:	4648      	mov	r0, r9
 800a14c:	f000 fc7f 	bl	800aa4e <_Bfree>
 800a150:	e619      	b.n	8009d86 <_strtod_l+0x63e>
 800a152:	f1ba 0f00 	cmp.w	sl, #0
 800a156:	d11a      	bne.n	800a18e <_strtod_l+0xa46>
 800a158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a15c:	b9eb      	cbnz	r3, 800a19a <_strtod_l+0xa52>
 800a15e:	2200      	movs	r2, #0
 800a160:	4b3f      	ldr	r3, [pc, #252]	; (800a260 <_strtod_l+0xb18>)
 800a162:	4630      	mov	r0, r6
 800a164:	4639      	mov	r1, r7
 800a166:	f7f6 fcd9 	bl	8000b1c <__aeabi_dcmplt>
 800a16a:	b9c8      	cbnz	r0, 800a1a0 <_strtod_l+0xa58>
 800a16c:	4630      	mov	r0, r6
 800a16e:	4639      	mov	r1, r7
 800a170:	2200      	movs	r2, #0
 800a172:	4b3e      	ldr	r3, [pc, #248]	; (800a26c <_strtod_l+0xb24>)
 800a174:	f7f6 fa60 	bl	8000638 <__aeabi_dmul>
 800a178:	4606      	mov	r6, r0
 800a17a:	460f      	mov	r7, r1
 800a17c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a180:	9618      	str	r6, [sp, #96]	; 0x60
 800a182:	9319      	str	r3, [sp, #100]	; 0x64
 800a184:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a188:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a18c:	e79c      	b.n	800a0c8 <_strtod_l+0x980>
 800a18e:	f1ba 0f01 	cmp.w	sl, #1
 800a192:	d102      	bne.n	800a19a <_strtod_l+0xa52>
 800a194:	2d00      	cmp	r5, #0
 800a196:	f43f ad8e 	beq.w	8009cb6 <_strtod_l+0x56e>
 800a19a:	2200      	movs	r2, #0
 800a19c:	4b34      	ldr	r3, [pc, #208]	; (800a270 <_strtod_l+0xb28>)
 800a19e:	e78f      	b.n	800a0c0 <_strtod_l+0x978>
 800a1a0:	2600      	movs	r6, #0
 800a1a2:	4f32      	ldr	r7, [pc, #200]	; (800a26c <_strtod_l+0xb24>)
 800a1a4:	e7ea      	b.n	800a17c <_strtod_l+0xa34>
 800a1a6:	4b31      	ldr	r3, [pc, #196]	; (800a26c <_strtod_l+0xb24>)
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f7f6 fa43 	bl	8000638 <__aeabi_dmul>
 800a1b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	460f      	mov	r7, r1
 800a1b8:	b933      	cbnz	r3, 800a1c8 <_strtod_l+0xa80>
 800a1ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1be:	9010      	str	r0, [sp, #64]	; 0x40
 800a1c0:	9311      	str	r3, [sp, #68]	; 0x44
 800a1c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1c6:	e7df      	b.n	800a188 <_strtod_l+0xa40>
 800a1c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a1cc:	e7f9      	b.n	800a1c2 <_strtod_l+0xa7a>
 800a1ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1d2:	9b04      	ldr	r3, [sp, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1ab      	bne.n	800a130 <_strtod_l+0x9e8>
 800a1d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1dc:	0d1b      	lsrs	r3, r3, #20
 800a1de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1e0:	051b      	lsls	r3, r3, #20
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	465d      	mov	r5, fp
 800a1e6:	d1a3      	bne.n	800a130 <_strtod_l+0x9e8>
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7f6 fcbe 	bl	8000b6c <__aeabi_d2iz>
 800a1f0:	f7f6 f9b8 	bl	8000564 <__aeabi_i2d>
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	4639      	mov	r1, r7
 800a1fa:	4630      	mov	r0, r6
 800a1fc:	f7f6 f864 	bl	80002c8 <__aeabi_dsub>
 800a200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a202:	4606      	mov	r6, r0
 800a204:	460f      	mov	r7, r1
 800a206:	b933      	cbnz	r3, 800a216 <_strtod_l+0xace>
 800a208:	f1ba 0f00 	cmp.w	sl, #0
 800a20c:	d103      	bne.n	800a216 <_strtod_l+0xace>
 800a20e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800a212:	2d00      	cmp	r5, #0
 800a214:	d06d      	beq.n	800a2f2 <_strtod_l+0xbaa>
 800a216:	a30a      	add	r3, pc, #40	; (adr r3, 800a240 <_strtod_l+0xaf8>)
 800a218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21c:	4630      	mov	r0, r6
 800a21e:	4639      	mov	r1, r7
 800a220:	f7f6 fc7c 	bl	8000b1c <__aeabi_dcmplt>
 800a224:	2800      	cmp	r0, #0
 800a226:	f47f acb8 	bne.w	8009b9a <_strtod_l+0x452>
 800a22a:	a307      	add	r3, pc, #28	; (adr r3, 800a248 <_strtod_l+0xb00>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	4630      	mov	r0, r6
 800a232:	4639      	mov	r1, r7
 800a234:	f7f6 fc90 	bl	8000b58 <__aeabi_dcmpgt>
 800a238:	2800      	cmp	r0, #0
 800a23a:	f43f af79 	beq.w	800a130 <_strtod_l+0x9e8>
 800a23e:	e4ac      	b.n	8009b9a <_strtod_l+0x452>
 800a240:	94a03595 	.word	0x94a03595
 800a244:	3fdfffff 	.word	0x3fdfffff
 800a248:	35afe535 	.word	0x35afe535
 800a24c:	3fe00000 	.word	0x3fe00000
 800a250:	000fffff 	.word	0x000fffff
 800a254:	7ff00000 	.word	0x7ff00000
 800a258:	7fefffff 	.word	0x7fefffff
 800a25c:	39500000 	.word	0x39500000
 800a260:	3ff00000 	.word	0x3ff00000
 800a264:	7fe00000 	.word	0x7fe00000
 800a268:	7c9fffff 	.word	0x7c9fffff
 800a26c:	3fe00000 	.word	0x3fe00000
 800a270:	bff00000 	.word	0xbff00000
 800a274:	9b04      	ldr	r3, [sp, #16]
 800a276:	b333      	cbz	r3, 800a2c6 <_strtod_l+0xb7e>
 800a278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a27a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a27e:	d822      	bhi.n	800a2c6 <_strtod_l+0xb7e>
 800a280:	a327      	add	r3, pc, #156	; (adr r3, 800a320 <_strtod_l+0xbd8>)
 800a282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a286:	4630      	mov	r0, r6
 800a288:	4639      	mov	r1, r7
 800a28a:	f7f6 fc51 	bl	8000b30 <__aeabi_dcmple>
 800a28e:	b1a0      	cbz	r0, 800a2ba <_strtod_l+0xb72>
 800a290:	4639      	mov	r1, r7
 800a292:	4630      	mov	r0, r6
 800a294:	f7f6 fc92 	bl	8000bbc <__aeabi_d2uiz>
 800a298:	2800      	cmp	r0, #0
 800a29a:	bf08      	it	eq
 800a29c:	2001      	moveq	r0, #1
 800a29e:	f7f6 f951 	bl	8000544 <__aeabi_ui2d>
 800a2a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2a4:	4606      	mov	r6, r0
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	bb03      	cbnz	r3, 800a2ec <_strtod_l+0xba4>
 800a2aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2ae:	9012      	str	r0, [sp, #72]	; 0x48
 800a2b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a2b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a2ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2c2:	1a9b      	subs	r3, r3, r2
 800a2c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 800a2ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800a2ce:	f000 fe55 	bl	800af7c <__ulp>
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	ec53 2b10 	vmov	r2, r3, d0
 800a2d8:	4659      	mov	r1, fp
 800a2da:	f7f6 f9ad 	bl	8000638 <__aeabi_dmul>
 800a2de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a2e2:	f7f5 fff3 	bl	80002cc <__adddf3>
 800a2e6:	4682      	mov	sl, r0
 800a2e8:	468b      	mov	fp, r1
 800a2ea:	e772      	b.n	800a1d2 <_strtod_l+0xa8a>
 800a2ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800a2f0:	e7df      	b.n	800a2b2 <_strtod_l+0xb6a>
 800a2f2:	a30d      	add	r3, pc, #52	; (adr r3, 800a328 <_strtod_l+0xbe0>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f6 fc10 	bl	8000b1c <__aeabi_dcmplt>
 800a2fc:	e79c      	b.n	800a238 <_strtod_l+0xaf0>
 800a2fe:	2300      	movs	r3, #0
 800a300:	930d      	str	r3, [sp, #52]	; 0x34
 800a302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	f7ff ba61 	b.w	80097ce <_strtod_l+0x86>
 800a30c:	2b65      	cmp	r3, #101	; 0x65
 800a30e:	f04f 0200 	mov.w	r2, #0
 800a312:	f43f ab4e 	beq.w	80099b2 <_strtod_l+0x26a>
 800a316:	2101      	movs	r1, #1
 800a318:	4614      	mov	r4, r2
 800a31a:	9104      	str	r1, [sp, #16]
 800a31c:	f7ff bacb 	b.w	80098b6 <_strtod_l+0x16e>
 800a320:	ffc00000 	.word	0xffc00000
 800a324:	41dfffff 	.word	0x41dfffff
 800a328:	94a03595 	.word	0x94a03595
 800a32c:	3fcfffff 	.word	0x3fcfffff

0800a330 <strtod>:
 800a330:	4b07      	ldr	r3, [pc, #28]	; (800a350 <strtod+0x20>)
 800a332:	4a08      	ldr	r2, [pc, #32]	; (800a354 <strtod+0x24>)
 800a334:	b410      	push	{r4}
 800a336:	681c      	ldr	r4, [r3, #0]
 800a338:	6a23      	ldr	r3, [r4, #32]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	bf08      	it	eq
 800a33e:	4613      	moveq	r3, r2
 800a340:	460a      	mov	r2, r1
 800a342:	4601      	mov	r1, r0
 800a344:	4620      	mov	r0, r4
 800a346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a34a:	f7ff b9fd 	b.w	8009748 <_strtod_l>
 800a34e:	bf00      	nop
 800a350:	20000128 	.word	0x20000128
 800a354:	2000018c 	.word	0x2000018c

0800a358 <rshift>:
 800a358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a35a:	6906      	ldr	r6, [r0, #16]
 800a35c:	114b      	asrs	r3, r1, #5
 800a35e:	429e      	cmp	r6, r3
 800a360:	f100 0414 	add.w	r4, r0, #20
 800a364:	dd30      	ble.n	800a3c8 <rshift+0x70>
 800a366:	f011 011f 	ands.w	r1, r1, #31
 800a36a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a36e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a372:	d108      	bne.n	800a386 <rshift+0x2e>
 800a374:	4621      	mov	r1, r4
 800a376:	42b2      	cmp	r2, r6
 800a378:	460b      	mov	r3, r1
 800a37a:	d211      	bcs.n	800a3a0 <rshift+0x48>
 800a37c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a380:	f841 3b04 	str.w	r3, [r1], #4
 800a384:	e7f7      	b.n	800a376 <rshift+0x1e>
 800a386:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a38a:	f1c1 0c20 	rsb	ip, r1, #32
 800a38e:	40cd      	lsrs	r5, r1
 800a390:	3204      	adds	r2, #4
 800a392:	4623      	mov	r3, r4
 800a394:	42b2      	cmp	r2, r6
 800a396:	4617      	mov	r7, r2
 800a398:	d30c      	bcc.n	800a3b4 <rshift+0x5c>
 800a39a:	601d      	str	r5, [r3, #0]
 800a39c:	b105      	cbz	r5, 800a3a0 <rshift+0x48>
 800a39e:	3304      	adds	r3, #4
 800a3a0:	1b1a      	subs	r2, r3, r4
 800a3a2:	42a3      	cmp	r3, r4
 800a3a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3a8:	bf08      	it	eq
 800a3aa:	2300      	moveq	r3, #0
 800a3ac:	6102      	str	r2, [r0, #16]
 800a3ae:	bf08      	it	eq
 800a3b0:	6143      	streq	r3, [r0, #20]
 800a3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3b4:	683f      	ldr	r7, [r7, #0]
 800a3b6:	fa07 f70c 	lsl.w	r7, r7, ip
 800a3ba:	433d      	orrs	r5, r7
 800a3bc:	f843 5b04 	str.w	r5, [r3], #4
 800a3c0:	f852 5b04 	ldr.w	r5, [r2], #4
 800a3c4:	40cd      	lsrs	r5, r1
 800a3c6:	e7e5      	b.n	800a394 <rshift+0x3c>
 800a3c8:	4623      	mov	r3, r4
 800a3ca:	e7e9      	b.n	800a3a0 <rshift+0x48>

0800a3cc <__hexdig_fun>:
 800a3cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3d0:	2b09      	cmp	r3, #9
 800a3d2:	d802      	bhi.n	800a3da <__hexdig_fun+0xe>
 800a3d4:	3820      	subs	r0, #32
 800a3d6:	b2c0      	uxtb	r0, r0
 800a3d8:	4770      	bx	lr
 800a3da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a3de:	2b05      	cmp	r3, #5
 800a3e0:	d801      	bhi.n	800a3e6 <__hexdig_fun+0x1a>
 800a3e2:	3847      	subs	r0, #71	; 0x47
 800a3e4:	e7f7      	b.n	800a3d6 <__hexdig_fun+0xa>
 800a3e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a3ea:	2b05      	cmp	r3, #5
 800a3ec:	d801      	bhi.n	800a3f2 <__hexdig_fun+0x26>
 800a3ee:	3827      	subs	r0, #39	; 0x27
 800a3f0:	e7f1      	b.n	800a3d6 <__hexdig_fun+0xa>
 800a3f2:	2000      	movs	r0, #0
 800a3f4:	4770      	bx	lr

0800a3f6 <__gethex>:
 800a3f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fa:	b08b      	sub	sp, #44	; 0x2c
 800a3fc:	468a      	mov	sl, r1
 800a3fe:	9002      	str	r0, [sp, #8]
 800a400:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a402:	9306      	str	r3, [sp, #24]
 800a404:	4690      	mov	r8, r2
 800a406:	f000 facd 	bl	800a9a4 <__localeconv_l>
 800a40a:	6803      	ldr	r3, [r0, #0]
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7f5 fefe 	bl	8000210 <strlen>
 800a414:	9b03      	ldr	r3, [sp, #12]
 800a416:	9001      	str	r0, [sp, #4]
 800a418:	4403      	add	r3, r0
 800a41a:	f04f 0b00 	mov.w	fp, #0
 800a41e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a422:	9307      	str	r3, [sp, #28]
 800a424:	f8da 3000 	ldr.w	r3, [sl]
 800a428:	3302      	adds	r3, #2
 800a42a:	461f      	mov	r7, r3
 800a42c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a430:	2830      	cmp	r0, #48	; 0x30
 800a432:	d06c      	beq.n	800a50e <__gethex+0x118>
 800a434:	f7ff ffca 	bl	800a3cc <__hexdig_fun>
 800a438:	4604      	mov	r4, r0
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d16a      	bne.n	800a514 <__gethex+0x11e>
 800a43e:	9a01      	ldr	r2, [sp, #4]
 800a440:	9903      	ldr	r1, [sp, #12]
 800a442:	4638      	mov	r0, r7
 800a444:	f001 f9b6 	bl	800b7b4 <strncmp>
 800a448:	2800      	cmp	r0, #0
 800a44a:	d166      	bne.n	800a51a <__gethex+0x124>
 800a44c:	9b01      	ldr	r3, [sp, #4]
 800a44e:	5cf8      	ldrb	r0, [r7, r3]
 800a450:	18fe      	adds	r6, r7, r3
 800a452:	f7ff ffbb 	bl	800a3cc <__hexdig_fun>
 800a456:	2800      	cmp	r0, #0
 800a458:	d062      	beq.n	800a520 <__gethex+0x12a>
 800a45a:	4633      	mov	r3, r6
 800a45c:	7818      	ldrb	r0, [r3, #0]
 800a45e:	2830      	cmp	r0, #48	; 0x30
 800a460:	461f      	mov	r7, r3
 800a462:	f103 0301 	add.w	r3, r3, #1
 800a466:	d0f9      	beq.n	800a45c <__gethex+0x66>
 800a468:	f7ff ffb0 	bl	800a3cc <__hexdig_fun>
 800a46c:	fab0 f580 	clz	r5, r0
 800a470:	096d      	lsrs	r5, r5, #5
 800a472:	4634      	mov	r4, r6
 800a474:	f04f 0b01 	mov.w	fp, #1
 800a478:	463a      	mov	r2, r7
 800a47a:	4616      	mov	r6, r2
 800a47c:	3201      	adds	r2, #1
 800a47e:	7830      	ldrb	r0, [r6, #0]
 800a480:	f7ff ffa4 	bl	800a3cc <__hexdig_fun>
 800a484:	2800      	cmp	r0, #0
 800a486:	d1f8      	bne.n	800a47a <__gethex+0x84>
 800a488:	9a01      	ldr	r2, [sp, #4]
 800a48a:	9903      	ldr	r1, [sp, #12]
 800a48c:	4630      	mov	r0, r6
 800a48e:	f001 f991 	bl	800b7b4 <strncmp>
 800a492:	b950      	cbnz	r0, 800a4aa <__gethex+0xb4>
 800a494:	b954      	cbnz	r4, 800a4ac <__gethex+0xb6>
 800a496:	9b01      	ldr	r3, [sp, #4]
 800a498:	18f4      	adds	r4, r6, r3
 800a49a:	4622      	mov	r2, r4
 800a49c:	4616      	mov	r6, r2
 800a49e:	3201      	adds	r2, #1
 800a4a0:	7830      	ldrb	r0, [r6, #0]
 800a4a2:	f7ff ff93 	bl	800a3cc <__hexdig_fun>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d1f8      	bne.n	800a49c <__gethex+0xa6>
 800a4aa:	b10c      	cbz	r4, 800a4b0 <__gethex+0xba>
 800a4ac:	1ba4      	subs	r4, r4, r6
 800a4ae:	00a4      	lsls	r4, r4, #2
 800a4b0:	7833      	ldrb	r3, [r6, #0]
 800a4b2:	2b50      	cmp	r3, #80	; 0x50
 800a4b4:	d001      	beq.n	800a4ba <__gethex+0xc4>
 800a4b6:	2b70      	cmp	r3, #112	; 0x70
 800a4b8:	d140      	bne.n	800a53c <__gethex+0x146>
 800a4ba:	7873      	ldrb	r3, [r6, #1]
 800a4bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a4be:	d031      	beq.n	800a524 <__gethex+0x12e>
 800a4c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a4c2:	d033      	beq.n	800a52c <__gethex+0x136>
 800a4c4:	1c71      	adds	r1, r6, #1
 800a4c6:	f04f 0900 	mov.w	r9, #0
 800a4ca:	7808      	ldrb	r0, [r1, #0]
 800a4cc:	f7ff ff7e 	bl	800a3cc <__hexdig_fun>
 800a4d0:	1e43      	subs	r3, r0, #1
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	2b18      	cmp	r3, #24
 800a4d6:	d831      	bhi.n	800a53c <__gethex+0x146>
 800a4d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a4dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a4e0:	f7ff ff74 	bl	800a3cc <__hexdig_fun>
 800a4e4:	1e43      	subs	r3, r0, #1
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b18      	cmp	r3, #24
 800a4ea:	d922      	bls.n	800a532 <__gethex+0x13c>
 800a4ec:	f1b9 0f00 	cmp.w	r9, #0
 800a4f0:	d000      	beq.n	800a4f4 <__gethex+0xfe>
 800a4f2:	4252      	negs	r2, r2
 800a4f4:	4414      	add	r4, r2
 800a4f6:	f8ca 1000 	str.w	r1, [sl]
 800a4fa:	b30d      	cbz	r5, 800a540 <__gethex+0x14a>
 800a4fc:	f1bb 0f00 	cmp.w	fp, #0
 800a500:	bf0c      	ite	eq
 800a502:	2706      	moveq	r7, #6
 800a504:	2700      	movne	r7, #0
 800a506:	4638      	mov	r0, r7
 800a508:	b00b      	add	sp, #44	; 0x2c
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	f10b 0b01 	add.w	fp, fp, #1
 800a512:	e78a      	b.n	800a42a <__gethex+0x34>
 800a514:	2500      	movs	r5, #0
 800a516:	462c      	mov	r4, r5
 800a518:	e7ae      	b.n	800a478 <__gethex+0x82>
 800a51a:	463e      	mov	r6, r7
 800a51c:	2501      	movs	r5, #1
 800a51e:	e7c7      	b.n	800a4b0 <__gethex+0xba>
 800a520:	4604      	mov	r4, r0
 800a522:	e7fb      	b.n	800a51c <__gethex+0x126>
 800a524:	f04f 0900 	mov.w	r9, #0
 800a528:	1cb1      	adds	r1, r6, #2
 800a52a:	e7ce      	b.n	800a4ca <__gethex+0xd4>
 800a52c:	f04f 0901 	mov.w	r9, #1
 800a530:	e7fa      	b.n	800a528 <__gethex+0x132>
 800a532:	230a      	movs	r3, #10
 800a534:	fb03 0202 	mla	r2, r3, r2, r0
 800a538:	3a10      	subs	r2, #16
 800a53a:	e7cf      	b.n	800a4dc <__gethex+0xe6>
 800a53c:	4631      	mov	r1, r6
 800a53e:	e7da      	b.n	800a4f6 <__gethex+0x100>
 800a540:	1bf3      	subs	r3, r6, r7
 800a542:	3b01      	subs	r3, #1
 800a544:	4629      	mov	r1, r5
 800a546:	2b07      	cmp	r3, #7
 800a548:	dc49      	bgt.n	800a5de <__gethex+0x1e8>
 800a54a:	9802      	ldr	r0, [sp, #8]
 800a54c:	f000 fa4b 	bl	800a9e6 <_Balloc>
 800a550:	9b01      	ldr	r3, [sp, #4]
 800a552:	f100 0914 	add.w	r9, r0, #20
 800a556:	f04f 0b00 	mov.w	fp, #0
 800a55a:	f1c3 0301 	rsb	r3, r3, #1
 800a55e:	4605      	mov	r5, r0
 800a560:	f8cd 9010 	str.w	r9, [sp, #16]
 800a564:	46da      	mov	sl, fp
 800a566:	9308      	str	r3, [sp, #32]
 800a568:	42b7      	cmp	r7, r6
 800a56a:	d33b      	bcc.n	800a5e4 <__gethex+0x1ee>
 800a56c:	9804      	ldr	r0, [sp, #16]
 800a56e:	f840 ab04 	str.w	sl, [r0], #4
 800a572:	eba0 0009 	sub.w	r0, r0, r9
 800a576:	1080      	asrs	r0, r0, #2
 800a578:	6128      	str	r0, [r5, #16]
 800a57a:	0147      	lsls	r7, r0, #5
 800a57c:	4650      	mov	r0, sl
 800a57e:	f000 faf6 	bl	800ab6e <__hi0bits>
 800a582:	f8d8 6000 	ldr.w	r6, [r8]
 800a586:	1a3f      	subs	r7, r7, r0
 800a588:	42b7      	cmp	r7, r6
 800a58a:	dd64      	ble.n	800a656 <__gethex+0x260>
 800a58c:	1bbf      	subs	r7, r7, r6
 800a58e:	4639      	mov	r1, r7
 800a590:	4628      	mov	r0, r5
 800a592:	f000 fe05 	bl	800b1a0 <__any_on>
 800a596:	4682      	mov	sl, r0
 800a598:	b178      	cbz	r0, 800a5ba <__gethex+0x1c4>
 800a59a:	1e7b      	subs	r3, r7, #1
 800a59c:	1159      	asrs	r1, r3, #5
 800a59e:	f003 021f 	and.w	r2, r3, #31
 800a5a2:	f04f 0a01 	mov.w	sl, #1
 800a5a6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5aa:	fa0a f202 	lsl.w	r2, sl, r2
 800a5ae:	420a      	tst	r2, r1
 800a5b0:	d003      	beq.n	800a5ba <__gethex+0x1c4>
 800a5b2:	4553      	cmp	r3, sl
 800a5b4:	dc46      	bgt.n	800a644 <__gethex+0x24e>
 800a5b6:	f04f 0a02 	mov.w	sl, #2
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	4628      	mov	r0, r5
 800a5be:	f7ff fecb 	bl	800a358 <rshift>
 800a5c2:	443c      	add	r4, r7
 800a5c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	da52      	bge.n	800a672 <__gethex+0x27c>
 800a5cc:	4629      	mov	r1, r5
 800a5ce:	9802      	ldr	r0, [sp, #8]
 800a5d0:	f000 fa3d 	bl	800aa4e <_Bfree>
 800a5d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	6013      	str	r3, [r2, #0]
 800a5da:	27a3      	movs	r7, #163	; 0xa3
 800a5dc:	e793      	b.n	800a506 <__gethex+0x110>
 800a5de:	3101      	adds	r1, #1
 800a5e0:	105b      	asrs	r3, r3, #1
 800a5e2:	e7b0      	b.n	800a546 <__gethex+0x150>
 800a5e4:	1e73      	subs	r3, r6, #1
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	9a07      	ldr	r2, [sp, #28]
 800a5ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d018      	beq.n	800a624 <__gethex+0x22e>
 800a5f2:	f1bb 0f20 	cmp.w	fp, #32
 800a5f6:	d107      	bne.n	800a608 <__gethex+0x212>
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	f8c3 a000 	str.w	sl, [r3]
 800a5fe:	3304      	adds	r3, #4
 800a600:	f04f 0a00 	mov.w	sl, #0
 800a604:	9304      	str	r3, [sp, #16]
 800a606:	46d3      	mov	fp, sl
 800a608:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a60c:	f7ff fede 	bl	800a3cc <__hexdig_fun>
 800a610:	f000 000f 	and.w	r0, r0, #15
 800a614:	fa00 f00b 	lsl.w	r0, r0, fp
 800a618:	ea4a 0a00 	orr.w	sl, sl, r0
 800a61c:	f10b 0b04 	add.w	fp, fp, #4
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	e00d      	b.n	800a640 <__gethex+0x24a>
 800a624:	9b05      	ldr	r3, [sp, #20]
 800a626:	9a08      	ldr	r2, [sp, #32]
 800a628:	4413      	add	r3, r2
 800a62a:	42bb      	cmp	r3, r7
 800a62c:	d3e1      	bcc.n	800a5f2 <__gethex+0x1fc>
 800a62e:	4618      	mov	r0, r3
 800a630:	9a01      	ldr	r2, [sp, #4]
 800a632:	9903      	ldr	r1, [sp, #12]
 800a634:	9309      	str	r3, [sp, #36]	; 0x24
 800a636:	f001 f8bd 	bl	800b7b4 <strncmp>
 800a63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d1d8      	bne.n	800a5f2 <__gethex+0x1fc>
 800a640:	461e      	mov	r6, r3
 800a642:	e791      	b.n	800a568 <__gethex+0x172>
 800a644:	1eb9      	subs	r1, r7, #2
 800a646:	4628      	mov	r0, r5
 800a648:	f000 fdaa 	bl	800b1a0 <__any_on>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d0b2      	beq.n	800a5b6 <__gethex+0x1c0>
 800a650:	f04f 0a03 	mov.w	sl, #3
 800a654:	e7b1      	b.n	800a5ba <__gethex+0x1c4>
 800a656:	da09      	bge.n	800a66c <__gethex+0x276>
 800a658:	1bf7      	subs	r7, r6, r7
 800a65a:	4629      	mov	r1, r5
 800a65c:	463a      	mov	r2, r7
 800a65e:	9802      	ldr	r0, [sp, #8]
 800a660:	f000 fbc0 	bl	800ade4 <__lshift>
 800a664:	1be4      	subs	r4, r4, r7
 800a666:	4605      	mov	r5, r0
 800a668:	f100 0914 	add.w	r9, r0, #20
 800a66c:	f04f 0a00 	mov.w	sl, #0
 800a670:	e7a8      	b.n	800a5c4 <__gethex+0x1ce>
 800a672:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a676:	42a0      	cmp	r0, r4
 800a678:	dd6a      	ble.n	800a750 <__gethex+0x35a>
 800a67a:	1b04      	subs	r4, r0, r4
 800a67c:	42a6      	cmp	r6, r4
 800a67e:	dc2e      	bgt.n	800a6de <__gethex+0x2e8>
 800a680:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d022      	beq.n	800a6ce <__gethex+0x2d8>
 800a688:	2b03      	cmp	r3, #3
 800a68a:	d024      	beq.n	800a6d6 <__gethex+0x2e0>
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d115      	bne.n	800a6bc <__gethex+0x2c6>
 800a690:	42a6      	cmp	r6, r4
 800a692:	d113      	bne.n	800a6bc <__gethex+0x2c6>
 800a694:	2e01      	cmp	r6, #1
 800a696:	dc0b      	bgt.n	800a6b0 <__gethex+0x2ba>
 800a698:	9a06      	ldr	r2, [sp, #24]
 800a69a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	612b      	str	r3, [r5, #16]
 800a6a4:	f8c9 3000 	str.w	r3, [r9]
 800a6a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6aa:	2762      	movs	r7, #98	; 0x62
 800a6ac:	601d      	str	r5, [r3, #0]
 800a6ae:	e72a      	b.n	800a506 <__gethex+0x110>
 800a6b0:	1e71      	subs	r1, r6, #1
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	f000 fd74 	bl	800b1a0 <__any_on>
 800a6b8:	2800      	cmp	r0, #0
 800a6ba:	d1ed      	bne.n	800a698 <__gethex+0x2a2>
 800a6bc:	4629      	mov	r1, r5
 800a6be:	9802      	ldr	r0, [sp, #8]
 800a6c0:	f000 f9c5 	bl	800aa4e <_Bfree>
 800a6c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	2750      	movs	r7, #80	; 0x50
 800a6cc:	e71b      	b.n	800a506 <__gethex+0x110>
 800a6ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0e1      	beq.n	800a698 <__gethex+0x2a2>
 800a6d4:	e7f2      	b.n	800a6bc <__gethex+0x2c6>
 800a6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d1dd      	bne.n	800a698 <__gethex+0x2a2>
 800a6dc:	e7ee      	b.n	800a6bc <__gethex+0x2c6>
 800a6de:	1e67      	subs	r7, r4, #1
 800a6e0:	f1ba 0f00 	cmp.w	sl, #0
 800a6e4:	d131      	bne.n	800a74a <__gethex+0x354>
 800a6e6:	b127      	cbz	r7, 800a6f2 <__gethex+0x2fc>
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	f000 fd58 	bl	800b1a0 <__any_on>
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	117a      	asrs	r2, r7, #5
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f007 071f 	and.w	r7, r7, #31
 800a6fa:	fa03 f707 	lsl.w	r7, r3, r7
 800a6fe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a702:	4621      	mov	r1, r4
 800a704:	421f      	tst	r7, r3
 800a706:	4628      	mov	r0, r5
 800a708:	bf18      	it	ne
 800a70a:	f04a 0a02 	orrne.w	sl, sl, #2
 800a70e:	1b36      	subs	r6, r6, r4
 800a710:	f7ff fe22 	bl	800a358 <rshift>
 800a714:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a718:	2702      	movs	r7, #2
 800a71a:	f1ba 0f00 	cmp.w	sl, #0
 800a71e:	d048      	beq.n	800a7b2 <__gethex+0x3bc>
 800a720:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d015      	beq.n	800a754 <__gethex+0x35e>
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d017      	beq.n	800a75c <__gethex+0x366>
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d109      	bne.n	800a744 <__gethex+0x34e>
 800a730:	f01a 0f02 	tst.w	sl, #2
 800a734:	d006      	beq.n	800a744 <__gethex+0x34e>
 800a736:	f8d9 3000 	ldr.w	r3, [r9]
 800a73a:	ea4a 0a03 	orr.w	sl, sl, r3
 800a73e:	f01a 0f01 	tst.w	sl, #1
 800a742:	d10e      	bne.n	800a762 <__gethex+0x36c>
 800a744:	f047 0710 	orr.w	r7, r7, #16
 800a748:	e033      	b.n	800a7b2 <__gethex+0x3bc>
 800a74a:	f04f 0a01 	mov.w	sl, #1
 800a74e:	e7d0      	b.n	800a6f2 <__gethex+0x2fc>
 800a750:	2701      	movs	r7, #1
 800a752:	e7e2      	b.n	800a71a <__gethex+0x324>
 800a754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a756:	f1c3 0301 	rsb	r3, r3, #1
 800a75a:	9315      	str	r3, [sp, #84]	; 0x54
 800a75c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0f0      	beq.n	800a744 <__gethex+0x34e>
 800a762:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a766:	f105 0314 	add.w	r3, r5, #20
 800a76a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a76e:	eb03 010a 	add.w	r1, r3, sl
 800a772:	f04f 0c00 	mov.w	ip, #0
 800a776:	4618      	mov	r0, r3
 800a778:	f853 2b04 	ldr.w	r2, [r3], #4
 800a77c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a780:	d01c      	beq.n	800a7bc <__gethex+0x3c6>
 800a782:	3201      	adds	r2, #1
 800a784:	6002      	str	r2, [r0, #0]
 800a786:	2f02      	cmp	r7, #2
 800a788:	f105 0314 	add.w	r3, r5, #20
 800a78c:	d138      	bne.n	800a800 <__gethex+0x40a>
 800a78e:	f8d8 2000 	ldr.w	r2, [r8]
 800a792:	3a01      	subs	r2, #1
 800a794:	42b2      	cmp	r2, r6
 800a796:	d10a      	bne.n	800a7ae <__gethex+0x3b8>
 800a798:	1171      	asrs	r1, r6, #5
 800a79a:	2201      	movs	r2, #1
 800a79c:	f006 061f 	and.w	r6, r6, #31
 800a7a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7a4:	fa02 f606 	lsl.w	r6, r2, r6
 800a7a8:	421e      	tst	r6, r3
 800a7aa:	bf18      	it	ne
 800a7ac:	4617      	movne	r7, r2
 800a7ae:	f047 0720 	orr.w	r7, r7, #32
 800a7b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a7b4:	601d      	str	r5, [r3, #0]
 800a7b6:	9b06      	ldr	r3, [sp, #24]
 800a7b8:	601c      	str	r4, [r3, #0]
 800a7ba:	e6a4      	b.n	800a506 <__gethex+0x110>
 800a7bc:	4299      	cmp	r1, r3
 800a7be:	f843 cc04 	str.w	ip, [r3, #-4]
 800a7c2:	d8d8      	bhi.n	800a776 <__gethex+0x380>
 800a7c4:	68ab      	ldr	r3, [r5, #8]
 800a7c6:	4599      	cmp	r9, r3
 800a7c8:	db12      	blt.n	800a7f0 <__gethex+0x3fa>
 800a7ca:	6869      	ldr	r1, [r5, #4]
 800a7cc:	9802      	ldr	r0, [sp, #8]
 800a7ce:	3101      	adds	r1, #1
 800a7d0:	f000 f909 	bl	800a9e6 <_Balloc>
 800a7d4:	692a      	ldr	r2, [r5, #16]
 800a7d6:	3202      	adds	r2, #2
 800a7d8:	f105 010c 	add.w	r1, r5, #12
 800a7dc:	4683      	mov	fp, r0
 800a7de:	0092      	lsls	r2, r2, #2
 800a7e0:	300c      	adds	r0, #12
 800a7e2:	f000 f8f3 	bl	800a9cc <memcpy>
 800a7e6:	4629      	mov	r1, r5
 800a7e8:	9802      	ldr	r0, [sp, #8]
 800a7ea:	f000 f930 	bl	800aa4e <_Bfree>
 800a7ee:	465d      	mov	r5, fp
 800a7f0:	692b      	ldr	r3, [r5, #16]
 800a7f2:	1c5a      	adds	r2, r3, #1
 800a7f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a7f8:	612a      	str	r2, [r5, #16]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	615a      	str	r2, [r3, #20]
 800a7fe:	e7c2      	b.n	800a786 <__gethex+0x390>
 800a800:	692a      	ldr	r2, [r5, #16]
 800a802:	454a      	cmp	r2, r9
 800a804:	dd0b      	ble.n	800a81e <__gethex+0x428>
 800a806:	2101      	movs	r1, #1
 800a808:	4628      	mov	r0, r5
 800a80a:	f7ff fda5 	bl	800a358 <rshift>
 800a80e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a812:	3401      	adds	r4, #1
 800a814:	42a3      	cmp	r3, r4
 800a816:	f6ff aed9 	blt.w	800a5cc <__gethex+0x1d6>
 800a81a:	2701      	movs	r7, #1
 800a81c:	e7c7      	b.n	800a7ae <__gethex+0x3b8>
 800a81e:	f016 061f 	ands.w	r6, r6, #31
 800a822:	d0fa      	beq.n	800a81a <__gethex+0x424>
 800a824:	449a      	add	sl, r3
 800a826:	f1c6 0620 	rsb	r6, r6, #32
 800a82a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a82e:	f000 f99e 	bl	800ab6e <__hi0bits>
 800a832:	42b0      	cmp	r0, r6
 800a834:	dbe7      	blt.n	800a806 <__gethex+0x410>
 800a836:	e7f0      	b.n	800a81a <__gethex+0x424>

0800a838 <L_shift>:
 800a838:	f1c2 0208 	rsb	r2, r2, #8
 800a83c:	0092      	lsls	r2, r2, #2
 800a83e:	b570      	push	{r4, r5, r6, lr}
 800a840:	f1c2 0620 	rsb	r6, r2, #32
 800a844:	6843      	ldr	r3, [r0, #4]
 800a846:	6804      	ldr	r4, [r0, #0]
 800a848:	fa03 f506 	lsl.w	r5, r3, r6
 800a84c:	432c      	orrs	r4, r5
 800a84e:	40d3      	lsrs	r3, r2
 800a850:	6004      	str	r4, [r0, #0]
 800a852:	f840 3f04 	str.w	r3, [r0, #4]!
 800a856:	4288      	cmp	r0, r1
 800a858:	d3f4      	bcc.n	800a844 <L_shift+0xc>
 800a85a:	bd70      	pop	{r4, r5, r6, pc}

0800a85c <__match>:
 800a85c:	b530      	push	{r4, r5, lr}
 800a85e:	6803      	ldr	r3, [r0, #0]
 800a860:	3301      	adds	r3, #1
 800a862:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a866:	b914      	cbnz	r4, 800a86e <__match+0x12>
 800a868:	6003      	str	r3, [r0, #0]
 800a86a:	2001      	movs	r0, #1
 800a86c:	bd30      	pop	{r4, r5, pc}
 800a86e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a872:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a876:	2d19      	cmp	r5, #25
 800a878:	bf98      	it	ls
 800a87a:	3220      	addls	r2, #32
 800a87c:	42a2      	cmp	r2, r4
 800a87e:	d0f0      	beq.n	800a862 <__match+0x6>
 800a880:	2000      	movs	r0, #0
 800a882:	e7f3      	b.n	800a86c <__match+0x10>

0800a884 <__hexnan>:
 800a884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a888:	680b      	ldr	r3, [r1, #0]
 800a88a:	6801      	ldr	r1, [r0, #0]
 800a88c:	115f      	asrs	r7, r3, #5
 800a88e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a892:	f013 031f 	ands.w	r3, r3, #31
 800a896:	b087      	sub	sp, #28
 800a898:	bf18      	it	ne
 800a89a:	3704      	addne	r7, #4
 800a89c:	2500      	movs	r5, #0
 800a89e:	1f3e      	subs	r6, r7, #4
 800a8a0:	4682      	mov	sl, r0
 800a8a2:	4690      	mov	r8, r2
 800a8a4:	9301      	str	r3, [sp, #4]
 800a8a6:	f847 5c04 	str.w	r5, [r7, #-4]
 800a8aa:	46b1      	mov	r9, r6
 800a8ac:	4634      	mov	r4, r6
 800a8ae:	9502      	str	r5, [sp, #8]
 800a8b0:	46ab      	mov	fp, r5
 800a8b2:	784a      	ldrb	r2, [r1, #1]
 800a8b4:	1c4b      	adds	r3, r1, #1
 800a8b6:	9303      	str	r3, [sp, #12]
 800a8b8:	b342      	cbz	r2, 800a90c <__hexnan+0x88>
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	9105      	str	r1, [sp, #20]
 800a8be:	9204      	str	r2, [sp, #16]
 800a8c0:	f7ff fd84 	bl	800a3cc <__hexdig_fun>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d143      	bne.n	800a950 <__hexnan+0xcc>
 800a8c8:	9a04      	ldr	r2, [sp, #16]
 800a8ca:	9905      	ldr	r1, [sp, #20]
 800a8cc:	2a20      	cmp	r2, #32
 800a8ce:	d818      	bhi.n	800a902 <__hexnan+0x7e>
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	459b      	cmp	fp, r3
 800a8d4:	dd13      	ble.n	800a8fe <__hexnan+0x7a>
 800a8d6:	454c      	cmp	r4, r9
 800a8d8:	d206      	bcs.n	800a8e8 <__hexnan+0x64>
 800a8da:	2d07      	cmp	r5, #7
 800a8dc:	dc04      	bgt.n	800a8e8 <__hexnan+0x64>
 800a8de:	462a      	mov	r2, r5
 800a8e0:	4649      	mov	r1, r9
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f7ff ffa8 	bl	800a838 <L_shift>
 800a8e8:	4544      	cmp	r4, r8
 800a8ea:	d944      	bls.n	800a976 <__hexnan+0xf2>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f1a4 0904 	sub.w	r9, r4, #4
 800a8f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8f6:	f8cd b008 	str.w	fp, [sp, #8]
 800a8fa:	464c      	mov	r4, r9
 800a8fc:	461d      	mov	r5, r3
 800a8fe:	9903      	ldr	r1, [sp, #12]
 800a900:	e7d7      	b.n	800a8b2 <__hexnan+0x2e>
 800a902:	2a29      	cmp	r2, #41	; 0x29
 800a904:	d14a      	bne.n	800a99c <__hexnan+0x118>
 800a906:	3102      	adds	r1, #2
 800a908:	f8ca 1000 	str.w	r1, [sl]
 800a90c:	f1bb 0f00 	cmp.w	fp, #0
 800a910:	d044      	beq.n	800a99c <__hexnan+0x118>
 800a912:	454c      	cmp	r4, r9
 800a914:	d206      	bcs.n	800a924 <__hexnan+0xa0>
 800a916:	2d07      	cmp	r5, #7
 800a918:	dc04      	bgt.n	800a924 <__hexnan+0xa0>
 800a91a:	462a      	mov	r2, r5
 800a91c:	4649      	mov	r1, r9
 800a91e:	4620      	mov	r0, r4
 800a920:	f7ff ff8a 	bl	800a838 <L_shift>
 800a924:	4544      	cmp	r4, r8
 800a926:	d928      	bls.n	800a97a <__hexnan+0xf6>
 800a928:	4643      	mov	r3, r8
 800a92a:	f854 2b04 	ldr.w	r2, [r4], #4
 800a92e:	f843 2b04 	str.w	r2, [r3], #4
 800a932:	42a6      	cmp	r6, r4
 800a934:	d2f9      	bcs.n	800a92a <__hexnan+0xa6>
 800a936:	2200      	movs	r2, #0
 800a938:	f843 2b04 	str.w	r2, [r3], #4
 800a93c:	429e      	cmp	r6, r3
 800a93e:	d2fb      	bcs.n	800a938 <__hexnan+0xb4>
 800a940:	6833      	ldr	r3, [r6, #0]
 800a942:	b91b      	cbnz	r3, 800a94c <__hexnan+0xc8>
 800a944:	4546      	cmp	r6, r8
 800a946:	d127      	bne.n	800a998 <__hexnan+0x114>
 800a948:	2301      	movs	r3, #1
 800a94a:	6033      	str	r3, [r6, #0]
 800a94c:	2005      	movs	r0, #5
 800a94e:	e026      	b.n	800a99e <__hexnan+0x11a>
 800a950:	3501      	adds	r5, #1
 800a952:	2d08      	cmp	r5, #8
 800a954:	f10b 0b01 	add.w	fp, fp, #1
 800a958:	dd06      	ble.n	800a968 <__hexnan+0xe4>
 800a95a:	4544      	cmp	r4, r8
 800a95c:	d9cf      	bls.n	800a8fe <__hexnan+0x7a>
 800a95e:	2300      	movs	r3, #0
 800a960:	f844 3c04 	str.w	r3, [r4, #-4]
 800a964:	2501      	movs	r5, #1
 800a966:	3c04      	subs	r4, #4
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	f000 000f 	and.w	r0, r0, #15
 800a96e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a972:	6020      	str	r0, [r4, #0]
 800a974:	e7c3      	b.n	800a8fe <__hexnan+0x7a>
 800a976:	2508      	movs	r5, #8
 800a978:	e7c1      	b.n	800a8fe <__hexnan+0x7a>
 800a97a:	9b01      	ldr	r3, [sp, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d0df      	beq.n	800a940 <__hexnan+0xbc>
 800a980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a984:	f1c3 0320 	rsb	r3, r3, #32
 800a988:	fa22 f303 	lsr.w	r3, r2, r3
 800a98c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a990:	401a      	ands	r2, r3
 800a992:	f847 2c04 	str.w	r2, [r7, #-4]
 800a996:	e7d3      	b.n	800a940 <__hexnan+0xbc>
 800a998:	3e04      	subs	r6, #4
 800a99a:	e7d1      	b.n	800a940 <__hexnan+0xbc>
 800a99c:	2004      	movs	r0, #4
 800a99e:	b007      	add	sp, #28
 800a9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9a4 <__localeconv_l>:
 800a9a4:	30f0      	adds	r0, #240	; 0xf0
 800a9a6:	4770      	bx	lr

0800a9a8 <__ascii_mbtowc>:
 800a9a8:	b082      	sub	sp, #8
 800a9aa:	b901      	cbnz	r1, 800a9ae <__ascii_mbtowc+0x6>
 800a9ac:	a901      	add	r1, sp, #4
 800a9ae:	b142      	cbz	r2, 800a9c2 <__ascii_mbtowc+0x1a>
 800a9b0:	b14b      	cbz	r3, 800a9c6 <__ascii_mbtowc+0x1e>
 800a9b2:	7813      	ldrb	r3, [r2, #0]
 800a9b4:	600b      	str	r3, [r1, #0]
 800a9b6:	7812      	ldrb	r2, [r2, #0]
 800a9b8:	1c10      	adds	r0, r2, #0
 800a9ba:	bf18      	it	ne
 800a9bc:	2001      	movne	r0, #1
 800a9be:	b002      	add	sp, #8
 800a9c0:	4770      	bx	lr
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	e7fb      	b.n	800a9be <__ascii_mbtowc+0x16>
 800a9c6:	f06f 0001 	mvn.w	r0, #1
 800a9ca:	e7f8      	b.n	800a9be <__ascii_mbtowc+0x16>

0800a9cc <memcpy>:
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	1e43      	subs	r3, r0, #1
 800a9d0:	440a      	add	r2, r1
 800a9d2:	4291      	cmp	r1, r2
 800a9d4:	d100      	bne.n	800a9d8 <memcpy+0xc>
 800a9d6:	bd10      	pop	{r4, pc}
 800a9d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9e0:	e7f7      	b.n	800a9d2 <memcpy+0x6>

0800a9e2 <__malloc_lock>:
 800a9e2:	4770      	bx	lr

0800a9e4 <__malloc_unlock>:
 800a9e4:	4770      	bx	lr

0800a9e6 <_Balloc>:
 800a9e6:	b570      	push	{r4, r5, r6, lr}
 800a9e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	460e      	mov	r6, r1
 800a9ee:	b93d      	cbnz	r5, 800aa00 <_Balloc+0x1a>
 800a9f0:	2010      	movs	r0, #16
 800a9f2:	f7fe fd93 	bl	800951c <malloc>
 800a9f6:	6260      	str	r0, [r4, #36]	; 0x24
 800a9f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9fc:	6005      	str	r5, [r0, #0]
 800a9fe:	60c5      	str	r5, [r0, #12]
 800aa00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800aa02:	68eb      	ldr	r3, [r5, #12]
 800aa04:	b183      	cbz	r3, 800aa28 <_Balloc+0x42>
 800aa06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aa0e:	b9b8      	cbnz	r0, 800aa40 <_Balloc+0x5a>
 800aa10:	2101      	movs	r1, #1
 800aa12:	fa01 f506 	lsl.w	r5, r1, r6
 800aa16:	1d6a      	adds	r2, r5, #5
 800aa18:	0092      	lsls	r2, r2, #2
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fbe1 	bl	800b1e2 <_calloc_r>
 800aa20:	b160      	cbz	r0, 800aa3c <_Balloc+0x56>
 800aa22:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aa26:	e00e      	b.n	800aa46 <_Balloc+0x60>
 800aa28:	2221      	movs	r2, #33	; 0x21
 800aa2a:	2104      	movs	r1, #4
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f000 fbd8 	bl	800b1e2 <_calloc_r>
 800aa32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa34:	60e8      	str	r0, [r5, #12]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d1e4      	bne.n	800aa06 <_Balloc+0x20>
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	6802      	ldr	r2, [r0, #0]
 800aa42:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aa46:	2300      	movs	r3, #0
 800aa48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa4c:	e7f7      	b.n	800aa3e <_Balloc+0x58>

0800aa4e <_Bfree>:
 800aa4e:	b570      	push	{r4, r5, r6, lr}
 800aa50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aa52:	4606      	mov	r6, r0
 800aa54:	460d      	mov	r5, r1
 800aa56:	b93c      	cbnz	r4, 800aa68 <_Bfree+0x1a>
 800aa58:	2010      	movs	r0, #16
 800aa5a:	f7fe fd5f 	bl	800951c <malloc>
 800aa5e:	6270      	str	r0, [r6, #36]	; 0x24
 800aa60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa64:	6004      	str	r4, [r0, #0]
 800aa66:	60c4      	str	r4, [r0, #12]
 800aa68:	b13d      	cbz	r5, 800aa7a <_Bfree+0x2c>
 800aa6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aa6c:	686a      	ldr	r2, [r5, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa74:	6029      	str	r1, [r5, #0]
 800aa76:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800aa7a:	bd70      	pop	{r4, r5, r6, pc}

0800aa7c <__multadd>:
 800aa7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa80:	690d      	ldr	r5, [r1, #16]
 800aa82:	461f      	mov	r7, r3
 800aa84:	4606      	mov	r6, r0
 800aa86:	460c      	mov	r4, r1
 800aa88:	f101 0c14 	add.w	ip, r1, #20
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	f8dc 0000 	ldr.w	r0, [ip]
 800aa92:	b281      	uxth	r1, r0
 800aa94:	fb02 7101 	mla	r1, r2, r1, r7
 800aa98:	0c0f      	lsrs	r7, r1, #16
 800aa9a:	0c00      	lsrs	r0, r0, #16
 800aa9c:	fb02 7000 	mla	r0, r2, r0, r7
 800aaa0:	b289      	uxth	r1, r1
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800aaa8:	429d      	cmp	r5, r3
 800aaaa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800aaae:	f84c 1b04 	str.w	r1, [ip], #4
 800aab2:	dcec      	bgt.n	800aa8e <__multadd+0x12>
 800aab4:	b1d7      	cbz	r7, 800aaec <__multadd+0x70>
 800aab6:	68a3      	ldr	r3, [r4, #8]
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dc12      	bgt.n	800aae2 <__multadd+0x66>
 800aabc:	6861      	ldr	r1, [r4, #4]
 800aabe:	4630      	mov	r0, r6
 800aac0:	3101      	adds	r1, #1
 800aac2:	f7ff ff90 	bl	800a9e6 <_Balloc>
 800aac6:	6922      	ldr	r2, [r4, #16]
 800aac8:	3202      	adds	r2, #2
 800aaca:	f104 010c 	add.w	r1, r4, #12
 800aace:	4680      	mov	r8, r0
 800aad0:	0092      	lsls	r2, r2, #2
 800aad2:	300c      	adds	r0, #12
 800aad4:	f7ff ff7a 	bl	800a9cc <memcpy>
 800aad8:	4621      	mov	r1, r4
 800aada:	4630      	mov	r0, r6
 800aadc:	f7ff ffb7 	bl	800aa4e <_Bfree>
 800aae0:	4644      	mov	r4, r8
 800aae2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aae6:	3501      	adds	r5, #1
 800aae8:	615f      	str	r7, [r3, #20]
 800aaea:	6125      	str	r5, [r4, #16]
 800aaec:	4620      	mov	r0, r4
 800aaee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800aaf2 <__s2b>:
 800aaf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	4615      	mov	r5, r2
 800aafa:	461f      	mov	r7, r3
 800aafc:	2209      	movs	r2, #9
 800aafe:	3308      	adds	r3, #8
 800ab00:	4606      	mov	r6, r0
 800ab02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab06:	2100      	movs	r1, #0
 800ab08:	2201      	movs	r2, #1
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	db20      	blt.n	800ab50 <__s2b+0x5e>
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7ff ff69 	bl	800a9e6 <_Balloc>
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	6143      	str	r3, [r0, #20]
 800ab18:	2d09      	cmp	r5, #9
 800ab1a:	f04f 0301 	mov.w	r3, #1
 800ab1e:	6103      	str	r3, [r0, #16]
 800ab20:	dd19      	ble.n	800ab56 <__s2b+0x64>
 800ab22:	f104 0809 	add.w	r8, r4, #9
 800ab26:	46c1      	mov	r9, r8
 800ab28:	442c      	add	r4, r5
 800ab2a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ab2e:	4601      	mov	r1, r0
 800ab30:	3b30      	subs	r3, #48	; 0x30
 800ab32:	220a      	movs	r2, #10
 800ab34:	4630      	mov	r0, r6
 800ab36:	f7ff ffa1 	bl	800aa7c <__multadd>
 800ab3a:	45a1      	cmp	r9, r4
 800ab3c:	d1f5      	bne.n	800ab2a <__s2b+0x38>
 800ab3e:	eb08 0405 	add.w	r4, r8, r5
 800ab42:	3c08      	subs	r4, #8
 800ab44:	1b2d      	subs	r5, r5, r4
 800ab46:	1963      	adds	r3, r4, r5
 800ab48:	42bb      	cmp	r3, r7
 800ab4a:	db07      	blt.n	800ab5c <__s2b+0x6a>
 800ab4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab50:	0052      	lsls	r2, r2, #1
 800ab52:	3101      	adds	r1, #1
 800ab54:	e7d9      	b.n	800ab0a <__s2b+0x18>
 800ab56:	340a      	adds	r4, #10
 800ab58:	2509      	movs	r5, #9
 800ab5a:	e7f3      	b.n	800ab44 <__s2b+0x52>
 800ab5c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab60:	4601      	mov	r1, r0
 800ab62:	3b30      	subs	r3, #48	; 0x30
 800ab64:	220a      	movs	r2, #10
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7ff ff88 	bl	800aa7c <__multadd>
 800ab6c:	e7eb      	b.n	800ab46 <__s2b+0x54>

0800ab6e <__hi0bits>:
 800ab6e:	0c02      	lsrs	r2, r0, #16
 800ab70:	0412      	lsls	r2, r2, #16
 800ab72:	4603      	mov	r3, r0
 800ab74:	b9b2      	cbnz	r2, 800aba4 <__hi0bits+0x36>
 800ab76:	0403      	lsls	r3, r0, #16
 800ab78:	2010      	movs	r0, #16
 800ab7a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ab7e:	bf04      	itt	eq
 800ab80:	021b      	lsleq	r3, r3, #8
 800ab82:	3008      	addeq	r0, #8
 800ab84:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ab88:	bf04      	itt	eq
 800ab8a:	011b      	lsleq	r3, r3, #4
 800ab8c:	3004      	addeq	r0, #4
 800ab8e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ab92:	bf04      	itt	eq
 800ab94:	009b      	lsleq	r3, r3, #2
 800ab96:	3002      	addeq	r0, #2
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	db06      	blt.n	800abaa <__hi0bits+0x3c>
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	d503      	bpl.n	800aba8 <__hi0bits+0x3a>
 800aba0:	3001      	adds	r0, #1
 800aba2:	4770      	bx	lr
 800aba4:	2000      	movs	r0, #0
 800aba6:	e7e8      	b.n	800ab7a <__hi0bits+0xc>
 800aba8:	2020      	movs	r0, #32
 800abaa:	4770      	bx	lr

0800abac <__lo0bits>:
 800abac:	6803      	ldr	r3, [r0, #0]
 800abae:	f013 0207 	ands.w	r2, r3, #7
 800abb2:	4601      	mov	r1, r0
 800abb4:	d00b      	beq.n	800abce <__lo0bits+0x22>
 800abb6:	07da      	lsls	r2, r3, #31
 800abb8:	d423      	bmi.n	800ac02 <__lo0bits+0x56>
 800abba:	0798      	lsls	r0, r3, #30
 800abbc:	bf49      	itett	mi
 800abbe:	085b      	lsrmi	r3, r3, #1
 800abc0:	089b      	lsrpl	r3, r3, #2
 800abc2:	2001      	movmi	r0, #1
 800abc4:	600b      	strmi	r3, [r1, #0]
 800abc6:	bf5c      	itt	pl
 800abc8:	600b      	strpl	r3, [r1, #0]
 800abca:	2002      	movpl	r0, #2
 800abcc:	4770      	bx	lr
 800abce:	b298      	uxth	r0, r3
 800abd0:	b9a8      	cbnz	r0, 800abfe <__lo0bits+0x52>
 800abd2:	0c1b      	lsrs	r3, r3, #16
 800abd4:	2010      	movs	r0, #16
 800abd6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800abda:	bf04      	itt	eq
 800abdc:	0a1b      	lsreq	r3, r3, #8
 800abde:	3008      	addeq	r0, #8
 800abe0:	071a      	lsls	r2, r3, #28
 800abe2:	bf04      	itt	eq
 800abe4:	091b      	lsreq	r3, r3, #4
 800abe6:	3004      	addeq	r0, #4
 800abe8:	079a      	lsls	r2, r3, #30
 800abea:	bf04      	itt	eq
 800abec:	089b      	lsreq	r3, r3, #2
 800abee:	3002      	addeq	r0, #2
 800abf0:	07da      	lsls	r2, r3, #31
 800abf2:	d402      	bmi.n	800abfa <__lo0bits+0x4e>
 800abf4:	085b      	lsrs	r3, r3, #1
 800abf6:	d006      	beq.n	800ac06 <__lo0bits+0x5a>
 800abf8:	3001      	adds	r0, #1
 800abfa:	600b      	str	r3, [r1, #0]
 800abfc:	4770      	bx	lr
 800abfe:	4610      	mov	r0, r2
 800ac00:	e7e9      	b.n	800abd6 <__lo0bits+0x2a>
 800ac02:	2000      	movs	r0, #0
 800ac04:	4770      	bx	lr
 800ac06:	2020      	movs	r0, #32
 800ac08:	4770      	bx	lr

0800ac0a <__i2b>:
 800ac0a:	b510      	push	{r4, lr}
 800ac0c:	460c      	mov	r4, r1
 800ac0e:	2101      	movs	r1, #1
 800ac10:	f7ff fee9 	bl	800a9e6 <_Balloc>
 800ac14:	2201      	movs	r2, #1
 800ac16:	6144      	str	r4, [r0, #20]
 800ac18:	6102      	str	r2, [r0, #16]
 800ac1a:	bd10      	pop	{r4, pc}

0800ac1c <__multiply>:
 800ac1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac20:	4614      	mov	r4, r2
 800ac22:	690a      	ldr	r2, [r1, #16]
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	bfb8      	it	lt
 800ac2a:	460b      	movlt	r3, r1
 800ac2c:	4688      	mov	r8, r1
 800ac2e:	bfbc      	itt	lt
 800ac30:	46a0      	movlt	r8, r4
 800ac32:	461c      	movlt	r4, r3
 800ac34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac38:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ac3c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac40:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac44:	eb07 0609 	add.w	r6, r7, r9
 800ac48:	42b3      	cmp	r3, r6
 800ac4a:	bfb8      	it	lt
 800ac4c:	3101      	addlt	r1, #1
 800ac4e:	f7ff feca 	bl	800a9e6 <_Balloc>
 800ac52:	f100 0514 	add.w	r5, r0, #20
 800ac56:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ac5a:	462b      	mov	r3, r5
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	4573      	cmp	r3, lr
 800ac60:	d316      	bcc.n	800ac90 <__multiply+0x74>
 800ac62:	f104 0214 	add.w	r2, r4, #20
 800ac66:	f108 0114 	add.w	r1, r8, #20
 800ac6a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ac6e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	9b00      	ldr	r3, [sp, #0]
 800ac76:	9201      	str	r2, [sp, #4]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d80c      	bhi.n	800ac96 <__multiply+0x7a>
 800ac7c:	2e00      	cmp	r6, #0
 800ac7e:	dd03      	ble.n	800ac88 <__multiply+0x6c>
 800ac80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d05d      	beq.n	800ad44 <__multiply+0x128>
 800ac88:	6106      	str	r6, [r0, #16]
 800ac8a:	b003      	add	sp, #12
 800ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac90:	f843 2b04 	str.w	r2, [r3], #4
 800ac94:	e7e3      	b.n	800ac5e <__multiply+0x42>
 800ac96:	f8b2 b000 	ldrh.w	fp, [r2]
 800ac9a:	f1bb 0f00 	cmp.w	fp, #0
 800ac9e:	d023      	beq.n	800ace8 <__multiply+0xcc>
 800aca0:	4689      	mov	r9, r1
 800aca2:	46ac      	mov	ip, r5
 800aca4:	f04f 0800 	mov.w	r8, #0
 800aca8:	f859 4b04 	ldr.w	r4, [r9], #4
 800acac:	f8dc a000 	ldr.w	sl, [ip]
 800acb0:	b2a3      	uxth	r3, r4
 800acb2:	fa1f fa8a 	uxth.w	sl, sl
 800acb6:	fb0b a303 	mla	r3, fp, r3, sl
 800acba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800acbe:	f8dc 4000 	ldr.w	r4, [ip]
 800acc2:	4443      	add	r3, r8
 800acc4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800acc8:	fb0b 840a 	mla	r4, fp, sl, r8
 800accc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800acd0:	46e2      	mov	sl, ip
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800acd8:	454f      	cmp	r7, r9
 800acda:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800acde:	f84a 3b04 	str.w	r3, [sl], #4
 800ace2:	d82b      	bhi.n	800ad3c <__multiply+0x120>
 800ace4:	f8cc 8004 	str.w	r8, [ip, #4]
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800acee:	3204      	adds	r2, #4
 800acf0:	f1ba 0f00 	cmp.w	sl, #0
 800acf4:	d020      	beq.n	800ad38 <__multiply+0x11c>
 800acf6:	682b      	ldr	r3, [r5, #0]
 800acf8:	4689      	mov	r9, r1
 800acfa:	46a8      	mov	r8, r5
 800acfc:	f04f 0b00 	mov.w	fp, #0
 800ad00:	f8b9 c000 	ldrh.w	ip, [r9]
 800ad04:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ad08:	fb0a 440c 	mla	r4, sl, ip, r4
 800ad0c:	445c      	add	r4, fp
 800ad0e:	46c4      	mov	ip, r8
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ad16:	f84c 3b04 	str.w	r3, [ip], #4
 800ad1a:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad1e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ad22:	0c1b      	lsrs	r3, r3, #16
 800ad24:	fb0a b303 	mla	r3, sl, r3, fp
 800ad28:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ad2c:	454f      	cmp	r7, r9
 800ad2e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ad32:	d805      	bhi.n	800ad40 <__multiply+0x124>
 800ad34:	f8c8 3004 	str.w	r3, [r8, #4]
 800ad38:	3504      	adds	r5, #4
 800ad3a:	e79b      	b.n	800ac74 <__multiply+0x58>
 800ad3c:	46d4      	mov	ip, sl
 800ad3e:	e7b3      	b.n	800aca8 <__multiply+0x8c>
 800ad40:	46e0      	mov	r8, ip
 800ad42:	e7dd      	b.n	800ad00 <__multiply+0xe4>
 800ad44:	3e01      	subs	r6, #1
 800ad46:	e799      	b.n	800ac7c <__multiply+0x60>

0800ad48 <__pow5mult>:
 800ad48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad4c:	4615      	mov	r5, r2
 800ad4e:	f012 0203 	ands.w	r2, r2, #3
 800ad52:	4606      	mov	r6, r0
 800ad54:	460f      	mov	r7, r1
 800ad56:	d007      	beq.n	800ad68 <__pow5mult+0x20>
 800ad58:	3a01      	subs	r2, #1
 800ad5a:	4c21      	ldr	r4, [pc, #132]	; (800ade0 <__pow5mult+0x98>)
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ad62:	f7ff fe8b 	bl	800aa7c <__multadd>
 800ad66:	4607      	mov	r7, r0
 800ad68:	10ad      	asrs	r5, r5, #2
 800ad6a:	d035      	beq.n	800add8 <__pow5mult+0x90>
 800ad6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ad6e:	b93c      	cbnz	r4, 800ad80 <__pow5mult+0x38>
 800ad70:	2010      	movs	r0, #16
 800ad72:	f7fe fbd3 	bl	800951c <malloc>
 800ad76:	6270      	str	r0, [r6, #36]	; 0x24
 800ad78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad7c:	6004      	str	r4, [r0, #0]
 800ad7e:	60c4      	str	r4, [r0, #12]
 800ad80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ad84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad88:	b94c      	cbnz	r4, 800ad9e <__pow5mult+0x56>
 800ad8a:	f240 2171 	movw	r1, #625	; 0x271
 800ad8e:	4630      	mov	r0, r6
 800ad90:	f7ff ff3b 	bl	800ac0a <__i2b>
 800ad94:	2300      	movs	r3, #0
 800ad96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	6003      	str	r3, [r0, #0]
 800ad9e:	f04f 0800 	mov.w	r8, #0
 800ada2:	07eb      	lsls	r3, r5, #31
 800ada4:	d50a      	bpl.n	800adbc <__pow5mult+0x74>
 800ada6:	4639      	mov	r1, r7
 800ada8:	4622      	mov	r2, r4
 800adaa:	4630      	mov	r0, r6
 800adac:	f7ff ff36 	bl	800ac1c <__multiply>
 800adb0:	4639      	mov	r1, r7
 800adb2:	4681      	mov	r9, r0
 800adb4:	4630      	mov	r0, r6
 800adb6:	f7ff fe4a 	bl	800aa4e <_Bfree>
 800adba:	464f      	mov	r7, r9
 800adbc:	106d      	asrs	r5, r5, #1
 800adbe:	d00b      	beq.n	800add8 <__pow5mult+0x90>
 800adc0:	6820      	ldr	r0, [r4, #0]
 800adc2:	b938      	cbnz	r0, 800add4 <__pow5mult+0x8c>
 800adc4:	4622      	mov	r2, r4
 800adc6:	4621      	mov	r1, r4
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff ff27 	bl	800ac1c <__multiply>
 800adce:	6020      	str	r0, [r4, #0]
 800add0:	f8c0 8000 	str.w	r8, [r0]
 800add4:	4604      	mov	r4, r0
 800add6:	e7e4      	b.n	800ada2 <__pow5mult+0x5a>
 800add8:	4638      	mov	r0, r7
 800adda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adde:	bf00      	nop
 800ade0:	0800bba8 	.word	0x0800bba8

0800ade4 <__lshift>:
 800ade4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ade8:	460c      	mov	r4, r1
 800adea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800adee:	6923      	ldr	r3, [r4, #16]
 800adf0:	6849      	ldr	r1, [r1, #4]
 800adf2:	eb0a 0903 	add.w	r9, sl, r3
 800adf6:	68a3      	ldr	r3, [r4, #8]
 800adf8:	4607      	mov	r7, r0
 800adfa:	4616      	mov	r6, r2
 800adfc:	f109 0501 	add.w	r5, r9, #1
 800ae00:	42ab      	cmp	r3, r5
 800ae02:	db32      	blt.n	800ae6a <__lshift+0x86>
 800ae04:	4638      	mov	r0, r7
 800ae06:	f7ff fdee 	bl	800a9e6 <_Balloc>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	4680      	mov	r8, r0
 800ae0e:	f100 0114 	add.w	r1, r0, #20
 800ae12:	461a      	mov	r2, r3
 800ae14:	4553      	cmp	r3, sl
 800ae16:	db2b      	blt.n	800ae70 <__lshift+0x8c>
 800ae18:	6920      	ldr	r0, [r4, #16]
 800ae1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae1e:	f104 0314 	add.w	r3, r4, #20
 800ae22:	f016 021f 	ands.w	r2, r6, #31
 800ae26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ae2e:	d025      	beq.n	800ae7c <__lshift+0x98>
 800ae30:	f1c2 0e20 	rsb	lr, r2, #32
 800ae34:	2000      	movs	r0, #0
 800ae36:	681e      	ldr	r6, [r3, #0]
 800ae38:	468a      	mov	sl, r1
 800ae3a:	4096      	lsls	r6, r2
 800ae3c:	4330      	orrs	r0, r6
 800ae3e:	f84a 0b04 	str.w	r0, [sl], #4
 800ae42:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae46:	459c      	cmp	ip, r3
 800ae48:	fa20 f00e 	lsr.w	r0, r0, lr
 800ae4c:	d814      	bhi.n	800ae78 <__lshift+0x94>
 800ae4e:	6048      	str	r0, [r1, #4]
 800ae50:	b108      	cbz	r0, 800ae56 <__lshift+0x72>
 800ae52:	f109 0502 	add.w	r5, r9, #2
 800ae56:	3d01      	subs	r5, #1
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f8c8 5010 	str.w	r5, [r8, #16]
 800ae5e:	4621      	mov	r1, r4
 800ae60:	f7ff fdf5 	bl	800aa4e <_Bfree>
 800ae64:	4640      	mov	r0, r8
 800ae66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae6a:	3101      	adds	r1, #1
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	e7c7      	b.n	800ae00 <__lshift+0x1c>
 800ae70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ae74:	3301      	adds	r3, #1
 800ae76:	e7cd      	b.n	800ae14 <__lshift+0x30>
 800ae78:	4651      	mov	r1, sl
 800ae7a:	e7dc      	b.n	800ae36 <__lshift+0x52>
 800ae7c:	3904      	subs	r1, #4
 800ae7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae82:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae86:	459c      	cmp	ip, r3
 800ae88:	d8f9      	bhi.n	800ae7e <__lshift+0x9a>
 800ae8a:	e7e4      	b.n	800ae56 <__lshift+0x72>

0800ae8c <__mcmp>:
 800ae8c:	6903      	ldr	r3, [r0, #16]
 800ae8e:	690a      	ldr	r2, [r1, #16]
 800ae90:	1a9b      	subs	r3, r3, r2
 800ae92:	b530      	push	{r4, r5, lr}
 800ae94:	d10c      	bne.n	800aeb0 <__mcmp+0x24>
 800ae96:	0092      	lsls	r2, r2, #2
 800ae98:	3014      	adds	r0, #20
 800ae9a:	3114      	adds	r1, #20
 800ae9c:	1884      	adds	r4, r0, r2
 800ae9e:	4411      	add	r1, r2
 800aea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aea8:	4295      	cmp	r5, r2
 800aeaa:	d003      	beq.n	800aeb4 <__mcmp+0x28>
 800aeac:	d305      	bcc.n	800aeba <__mcmp+0x2e>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	bd30      	pop	{r4, r5, pc}
 800aeb4:	42a0      	cmp	r0, r4
 800aeb6:	d3f3      	bcc.n	800aea0 <__mcmp+0x14>
 800aeb8:	e7fa      	b.n	800aeb0 <__mcmp+0x24>
 800aeba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aebe:	e7f7      	b.n	800aeb0 <__mcmp+0x24>

0800aec0 <__mdiff>:
 800aec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aec4:	460d      	mov	r5, r1
 800aec6:	4607      	mov	r7, r0
 800aec8:	4611      	mov	r1, r2
 800aeca:	4628      	mov	r0, r5
 800aecc:	4614      	mov	r4, r2
 800aece:	f7ff ffdd 	bl	800ae8c <__mcmp>
 800aed2:	1e06      	subs	r6, r0, #0
 800aed4:	d108      	bne.n	800aee8 <__mdiff+0x28>
 800aed6:	4631      	mov	r1, r6
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7ff fd84 	bl	800a9e6 <_Balloc>
 800aede:	2301      	movs	r3, #1
 800aee0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800aee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aee8:	bfa4      	itt	ge
 800aeea:	4623      	movge	r3, r4
 800aeec:	462c      	movge	r4, r5
 800aeee:	4638      	mov	r0, r7
 800aef0:	6861      	ldr	r1, [r4, #4]
 800aef2:	bfa6      	itte	ge
 800aef4:	461d      	movge	r5, r3
 800aef6:	2600      	movge	r6, #0
 800aef8:	2601      	movlt	r6, #1
 800aefa:	f7ff fd74 	bl	800a9e6 <_Balloc>
 800aefe:	692b      	ldr	r3, [r5, #16]
 800af00:	60c6      	str	r6, [r0, #12]
 800af02:	6926      	ldr	r6, [r4, #16]
 800af04:	f105 0914 	add.w	r9, r5, #20
 800af08:	f104 0214 	add.w	r2, r4, #20
 800af0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800af10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800af14:	f100 0514 	add.w	r5, r0, #20
 800af18:	f04f 0e00 	mov.w	lr, #0
 800af1c:	f852 ab04 	ldr.w	sl, [r2], #4
 800af20:	f859 4b04 	ldr.w	r4, [r9], #4
 800af24:	fa1e f18a 	uxtah	r1, lr, sl
 800af28:	b2a3      	uxth	r3, r4
 800af2a:	1ac9      	subs	r1, r1, r3
 800af2c:	0c23      	lsrs	r3, r4, #16
 800af2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800af32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800af36:	b289      	uxth	r1, r1
 800af38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800af3c:	45c8      	cmp	r8, r9
 800af3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800af42:	4694      	mov	ip, r2
 800af44:	f845 3b04 	str.w	r3, [r5], #4
 800af48:	d8e8      	bhi.n	800af1c <__mdiff+0x5c>
 800af4a:	45bc      	cmp	ip, r7
 800af4c:	d304      	bcc.n	800af58 <__mdiff+0x98>
 800af4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800af52:	b183      	cbz	r3, 800af76 <__mdiff+0xb6>
 800af54:	6106      	str	r6, [r0, #16]
 800af56:	e7c5      	b.n	800aee4 <__mdiff+0x24>
 800af58:	f85c 1b04 	ldr.w	r1, [ip], #4
 800af5c:	fa1e f381 	uxtah	r3, lr, r1
 800af60:	141a      	asrs	r2, r3, #16
 800af62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af66:	b29b      	uxth	r3, r3
 800af68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800af70:	f845 3b04 	str.w	r3, [r5], #4
 800af74:	e7e9      	b.n	800af4a <__mdiff+0x8a>
 800af76:	3e01      	subs	r6, #1
 800af78:	e7e9      	b.n	800af4e <__mdiff+0x8e>
	...

0800af7c <__ulp>:
 800af7c:	4b12      	ldr	r3, [pc, #72]	; (800afc8 <__ulp+0x4c>)
 800af7e:	ee10 2a90 	vmov	r2, s1
 800af82:	401a      	ands	r2, r3
 800af84:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	dd04      	ble.n	800af96 <__ulp+0x1a>
 800af8c:	2000      	movs	r0, #0
 800af8e:	4619      	mov	r1, r3
 800af90:	ec41 0b10 	vmov	d0, r0, r1
 800af94:	4770      	bx	lr
 800af96:	425b      	negs	r3, r3
 800af98:	151b      	asrs	r3, r3, #20
 800af9a:	2b13      	cmp	r3, #19
 800af9c:	f04f 0000 	mov.w	r0, #0
 800afa0:	f04f 0100 	mov.w	r1, #0
 800afa4:	dc04      	bgt.n	800afb0 <__ulp+0x34>
 800afa6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800afaa:	fa42 f103 	asr.w	r1, r2, r3
 800afae:	e7ef      	b.n	800af90 <__ulp+0x14>
 800afb0:	3b14      	subs	r3, #20
 800afb2:	2b1e      	cmp	r3, #30
 800afb4:	f04f 0201 	mov.w	r2, #1
 800afb8:	bfda      	itte	le
 800afba:	f1c3 031f 	rsble	r3, r3, #31
 800afbe:	fa02 f303 	lslle.w	r3, r2, r3
 800afc2:	4613      	movgt	r3, r2
 800afc4:	4618      	mov	r0, r3
 800afc6:	e7e3      	b.n	800af90 <__ulp+0x14>
 800afc8:	7ff00000 	.word	0x7ff00000

0800afcc <__b2d>:
 800afcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afce:	6905      	ldr	r5, [r0, #16]
 800afd0:	f100 0714 	add.w	r7, r0, #20
 800afd4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800afd8:	1f2e      	subs	r6, r5, #4
 800afda:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800afde:	4620      	mov	r0, r4
 800afe0:	f7ff fdc5 	bl	800ab6e <__hi0bits>
 800afe4:	f1c0 0320 	rsb	r3, r0, #32
 800afe8:	280a      	cmp	r0, #10
 800afea:	600b      	str	r3, [r1, #0]
 800afec:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b064 <__b2d+0x98>
 800aff0:	dc14      	bgt.n	800b01c <__b2d+0x50>
 800aff2:	f1c0 0e0b 	rsb	lr, r0, #11
 800aff6:	fa24 f10e 	lsr.w	r1, r4, lr
 800affa:	42b7      	cmp	r7, r6
 800affc:	ea41 030c 	orr.w	r3, r1, ip
 800b000:	bf34      	ite	cc
 800b002:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b006:	2100      	movcs	r1, #0
 800b008:	3015      	adds	r0, #21
 800b00a:	fa04 f000 	lsl.w	r0, r4, r0
 800b00e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b012:	ea40 0201 	orr.w	r2, r0, r1
 800b016:	ec43 2b10 	vmov	d0, r2, r3
 800b01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b01c:	42b7      	cmp	r7, r6
 800b01e:	bf3a      	itte	cc
 800b020:	f1a5 0608 	subcc.w	r6, r5, #8
 800b024:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b028:	2100      	movcs	r1, #0
 800b02a:	380b      	subs	r0, #11
 800b02c:	d015      	beq.n	800b05a <__b2d+0x8e>
 800b02e:	4084      	lsls	r4, r0
 800b030:	f1c0 0520 	rsb	r5, r0, #32
 800b034:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b038:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b03c:	42be      	cmp	r6, r7
 800b03e:	fa21 fc05 	lsr.w	ip, r1, r5
 800b042:	ea44 030c 	orr.w	r3, r4, ip
 800b046:	bf8c      	ite	hi
 800b048:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b04c:	2400      	movls	r4, #0
 800b04e:	fa01 f000 	lsl.w	r0, r1, r0
 800b052:	40ec      	lsrs	r4, r5
 800b054:	ea40 0204 	orr.w	r2, r0, r4
 800b058:	e7dd      	b.n	800b016 <__b2d+0x4a>
 800b05a:	ea44 030c 	orr.w	r3, r4, ip
 800b05e:	460a      	mov	r2, r1
 800b060:	e7d9      	b.n	800b016 <__b2d+0x4a>
 800b062:	bf00      	nop
 800b064:	3ff00000 	.word	0x3ff00000

0800b068 <__d2b>:
 800b068:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b06c:	460e      	mov	r6, r1
 800b06e:	2101      	movs	r1, #1
 800b070:	ec59 8b10 	vmov	r8, r9, d0
 800b074:	4615      	mov	r5, r2
 800b076:	f7ff fcb6 	bl	800a9e6 <_Balloc>
 800b07a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b07e:	4607      	mov	r7, r0
 800b080:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b084:	bb34      	cbnz	r4, 800b0d4 <__d2b+0x6c>
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	f1b8 0300 	subs.w	r3, r8, #0
 800b08c:	d027      	beq.n	800b0de <__d2b+0x76>
 800b08e:	a802      	add	r0, sp, #8
 800b090:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b094:	f7ff fd8a 	bl	800abac <__lo0bits>
 800b098:	9900      	ldr	r1, [sp, #0]
 800b09a:	b1f0      	cbz	r0, 800b0da <__d2b+0x72>
 800b09c:	9a01      	ldr	r2, [sp, #4]
 800b09e:	f1c0 0320 	rsb	r3, r0, #32
 800b0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	40c2      	lsrs	r2, r0
 800b0aa:	617b      	str	r3, [r7, #20]
 800b0ac:	9201      	str	r2, [sp, #4]
 800b0ae:	9b01      	ldr	r3, [sp, #4]
 800b0b0:	61bb      	str	r3, [r7, #24]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	bf14      	ite	ne
 800b0b6:	2102      	movne	r1, #2
 800b0b8:	2101      	moveq	r1, #1
 800b0ba:	6139      	str	r1, [r7, #16]
 800b0bc:	b1c4      	cbz	r4, 800b0f0 <__d2b+0x88>
 800b0be:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b0c2:	4404      	add	r4, r0
 800b0c4:	6034      	str	r4, [r6, #0]
 800b0c6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0ca:	6028      	str	r0, [r5, #0]
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	b003      	add	sp, #12
 800b0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0d8:	e7d5      	b.n	800b086 <__d2b+0x1e>
 800b0da:	6179      	str	r1, [r7, #20]
 800b0dc:	e7e7      	b.n	800b0ae <__d2b+0x46>
 800b0de:	a801      	add	r0, sp, #4
 800b0e0:	f7ff fd64 	bl	800abac <__lo0bits>
 800b0e4:	9b01      	ldr	r3, [sp, #4]
 800b0e6:	617b      	str	r3, [r7, #20]
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	6139      	str	r1, [r7, #16]
 800b0ec:	3020      	adds	r0, #32
 800b0ee:	e7e5      	b.n	800b0bc <__d2b+0x54>
 800b0f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b0f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0f8:	6030      	str	r0, [r6, #0]
 800b0fa:	6918      	ldr	r0, [r3, #16]
 800b0fc:	f7ff fd37 	bl	800ab6e <__hi0bits>
 800b100:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b104:	e7e1      	b.n	800b0ca <__d2b+0x62>

0800b106 <__ratio>:
 800b106:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b10a:	4688      	mov	r8, r1
 800b10c:	4669      	mov	r1, sp
 800b10e:	4681      	mov	r9, r0
 800b110:	f7ff ff5c 	bl	800afcc <__b2d>
 800b114:	a901      	add	r1, sp, #4
 800b116:	4640      	mov	r0, r8
 800b118:	ec57 6b10 	vmov	r6, r7, d0
 800b11c:	f7ff ff56 	bl	800afcc <__b2d>
 800b120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b124:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b128:	eba3 0c02 	sub.w	ip, r3, r2
 800b12c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b130:	1a9b      	subs	r3, r3, r2
 800b132:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b136:	ec5b ab10 	vmov	sl, fp, d0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bfce      	itee	gt
 800b13e:	463a      	movgt	r2, r7
 800b140:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b144:	465a      	movle	r2, fp
 800b146:	4659      	mov	r1, fp
 800b148:	463d      	mov	r5, r7
 800b14a:	bfd4      	ite	le
 800b14c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b150:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b154:	4630      	mov	r0, r6
 800b156:	ee10 2a10 	vmov	r2, s0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4629      	mov	r1, r5
 800b15e:	f7f5 fb95 	bl	800088c <__aeabi_ddiv>
 800b162:	ec41 0b10 	vmov	d0, r0, r1
 800b166:	b003      	add	sp, #12
 800b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b16c <__copybits>:
 800b16c:	3901      	subs	r1, #1
 800b16e:	b510      	push	{r4, lr}
 800b170:	1149      	asrs	r1, r1, #5
 800b172:	6914      	ldr	r4, [r2, #16]
 800b174:	3101      	adds	r1, #1
 800b176:	f102 0314 	add.w	r3, r2, #20
 800b17a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b17e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b182:	42a3      	cmp	r3, r4
 800b184:	4602      	mov	r2, r0
 800b186:	d303      	bcc.n	800b190 <__copybits+0x24>
 800b188:	2300      	movs	r3, #0
 800b18a:	428a      	cmp	r2, r1
 800b18c:	d305      	bcc.n	800b19a <__copybits+0x2e>
 800b18e:	bd10      	pop	{r4, pc}
 800b190:	f853 2b04 	ldr.w	r2, [r3], #4
 800b194:	f840 2b04 	str.w	r2, [r0], #4
 800b198:	e7f3      	b.n	800b182 <__copybits+0x16>
 800b19a:	f842 3b04 	str.w	r3, [r2], #4
 800b19e:	e7f4      	b.n	800b18a <__copybits+0x1e>

0800b1a0 <__any_on>:
 800b1a0:	f100 0214 	add.w	r2, r0, #20
 800b1a4:	6900      	ldr	r0, [r0, #16]
 800b1a6:	114b      	asrs	r3, r1, #5
 800b1a8:	4298      	cmp	r0, r3
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	db11      	blt.n	800b1d2 <__any_on+0x32>
 800b1ae:	dd0a      	ble.n	800b1c6 <__any_on+0x26>
 800b1b0:	f011 011f 	ands.w	r1, r1, #31
 800b1b4:	d007      	beq.n	800b1c6 <__any_on+0x26>
 800b1b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1ba:	fa24 f001 	lsr.w	r0, r4, r1
 800b1be:	fa00 f101 	lsl.w	r1, r0, r1
 800b1c2:	428c      	cmp	r4, r1
 800b1c4:	d10b      	bne.n	800b1de <__any_on+0x3e>
 800b1c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d803      	bhi.n	800b1d6 <__any_on+0x36>
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	bd10      	pop	{r4, pc}
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	e7f7      	b.n	800b1c6 <__any_on+0x26>
 800b1d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	d0f5      	beq.n	800b1ca <__any_on+0x2a>
 800b1de:	2001      	movs	r0, #1
 800b1e0:	e7f6      	b.n	800b1d0 <__any_on+0x30>

0800b1e2 <_calloc_r>:
 800b1e2:	b538      	push	{r3, r4, r5, lr}
 800b1e4:	fb02 f401 	mul.w	r4, r2, r1
 800b1e8:	4621      	mov	r1, r4
 800b1ea:	f7fe f9fd 	bl	80095e8 <_malloc_r>
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	b118      	cbz	r0, 800b1fa <_calloc_r+0x18>
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	f7fe f9a1 	bl	800953c <memset>
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	bd38      	pop	{r3, r4, r5, pc}

0800b1fe <__ssputs_r>:
 800b1fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b202:	688e      	ldr	r6, [r1, #8]
 800b204:	429e      	cmp	r6, r3
 800b206:	4682      	mov	sl, r0
 800b208:	460c      	mov	r4, r1
 800b20a:	4690      	mov	r8, r2
 800b20c:	4699      	mov	r9, r3
 800b20e:	d837      	bhi.n	800b280 <__ssputs_r+0x82>
 800b210:	898a      	ldrh	r2, [r1, #12]
 800b212:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b216:	d031      	beq.n	800b27c <__ssputs_r+0x7e>
 800b218:	6825      	ldr	r5, [r4, #0]
 800b21a:	6909      	ldr	r1, [r1, #16]
 800b21c:	1a6f      	subs	r7, r5, r1
 800b21e:	6965      	ldr	r5, [r4, #20]
 800b220:	2302      	movs	r3, #2
 800b222:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b226:	fb95 f5f3 	sdiv	r5, r5, r3
 800b22a:	f109 0301 	add.w	r3, r9, #1
 800b22e:	443b      	add	r3, r7
 800b230:	429d      	cmp	r5, r3
 800b232:	bf38      	it	cc
 800b234:	461d      	movcc	r5, r3
 800b236:	0553      	lsls	r3, r2, #21
 800b238:	d530      	bpl.n	800b29c <__ssputs_r+0x9e>
 800b23a:	4629      	mov	r1, r5
 800b23c:	f7fe f9d4 	bl	80095e8 <_malloc_r>
 800b240:	4606      	mov	r6, r0
 800b242:	b950      	cbnz	r0, 800b25a <__ssputs_r+0x5c>
 800b244:	230c      	movs	r3, #12
 800b246:	f8ca 3000 	str.w	r3, [sl]
 800b24a:	89a3      	ldrh	r3, [r4, #12]
 800b24c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b250:	81a3      	strh	r3, [r4, #12]
 800b252:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b25a:	463a      	mov	r2, r7
 800b25c:	6921      	ldr	r1, [r4, #16]
 800b25e:	f7ff fbb5 	bl	800a9cc <memcpy>
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b26c:	81a3      	strh	r3, [r4, #12]
 800b26e:	6126      	str	r6, [r4, #16]
 800b270:	6165      	str	r5, [r4, #20]
 800b272:	443e      	add	r6, r7
 800b274:	1bed      	subs	r5, r5, r7
 800b276:	6026      	str	r6, [r4, #0]
 800b278:	60a5      	str	r5, [r4, #8]
 800b27a:	464e      	mov	r6, r9
 800b27c:	454e      	cmp	r6, r9
 800b27e:	d900      	bls.n	800b282 <__ssputs_r+0x84>
 800b280:	464e      	mov	r6, r9
 800b282:	4632      	mov	r2, r6
 800b284:	4641      	mov	r1, r8
 800b286:	6820      	ldr	r0, [r4, #0]
 800b288:	f000 fab3 	bl	800b7f2 <memmove>
 800b28c:	68a3      	ldr	r3, [r4, #8]
 800b28e:	1b9b      	subs	r3, r3, r6
 800b290:	60a3      	str	r3, [r4, #8]
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	441e      	add	r6, r3
 800b296:	6026      	str	r6, [r4, #0]
 800b298:	2000      	movs	r0, #0
 800b29a:	e7dc      	b.n	800b256 <__ssputs_r+0x58>
 800b29c:	462a      	mov	r2, r5
 800b29e:	f000 fac1 	bl	800b824 <_realloc_r>
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d1e2      	bne.n	800b26e <__ssputs_r+0x70>
 800b2a8:	6921      	ldr	r1, [r4, #16]
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	f7fe f94e 	bl	800954c <_free_r>
 800b2b0:	e7c8      	b.n	800b244 <__ssputs_r+0x46>
	...

0800b2b4 <_svfiprintf_r>:
 800b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	461d      	mov	r5, r3
 800b2ba:	898b      	ldrh	r3, [r1, #12]
 800b2bc:	061f      	lsls	r7, r3, #24
 800b2be:	b09d      	sub	sp, #116	; 0x74
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	4616      	mov	r6, r2
 800b2c6:	d50f      	bpl.n	800b2e8 <_svfiprintf_r+0x34>
 800b2c8:	690b      	ldr	r3, [r1, #16]
 800b2ca:	b96b      	cbnz	r3, 800b2e8 <_svfiprintf_r+0x34>
 800b2cc:	2140      	movs	r1, #64	; 0x40
 800b2ce:	f7fe f98b 	bl	80095e8 <_malloc_r>
 800b2d2:	6020      	str	r0, [r4, #0]
 800b2d4:	6120      	str	r0, [r4, #16]
 800b2d6:	b928      	cbnz	r0, 800b2e4 <_svfiprintf_r+0x30>
 800b2d8:	230c      	movs	r3, #12
 800b2da:	f8c8 3000 	str.w	r3, [r8]
 800b2de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2e2:	e0c8      	b.n	800b476 <_svfiprintf_r+0x1c2>
 800b2e4:	2340      	movs	r3, #64	; 0x40
 800b2e6:	6163      	str	r3, [r4, #20]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ec:	2320      	movs	r3, #32
 800b2ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2f2:	2330      	movs	r3, #48	; 0x30
 800b2f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2f8:	9503      	str	r5, [sp, #12]
 800b2fa:	f04f 0b01 	mov.w	fp, #1
 800b2fe:	4637      	mov	r7, r6
 800b300:	463d      	mov	r5, r7
 800b302:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b306:	b10b      	cbz	r3, 800b30c <_svfiprintf_r+0x58>
 800b308:	2b25      	cmp	r3, #37	; 0x25
 800b30a:	d13e      	bne.n	800b38a <_svfiprintf_r+0xd6>
 800b30c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b310:	d00b      	beq.n	800b32a <_svfiprintf_r+0x76>
 800b312:	4653      	mov	r3, sl
 800b314:	4632      	mov	r2, r6
 800b316:	4621      	mov	r1, r4
 800b318:	4640      	mov	r0, r8
 800b31a:	f7ff ff70 	bl	800b1fe <__ssputs_r>
 800b31e:	3001      	adds	r0, #1
 800b320:	f000 80a4 	beq.w	800b46c <_svfiprintf_r+0x1b8>
 800b324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b326:	4453      	add	r3, sl
 800b328:	9309      	str	r3, [sp, #36]	; 0x24
 800b32a:	783b      	ldrb	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 809d 	beq.w	800b46c <_svfiprintf_r+0x1b8>
 800b332:	2300      	movs	r3, #0
 800b334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b33c:	9304      	str	r3, [sp, #16]
 800b33e:	9307      	str	r3, [sp, #28]
 800b340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b344:	931a      	str	r3, [sp, #104]	; 0x68
 800b346:	462f      	mov	r7, r5
 800b348:	2205      	movs	r2, #5
 800b34a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b34e:	4850      	ldr	r0, [pc, #320]	; (800b490 <_svfiprintf_r+0x1dc>)
 800b350:	f7f4 ff66 	bl	8000220 <memchr>
 800b354:	9b04      	ldr	r3, [sp, #16]
 800b356:	b9d0      	cbnz	r0, 800b38e <_svfiprintf_r+0xda>
 800b358:	06d9      	lsls	r1, r3, #27
 800b35a:	bf44      	itt	mi
 800b35c:	2220      	movmi	r2, #32
 800b35e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b362:	071a      	lsls	r2, r3, #28
 800b364:	bf44      	itt	mi
 800b366:	222b      	movmi	r2, #43	; 0x2b
 800b368:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b36c:	782a      	ldrb	r2, [r5, #0]
 800b36e:	2a2a      	cmp	r2, #42	; 0x2a
 800b370:	d015      	beq.n	800b39e <_svfiprintf_r+0xea>
 800b372:	9a07      	ldr	r2, [sp, #28]
 800b374:	462f      	mov	r7, r5
 800b376:	2000      	movs	r0, #0
 800b378:	250a      	movs	r5, #10
 800b37a:	4639      	mov	r1, r7
 800b37c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b380:	3b30      	subs	r3, #48	; 0x30
 800b382:	2b09      	cmp	r3, #9
 800b384:	d94d      	bls.n	800b422 <_svfiprintf_r+0x16e>
 800b386:	b1b8      	cbz	r0, 800b3b8 <_svfiprintf_r+0x104>
 800b388:	e00f      	b.n	800b3aa <_svfiprintf_r+0xf6>
 800b38a:	462f      	mov	r7, r5
 800b38c:	e7b8      	b.n	800b300 <_svfiprintf_r+0x4c>
 800b38e:	4a40      	ldr	r2, [pc, #256]	; (800b490 <_svfiprintf_r+0x1dc>)
 800b390:	1a80      	subs	r0, r0, r2
 800b392:	fa0b f000 	lsl.w	r0, fp, r0
 800b396:	4318      	orrs	r0, r3
 800b398:	9004      	str	r0, [sp, #16]
 800b39a:	463d      	mov	r5, r7
 800b39c:	e7d3      	b.n	800b346 <_svfiprintf_r+0x92>
 800b39e:	9a03      	ldr	r2, [sp, #12]
 800b3a0:	1d11      	adds	r1, r2, #4
 800b3a2:	6812      	ldr	r2, [r2, #0]
 800b3a4:	9103      	str	r1, [sp, #12]
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	db01      	blt.n	800b3ae <_svfiprintf_r+0xfa>
 800b3aa:	9207      	str	r2, [sp, #28]
 800b3ac:	e004      	b.n	800b3b8 <_svfiprintf_r+0x104>
 800b3ae:	4252      	negs	r2, r2
 800b3b0:	f043 0302 	orr.w	r3, r3, #2
 800b3b4:	9207      	str	r2, [sp, #28]
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	783b      	ldrb	r3, [r7, #0]
 800b3ba:	2b2e      	cmp	r3, #46	; 0x2e
 800b3bc:	d10c      	bne.n	800b3d8 <_svfiprintf_r+0x124>
 800b3be:	787b      	ldrb	r3, [r7, #1]
 800b3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800b3c2:	d133      	bne.n	800b42c <_svfiprintf_r+0x178>
 800b3c4:	9b03      	ldr	r3, [sp, #12]
 800b3c6:	1d1a      	adds	r2, r3, #4
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	9203      	str	r2, [sp, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	bfb8      	it	lt
 800b3d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3d4:	3702      	adds	r7, #2
 800b3d6:	9305      	str	r3, [sp, #20]
 800b3d8:	4d2e      	ldr	r5, [pc, #184]	; (800b494 <_svfiprintf_r+0x1e0>)
 800b3da:	7839      	ldrb	r1, [r7, #0]
 800b3dc:	2203      	movs	r2, #3
 800b3de:	4628      	mov	r0, r5
 800b3e0:	f7f4 ff1e 	bl	8000220 <memchr>
 800b3e4:	b138      	cbz	r0, 800b3f6 <_svfiprintf_r+0x142>
 800b3e6:	2340      	movs	r3, #64	; 0x40
 800b3e8:	1b40      	subs	r0, r0, r5
 800b3ea:	fa03 f000 	lsl.w	r0, r3, r0
 800b3ee:	9b04      	ldr	r3, [sp, #16]
 800b3f0:	4303      	orrs	r3, r0
 800b3f2:	3701      	adds	r7, #1
 800b3f4:	9304      	str	r3, [sp, #16]
 800b3f6:	7839      	ldrb	r1, [r7, #0]
 800b3f8:	4827      	ldr	r0, [pc, #156]	; (800b498 <_svfiprintf_r+0x1e4>)
 800b3fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3fe:	2206      	movs	r2, #6
 800b400:	1c7e      	adds	r6, r7, #1
 800b402:	f7f4 ff0d 	bl	8000220 <memchr>
 800b406:	2800      	cmp	r0, #0
 800b408:	d038      	beq.n	800b47c <_svfiprintf_r+0x1c8>
 800b40a:	4b24      	ldr	r3, [pc, #144]	; (800b49c <_svfiprintf_r+0x1e8>)
 800b40c:	bb13      	cbnz	r3, 800b454 <_svfiprintf_r+0x1a0>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	3307      	adds	r3, #7
 800b412:	f023 0307 	bic.w	r3, r3, #7
 800b416:	3308      	adds	r3, #8
 800b418:	9303      	str	r3, [sp, #12]
 800b41a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b41c:	444b      	add	r3, r9
 800b41e:	9309      	str	r3, [sp, #36]	; 0x24
 800b420:	e76d      	b.n	800b2fe <_svfiprintf_r+0x4a>
 800b422:	fb05 3202 	mla	r2, r5, r2, r3
 800b426:	2001      	movs	r0, #1
 800b428:	460f      	mov	r7, r1
 800b42a:	e7a6      	b.n	800b37a <_svfiprintf_r+0xc6>
 800b42c:	2300      	movs	r3, #0
 800b42e:	3701      	adds	r7, #1
 800b430:	9305      	str	r3, [sp, #20]
 800b432:	4619      	mov	r1, r3
 800b434:	250a      	movs	r5, #10
 800b436:	4638      	mov	r0, r7
 800b438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b43c:	3a30      	subs	r2, #48	; 0x30
 800b43e:	2a09      	cmp	r2, #9
 800b440:	d903      	bls.n	800b44a <_svfiprintf_r+0x196>
 800b442:	2b00      	cmp	r3, #0
 800b444:	d0c8      	beq.n	800b3d8 <_svfiprintf_r+0x124>
 800b446:	9105      	str	r1, [sp, #20]
 800b448:	e7c6      	b.n	800b3d8 <_svfiprintf_r+0x124>
 800b44a:	fb05 2101 	mla	r1, r5, r1, r2
 800b44e:	2301      	movs	r3, #1
 800b450:	4607      	mov	r7, r0
 800b452:	e7f0      	b.n	800b436 <_svfiprintf_r+0x182>
 800b454:	ab03      	add	r3, sp, #12
 800b456:	9300      	str	r3, [sp, #0]
 800b458:	4622      	mov	r2, r4
 800b45a:	4b11      	ldr	r3, [pc, #68]	; (800b4a0 <_svfiprintf_r+0x1ec>)
 800b45c:	a904      	add	r1, sp, #16
 800b45e:	4640      	mov	r0, r8
 800b460:	f3af 8000 	nop.w
 800b464:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b468:	4681      	mov	r9, r0
 800b46a:	d1d6      	bne.n	800b41a <_svfiprintf_r+0x166>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	065b      	lsls	r3, r3, #25
 800b470:	f53f af35 	bmi.w	800b2de <_svfiprintf_r+0x2a>
 800b474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b476:	b01d      	add	sp, #116	; 0x74
 800b478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47c:	ab03      	add	r3, sp, #12
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	4622      	mov	r2, r4
 800b482:	4b07      	ldr	r3, [pc, #28]	; (800b4a0 <_svfiprintf_r+0x1ec>)
 800b484:	a904      	add	r1, sp, #16
 800b486:	4640      	mov	r0, r8
 800b488:	f000 f882 	bl	800b590 <_printf_i>
 800b48c:	e7ea      	b.n	800b464 <_svfiprintf_r+0x1b0>
 800b48e:	bf00      	nop
 800b490:	0800bbb4 	.word	0x0800bbb4
 800b494:	0800bbba 	.word	0x0800bbba
 800b498:	0800bbbe 	.word	0x0800bbbe
 800b49c:	00000000 	.word	0x00000000
 800b4a0:	0800b1ff 	.word	0x0800b1ff

0800b4a4 <_printf_common>:
 800b4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a8:	4691      	mov	r9, r2
 800b4aa:	461f      	mov	r7, r3
 800b4ac:	688a      	ldr	r2, [r1, #8]
 800b4ae:	690b      	ldr	r3, [r1, #16]
 800b4b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	bfb8      	it	lt
 800b4b8:	4613      	movlt	r3, r2
 800b4ba:	f8c9 3000 	str.w	r3, [r9]
 800b4be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	b112      	cbz	r2, 800b4ce <_printf_common+0x2a>
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	f8c9 3000 	str.w	r3, [r9]
 800b4ce:	6823      	ldr	r3, [r4, #0]
 800b4d0:	0699      	lsls	r1, r3, #26
 800b4d2:	bf42      	ittt	mi
 800b4d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b4d8:	3302      	addmi	r3, #2
 800b4da:	f8c9 3000 	strmi.w	r3, [r9]
 800b4de:	6825      	ldr	r5, [r4, #0]
 800b4e0:	f015 0506 	ands.w	r5, r5, #6
 800b4e4:	d107      	bne.n	800b4f6 <_printf_common+0x52>
 800b4e6:	f104 0a19 	add.w	sl, r4, #25
 800b4ea:	68e3      	ldr	r3, [r4, #12]
 800b4ec:	f8d9 2000 	ldr.w	r2, [r9]
 800b4f0:	1a9b      	subs	r3, r3, r2
 800b4f2:	42ab      	cmp	r3, r5
 800b4f4:	dc28      	bgt.n	800b548 <_printf_common+0xa4>
 800b4f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b4fa:	6822      	ldr	r2, [r4, #0]
 800b4fc:	3300      	adds	r3, #0
 800b4fe:	bf18      	it	ne
 800b500:	2301      	movne	r3, #1
 800b502:	0692      	lsls	r2, r2, #26
 800b504:	d42d      	bmi.n	800b562 <_printf_common+0xbe>
 800b506:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b50a:	4639      	mov	r1, r7
 800b50c:	4630      	mov	r0, r6
 800b50e:	47c0      	blx	r8
 800b510:	3001      	adds	r0, #1
 800b512:	d020      	beq.n	800b556 <_printf_common+0xb2>
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	68e5      	ldr	r5, [r4, #12]
 800b518:	f8d9 2000 	ldr.w	r2, [r9]
 800b51c:	f003 0306 	and.w	r3, r3, #6
 800b520:	2b04      	cmp	r3, #4
 800b522:	bf08      	it	eq
 800b524:	1aad      	subeq	r5, r5, r2
 800b526:	68a3      	ldr	r3, [r4, #8]
 800b528:	6922      	ldr	r2, [r4, #16]
 800b52a:	bf0c      	ite	eq
 800b52c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b530:	2500      	movne	r5, #0
 800b532:	4293      	cmp	r3, r2
 800b534:	bfc4      	itt	gt
 800b536:	1a9b      	subgt	r3, r3, r2
 800b538:	18ed      	addgt	r5, r5, r3
 800b53a:	f04f 0900 	mov.w	r9, #0
 800b53e:	341a      	adds	r4, #26
 800b540:	454d      	cmp	r5, r9
 800b542:	d11a      	bne.n	800b57a <_printf_common+0xd6>
 800b544:	2000      	movs	r0, #0
 800b546:	e008      	b.n	800b55a <_printf_common+0xb6>
 800b548:	2301      	movs	r3, #1
 800b54a:	4652      	mov	r2, sl
 800b54c:	4639      	mov	r1, r7
 800b54e:	4630      	mov	r0, r6
 800b550:	47c0      	blx	r8
 800b552:	3001      	adds	r0, #1
 800b554:	d103      	bne.n	800b55e <_printf_common+0xba>
 800b556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55e:	3501      	adds	r5, #1
 800b560:	e7c3      	b.n	800b4ea <_printf_common+0x46>
 800b562:	18e1      	adds	r1, r4, r3
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	2030      	movs	r0, #48	; 0x30
 800b568:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b56c:	4422      	add	r2, r4
 800b56e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b572:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b576:	3302      	adds	r3, #2
 800b578:	e7c5      	b.n	800b506 <_printf_common+0x62>
 800b57a:	2301      	movs	r3, #1
 800b57c:	4622      	mov	r2, r4
 800b57e:	4639      	mov	r1, r7
 800b580:	4630      	mov	r0, r6
 800b582:	47c0      	blx	r8
 800b584:	3001      	adds	r0, #1
 800b586:	d0e6      	beq.n	800b556 <_printf_common+0xb2>
 800b588:	f109 0901 	add.w	r9, r9, #1
 800b58c:	e7d8      	b.n	800b540 <_printf_common+0x9c>
	...

0800b590 <_printf_i>:
 800b590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b594:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b598:	460c      	mov	r4, r1
 800b59a:	7e09      	ldrb	r1, [r1, #24]
 800b59c:	b085      	sub	sp, #20
 800b59e:	296e      	cmp	r1, #110	; 0x6e
 800b5a0:	4617      	mov	r7, r2
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	4698      	mov	r8, r3
 800b5a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5a8:	f000 80b3 	beq.w	800b712 <_printf_i+0x182>
 800b5ac:	d822      	bhi.n	800b5f4 <_printf_i+0x64>
 800b5ae:	2963      	cmp	r1, #99	; 0x63
 800b5b0:	d036      	beq.n	800b620 <_printf_i+0x90>
 800b5b2:	d80a      	bhi.n	800b5ca <_printf_i+0x3a>
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	f000 80b9 	beq.w	800b72c <_printf_i+0x19c>
 800b5ba:	2958      	cmp	r1, #88	; 0x58
 800b5bc:	f000 8083 	beq.w	800b6c6 <_printf_i+0x136>
 800b5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b5c8:	e032      	b.n	800b630 <_printf_i+0xa0>
 800b5ca:	2964      	cmp	r1, #100	; 0x64
 800b5cc:	d001      	beq.n	800b5d2 <_printf_i+0x42>
 800b5ce:	2969      	cmp	r1, #105	; 0x69
 800b5d0:	d1f6      	bne.n	800b5c0 <_printf_i+0x30>
 800b5d2:	6820      	ldr	r0, [r4, #0]
 800b5d4:	6813      	ldr	r3, [r2, #0]
 800b5d6:	0605      	lsls	r5, r0, #24
 800b5d8:	f103 0104 	add.w	r1, r3, #4
 800b5dc:	d52a      	bpl.n	800b634 <_printf_i+0xa4>
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	6011      	str	r1, [r2, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	da03      	bge.n	800b5ee <_printf_i+0x5e>
 800b5e6:	222d      	movs	r2, #45	; 0x2d
 800b5e8:	425b      	negs	r3, r3
 800b5ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b5ee:	486f      	ldr	r0, [pc, #444]	; (800b7ac <_printf_i+0x21c>)
 800b5f0:	220a      	movs	r2, #10
 800b5f2:	e039      	b.n	800b668 <_printf_i+0xd8>
 800b5f4:	2973      	cmp	r1, #115	; 0x73
 800b5f6:	f000 809d 	beq.w	800b734 <_printf_i+0x1a4>
 800b5fa:	d808      	bhi.n	800b60e <_printf_i+0x7e>
 800b5fc:	296f      	cmp	r1, #111	; 0x6f
 800b5fe:	d020      	beq.n	800b642 <_printf_i+0xb2>
 800b600:	2970      	cmp	r1, #112	; 0x70
 800b602:	d1dd      	bne.n	800b5c0 <_printf_i+0x30>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	f043 0320 	orr.w	r3, r3, #32
 800b60a:	6023      	str	r3, [r4, #0]
 800b60c:	e003      	b.n	800b616 <_printf_i+0x86>
 800b60e:	2975      	cmp	r1, #117	; 0x75
 800b610:	d017      	beq.n	800b642 <_printf_i+0xb2>
 800b612:	2978      	cmp	r1, #120	; 0x78
 800b614:	d1d4      	bne.n	800b5c0 <_printf_i+0x30>
 800b616:	2378      	movs	r3, #120	; 0x78
 800b618:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b61c:	4864      	ldr	r0, [pc, #400]	; (800b7b0 <_printf_i+0x220>)
 800b61e:	e055      	b.n	800b6cc <_printf_i+0x13c>
 800b620:	6813      	ldr	r3, [r2, #0]
 800b622:	1d19      	adds	r1, r3, #4
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6011      	str	r1, [r2, #0]
 800b628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b62c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b630:	2301      	movs	r3, #1
 800b632:	e08c      	b.n	800b74e <_printf_i+0x1be>
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6011      	str	r1, [r2, #0]
 800b638:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b63c:	bf18      	it	ne
 800b63e:	b21b      	sxthne	r3, r3
 800b640:	e7cf      	b.n	800b5e2 <_printf_i+0x52>
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	6825      	ldr	r5, [r4, #0]
 800b646:	1d18      	adds	r0, r3, #4
 800b648:	6010      	str	r0, [r2, #0]
 800b64a:	0628      	lsls	r0, r5, #24
 800b64c:	d501      	bpl.n	800b652 <_printf_i+0xc2>
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	e002      	b.n	800b658 <_printf_i+0xc8>
 800b652:	0668      	lsls	r0, r5, #25
 800b654:	d5fb      	bpl.n	800b64e <_printf_i+0xbe>
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	4854      	ldr	r0, [pc, #336]	; (800b7ac <_printf_i+0x21c>)
 800b65a:	296f      	cmp	r1, #111	; 0x6f
 800b65c:	bf14      	ite	ne
 800b65e:	220a      	movne	r2, #10
 800b660:	2208      	moveq	r2, #8
 800b662:	2100      	movs	r1, #0
 800b664:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b668:	6865      	ldr	r5, [r4, #4]
 800b66a:	60a5      	str	r5, [r4, #8]
 800b66c:	2d00      	cmp	r5, #0
 800b66e:	f2c0 8095 	blt.w	800b79c <_printf_i+0x20c>
 800b672:	6821      	ldr	r1, [r4, #0]
 800b674:	f021 0104 	bic.w	r1, r1, #4
 800b678:	6021      	str	r1, [r4, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d13d      	bne.n	800b6fa <_printf_i+0x16a>
 800b67e:	2d00      	cmp	r5, #0
 800b680:	f040 808e 	bne.w	800b7a0 <_printf_i+0x210>
 800b684:	4665      	mov	r5, ip
 800b686:	2a08      	cmp	r2, #8
 800b688:	d10b      	bne.n	800b6a2 <_printf_i+0x112>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	07db      	lsls	r3, r3, #31
 800b68e:	d508      	bpl.n	800b6a2 <_printf_i+0x112>
 800b690:	6923      	ldr	r3, [r4, #16]
 800b692:	6862      	ldr	r2, [r4, #4]
 800b694:	429a      	cmp	r2, r3
 800b696:	bfde      	ittt	le
 800b698:	2330      	movle	r3, #48	; 0x30
 800b69a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b69e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b6a2:	ebac 0305 	sub.w	r3, ip, r5
 800b6a6:	6123      	str	r3, [r4, #16]
 800b6a8:	f8cd 8000 	str.w	r8, [sp]
 800b6ac:	463b      	mov	r3, r7
 800b6ae:	aa03      	add	r2, sp, #12
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7ff fef6 	bl	800b4a4 <_printf_common>
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d14d      	bne.n	800b758 <_printf_i+0x1c8>
 800b6bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6c0:	b005      	add	sp, #20
 800b6c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c6:	4839      	ldr	r0, [pc, #228]	; (800b7ac <_printf_i+0x21c>)
 800b6c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b6cc:	6813      	ldr	r3, [r2, #0]
 800b6ce:	6821      	ldr	r1, [r4, #0]
 800b6d0:	1d1d      	adds	r5, r3, #4
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6015      	str	r5, [r2, #0]
 800b6d6:	060a      	lsls	r2, r1, #24
 800b6d8:	d50b      	bpl.n	800b6f2 <_printf_i+0x162>
 800b6da:	07ca      	lsls	r2, r1, #31
 800b6dc:	bf44      	itt	mi
 800b6de:	f041 0120 	orrmi.w	r1, r1, #32
 800b6e2:	6021      	strmi	r1, [r4, #0]
 800b6e4:	b91b      	cbnz	r3, 800b6ee <_printf_i+0x15e>
 800b6e6:	6822      	ldr	r2, [r4, #0]
 800b6e8:	f022 0220 	bic.w	r2, r2, #32
 800b6ec:	6022      	str	r2, [r4, #0]
 800b6ee:	2210      	movs	r2, #16
 800b6f0:	e7b7      	b.n	800b662 <_printf_i+0xd2>
 800b6f2:	064d      	lsls	r5, r1, #25
 800b6f4:	bf48      	it	mi
 800b6f6:	b29b      	uxthmi	r3, r3
 800b6f8:	e7ef      	b.n	800b6da <_printf_i+0x14a>
 800b6fa:	4665      	mov	r5, ip
 800b6fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800b700:	fb02 3311 	mls	r3, r2, r1, r3
 800b704:	5cc3      	ldrb	r3, [r0, r3]
 800b706:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b70a:	460b      	mov	r3, r1
 800b70c:	2900      	cmp	r1, #0
 800b70e:	d1f5      	bne.n	800b6fc <_printf_i+0x16c>
 800b710:	e7b9      	b.n	800b686 <_printf_i+0xf6>
 800b712:	6813      	ldr	r3, [r2, #0]
 800b714:	6825      	ldr	r5, [r4, #0]
 800b716:	6961      	ldr	r1, [r4, #20]
 800b718:	1d18      	adds	r0, r3, #4
 800b71a:	6010      	str	r0, [r2, #0]
 800b71c:	0628      	lsls	r0, r5, #24
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	d501      	bpl.n	800b726 <_printf_i+0x196>
 800b722:	6019      	str	r1, [r3, #0]
 800b724:	e002      	b.n	800b72c <_printf_i+0x19c>
 800b726:	066a      	lsls	r2, r5, #25
 800b728:	d5fb      	bpl.n	800b722 <_printf_i+0x192>
 800b72a:	8019      	strh	r1, [r3, #0]
 800b72c:	2300      	movs	r3, #0
 800b72e:	6123      	str	r3, [r4, #16]
 800b730:	4665      	mov	r5, ip
 800b732:	e7b9      	b.n	800b6a8 <_printf_i+0x118>
 800b734:	6813      	ldr	r3, [r2, #0]
 800b736:	1d19      	adds	r1, r3, #4
 800b738:	6011      	str	r1, [r2, #0]
 800b73a:	681d      	ldr	r5, [r3, #0]
 800b73c:	6862      	ldr	r2, [r4, #4]
 800b73e:	2100      	movs	r1, #0
 800b740:	4628      	mov	r0, r5
 800b742:	f7f4 fd6d 	bl	8000220 <memchr>
 800b746:	b108      	cbz	r0, 800b74c <_printf_i+0x1bc>
 800b748:	1b40      	subs	r0, r0, r5
 800b74a:	6060      	str	r0, [r4, #4]
 800b74c:	6863      	ldr	r3, [r4, #4]
 800b74e:	6123      	str	r3, [r4, #16]
 800b750:	2300      	movs	r3, #0
 800b752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b756:	e7a7      	b.n	800b6a8 <_printf_i+0x118>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	462a      	mov	r2, r5
 800b75c:	4639      	mov	r1, r7
 800b75e:	4630      	mov	r0, r6
 800b760:	47c0      	blx	r8
 800b762:	3001      	adds	r0, #1
 800b764:	d0aa      	beq.n	800b6bc <_printf_i+0x12c>
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	079b      	lsls	r3, r3, #30
 800b76a:	d413      	bmi.n	800b794 <_printf_i+0x204>
 800b76c:	68e0      	ldr	r0, [r4, #12]
 800b76e:	9b03      	ldr	r3, [sp, #12]
 800b770:	4298      	cmp	r0, r3
 800b772:	bfb8      	it	lt
 800b774:	4618      	movlt	r0, r3
 800b776:	e7a3      	b.n	800b6c0 <_printf_i+0x130>
 800b778:	2301      	movs	r3, #1
 800b77a:	464a      	mov	r2, r9
 800b77c:	4639      	mov	r1, r7
 800b77e:	4630      	mov	r0, r6
 800b780:	47c0      	blx	r8
 800b782:	3001      	adds	r0, #1
 800b784:	d09a      	beq.n	800b6bc <_printf_i+0x12c>
 800b786:	3501      	adds	r5, #1
 800b788:	68e3      	ldr	r3, [r4, #12]
 800b78a:	9a03      	ldr	r2, [sp, #12]
 800b78c:	1a9b      	subs	r3, r3, r2
 800b78e:	42ab      	cmp	r3, r5
 800b790:	dcf2      	bgt.n	800b778 <_printf_i+0x1e8>
 800b792:	e7eb      	b.n	800b76c <_printf_i+0x1dc>
 800b794:	2500      	movs	r5, #0
 800b796:	f104 0919 	add.w	r9, r4, #25
 800b79a:	e7f5      	b.n	800b788 <_printf_i+0x1f8>
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d1ac      	bne.n	800b6fa <_printf_i+0x16a>
 800b7a0:	7803      	ldrb	r3, [r0, #0]
 800b7a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7aa:	e76c      	b.n	800b686 <_printf_i+0xf6>
 800b7ac:	0800bbc5 	.word	0x0800bbc5
 800b7b0:	0800bbd6 	.word	0x0800bbd6

0800b7b4 <strncmp>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	b16a      	cbz	r2, 800b7d4 <strncmp+0x20>
 800b7b8:	3901      	subs	r1, #1
 800b7ba:	1884      	adds	r4, r0, r2
 800b7bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b7c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d103      	bne.n	800b7d0 <strncmp+0x1c>
 800b7c8:	42a0      	cmp	r0, r4
 800b7ca:	d001      	beq.n	800b7d0 <strncmp+0x1c>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1f5      	bne.n	800b7bc <strncmp+0x8>
 800b7d0:	1a98      	subs	r0, r3, r2
 800b7d2:	bd10      	pop	{r4, pc}
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	e7fc      	b.n	800b7d2 <strncmp+0x1e>

0800b7d8 <__ascii_wctomb>:
 800b7d8:	b149      	cbz	r1, 800b7ee <__ascii_wctomb+0x16>
 800b7da:	2aff      	cmp	r2, #255	; 0xff
 800b7dc:	bf85      	ittet	hi
 800b7de:	238a      	movhi	r3, #138	; 0x8a
 800b7e0:	6003      	strhi	r3, [r0, #0]
 800b7e2:	700a      	strbls	r2, [r1, #0]
 800b7e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b7e8:	bf98      	it	ls
 800b7ea:	2001      	movls	r0, #1
 800b7ec:	4770      	bx	lr
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	4770      	bx	lr

0800b7f2 <memmove>:
 800b7f2:	4288      	cmp	r0, r1
 800b7f4:	b510      	push	{r4, lr}
 800b7f6:	eb01 0302 	add.w	r3, r1, r2
 800b7fa:	d807      	bhi.n	800b80c <memmove+0x1a>
 800b7fc:	1e42      	subs	r2, r0, #1
 800b7fe:	4299      	cmp	r1, r3
 800b800:	d00a      	beq.n	800b818 <memmove+0x26>
 800b802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b806:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b80a:	e7f8      	b.n	800b7fe <memmove+0xc>
 800b80c:	4283      	cmp	r3, r0
 800b80e:	d9f5      	bls.n	800b7fc <memmove+0xa>
 800b810:	1881      	adds	r1, r0, r2
 800b812:	1ad2      	subs	r2, r2, r3
 800b814:	42d3      	cmn	r3, r2
 800b816:	d100      	bne.n	800b81a <memmove+0x28>
 800b818:	bd10      	pop	{r4, pc}
 800b81a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b81e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b822:	e7f7      	b.n	800b814 <memmove+0x22>

0800b824 <_realloc_r>:
 800b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b826:	4607      	mov	r7, r0
 800b828:	4614      	mov	r4, r2
 800b82a:	460e      	mov	r6, r1
 800b82c:	b921      	cbnz	r1, 800b838 <_realloc_r+0x14>
 800b82e:	4611      	mov	r1, r2
 800b830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b834:	f7fd bed8 	b.w	80095e8 <_malloc_r>
 800b838:	b922      	cbnz	r2, 800b844 <_realloc_r+0x20>
 800b83a:	f7fd fe87 	bl	800954c <_free_r>
 800b83e:	4625      	mov	r5, r4
 800b840:	4628      	mov	r0, r5
 800b842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b844:	f000 f814 	bl	800b870 <_malloc_usable_size_r>
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d20f      	bcs.n	800b86c <_realloc_r+0x48>
 800b84c:	4621      	mov	r1, r4
 800b84e:	4638      	mov	r0, r7
 800b850:	f7fd feca 	bl	80095e8 <_malloc_r>
 800b854:	4605      	mov	r5, r0
 800b856:	2800      	cmp	r0, #0
 800b858:	d0f2      	beq.n	800b840 <_realloc_r+0x1c>
 800b85a:	4631      	mov	r1, r6
 800b85c:	4622      	mov	r2, r4
 800b85e:	f7ff f8b5 	bl	800a9cc <memcpy>
 800b862:	4631      	mov	r1, r6
 800b864:	4638      	mov	r0, r7
 800b866:	f7fd fe71 	bl	800954c <_free_r>
 800b86a:	e7e9      	b.n	800b840 <_realloc_r+0x1c>
 800b86c:	4635      	mov	r5, r6
 800b86e:	e7e7      	b.n	800b840 <_realloc_r+0x1c>

0800b870 <_malloc_usable_size_r>:
 800b870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b874:	1f18      	subs	r0, r3, #4
 800b876:	2b00      	cmp	r3, #0
 800b878:	bfbc      	itt	lt
 800b87a:	580b      	ldrlt	r3, [r1, r0]
 800b87c:	18c0      	addlt	r0, r0, r3
 800b87e:	4770      	bx	lr

0800b880 <round>:
 800b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b882:	ec57 6b10 	vmov	r6, r7, d0
 800b886:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800b88a:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800b88e:	2c13      	cmp	r4, #19
 800b890:	463b      	mov	r3, r7
 800b892:	463d      	mov	r5, r7
 800b894:	dc17      	bgt.n	800b8c6 <round+0x46>
 800b896:	2c00      	cmp	r4, #0
 800b898:	da09      	bge.n	800b8ae <round+0x2e>
 800b89a:	3401      	adds	r4, #1
 800b89c:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800b8a0:	d103      	bne.n	800b8aa <round+0x2a>
 800b8a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b8a6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8aa:	2100      	movs	r1, #0
 800b8ac:	e02c      	b.n	800b908 <round+0x88>
 800b8ae:	4a18      	ldr	r2, [pc, #96]	; (800b910 <round+0x90>)
 800b8b0:	4122      	asrs	r2, r4
 800b8b2:	4217      	tst	r7, r2
 800b8b4:	d100      	bne.n	800b8b8 <round+0x38>
 800b8b6:	b19e      	cbz	r6, 800b8e0 <round+0x60>
 800b8b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b8bc:	4123      	asrs	r3, r4
 800b8be:	442b      	add	r3, r5
 800b8c0:	ea23 0302 	bic.w	r3, r3, r2
 800b8c4:	e7f1      	b.n	800b8aa <round+0x2a>
 800b8c6:	2c33      	cmp	r4, #51	; 0x33
 800b8c8:	dd0d      	ble.n	800b8e6 <round+0x66>
 800b8ca:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b8ce:	d107      	bne.n	800b8e0 <round+0x60>
 800b8d0:	4630      	mov	r0, r6
 800b8d2:	4639      	mov	r1, r7
 800b8d4:	ee10 2a10 	vmov	r2, s0
 800b8d8:	f7f4 fcf8 	bl	80002cc <__adddf3>
 800b8dc:	4606      	mov	r6, r0
 800b8de:	460f      	mov	r7, r1
 800b8e0:	ec47 6b10 	vmov	d0, r6, r7
 800b8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8e6:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800b8ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8ee:	40d0      	lsrs	r0, r2
 800b8f0:	4206      	tst	r6, r0
 800b8f2:	d0f5      	beq.n	800b8e0 <round+0x60>
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b8fa:	fa02 f404 	lsl.w	r4, r2, r4
 800b8fe:	1931      	adds	r1, r6, r4
 800b900:	bf28      	it	cs
 800b902:	189b      	addcs	r3, r3, r2
 800b904:	ea21 0100 	bic.w	r1, r1, r0
 800b908:	461f      	mov	r7, r3
 800b90a:	460e      	mov	r6, r1
 800b90c:	e7e8      	b.n	800b8e0 <round+0x60>
 800b90e:	bf00      	nop
 800b910:	000fffff 	.word	0x000fffff

0800b914 <_sbrk>:
 800b914:	4b04      	ldr	r3, [pc, #16]	; (800b928 <_sbrk+0x14>)
 800b916:	6819      	ldr	r1, [r3, #0]
 800b918:	4602      	mov	r2, r0
 800b91a:	b909      	cbnz	r1, 800b920 <_sbrk+0xc>
 800b91c:	4903      	ldr	r1, [pc, #12]	; (800b92c <_sbrk+0x18>)
 800b91e:	6019      	str	r1, [r3, #0]
 800b920:	6818      	ldr	r0, [r3, #0]
 800b922:	4402      	add	r2, r0
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	4770      	bx	lr
 800b928:	20000410 	.word	0x20000410
 800b92c:	200011d0 	.word	0x200011d0

0800b930 <_init>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	bf00      	nop
 800b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	469e      	mov	lr, r3
 800b93a:	4770      	bx	lr

0800b93c <_fini>:
 800b93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93e:	bf00      	nop
 800b940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b942:	bc08      	pop	{r3}
 800b944:	469e      	mov	lr, r3
 800b946:	4770      	bx	lr
